window.COURSE_DATA = {"language":"en","lastDownload":"2021-07-06T11:53:36-04:00","title":"Phase 2","modules":[{"id":20114,"name":"Discussion Questions","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g60e2972285c0b70f3712326bb1106593","items":[{"id":184936,"title":"Discussion Questions: Core React Concepts","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Mod4-DQ-1\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Mod4-DQ-1\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Mod4-DQ-1/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003cp\u003eEach person in your group should take one of the following topics and explain it to the group in their own words. Be sure to provide concrete examples in your explanations. For the remaining topics, discuss them as a whole group.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eComponents\u003c/li\u003e \u003cli\u003eNode Package Manager\u003c/li\u003e \u003cli\u003eJSX\u003c/li\u003e \u003cli\u003eStatic Components vs. Dynamic Components\u003c/li\u003e \u003cli\u003eImports and Exports\u003c/li\u003e \u003cli\u003eProps\u003c/li\u003e \u003c/ul\u003e ","exportId":"g60c7abef36b08553e1e2a6515ede6c57"},{"id":184937,"title":"Discussion Questions: Props vs. State","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"props-and-state-discussion-questions\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/props-and-state-discussion-questions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/props-and-state-discussion-questions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003col\u003e \u003cli\u003eWhat is the difference between \u003cem\u003eprops\u003c/em\u003e and \u003cem\u003estate\u003c/em\u003e in React?\u003c/li\u003e \u003cli\u003eWhen would you use state instead of props?\u003c/li\u003e \u003cli\u003eAssuming \u003ccode\u003eUserDetail\u003c/code\u003e is a component, what will its \u003cem\u003eprops\u003c/em\u003e be if it's rendered as follows:\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003econst user = {name: 'Spider Man', age: 32}\u003cbr\u003e\u003cbr\u003e\u0026lt;UserDetail title=\"Profile Page\" dog=\"Fido\" user={user} /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003eTake a look at \u003ccode\u003ehttps://learn.co\u003c/code\u003e. Pretend you were going to recreate a specific page. What top level components would you have? What props would they receive and what state would they own? What components would they have as children?\u003c/li\u003e \u003c/ol\u003e ","exportId":"g33cb99726d27b58c87e56c4b4c68da29"},{"id":184938,"title":"Discussion Questions: Exploring Props and State Further","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-dq-props-state\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-dq-props-state\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-dq-props-state/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this program, we have three components: \u003ccode\u003eApp\u003c/code\u003e, \u003ccode\u003eMasterHog\u003c/code\u003e, and \u003ccode\u003eBabyHog\u003c/code\u003e.\u003c/p\u003e  \u003ch6\u003e\n\u003ccode\u003eMasterHog\u003c/code\u003e:\u003c/h6\u003e  \u003cul\u003e \u003cli\u003eHas an eye color that can change via a radio button on the DOM\u003c/li\u003e \u003cli\u003eRenders three \u003ccode\u003eBabyHog\u003c/code\u003es, which inherit its eye color\u003c/li\u003e \u003cli\u003eOwns the non-variable data associated with each \u003ccode\u003eBabyHog\u003c/code\u003e. This includes their: name, eye color, and hobby. \u003cem\u003e(Obviously, \u003ccode\u003eMasterHog\u003c/code\u003e gets to name her babies, and they genetically inherit her eye color. Not obviously, \u003ccode\u003eMasterHog\u003c/code\u003e also gets to determine their hobbies)\u003c/em\u003e Look inside \u003ccode\u003esrc/db.js\u003c/code\u003e to see data defining what the \u003ccode\u003eBabyHog\u003c/code\u003e offspring should \"inherit.\"\u003c/li\u003e \u003c/ul\u003e  \u003ch6\u003e\n\u003ccode\u003eBabyHog\u003c/code\u003e:\u003c/h6\u003e  \u003cul\u003e \u003cli\u003eHas an eye color received from its parent\u003c/li\u003e \u003cli\u003eHas a hobby assigned by its parent\u003c/li\u003e \u003cli\u003eHas a name given by its parent\u003c/li\u003e \u003cli\u003eHas a variable weight, that can be changed via buttons\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e While the \u003ccode\u003eMasterHog\u003c/code\u003e component can change its own eye color via radio buttons, its children can only inherit the eye color of their parent!\u003c/p\u003e  \u003ch2\u003eDirections:\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUnderstanding the data associated with both the \u003ccode\u003eMasterHog\u003c/code\u003e as well as the \u003ccode\u003eBabyHog\u003c/code\u003e components, \u003cem\u003eplan out\u003c/em\u003e what data should be kept as state vs. props in each component and then implement it\u003c/li\u003e \u003cli\u003eMake use of the \u003ccode\u003esrc/db.js\u003c/code\u003e file (import it!). Hint: arrays can be mapped and return JSX! Just because the starter code has three \u003ccode\u003eBabyHog\u003c/code\u003e components written in doesn't mean it's an ideal solution\u003c/li\u003e \u003cli\u003eDepending on the \u003ccode\u003eBabyHog\u003c/code\u003e eye color, a different image should be rendered (several are being imported in the \u003ccode\u003eBabyHog\u003c/code\u003e component)\u003c/li\u003e \u003cli\u003eWhile the \u003ccode\u003echangeWeight\u003c/code\u003e method has been implemented in \u003ccode\u003eBabyHog\u003c/code\u003e, it is not 'hooked up' to the component. Make sure the function is invoked so our hogs can grow and shrink when either of the buttons are clicked. (Consider how \u003ccode\u003eMasterHog\u003c/code\u003e's \u003ccode\u003echangeEyeColor\u003c/code\u003e method is 'hooked up' if you are stuck here)\u003c/li\u003e \u003c/ul\u003e ","exportId":"ga9eb104b177e5fa002784bb3caa1b3c8"},{"id":184939,"title":"Discussion Questions: Conditional Rendering","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"M4-DQ3-Conditional-Rendering\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ3-Conditional-Rendering\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ3-Conditional-Rendering/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eGet together in groups and clone down this repository. For the purposes of this discussion question, you should work only out of \u003ccode\u003ecomponents/MenuBar.js\u003c/code\u003e and \u003ccode\u003econtainers/MainBox.js\u003c/code\u003e. Your end goal is to make this app function like so:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/3oFzmbfBOqAmBzA7AY/giphy.gif\" alt=\"alt text\" title=\"final\"\u003e\u003c/p\u003e  \u003cp\u003eA few things to think about:\u003c/p\u003e  \u003col\u003e \u003cli\u003eWhich component should have state?\u003c/li\u003e \u003cli\u003eBased on your answer to the question above, which component should have a method to change state?\u003c/li\u003e \u003cli\u003eWhich component should call the function that changes state?\u003c/li\u003e \u003cli\u003eWhich component is responsible for passing down props?\u003c/li\u003e \u003cli\u003eHow can state be used to manage the rendering of components and change the style of components already on the page?\u003c/li\u003e \u003c/ol\u003e ","exportId":"g61575855e24e111e9fa98fbba2a957a3"},{"id":184940,"title":"Danger Will Hoginson, Danger!","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"M4-DQ4-Passing-Callbacks-to-Comrade-Hogs-in-React\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ4-Passing-Callbacks-to-Comrade-Hogs-in-React\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ4-Passing-Callbacks-to-Comrade-Hogs-in-React/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch4\u003eWARNING: This lab contains potentially disrupting sounds. Please be conscious of other students around you who may not be fully immersed in the hog heaven that you are soon to be. Either use headphones OR mute your computer before starting this lab!\u003c/h4\u003e  \u003ch3\u003eOh no! Schmutziges hog GalaxySNote7 is at it again!\u003c/h3\u003e  \u003cp\u003eNo longer content grounding planes and delaying flights, this greased up hog is now stirring up trouble in the pig pen!\u003c/p\u003e  \u003cp\u003eWe know he is a filthy fellow, but which one? Rumor has it he was hanging out with Truffle Shuffle earlier, cramming his greedy little snout into the ground.\u003c/p\u003e  \u003cp\u003eFind GalaxySNote7 and help him alert his fellow hogs when someone touches his snout.\u003c/p\u003e  \u003ch3\u003eDeliverables:\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eSee the sample video stored in ./public for an idea on how to get started\u003c/li\u003e \u003cli\u003eOn click, GalaxySNote7 should trigger a change in state for the pig pen's environment\u003c/li\u003e \u003cli\u003eGalaxy and his hog cadre should react to this change in their environment and use the \u003ccode\u003eexclaim\u003c/code\u003e method to render their warnings\u003c/li\u003e \u003cli\u003eThink about what components should own what information\u003c/li\u003e \u003cli\u003eAdhere to React patterns --\u0026gt; information propagates up and down the component tree, but not sideways\u003c/li\u003e \u003cli\u003eUnderstanding this, draw out the component tree with your group. A component tree should show the components and the data (props!) that are communicated between them\u003c/li\u003e \u003cli\u003eAfter at least two seconds, things in the pig pen should cool off, and the environment should return to normal (this means we should be able to click on GalaxySNote7 again, instigating the same chain of events all over again AFTER he has cooled his jets)\u003c/li\u003e \u003cli\u003eOnce GalaxySNote7 is successfully instigating panic when he is tickled, incorporate the sounds where you see fit!\u003c/li\u003e \u003c/ul\u003e ","exportId":"ge6f6d60c51d837f32840b7cfb0e62f77"},{"id":184941,"title":"Discussion Questions: Sorting!","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"M4-DQ5-Observing-Selection-and-Insertion-Sort\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ5-Observing-Selection-and-Insertion-Sort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ5-Observing-Selection-and-Insertion-Sort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eSort!\u003c/h2\u003e  \u003cp\u003eAll you need to focus on is writing two sorting algorithms. One in \u003ccode\u003esorts/insertionSort.js\u003c/code\u003e and the other in \u003ccode\u003esorts/selectionSort.js\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eSelection Sort\u003c/h2\u003e  \u003cp\u003eSee this link: (\u003ca href=\"https://en.wikipedia.org/wiki/Selection_sort\"\u003ehttps://en.wikipedia.org/wiki/Selection_sort\u003c/a\u003e)   1. for every item in the collection   2. find the smallest item in the unsorted portion of the array and swap it with the current item\u003c/p\u003e  \u003ch2\u003eInsertion Sort\u003c/h2\u003e  \u003cp\u003eSee this link: \u003ca href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\u003ehttps://en.wikipedia.org/wiki/Insertion_sort\u003c/a\u003e   1. for every item in the collection    2. check if the previous item is greater than the current item   3. if greater, the current item is not in place: swap it with the previous item   4. repeat this process until the item is in the proper place   5. only then move on to the next item in the collection\u003c/p\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e to see your sorting algorithm played back to you visually in the browser:   - A red flash indicates that an array element has been \u003cem\u003ewritten\u003c/em\u003e   - A green flash indicates that an array element has been \u003cem\u003eread\u003c/em\u003e\u003c/p\u003e  \u003ch4\u003eHere is how your solution may look:\u003c/h4\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/example-solution-minified.gif\" alt=\"Example Solution\"\u003e\u003c/p\u003e  \u003ch3\u003eDeliverables\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eWrite insertion and selection sort in the \u003ccode\u003e./src\u003c/code\u003e directory\u003c/li\u003e \u003cli\u003eDiscuss an explanation for the different speeds of the sorts\u003c/li\u003e \u003cli\u003eUnderstanding that one visual action (either a read or write) is occurring for each array every unit of time (e.g. they have always completed the same amount of actions at any given point), discuss what this is an accurate, and inaccurate, time representation of.\u003c/li\u003e \u003cli\u003eProvide an explanation for how both changes in array sizes as well as changes in how scrambled the arrays are would affect performance for the sorting algorithms\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eTips\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eFeel free to alter the size of the arrays and duration of the steps in config.js\u003c/li\u003e \u003c/ul\u003e ","exportId":"g4c6e4e670cd166edc57f977b83ecd660"}]},{"id":20115,"name":"NPM","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g1e9e7bbd408666f60c21e7b7620b5db5","items":[{"id":184945,"title":"Introduction to NPM","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-npm-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/intro-to-npm-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-npm-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-npm-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce Node Package Manager (npm)\u003c/li\u003e\n\u003cli\u003eIntroduce \u003ca href=\"https://www.npmjs.com/\"\u003enpm's online platform\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eEnsure your environment is configured to use npm\u003c/li\u003e\n\u003cli\u003eReview important concepts related to package management in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eJavaScript has been around for many years now, and continues to serve as a\ncritical part of the modern, interactive web. There are web developers all over\nthe world writing JavaScript code, each contributing their own bits of work.\nThat's \u003cem\u003ea lot\u003c/em\u003e of code! In fact, there is a lot of \u003cem\u003eduplicate\u003c/em\u003e code. Multiple\nweb developers, over the years, have solved the same problems over and over.\u003c/p\u003e\n\n\u003cp\u003eFor these situations, we have JavaScript \u003cem\u003epackages\u003c/em\u003e. A package is a file or set\nof files full of existing, \u003cem\u003ereusable\u003c/em\u003e code. They are designed to be shared,\nallowing many web developers to use the same code in their own projects.\u003c/p\u003e\n\n\u003cp\u003eTo help organize these packages in relation to our own work, we use \u003cem\u003enpm\u003c/em\u003e, or\n\u003cem\u003eNode Package Manager\u003c/em\u003e. In this lesson, we will be discussing how npm works and\nwhy it is useful.\u003c/p\u003e\n\n\u003ch2\u003eThe Value of Existing Code\u003c/h2\u003e\n\n\u003cp\u003eWhile it is important that you learn the critical skills to problem solve with\ncode, it is equally important that we learn how to identify existing code that\nsuits our needs and incorporate it into our projects. We don't need to always be\n\u003cem\u003ereinventing the wheel\u003c/em\u003e and writing code that may already exist.\u003c/p\u003e\n\n\u003cp\u003eIn fact, with the amount of developers out in the world, it is likely someone\nelse has not only already invented the same wheel, but tested, upgraded and\ninnovated on it so that it is way better than anything we could write ourselves\nin a short period of time.\u003c/p\u003e\n\n\u003cp\u003eRemember, programming is all about providing a solution to a problem. When 'on\nthe job', so to speak, no one gets bonus points for concocting a novel/clever\nsolution to a problem for which good open source code already existed.\u003c/p\u003e\n\n\u003ch2\u003eSetting Up Node Package Manager\u003c/h2\u003e\n\n\u003cp\u003eBefore we continue, let's make sure your environment is all set to work with\nnpm.\u003c/p\u003e\n\n\u003cp\u003enpm is automatically installed along with \u003cem\u003eNode.js\u003c/em\u003e, which should already be\ninstalled on your system if you've worked through the JavaScript coursework. To\nconfirm you have node installed, enter the following into your command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enode -v\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf a version appears, you have Node.js. If, by chance, you do not have Node.js\ninstalled, you can use the \u003ca href=\"https://github.com/creationix/nvm\"\u003eNode Version Manager\u003c/a\u003e to install Node.js and\nkeep it up to date.\u003c/p\u003e\n\n\u003cp\u003eYou can also double check npm by running the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm -v\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA version number should appear in your terminal. If you'd like, you can update\nnpm by entering the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install --global npm\u003cbr\u003e# or, for short: npm install -g npm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, we've got it installed. But what is npm exactly?\u003c/p\u003e\n\n\u003ch2\u003eNPM Introduction\u003c/h2\u003e\n\n\u003cp\u003eAs mentioned, npm is a package manager for JavaScript. This means that npm works\nwith your JavaScript project directories via the command line, allowing you to\ninstall packages of preexisting code.\u003c/p\u003e\n\n\u003cp\u003eWhat sort of code? All kinds! Some packages are quite small, like\n\u003ca href=\"https://www.npmjs.com/package/isnumber\"\u003eisNumber\u003c/a\u003e, a package that has one function: to check if a value is a\nnumber. Some packages are much more complicated. Huge libraries and frameworks,\nincluding \u003ca href=\"https://www.npmjs.com/package/react\"\u003eReact\u003c/a\u003e and \u003ca href=\"https://expressjs.com/\"\u003eExpress\u003c/a\u003e, are available as npm packages.\nThese larger packages are often \u003cem\u003ethemselves\u003c/em\u003e built using a combination of other\npackages.\u003c/p\u003e\n\n\u003cp\u003eThis modular design, the ability to build a package using other packages, allows\nfor developers to continuously expand the JavaScript universe, creating new,\nmore powerful tools and applications on top of existing, tried and tested code.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003epackage.json\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAll JavaScript labs on Learn.co rely on npm packages for their tests. Many use the\n\u003ccode\u003elearn-browser\u003c/code\u003e npm package, which is built using hundreds of supporting\npackages, including the test framework, \u003ca href=\"https://mochajs.org/\"\u003eMocha\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe lessons themselves don't actually contain all of these packages' code.\nInstead, they contain a list of \u003cem\u003edependencies\u003c/em\u003e in a file called \u003ccode\u003epackage.json\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003epackage.json\u003c/code\u003e file tells you (and \u003ccode\u003enpm\u003c/code\u003e) everything about what packages are\nrequired for a specific JavaScript application, listing out each package name.\u003c/p\u003e\n\n\u003cp\u003eWhen we run the command \u003ccode\u003enpm install\u003c/code\u003e in a directory where a \u003ccode\u003epackage.json\u003c/code\u003e file\nis present, \u003ccode\u003enpm\u003c/code\u003e reads the names of each dependency from the \u003ccode\u003epackage.json\u003c/code\u003e\nfile and downloads the packages from \u003ca href=\"https://www.npmjs.com/\"\u003enpmjs.com\u003c/a\u003e, where they are hosted.\nIt then begins installing those packages - \u003cem\u003eBUT!\u003c/em\u003e those packages also have\n\u003cem\u003etheir own\u003c/em\u003e \u003ccode\u003epackage.json\u003c/code\u003e with their own dependencies! \u003ccode\u003enpm\u003c/code\u003e must also get\nthose packages, and if \u003cem\u003ethose packages\u003c/em\u003e have any dependencies, get them as well.\nSo on and so on. This is what we refer to as a \u003cem\u003edependency tree\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf you are working in a local environment running \u003ccode\u003enpm install\u003c/code\u003e creates a folder\ncalled \u003ccode\u003enode_modules\u003c/code\u003e, which contains all the downloaded packages. \u003cem\u003eNote\u003c/em\u003e: the\n\u003ccode\u003elearn\u003c/code\u003e gem may automatically run \u003ccode\u003enpm install\u003c/code\u003e when you fork a new lesson with\nit.\u003c/p\u003e\n\n\u003cp\u003eWhen building a project from scratch, you may realize you \u003cem\u003eneed\u003c/em\u003e some specific\npackage. We can install packages by running \u003ccode\u003enpm install \u0026lt;package_name\u0026gt;\u003c/code\u003e while\ninside a project directory. If you do not have a correctly structured\n\u003ccode\u003epackage.json\u003c/code\u003e file, the install \u003cem\u003ewill not work\u003c/em\u003e!\u003c/p\u003e\n\n\u003ch2\u003eA Little More on \u003ccode\u003epackage.json\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003epackage.json\u003c/code\u003e file is a key part of sharing JS code repositories on sites\nlike GitHub. Instead of having to include all the dependencies' code with every\nproject, we just include a small file, listing out what npm needs to get for the\nproject.\u003c/p\u003e\n\n\u003cp\u003eThe file also typically includes information about the project, such as the\nname, version, author and license.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003epackage.json\u003c/code\u003e file is written in JSON, so like an object in JavaScript, it\nis always wrapped in curly braces, and includes keys and values. A basic\nexample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e    \"name\": \"intro-to-npm-readme\",\u003cbr\u003e    \"version\": \"1.0.0\",\u003cbr\u003e    \"description\": \"An introduction to npm and package.json\",\u003cbr\u003e    \"main\": \"index.js\",\u003cbr\u003e    \"scripts\": {\u003cbr\u003e        \"test\": \"echo 'hot dog'\"\u003cbr\u003e    },\u003cbr\u003e    \"dependencies\": {\u003cbr\u003e        \"learn-browser\": \"^0.1.17\"\u003cbr\u003e    },\u003cbr\u003e    \"repository\": {\u003cbr\u003e        \"type\": \"git\",\u003cbr\u003e        \"url\": \"git+https://github.com/learn-co-curriculum/intro-to-npm-readme.git\"\u003cbr\u003e    },\u003cbr\u003e    \"author\": \"flatironschool\",\u003cbr\u003e    \"license\": \"ISC\",\u003cbr\u003e    \"bugs\": {\u003cbr\u003e        \"url\": \"https://github.com/learn-co-curriculum/intro-to-npm-readme/issues\"\u003cbr\u003e    },\u003cbr\u003e    \"homepage\":\u003cbr\u003e        \"https://github.com/learn-co-curriculum/intro-to-npm-readme#readme\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn your terminal, if you are in a directory with the above \u003ccode\u003epackage.json\u003c/code\u003e file\npresent, running \u003ccode\u003enpm test\u003c/code\u003e will return \"hot dog.\" This lesson actually does\ninclude this \u003ccode\u003epackage.json\u003c/code\u003e file, so try it for yourself!\u003c/p\u003e\n\n\u003cp\u003eThis works because the command \u003ccode\u003enpm test\u003c/code\u003e is saying: \"Hey npm, look in\n\u003ccode\u003epackage.json\u003c/code\u003e and find the script with the name of 'test', then execute its\nvalue in the terminal.\"\u003c/p\u003e\n\n\u003cp\u003eHaving this file present also means it is possible to install additional packages. There is one dependency already included:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"dependencies\": {\u003cbr\u003e  \"learn-browser\": \"^0.1.17\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning something like \u003ccode\u003enpm install react\u003c/code\u003e will add a second dependency:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"dependencies\": {\u003cbr\u003e  \"learn-browser\": \"^0.1.17\",\u003cbr\u003e  \"react\": \"^16.4.1\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTry it now! Following, take a look to see just how many dependencies (which\nReact relies on) have been added to your \u003ccode\u003enode_modules\u003c/code\u003e directory.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003enpm init\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eSince npm relies on a \u003ccode\u003epackage.json\u003c/code\u003e file, it has a built in command to \u003cem\u003ebuild\u003c/em\u003e\n\u003ccode\u003epackage.json\u003c/code\u003e files. Running \u003ccode\u003enpm init\u003c/code\u003e on the command line will begin a series\nof prompts, asking about specific content to include in the file. At the end, it\nwill create a file or edit an existing \u003ccode\u003epackage.json\u003c/code\u003e file. Very handy when you\nare creating your own projects from scratch!\u003c/p\u003e\n\n\u003ch4\u003eKey Terms\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003enpm - Node Package Manager, a command line tool for handling packages of reusable JavaScript code\u003c/li\u003e\n\u003cli\u003eNode - Node is a JavaScript runtime, allowing JavaScript to be run locally on your computer, instead of in a browser\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eFor all advanced JavaScript lessons, including React and Redux, we rely on npm\nto set up a lot of things 'under the hood'. The applications we build are made\npossible by the contributions of thousands of other coders before us!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRemember!\u003c/strong\u003e While endlessly fun, programming is a means to an end: we have a\nproblem/our employer has a problem, and we give the computer instructions to\ncrush the problem. If available, open, and secure code already exists do not\nhesitate to use it! Compared to physical goods, code snippets have less value\nattributed to novelty (there is a reason you won't see \"artisanal code\" being\nsold on \u003ca href=\"https://etsy.com\"\u003eEtsy\u003c/a\u003e).\u003c/p\u003e","exportId":"introduction-to-npm"}]},{"id":20116,"name":"Introduction to React","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g060aded8072543a45b837e3e9f35e45a","items":[{"id":184947,"title":"This is React","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"this-is-react-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/this-is-react-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/this-is-react-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/this-is-react-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn the world of web development, there are a number of hip names tossed around -\nAngular, Vue, React. These are some of the front end frameworks that have gained\npopularity over the last few years. These frameworks provide a standardized way\nof creating and deploying parts of web applications. This allows developers to\nput their energy and focus towards designing a good experience for end users of\nthe application.\u003c/p\u003e\n\n\u003cp\u003eThe following lessons are all about just one framework, React. Why learn React?\n\u003ca href=\"https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190\"\u003eIn the last few years, React has surpassed other frameworks in popularity and\ndemand\u003c/a\u003e. For good reason, too! In this lesson, we will discuss what React is and why it is so awesome and useful.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce the React framework at a high level\u003c/li\u003e\n\u003cli\u003eExplain some of the benefits of using React when developing web applications\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWhat is React?\u003c/h2\u003e\n\n\u003cp\u003eThe React framework is built entirely out of JavaScript, using a combination of\ndependencies. Using React might seem significantly different to what you're\nused to when writing vanilla JavaScript (or, in other words, just JavaScript). This is because React provides a\nspecific way to organize and structure the design of a web application.\u003c/p\u003e\n\n\u003cp\u003eUsing JSX, an extension of vanilla JavaScript with a specific syntax, we can\nwrite code that looks very similar to HTML. Snippets of this JSX get separated\nout into components, sort of like building blocks. \u003c/p\u003e\n\n\u003cp\u003eWhen combined, these components form a fully working web application. These\ncomponents let us separate code and functionality in a logical and easy to read\nway, producing highly reusable, independent, chunks.\u003c/p\u003e\n\n\u003ch2\u003eSome of the Awesome Features of React\u003c/h2\u003e\n\n\u003cp\u003eReact is more than JSX and components - React has a lot going on under the\nhood. Just to briefly touch on some of the cool features, React includes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea \u003cstrong\u003evirtual DOM\u003c/strong\u003e, that allows for fast, efficient, content rendering. Great for\nhighly interactive apps;\u003c/li\u003e\n\u003cli\u003ea \u003cstrong\u003edeclarative writing\u003c/strong\u003e structure, allowing you to simply express how your app\nshould look and let React handle updates and underlying data changes;\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBabel\u003c/strong\u003e: an included transpiler that converts modern JavaScript and custom\ncode like JSX into more widely compatible JavaScript;\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eWebpack\u003c/strong\u003e: a 'bundler' that takes all our work, along with any required dependency\ncode, and packages it all up in a single, transferable bundle\u003c/li\u003e\n\u003cli\u003eBuilt in ESLint functionality to help improve our code;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReact also has a recommended tool, \u003ccode\u003ecreate-react-app\u003c/code\u003e, that makes it easy to\ncreate a new React project from scratch. The \u003ccode\u003ecreate-react-app\u003c/code\u003e tool sets up\na preconfigured, default, project, ready to launch with \u003ccode\u003enpm start\u003c/code\u003e. This package\nincludes functionality built to be mobile friendly and progressive. That means apps\nwill work on all modern browsers and mobile devices. \u003c/p\u003e\n\n\u003cp\u003eReact is actively maintained by Facebook, and new features are added regularly! Their \u003ca href=\"https://reactjs.org/\"\u003edocs\u003c/a\u003e are well-written and translated into many languages. Once you have a good grasp on React, you will have the ability to create cutting-edge web applications and sites. Knowing React also opens doors to similar frameworks, such as React Native for building mobile apps.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eYou can imagine a framework is like a car - while it is interesting and useful\nto know how the engine works or how to fix a transmission, it isn't necessary\nfor using the car to get where you want to go. What is necessary is that you\nunderstand how to use the pedals, turn the wheel and change gears.\u003c/p\u003e\n\n\u003cp\u003eFirst, we will be covering what you need to know to use React. Later, we'll go\ninto more detail on the critical parts: the engine under the hood. By the end,\nyou will be able to quickly design and create your own React apps!\u003c/p\u003e","exportId":"this-is-react"},{"id":184949,"title":"Useful Tools for Working with React","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"some-useful-tools-for-writing-react\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/some-useful-tools-for-writing-react/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/some-useful-tools-for-writing-react\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/some-useful-tools-for-writing-react/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eHello everyone and welcome to React!\u003c/h2\u003e\n\n\u003cp\u003eBelow are some helpful resources that may accelerate your React learning:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eIf you're using Atom as your text editor, download a JSX plugin (a quick search for 'JSX' will reveal the most popular ones). This will give you some pretty great syntax highlighting for code that is specific to React, and will make coding easier. After the package is installed, open up your \u003ccode\u003epreferences\u003c/code\u003e in Atom. Depending on which package you choose, you may have to edit its settings so that it is the default syntax highlighter for files appended with \u003ccode\u003e.jsx\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eInstall the \u003ca href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\"\u003eReact Devtools Chrome Extension\u003c/a\u003e. This gives you access to some pretty great tools that make it a lot easier to debug your programs in React. Here is the \u003ca href=\"https://github.com/facebook/react-devtools#faq\"\u003erepo\u003c/a\u003e for the extension.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMost importantly, the official \u003ca href=\"https://reactjs.org/\"\u003eReact Documentation\u003c/a\u003e, courtesy of Facebook. While you won't have the time to read over all of it now, it might be good to have bookmarked while you learn React.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAs a bonus, take a look at \u003ca href=\"https://gist.github.com/odewahn/5a5eeb23279eed6a80d7798fdb47fe91\"\u003eerror handling in fetch\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003efetch(\"/api/foo\")\u003cbr\u003e  .then(response =\u0026gt; {\u003cbr\u003e    if (!response.ok) { throw response }\u003cbr\u003e    return response.json()  //we only get here if there is no error\u003cbr\u003e  })\u003cbr\u003e  .then(json =\u0026gt; {\u003cbr\u003e    doSomethingWithResult(json)\u003cbr\u003e  })\u003cbr\u003e  .catch(err =\u0026gt; {\u003cbr\u003e    err.text().then(errorMessage =\u0026gt; {\u003cbr\u003e      displayTheError(errorMessage)\u003cbr\u003e    })\u003cbr\u003e  })\n\u003c/code\u003e\u003c/pre\u003e","exportId":"useful-tools-for-working-with-react"}]},{"id":20117,"name":"Components and JSX","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gc9c31d4ecbff20fbf919dcd44b515ff1","items":[{"id":184950,"title":"Components","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll introduce the heart of React: components. This will include explaining why\nthey're important and examining a few examples. If the idea and application of\ncomponents don't click immediately, \u003cem\u003edo not worry!\u003c/em\u003e The different moving parts\nrequired to understand how to use them will fall into place as we move forward.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand React components\u003c/li\u003e\n\u003cli\u003eCreate React components and show the HTML they create\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's examine a high level overview of what a React component is before we\nimplement one. The official \u003ca href=\"https://reactjs.org/docs/components-and-props.html\"\u003eReact documentation on components\u003c/a\u003e\nsays it best:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt;Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.\u003c/p\u003e\n\n\u003cp\u003eComponents modularize both \u003cem\u003efunctionality\u003c/em\u003e and \u003cem\u003epresentation\u003c/em\u003e in our code. In\norder to understand how powerful this is, consider just how intricate web\napplications can become. The difficulty in logically arranging, architecting,\nand programming these web applications increases with their size. Components are\nlike little packages: they help us keep everything organized and predictable\nwhile abstracting the \u003ca href=\"https://en.wikipedia.org/wiki/Boilerplate_code\"\u003e'boiler plate'\u003c/a\u003e code. Each component\ncontains a snippet of code that describes what it should render to the DOM.\u003c/p\u003e\n\n\u003cp\u003eEnough of a description — let's see some examples! While the possibilities of\nwhat we can do with components are endless, the first thing we need to\nunderstand about them is the ways in which they act as code templates. Let's\nstart simply and build up from there using a simple example.\u003c/p\u003e\n\n\u003ch2\u003eReact Application Idea\u003c/h2\u003e\n\n\u003cp\u003eLet's imagine we want to post a blog article describing why Bjarne Stroustrup has the \u003ca href=\"https://www.youtube.com/watch?v=JBjjnqG0BP8\"\u003eperfect lecture oration\u003c/a\u003e. We also want our blog article to display comments made by readers.\u003c/p\u003e\n\n\u003ch4\u003eStep 1: write the components\u003c/h4\u003e\n\n\u003cp\u003eFirst, let's make a component to showcase an opinion:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Article extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You're probably used to just seeing \u003ccode\u003eclass Article extends Component\u003c/code\u003e. Just know that \u003ccode\u003eclass Article extends React.Component\u003c/code\u003e is an alternate syntax. Either way, it's doing the same exact thing.\u003c/p\u003e\n\n\u003cp\u003eTake a moment to read that code line by line:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea new class, \u003ccode\u003eArticle\u003c/code\u003e, is declared\u003c/li\u003e\n\u003cli\u003ethe class extends React's \u003ccode\u003ecomponent\u003c/code\u003e class (which provides us with built in methods and attributes)\u003c/li\u003e\n\u003cli\u003ethe class contains a \u003ccode\u003erender()\u003c/code\u003e method that defines exactly what the component should render to the page\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen React creates this element and adds it to the DOM, the resulting HTML will\nlook just as you would expect:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's see what it would look like, were we to only render this one component, in the DOM:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/component-article-example.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOk, that takes care of our \u003ccode\u003eArticle\u003c/code\u003e part of our application. Now let's make a\ncomponent to display a single user's comment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Comment extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        Naturally, I agree with this article.\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake the time to read that component line by line. Here is the HTML that this\nwould create when added to the DOM:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;Naturally, I agree with this article.\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn both of our examples, React is interpreting JavaScript code and spitting out\nplain old HTML that browsers will know how to represent to the user. While the\ncode inside the \u003ccode\u003ereturn()\u003c/code\u003e statement looks like simple HTML, it's actually JSX:\na specialized JavaScript syntax that resembles regular HTML. We will dive deeper\ninto JSX (which is actually quite wonderful) later.\u003c/p\u003e\n\n\u003cp\u003eOnce we have our components in hand, it's time to actually use them.\u003c/p\u003e\n\n\u003ch4\u003eStep 2: use the components\u003c/h4\u003e\n\n\u003cp\u003eNow that we have these components written, all we need to do is make sure some\nother component is making use of them in its \u003ccode\u003erender\u003c/code\u003e method. Every React\napplication has some top level component. Very often, this top level component\nis simply called \u003ccode\u003eApp\u003c/code\u003e. For our example, here's what it might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass App extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;Article /\u0026gt;\u003cbr\u003e        \u0026lt;Comment /\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we can see JSX coming into play a bit more. The code inside the \u003ccode\u003ereturn()\u003c/code\u003e\nstill looks a lot like regular HTML, but in addition to rendering a regular old\nHTML \u003ccode\u003ediv\u003c/code\u003e element we're also rendering our two components. We've created code\nthat is not only well structured and modular, but also a straightforward\ndescription of what we want the \u003ccode\u003eApp\u003c/code\u003e component to do: render the article first,\nfollowed by the comment. Here is what the resulting HTML will look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;Naturally, I agree with this article.\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/component-article-comment-example.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis unpacks logically. The \u003ccode\u003eApp\u003c/code\u003e component (being our top level component)\nwraps around both \u003ccode\u003eArticle\u003c/code\u003e and \u003ccode\u003eComment\u003c/code\u003e, and we already know what they look\nlike when they are turned into HTML.\u003c/p\u003e\n\n\u003cp\u003eAs you may expect, we refer to the \u003ccode\u003eApp\u003c/code\u003e component as the \u003cem\u003eparent\u003c/em\u003e component of\nboth the \u003ccode\u003eComment\u003c/code\u003e and \u003ccode\u003eArticle\u003c/code\u003e components. Inversely, we refer to \u003ccode\u003eComment\u003c/code\u003e\nand \u003ccode\u003eArticle\u003c/code\u003e as \u003cem\u003echildren\u003c/em\u003e components of \u003ccode\u003eApp\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eWe just introduced simplified, bare bones, React components. They are used to\nhouse modularized front end code. In our example, as is often the case, they\ncontain information on how a portion of our application should be turned into\nHTML.\u003c/p\u003e\n\n\u003cp\u003eGoing forward, we will continue with this example. We will show how components\ncan be re-used and how they can be written as dynamic templates that contain\ncontent that can change based on user actions.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/react-api.html\"\u003eReact Top-Level API\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/introducing-jsx.html\"\u003eIntroducing JSX\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"components"},{"id":184952,"title":"JSX","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-jsx\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-jsx/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-jsx\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-jsx/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll discuss using JSX, its syntax and how it is works within\nthe context of React components.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eTake a deeper look at JSX\u003c/li\u003e\n\u003cli\u003eExplore some of the unique syntax for JSX\u003c/li\u003e\n\u003cli\u003eUnderstand what is required to write valid JSX code\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is JSX?\u003c/h2\u003e\n\n\u003cp\u003eSimply put, JSX allows us to write HTML-like code in our JavaScript files. JSX\nis a syntax extension of JavaScript that creates a very special and extremely\nproductive marriage between HTML and JS.\u003c/p\u003e\n\n\u003cp\u003eWith JSX, we can write React components in an efficient and expressive manner.\nUltimately, JSX looks a lot like the end result we see in the browser (i.e.\nHTML), and is \u003cem\u003emuch\u003c/em\u003e faster to write, especially when incorporating a lot of\nJavaScript and dynamic content.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/l4HnT4tZzUozNFx4s/giphy.gif\" alt=\"Using JSX\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eImperative vs Declarative Programming\u003c/h2\u003e\n\n\u003cp\u003eJSX uses what is sometimes referred to as a \u003cem\u003edeclarative\u003c/em\u003e style of programming,\nwhereas most of the JavaScript code we've written so far would be considered\n\u003cem\u003eimperative\u003c/em\u003e. This may be the first time you're encountering these terms, but\nthat is okay. To write imperative code is to write code that describes \u003cem\u003ehow\u003c/em\u003e\nsomething is done in detail. To write declarative code is to write \u003cem\u003ewhat\u003c/em\u003e you\nwould like to do.\u003c/p\u003e\n\n\u003cp\u003eTo further explain, imagine you walk into a local restaurant with the intention\nof ordering a sandwich.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eTo order declaratively would be to say something like this: \"I would like one\ntoasted ham and cheese sandwich.\" Rather than worry about the details, you are\njust saying \u003cem\u003ewhat\u003c/em\u003e you want and letting the restaurant staff handle the\ndetails.\u003c/li\u003e\n\u003cli\u003eTo order imperatively would mean saying something like this instead: \"I would\nlike you to take three slices of ham, two slices of cheese and a jar of\nmayonaisse from the refrigerator and place them together on a clean counter.\nPlease also find two slices of bread. Stack the ham, cheese and bread in this\norder: bread, ham, ham, ham, cheese, cheese, bread. Remove the top slice of\nbread and apply a dollop of mayo. Replace top slice of bread and place\ncompleted sandwich in oven at 300 degrees for five minutes, then bring it to\nme on a plate.\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn general (and to the relief of restaurant staff everywhere), we prefer the\ndeclarative approach when speaking unless we are speifically instructing someone\nelse. Most of the JavaScript we've written is considered imperative because our\ncode is made of explicit steps. In plain JavaScript, to render a \u003ccode\u003ediv\u003c/code\u003e element\non the page we might end up writing something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet div = document.createElement('div')\u003cbr\u003ediv.textContent = \"hello world\"\u003cbr\u003edocument.body.appendChild(div)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThree distinct steps are used here. In JSX, however, we just need to write \u003cem\u003ewhat\u003c/em\u003e\nwe want, and allow React to figure things out behind the scenes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;hello world\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReact sees this and understands it to be JSX, \u003cstrong\u003enot HTML\u003c/strong\u003e. While the exact details\nof how it creates the DOM element differ from traditional DOM manipulation, the\nend result is the same: a \u003ccode\u003ediv\u003c/code\u003e element added to the page with the text 'hello\nworld' inside.\u003c/p\u003e\n\n\u003ch2\u003eWhat JSX Looks Like\u003c/h2\u003e\n\n\u003cp\u003eReact components return JSX within their \u003ccode\u003erender()\u003c/code\u003e methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Tweet extends Component {\u003cbr\u003e\u003cbr\u003e  currentTime = () =\u0026gt; new Date().toString()\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"tweet\"\u0026gt;\u003cbr\u003e        \u0026lt;img src=\"http://twitter.com/some-avatar.png\" className=\"tweet__avatar\" /\u0026gt;\u003cbr\u003e        \u0026lt;div className=\"tweet__body\"\u0026gt;\u003cbr\u003e            \u0026lt;p\u0026gt;We are writing this tweet in JSX. Holy moly!\u0026lt;/p\u0026gt;\u003cbr\u003e            \u0026lt;p\u0026gt;{ Math.floor(Math.random()*100)} retweets \u0026lt;/p\u0026gt;\u003cbr\u003e            \u0026lt;p\u0026gt;{ this.currentTime() }\u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa, isn't this interesting? It's HTML, but in our JS... with JS \u003cem\u003einside the\nHTML!\u003c/em\u003e Looking at this code, there are some important things to point out:\u003c/p\u003e\n\n\u003ch4\u003eJSX is \u003cem\u003enot\u003c/em\u003e a String\u003c/h4\u003e\n\n\u003cp\u003eThe JSX in the example is not wrapped in quotes. Think of it as another\ntype in JavaScript. \u003cstrong\u003eWe are not interpolating HTML Strings\u003c/strong\u003e like we do with\nstandard JavaScript DOM manipulation.\u003c/p\u003e\n\n\u003ch4\u003eJSX is the return value of the \u003ccode\u003erender()\u003c/code\u003e method\u003c/h4\u003e\n\n\u003cp\u003eEvery component you use needs a \u003ccode\u003erender()\u003c/code\u003e method that returns some valid JSX.\nAlthough our example displays six lines of JSX, this is done for readability\nonly. The entire return statement is wrapped in parentheses so it is considered\none 'chunk' of JSX code, with \u003cem\u003eone\u003c/em\u003e top level element.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;div  className=\"tweet\"\u0026gt;\u003cbr\u003e    ...\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eJSX Can Include JavaScript\u003c/h4\u003e\n\n\u003cp\u003eWhile writing our pseudo-HTML in JSX, we can also write vanilla JavaScript\n\u003cem\u003ein-line\u003c/em\u003e. We do this by wrapping the JavaScript code in curly braces.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;{ Math.floor(Math.random()*100) } retweets\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;{ this.currentTime() }\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example, we call the \u003ccode\u003eMath.floor()\u003c/code\u003e  and \u003ccode\u003eMath.random()\u003c/code\u003e methods\ndirectly, which will return a random number when the component is rendered.\u003c/p\u003e\n\n\u003cp\u003eWe \u003cem\u003ealso\u003c/em\u003e called a custom function, \u003ccode\u003ecurrentTime()\u003c/code\u003e, which returns the String\nvalue of the current date and time. In our example, because \u003ccode\u003ecurrentTime()\u003c/code\u003e is\nanother method within the Tweet class, we must prepend \u003ccode\u003ecurrentTime()\u003c/code\u003e with\n\u003ccode\u003ethis\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;{ this.currentTime() }\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote on Arrow Functions:\u003c/strong\u003e Syntax is important here! Since we're using an\narrow function for \u003ccode\u003ecurrentTime()\u003c/code\u003e,\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrentTime = () =\u0026gt; new Date().toString()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...we are \u003cem\u003eimplicitly binding\u003c/em\u003e the method to the Tweet class. Getting acquainted with\nusing \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"\u003earrow functions\u003c/a\u003e now will save headaches later.\u003c/p\u003e\n\n\u003cp\u003eAs we get into \u003cem\u003eprops\u003c/em\u003e in React, we sometimes need to call functions like\n\u003ccode\u003ecurrentTime()\u003c/code\u003e in a class \u003cem\u003edifferent from its origin\u003c/em\u003e. When this happens,\n\u003cstrong\u003ewithout the arrow function\u003c/strong\u003e, we often have to explicitly bind methods to the\nclass they are \u003cem\u003eoriginally from\u003c/em\u003e, causing us to write code like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethis.currentTime().bind(this)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWithout the \u003ccode\u003e.bind(this)\u003c/code\u003e, the \u003cem\u003efirst\u003c/em\u003e 'this' will refer to whatever object it\nis in when called, which can be a \u003cem\u003edifferent\u003c/em\u003e component.\u003c/p\u003e\n\n\u003ch4\u003eJSX Cannot Include \u003cem\u003eAll\u003c/em\u003e JavaScript Statements\u003c/h4\u003e\n\n\u003cp\u003eJSX is an extension of JavaScript, wrapping a lot of underlying function calls\nin a syntactically appealing style. This is why JSX code is considered\n\u003cem\u003edeclarative\u003c/em\u003e. When \u003cem\u003ewe're\u003c/em\u003e writing in JSX, it is equivalent to saying \"Make an\nh1 element with this content inside\" and letting React work on the element\ncreation and function calls. Because we follow the proper syntax, React knows\nthat when we write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"header\"\u0026gt;Hello!\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReact must convert this JSX into regular, imperative Javascript when\nit renders the component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eReact.createElement(\"h1\", {id: \"header\"}, \"Hello!\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich is then committed to the actual DOM as an \u003ccode\u003eh1\u003c/code\u003e DOM node. We never need\nto see this - all \u003cem\u003ewe\u003c/em\u003e write is the JSX, \u003ccode\u003e\u0026lt;h1 id=\"header\"\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDue to this, as well as JSX's specific syntax, we aren't able to include just\n\u003cem\u003eany\u003c/em\u003e JavaScript statement. For instance, the following will not work in JSX:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"header\"\u0026gt;{if (true) {\u003cbr\u003e  \"Hello\"\u003cbr\u003e} else {\u003cbr\u003e  \"Goodbye\"\u003cbr\u003e}}\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, the ternary alternative \u003cem\u003edoes\u003c/em\u003e work:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"header\"\u0026gt;{ true ? \"Hello\" : \"Goodbye\" }\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere is an easy work around though - you can call class methods in JSX, and\nwithin these methods, you can include whatever valid JavaScript you'd like.\u003c/p\u003e\n\n\u003ch4\u003eA Component Must Return One JSX Element\u003c/h4\u003e\n\n\u003cp\u003eIn all the lesson examples we've seen so far, each component is returning a\n\u003ccode\u003ediv\u003c/code\u003e that contains content or child elements. However, we can actually use any\nHTML element we would normally use to contain content.  The following are all\nvalid components:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass PlainDiv extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;div\u0026gt;I am one line, so I do not need the parentheses\u0026lt;/div\u0026gt;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Photo extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e        \u0026lt;figure\u0026gt;\u003cbr\u003e          \u0026lt;img className=\"image\" src=\"https://s3.amazonaws.com/ironboard-learn/sunglasses.gif\" /\u0026gt;\u003cbr\u003e          \u0026lt;figcaption\u0026gt;Whoa\u0026lt;/figcaption\u0026gt;\u003cbr\u003e        \u0026lt;/figure\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Table extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;table\u0026gt;\u003cbr\u003e        \u0026lt;tr\u0026gt;\u003cbr\u003e          \u0026lt;th\u0026gt;ID\u0026lt;/th\u0026gt;\u003cbr\u003e          \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u003cbr\u003e        \u0026lt;/tr\u0026gt;\u003cbr\u003e        \u0026lt;tr\u0026gt;\u003cbr\u003e          \u0026lt;th\u0026gt;312213\u0026lt;/th\u0026gt;\u003cbr\u003e          \u0026lt;th\u0026gt;Tim Berners-Lee\u0026lt;/th\u0026gt;  \u003cbr\u003e        \u0026lt;/tr\u0026gt;\u003cbr\u003e      \u0026lt;/table\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass ParentComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;main\u0026gt;\u003cbr\u003e        \u0026lt;PlainDiv /\u0026gt;\u003cbr\u003e        \u0026lt;Photo /\u0026gt;\u003cbr\u003e        \u0026lt;Table /\u0026gt;\u003cbr\u003e      \u0026lt;/main\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach of these is a valid component, but \u003cem\u003eall\u003c/em\u003e of these components have \u003cem\u003eone\u003c/em\u003e\nreturned JSX element that contains everything else. Without an element that\nwraps the returned JSX in a component, we will get an error. There are \u003cem\u003esome\u003c/em\u003e\nexceptions to this, such as \u003ca href=\"https://reactjs.org/docs/fragments.html\"\u003eReact fragments\u003c/a\u003e, but most\noften, we will be using the HTML-like JSX elements.\u003c/p\u003e\n\n\u003ch2\u003eAvoiding Keywords\u003c/h2\u003e\n\n\u003cp\u003eOne thing to note about JSX is that, since we're still writing JavaScript code,\nwe need to avoid using keywords in our code. You might have noticed it already:\nwe're setting HTML classes using the \u003ccode\u003eclassName\u003c/code\u003e attribute (or prop, in React\nterms), instead of \u003ccode\u003eclass\u003c/code\u003e. This is because \u003ccode\u003eclass\u003c/code\u003e is a reserved keyword in\nJavaScript! The same thing is true for the \u003ccode\u003efor\u003c/code\u003e label, which is another keyword\nin JS. If you want to use the HTML \u003ccode\u003efor\u003c/code\u003e attribute, you'd use \u003ccode\u003ehtmlFor\u003c/code\u003e instead.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn the early forms of React, instead of JSX, components returned JavaScript that\nwas much less reader friendly. To create a React element, we would write things\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eReact.createElement(\u003cbr\u003e  'h1',\u003cbr\u003e  {className: 'greeting'},\u003cbr\u003e  'Hello, world!'\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile JSX introduces some new rules we must follow, the benefit is that we can\nwrite code that is semantic and \u003cem\u003edeclarative\u003c/em\u003e. Writing this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 className='greeting'\u0026gt;Hello, world!\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eis just much more pleasant. When we're building complex applications, where\ncomponents can be children of other components, JSX provides a critical boost to\nreadability.\u003c/p\u003e\n\n\u003cp\u003eUltimately, all the JSX code we write will get compiled down to standard\nJavaScript and turn into things like \u003ccode\u003eReact.createElement\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eEvery lab from now on already has the JSX transforming stuff set up for you. You\njust need to run \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm start\u003c/code\u003e to execute the JSX --\u0026gt; React\nrun-able JavaScript process.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eJSX: \u003ca href=\"https://facebook.github.io/react/docs/jsx-in-depth.html\"\u003ehttps://facebook.github.io/react/docs/jsx-in-depth.html\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"jsx"},{"id":184953,"title":"Dynamic Components","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-dynamic-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-dynamic-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-dynamic-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-dynamic-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll take the next step with React components and examine how they can be used\nas dynamic templates.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand how React components can be dynamic templates\u003c/li\u003e\n\u003cli\u003eCreate dynamic React components and show the HTML they create\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eAs the building blocks of React applications, components are \u003cem\u003edynamic\u003c/em\u003e, in that\nthey can describe a template of HTML and fill in variable data. This lesson\nbuilds a real example of a blogging application to illustrate dynamic\ncomponents.\u003c/p\u003e\n\n\u003cp\u003eWe will use the following components:\n  - \u003ccode\u003eBlogContent\u003c/code\u003e - contains the content of the blog post\n  - \u003ccode\u003eComment\u003c/code\u003e - contains one user's comment\n  - \u003ccode\u003eBlogPost\u003c/code\u003e - the 'top level' React component, which is responsible for rendering both\n\u003ccode\u003eBlogContent\u003c/code\u003e and \u003ccode\u003eComment\u003c/code\u003e\u003c/p\u003e\n\n\u003ch4\u003eMaking Components Dynamic\u003c/h4\u003e\n\n\u003cp\u003eTime to put the \u003cstrong\u003edynamic\u003c/strong\u003e aspect of components to use! Let's start with the\n\u003ccode\u003eBlogContent\u003c/code\u003e component. The following snippet shows how we can describe\nvariables in our components' \u003ccode\u003erender()\u003c/code\u003e methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BlogContent extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.props.articleText}\u003cbr\u003e      \u0026lt;/div\u0026gt;  \u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see something new in the above code. Inside of \u003ccode\u003erender()\u003c/code\u003e's return\nblock, we have this funky syntax: \u003ccode\u003e{this.props.articleText}\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eThis line is telling React to place the value that \u003ccode\u003ethis.props.articleText\u003c/code\u003e\nrepresents within the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e. Ok, so where does \u003ccode\u003ethis.props.articleText\u003c/code\u003e come\nfrom?\u003c/p\u003e\n\n\u003ch4\u003ePassing Information\u003c/h4\u003e\n\n\u003cp\u003eReact allows us to pass units of information from a parent component down to a\nchild component. We call these \u003cstrong\u003eprops\u003c/strong\u003e, which we will dig more into in a later lesson.\nLet's see how we can pass information from \u003ccode\u003eBlogPost\u003c/code\u003e down to its child\n\u003ccode\u003eBlogContent\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BlogPost extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;BlogContent articleText={\"Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\"}/\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above, we see the \u003ccode\u003eBlogPost\u003c/code\u003e component, and inside of it, we refer to the \u003ccode\u003eBlogContent\u003c/code\u003e component. We also create a prop for \u003ccode\u003eBlogContent\u003c/code\u003e called \u003ccode\u003earticleText\u003c/code\u003e that we assign a value of \"Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\" This value is accessible from within the\n\u003ccode\u003eBlogContent\u003c/code\u003e component as \u003ccode\u003ethis.props.articleText\u003c/code\u003e! To create props, we write them the same way as writting attributes for an HTML tag. But remember, this is JSX and not HTML! \u003c/p\u003e\n\n\u003cp\u003eOne more thing about props: they can be any data type! In our example, we pass a string as a prop. But we can pass a number, boolean, object, function, etc. as a prop! \u003c/p\u003e\n\n\u003ch4\u003eExpanding our Application\u003c/h4\u003e\n\n\u003cp\u003eWe still need a \u003ccode\u003eComment\u003c/code\u003e component that we can use for each comment in a\n\u003ccode\u003eBlogPost\u003c/code\u003e. The \u003ccode\u003eComment\u003c/code\u003e component would look something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Comment extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.props.commentText}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis component, when used, will display content that is passed down to it,\nallowing us to pass different content to multiple \u003ccode\u003eComment\u003c/code\u003e components.  Let's\nadd them in. Of course, with components being re-usable, we can make as many as\nwe want:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BlogPost extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;BlogContent articleText={\"Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\"}/\u0026gt;\u003cbr\u003e        \u0026lt;Comment /\u0026gt;\u003cbr\u003e        \u0026lt;Comment /\u0026gt;\u003cbr\u003e        \u0026lt;Comment /\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...and just as before, we can pass content data down to them:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BlogPost extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;BlogContent articleText={\"Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\"}/\u0026gt;\u003cbr\u003e        \u0026lt;Comment commentText={\"I agree with this statement. - Angela Merkel\"}/\u0026gt;\u003cbr\u003e        \u0026lt;Comment commentText={\"A universal truth. - Noam Chomsky\"}/\u0026gt;\u003cbr\u003e        \u0026lt;Comment commentText={\"Truth is singular. Its ‘versions’ are mistruths. - Sonmi-451\"}/\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere is quite a bit going on here. Most notably, we are passing information\nfrom a parent component to many child components. Specifically, we are doing this by creating a prop called \u003ccode\u003ecommentText\u003c/code\u003e to pass to each \u003ccode\u003eComment\u003c/code\u003e component, which is then accessible in each instance of \u003ccode\u003eComment\u003c/code\u003e as \u003ccode\u003ethis.props.commentText\u003c/code\u003e. Let's expand the HTML that\nthis would ultimately render:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003ex\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    I agree with this statement. - Angela Merkel\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    A universal truth. - Noam Chomsky\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Truth is singular. Its ‘versions’ are mistruths - Sonmi-451\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...but seeing is believing so let's look at this in technicolor! Following is an\ninspection of the L and \u003cem\u003ereal live DOM elements\u003c/em\u003e that React rendered when we\nblasted this code into a new application (classes, IDs, and minor CSS have been\nadded for a better visual display):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/completed-example-dynamic-components.gif\" alt=\"completed example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAlright now! Take a moment. Stretch your limbs, make a sandwich, let the\nglorious paradigm sink in. Dynamic components are a core facet of React\nprogramming, and most of what we do as React programmers builds upon them.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eWhile HTML elements are the basic building blocks of a website, (for\nexample, a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e), a React application usually consists of several React\n\u003cem\u003ecomponents\u003c/em\u003e combined together. Unlike simple HTML elements, React components\nare smarter and bigger. They allow you to do much more and incorporate logic\ninto how content displays.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReact components:\u003c/strong\u003e\n  - are modular, reusable, and enable a 'templating' like functionality\n  - help us organize our user interface's \u003cem\u003elogic\u003c/em\u003e and \u003cem\u003epresentation\u003c/em\u003e\n  - enable us to think about each piece in isolation, enabling us to apply structure to complex programs\u003c/p\u003e\n\n\u003ch2\u003eLooking Forward\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we introduced some fundamentals of a React component. Going\nforward we will expand on what we can do with components, how they fit into the\nlarger React landscape, and what built-in functionality they come with.\u003c/p\u003e\n\n\u003ch2\u003eA Quick Note About the Past...\u003c/h2\u003e\n\n\u003cp\u003eReact is a living framework that is constantly being updated and improved upon.\nCompounding on that, React has spanned the transition from ES5 to ES6, (the\nnewer version of which has had many updates, including \u003ccode\u003eClass\u003c/code\u003e syntax). This\nmeans old versions of React code will, in some places, look different.\u003c/p\u003e\n\n\u003cp\u003eIn older versions a method, \u003ccode\u003eReact.createClass()\u003c/code\u003e, was used in place of where we\nwere defining our own \u003ccode\u003eClass\u003c/code\u003ees and extending the \u003ccode\u003eReact.component\u003c/code\u003e class (see\ncode above!). While this \u003ccode\u003eReact.createClass()\u003c/code\u003e method has since been deprecated,\nit is still present in many older code bases and tutorials.\u003c/p\u003e\n\n\u003cp\u003eFor now, we recommend sticking with the up-to-date class syntax we present, but\ndon't be alarmed if you come across unfamiliar ways to create React components.\nThe \u003ca href=\"https://reactjs.org/docs/react-without-es6.html\"\u003eReact documentation\u003c/a\u003e is always there for you regarding backwards\ncompatibility.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/react-api.html\"\u003eReact Top-Level API\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"dynamic-components"}]},{"id":20118,"name":"Props and State","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ga647bb8706a1f2f16052025147d29b78","items":[{"id":184955,"title":"Modular Code in React","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-modular-code\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-modular-code/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-modular-code\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-modular-code/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson we'll discuss the ES6 keywords \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e and how they\nallow us to share JavaScript code across multiple files.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Understand why it's important to split up our code into smaller files\u003c/li\u003e\n\u003cli\u003e Learn how \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e support our ability to build modular code\u003c/li\u003e\n\u003cli\u003e Understand the different ways to import and export code\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eModular Code\u003c/h2\u003e\n\n\u003cp\u003eModular code is code that is separated into segments (modules), where each file\nis responsible for a feature or specific functionality.\u003c/p\u003e\n\n\u003cp\u003eDevelopers separate their code into modules for many reasons:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eAdhere to the single-responsiblity principle\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eEach module is responsible for accomplishing a certain piece of\nfunctionality, or adding a specific feature to the application\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eEasier to navigate\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eModules that are separated and clearly named make code more readable for\nother developers\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eEasier to debug\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eBugs have less room to hide in isolated, contained code\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eProduce clean and DRY code\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eModules can be reused and repurposed throughout applications\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eModularizing React Code\u003c/h2\u003e\n\n\u003cp\u003eReact makes the modularization of code easy by introducing the component\nstructure.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Hogwarts extends React.Component {\u003cbr\u003e    render() {\u003cbr\u003e        return (\u003cbr\u003e            \u0026lt;div className=\"Hogwarts\"\u0026gt;\u003cbr\u003e                \"Harry. Did you put your name in the Goblet of Fire?\"\u003cbr\u003e            \u0026lt;/div\u0026gt;\u003cbr\u003e        );\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's standard practice to give each of these components their own file. It is\nnot uncommon to see a React program file tree that looks something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── README.md\u003cbr\u003e├── public\u003cbr\u003e└── src\u003cbr\u003e     ├── App.js\u003cbr\u003e     ├── Hogwarts.js\u003cbr\u003e     └── Houses.js\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith our components separated in their own files, all we have to do is figure\nout how to access the code defined in one file within a different file. Well,\nthis is pretty easy to do in React! Introducing IMPORT EXPORT!\u003c/p\u003e\n\n\u003ch2\u003eImport and Export\u003c/h2\u003e\n\n\u003cp\u003eOn a simplified level, \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e enable us to use code from one file\nin other locations across our projects, which becomes increasingly important as\nwe build out larger applications. Let's look at how we can do this.\u003c/p\u003e\n\n\u003ch4\u003eExport\u003c/h4\u003e\n\n\u003cp\u003eExporting a component, or module of code, allows us to call upon that \u003ccode\u003eexport\u003c/code\u003e\nin other files, and use the embedded code within other modules. There are two\nways to \u003ccode\u003eexport\u003c/code\u003e code in JavaScript: we can use the \u003ccode\u003eexport default\u003c/code\u003e syntax or\nwe can explicitly name our exports.\u003c/p\u003e\n\n\u003ch6\u003eExport Default\u003c/h6\u003e\n\n\u003cp\u003eWe can only use \u003ccode\u003eexport default\u003c/code\u003e once per module. The syntax allows us to\ndisregard naming conventions when we want to import the given module.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/houses/HagridsHouse.js\u003cbr\u003eimport React from 'react';\u003cbr\u003e\u003cbr\u003efunction whoseHouse() {\u003cbr\u003e    console.log(`HAGRID'S HOUSE!`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default whoseHouse;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can then use \u003ccode\u003eimport\u003c/code\u003e to make use of that function elsewhere.\n\u003ccode\u003eexport default\u003c/code\u003e allows us to name the exported code whatever we want when\nimporting it. For example, \u003ccode\u003eimport nameThisAnything from './HagridsHouse.js'\u003c/code\u003e\nwill provide us with the same code as\n\u003ccode\u003eimport whoseHouse from './HagridsHouse.js'\u003c/code\u003e -- which is called aliasing!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport whoseHouse from './HagridsHouse.js'\u003cbr\u003eimport ReactDOM from 'react-dom'\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  return (\u003cbr\u003e    whoseHouse()\u003cbr\u003e    // \u0026gt; `HAGRID'S HOUSE!`,\u003cbr\u003e    document.getElementById('root')\u003cbr\u003e  )\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we can \u003ccode\u003eexport default\u003c/code\u003e functions, we can \u003ccode\u003eexport default\u003c/code\u003e components! like\nso...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/houses/Hufflepuff.js\u003cbr\u003eimport React from 'react';\u003cbr\u003e\u003cbr\u003eexport default class Hufflepuff extends React.Component {\u003cbr\u003e    render() {\u003cbr\u003e        return \u0026lt;div\u0026gt;NOBODY CARES ABOUT US\u0026lt;/div\u0026gt;;\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we can import the entire component to any other file in our application,\nusing whatever naming convention that we see fit:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport HooflePoof from './houses/Hufflepuff.js';\u003cbr\u003e\u003cbr\u003eexport default class Hogwarts extends React.Component {\u003cbr\u003e    render() {\u003cbr\u003e        return (\u003cbr\u003e            \u0026lt;div\u0026gt;\u003cbr\u003e                \u0026lt;HooflePoof /\u0026gt;\u003cbr\u003e                //\u0026gt; Will render `NOBODY CARES ABOUT US`, even though we renamed `Hufflepuff`\u003cbr\u003e                // to `HooflePoof`\u003cbr\u003e            \u0026lt;/div\u0026gt;\u003cbr\u003e        );\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou will commonly see a slightly different way of writing this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport React from 'react'\u003cbr\u003eimport HooflePoof from './houses/Hufflepuff.js'\u003cbr\u003e\u003cbr\u003eclass Hogwarts extends React.Component{\u003cbr\u003e  ...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Hogwarts\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMoving the \u003ccode\u003eexport default\u003c/code\u003e to the bottom can make it easier to find exactly\nwhat a file is exporting.\u003c/p\u003e\n\n\u003ch6\u003eNamed Exports\u003c/h6\u003e\n\n\u003cp\u003eWith named exports, we can export multiple pieces of code from within a module,\nallowing us to call on them explicitly when we \u003ccode\u003eimport\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNamed exports allow us to export several specific things at once:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/houses/Gryffindor.js\u003cbr\u003eexport function colors() {\u003cbr\u003e    console.log('Scarlet and Gold');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction values() {\u003cbr\u003e    console.log('Courage, Bravery, Nerve and Chivalry');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport function gryffMascot() {\u003cbr\u003e    console.log('The Lion');\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can then \u003ccode\u003eimport\u003c/code\u003e exports from a file using their original name, or\nby explicitly assigning them a new one. Let's look at an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport * from './houses/Gryffindor.js'\u003cbr\u003e\u003cbr\u003ecolors()\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\u003cbr\u003e\u003cbr\u003egryffMascot()\u003cbr\u003e// \u0026gt; 'The Lion'\u003cbr\u003e\u003cbr\u003evalues()\u003cbr\u003e// \u0026gt; ReferenceError: values is not defined\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe will go into detail on the \u003ccode\u003eimport\u003c/code\u003e line in just a moment, but briefly: \n\u003ccode\u003eimport * from './houses/Gryffindor.js'\u003c/code\u003e imports everything from \u003ccode\u003e./houses/Gryffindor.js\u003c/code\u003e \nthat is \u003cem\u003eexported\u003c/em\u003e. Since we did not explicitly export \u003ccode\u003evalues\u003c/code\u003e in our \u003ccode\u003eGryffindor.js\u003c/code\u003e \nfile, we were unable to have access to the function in \u003ccode\u003eHogwarts.js\u003c/code\u003e. Other \nimported functions \u003cem\u003ewithin\u003c/em\u003e \u003ccode\u003eHogwarts.js\u003c/code\u003e can still call \u003ccode\u003evalues\u003c/code\u003e, though.\u003c/p\u003e\n\n\u003cp\u003eWe can also move named exports to the bottom of a file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/houses/Gryffindor.js\u003cbr\u003efunction colors() {\u003cbr\u003e  console.log(\"Scarlet and Gold\")\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction values() {\u003cbr\u003e  console.log(\"Courage, Bravery, Nerve and Chivalry\")\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction gryffMascot() {\u003cbr\u003e  console.log(\"The Lion\")\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport {\u003cbr\u003e  colors,\u003cbr\u003e  gryffMascot\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eImport\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eimport\u003c/code\u003e keyword is what enables us to take modules that we've exported and\nuse them in other files throughout our applications. There are many ways to\n\u003ccode\u003eimport\u003c/code\u003e with React, and the method that we use depends on what type of code we\nare trying to access and how we exported it.\u003c/p\u003e\n\n\u003cp\u003eIn order to import a module into another file, we write out the relative path to\nthe file that we are trying to get access to. Let's look at some examples:\u003c/p\u003e\n\n\u003ch4\u003eimport * from\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003eimport * from\u003c/code\u003e imports all of the functions that have been exported from a\ngiven module. This syntax looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport * as GryffFunctions from './houses/Gryffindor.js';\u003cbr\u003e\u003cbr\u003eGryffFunctions.colors();\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have the option to rename the module when we \u003ccode\u003eimport\u003c/code\u003e it, as we did above.\nHowever, importing all of the functions by name is also an option:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport * from './houses/Gryffindor.js'\u003cbr\u003e\u003cbr\u003ecolors()\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eimport {function()} from\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003eimport { function() } from\u003c/code\u003e allows us to grab a specific function by name, and\nuse that function within the body of a new module.\u003c/p\u003e\n\n\u003cp\u003eWe're able to reference the function imported by its previously declared name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport { colors } from './houses/Gryffindor.js';\u003cbr\u003eimport { gryffMascot } from './houses/Gryffindor.js';\u003cbr\u003e\u003cbr\u003ecolors();\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\u003cbr\u003e\u003cbr\u003egryffMascot();\u003cbr\u003e// \u0026gt; 'The Lion'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...or rename it inside of our \u003ccode\u003eimport\u003c/code\u003e statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport { colors } from './houses/Gryffindor.js';\u003cbr\u003eimport { gryffMascot as mascot } from './houses/Gryffindor.js';\u003cbr\u003e\u003cbr\u003ecolors();\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\u003cbr\u003e\u003cbr\u003emascot();\u003cbr\u003e// \u0026gt; 'The Lion'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eImporting Node Modules\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport Gryffindor from './houses/Gryffindor';\u003cbr\u003eimport Ravenclaw from './houses/Ravenclaw';\u003cbr\u003eimport Hufflepuff from './houses/Hufflepuff';\u003cbr\u003eimport Slytherin from './houses/Slytherin';\u003cbr\u003e\u003cbr\u003eexport default class Hogwarts extends React.Component {\u003cbr\u003e    render() {\u003cbr\u003e        return (\u003cbr\u003e            \u0026lt;div\u0026gt;\u003cbr\u003e                \u0026lt;Gryffindor /\u0026gt;\u003cbr\u003e                \u0026lt;Ravenclaw /\u0026gt;\u003cbr\u003e                \u0026lt;Hufflepuff /\u0026gt;\u003cbr\u003e                \u0026lt;Slytherin /\u0026gt;\u003cbr\u003e            \u0026lt;/div\u0026gt;\u003cbr\u003e        );\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a look at the first line of code in this file: \u003ccode\u003eimport React from 'react'\u003c/code\u003e.\nHere, we are referencing the React library's default export. The React library\nis located inside of the \u003ccode\u003enode_modules\u003c/code\u003e directory, a specific folder in\nmany Node projects that holds packages of third-party code.\u003c/p\u003e\n\n\u003ch2\u003eRecap\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e enable us to keep code modular, and use it across\ndifferent files. In addition to being able to \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e default\nfunctions, we can rename and alias \u003ccode\u003eimport\u003c/code\u003es, as well as reference Node Modules\nthat are in our project.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/import\"\u003eMDN Import Documentation\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export\"\u003eMDN Export Documentation\u003c/a\u003e\u003c/p\u003e","exportId":"modular-code-in-react"},{"id":184956,"title":"Props","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-props-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-props-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-props-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-props-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover props in further detail and explore how they help us make our\ncomponents more dynamic and reusable. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how props make our components more dynamic and reusable\u003c/li\u003e\n\u003cli\u003ePass props to a component by adding them as attributes when you render them\u003c/li\u003e\n\u003cli\u003eDeclare default prop values in React\u003c/li\u003e\n\u003cli\u003eRender a component with props and default props\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat are props?\u003c/h2\u003e\n\n\u003cp\u003eProps allow us to pass values into our components. These values can be anything:\nstrings, objects (including arrays and functions), and so on. They give us the\nopportunity to make our components more dynamic, and a \u003cstrong\u003elot more\u003c/strong\u003e reusable.\u003c/p\u003e\n\n\u003cp\u003eFor example, say we have a \u003ccode\u003e\u0026lt;MovieCard /\u0026gt;\u003c/code\u003e component. A movie has a title, a\nposter image, and many other attributes (or \u003cstrong\u003eprop\u003c/strong\u003e-erties!). Let's examine what this \u003ccode\u003e\u0026lt;MovieCard /\u0026gt;\u003c/code\u003e component would look like with \u003cem\u003ehardcoded\u003c/em\u003e data vs. dynamic \u003cem\u003eprop\u003c/em\u003e data:\u003c/p\u003e\n\n\u003ch6\u003eHardcoded:\u003c/h6\u003e\n\u003cpre\u003e\u003ccode\u003eclass MovieCard extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"movie-card\"\u0026gt;\u003cbr\u003e        \u0026lt;img src=\"http://image.tmdb.org/t/p/w342/kqjL17yufvn9OVLyXYpvtyrFfak.jpg\" alt=\"Mad Max: Fury Road\" /\u0026gt;\u003cbr\u003e        \u0026lt;h2\u0026gt;Mad Max: Fury Road\u0026lt;/h2\u0026gt;\u003cbr\u003e        \u0026lt;small\u0026gt;Genres: Action, Adventure, Science Fiction, Thriller\u0026lt;/small\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePassing in props\u003c/h2\u003e\n\n\u003cp\u003eMad Max: Fury Road is a ridiculously good movie, but what if we want to render a\nmovie card for another movie? Do we just write another component? No, that would\nbe silly! Instead, we write our components so that they make use of props, which\nare passed from their parents.\u003c/p\u003e\n\n\u003cp\u003eTo pass props to a component, you add them as attributes when you render them:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst movieTitle = \"Mad Max\"\u003cbr\u003e\u0026lt;MovieCard title={movieTitle} /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe value of a prop is passed in through JSX curly braces. As we read before,\nthis value can be anything: a variable, inline values, functions, etc. If your\nvalue is a hardcoded string, you can pass it in through double quotes instead:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;MovieCard title=\"Mad Max\" /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eArmed with that knowledge, let's update \u003ccode\u003eMovieCard\u003c/code\u003es render method to make use of props:\u003c/p\u003e\n\n\u003ch6\u003eDynamic with Props:\u003c/h6\u003e\n\u003cpre\u003e\u003ccode\u003e// assuming we are rendering a MovieCard component with the following JSX:\u003cbr\u003econst title = \"Mad Max\"\u003cbr\u003econst posterURL = \"http://image.tmdb.org/t/p/w342/kqjL17yufvn9OVLyXYpvtyrFfak.jpg\"\u003cbr\u003econst genresArr = [\"Action\", \"Adventure\", \"Science Fiction\", \"Thriller\"]\u003cbr\u003e\u003cbr\u003e\u0026lt;MovieCard title={title} posterSrc={posterURL} genres={genresArr} /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass MovieCard extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"movie-card\"\u0026gt;\u003cbr\u003e        \u0026lt;img src={this.props.posterSrc} alt={this.props.title} /\u0026gt;\u003cbr\u003e        \u0026lt;h2\u0026gt;{this.props.title}\u0026lt;/h2\u0026gt;\u003cbr\u003e        \u0026lt;small\u0026gt;{this.props.genres.join(', ')}\u0026lt;/small\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, does that not look cleaner and more reusable compared to our hard coded\nexample or what!?\u003c/p\u003e\n\n\u003ch2\u003eDefault values for props\u003c/h2\u003e\n\n\u003cp\u003eLet's switch gears here and imagine we are using our application to render a\nlist of hundreds of movies. Let's also assume the data set we have is not always\nreliable when it comes to the urls of the movie posters. \u003c/p\u003e\n\n\u003cp\u003eIn this case, we want to make sure our component doesn't render as an utter\ndisaster when the data is incomplete. In order to do this, we can use a\n\u003cstrong\u003edefault prop\u003c/strong\u003e to assign a poster url when either a bad one, or none at all,\nis provided. For this example, let's use the poster for Max Headroom as a\ndefault, seeing as it is a perfect placeholder:\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;p align=\"center\"\u0026gt;\n  \u0026lt;img src=\"\u003ca href=\"https://m.media-amazon.com/images/M/MV5BOTJjNzczMTUtNzc5MC00ODk0LWEwYjgtNzdiOTEyZmQxNzhmXkEyXkFqcGdeQXVyNzMzMjU5NDY@._V1_UY268_CR1,0,182,268_AL_.jpg\"\u003ehttps://m.media-amazon.com/images/M/MV5BOTJjNzczMTUtNzc5MC00ODk0LWEwYjgtNzdiOTEyZmQxNzhmXkEyXkFqcGdeQXVyNzMzMjU5NDY@._V1_UY268_CR1,0,182,268_AL_.jpg\u003c/a\u003e\" /\u0026gt;\n\u0026lt;/P\u0026gt;\u003c/p\u003e\n\n\u003cp\u003eInstead of passing in that default poster image in case we don't have one, we\ncan tell our \u003ccode\u003eMovieCard\u003c/code\u003e component to use a default prop \u003cstrong\u003eif the \u003ccode\u003eposter\u003c/code\u003e prop\nwas not provided\u003c/strong\u003e. To do this, we add the \u003ccode\u003edefaultProps\u003c/code\u003e property to our\n\u003ccode\u003eMovieCard\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MovieCard extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"movie-card\"\u0026gt;\u003cbr\u003e        \u0026lt;img src={this.props.posterSrc} alt={this.props.title} /\u0026gt;\u003cbr\u003e        \u0026lt;h2\u0026gt;{this.props.title}\u0026lt;/h2\u0026gt;\u003cbr\u003e        \u0026lt;small\u0026gt;{this.props.genres.join(', ')}\u0026lt;/small\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eMovieCard.defaultProps = {\u003cbr\u003e  posterSrc: 'http://i.imgur.com/bJw8ndW.png'\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, whenever we omit the \u003ccode\u003eposterSrc\u003c/code\u003e prop, or if it's undefined, the\n\u003ccode\u003eMovieCard\u003c/code\u003e component will use this default prop instead. That means we don't\nhave to worry about not passing in a poster all the time — the component will\ntake care of this for us!\u003c/p\u003e\n\n\u003ch2\u003eWhy Use Default Props\u003c/h2\u003e\n\n\u003cp\u003eAn alternative way we could have handled bad urls would be to have \u003ccode\u003eMovieCard\u003c/code\u003e's\nparent component \u003cem\u003echeck\u003c/em\u003e whether the \u003ccode\u003eposterSrc\u003c/code\u003e was valid/present, and then\npass some control value as a prop when it renders \u003ccode\u003eMovieCard\u003c/code\u003e. This is not ideal\ncompared to using a default prop within the \u003ccode\u003eMovieCard\u003c/code\u003e component. \u003c/p\u003e\n\n\u003cp\u003eConsider the following: in React, we want components to encapsulate the\nfunctionality that they \u003cem\u003ecan and should be responsible for\u003c/em\u003e. Should the parent\ncomponent of \u003ccode\u003eMovieCard\u003c/code\u003e be responsible for managing the assignment of a default\nmovie poster source value? In our example, we think not. It makes more sense for\nthe component that is responsible for rendering the movie information and poster\nto handle missing data.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/components-and-props.html#default-prop-values\"\u003eReact Default Prop Values\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"props"},{"id":184958,"title":"State","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-state-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-state-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-state-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-state-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll dive into component \u003cstrong\u003estate\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain what state is\u003c/li\u003e\n\u003cli\u003eExplain the difference between state and props\u003c/li\u003e\n\u003cli\u003eShow examples of how state is defined and updated\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat's state?\u003c/h2\u003e\n\n\u003cp\u003eLet's quickly talk about what \u003cem\u003estate\u003c/em\u003e is in React. State is data that is mutated\nin your component. A component's state, unlike a component's props, \u003cem\u003ecan\u003c/em\u003e change\nduring the component's life.\u003c/p\u003e\n\n\u003cp\u003eConsider the limitations of props: for a component's props to change, its\n\u003cem\u003eparent\u003c/em\u003e component needs to send it new props (after which, the component would\n'remake' itself with the new props). State provides us with a way to maintain and update information \u003cem\u003ewithin\u003c/em\u003e a component \u003cem\u003ewithout\u003c/em\u003e requiring its parent to somehow\nsend updated information.\u003c/p\u003e\n\n\u003cp\u003eImagine that we have a single component which displays an integer. When a user\nclicks the component, it should increment its integer by 1. If we were to\nrepresent this integer value in the component using \u003cstrong\u003estate\u003c/strong\u003e, the component\ncould increment itself without needing any fussy prop passing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MyComp extends React.Component {\u003cbr\u003e\u003cbr\u003e  // we use the constructor to set the INITIAL STATE\u003cbr\u003e  constructor() {\u003cbr\u003e    super()\u003cbr\u003e    this.state = {\u003cbr\u003e      count: 0\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  // our increment method makes use of the 'setState' method, which is what we use to alter state\u003cbr\u003e  increment = () =\u0026gt; {\u003cbr\u003e    const newCount = this.state.count + 1\u003cbr\u003e    this.setState({\u003cbr\u003e      count: newCount\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div onClick={this.increment}\u0026gt;\u003cbr\u003e        {this.state.count}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere's a lot going on above. Let's take some time to break things down. We set\nup the initial value of state in the \u003ccode\u003econstructor()\u003c/code\u003e. Remember from Object Oriented\nJavascript, the value of \u003ccode\u003ethis\u003c/code\u003e above is an instance of our class \u003ccode\u003eMyComp\u003c/code\u003e. So\n\u003ccode\u003ethis.state = {count: 0}\u003c/code\u003e is saying this instance of \u003ccode\u003eMyComp\u003c/code\u003e should have a\nproperty called \u003ccode\u003estate\u003c/code\u003e that has a value of \u003ccode\u003e{count : 0}\u003c/code\u003e. Also, we should call\n\u003ccode\u003esuper()\u003c/code\u003e in the constructor since we are inheriting from another class via the\n\u003ccode\u003eextends\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003cp\u003eAlso, handling events in React work a bit differently than in vanilla JavaScript.\nWe are going to dive deeper into React event handling later. For now, know that\nReact events are written as attributes inside a JSX tag and are named using\ncamelCase. Notice the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e tag in the \u003ccode\u003erender\u003c/code\u003e method has an attribute\n\u003ccode\u003eonClick\u003c/code\u003e which is set equal to the function object \u003ccode\u003ethis.increment\u003c/code\u003e. What this code\ndoes is:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWhen the \u003ccode\u003ediv\u003c/code\u003e is clicked,\u003c/li\u003e\n\u003cli\u003ethe function \u003ccode\u003ethis.increment\u003c/code\u003e will be invoked,\u003c/li\u003e\n\u003cli\u003ethereby updating the state of \u003ccode\u003eMyComp\u003c/code\u003e using \u003ccode\u003ethis.setState()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNote: You may have noticed that \u003ccode\u003eincrement\u003c/code\u003e is written as an instance method and \nas an arrow function. We write it as an \u003cstrong\u003earrow function\u003c/strong\u003e to bind the value of \u003ccode\u003ethis\u003c/code\u003e \nto be our instance of \u003ccode\u003eMyComp\u003c/code\u003e. Then, when we say \u003ccode\u003ethis.setState()\u003c/code\u003e, we are really \njust saying to set the state of \u003ccode\u003eMyComp\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eTake your time to read through the above code. Work through it line by line and\nmake sure you are comfortable before moving forward.\u003c/p\u003e\n\n\u003ch2\u003eInitial State and 'setState()'\u003c/h2\u003e\n\n\u003cp\u003eLet's further explore both the setting of \u003cstrong\u003einitial state\u003c/strong\u003e in the constructor and the use of\n\u003cstrong\u003ethis.setState()\u003c/strong\u003e:\u003c/p\u003e\n\n\u003ch4\u003eInitial State\u003c/h4\u003e\n\n\u003cp\u003eIn order to understand \u003cem\u003ewhy\u003c/em\u003e we are setting \u003cstrong\u003einitial state\u003c/strong\u003e in the constructor\nthe most important thing to know is that the \u003ccode\u003econstructor\u003c/code\u003e method runs \u003cstrong\u003efirst\u003c/strong\u003e\nwhen a component is made (and \u003ccode\u003erender()\u003c/code\u003e runs later!). Because we won't dive\nfurther into the React Component Lifecycle just yet, commit this mantra to\nheart:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; We set initial state in the constructor because it runs first\u003c/p\u003e\n\n\u003cp\u003e...got it? Good. Don't forget. Now forget we even mentioned this new concept of\n'Component Lifecycle' and stay focused on state.\u003c/p\u003e\n\n\u003cp\u003eOnce we have provided a component with its \u003cstrong\u003einitial state\u003c/strong\u003e we can manipulate\nit later using the method: \u003ccode\u003esetState()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003esetState()\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003esetState()\u003c/code\u003e is straightforward in its purpose: it sets/updates state! That's\nit! That's what it's there for. While simple in that way, there is one very\nimportant caveat about \u003cem\u003ehow\u003c/em\u003e it functions that we need to explore: it sets state\n\u003cem\u003easynchronously\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn order to understand why this is important, let's look at an example of\n\u003ccode\u003esetState()\u003c/code\u003e being used in a component. The following gif is of this component\n(pay close attention to the \u003ccode\u003econsole.log()\u003c/code\u003es:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  constructor() {\u003cbr\u003e    super()\u003cbr\u003e    this.state = {\u003cbr\u003e      count: 0\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  increment = () =\u0026gt; {\u003cbr\u003e    console.log(`before setState: ${this.state.count}`)\u003cbr\u003e\u003cbr\u003e    this.setState({\u003cbr\u003e      count: this.state.count + 1\u003cbr\u003e    })\u003cbr\u003e\u003cbr\u003e    console.log(`after setState: ${this.state.count}`)\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div onClick={this.increment}\u0026gt;\u003cbr\u003e        {this.state.count}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/asynchronous-state-setting-example.gif\" alt=\"state example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat we are seeing is \u003ccode\u003esetState()\u003c/code\u003e functioning \u003cem\u003easynchronously\u003c/em\u003e. When we execute\n\u003ccode\u003esetState()\u003c/code\u003e, it is \u003cem\u003enon-blocking\u003c/em\u003e. It fires off a message to the React\ncomponent's inner workings saying: \"Hey, you need to update state to this value\nwhen you have a chance.\" The component finishes doing its current task \u003cem\u003ebefore\u003c/em\u003e\nupdating the state. In this case, it finishes executing the \u003ccode\u003eincrement\u003c/code\u003e function\nin full before updating the state.\u003c/p\u003e\n\n\u003cp\u003eIt's not uncommon for new React developers to get 'bitten' by the asynchronous\nnature of \u003ccode\u003esetState()\u003c/code\u003e at least once. If \u003ccode\u003esetState()\u003c/code\u003e were not \u003cem\u003easynchronous\u003c/em\u003e,\nthe two logs would not be the same number.\u003c/p\u003e\n\n\u003ch2\u003eA Word of Caution\u003c/h2\u003e\n\n\u003cp\u003eWhile component state is a very powerful feature, it should be used as sparingly\nas possible. State adds (sometimes unnecessary) complexity and can be very easy\nto lose track of. The more state we introduce in our application, the harder it\nwill be to keep track of all of the changes in our data. Remember: state is for\nvalues that are expected to change during the components life.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003estate\u003c/strong\u003e is for values that are expected to change\u003c/li\u003e\n\u003cli\u003ewe assign \u003cstrong\u003einitial state\u003c/strong\u003e in the constructor\u003c/li\u003e\n\u003cli\u003ewe update state with \u003ccode\u003esetState()\u003c/code\u003e, which is a method provided by the \u003ccode\u003eReact.Component\u003c/code\u003e class\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esetState()\u003c/code\u003e is \u003cem\u003easynchronous\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#components-are-just-state-machines\"\u003eOfficial React docs on state\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\"\u003eProps vs. state\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"state"}]},{"id":20119,"name":"React Events","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g59543632eb4f994c53f3f61b98938d4e","items":[{"id":184963,"title":"React Events Crash Course","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-events-crash-course-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-events-crash-course-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-events-crash-course-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-events-crash-course-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll cover the event system in React. The event system is React's way of implementing native HTML events, such as \u003ccode\u003eonclick\u003c/code\u003e, \u003ccode\u003eonkeydown\u003c/code\u003e, \u003ccode\u003eonmousemove\u003c/code\u003e, etc. Before moving forward with this lesson, you should be familiar with HTML events. For a refresher, see: \u003ca href=\"https://www.w3schools.com/js/js_events.asp\"\u003ethis documentation\u003c/a\u003e. \u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eExplain how React events differ from browser events\u003c/li\u003e \u003cli\u003eDescribe how React standardizes events for compatibility\u003c/li\u003e \u003cli\u003eExplain how to use React events in our application\u003c/li\u003e \u003cli\u003eAdd an event handler to a component\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eReact's Event System\u003c/h2\u003e  \u003cp\u003eReact makes use of basic HTML events by wrapping them in something called \u003ccode\u003eSyntheticEvent\u003c/code\u003es. This wrapper allows React to make sure events are handled the same way across all browsers (a.k.a. standardization). Some browsers treat events differently, and by wrapping these events into a consistent API, React makes our lives easier. It's important to keep in mind that they are the \u003cem\u003eexact same events\u003c/em\u003e, just implemented in a consistent way! That means these events also have methods like \u003ccode\u003epreventDefault()\u003c/code\u003e, \u003ccode\u003estopPropagation()\u003c/code\u003e, and so on.\u003c/p\u003e  \u003ch2\u003eHow to add event handlers\u003c/h2\u003e  \u003cp\u003eConsider the following component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Tickler extends React.Component {\u003cbr\u003e\u003cbr\u003e  tickle = () =\u0026gt; {\u003cbr\u003e    console.log('Tee hee!')\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;button\u0026gt;Tickle me!\u0026lt;/button\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have a \u003ccode\u003etickle()\u003c/code\u003e method, but no way to trigger it! This is a perfect time to add an event handler so that we can see the message 'Tee Hee!' in our console. We attach event handlers to an element in React much like basic HTML:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;button onClick={this.tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, this is exactly how we would do this with basic HTML/JS. The only difference being \u003ccode\u003eonClick\u003c/code\u003e in React vs. \u003ccode\u003eonclick\u003c/code\u003e in basic HTML.\u003c/p\u003e  \u003cp\u003eThe handler name is always comprised of \u003ccode\u003eon\u003c/code\u003e, and the event name itself (i.e. \u003ccode\u003eclick\u003c/code\u003e). These are joined together and camel-cased. As you know, the value of the events are \u003cem\u003ecallbacks\u003c/em\u003e (either a reference to a function or an inline function). As a reminder, we pass the \u003cem\u003efunction object itself\u003c/em\u003e and do not invoke the function. We are telling React's event system: \"Hey! Use this thing later if the event associated with it is triggered\".\u003c/p\u003e  \u003cp\u003eNow, when we click the button, we see a message in our console. Awesome! Going back to the \u003ca href=\"#tickler-example\"\u003ecomplete example\u003c/a\u003e, let's take a quick look at the method. You will notice our method is an arrow function. \u003cstrong\u003eYou will commonly see React component methods defined with arrow functions.\u003c/strong\u003e This is because we often want to access the \u003ccode\u003ethis\u003c/code\u003e keyword within the methods themselves. \u003c/p\u003e  \u003ch2\u003eMoving Forward\u003c/h2\u003e  \u003cp\u003eThe information above is the bare minimum you need to get started with events in React. As we move forward, we will dive deeper into events and explore how they interact with our React applications on a larger scale.\u003c/p\u003e  \u003cp\u003eThere are a lot of event handlers we can add to an element, for example \u003ccode\u003eonKeyUp\u003c/code\u003e, \u003ccode\u003eonMouseDown\u003c/code\u003e, \u003ccode\u003eonFocus\u003c/code\u003e, \u003ccode\u003eonSubmit\u003c/code\u003e, and many more. Check out the \u003ca href=\"https://reactjs.org/docs/events.html#supported-events\"\u003ecomplete list of supported events\u003c/a\u003e to see what else you can play around with! If you have time, the React event documentation linked below is an excellent resource for mastering the \u003ccode\u003eSyntheticEvent\u003c/code\u003e wrapper.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html\"\u003eReact Synthetic Events\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/handling-events.html\"\u003eHandling Events\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html#supported-events\"\u003eSupported Events\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"react-events-crash-course"},{"id":184965,"title":"Events System","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-event-system\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-event-system/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-event-system\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-event-system/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover the event system in React.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how React events differ from browser events\u003c/li\u003e\n\u003cli\u003eDescribe how React standardizes events for compatibility\u003c/li\u003e\n\u003cli\u003eExplain how to use React events in our application\u003c/li\u003e\n\u003cli\u003eAdd event handlers to an element\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat's the event system in React?\u003c/h2\u003e\n\n\u003cp\u003eReact has its own event system with special event handlers called \u003ccode\u003eSyntheticEvent\u003c/code\u003e. The reason for having a specific event system instead of using native events is cross-browser compatibility. Some browsers treat events differently, and by wrapping these events into a consistent API, React makes our lives a lot easier. It's important to keep in mind that they are the  \u003cem\u003eexact same events\u003c/em\u003e, just implemented in a consistent way! That means these events also have methods that you can call like \u003ccode\u003epreventDefault()\u003c/code\u003e, \u003ccode\u003estopPropagation()\u003c/code\u003e, and so on.\u003c/p\u003e\n\n\u003ch2\u003eHow to add event handlers\u003c/h2\u003e\n\n\u003cp\u003eConsider the following component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Tickler extends React.Component {\u003cbr\u003e\u003cbr\u003e  tickle = () =\u0026gt; {\u003cbr\u003e    console.log('Tee hee!');\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;button\u0026gt;Tickle me!\u0026lt;/button\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have a \u003ccode\u003etickle()\u003c/code\u003e function, but no way to trigger it! This is a perfect time to add an event handler so that we can see the message in our console. We attach event handlers to an element much like how we'd add a prop. The handler name is always comprised of \u003ccode\u003eon\u003c/code\u003e, and the event name itself — for example \u003ccode\u003eclick\u003c/code\u003e. These are joined together and camel-cased, so if we wanted to add a click handler, we'd call the prop \u003ccode\u003eonClick\u003c/code\u003e. This prop takes a function as a value — it can either be a reference to a method on the class (like our \u003ccode\u003etickle()\u003c/code\u003e method), or an inline function. Most of the time, we'll use a function reference. It looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;button onClick={this.tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, we're passing a function \u003cem\u003ereference\u003c/em\u003e, and not executing the \u003ccode\u003etickle\u003c/code\u003e function. Now, when we click the button, we see a message in our console. Awesome! Going back to the \u003ca href=\"#tickler-example\"\u003ecomplete example\u003c/a\u003e, let's take a quick look at the other code living there. You will notice our \u003ccode\u003etickle()\u003c/code\u003e method is an arrow function. \u003cstrong\u003eYou will commonly see React component methods defined with arrow functions\u003c/strong\u003e. This is because we often want to access the this keyword within the methods themselves. By using an arrow function, we avoid creating a new scope with a different value of \u003ccode\u003ethis\u003c/code\u003e. Note that this is \u003cem\u003enot\u003c/em\u003e required in the above example (since we're not accessing the component's \u003ccode\u003ethis\u003c/code\u003e). Realistically, most methods in a React component class will use \u003ccode\u003ethis\u003c/code\u003e in one way or another, so it's a good idea to get in the habit of writing your methods as arrow functions.\u003c/p\u003e\n\n\u003cp\u003eThere are a lot of event handlers we can add to an element, for example \u003ccode\u003eonKeyUp\u003c/code\u003e, \u003ccode\u003eonMouseDown\u003c/code\u003e, \u003ccode\u003eonFocus\u003c/code\u003e, \u003ccode\u003eonSubmit\u003c/code\u003e, and many more. Check out the \u003ca href=\"https://facebook.github.io/react/docs/events.html#supported-events\"\u003ecomplete list of supported events\u003c/a\u003e to see what else you can play around with!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/events.html\"\u003eReact Synthetic Events\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/events.html#supported-events\"\u003eSupported-events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"events-system"},{"id":184967,"title":"Events in Detail","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-events-in-detail\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-events-in-detail/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-events-in-detail\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-events-in-detail/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll look at how we can use event data and event pooling. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eAccess event data\u003c/li\u003e\n\u003cli\u003eDescribe how event pooling works\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eAccessing event data\u003c/h2\u003e\n\n\u003cp\u003eLet's take a deeper look at the actual event being passed through. A \u003ccode\u003eSyntheticEvent\u003c/code\u003e event has all of its usual properties and methods. These include its type, target, mouse coordinates, and so on. As a reminder, we add an event handler to a JSX tag, and then we can use the event's data like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexport default class Clicker extends React.Component {\u003cbr\u003e\u003cbr\u003e  handleClick = (event) =\u0026gt; {\u003cbr\u003e    console.log(event.type); // prints 'click'\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;button onClick={this.handleClick}\u0026gt;Click me!\u0026lt;/button\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor example, if we wanted to get the target of an event, we'd use \u003ccode\u003eevent.target\u003c/code\u003e. If we want to prevent a default action whenever an event happens, we call \u003ccode\u003eevent.preventDefault()\u003c/code\u003e. This is all super similar to regular browser events and should feel very familiar!\u003c/p\u003e\n\n\u003ch2\u003eEvent pooling\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/38Gl1kiklmY5W/giphy.gif\" alt=\"Chilling in the pool\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSince React has its own implementation for events (called \u003ccode\u003eSyntheticEvent\u003c/code\u003e), it allows us to take advantage of several techniques to increase the performance of our applications. One such technique is called 'event pooling'. It might sound complicated, but it's actually pretty simple.\u003c/p\u003e\n\n\u003cp\u003eEvent pooling means that whenever an event fires, its event data (an object) is sent to the callback. The object is then immediately cleaned up for later use. This is what we mean by 'pooling': the event object is in effect being sent back to the pool for use in a later event. It's something that trips up a lot of people, and you might have run into it yourself when inspecting \u003ccode\u003eSyntheticEvent\u003c/code\u003e in the browser.\u003c/p\u003e\n\n\u003cp\u003eIf we click the button of our \u003ccode\u003eClicker\u003c/code\u003e component and then inspect the logged out object in our console, we notice that all properties are \u003ccode\u003enull\u003c/code\u003e again. By the time we inspect the object in our browser, the event object will have already been returned to the pool. This means that we can't access event data in an asynchronous manner by saving it in the state, or running a timeout and \u003cem\u003ethen\u003c/em\u003e accessing the event again.\u003c/p\u003e\n\n\u003cp\u003eYou usually don't need to access your event data in an asynchronous manner like described above, but if you do, there are two options: you either store the data you need in a variable (e.g. \u003ccode\u003econst target = event.target\u003c/code\u003e), \u003cem\u003eor\u003c/em\u003e we can make the event persistent by calling that method: \u003ccode\u003eevent.persist()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/events.html\"\u003eReact Events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"events-in-detail"}]},{"id":20120,"name":"Forms in React","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"gef4b1da64fc4c05a9073bbdba90a92e9","items":[]},{"id":20121,"name":"Component Lifecycle","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g552ab9c333bc17fca222d116883cd2b1","items":[{"id":184974,"title":"Component Lifecycle Overview","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-component-lifecycle-overview\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-component-lifecycle-overview/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-component-lifecycle-overview\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-component-lifecycle-overview/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll describe the phases, as well as the importance, of the\nReact component lifecycle.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDistinguish between props and states as they relate to React components\u003c/li\u003e\n\u003cli\u003eDescribe the three phases of the React component lifecycle\u003c/li\u003e\n\u003cli\u003eDefine lifecycle methods and how they enable the component to react to different events\u003c/li\u003e\n\u003cli\u003eDefine and describe various lifecycle methods\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eComponent Lifecycle\u003c/h2\u003e\n\n\u003cp\u003eReact components have two sets of properties: \u003cstrong\u003eprops\u003c/strong\u003e and \u003cstrong\u003estate\u003c/strong\u003e. Props are\ngiven to the component by its parent. You can think of props as an external\ninfluence that the component has no control over, whereas a component's state is\ninternal to the component. A component's state can change in conjunction to the\nprops changing or when the user interacts with the component.\u003c/p\u003e\n\n\u003cp\u003eThe React framework was designed to enable developers to create complex and\nhighly reactive UIs. This enables the components to quickly adapt to changes\nfrom user interactions or updates in the app. In order to enable this, React\ncomponents go through what we call a \u003cstrong\u003ecomponent lifecycle\u003c/strong\u003e. This is broadly\ndivided into three parts: \u003cstrong\u003ecreation\u003c/strong\u003e, \u003cstrong\u003eupdating\u003c/strong\u003e, and \u003cstrong\u003edeletion\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis means that every single thing you see in applications written in React is\nactually a React component and/or a part of one! For example, if you open a new\nchat window in a website written in React, a \u003ccode\u003eChatWindow\u003c/code\u003e component is\n\u003cstrong\u003ecreated\u003c/strong\u003e. As you are interacting with it and sending messages to your friends -\nthat's the \u003cstrong\u003eupdating\u003c/strong\u003e part. And when you finally close the window, the React\ncomponent gets \u003cstrong\u003edeleted\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt seems all pretty straightforward from the user's perspective, however as\nyou'll soon find out, there's a lot of stuff going on behind the scenes.\u003c/p\u003e\n\n\u003ch2\u003eLifecycle Hooks and Rendering\u003c/h2\u003e\n\n\u003cp\u003eIn order to enable this quick reacting and updating, as a developer, you get\naccess to certain built-in events in the React component lifecycle called\n\u003cstrong\u003elifecycle hooks\u003c/strong\u003e or \u003cstrong\u003elifecycle methods\u003c/strong\u003e. These are opportunities for you to\nchange how the component reacts (or doesn't react) to various changes in your\napp.\u003c/p\u003e\n\n\u003cp\u003eThese methods are called \u003cem\u003elifecycle\u003c/em\u003e methods, because they are called at\ndifferent times in the component's lifecycle - just before it's created, after\nit's created, and when it's about to be deleted.\u003c/p\u003e\n\n\u003cp\u003eThe only required method for a React component to be valid is the \u003ccode\u003erender()\u003c/code\u003e\nmethod which describes what the HTML for the component looks like. There are a\nwhole host of optional methods you can use if you need more control over how the\ncomponent responds to change. The optional methods will be called if you include\ndefinitions for them in a component. Otherwise, React will follow its default\nbehavior.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://i1.wp.com/programmingwithmosh.com/wp-content/uploads/2018/10/Screen-Shot-2018-10-31-at-1.44.28-PM.png\" alt=\"Diagram\"\u003e\u003c/p\u003e\n\n\u003ch2\u003ePre-mounting\u003c/h2\u003e\n\n\u003cp\u003eIt is important to remember that components, at their core, are just JS classes.\nThis means that even before mounting has begun, the class's \u003ccode\u003econstructor\u003c/code\u003e\nfunction is called.\u003c/p\u003e\n\n\u003cp\u003eWhile the \u003ccode\u003econstructor\u003c/code\u003e is not related to mounting to the DOM, it is the first\nfunction called upon the initialization of a component; this makes it useful for\ncreating an initial state for a component.\u003c/p\u003e\n\n\u003ch2\u003eMounting\u003c/h2\u003e\n\n\u003cp\u003eWhen the component is initially created, it gets mounted onto the DOM. It sounds\nmore complicated than it is: the component figures out its initial state and\nrenders its initial JSX onto the page. At the mounting stage, there are two\n\u003cem\u003elifecycle hooks\u003c/em\u003e available to us: \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e, and\n\u003ccode\u003ecomponentDidMount\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter the \u003ccode\u003econstructor\u003c/code\u003e is called, \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e will get\ncalled just \u003cem\u003ebefore\u003c/em\u003e \u003ccode\u003erender\u003c/code\u003e. This method gives us access to any props and\nstate, and can modify and return state before a component is rendered. This\nmethod gets called every time a component renders, including the initial render\nand all subsequent re-renders of content. It is uncommon that we use this hook, though -\neven \u003ca href=\"https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops\"\u003ethe React documentation\u003c/a\u003e mentions that it exists for rare use\ncases. We want to prioritize rendering - adding logic that runs before every\nrender can have an impact on a component's performance. It is more common that\nwe want the component to render \u003cem\u003efirst\u003c/em\u003e so a user sees something on the page\nas soon as possible. Once rendered, we can update state, handle complex logic,\netc...\u003c/p\u003e\n\n\u003cp\u003eIn addition, it may seem useful to have access to both props and state and to\ncompare them before rendering, but if you find yourself in need of this, its\npossible there is a better pattern. If you're comparing props from a parent to\nthe state of a child, you can often avoid this by just putting the state \u003cem\u003ein the\nparent component\u003c/em\u003e and handle the comparison logic in the parent.\u003c/p\u003e\n\n\u003cp\u003eSince the introduction of React 16, \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e is the\n\u003cem\u003eonly\u003c/em\u003e hook that fires before render() during mounting. Any code in this\nlifecycle method is extra code to run \u003cem\u003ebefore\u003c/em\u003e JSX is rendered to the DOM.\u003c/p\u003e\n\n\u003cp\u003eAfter the \u003ccode\u003econstructor\u003c/code\u003e and \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e, \u003ccode\u003erender\u003c/code\u003e is\ninvoked, most often returning JSX so that React can insert it into the DOM.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecomponentDidMount\u003c/code\u003e method will get called just \u003cem\u003eafter\u003c/em\u003e the \u003ccode\u003erender\u003c/code\u003e method.\nYou would use this method to set up any long-running processes or asynchronous\nprocesses such as fetching and updating data. It is better to render and display\n\u003cem\u003esomething\u003c/em\u003e to your user even if all of your data isn't ready yet. Once it \u003cem\u003eis\u003c/em\u003e\nready, React can just re-render and use the API content.\u003c/p\u003e\n\n\u003ch2\u003eUpdating\u003c/h2\u003e\n\n\u003cp\u003eWhenever a component's state or props are changed, it gets re-rendered on the\npage. That's the beauty of React components - they're quick to \u003cem\u003ereact\u003c/em\u003e to\nchanges. A re-render could be triggered when a user interacts with the\ncomponent, or if new data (props or state) is passed in.\u003c/p\u003e\n\n\u003cp\u003eFor example, going back to the chat window example, whenever you press \"send\" on\na message, the \u003ccode\u003eChatWindow\u003c/code\u003e component gets re-rendered as it needs to display an\nextra message. Whenever a re-render is triggered, there is a whole host of\nlifecycle hooks that get called. You can choose to use any of these to decide\nhow your React component should respond to changes.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e is invoked before anything else when\nupdating a component, and again, is available for rare situations where you may\nneed to calculate state changes prior to an update.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method is invoked just before the component is about\nto re-render. At this stage, you can compare the old and new props and state and\nprevent unnecessary re-renders: if the changes in state and/or props don't\nactually alter the component that's being shown to the user, there is no point\n\"repainting\" it as it is an unnecessary performance drain.\u003c/p\u003e\n\n\u003cp\u003eAfter the first two hooks, \u003ccode\u003erender\u003c/code\u003e is called, returning the JSX for React.\nReact uses this JSX to figure out what to display on the page.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eJust\u003c/em\u003e before updating, \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e is invoked. The\n\u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e method returns a 'snapshot' that can be used in the\nfinal update lifecycle method, \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e. This snapshot allows us to\ncapture things like scroll position. This sort of value can possibly change in\nthe small amount of time before \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e is invoked.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e method is called just after the component is rendered\nand updated. It is possible in \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e to take some actions\nwithout triggering a re-render of the component, such as focusing on a specific\nform input.\u003c/p\u003e\n\n\u003cp\u003eYou will have access to the previous props and state as well as the current\nones, and you can use this method to update any third party libraries if they\nhappen to need an update due to the re-render.\u003c/p\u003e\n\n\u003ch2\u003eUnmounting\u003c/h2\u003e\n\n\u003cp\u003eAt the unmounting stage, the component gets deleted and cleared out of the page.\nThe only lifecycle hook at this stage is \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e, which is called\njust before the component gets deleted. This is used to clear out any stuff set\nup in \u003ccode\u003ecomponentDidMount\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had a component that displays the weather data in your home\ntown, you might have set it up to re-fetch the updated weather information every\n10 seconds in \u003ccode\u003ecomponentDidMount\u003c/code\u003e. When the component gets deleted, you wouldn't\nwant to continue doing this data-fetching, so you'd have to get rid of what was\nset up in \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eImagine a big old oak tree. The tree could be a parent component, each of its\nbranches a child component of the tree, each of its leaves a child component of\nthe branch and so on. Each of the leaves go through a very obvious lifecycle of\nbeing created, changing based on state (changing colour based on the season,\nwithering if there's not enough nutrition being passed down from the parent\nbranch, changing into a leaf with a hole bitten out of it if a caterpillar\nmunches on it), and finally falling down when it's autumn.\u003c/p\u003e\n\n\u003cp\u003eSo as it seems, if you need a lifecycle hook, there's sure to be one for your\nevery need!\u003c/p\u003e\n\n\u003ch4\u003eMounting lifecycle methods\u003c/h4\u003e\n\n\u003cp\u003eCalled once on initial render:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just before \u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e is called for the first time\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eSetting initial state\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eright before the initial render and \u003cstrong\u003eall\u003c/strong\u003e re-renders\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eNot used often\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003erender()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eevery time React updates and commits to the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eWriting JSX for components\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just after mounting\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003esetting up side effects (e.g. creating new DOM elements or setting up asynchronous functions\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch4\u003eUpdating lifecycle methods\u003c/h4\u003e\n\n\u003cp\u003eNot called on initial render, but always called whenever a subsequent re-render is triggered:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ebefore every render\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eNot used often\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003eshouldComponentUpdate\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ebefore every re-render (not initially)\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ecan be used to stop unnecessary re-renders for performance optimization\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ejust before React updates and commits new content to the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eused rarely; can capture data that may be changing rapidly\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentDidUpdate\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ejust after a re-render has finished\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eany DOM updates following a render (mostly interacting with 3rd party libraries)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eCurrent props and state are always available through \u003ccode\u003ethis.props\u003c/code\u003e and\n\u003ccode\u003ethis.state\u003c/code\u003e. Some of these methods have access to previous props and state, or\nthe next props and state. In these cases, the props and state are being passed\ninto the method by React.\u003c/p\u003e\n\n\u003ch4\u003eDismounting lifecycle method\u003c/h4\u003e\n\n\u003cp\u003eCalled only once, just before the component is removed from the DOM:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentWillUnmount\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003en/a\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just before component is removed from the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003edestroying any side effects set up in componentDidMount\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/component-specs.html\"\u003eReact: Component Specs and Lifecycle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://busypeoples.github.io/post/react-component-lifecycle/\"\u003eUnderstanding the React Component Lifecycle\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"component-lifecycle-overview"},{"id":184975,"title":"Component Mounting","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-component-mounting-lifecycle-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-component-mounting-lifecycle-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-component-mounting-lifecycle-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-component-mounting-lifecycle-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll describe what happens in the mounting and unmounting phases of a React\ncomponent's lifecycle.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe the \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e and \u003ccode\u003ecomponentDidMount\u003c/code\u003e \nlifecycle methods in the mounting phase\u003c/li\u003e\n\u003cli\u003eDescribe the \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e lifecycle method in the unmounting phase\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eSetup and Cleanup\u003c/h2\u003e\n\n\u003cp\u003eA React component's lifecycle contains distinct phases for creation and\ndeletion. In coding terms, these are called \u003cstrong\u003emounting\u003c/strong\u003e and \u003cstrong\u003eunmounting\u003c/strong\u003e. You\ncan also think of them as \"setup\" and \"cleanup\".\u003c/p\u003e\n\n\u003cp\u003eIf you were going to have a picnic, just before you lay down the picnic blanket\nyou'd make sure the ground was level and clean. Also, after you're done, and\nbefore you clean up your picnic blanket, you'd make sure you've taken all your\nbelongings off it and cleared up any garbage left on the grass so people after\nyou can easily use the same spot.\u003c/p\u003e\n\n\u003cp\u003eThat's very similar to what happens with React components. The browser window is\nalmost like a great big field that loads the components that can be used. And\nwhen they leave, it's only polite of them to clean up the space they were using —\nso that other components can reuse the same space without any annoyances due to\nthings left behind.\u003c/p\u003e\n\n\u003ch2\u003ePre-Mounting\u003c/h2\u003e\n\n\u003ch4\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eTechnically the \u003cstrong\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/strong\u003e is the first function called upon\ninstantiating \u003cstrong\u003eany\u003c/strong\u003e class in JS, not just React Components. That being said,\nthe \u003cstrong\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/strong\u003e has an important role in the life of a component, as it\nacts as a perfect place to set the initial state of a component. Within the\nconstructor, one can initialize state like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass App extends React.Component {\u003cbr\u003e\u003cbr\u003e  constructor() {\u003cbr\u003e    super()\u003cbr\u003e    this.state = {\u003cbr\u003e      key: \"value\"\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn ES7, it is possible to initialize state by simply doing the following inside\nof your component. If you see either the syntax above or below, keep in mind\nthat they accomplish the same task at the same time during the component\nlifecycle.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass App extends React.Component {\u003cbr\u003e  state = {\u003cbr\u003e    key: \"value\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote: Bear in mind that we call \u003ccode\u003esuper\u003c/code\u003e so that we can execute the \u003ccode\u003econstructor\u003c/code\u003e\nfunction that is inherited from React.Component while adding our own\nfunctionality.\u003c/p\u003e\n\n\u003cp\u003eIt is possible to use the \u003ccode\u003econstructor\u003c/code\u003e to set an initial state that is\ndependent upon props like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econstructor(props) {\u003cbr\u003e  super(props);\u003cbr\u003e  this.state = {\u003cbr\u003e    color: props.initialColor\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e//source: https://reactjs.org/docs/react-component.html#constructor\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that in contrast to the previous example, we take \u003ccode\u003eprops\u003c/code\u003e as an argument to\nthe constructor. This is because we are making use of the props to set an\ninitial state - if we aren't using props to do this, then we need not include\n\u003ccode\u003eprops\u003c/code\u003e as an argument to the constructor.\u003c/p\u003e\n\n\u003ch2\u003eMounting\u003c/h2\u003e\n\n\u003cp\u003eIn the mounting (or DOM creation, or \"setup\") phase, we have access to two\n\u003cstrong\u003elifecycle methods\u003c/strong\u003e: \u003cstrong\u003e\u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e\u003c/strong\u003e, and \u003cstrong\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e\u003c/strong\u003e is called every time a component is\nrendered, including the first time, during mounting. From the \u003ca href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state\"\u003eReact blog\u003c/a\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt;\u0026gt; \"getDerivedStateFromProps exists for only one purpose. It enables a component\nto update its internal state as the result of changes in props... We did not\nprovide many examples, because as a general rule, derived state should be used\nsparingly.\"\u003c/p\u003e\n\n\u003cp\u003eIn the context of mounting, if your intention is to set an initial state for\nyour component, it is preferable for you to do this in the \u003ccode\u003econstructor\u003c/code\u003e as\nshown above.\u003c/p\u003e\n\n\u003cp\u003eIf your intention is to set state using data from an async request, it is\npreferable that you do this in \u003ccode\u003ecomponentDidMount\u003c/code\u003e, as we will see below.\u003c/p\u003e\n\n\u003cp\u003eIn picnic terms, \u003ccode\u003egetDerivedStateFromProp\u003c/code\u003e is the moment when you arrive at the\nfield with your picnic blanket and you make sure the spot you've chosen is nice\nand level. You might find something to clean up before you lay your blanket\ndown. However, you're already here. Doing anything else now is just delaying you\nfrom spreading out the blanket and enjoying your lunch.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/strong\u003e is also only called once, but immediately \u003cem\u003eafter\u003c/em\u003e\nthe first \u003ccode\u003erender()\u003c/code\u003e method has taken place. That means that the HTML for the\nReact component has been rendered into the DOM and can be accessed if necessary.\nThis method is used to perform any DOM manipulation or data-fetching that the\ncomponent might need.\u003c/p\u003e\n\n\u003cp\u003eIf you were at a picnic, this is the moment just after you've laid out your\nblanket. You would use this time to set up any things you want to be using\nduring your stay: lay out all your food and drinks, maybe take out a radio and\nput some music on.\u003c/p\u003e\n\n\u003cp\u003eIn React, this is where you would set up any long-running processes you want to\nuse in your component, for example fetching data. Suppose we were building a\nweather app that fetches data on the current weather and displays it to the\nuser. We would want this data to update every 15 seconds without the user having\nto refresh the page. \u003ccode\u003ecomponentDidMount\u003c/code\u003e to the rescue!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecomponentDidMount() {\u003cbr\u003e  this.interval = setInterval(this.fetchWeather, 15000);\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUnmounting\u003c/h2\u003e\n\n\u003cp\u003eIn the unmounting (or deletion, or \"cleanup\") phase, we have just one lifecycle\nmethod to help us out: \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e. The \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e method\nis the last function to be called immediately before the component is removed\nfrom the DOM. It is generally used to perform clean-up for any DOM-elements or\ntimers created in \u003cstrong\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eAt a picnic, \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e corresponds to just before you pick up your\npicnic blanket. You would need to clean up all the food and drinks you've set on\nthe blanket first or they'd spill everywhere! You'd also have to shut down your\nradio. After that's all done you would be free to pick up your picnic blanket\nand put it back in the bag safely. There is no need to make a sandwich right\nnow, we're already leaving.\u003c/p\u003e\n\n\u003cp\u003eFor a React component, this is where you would clean up any of those long\nrunning processes that you set up in \u003ccode\u003ecomponentDidMount\u003c/code\u003e. In the above data\nfetching example, all we would have to do is clear the interval so that the\nweather API would no longer get called every 15 seconds:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecomponentWillUnmount() {\u003cbr\u003e  clearInterval(this.interval);\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eThe mounting and unmounting steps are important for ensuring that the React\ncomponent gets set up and initialized nicely and that when it gets unmounted, it\nleaves the space it occupied just as it was before: nice and tidy.\u003c/p\u003e\n\n\u003cp\u003eIn the mounting step, we can set up any special requirements we may have for\nthat particular component: fetch some data, start counters etc. It is extremely\nimportant to clean up all the things we set up in the unmounting stage in\n\u003ccode\u003ecomponentWillUnmount\u003c/code\u003e, as not doing so may lead to some pretty nasty\nconsequences - even as bad as crashing your carefully crafted application!\u003c/p\u003e\n\n\u003ch4\u003eMounting lifecycle methods\u003c/h4\u003e\n\n\u003cp\u003eCalled once on initial render:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just before \u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e is called for the first time\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eSetting initial state\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eright before the initial render and \u003cstrong\u003eall\u003c/strong\u003e re-renders\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eNot used often\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003erender()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eevery time React updates and commits to the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eWriting JSX for components\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just after mounting\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003esetting up side effects (e.g. creating new DOM elements or setting up asynchronous functions\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch4\u003eUnmounting lifecycle method\u003c/h4\u003e\n\n\u003cp\u003eCalled only once, just before the component is removed from the DOM:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentWillUnmount\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003en/a\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just before component is removed from the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003edestroying any side effects set up in componentDidMount\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/component-specs.html\"\u003eReact: Component Specs and Lifecycle\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"component-mounting"},{"id":184978,"title":"Component Updating","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-update-lifecycle-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/react-update-lifecycle-readme/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-update-lifecycle-readme\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-update-lifecycle-readme/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eExplain what happens when React renders a component\u003c/li\u003e\n    \u003cli\u003eExplain why \u003ccode\u003erender()\u003c/code\u003e must be idempotent\u003c/li\u003e\n    \u003cli\u003eDescribe the parts of the component lifecycle leading up to and coming after \u003ccode\u003erender()\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"http://www.awesomelyluvvie.com/wp-content/uploads/2014/04/lion-king-circle-of-life.gif\"\u003e\n\u003c/p\u003e\n\u003cp\u003eThe Circle of Life. Who knew learning about the React framework could bring us to the Lion King? As with every creature in the animal kingdom, React components get created and destroyed only once. The majority of their lifetime is spent on updating - that is, reacting to user interactions.\u003c/p\u003e\n\u003cp\u003eWe are kindly provided with 4 lifecycle methods to help us handle updates:\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e, \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e, \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e and \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThese methods always get called in the same order and the \u003ccode\u003erender()\u003c/code\u003e method which renders the React component into the DOM will be called just before \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e, so the actual order of lifecycle methods being called is:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003estatic getDerivedStateFromProps(props, state)\u003c/code\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003eshouldComponentUpdate(nextProps, nextState)\u003c/code\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003erender()\u003c/code\u003e (can access props and state via \u003ccode\u003ethis.props\u003c/code\u003e and \u003ccode\u003ethis.state\u003c/code\u003e - previous props are no longer available)\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003egetSnapshotBeforeUpdate(prevProps, prevState)\u003c/code\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003ecomponentDidUpdate(prevProps, prevState, snapshot)\u003c/code\u003e (can still access current props and state via \u003ccode\u003ethis.props\u003c/code\u003e and \u003ccode\u003ethis.state\u003c/code\u003e and this is the last time previous props and state will be available).\u003c/p\u003e\n    \u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003e\u003ccode\u003estatic getDerivedStateFromProps(props, state)\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis method is called on \u003cem\u003eevery\u003c/em\u003e update, meaning whenever the component is receiving new props from its parent or the component's state has changed. A word of caution: a common mistake here is to assume that the props have changed. Just because the method is called doesn't necessarily mean that the props have changed. It is entirely possible that a parent component has updated and in re-rendering has passed the \u003cem\u003esame\u003c/em\u003e props down to its children. In this case, regular components will still be triggered to update.\u003c/p\u003e\n\u003cp\u003eThis method is for deriving state, meaning you want to modify a component's state based on something in the new props. React's \u003ca href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\"\u003eofficial advice\u003c/a\u003e is that you probably don't need this, and in many cases where it seems necessary, there is often a better solution.\u003c/p\u003e\n\u003ch4\u003e\u003ccode\u003eshouldComponentUpdate(nextProps, nextState)\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method is the odd one out in the lifecycle methods as it doesn't operate on the state, but has a \u003ccode\u003eBoolean\u003c/code\u003e return value determining whether the component should update or not. Its sole use is for custom performance optimization.\u003c/p\u003e\n\u003cp\u003eSay, for instance, you only want a component to update when a value changes past a set threshold, you could use this method to prevent component updating \u003cem\u003euntil\u003c/em\u003e the props meet the requirement.\u003c/p\u003e\n\u003cp\u003eFor general optimization of updating, React recommends an alternative - use \u003ccode\u003eReact.PureComponent\u003c/code\u003e instead of \u003ccode\u003eReact.Component\u003c/code\u003e. From the \u003ca href=\"https://reactjs.org/docs/react-api.html#reactpurecomponent\"\u003eReact reference materials\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e\u0026gt; \"If your React component’s render() function renders the same result given the same props and state, you can use React.PureComponent for a performance boost in some cases.\"\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ePureComponent\u003c/code\u003e does not have access to \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e, because it instead runs its own version. The \u003ccode\u003ePureComponent\u003c/code\u003e checks to see if there are any \u003cem\u003eshallow\u003c/em\u003e changes to props and state and will only update if it registers a difference between the current and next states.\u003c/p\u003e\n\u003cp\u003eWhen your applications start to get really big, using \u003ccode\u003ePureComponent\u003c/code\u003e is useful for stopping un-necessary re-renders and making your website faster.\u003c/p\u003e\n\u003cp\u003eWhen you really want to customize the logic for when to re-render, use \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshouldComponentUpdate(nextProps, nextState) {\u003cbr\u003e  return (this.props.myImportantValue !== nextProps.myImportantValue);\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003erender()\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003erender()\u003c/code\u003e method is the most familiar one to all React developers. In fact, in everyday development, we often end up writing React components that only use the \u003ccode\u003erender()\u003c/code\u003e method! At this stage, the next props and state have become available as \u003ccode\u003ethis.props\u003c/code\u003e and \u003ccode\u003ethis.state\u003c/code\u003e and the component gets rendered into React's virtual DOM.\u003c/p\u003e\n\u003cp\u003eIn a theater, this is when a specific scene in a play is being carried out: no changes are being made to the script or the scenery at this stage, it is purely taking the script the director is happy with and the props that have been laid out, and carrying out the play.\u003c/p\u003e\n\u003ch4\u003e\u003ccode\u003egetSnapshotBeforeUpdate(prevProps, prevState)\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eRight after render, but \u003cem\u003ejust before\u003c/em\u003e React commits content from its virtual DOM to the actual DOM, the \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e method is fired. This method is currently only used to capture information that may be changed after an update. For instance, mouse position and scroll position might be changing rapidly and will change by the time the next lifecycle method is invoked. This method returns either \u003ccode\u003enull\u003c/code\u003e or a value that will be passed into the next method, \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e.\u003c/p\u003e\n\u003ch4\u003e\u003ccode\u003ecomponentDidUpdate(prevProps, prevState, snapshot)\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis method isn't used very often, but it is kind of a look back to the update that just occurred. We will have access to both the current props and previous props, as well as any snapshot info from \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e. A common use case for this would be to update a 3rd party library.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  componentDidUpdate(previousProps, previousState) {\u003cbr\u003e   if (previousProps.height !== this.props.height) {\u003cbr\u003e     someChartLibrary.updateHeight(this.props.height);\u003cbr\u003e   }\u003cbr\u003e  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method can also be used to interact with the DOM, say by adjusting scroll position.\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eThese are all the tools we get to help us decide how to react to changes in our component. The \u003ccode\u003erender()\u003c/code\u003e method is the only one we \u003cem\u003emust\u003c/em\u003e have - everything else is optional. Use these methods sparingly. In the ideal world, we want to have as little of these methods as possible.\u003c/p\u003e\n\u003ch4\u003eUpdating lifecycle methods\u003c/h4\u003e\n\u003cp\u003eNot called on initial render, but always called whenever a subsequent re-render is triggered:\u003c/p\u003e\n\u003ctable\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003epreviousProps\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003epreviousState\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ebefore every render\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eNot used often\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003eshouldComponentUpdate\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ebefore every re-render (not initially)\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ecan be used to stop unnecessary re-renders for performance optimization\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ejust before React updates and commits new content to the DOM\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eused rarely; can capture data that may be changing rapidly\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentDidUpdate\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ejust after a re-render has finished\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eany DOM updates following a render (mostly interacting with 3rd party libraries)\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003ecomponentDidUpdate\u003c/code\u003e will actually receive the previous props and state as arguments, as the newly applied state and props can be accessed through \u003ccode\u003ethis.props\u003c/code\u003e and \u003ccode\u003ethis.state\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://media.giphy.com/media/wDOFUCaxyv2XC/giphy.gif\"\u003e\n\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://github.com/learn-co-curriculum/react-rendering\"\u003eReact: Component Specs and Lifecycle\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation\"\u003eIdempotent Operations\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","exportId":"component-updating"}]},{"id":20122,"name":"Async React","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gcd6e67064b262aa42b09fd5f22c4c872","items":[{"id":184980,"title":"Asynchronous React","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-async-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-async-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-async-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-async-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eWe've seen that React components come with some neat-o bells and whistles. They\ncan be nested within each other. They can pass information and logic between\nthem with props and they can keep track of their own information in state.\u003c/p\u003e\n\n\u003cp\u003eSo far though, we've been restricted to displaying information organized by the\nReact app itself. In this lesson, we're going to go a step further and\nincorporate remote data into our React apps. Using fetch requests to APIs, we\ncan build dynamic, responsive apps around data that is provided to us remotely.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce the use of \u003ccode\u003efetch\u003c/code\u003e within components\u003c/li\u003e\n\u003cli\u003eConsider some of the best places to include \u003ccode\u003efetch\u003c/code\u003e in our React app\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eUsing \u003ccode\u003efetch\u003c/code\u003e Within React\u003c/h4\u003e\n\n\u003cp\u003eFor a minute, consider how a site like \u003ca href=\"https://www.instagram.com/\"\u003eInstagram\u003c/a\u003e works. If you've got\nan account on Instagram, when you visit the site, you'll see an endless scroll\nof photos from people you follow. Everyone sees the same \u003cem\u003eInstagram\u003c/em\u003e website,\nbut the images displayed are unique to the user.\u003c/p\u003e\n\n\u003cp\u003eSimilarly, consider \u003ca href=\"https://www.imdb.com/\"\u003eIMDb, the Internet Movie Database\u003c/a\u003e. When you click to\nlook at a movie's information, the page is always the same. The data, the\nimages, the reviews, the cast... this information changes.\u003c/p\u003e\n\n\u003cp\u003eBoth of these websites are built with React. When you go to one of these sites,\nReact doesn't have the specific movie or image content. If you're on a slow\nconnection (or \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/network-conditions\"\u003ewant to mimic one using the Chrome Dev Tools\u003c/a\u003e), you can\nsee what is happening more clearly. \u003cem\u003eReact\u003c/em\u003e shows up first and renders\n\u003cem\u003esomething\u003c/em\u003e. Sometimes it is just the background or the skeleton of a website, or\nmaybe navigation and CSS. On Instagram, a photo 'card' might appear but without\nan image or username attached.\u003c/p\u003e\n\n\u003cp\u003eReact is \u003cem\u003emounting\u003c/em\u003e its basic components \u003cem\u003efirst\u003c/em\u003e. Once these are mounted, remote\ndata is then requested. When that data has been received, React runs through an\nupdate of the necessary components and fills in the info it received. Text\ncontent will appear, user information, etc... This first set of data is likely\njust a JSON object specific to the user or content requested. This object might\ncontain image URLs, so right after the component update, images will be able\nto load.\u003c/p\u003e\n\n\u003cp\u003eSo, since the data is being requested \u003cem\u003eafter\u003c/em\u003e React has mounted its components,\nis there a component lifecycle method that might be useful here?\u003c/p\u003e\n\n\u003cp\u003eWhy yes there is! \u003ccode\u003ecomponentDidMount\u003c/code\u003e happens to be a great place for making\nfetch requests. By putting a \u003ccode\u003efetch()\u003c/code\u003e within \u003ccode\u003ecomponentDidMount\u003c/code\u003e, when the data\nis received, we can use \u003ccode\u003esetState\u003c/code\u003e to store the received data. This causes an\nupdate with that remote data stored in state. A very simple implementation of\nthe App component with \u003ccode\u003efetch\u003c/code\u003e might look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  state = {\u003cbr\u003e    peopleInSpace: []\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.state.peopleInSpace.map(person =\u0026gt; person.name)}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  componentDidMount() {\u003cbr\u003e    fetch('http://api.open-notify.org/astros.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(data =\u0026gt; {\u003cbr\u003e        this.setState({\u003cbr\u003e          peopleInSpace: data.people\u003cbr\u003e        })\u003cbr\u003e      })\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the code above, once App mounts, a \u003ccode\u003efetch\u003c/code\u003e is called to an API. Once data is\nreturned from the API, the simplest way to store some or all of it is to put it in\nstate.\u003c/p\u003e\n\n\u003cp\u003eIf you have JSX content reliant on that state information, when \u003ccode\u003esetState\u003c/code\u003e is\ncalled and the component re-renders, the content will appear.\u003c/p\u003e\n\n\u003cp\u003ePlacing \u003ccode\u003efetch\u003c/code\u003e in \u003ccode\u003ecomponentDidMount\u003c/code\u003e is ideal for data that you need\nimmediately when a user visits your website or uses your app. Since\n\u003ccode\u003ecomponentDidMount\u003c/code\u003e is also commonly used to initialize intervals, it is ideal\nto set up any repeating fetch requests here as well.\u003c/p\u003e\n\n\u003ch4\u003eUsing \u003ccode\u003efetch\u003c/code\u003e With Events\u003c/h4\u003e\n\n\u003cp\u003eWe aren't limited to sending fetch requests when a component is mounted. We can\nalso tie them into events:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehandleClick = event =\u0026gt; {\u003cbr\u003e  fetch('your API url')\u003cbr\u003e    .then(res =\u0026gt; res.json())\u003cbr\u003e    .then(json =\u0026gt; this.setState({data: json}))\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;button onClick={this.handleClick}\u0026gt;Click to Fetch!\u0026lt;/button\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis lets us send requests on demand. Submitting form data would be handled this\nway, using a POST request instead of GET.\u003c/p\u003e\n\n\u003cp\u003eA slightly more complicated example would be the infinite scroll of sites like\nInstagram. An event listener tied to changes in the scroll position of a page\ncould fire off a \u003ccode\u003ehandleScroll\u003c/code\u003e method that requests data before a user reaches\nthe bottom of a page.\u003c/p\u003e\n\n\u003ch4\u003eUsing State with POST Requests\u003c/h4\u003e\n\n\u003cp\u003eOne of the beautiful features of state is that we can organize it however we\nneed. If we were building a form to submit to a server, we can structure state\nto work nicely with what the server is expecting in a POST request.\u003c/p\u003e\n\n\u003cp\u003eSay we were building a user sign up form. When we send the data, our server is\nexpecting two values within the body of the POST, \u003ccode\u003eusername\u003c/code\u003e and \u003ccode\u003epassword\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSetting up a React controlled form, we can structure our state in the same way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estate = {\u003cbr\u003e  username: \"\",\u003cbr\u003e  password: \"\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e//since the id values are the same as the keys in state, we can write an abstract setState here\u003cbr\u003ehandleChange = event =\u0026gt; {\u003cbr\u003e  this.setState({\u003cbr\u003e    [event.target.id]: event.target.value\u003cbr\u003e  })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form onSubmit={this.handleSubmit}\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" id=\"username\" value={this.state.username} onChange={this.handleChange}/\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" id=\"password\" value={this.state.password} onChange={this.handleChange}/\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, when setting up the fetch request, we can just pass the entire state within the\nbody, as there are no other values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehandleSubmit = event =\u0026gt; {\u003cbr\u003e  event.preventDefault()\u003cbr\u003e  fetch('the server URL', {\u003cbr\u003e    method: \"POST\",\u003cbr\u003e    headers: {\u003cbr\u003e      \"Content-Type\": \"application/json\"\u003cbr\u003e    },\u003cbr\u003e    body: JSON.stringify(this.state)\u003cbr\u003e  })\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice how we're not bothering to worry about \u003ccode\u003eevent.target\u003c/code\u003e when posting the\ndata. Since the form is controlled, state contains the most up-to-date form\ndata, and it is already in the right format!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere are no hard and fast rules for how to include fetch requests, and a lot of\nstructure will depend on the data you're working with. As a general practice for\nwriting simpler component code, include \u003ccode\u003efetch\u003c/code\u003e calls in the same component as\nyour top level state. You can always pass down methods as props that contain\n\u003ccode\u003efetch\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\"\u003efetch\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"asynchronous-react"},{"id":184983,"title":"Types of Components","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-types-of-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-types-of-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-types-of-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-types-of-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eSo far in this course, we've dealt with React's \u003cem\u003eclass\u003c/em\u003e components. These class\ncomponents have all the features we've been learning about - class components\nhave \u003cem\u003estate\u003c/em\u003e, \u003cem\u003elifecycle\u003c/em\u003e methods and can contain their own custom class\nmethods. \u003cem\u003eClass\u003c/em\u003e components are fully featured, but there are times when we\nreally don't need all these features. Some components don't need state. Many\ncomponents don't need to use lifecycle methods. For these cases, there are\nbetter options. In this lesson, we will be looking at some of the alternatives\nto class components. These alternatives can offer a more simplified way to write\ncomponents, while also providing some boosts to performance!\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce pure components and functional components\u003c/li\u003e\n\u003cli\u003eCompare the differences between components, pure components and functional\ncomponents\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eClass Components\u003c/h4\u003e\n\n\u003cp\u003eWe've covered the features of class components thoroughly through the previous\nlessons. To be clear, you can write \u003cem\u003eall of your components\u003c/em\u003e as class\ncomponents. Even with a complex app with many components, this will work just\nfine.\u003c/p\u003e\n\n\u003cp\u003eIf you're not sure how complex a component will become while creating it, just\nstart with a class component. At a minimum, a class component looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003ePure Components\u003c/h4\u003e\n\n\u003cp\u003eA pure component is nearly identical to a regular component. The only difference\nis that a pure component does not have access to the  \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e\nmethod, instead performing an automatic, shallow comparison of old and new props\nand state. To write them, you just need to import and use \u003ccode\u003ePureComponent\u003c/code\u003e\ninstead of \u003ccode\u003eComponent\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { PureComponent } from 'react'\u003cbr\u003e\u003cbr\u003eclass App extends PureComponent {\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe concept of a pure component is similar to a pure function. If a component is\nrepeatedly given the same initial values (props and state), it should behave the\nsame way each time. So, if props and state aren't changing, there is no need to\nupdate the component.\u003c/p\u003e\n\n\u003cp\u003eIf you don't need to fine tune how a class component updates, considered\nconverting most or all of your regular components into pure components.\u003c/p\u003e\n\n\u003ch4\u003eFunctional Components\u003c/h4\u003e\n\n\u003cp\u003eAlthough React is clever when it comes to rendering class components, every\nclass component, when rendered, goes through a series of checks related to its\nlifecycle. If we do not need to use state or lifecycle methods, we can avoid\nthese checks by writing a \u003cem\u003efunctional\u003c/em\u003e component.\u003c/p\u003e\n\n\u003cp\u003eA functional component requires much less than a class component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst App = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;{props.greeting}\u0026lt;/div\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA functional component \u003cem\u003ereturns\u003c/em\u003e JSX, instead of using a \u003ccode\u003erender\u003c/code\u003e method. It\ndoesn't extend \u003ccode\u003eComponent\u003c/code\u003e, so it hasn't inherited what is needed to store\nstate. Functional components can still receive props, but notice above that they\nhave to explicitly be written as the argument for the function.\u003c/p\u003e\n\n\u003cp\u003eFunctional components \u003cem\u003ecan\u003c/em\u003e be fairly complex if we want. We can write helper\nfunctions and variables in the same file and use them within the functional\ncomponent. Generally, though, functional components are very handy for simple,\nlightweight components. Often, when we want a component to just \u003cem\u003edisplay\u003c/em\u003e\ncontent and not worry about any heavy logic, functional components are a great\noption.\u003c/p\u003e\n\n\u003cp\u003eWith ES6, we can even shorten functional components to single lines:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst App = props =\u0026gt; \u0026lt;div\u0026gt;{props.greeting}\u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCombined with \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"\u003eobject destructuring\u003c/a\u003e, we can extract out the\n\u003ccode\u003egreeting\u003c/code\u003e value from \u003ccode\u003eprops\u003c/code\u003e, and do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst App = ({ greeting }) =\u0026gt; \u0026lt;div\u0026gt;{ greeting }\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis simplicity makes it fast and easy to build reusable components. If you've\ngot a bunch of styled buttons on a React app, for instance, you can write a\nreusable Button component that has a consistent style but receives props that\ndefine its text and click event function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst Button = ({ handleClick, text })=\u0026gt; \u0026lt;button style=\"myButton\" onClick={ handleClick }\u0026gt;{ text }\u0026lt;/button\u0026gt;\u003cbr\u003e\u003cbr\u003eexport default Button\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFunctional components update based on prop changes \u003cem\u003eor\u003c/em\u003e if their parent component\nre-renders.\u003c/p\u003e\n\n\u003ch2\u003eContainer vs Presentation Components\u003c/h2\u003e\n\n\u003cp\u003eSo we have both class based and functional components, but you may have also\nheard talk of \u003cem\u003econtainer\u003c/em\u003e and \u003cem\u003epresentation\u003c/em\u003e components. These are not different\n\u003cem\u003etypes\u003c/em\u003e of components, but instead, are a way of thinking on how to organize a\nReact app.\u003c/p\u003e\n\n\u003cp\u003ePresentational components are only concerned with displaying content.\nThey typically don't deal with state, or have a lot of added logic within them.\nThey receive props and display content. The Button component from the functional\ncomponent section above is a great example of this.\u003c/p\u003e\n\n\u003cp\u003eImagine for a moment we were designing a navigation bar, full with links and\ndrop down menus, a search form and a brand logo. In React, we can\ncompartmentalize - each piece can be a component (NavLinks, Menu, Search, etc..)\nand since they all go together, we can create a parent component, that acts as a\n\u003cem\u003econtainer\u003c/em\u003e for everything.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react'\u003cbr\u003eimport Logo from './Logo'\u003cbr\u003eimport NavLinks from './NavLinks'\u003cbr\u003eimport DropMenu from './DropMenu'\u003cbr\u003eimport Search from './Search'\u003cbr\u003e\u003cbr\u003eclass NavigationContainer extends Component {\u003cbr\u003e\u003cbr\u003e  state = {\u003cbr\u003e    query: \"\",\u003cbr\u003e    username: \"\"\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    // \u0026lt;\u0026gt;...\u0026lt;/\u0026gt; is a a React fragment - it does not render anything to the DOM, but can wrap multiple JSX elements\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;\u0026gt;\u003cbr\u003e        \u0026lt;Logo /\u0026gt;\u003cbr\u003e        \u0026lt;NavLinks /\u0026gt;\u003cbr\u003e        \u0026lt;DropMenu username={ this.state.username }/\u0026gt;\u003cbr\u003e        \u0026lt;Search query= {this.state.query } handleChange={ this.handleChange } handleSubmit={ this.handleSubmit }/\u0026gt;\u003cbr\u003e      \u0026lt;/\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  handleSubmit = event =\u0026gt; { ... }\u003cbr\u003e  handleChange = event =\u0026gt; { ... }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing this sort of set up, none of the imported components need to have their\nown state, nor do they need to have any functions defined. Container components,\nlike NavigationContainer, deal with managing state and class methods.\u003c/p\u003e\n\n\u003cp\u003eKeeping all the more complex logic in one place makes it easier to follow the\nflow of information. It also keeps many components simpler and free of clutter.\u003c/p\u003e\n\n\u003cp\u003eContainer components, having to deal with state, are usually class components.\nPresentational components are most often functional components as they don't need to\ncontain custom methods, relying mainly on props.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere are no hard and fast rules about presentational vs container components.\nThis dichotomy is simply a common pattern for organizing your app.\nPresentational components \u003cem\u003ecan\u003c/em\u003e be switched to class components if needed.\u003c/p\u003e\n\n\u003cp\u003eThe main take away here is the difference between \u003cem\u003eclass\u003c/em\u003e and \u003cem\u003efunctional\u003c/em\u003e\ncomponents. Class components are versatile and fully featured components. They\ncan be anything we want them to be. Functional components exchange the class\ncomponent's bells and whistles for simplicity and a small performance boost.\u003c/p\u003e\n\n\u003ch4\u003eResources (if applicable)\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\"\u003ePresentational vs Container Components by Dan Abramov\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/dan_abramov/status/802569801906475008?lang=en\"\u003eDan Abramov's follow up on Twitter\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"types-of-components"}]},{"id":20123,"name":"Components Continued","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g7bfed8ab2144e1b433a3f8cfc6f6e72d","items":[{"id":184984,"title":"Presentation Components","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-presentation-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-presentation-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-presentation-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-presentation-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we will examine a specific \"type\" of React component known as a\n\"presentational\" component.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the benefits of presentational components\u003c/li\u003e\n\u003cli\u003eDescribe how we can add interactivity to presentational components by adding a\ncallback function as a prop\u003c/li\u003e\n\u003cli\u003eExplain how to use stateless functional components\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat makes a component \"presentational\"?\u003c/h2\u003e\n\n\u003cp\u003eThe answer to this question, as you may have guessed, is that a presentational\ncomponent is a component whose primary responsibility is to render some piece of\nthe what user sees. Their job, in other words, is to look good!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/oLz0TmduZsUjm/giphy.gif\" alt=\"I'm So Pretty\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is, however, a bit more thinking that we need to do here. Very often when we speak of classes or categories of things in\nthe world of programming, the types or classes that we are discussing are\nactually formalized in the libraries or languages themselves. Think, for example\nof when we declare a React \u003ccode\u003eComponent.\u003c/code\u003e We write \u003ccode\u003eclass SomeComponent extends\nComponent\u003c/code\u003e. Either way, we are creating an actual instance of \u003ccode\u003eComponent\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut here's the rub. When we say that some component is \"presentational\" \u003cem\u003ewe\ndefinitely do not mean\u003c/em\u003e that the component is a formal type or class defined by\nthe React library. There is no such thing as type \u003ccode\u003ePresentationalComponent\u003c/code\u003e in\nthe React library. Rather, what we are dealing with here is simply a useful\n\u003cem\u003econvention\u003c/em\u003e, or, better yet, a \u003cem\u003eprogramming pattern\u003c/em\u003e that coders who have used\nReact have found themselves following over and over again as they compose their\ncomponent-based React UIs.\u003c/p\u003e\n\n\u003cp\u003eSo what defines the presentational component pattern? Here's a list of defining features:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003ePresentational components are primarily concerned with how things look\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIf they are class components, they probably only contain a render method. If\nfunctional, they just return some JSX\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey do not know how to alter the data that they render\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey rarely have any internally changeable \u003ccode\u003estate\u003c/code\u003e properties\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey are best written as stateless functional components\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOkay, so there's our pattern description. Now let's jump into some code and see\nhow presentation components actually look in practice.\u003c/p\u003e\n\n\u003ch2\u003eSurprise, you've already written presentational components!\u003c/h2\u003e\n\n\u003cp\u003eYep, this is true. Think about it. A presentational component is simply a\ncomponent that doesn't know anything about how to get the data it displays. If\nthey are mainly responsible for presentation, then you've been writing them from the\nbeginning. A simple \u003ccode\u003eHelloWorld\u003c/code\u003e component, for example, is almost certainly\npresentational. Let's see if that's right — we'll even give our component\nthe ability to take a prop:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass HelloWorld extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;div className=\"hello-world\"\u0026gt;Hello {this.props.message || 'World' }\u0026lt;/div\u0026gt;;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo does this fit our pattern? Absolutely, it does. Here is a component that does\nnothing but render a piece of our UI; that has no notion of how to fetch or\nreload the \u003ccode\u003emessage\u003c/code\u003e data that it takes in as a \u003ccode\u003eprop\u003c/code\u003e; that has no changeable\nstate; and that only contains a render method. So, I think we can safely say it\nfits the pattern well.\u003c/p\u003e\n\n\u003ch2\u003eGreat, but when would we need such a simple component?\u003c/h2\u003e\n\n\u003cp\u003eGood question! Our \u003ccode\u003eHelloWorld\u003c/code\u003e example is obviously not a very real-world\nexample, but consider this: let's say we are working on a massive web\napplication, and we'd like to standardize as well as place some limits on the\ncharacteristics of the  text inputs used throughout the application's forms.\u003c/p\u003e\n\n\u003cp\u003eIn this case, we could certainly establish a style guide that dictates that all uses of \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e use a specific set of CSS classes,\ndefined in our stylesheets. But this leaves our app open to a lot of human\nerror. We would have to consistently follow the convention over time. And\nwhile we could certainly add props to our inputs by doing something like this --\n\u003ccode\u003e\u0026lt;input className='field' {...props}\u0026gt;\u003c/code\u003e -- we've left the types of props that can\nbe provided to our inputs wide open.\u003c/p\u003e\n\n\u003cp\u003eWith React, we can do much better! Consider this \u003ccode\u003eTextField\u003c/code\u003e component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst defaultLimit = 100\u003cbr\u003e\u003cbr\u003eclass TextField extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        className=\"field field-light\"\u003cbr\u003e        onChange={this.props.onChange}\u003cbr\u003e        maxLength={this.props.limit || defaultLimit}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFirst off, notice that here again, what we have is a component that fits the\npresentational pattern. It's a simple wrapper around an \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e. But look how\npowerful it is! This simple wrapper establishes the CSS classes we will use in\none place for every single input used throughout the app. Think of how easy it\nwould be to change if we later decided we wanted a different look! But that's\nnot all we've accomplished here. The component also establishes a\nstraightforward API for all our text fields consisting of an \u003ccode\u003eonChange\u003c/code\u003e callback --\nbecause in most cases our \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003es are going to need to perform some action\nwhen the users type -- and a \u003ccode\u003elimit\u003c/code\u003e for the amount of characters that a user\ncan enter in the field. So although our presentational component is simple, it\ncan still have a degree of interactivity through the addition of callbacks.\u003c/p\u003e\n\n\u003cp\u003eNow, of course, we can argue about whether wrapping the \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e field in this\nway is a good idea. After all, \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003es are nice simple implementations in\ntheir own right. However, providing a component-based interface to text inputs as we\nhave in the field above can be a great win for simplicity in our app. It\nspecifically defines what we mean by a text input. It defines it in a way that\narguably covers the majority of use-cases we can imagine for a simple text\ninput; and it provides this definition in one place that can be found and\nupdated easily in the future. Win, win, win. Are we beginning to see the power\nof presentational components? Good.\u003c/p\u003e\n\n\u003cp\u003eNow imagine that it's not just the \u003ccode\u003eTextField\u003c/code\u003e that our team has executed in\nthis way, but say we've also defined a \u003ccode\u003e\u0026lt;Header /\u0026gt;\u003c/code\u003e and a \u003ccode\u003e\u0026lt;Footer /\u0026gt;\u003c/code\u003e, as well\nas other more unique and customized modules that are still primarily\npresentational. Imagine further that we've composed the majority of our UI out\nof these simple presentational components -- all of them almost entirely\nstateless, all of them designed to do one thing and one thing well: they just\nreceive \u003ccode\u003eprops\u003c/code\u003e from their parent components and render! That's it. They are\nsimple and beautiful and because they aren't doing much, because they are mostly\nstateless, they have a better chance of remaining blissfully bug free!\u003c/p\u003e\n\n\u003cp\u003eThis is the power and importance of presentational components. They are simple\nand they just work. So therefore we should strive to use them as much as\npossible.\u003c/p\u003e\n\n\u003ch2\u003eThe \"Stateless Functional\" Component \u0026amp; \"Pure\" Functions\u003c/h2\u003e\n\n\u003cp\u003eWhat if I told you we can actually make our presentational components even\nsimpler? Well we can, and here's why: Remember how one of the principles in our\nchecklist for the presentational component pattern was that the component\n(probably) does not have state? Well, if in fact we can create a component that\nhas no state, that means that our component doesn't even really need to be a\nJavaScript object of type \u003ccode\u003eComponent\u003c/code\u003e at all. It can just be a simple function\n— one that takes an input and returns a (portion of) the UI.\u003c/p\u003e\n\n\u003cp\u003eSo what's this look like? Here's our \u003ccode\u003eTextField\u003c/code\u003e component rendered as a\nso-called \"functional stateless\" component (a feature available in React since\nv0.14):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst defaultLimit = 100\u003cbr\u003e\u003cbr\u003econst TextField = (props) =\u0026gt;\u003cbr\u003e  \u0026lt;input\u003cbr\u003e    className=\"field field-light\"\u003cbr\u003e    onChange={props.onChange}\u003cbr\u003e    limit={props.limit || defaultLimit}\u003cbr\u003e  /\u0026gt;;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow isn't that just beautiful? It really is. It's just so concise. We've\ndiscarded all that ugly boilerplate. But it's not only concision that makes this\nbeautiful. By transforming our component into a stateless function, we have made\nour \u003ccode\u003eTextField\u003c/code\u003e component an extremely stable and predictable part of our\napplication.\u003c/p\u003e\n\n\u003cp\u003eThe predictability comes from the fact -- and here we can see the influence of\nthe principles of functional programming on React -- that this function will\nalways return the same UI output if given the same \u003ccode\u003eprops\u003c/code\u003e. There are no state\nvariables here that could be set to different values at different times that\nmight lead the function to return something that we didn't predict. What we have\nhere, then, is what in functional terms is called a \"pure\" or \"referentially\ntransparent\"  function.  Our UI has become just a bit more predictable. And, as\nweb developers who've worked on the front-end, we know what a boon that is,\ndon't we? (To review pure functions at greater length, see \u003ca href=\"https://github.com/learn-co-curriculum/javascript-pure-functions\"\u003ethis\nlesson\u003c/a\u003e on the\ntheme.)\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://en.wikipedia.org/wiki/Software_design_pattern\"\u003e\"Software Design Patterns\"\u003c/a\u003e (Wikipedia)\u003c/li\u003e\n\u003cli\u003eDan Abramov, \u003ca href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\"\u003e\"Presentational and Container Components\"\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/reusable-components.html#stateless-functions\"\u003eStateless Functions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAddendum on Presentational Components\u003c/h2\u003e\n\n\u003cp\u003eReact is an ever evolving framework. Thinking of components as presentational is only\none design pattern available and newer features in React allow for alternative designs.\u003c/p\u003e\n\n\u003cp\u003eWe continue to include this content because it is important as someone new to React\nthat you play around and become more familiar with the different ways you can use\ncomponents. You will be better equipped to understand the newer features of React by\nfirst practicing some patterns that, while no longer emphasized, are closer to \nobject-oriented patterns we've seen previously. Once finished with the materials in\nthis course, we encourage you to visit \u003ca href=\"https://reactjs.org/\"\u003ehttps://reactjs.org/\u003c/a\u003e and \nread up on the newest ways in which we can structure components.\u003c/p\u003e","exportId":"presentation-components"},{"id":184986,"title":"Container Components","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-container-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-container-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-container-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-container-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this lesson, we will learn about React \"container components.\" By the end of\nthis lesson you will be able to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the difference between container components and presentational components\u003c/li\u003e\n\u003cli\u003eExplain how to create a container component.\u003c/li\u003e\n\u003cli\u003eExplain the benefits of using a container component.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat Are Container Components\u003c/h2\u003e\n\n\u003cp\u003eWe know now that much of our app ought to consist of presentational components,\nwhich deal exclusively with the way the UI looks and which preferably carry no\nstate. By the same token, our applications will almost always need some\ncomponents that take responsibility for the \u003cem\u003ethe way things work.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/9HXOac9CZshOM/giphy.gif\" alt=\"Dolphins\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSo what is a container component? The main thing to keep in mind here is that\ncontainer components and presentational components go together. In fact, you can\nthink of them as part of the same design pattern. Where presentational\ncomponents don't manage state, container components do. Where presentation\ncomponents are usually subordinate \"children\" in a component hierarchy,\ncontainer components are in almost every case the \"parents\" of presentational\ncomponents.\u003c/p\u003e\n\n\u003cp\u003eHere's a concise definition of the container component pattern:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eContainer components are primarily concerned with \u003cem\u003ehow things work\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey rarely have any HTML markup of their own, aside from a wrapping \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e;\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey are often stateful\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey are responsible for providing data and behavior to their children (usually\npresentational components).\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAn Example\u003c/h2\u003e\n\n\u003cp\u003eTo make things a bit clearer, let's look at an example. Let's take a very basic\nuse case of a \u003ccode\u003eBookList\u003c/code\u003e widget that we need to write for an application that\nallows book lovers to communicate about their favorite reads. The component\nspecification is simple enough: the component should just render the current\nuser's book list. Here's one way this component could be written:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BookList extends Component {\u003cbr\u003e  constructor(props) {\u003cbr\u003e    super(props);\u003cbr\u003e\u003cbr\u003e    this.state = {\u003cbr\u003e      books: []\u003cbr\u003e    };\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  componentDidMount() {\u003cbr\u003e    fetch('https://learn-co-curriculum.github.io/books-json-example-api/books.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(bookData =\u0026gt; this.setState({ books: bookData.books }))\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  renderBooks = () =\u0026gt; {\u003cbr\u003e    return this.state.books.map(book =\u0026gt; {\u003cbr\u003e      return (\u003cbr\u003e        \u0026lt;div className=\"book\"\u0026gt;\u003cbr\u003e          \u0026lt;img src={ book.img_url } /\u0026gt;\u003cbr\u003e          \u0026lt;h3\u0026gt;{ book.title }\u0026lt;/h3\u0026gt;\u003cbr\u003e        \u0026lt;/div\u0026gt;\u003cbr\u003e      )\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"book-list\"\u0026gt;\u003cbr\u003e        { this.renderBooks() }\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn some respects, this is a perfectly acceptable component. It meets our basic\nspecification. However, there are some disadvantages to this implementation.\nConsider for a moment the number of assumptions this component makes about how\nand what data is fetched and how that data displayed:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIt assumes that the call to the api returns a JSON object containing a list of\nbook objects with the properties \u003ccode\u003eimg_url\u003c/code\u003e and \u003ccode\u003etitle\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt assumes that the book list will always be rendered with the same markup\nreturned by the render function.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn short, this component has tightly coupled together a whole set of assumptions\nabout the data layer with another set of assumptions about the presentation\nlayer. This is less than ideal.\u003c/p\u003e\n\n\u003cp\u003eWhy? Well, what if the data returned by our API call changed at some point in\nthe future? Suddenly we'd have errors. Or, what if we found that we needed book\nlists elsewhere in our app? Could we reuse this code? No! Because the whole\nthing has too many assumptions built-in; it's just too opinionated about how it\n\u003cem\u003eshould\u003c/em\u003e be used. What a shame!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://gifrific.com/wp-content/uploads/2014/02/Angry-Mr-Bean-Shakes-Head.gif\" alt=\"Mr. Bean is outraged\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eSeparating Concerns Using a Container Component\u003c/h2\u003e\n\n\u003cp\u003eLuckily, with React, we have an alternative. The key lies in our ability to\n\u003cem\u003ecompose\u003c/em\u003e our UI out of multiple React components. Using this feature, we can\nbreak the above single component into two components. First, we'd isolate the\nUI layer into a presentational component; then we'd wrap that presentational\ncomponent in a container component that handles the state and other business\nlogic.\u003c/p\u003e\n\n\u003cp\u003eHere's how this might look. Take a gander at the following code snippets. First,\nwe have the presentational component, \u003ccode\u003eBook\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Book.js\u003cbr\u003eimport React from 'react';\u003cbr\u003e\u003cbr\u003econst Book = ({ title, img_url }) =\u0026gt; (\u003cbr\u003e  \u0026lt;div className=\"book\"\u0026gt;\u003cbr\u003e    \u0026lt;img src={ img_url } alt={title}/\u0026gt;\u003cbr\u003e    \u0026lt;h3\u0026gt;{ title }\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003eexport default Book;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe component above has one thing to do - given props of \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003eimg_url\u003c/code\u003e, define how\nthese props should be displayed. This component is so simple, it's easy to write it compactly\nas a functional component.\u003c/p\u003e\n\n\u003cp\u003eSince we're dealing with an app that displays book\u003cem\u003es\u003c/em\u003e, one level up from\n\u003ccode\u003eBooks\u003c/code\u003e, we can write a second component, \u003ccode\u003eBookList\u003c/code\u003e. This component takes in a\n\u003ccode\u003ebooks\u003c/code\u003e prop and maps over it, rendering a \u003ccode\u003eBook\u003c/code\u003e component for each element in\nthe \u003ccode\u003ebooks\u003c/code\u003e prop.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/BookList.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport Book from './Book';\u003cbr\u003e\u003cbr\u003econst BookList = ({ books }) =\u0026gt; (\u003cbr\u003e  \u0026lt;div className=\"book-list\"\u0026gt;\u003cbr\u003e    { books.map(book =\u0026gt; \u0026lt;Book title={book.title} img_url={book.img_url} /\u0026gt;) }\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003eexport default BookList;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere again, although there is a bit more going on in the \u003ccode\u003eBookList\u003c/code\u003e component,\nthere isn't really anything complicated going on - this component could also be\nconsidered a presentational component, as all it really does is to define how to\ndisplay the \u003ccode\u003eBook\u003c/code\u003e components and to pass data to those components.\u003c/p\u003e\n\n\u003cp\u003eThat leaves the final component, where the main logic is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/BookListContainer.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport BookList from './BookList';\u003cbr\u003e\u003cbr\u003eclass BookListContainer extends React.Component {\u003cbr\u003e  constructor() {\u003cbr\u003e    super()\u003cbr\u003e\u003cbr\u003e    this.state = {\u003cbr\u003e      books: []\u003cbr\u003e    };\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  componentDidMount() {\u003cbr\u003e    fetch('https://learn-co-curriculum.github.io/books-json-example-api/books.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(bookData =\u0026gt; this.setState({ books: bookData.books }))\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;BookList books={this.state.books} /\u0026gt;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default BookListContainer;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis component maintains the state and handles a request for data from a remote\nAPI. In terms of rendering, all it does it render \u003ccode\u003eBookList\u003c/code\u003e and pass a piece of\nstate down.\u003c/p\u003e\n\n\u003cp\u003eSo what have we done? We've broken up the original component into a few pieces.\nAll the state is contained in our container component \u003ccode\u003eBookListContainer\u003c/code\u003e. The\nlogic is the same, but it is has been \u003cem\u003euncoupled\u003c/em\u003e from the presentation layer,\nwhich is now contained in the \u003ccode\u003eBookList\u003c/code\u003e and \u003ccode\u003eBook\u003c/code\u003e components. Those\ncomponents, which are stateless, are now incredibly stable as well as concise.\u003c/p\u003e\n\n\u003cp\u003eBecause we've uncoupled (or to be more precise, loosely coupled) the data and\npresentation layers, we can now easily reuse the \u003ccode\u003eBookList\u003c/code\u003e component. We could,\nfor example, write another container component — let's say\n\u003ccode\u003eFavoritedBookListContainer\u003c/code\u003e — and then import and wrap \u003ccode\u003eBookList\u003c/code\u003e in\norder to build a different piece of our UI with the same code. \u003c/p\u003e\n\n\u003cp\u003eIf, later, our design team decided to redesign the way book lists appear in our\napp, they would only need to update \u003ccode\u003eBookList\u003c/code\u003e. This is React at its best.\nSaving time and minimizing codebase.\u003c/p\u003e\n\n\u003cp\u003eThe container component pattern in React therefore helps us write better code by\nenhancing the separation of concerns, i.e. the decoupling of the data and\npresentation layers, and by enabling code-reuse.\u003c/p\u003e\n\n\u003ch2\u003eAddendum on Container Components\u003c/h2\u003e\n\n\u003cp\u003eReact is an ever evolving framework. Using container and presentational components\nis just one way in which we can write and structure React applications. New additions\nto the language, such as \u003ca href=\"https://reactjs.org/docs/hooks-intro.html\"\u003eReact hooks\u003c/a\u003e, solve some of the challenges that were helped\nby creating separate components to handle logic and presentation. The originator\nof the container design pattern, Dan Abramov (part of the React dev team), has added a note to his\noriginal post on container components regarding this.\u003c/p\u003e\n\n\u003cp\u003eWhile container components have been de-emphasized, they are still a useful tool\nwhile you get your feet wet with React. Structuring apps with container and\npresentational components helps us to understand the way data is shared in an\napplication. It allows us to think in a more object-oriented way about React\ncomponents and can keep our applications organized.\u003c/p\u003e\n\n\u003cp\u003eIt is now entirely possible to write React applications in a single functional\ncomponent, and we encourage you to explore the newest features of React after \ncompleting these lessons.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@learnreact/container-components-c0e67432e005#.2kd1wuyp4\"\u003eContainer Components\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/learning-react-container-components/\"\u003eCSS Tricks: Container Components\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"container-components"},{"id":184988,"title":"React Fragments","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-fragments-and-portals\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-fragments-and-portals/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-fragments-and-portals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-fragments-and-portals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain the use of fragments in React components\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWhy Fragments\u003c/h2\u003e\n\n\u003cp\u003eIt is required that every React component must return a single JSX element.\nBecause of this, we often use the HTML-like elements such as \u003ccode\u003ediv\u003c/code\u003e to wrap other\nelements within the JSX. When rendered, this creates a DOM element for that\nouter \u003ccode\u003ediv\u003c/code\u003e, which is sometimes unnecessary. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass ChildComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass ParentComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"parent\"\u0026gt;\u003cbr\u003e        \u0026lt;ChildComponent /\u0026gt;\u003cbr\u003e        \u0026lt;ChildComponent /\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis set up creates a DOM structure that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"parent\"\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThose nested \u003ccode\u003ediv\u003c/code\u003es don't have any purpose here and don't have any styling\nbesides their default properties. Without them though, we would have an error as\nthere are \u003cem\u003etwo\u003c/em\u003e \u003ccode\u003ep\u003c/code\u003e tags being returned in the ChildComponent. Instead, we could\nuse JSX Fragments, preventing the extra \u003ccode\u003ediv\u003c/code\u003es from being added to the DOM:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass ChildComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    //The wrapping 'div' here has been replaced with a React fragment\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass ParentComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;ChildComponent /\u0026gt;\u003cbr\u003e        \u0026lt;ChildComponent /\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the fragment in place, the DOM will now look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/\u0026gt;\u003c/code\u003e are shorthand for \u003ccode\u003e\u0026lt;React.Fragment\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/React.Fragment\u0026gt;\u003c/code\u003e\nand can be used interchangeably. \u003cstrong\u003eThey allow a component to return multiple\nelements without adding a wrapper element that adds to the DOM.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFragments are not restricted to the outermost element being returned in JSX.\nImagine you had an array of book objects in your props that you want rendered to\nthe DOM. Each book has multiple attributes you want to display, but you don't\nneed an element that wraps around these attributes. A fragment can be used here,\nand can still take a key attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst Bookshelf = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;section\u0026gt;\u003cbr\u003e      {props.books.map(book =\u0026gt; (\u003cbr\u003e        \u0026lt;React.Fragment key={item.id}\u0026gt;\u003cbr\u003e          \u0026lt;h1\u0026gt;{book.title}\u0026lt;/h1\u0026gt;\u003cbr\u003e          \u0026lt;h2\u0026gt;{book.author}\u0026lt;/h2\u0026gt;\u003cbr\u003e        \u0026lt;/React.Fragment\u0026gt;\u003cbr\u003e      ))}\u003cbr\u003e    \u0026lt;/section\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u0026gt; According to the \u003ca href=\"https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html#support-for-fragment-syntax\"\u003eReact docs\u003c/a\u003e: \n\u0026gt; As of 16.2.0, support for fragment shorthand syntax \u003ccode\u003e\u0026lt;\u0026gt;\u0026lt;p\u0026gt;Hello\u0026lt;/p\u0026gt;\u0026lt;/\u0026gt;\u003c/code\u003e will vary depending on the tools you use to build your app. A stable release may take a bit longer as we await adoption by upstream projects. Support for JSX fragments is available in Babel v7.0.0-beta.31 and above! So for compatibility purposes, it may be better to fully write out \u003ccode\u003e\u0026lt;React.Fragment\u0026gt;\u0026lt;p\u0026gt;Hello\u0026lt;/p\u0026gt;\u0026lt;/React.Fragment\u0026gt;\u003c/code\u003e for the time being.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eFragments are a small addition to React overall, but when used properly, can\nreduce a lot of unnecessary DOM bloat. They allow us a bit more flexibility in\nhow we write our components, eliminating the need for wrapper elements.\u003c/p\u003e","exportId":"react-fragments"}]},{"id":20124,"name":"React: Under the Hood","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gbfefcaf5e939e03fdabc3a2e5f4be5e1","items":[{"id":184989,"title":"Using Create React App","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"create-react-app\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/create-react-app/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/create-react-app\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/create-react-app/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eSo far, through this React course, a basic framework of files has been provided\nin the labs. In order for React to work, a specific file structure is required.\nHaving to set all that up every time can be a bit of a pain and is also prone to\nerror. On top of this, copying and pasting old React projects means you may miss\nout on the most up-to-date React features.\u003c/p\u003e\n\n\u003cp\u003eFortunately, the creators of React have also set up a handy tool for rapidly\ncreating the barebones file structure we need for React apps. In this lesson, we\nwill be discussing how to use the \u003ccode\u003ecreate-react-app\u003c/code\u003e node package to get our own\nprojects off the ground.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eEnsure \u003ccode\u003enpm\u003c/code\u003e is updated to utilize newly included \u003ccode\u003enpx\u003c/code\u003e command\u003c/li\u003e\n\u003cli\u003eReview how to create a react app using \u003ccode\u003ecreate-react-app\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eKeeping Up To Date\u003c/h4\u003e\n\n\u003cp\u003eBefore we continue, it is recommended you run \u003ccode\u003enpm install -g npm\u003c/code\u003e. This will\nmake sure you have the newest version of Node Package Manager. Once this is\ninstalled, you should now have access to \u003ccode\u003enpx\u003c/code\u003e. Instead of having to globally\ninstall a node package using \u003ccode\u003enpm\u003c/code\u003e, with \u003ccode\u003enpx\u003c/code\u003e, we can provide a node package\nname as an argument and use remote node packages as though they were installed.\u003c/p\u003e\n\n\u003cp\u003eSince you're grabbing the package remotely, you will be getting the most up to\ndate version of it by default!\u003c/p\u003e\n\n\u003ch4\u003eCreating A React App From Scratch\u003c/h4\u003e\n\n\u003cp\u003eIn your terminal, navigate to a location where you would like your React app\ndirectory to be located.\u003c/p\u003e\n\n\u003cp\u003eDecide on a name for your app. Once you've got one, run the following with your\napp's name in place of \u003ccode\u003e\u0026lt;your_app_name\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpx create-react-app \u0026lt;your_app_name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ecreate-react-app\u003c/code\u003e package sets up the basic file structure and\nexecutes an initial \u003ccode\u003enpm install\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eConclusion\u003c/h4\u003e\n\n\u003cp\u003eThat's it! Fast and easy. The app is ready to run with \u003ccode\u003enpm start\u003c/code\u003e, and will\ndisplay some default content. The \u003ccode\u003eREADME.md\u003c/code\u003e file provided also has a very\ndetailed breakdown of all the additional features that come with\n\u003ccode\u003ecreate-react-app\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOne feature that is included: a service worker that allows the app to cache page\ndata in a user's browser. The result? After a user visits your site once, if they\ndo not have service, they \u003cem\u003ecan still go to your website and see content\u003c/em\u003e. The\ncache will display what the site looked like the last time the user was there!\u003c/p\u003e\n\n\u003cp\u003eWhile it is perfectly fine to set up your own React files, \u003ccode\u003ecreate-react-app\u003c/code\u003e is\na handy solution to quickly get past any setup and get straight to designing\nyour app. Since it is actively maintained by Facebook, you're also always\ngetting a nicely polished, up-to-date base for your React applications!\u003c/p\u003e","exportId":"using-create-react-app"},{"id":184990,"title":"Babel","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"babel-and-react\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/babel-and-react/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/babel-and-react\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/babel-and-react/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we'll unpack what \u003cstrong\u003eBabel\u003c/strong\u003e brings to the table when developing React applications.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eLearn what Babel is\u003c/li\u003e\n    \u003cli\u003eLearn how Babel integrates with React\u003c/li\u003e\n    \u003cli\u003eFrame Babel's relative importance at this stage in learning React\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\n    \u003cimg src=\"http://www.ancient-origins.net/sites/default/files/field/image/tower-of-babel-2.jpg\" alt=\"Tower of Babel\"\u003e\n\u003c/p\u003e\n\u003cp\u003eIf you don't have time to procrastinate and \u003ca href=\"https://en.wikipedia.org/wiki/Tower_of_Babel\"\u003eread the wiki\u003c/a\u003e, and want to get on with learning programming, allow us to provide the \u003ca href=\"https://en.wikipedia.org/wiki/TL;DR\"\u003eTL;DR\u003c/a\u003e and why it is relevant to the Babel tool we use:\u003c/p\u003e\n\u003cp\u003eThe Tower of Babel was a colossal construction project long ago. It was being built by a united humanity speaking the same language, with the intention of reaching such heights that heaven itself could be accessed. While it was being constructed, the God in the story, (for debated reasons), afflicted the united humans by confounding their speech. This ensured the once united humanity could no longer communicate. What made this ambitious project possible was that multiple cultures, languages, idioms, etc. were all using \u003cem\u003ea common standard\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eAs you may already know, JavaScript (based on the ECMAScript [ES] standard) is an evolving language. Over time we have had several iterations. For the most part, ECMAScript's evolution has changed to incorporate more features and language constructs over time (think ES6 arrow functions, class syntax, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003econst\u003c/code\u003e vs. their absence in ES5!). This resembled the \"confounded\" state described above. What was needed was a way to move all, various standards of JavaScript usage to the same standard. \u003cstrong\u003eThat\u003c/strong\u003e is what the Babel program does — it makes all JavaSript versions emit a common, standard code.\u003c/p\u003e\n\u003cp\u003eLess metaphorically, Babel gained popularity because it \u003ca href=\"https://stackoverflow.com/questions/43968748/is-babel-a-compiler-or-transpiler\"\u003ecompiled/transpiled\u003c/a\u003e newer ES6 syntax and language features into the older (and more widely deployed, at that time) ES5. This was especially important when ES6 came out because many browsers had not yet updated their JavaScript engines to interpret the new language features of ES6.\u003c/p\u003e\n\u003cp\u003eAs of 2019, you are less likely to encounter browsers \u003cstrong\u003enot\u003c/strong\u003e implementing ES6 syntax. For example, open up your Chrome browser's developer console and attempt to assign \u003ccode\u003elet y = 4; console.log(y)\u003c/code\u003e. Better believe Chrome Boi won't complain!\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://learn-verified.s3.amazonaws.com/chrome-boi-wont-complain.png\" height=\"500\" width=\"300\"\u003e\n    \u003cbr\u003e\n  \u003cem\u003eChrome Boi\u003c/em\u003e\u003c/p\u003e\n\u003ch4\u003eThen why is Babel important?\u003c/h4\u003e\n\u003cp\u003eIf most popular browsers have moved to integrate ES6+ syntax, then why is Babel \"still a thing?\"\u003c/p\u003e\n\u003cp\u003eBabel's competency was in reading in one type of text and making in-place transformations such that another type of text came out. Some developers realized that by processing their code with Babel, they could write code that's terse and convenient and then have Babel turn that code into verbose, compliant JavaScript code.\u003c/p\u003e\n\u003cp\u003eLet's take as an example how non-standard JSX (JSX is a React specific syntax) can be transformed, via Babel, into compliant JavaScript. Succinctly, \u003cstrong\u003eBabel turns JSX into normal JavaScript written with the React library\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar profile = (\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;img src=\"avatar.png\" className=\"profile\" /\u0026gt;\u003cbr\u003e    \u0026lt;h3\u0026gt;{[user.firstName, user.lastName].join(' ')}\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...when the above is run through Babel, we receive the following executable code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar profile = (\u003cbr\u003e  React.createElement(\"div\", null,\u003cbr\u003e  React.createElement(\"img\", { src: \"avatar.png\", className: \"profile\" }),\u003cbr\u003e  React.createElement(\"h3\", null, [user.firstName, user.lastName].join(\" \")))\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eDon't worry if the syntax above is unfamiliar. The sentiment you want to take away is that JSX code in the first block, (which looks like some abomination between HTML and plain JavaScript), was transformed into valid JavaScript syntax in the second block after Babel had a go at it.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWhile you don't \u003cstrong\u003estrictly\u003c/strong\u003e need Babel as a dependency when writing React code, not having it means you have to write in the non-JSX syntax seen in the output above. My fingers think that typing that first one is better (because they're lazy). My brain also likes that JSX paints an HTML picture in my mind's eye. JSX removes the burden on the programmer to calculate an intermediary picture of the DOM in their brain when reading this code. So, we teach and write using the pre-Babel-compiled (first syntax above) JSX in our React applications.\u003c/p\u003e\n\u003ch4\u003eNot Just For JSX\u003c/h4\u003e\n\u003cp\u003eIn addition to the JSX magic it provides, Babel can also compile other features and syntactic sugar that is not yet, or never will be, a part of ECMAScript! One example of this is a Babel plugin that enables the usage of \u003ca href=\"https://babeljs.io/docs/plugins/preset-stage-2/\"\u003elanguage features proposed for ECMAScript, but not yet implemented\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eYou have just been introduced to a tool you likely have not worked directly with before. Luckily, it's straightforward to summarize:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBabel\u003c/strong\u003e enables us to use syntax that browsers won't natively recognize by \u003cstrong\u003epre-compiling\u003c/strong\u003e it into syntax that browsers \u003cem\u003edo\u003c/em\u003e natively recognize. When used with React, this can (and in our case will) include, but not be limited to, digesting JSX.\u003c/p\u003e\n\u003ch2\u003eLooking Forward\u003c/h2\u003e\n\u003cp\u003eThat was a chunk of new information, and we have even more coming up. If this is your first time being exposed to a tool like Babel, treat yourself. Stand up, stretch your legs, look at a real human that's not in meme format: you deserve it. When you come back, we will get started on \u003cstrong\u003eWebpack\u003c/strong\u003e in the following lesson.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"http://babeljs.io/\"\u003eBabel\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","exportId":"babel"},{"id":184991,"title":"Webpack","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"webpack-and-react\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/webpack-and-react/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/webpack-and-react\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/webpack-and-react/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll unpack what \u003cstrong\u003eWebpack\u003c/strong\u003e brings to the table when developing React applications.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn what Webpack is\u003c/li\u003e\n\u003cli\u003eLearn how Webpack integrates with React\u003c/li\u003e\n\u003cli\u003eFrame Webpack's relative importance at this stage in learning React\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eWelcome back! We are picking up where we left off in the \u003ca href=\"https://learn.co/lessons/babel-and-react\"\u003eprevious lesson\u003c/a\u003e. If you didn't take a break, shame on you. In this lesson, we will explore Webpack and its place in the React development process.\u003c/p\u003e\n\n\u003ch2\u003eThe Problem\u003c/h2\u003e\n\n\u003cp\u003eTo best describe Webpack, we will begin by describing the problem that it was created to solve.\u003c/p\u003e\n\n\u003cp\u003ePicture having a server that sends some JavaScript using webpage to browsers. Let's imagine we have some \u003ccode\u003eanimateDiv.js\u003c/code\u003e script we want browsers to receive that itself makes use of \u003ccode\u003ejquery\u003c/code\u003e. The first file we send to a requesting client, \u003ccode\u003eindex.html\u003c/code\u003e, may look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- index.html --\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;meta charset=\"utf-8\"\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"jquery.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"animateDiv.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Discotek\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div class=\"animat\" onclick=\"animateDiv.js\"\u0026gt;\u003cbr\u003e      I'm going to animate if you click me!\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this approach, we are actually making three http requests to the server for the application:\n  - We hit the base url and are returned the \u003ccode\u003eindex.html\u003c/code\u003e file\n  - \u003ccode\u003eindex.html\u003c/code\u003e tells the browser to request \u003ccode\u003ejquery.js\u003c/code\u003e from the server\n  - \u003ccode\u003eindex.html\u003c/code\u003e tells the browser to request \u003ccode\u003eanimateDiv.js\u003c/code\u003e from the server\u003c/p\u003e\n\n\u003cp\u003eA quick and dirty way around this would be to combine our JavaScript files into one file on the server (bringing this to two requests):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- index.html --\u0026gt;\n...\u003cbr\u003e\u0026lt;script src=\"combinedJqueryAnimateDiv.js\"\u0026gt;\u0026lt;/script\u0026gt;\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could go one step futher and even in-line the JavaScript directly into our HTML in a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag (sending everything at once in \u003ccode\u003eindex.html\u003c/code\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- index.html --\u0026gt;\n...\u003cbr\u003e\u0026lt;script\u0026gt;\u003cbr\u003e  // all the contents of jquery.js and animateDiv.js written directly here!\u003cbr\u003e\u0026lt;/script\u0026gt;\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUnfortunately, this is not very practical. We need to, by 'hand', combine JavaScript code from multiple files into one. Well...we're programmers! We automate the boring tasks like this! Introducing \u003cstrong\u003eWebpack\u003c/strong\u003e!\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://webpack.js.org/\"\u003eWebpack\u003c/a\u003e lets us combine different files automatically. This means that we can freely import external JS code in our JavaScript files (both local files as well as \u003ccode\u003enode_modules\u003c/code\u003e installed with \u003ccode\u003enpm\u003c/code\u003e). We trust that Webpack, before we send clients our JS code over the internet, intelligently packages it up for us. In a simplified example:\n  - File \u003ccode\u003esiliconOverlord.js\u003c/code\u003e has space-age AI code in it\n  - File \u003ccode\u003eenslaveHumanity.js\u003c/code\u003e wants to make use of this other file and send it to browsers all over the internet.\n  - Instead of always sending both \u003ccode\u003eenslaveHumanity.js\u003c/code\u003e and \u003ccode\u003esiliconOverlord.js\u003c/code\u003e to browsers, one after the other, \u003cstrong\u003eWebpack\u003c/strong\u003e pre-bundles them together into a single file that can be sent instead: \u003ccode\u003esingularity.js\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you have been working with dependencies already (\u003ccode\u003egem\u003c/code\u003es in rails, \u003ccode\u003erequire\u003c/code\u003e in vanilla JS, etc.) you may have noticed we did not need any tool like Webpack to work with code written in other files. While this is true, and we don't \u003cem\u003eneed\u003c/em\u003e Webpack to do this, let's highlight the problem Webpack solves before trying to understand it:.\u003c/p\u003e\n\n\u003cp\u003eWhen compiling a React application with Webpack, it'll check every file for dependencies that it needs to import, and also include that code. In more technical terms, it's traversing the dependency tree and inlining those dependencies in our application. What we'll end up with is one big JS file that includes \u003cem\u003eall\u003c/em\u003e of our code, including any dependencies (like \u003ccode\u003ejQuery\u003c/code\u003e, your components, your \u003ccode\u003enpm\u003c/code\u003e modules, etc.) in that file too. The convenience of this is not to be underestimated: one file, with \u003cem\u003eall\u003c/em\u003e of our code, means we only need to transfer a single thing to our clients when they ask for our React applications!\u003c/p\u003e\n\n\u003cp\u003eEnough theory, let's take a look at a rudimentary example of how Webpack does this. Let's assume we have the following application on our server that we want to share with the world:\u003c/p\u003e\n\n\u003ch3\u003eSimplified Webpack example\u003c/h3\u003e\n\n\u003cp\u003eThe files we want our client to have, which constitute one whole dank web application:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// reveal.js (pre Webpack digestion)\u003cbr\u003efunction reveal(person, realIdentity) {\u003cbr\u003e  person.identity = realIdentity\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default reveal\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// main.js (pre Webpack digestion)\u003cbr\u003eimport reveal from './reveal.js'\u003cbr\u003e\u003cbr\u003econst gutMensch = {\u003cbr\u003e  name: \"Andrew Cohn\",\u003cbr\u003e  identity: \"Friendly Neighborhood Flatiron Teacher\",\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ereveal(gutMensch, \"Chrome Boi\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWithout Webpack, we would need to find some way to send both files to our client and ensure they are playing  nicely together. We couldn't just send the \u003ccode\u003emain.js\u003c/code\u003e file wizzing over the internet, through a \u003ca href=\"https://en.wikipedia.org/wiki/Series_of_tubes\"\u003eseries of tubes\u003c/a\u003e, to our client expecting it to make use of the \u003ccode\u003ereveal\u003c/code\u003e function: the client hasn't even received the \u003ccode\u003ereveal.js\u003c/code\u003e file in this case! While we have several ways we could make this work, most of them are headaches and someone else has already made an excellent solution: Webpack.\u003c/p\u003e\n\n\u003cp\u003eInstead of writing our own bespoke, artisanal, Etsy™ sell-able dependency solution, we can just use Webpack!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe result after we unleash Webpack on these files:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// bundle.js (post Webpack digestion)\u003cbr\u003efunction reveal(person, realIdentity) {\u003cbr\u003e  person.identity = realIdentity\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst gutMensch = {\u003cbr\u003e  name: \"Andrew Cohn\",\u003cbr\u003e  identity: \"Friendly Neighborhood Flatiron Teacher\",\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ereveal(gutMensch, \"Chrome Boi\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we were to first pre-digest our files with Webpack, we would instead have a single, all-encompassing, file that ensures our dependencies are right where they belong.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eYou have just read a lot of information about a tool you likely have not worked directly with before. Luckily, its straightforward to summarize:\u003c/p\u003e\n\n\u003cp\u003eIn React, \u003cstrong\u003eWebpack\u003c/strong\u003e manages pesky dependency loading for us by \u003cstrong\u003epre-digesting\u003c/strong\u003e our many files' code and outputting a single 'bundle', which contains all of our code, with dependencies properly placed, in one file.\u003c/p\u003e\n\n\u003ch2\u003eLooking Forward\u003c/h2\u003e\n\n\u003cp\u003eAfter reading the previous lesson on Babel and now this one on Webpack, you may, understandably, be asking yourself:\n  - \"How important is this Webpack/Babel jargon?\"\n  - \"How much do I need to learn about the different tools that improve React development experience vs. actual React programming?\"\u003c/p\u003e\n\n\u003cp\u003eBecause \u003ccode\u003ecreate-react-app\u003c/code\u003e is so opaque with configuration files, allow us to be transparent with you:\u003c/p\u003e\n\n\u003cp\u003eAt Flatiron, we are constantly balancing an explanation of the fundamentals against practice on the real skills that will get you producing valuable applications the quickest. We believe that, while learning React basics, it's important to know how these tools (Webpack + Babel) work on a \u003cem\u003ehigh level\u003c/em\u003e. Let's justify both in turn:\u003c/p\u003e\n\n\u003cp\u003eMost React code nowadays is being compiled one way or another — be it using \u003cstrong\u003eWebpack\u003c/strong\u003e, an alternative such as \u003ca href=\"http://browserify.org/\"\u003eBrowserify\u003c/a\u003e, or something else. We want to use it, but we don't want to create unnecessary busywork for ourselves or distract with peripherals.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, there are a lot of juicy nectarines (read: low hanging fruit) that aren't present in the ECMAScript version browsers implement, such as \u003ca href=\"https://babeljs.io/docs/plugins/preset-stage-2/\"\u003eupcoming proposed JS language features\u003c/a\u003e, which we can pluck with \u003cstrong\u003eBabel\u003c/strong\u003e. Don't you want to sink your teeth into those \u003ca href=\"https://en.wikipedia.org/wiki/Syntactic_sugar\"\u003esyntactic sugary\u003c/a\u003e stone fruits?\u003c/p\u003e\n\n\u003cp\u003eFor the most part, Babel and Webpack will be abstracted from you so you can focus on learning the primary React competencies.  This will streamline the development process. In layperson terms, if React development skills were muscles, we want to focus on getting you \u003ca href=\"https://i.imgur.com/RAegPMp.jpg\"\u003eswol\u003c/a\u003e before having you worry about learning to assemble weight machines.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWebpack: \u003ca href=\"https://webpack.js.org/\"\u003ehttps://webpack.js.org/\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eBabel: \u003ca href=\"http://babeljs.io/\"\u003ehttp://babeljs.io/\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"webpack"},{"id":184992,"title":"Declarative Programming","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-declarative-programming\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-declarative-programming/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-declarative-programming\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-declarative-programming/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll discuss the concept of declarative programming in the context of the virtual DOM.  \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the difference between declarative and imperative programming\u003c/li\u003e\n\u003cli\u003eDescribe some of the trade-offs of declarative programming\u003c/li\u003e\n\u003cli\u003eDescribe the benefits of declarative programming with respect to React\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003ePainting a house\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/Jg6Z88H8Cc9tm/giphy.gif\" alt=\"That's not how you paint a house\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou may have heard the expressions \u003cstrong\u003eimperative\u003c/strong\u003e and \u003cstrong\u003edeclarative\u003c/strong\u003e programming before. Let's quickly give a 'documentation' style description of each, and follow it up with some real world examples. In wrapping up, we will relate it to React's implementation of the Virtual DOM.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e\u003cstrong\u003eImperative Programming:\u003c/strong\u003e\n  - Explicitly describes the actions a program should take\n  - Describes \u003cem\u003ehow\u003c/em\u003e a program should go about doing those actions\n  - example - removing the last element from an array:\n    - \u003cem\u003eaccess\u003c/em\u003e the element at index arr.length - 1 \u003cem\u003efrom this array\u003c/em\u003e and erase it from memory\n    - \u003cem\u003eresize\u003c/em\u003e the array to have 1 less element at the end\n    - \u003cem\u003ereturn\u003c/em\u003e to me this array\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDeclarative Programming:\u003c/strong\u003e\n  - Describes \u003cem\u003ewhat\u003c/em\u003e a program should accomplish (or what the end result should be)\n  - Leaves the determination of \u003cem\u003ehow\u003c/em\u003e to get to the end result up to the program\n  - example - removing the last element from an array:\n    - I have this array: \u003ccode\u003e[1, 2, 3]\u003c/code\u003e\n    - I want an array like that but without the tail element\n    - Make it so, computer.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eNow, let's frame this in a more 'real world' context. Imagine for a second that we're hiring someone to paint our house:\u003c/p\u003e\n\n\u003cp\u003eIn an \u003cstrong\u003eimperative\u003c/strong\u003e world, we'd tell them to open the can of paint, dip their brush in it, and then move the brush in a stroking fashion along the wall. We'd be telling the painter exactly what to do.\u003c/p\u003e\n\n\u003cp\u003eIn a \u003cstrong\u003edeclarative\u003c/strong\u003e world, we would tell the painter \u003cem\u003e\"I want a house with a big ol' cartoon house horrendously smeared across the side of it...Oh! And I've had a tough week so make my day while doing it...\"\u003c/em\u003e, and she'd get it done! Why? Because the painter knows what to do! We don't need to tell her how to apply paint or how to get in and out of costume.\u003c/p\u003e\n\n\u003cp\u003eThis is similar to how we program with React. Let's imagine we have a 'find a hog by weight' component that allows us to filter an array of existing hogs (by weight!). This component can accept a weight to filter by, and displays the matching hog profile pictures in the browser.\u003c/p\u003e\n\n\u003cp\u003eIn our code below (which is a special format that React uses), we don't describe \u003cem\u003ehow\u003c/em\u003e to update the browser (i.e. \"remove that \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, add this \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e, etc.\"). Instead, we provide React with a template of \u003cem\u003ewhat\u003c/em\u003e the component should look like once it is finished being prepared, i.e.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"my-hog-world\" className=\"dank-styling\"\u0026gt;\u003cbr\u003e  { filteredHogsArray.map(hog =\u0026gt; \"\u0026lt;img src=${hog.img}\u0026gt;\") }\u003cbr\u003e  \u0026lt;!-- ^ e.g. show all my hogs in list elements! --\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example above, we are saying: \"When rendered, there should be a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e element with \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e elements for every item in our filteredHogsArray\".\u003c/p\u003e\n\n\u003cp\u003eThis is us interacting in a \u003cstrong\u003edeclarative\u003c/strong\u003e programming manner with React! We neither told it what to explicitly add/delete from the DOM when we wanted something changed, nor did we tell it how to go about changing the DOM. This is perfectly acceptable for React! As we explore more going forward, we will see how this code acts as a template and React does the rest.\u003c/p\u003e\n\n\u003cp\u003eDoesn't a declarative world sound nice? It does to me! We can trust the computer to do what its supposed to in an efficient manner. More and more of the \u003cem\u003ehow to do something\u003c/em\u003e can be abstracted away from us. Perhaps one day, we won't need to think about how to get anything we want. Instead, computers will make \u003cem\u003eall of our decisions for us!\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eThe bee's knees\u003c/h2\u003e\n\n\u003cp\u003eSo, why is this so great? \u003cstrong\u003eDeclarative programming\u003c/strong\u003e allows us to focus on what our React application should look like — as opposed to being concerned with manually updating DOM, adding and removing classes, and so on. That stuff is all done for us in React: we just tell React what the end result should be. It'll do the heavy lifting for us.\u003c/p\u003e\n\n\u003cp\u003eIt's not all sunshine and rainbows though — sometimes the underlying mechanism for transforming our declarative code into actual instructions can suffer from inefficiencies. Fixing this is pretty hard, but luckily, React has done a tremendous job at ensuring that doing something like this is very rarely (or rather, never) necessary.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://stackoverflow.com/questions/33655534/difference-between-declarative-and-imperative-in-react-js\"\u003eDifference between declarative and imperative in React.js?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"declarative-programming"},{"id":184993,"title":"The Virtual DOM","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"javascript-virtual-dom\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/javascript-virtual-dom/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/javascript-virtual-dom\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/javascript-virtual-dom/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eExplain how React handles DOM updates in a performant manner\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIt Is Not a Virtual DOM\u003c/h2\u003e\n\u003cp\u003eEarlier in the history of React, the term \"Virtual DOM\" was used to explain how React was able to perform better than the traditional DOM.\u003c/p\u003e\n\u003cp\u003eThe term 'Virtual DOM' fails to really explain what is happening and may lead to a misunderstanding of what is happening behind the scenes when React renders.\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/virtual_dom_bad.png\" alt=\"Dan Abramov No Longer Likes Virtual DOM\" width=\"300\"\u003e \u003c/p\u003e\n\u003cp\u003eIn this lesson, we're going to briefly review how React handles updates to the screen. This process is known as Reconciliation\u003c/p\u003e\n\u003ch2\u003eUpdating the DOM\u003c/h2\u003e\n\u003cp\u003eBy now, you should already know what the DOM is: a programmatic representation of the document we see in the browser. In JavaScript applications, DOM elements can be added and changed with code. It's possible to build highly complex websites with hundreds or thousands of DOM elements using plain JavaScript. Maybe more importantly, through the DOM, JavaScript allows us to build highly interactive webpages that update dynamically without refreshing. This can come with some challenges, though.\u003c/p\u003e\n\u003cp\u003eWhen the DOM updates, the browser recalculates CSS, lays out the DOM tree and 'repaints' the display. This typically happens so fast you barely notice. However, on a highly interactive website, or on a website where the JavaScript is updating the DOM excessively, the process of recalculating and repainting the display can result in noticeably poor performance.\u003c/p\u003e\n\u003cp\u003eAny time you want your website or app to update without refreshing, you'll need to update the DOM; there is no avoiding it. However, React has some neat tricks for being smart about these updates.\u003c/p\u003e\n\u003ch2\u003eReconciliation, Briefly\u003c/h2\u003e\n\u003cp\u003eIn React, we know that we write components that return JSX elements. These JSX elements represent DOM elements, and when rendered, become those elements on a webpage.\u003c/p\u003e\n\u003cp\u003eDuring the initial render, React \u003cem\u003ealso\u003c/em\u003e uses these elements to build a 'tree' that \u003cem\u003erepresents\u003c/em\u003e what the DOM currently looks like, referred to as the \u003cstrong\u003ecurrent\u003c/strong\u003e tree. When updates are made that would cause a re-render in React, a \u003cem\u003esecond\u003c/em\u003e tree, the \u003cstrong\u003eworkInProgress\u003c/strong\u003e tree is created, representing what the DOM \u003cem\u003ewill\u003c/em\u003e look like. When all updates are processed, the \u003cstrong\u003eworkInProgress\u003c/strong\u003e tree is used to update the DOM and the \u003cstrong\u003ecurrent\u003c/strong\u003e tree is updated to reflect the new updates.\u003c/p\u003e\n\u003cp\u003eThis is a key part of React's performance optimization - React uses these trees as an intermediate step between updates within components (like a change of state) and updates to the DOM. This helps in two ways:\u003c/p\u003e\n\u003ch3\u003eGrouped Updates\u003c/h3\u003e\n\u003cp\u003eUpdates can be grouped together. By waiting until all updates are processed before committing the \u003cstrong\u003eworkInProgress\u003c/strong\u003e tree to the DOM, excessive repaints are avoided.\u003c/p\u003e\n\u003cp\u003eSay, for instance, you have an app with many components, each colored a shade of blue, and a button, that when pressed, turns all those components to red. When that button is pressed, React will put together a tree containing all the components along with their updated properties, \u003cem\u003eTHEN\u003c/em\u003e commit all the changes to the DOM at once. This only requires one repaint. Without this design, we could end up with code that updates the DOM for each individual part of the app, one repaint for each part.\u003c/p\u003e\n\u003ch3\u003eDiffing Changes\u003c/h3\u003e\n\u003cp\u003eIn addition to grouping updates to the DOM, React can apply a diffing algorithm to quickly see what specific pieces of DOM \u003cem\u003eneed\u003c/em\u003e to be updated and how. This reduces the number of DOM changes that need to be made and lets React be particular in its updates, improving performance.\u003c/p\u003e\n\u003cp\u003eIn plain JavaScript some DOM changes are better than others in terms of performance. For example, say you want to add something inside a \u003ccode\u003eul\u003c/code\u003e in your DOM. Using \u003ccode\u003einnerHTML\u003c/code\u003e will work:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eul.innerHTML += '\u0026lt;li\u0026gt;A final list item\u0026lt;/li\u0026gt;'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut this \u003cem\u003erebuilds\u003c/em\u003e the entire DOM inside \u003ccode\u003ediv\u003c/code\u003e. On the other hand, using \u003ccode\u003eappendChild\u003c/code\u003e would \u003cem\u003enot\u003c/em\u003e cause a rebuild:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet li = document.createElement('li')\u003cbr\u003eli.textContent = 'A final list item'\u003cbr\u003eul.appendChild(li)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReact's diffing algorithm is designed to identify changes between what the current DOM looks like and what it will look like (the \u003cstrong\u003ecurrent\u003c/strong\u003e and \u003cstrong\u003eworkInProgress\u003c/strong\u003e trees). Based on the changes it identifies, different DOM updates will be performed to avoid rebuilding unnecessarily.\u003c/p\u003e\n\u003cp\u003eA more detailed explanation of the steps of this diffing process can be found in \u003ca href=\"https://reactjs.org/docs/reconciliation.html\"\u003eReact's Reconciliation documentation\u003c/a\u003e\n\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThere are some \u003ca href=\"https://www.quora.com/Why-is-Reacts-virtual-DOM-so-much-faster-than-the-real-DOM\"\u003emisconceptions\u003c/a\u003e\n    \u003ca href=\"https://news.ycombinator.com/item?id=9155564\"\u003efloating\u003c/a\u003e\n    \u003ca href=\"https://www.reddit.com/r/javascript/comments/6115ay/why_do_developers_think_the_dom_is_slow/\"\u003earound\u003c/a\u003e regarding the DOM being slow, often related to how frameworks like React can improve performance. While DOM manipulation \u003cem\u003eitself\u003c/em\u003e isn't 'slow,' repainting what is displayed in the browser can be.\n\u003c/p\u003e\n\u003cp\u003eReact can be very smart about handling DOM updates, which improves performance. Primarily, it does this in two ways: grouping DOM updates to prevent excessive repaints and being selective about what specifically needs to update and how.\u003c/p\u003e\n\u003cp\u003eRead more a more in-depth dive on these concepts \u003ca href=\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://reactjs.org/docs/reconciliation.html\"\u003eReconciliation\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\"\u003eInside Fiber: in-depth overview of the new reconciliation algorithm in React\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","exportId":"the-virtual-dom"}]},{"id":20125,"name":"Client-Side Routing","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gec2eeac19f29e7c2524f7367791b1635","items":[{"id":184994,"title":"Introduction to React Router","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-introduction-to-react-router\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-introduction-to-react-router/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-introduction-to-react-router\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-introduction-to-react-router/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eHow client-side routing works\u003c/li\u003e\n\u003cli\u003eWhat the trade-offs are for client-side routing\u003c/li\u003e\n\u003cli\u003eWhat \u003ccode\u003epushState\u003c/code\u003e is\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eClient-Side Routing\u003c/h3\u003e\n\n\u003cp\u003eSo, we have learned about building components, changing state, passing props,\netc... You may be wondering how you can make an app with multiple URLs that\ncontain different components. Not every app is a todo list, tic-tac-toe or a\nspreadsheet. So how do we build an app that allows us to have unique pages for\nthe user to interact with? This is where \u003ccode\u003eClient-Side\u003c/code\u003e routing comes in.  \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eClient-Side\u003c/strong\u003e routing is a different beast than what we are used to with\ntraditional server side routing that comes with \u003cstrong\u003eRails\u003c/strong\u003e, \u003cstrong\u003eSinatra\u003c/strong\u003e, or\n\u003cstrong\u003eNode/Express\u003c/strong\u003e, because we aren't making constant \u003cstrong\u003eHTTP GET\u003c/strong\u003e requests.\u003c/p\u003e\n\n\u003cp\u003eLets say that our \u003cstrong\u003eClient-Side\u003c/strong\u003e app is going to have these routes\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://www.movie-maker-2016/movies/new\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://www.movie-maker-2016/movies\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://www.movie-maker-2016/about\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://www.movie-maker-2016/login\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: these links are examples and do not lead to any website\u003c/p\u003e\n\n\u003cp\u003eOur \u003ccode\u003eserver\u003c/code\u003e's only job is to render the \u003ccode\u003eHTML\u003c/code\u003e. Which will look similar to this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Movie Maker 2016\u0026lt;/title\u0026gt;\u003cbr\u003e    \u0026lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"\u0026gt;\u003cbr\u003e    \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div id=\"container\"\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"./bundle.js\" charset=\"utf-8\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith \u003cstrong\u003eClient-Side\u003c/strong\u003e routing, it is now the responsibility of the\n\u003cstrong\u003eClient-Side-Code\u003c/strong\u003e, rather than the server, to handle the routing, fetching \nand displaying of the data in the browser.\u003c/p\u003e\n\n\u003cp\u003eImagine you've built a personal blog with a navigation that links your home\npage, about page and contact page. With Client-Side routing, you might get all\nthe needed data to render all three pages on the first page load. Then, when a\nuser clicks around your site, the Client-Side router swaps the 'home page'\ncomponent with the 'about page' component and renders faster than it would if\nyou were requesting a separate page from a server.\u003c/p\u003e\n\n\u003cp\u003eClient-Side routing brings with it some great benefits. The major one is\n\u003cem\u003eSpeed\u003c/em\u003e. Since we are only making one request to the server we don't have to\nwait for a round trip server call for each page change. We have everything\nstored on the Client-Side already, so we just notify our Client-Side code to\ndisplay the info as we need it.\u003c/p\u003e\n\n\u003ch3\u003eSingle Page App (SPA)\u003c/h3\u003e\n\n\u003cp\u003eIn \u003cstrong\u003eReact\u003c/strong\u003e we will likely be building an \u003cstrong\u003eSPA\u003c/strong\u003e, or Single Page Application.\nThis means we won't require multiple pages to be loaded from the server, just \nthe original \u003cstrong\u003eGET\u003c/strong\u003e request with our initial HTML, CSS and JS files. This\nrequires us to figure out how to make the experience of Client-Side routing work\nto our advantage.\u003c/p\u003e\n\n\u003cp\u003eThere are a couple of things that we need to take into consideration:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWe want to make sure that we have a URL that displays what the user is doing\nat that moment. So if they are viewing a bio page it might look like this\n\u003ccode\u003ehttps://worlds-best-app/bio\u003c/code\u003e instead of this \u003ccode\u003ehttps://worlds-best-app\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe want a user to be able to use the browser's back and forward buttons with\nease.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe want a user to be able to input a URL into the address bar and navigate to\nthe view they need to see.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis was easy with server side rendering: most MVC frameworks come with this for\nfree, because we just defined the routes, added the actions needed to the\ncontroller and then made a call to the model to get the info we desired.\u003c/p\u003e\n\n\u003ch3\u003eLimits of Client-Side routing\u003c/h3\u003e\n\n\u003cp\u003eSo this all sounds great, but what are the limitations?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLoading of CSS \u0026amp; Javascript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSince we are now loading all of our CSS and Javascript on the initial \u003cstrong\u003eGET\u003c/strong\u003e\n  request it can take a while to load our first page. This can be important as\n  the first page load can take a long time if you have a huge application.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAnalytics\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnalytic tools normally track page views, but an SPA doesn't have pages in the\n  traditional sense, so this makes it harder for Analytical tools to track page\n  views. We will need to add extra scripts to handle this limitation.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThey are much harder to design.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe have to plan out all the possibilities that might happen on the\n\u003cstrong\u003eClient-Side\u003c/strong\u003e; this might feel like we are repeating designs that we have\nalready completed with our server routes and models.\u003c/p\u003e\n\n\u003ch4\u003ePush it, Push it\u003c/h4\u003e\n\n\u003cp\u003eWhen we make server calls we are making a \u003cstrong\u003eGET\u003c/strong\u003e request to a URL and that new\nURL is in our address bar. If we have visited a few different URL's that\ninformation is saved in browser history.\u003c/p\u003e\n\n\u003cp\u003eGo to the JavaScript console in Chrome and type\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewindow.history\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return the following code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHistory { length: 32, state: null, scrollRestoration: \"auto\" };\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe length is how many locations you have visited in this window session.\u003c/p\u003e\n\n\u003cp\u003eNow if you type the following code it will take you to the last location in your\nbrowser history.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewindow.history.back();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo ahead and try it out.\u003c/p\u003e\n\n\u003cp\u003e.............\n............\n..........\u003c/p\u003e\n\n\u003cp\u003eOh good, you're back!! :)\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://i.giphy.com/10VbdHyZElXqso.gif\" alt=\"no you didn't!\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSo that is the JavaScript to emulate the experience of using the back button in\nthe browser toolbar. You can also move forward using\n\u003cstrong\u003ewindow.history.forward()\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith the JavaScript's History API we also have the ability to \u003cstrong\u003epushState()\u003c/strong\u003e to\nthe history entries. This method takes in three parameters: \u003cstrong\u003epushState(state,\ntitle, url)\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003estate object:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is a plain JavaScript object that is associated with the new history\n  entry we are going to create with the \u003cstrong\u003epushState()\u003c/strong\u003e function.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003etitle:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is currently ignored by most browsers and it is safe to just pass an\n  empty string or a title here.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eurl:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is the URL for the new history entry. The browser will not attempt to\n  load this URL after it calls pushState().\u003c/p\u003e\n\n\u003cp\u003eWhy don't we go ahead and create a new url in our browser\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst newState = {\u003cbr\u003e  goal: \"Learn about pushState()\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003ewindow.history.pushState(newState, \"new state\", \"new-state\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should notice that your browser has now changed to show \u003ccode\u003enew-state\u003c/code\u003e at the\nend of your URL address.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and type\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewindow.history.state\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should return\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eObject { goal: \"Learn about pushState()\" }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you now use the \u003cstrong\u003ewindow.history.back()\u003c/strong\u003e function you will not go back to\nthe previous page, but your URL address will return to the original URL address.\nIf you use \u003cstrong\u003ewindow.history.forward()\u003c/strong\u003e you will move back to our new URL that\nends in \u003cstrong\u003enew-state\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe have now successfully implemented a basic version of \u003cstrong\u003eClient-Side\u003c/strong\u003e routing.\u003c/p\u003e\n\n\u003cp\u003eAs we start learning about \u003cstrong\u003eReact Router\u003c/strong\u003e we will start implementing\n\u003cstrong\u003epushState()\u003c/strong\u003e within the context of a \u003cstrong\u003eReact\u003c/strong\u003e app.\u003c/p\u003e\n\n\u003ch2\u003eA Word About Accessibility\u003c/h2\u003e\n\n\u003cp\u003eThe web was designed, from its inception, to be a platform for \u003cem\u003eeveryone\u003c/em\u003e,\nincluding those who need help interacting with it through assistive devices.\nThose requiring captions, inverted contrast, etc. have all been able to\nparticipate in \u003cem\u003eour\u003c/em\u003e web because it was designed with the differently-abled\nin mind \u003cem\u003efrom the beginning\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eCreating accessible sites using SPA-style applications represents an\nadditional challenge. Many tutorials breeze past this consideration.\u003c/p\u003e\n\n\u003cp\u003eDesigning SPA's that work with accessibility in mind proves you that you're not\nonly a superior developer, but a great person. Here's a \u003ca href=\"https://blog.usejournal.com/getting-started-with-web-accessibility-in-react-9e591fdb0d52\"\u003eblog post\u003c/a\u003e on\naccessibility in React.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/guides/quick-start\"\u003eReact Router Tutorial\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\"\u003eManipulating Browser History\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"introduction-to-react-router"}]},{"id":20126,"name":"Additional Practice","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"gb400809e2d5daca18da802c95dc70ebf","items":[]},{"id":20127,"name":"Milestones","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gf54ba6cb9dd4e56beda1b296ce21ea78","items":[{"id":185114,"title":"Phase 2 Project: Building a Client-Side Application with React","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-2-react-assessment\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-2-react-assessment\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-2-react-assessment/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eBuild a React single page application from scratch\u003c/li\u003e\n\u003cli\u003eApply your knowledge of components, props and state management\u003c/li\u003e\n\u003cli\u003eIncorporate client-side routing\u003c/li\u003e\n\u003cli\u003eUse data from external APIs\u003c/li\u003e\n\u003cli\u003ePersist data in a mock up backend\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eReact Project Overview\u003c/h2\u003e\n\u003cp\u003eThis assignment is open-ended when it comes to the actual content. You are free to create whatever you'd like, as long as it incorporates the requirements listed in these instructions.\u003c/p\u003e\n\u003cp\u003eIf you don't have any inspiration at the moment, here are a couple of ideas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInstagram, but only for dog and cat pictures\u003c/li\u003e\n\u003cli\u003eA weather app that changes style based on the weather\u003c/li\u003e\n\u003cli\u003eA reddit feed for researching stocks\u003c/li\u003e\n\u003cli\u003eDuolingo for being a better neighbor\u003c/li\u003e\n\u003cli\u003eA turn-based boardgame\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUse the \u003ccode\u003ecreate-react-app\u003c/code\u003e generator to start your project.\n\u003cul\u003e\n\u003cli\u003eFollow the instructions on this repo to setup the generator: \u003ca href=\"https://github.com/facebookincubator/create-react-app\"\u003ecreate-react-app\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eYour app should have one HTML page to render your react application\u003c/li\u003e\n\u003cli\u003eYour app should use multiple components in a way that keeps your code well organized.\u003c/li\u003e\n\u003cli\u003eThere should be 3 routes\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe Application must make use of \u003ccode\u003ereact-router\u003c/code\u003e and proper RESTful routing (should you choose to use react-router v3 please refer to the appropriate \u003ca href=\"https://github.com/ReactTraining/react-router/tree/v3/docs\"\u003edocs\u003c/a\u003e; docs for v4 can be found \u003ca href=\"https://reacttraining.com/react-router/web/guides/quick-start\"\u003ehere\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYour app must incorporate API data. This data can be from a public API or from a GitHub JSON file you create\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYour app must persist some data using a JSON server as a mock up backend\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYour application should have some minimal styling: feel free to incorporate a UI framework (like \u003ca href=\"https://react-bootstrap.github.io/\"\u003ereact-bootstrap\u003c/a\u003e or \u003ca href=\"https://material-ui.com/\"\u003ematerial-ui\u003c/a\u003e), but if you want to write CSS yourself, go for it!\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGo wild! These are only the basic requirements — you're free to add on as much stuff as you'd like.\u003c/p\u003e","exportId":"ga9664e05d8af9ac3205483b91dae070e"}]},{"id":20128,"name":"Code Challenges","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g101a2b414b62aaff0e1ed01bbccfa058","items":[{"id":185015,"title":"Phase 2 Rubric","type":"Assignment","indent":0,"locked":false,"submissionTypes":null,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eRead the rubric attached below.\u003c/span\u003e\u003c/p\u003e","exportId":"g6d098ed501fa13f9a2ea51eecb043ea6"},{"id":185016,"title":"Phase 2 Code Challenge Instructions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eBefore you can start working on the code challenge, be sure to follow the steps below:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFind your code challenge in the Phase 2 Milestones module\u003c/li\u003e\n\u003cli\u003eOpen the code challenge assignment and download the linked ZIP file\u003c/li\u003e\n\u003cli\u003eUnzip the file on your computer\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e into the directory in your terminal (after, run \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ls \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;; you should see a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;bin/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory and a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file)\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/start \u0026lt;your-name\u0026gt;\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e from the directory; this will create a new directory called \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e to and open the new \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory in your code editor\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo work on your code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEnsure that you're in the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory\u003c/li\u003e\n\u003cli\u003eFollow the instructions in the \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;README.md \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git add . \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;and \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git commit \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;inside of the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory often as you're working\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo submit the code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNavigate to the parent directory of \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in your terminal.\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/end \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e, which will create a new file, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in that directory (for example, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;alicia.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e).\u003c/li\u003e\n\u003cli\u003eNavigate back to the code challenge assignment in the Phase 2 Milestones module in Canvas\u003c/li\u003e\n\u003cli\u003eUpload \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;to the assignment and submit\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eReach out to your instructors\u0026nbsp;\u003cstrong\u003eimmediately\u0026nbsp;\u003c/strong\u003eif you run into issues downloading, working on, or uploading your code challenge.\u003c/p\u003e\n\u003cp\u003eUse this video to guide you through these instructions:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube-nocookie.com/embed/3AM3qXUtnQY\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e","exportId":"phase-2-code-challenge-instructions"},{"id":185018,"title":"Phase 2 Code Challenge: Bot Battlr","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a file upload","graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"phase-4-bot-battler-20200928.zip\" href=\"viewer/files/Uploaded%20Media/phase-4-bot-battler-20200928.zip?canvas_download=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\"\u003ephase-4-bot-battler-20200928.zip\u003c/a\u003e\u003c/p\u003e","exportId":"g12f597ba903c3f30c37833e308717314"}]},{"id":20129,"name":"Milestones","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gbab7b2e93a443bd7f8fd3b9f6f527e71","items":[]},{"id":21347,"name":"Hooks State and Events","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g0dd601bfd091dd5cbab46d9b5d1b8e56","items":[{"id":199038,"title":"Event Handling in React","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-event-handling\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-event-handling\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-event-handling/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll cover the event system in React. We'll learn how to attach event listeners to specific elements,\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eExplain how to use React events in our application\u003c/li\u003e \u003cli\u003eAdd event handlers to an element\u003c/li\u003e \u003cli\u003eExplain how React events differ from browser events\u003c/li\u003e \u003cli\u003eDescribe how React standardizes events for compatibility\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eAdding Event Handlers\u003c/h2\u003e  \u003cp\u003eConsider the following component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Tickler() {\u003cbr\u003e  function tickle() {\u003cbr\u003e    console.log(\"Teehee!\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button\u0026gt;Tickle me!\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have a \u003ccode\u003etickle()\u003c/code\u003e function, but no way to trigger it! This is a perfect time to add an event handler so that we can see the message in our console. We attach event handlers to an element much like how we'd add a prop. The handler name is always comprised of \u003ccode\u003eon\u003c/code\u003e, and the event name itself — for example \u003ccode\u003eclick\u003c/code\u003e. These are joined together and camel-cased, so if we wanted to add a click handler, we'd call the prop \u003ccode\u003eonClick\u003c/code\u003e. This prop takes a function as a value — it can either be a reference to a function (like our \u003ccode\u003etickle()\u003c/code\u003e function), or an inline function. Most of the time, we'll use a function reference. It looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;button onClick={tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can see, we're passing a function \u003cem\u003ereference\u003c/em\u003e, and not executing the \u003ccode\u003etickle\u003c/code\u003e function. Our updated component looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Tickler() {\u003cbr\u003e  function tickle() {\u003cbr\u003e    console.log(\"Teehee!\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button onClick={tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when we click the button, we see a message in our console. Awesome!\u003c/p\u003e  \u003cp\u003eWe can also use arrow functions for event handlers:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Tickler() {\u003cbr\u003e  return \u0026lt;button onClick={() =\u0026gt; console.log(\"Teehee!\")}\u0026gt;Tickle me!\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eArrow functions are a good choice if your event handler doesn't need to handle much logic. If you have more than one line of code to run in your event handler, it's a good idea to create a separate callback function (like in the first example).\u003c/p\u003e  \u003ch2\u003eWhat Can We Listen For Events On?\u003c/h2\u003e  \u003cp\u003eOne more thing to note about event listeners: you can only attach event handlers to DOM elements, \u003cem\u003enot\u003c/em\u003e React components. For example, this will not work:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clickable() {\u003cbr\u003e  return \u0026lt;button\u0026gt;Click Me\u0026lt;/button\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  function handleClick() {\u003cbr\u003e    console.log(\"click\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;Clickable onClick={handleClick} /\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e... but this will:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clickable() {\u003cbr\u003e  function handleClick() {\u003cbr\u003e    console.log(\"click\");\u003cbr\u003e  }\u003cbr\u003e  return \u0026lt;button onClick={handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  return \u0026lt;Clickable /\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we want to make the first example work so that \u003ccode\u003ehandleClick\u003c/code\u003e is called in \u003ccode\u003eApp\u003c/code\u003e, we'd have to pass \u003ccode\u003eonClick\u003c/code\u003e as a \u003cstrong\u003eprop\u003c/strong\u003e on the \u003ccode\u003eClickable\u003c/code\u003e component, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clickable({ onClick }) {\u003cbr\u003e  return \u0026lt;button onClick={onClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  function handleClick() {\u003cbr\u003e    console.log(\"click\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;Clickable onClick={handleClick} /\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this example, we're passing down a reference to the \u003ccode\u003ehandleClick\u003c/code\u003e function as a \u003cstrong\u003eprop\u003c/strong\u003e called \u003ccode\u003eonClick\u003c/code\u003e to the \u003ccode\u003eClickable\u003c/code\u003e component. Then, we're assigning using that prop as the callback function for the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element's \u003ccode\u003eonClick\u003c/code\u003e attribute. That way, when the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element is clicked, the callback function \u003ccode\u003ehandleClick\u003c/code\u003e will be called. Whew! That's a lot to keep track of. We'll cover this concept of passing down callback functions as props in more detail later on.\u003c/p\u003e  \u003cp\u003eLet's explore a few other common event types and their use cases here. There's some starter code provided, so feel free to code along and test things out in the console!\u003c/p\u003e  \u003ch3\u003eonClick\u003c/h3\u003e  \u003cp\u003eAs we saw in the example above, adding a \u003ccode\u003eclick\u003c/code\u003e event is pretty straightforward!\u003c/p\u003e  \u003cp\u003eUsing our \u003ccode\u003eTickler\u003c/code\u003e component as an example, let's see what else we can do with a click event.\u003c/p\u003e  \u003cp\u003eUpdate your component to look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Tickler() {\u003cbr\u003e  function tickle(event) {\u003cbr\u003e    console.log(event);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button onClick={tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJust like when we handle events in JavaScript, when we handle events in React, we can provide a \u003ccode\u003eevent\u003c/code\u003e parameter to our event handler callback function. When the button is clicked, we can access all the information about the event (such as the event \u003ccode\u003etarget\u003c/code\u003e, mouse coordinates via \u003ccode\u003eclientX\u003c/code\u003e and \u003ccode\u003eclientY\u003c/code\u003e, etc).\u003c/p\u003e  \u003cp\u003eWhat if we wanted to pass other information to the event handler though? In the \u003ccode\u003eMultiButton\u003c/code\u003e component, we have three buttons that all share the same callback function for their \u003ccode\u003eonClick\u003c/code\u003e event:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction MultiButton() {\u003cbr\u003e  function handleClick(number) {\u003cbr\u003e    console.log(`Button ${number} was clicked`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;Button 1\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;Button 2\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;Button 3\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen one of the buttons is clicked, we want the callback to log out the button's number. If you try clicking one of those buttons now, you'll still see the \u003ccode\u003eevent\u003c/code\u003e object being logged, not the number of the button.\u003c/p\u003e  \u003cp\u003eWe could try this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction MultiButton() {\u003cbr\u003e  function handleClick(number) {\u003cbr\u003e    console.log(`Button x was clicked`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick(1)}\u0026gt;Button 1\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick(2)}\u0026gt;Button 2\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick(3)}\u0026gt;Button 3\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...but now, the console messages will appear as soon as our component is rendered, not when the button is clicked. This is why we always need to provide a \u003cem\u003efunction definition\u003c/em\u003e, not a \u003cem\u003efunction invocation\u003c/em\u003e to our event handlers. Here's the solution:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction MultiButton() {\u003cbr\u003e  function handleClick(number) {\u003cbr\u003e    console.log(`Button x was clicked`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; handleClick(1)}\u0026gt;Button 1\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; handleClick(2)}\u0026gt;Button 2\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; handleClick(3)}\u0026gt;Button 3\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy writing out an arrow function here, we're providing each of our button's \u003ccode\u003eonClick\u003c/code\u003e handlers a \u003cem\u003efunction definition\u003c/em\u003e that will only be \u003cem\u003einvoked\u003c/em\u003e when the button is clicked!\u003c/p\u003e  \u003ch3\u003eonChange\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eonChange\u003c/code\u003e attribute is useful for handling when \u003cem\u003einput values\u003c/em\u003e have changed. This event listener is often used with \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e inputs (basically, anywhere you need to capture a user's input).\u003c/p\u003e  \u003cp\u003eHere are a couple examples of using the \u003ccode\u003eonChange\u003c/code\u003e handler:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction ChangeItUp() {\u003cbr\u003e  function handleChange(event) {\u003cbr\u003e    console.log(`${event.target.name}: ${event.target.value}`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        name=\"search\"\u003cbr\u003e        onChange={handleChange}\u003cbr\u003e        placeholder=\"Enter search term...\"\u003cbr\u003e      /\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;select name=\"filter\" onChange={handleChange}\u0026gt;\u003cbr\u003e        \u0026lt;option value=\"all\"\u0026gt;Select a filter...\u0026lt;/option\u0026gt;\u003cbr\u003e        \u0026lt;option value=\"completed\"\u0026gt;Completed\u0026lt;/option\u0026gt;\u003cbr\u003e        \u0026lt;option value=\"incomplete\"\u0026gt;Incomplete\u0026lt;/option\u0026gt;\u003cbr\u003e      \u0026lt;/select\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eonSubmit\u003c/h3\u003e  \u003cp\u003eWhenever you're working with \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e elements, handling the submit event is a good way to interact with all the data from the form after it's been submitted.\u003c/p\u003e  \u003cp\u003eHere's a quick example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Login() {\u003cbr\u003e  function handleSubmit(event) {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    console.log(\"I submit\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" name=\"username\" placeholder=\"Enter username...\" /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"password\" name=\"password\" placeholder=\"Enter password...\" /\u0026gt;\u003cbr\u003e      \u0026lt;button\u0026gt;Login\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the form is submitted, just like in vanilla JavaScript, you must call \u003ccode\u003eevent.preventDefault()\u003c/code\u003e to prevent the form from making a network request.\u003c/p\u003e  \u003cp\u003eWe'll go into forms in more detail in a later lesson, and show the preferred way for collecting data from \u003cem\u003eall\u003c/em\u003e the form input fields. For now, just remember - use the \u003ccode\u003eonSubmit\u003c/code\u003e event handler, and always call \u003ccode\u003epreventDefault()\u003c/code\u003e!\u003c/p\u003e  \u003ch2\u003eHow Does React Handle Events?\u003c/h2\u003e  \u003cp\u003eYou may have noticed when inspecting the \u003ccode\u003eevent\u003c/code\u003e object that it's a bit different than the standard browser event. React's \u003ccode\u003eevent\u003c/code\u003e object is a special object called: \u003ccode\u003eSyntheticBaseEvent\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eReact has its own event system with special event handlers called \u003ccode\u003eSyntheticEvent\u003c/code\u003e. The reason for having a specific event system instead of using native events is cross-browser compatibility. Some browsers treat events differently, and by wrapping these events into a consistent API, React makes our lives a lot easier. It's important to keep in mind that they are the \u003cem\u003eexact same events\u003c/em\u003e, just implemented in a consistent way! That means these events also have methods that you can call like \u003ccode\u003epreventDefault()\u003c/code\u003e, \u003ccode\u003estopPropagation()\u003c/code\u003e, and so on.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eIn React, you can add event listeners to elements in JSX by providing a \u003ccode\u003eonEvent\u003c/code\u003e attribute and passing a \u003cem\u003ecallback function\u003c/em\u003e. Some commonly used event listeners include \u003ccode\u003eonClick\u003c/code\u003e, \u003ccode\u003eonChange\u003c/code\u003e, and \u003ccode\u003eonSubmit\u003c/code\u003e. You can find a full list of supported events \u003ca href=\"https://reactjs.org/docs/events.html#supported-events\"\u003ehere\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eReact has its own internal events system that makes events behave consistently across various browsers.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html\"\u003eReact Synthetic Events\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/handling-events.html\"\u003eHandling Events\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html#supported-events\"\u003eSupported Events\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"ge6b6025f3f49a625e59537f079a60db4"},{"id":199039,"title":"Event Handling in React Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-event-handling-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-event-handling-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-event-handling-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this lab you'll respond to events in React and write event handlers.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The components are not defined yet, but the files are present. Before the tests will run, you must export components from \u003ccode\u003eEyesOnMe.js\u003c/code\u003e and \u003ccode\u003eKeypad.js\u003c/code\u003e. To get started, write very basic components that you \u003cem\u003eknow\u003c/em\u003e will not pass all the tests, but at least be valid React.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eKeypad\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/3o6MbdTboTFWOUsLkc/giphy.gif\" alt=\"Keypad\"\u003e\u003c/p\u003e\n\u003cp\u003eMr. Burns has requested us to build a new keypad component for the nuclear plant, since the last one was way too complicated for his employees to use. We'll keep things super simple instead, and use an \u003ccode\u003e\u0026lt;input type=\"password\" /\u0026gt;\u003c/code\u003e field to capture input. Here's how to complete the exercise:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIn the \u003ccode\u003ecomponents/Keypad.js\u003c/code\u003e file, create a \u003ccode\u003eKeypad\u003c/code\u003e React component.\u003c/li\u003e\n\u003cli\u003eIn that component, render an \u003ccode\u003einput\u003c/code\u003e with the right type.\u003c/li\u003e\n\u003cli\u003eOn that \u003ccode\u003einput\u003c/code\u003e, add an event handler that listens for the \u003ccode\u003echange\u003c/code\u003e event.\u003c/li\u003e\n\u003cli\u003eWhen that event fires, use \u003ccode\u003econsole.log\u003c/code\u003e to print out the text \u003ccode\u003e'Entering password...'\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eEyes on the ball\u003c/h2\u003e\n\u003cp\u003eLet's say you're in the club with your buddy. The music's blaring, lights are flashing... It's so hard to get his attention! Your job is to create a component that registers whenever he focuses on you, \u003cem\u003eand\u003c/em\u003e when his eyes are drifting off.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIn the \u003ccode\u003ecomponents/EyesOnMe.js\u003c/code\u003e file, create a \u003ccode\u003eEyesOnMe\u003c/code\u003e React component.\u003c/li\u003e\n\u003cli\u003eIn that component, render a \u003ccode\u003ebutton\u003c/code\u003e with the text \u003ccode\u003e'Eyes on me'\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eOn that \u003ccode\u003ebutton\u003c/code\u003e, add event handlers that listens for the \u003ccode\u003efocus\u003c/code\u003e and \u003ccode\u003eblur\u003c/code\u003e events.\u003c/li\u003e\n\u003cli\u003eWhen the \u003ccode\u003efocus\u003c/code\u003e event fires, use \u003ccode\u003econsole.log\u003c/code\u003e to print out the text \u003ccode\u003e'Good!'\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWhen the \u003ccode\u003eblur\u003c/code\u003e event fires, use \u003ccode\u003econsole.log\u003c/code\u003e to print out the text \u003ccode\u003e'Hey! Eyes on me!'\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html\"\u003eReact Events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g28ebf492afdb0a07d2410e94516f988e"},{"id":199040,"title":"React State","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we'll dive into component \u003cstrong\u003estate\u003c/strong\u003e, and see how we can make our components respond to change dynamically by working with the React state system.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eExplain what state is\u003c/li\u003e\n\u003cli\u003eExplain the difference between state and props\u003c/li\u003e\n\u003cli\u003eShow examples of how state is defined and updated\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eWhat's state?\u003c/h2\u003e\n\u003cp\u003eLet's quickly talk about what \u003cstrong\u003estate\u003c/strong\u003e is in React. State is data that is \u003cstrong\u003edynamic\u003c/strong\u003e in your component. A component's state, unlike a component's props, \u003cem\u003ecan\u003c/em\u003e change during the component's life.\u003c/p\u003e\n\u003cp\u003eConsider the limitations of props: for a component's props to change, its \u003cstrong\u003eparent\u003c/strong\u003e component needs to send it new props (after which, the component would 'remake' itself with the new props). State provides us with a way to maintain and update information \u003cem\u003ewithin\u003c/em\u003e a component \u003cem\u003ewithout\u003c/em\u003e requiring its parent to somehow send updated information.\u003c/p\u003e\n\u003cp\u003eImagine that we have a single component which displays an integer. When a user clicks the component, it should increment its integer by 1. If we were to represent this integer value in the component using \u003cstrong\u003estate\u003c/strong\u003e, the component could increment its own state and automatically re-render whenever state is updated!\u003c/p\u003e\n\u003ch2\u003euseState\u003c/h2\u003e\n\u003cp\u003eIn order to work with these special \u003cstrong\u003estate variables\u003c/strong\u003e in our components, we must first import a function from React called \u003ccode\u003euseState\u003c/code\u003e. This special function is a \u003cstrong\u003eReact Hook\u003c/strong\u003e that will let us \"hook into\" React's internal state inside of our function component.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\"; \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInitializing State\u003c/h3\u003e\n\u003cp\u003eOnce we've imported the \u003ccode\u003euseState\u003c/code\u003e hook, we can call it inside of our component, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Counter() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button\u0026gt;{count}\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we call \u003ccode\u003euseState(0)\u003c/code\u003e inside the function component, that creates a new \"state variable\" which our function gets access to. That new state variable has an \u003cstrong\u003einitial value\u003c/strong\u003e of 0 (or whatever we pass into \u003ccode\u003euseState\u003c/code\u003e when we call it).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003euseState\u003c/code\u003e will return an \u003cstrong\u003earray\u003c/strong\u003e that has two things inside of it:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ecount\u003c/code\u003e: the current value for the state variable\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esetCount\u003c/code\u003e: a \u003cem\u003esetter\u003c/em\u003e function so we can update the state variable\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe could access those elements from the array individually, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst countState = useState(0);\u003cbr\u003e// =\u0026gt; [0, setStateFunction]\u003cbr\u003econst count = countState[0];\u003cbr\u003econst setCount = countState[1]; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut to clean up the code, React recommends using \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"\u003earray destructuring\u003c/a\u003e to achieve the same result in one line of code instead of three:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst [count, setCount] = useState(0); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can then use the \u003ccode\u003ecount\u003c/code\u003e variable to access that piece of state and display its current value in the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\u003ch2\u003eSetting State\u003c/h2\u003e\n\u003cp\u003eThe setter function we get back from calling \u003ccode\u003euseState\u003c/code\u003e is straightforward in its purpose: it sets/updates state! That's it! That's what it's there for. Whenever we want to update state, we can just call the setter function (in our case, \u003ccode\u003esetCount\u003c/code\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Counter() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  function increment() {\u003cbr\u003e    setCount(count + 1);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button onClick={increment}\u0026gt;{count}\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, when the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element is clicked, it will run our \u003ccode\u003eincrement\u003c/code\u003e function. \u003ccode\u003eincrement\u003c/code\u003e calls the \u003ccode\u003esetCount\u003c/code\u003e function to do these two things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUpdate the value of \u003ccode\u003ecount\u003c/code\u003e to be \u003ccode\u003ecount + 1\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRe-render our component\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe magic of working with \u003cstrong\u003estate\u003c/strong\u003e is that we don't have to worry about any complex DOM manipulation (like finding the button element and telling it to display the new \u003ccode\u003ecount\u003c/code\u003e value) — whenever we call the \u003ccode\u003esetCount\u003c/code\u003e function, React will automatically re-render our component, along with any of its child components, and update the DOM based on the new values for state!\u003c/p\u003e\n\u003cp\u003eUsing state like this allows React to be very performant: based on which component is updated, React can determine which child components are affected and how the DOM needs to be changed when these components are re-rendered.\u003c/p\u003e\n\u003cp\u003eTake your time to read through the above code. Work through it line by line and make sure you are comfortable before moving forward.\u003c/p\u003e\n\u003ch3\u003eSetting State is Asynchronous\u003c/h3\u003e\n\u003cp\u003eWhile using the \u003ccode\u003esetCount\u003c/code\u003e function is straightforward enough, there is one very important caveat about \u003cem\u003ehow\u003c/em\u003e it functions that we need to explore: it sets state \u003cstrong\u003easynchronously\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eIn order to understand why this is important, let's look at an example of a state setter function being used in a component. The following gif is of this component (pay close attention to the \u003ccode\u003econsole.log()\u003c/code\u003es:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Counter() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  function increment() {\u003cbr\u003e    console.log(`before setState: ${count}`);\u003cbr\u003e\u003cbr\u003e    setCount(count + 1);\u003cbr\u003e\u003cbr\u003e    console.log(`after setState: ${count}`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div onClick={increment}\u0026gt;{count}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/asynchronous-state-setting-example.gif\" alt=\"async set state example\"\u003e\u003c/p\u003e\n\u003cp\u003eWhat we are seeing is \u003ccode\u003esetCount()\u003c/code\u003e functioning \u003cstrong\u003easynchronously\u003c/strong\u003e. When we execute \u003ccode\u003esetCount()\u003c/code\u003e, it is \u003cem\u003enon-blocking\u003c/em\u003e. It fires off a message to the React component's inner workings saying: \"Hey, you need to update state to this value when you have a chance.\" The component finishes doing its current task \u003cem\u003ebefore\u003c/em\u003e updating the state. In this case, it finishes executing the \u003ccode\u003eincrement\u003c/code\u003e function in full before updating the state.\u003c/p\u003e\n\u003cp\u003eIt's not uncommon for new React developers to get 'bitten' by the asynchronous nature of state setter functions at least once. If setting state were not \u003cem\u003easynchronous\u003c/em\u003e, the two logs would not be the same number.\u003c/p\u003e\n\u003cp\u003eFor this reason, React recommends using a slightly different syntax for setting state when working with values that are calculated based on the previous version of state (like our counter). To demonstrate the issue, consider the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Counter() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  function increment() {\u003cbr\u003e    // call setCount twice, to update the counter by two every time we click\u003cbr\u003e    setCount(count + 1);\u003cbr\u003e    setCount(count + 1);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div onClick={increment}\u0026gt;{count}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is a contrived example — we could just as easily have called \u003ccode\u003esetCount(count + 2)\u003c/code\u003e instead of calling \u003ccode\u003esetCount\u003c/code\u003e twice. But if you run this example in your browser, you may be surprised at the result. Instead of seeing the counter incremented by two, it's still only incremented by 1!\u003c/p\u003e\n\u003cp\u003eThis problem makes more sense if we add some logs back in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction increment() {\u003cbr\u003e  console.log(`before setState: ${count}`);\u003cbr\u003e  setCount(count + 1);\u003cbr\u003e  console.log(`after setState once: ${count}`);\u003cbr\u003e  setCount(count + 1);\u003cbr\u003e  console.log(`after setState twice: ${count}`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven though we call \u003ccode\u003esetCount\u003c/code\u003e multiple times, the value of \u003ccode\u003ecount\u003c/code\u003e isn't updated immediately!\u003c/p\u003e\n\u003cp\u003eAs mentioned before, setting state is not synchronous. In our example, calling \u003ccode\u003esetCount(count + 1)\u003c/code\u003e will evaluate to \u003ccode\u003esetCount(1)\u003c/code\u003e in \u003cem\u003eboth\u003c/em\u003e cases:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction increment() {\u003cbr\u003e  console.log(count);\u003cbr\u003e  // =\u0026gt; 0\u003cbr\u003e\u003cbr\u003e  setCount(count + 1);\u003cbr\u003e  // equivalent to setCount(0 + 1)\u003cbr\u003e\u003cbr\u003e  console.log(count);\u003cbr\u003e  // =\u0026gt; 0\u003cbr\u003e\u003cbr\u003e  setCount(0 + 1);\u003cbr\u003e  // equivalent to setCount(0 + 1)\u003cbr\u003e\u003cbr\u003e  console.log(count);\u003cbr\u003e  // =\u0026gt; 0\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReact actually provides a built in solution for this problem. Instead of passing a new value into \u003ccode\u003esetCount\u003c/code\u003e, we can also pass a callback function. That function, when called inside \u003ccode\u003esetCount\u003c/code\u003e will be passed the state variable from when that \u003ccode\u003esetCount\u003c/code\u003e was called. This is typically referred to as the \u003cem\u003eprevious state\u003c/em\u003e. With this knowledge, we can rewrite the \u003ccode\u003eincrement\u003c/code\u003e function to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction increment() {\u003cbr\u003e  setCount((currentCount) =\u0026gt; currentCount + 1);\u003cbr\u003e  setCount((currentCount) =\u0026gt; currentCount + 1);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using the callback version of \u003ccode\u003esetCount\u003c/code\u003e, React will pass in the current value of \u003ccode\u003ecount\u003c/code\u003e before updating it. Now our code works as intended and updates \u003ccode\u003ecount\u003c/code\u003e by 2 when the button is clicked.\u003c/p\u003e\n\u003cp\u003eAs a rule of thumb, \u003cstrong\u003eany time you need to set state based on the current value of state, you should use the callback syntax\u003c/strong\u003e.\u003c/p\u003e\n\u003ch3\u003eRules of Hooks\u003c/h3\u003e\n\u003cp\u003eSince the \u003ccode\u003euseState\u003c/code\u003e hook is the first of several React Hooks we'll be learning about, now's a good time to review some general \u003ca href=\"https://reactjs.org/docs/hooks-rules.html\"\u003erules for working with hooks\u003c/a\u003e:\u003c/p\u003e\n\u003ch4\u003eOnly Call Hooks at the Top Level\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon’t call Hooks inside loops, conditions, or nested functions.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhen you're using a React Hook, such as \u003ccode\u003euseState\u003c/code\u003e, it's important that the hook is always called every time your component is rendered. That means this syntax isn't valid:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Counter(props) {\u003cbr\u003e  if (props.shouldHaveCount) {\u003cbr\u003e    // This is wrong -- never call a hook inside a condition\u003cbr\u003e    const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e    // return ...\u003cbr\u003e  }\u003cbr\u003e  // return ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe reason for this comes down to how React keeps track of which state variables are associated with — hooks must always be called in the same order. For a more detailed explanation, check out the \u003ca href=\"https://reactjs.org/docs/hooks-rules.html#explanation\"\u003eReact docs\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eOnly Call Hooks from React Functions\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon’t call Hooks from regular JavaScript functions.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eReact Hooks are meant to work specifically with React components, so make sure to only use Hooks inside of React components. We'll see how to create our custom hooks later on — custom hooks and React components are the only two places you can use React hooks.\u003c/p\u003e\n\u003ch2\u003eA Word of Caution\u003c/h2\u003e\n\u003cp\u003eWhile component state is a very powerful feature, it should be used as sparingly as possible. State adds (sometimes unnecessary) complexity and can be very easy to lose track of. The more state we introduce in our application, the harder it will be to keep track of all of the changes in our data. Remember: \u003cstrong\u003estate is only for values that are expected to change during the components life\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWhenever we need \u003cem\u003edynamic\u003c/em\u003e data in our applications (values that change over time), we should use \u003cstrong\u003estate\u003c/strong\u003e. We create our initial state by calling the \u003ccode\u003euseState\u003c/code\u003e hook inside of our components.\u003c/p\u003e\n\u003cp\u003eTo update state, we must use the \u003ccode\u003esetState\u003c/code\u003e function returned by \u003ccode\u003euseState\u003c/code\u003e, so that changes to state cause our components to re-render.\u003c/p\u003e\n\u003cp\u003eAlso, setting state is \u003cem\u003easynchronous\u003c/em\u003e, so any updates to state that are based on the current value of state should be made using the callback syntax.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-state.html\"\u003eThe useState hook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\"\u003eProps vs. State\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state\"\u003eThinking in React\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-rules.html\"\u003eRules of Hooks\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g998c0be41d1a8793a0adc4e38f95b357"},{"id":199041,"title":"React State and Events Code-along","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state-and-events-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-and-events-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-and-events-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this code-along, we'll get some hands-on practice writing components with state and setting state based on different kinds of events.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eSet up a component with one state variable\u003c/li\u003e\n\u003cli\u003eUpdate state based on events\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eAdding State to a Component\u003c/h2\u003e\n\u003cp\u003eTo get some practice adding state to a component, code along with this readme. There's some starter code in the \u003ccode\u003esrc/components\u003c/code\u003e folder. We'll be adding state to some existing components and building out some functionality that depends on state.\u003c/p\u003e\n\u003cp\u003eAs a quick recap:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eState is data that is changes over time in your component. State must be initialized in a component by calling \u003ccode\u003euseState\u003c/code\u003e. Updating state by calling \u003ccode\u003esetState\u003c/code\u003e will cause our components to re-render automatically.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTo code along, run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to install the dependencies and get the demo app running.\u003c/p\u003e\n\u003ch3\u003eDetermining When To Add State\u003c/h3\u003e\n\u003cp\u003eFor our first component, let's work on a toggle button. It should do the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe button should say \"OFF\" when it is first displayed\u003c/li\u003e\n\u003cli\u003eWhen the button is clicked, it should say \"ON\"\u003c/li\u003e\n\u003cli\u003eWhen the button is clicked again, it should say \"OFF\"\u003c/li\u003e\n\u003cli\u003eetc\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet's talk through the steps and how we might think about building a feature like this as a React developer.\u003c/p\u003e\n\u003cp\u003eFirst, let's decide: do we actually need state for this feature? We need to determine if the data for this feature is \u003cem\u003estatic\u003c/em\u003e (doesn't change) or \u003cem\u003edynamic\u003c/em\u003e (does change). If it's dynamic, we'll definitely need state! We should also ask if this feature could be made using \u003cstrong\u003eprops\u003c/strong\u003e instead of \u003cstrong\u003estate\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eHere are some questions from \u003ca href=\"https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state\"\u003eThinking in React\u003c/a\u003e that will help us decide if we need state:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cblockquote\u003eIs it passed in from a parent via props? If so, it probably isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003eCan you compute it based on any other state or props in your component? If so, it isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003eDoes it remain unchanged over time? If so, it probably isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSince this component isn't being passed any props that will let us display some new button text, and the button's text is \u003cem\u003edynamic\u003c/em\u003e (it changes), we definitely need to add state!\u003c/p\u003e\n\u003cp\u003eOur full checklist looks like this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🚫 Is it passed as a prop?\u003c/li\u003e\n\u003cli\u003e🚫 Can you compute it based on any other state or props in your component?\u003c/li\u003e\n\u003cli\u003e✅ Does it change over time?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo it's time to add state! There's some starter code in the \u003ccode\u003eToggle.js\u003c/code\u003e file. If you're feeling good about what you learned in the last lesson, give it a shot now! We'll walk through the steps below.\u003c/p\u003e\n\u003cp\u003e...\u003c/p\u003e\n\u003cp\u003e...\u003c/p\u003e\n\u003cp\u003e...\u003c/p\u003e\n\u003cp\u003e...\u003c/p\u003e\n\u003cp\u003eOk, hope you were able to get that going! Here's our process for adding state to build out this feature.\u003c/p\u003e\n\u003ch4\u003e1. Import the \u003ccode\u003euseState\u003c/code\u003e hook\u003c/h4\u003e\n\u003cp\u003eAny time we need state in a component, we need to use the \u003ccode\u003euseState\u003c/code\u003e hook from React. We can import it like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\"; \u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e2. Set up the initial state\u003c/h4\u003e\n\u003cp\u003eTo create a state variable in our component, we need to call \u003ccode\u003euseState\u003c/code\u003e and provide an initial value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Toggle() {\u003cbr\u003e  const [isOn, setIsOn] = useState(false);\u003cbr\u003e  // ... the rest of Toggle component\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhenever you're using a React hook, it \u003cstrong\u003emust\u003c/strong\u003e be within a React component. We're setting the initial state here as \u003ccode\u003efalse\u003c/code\u003e, because the button should be \"OFF\" when the component first renders.\u003c/p\u003e\n\u003ch4\u003e3. Use the state variable in the component\u003c/h4\u003e\n\u003cp\u003eNow that we have this new variable, it's time to use it! We can use the \u003ccode\u003eisOn\u003c/code\u003e variable to determine what text to display in the button:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;button\u0026gt;{isOn ? \"ON\" : \"OFF\"}\u0026lt;/button\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we're doing some \u003ca href=\"https://reactjs.org/docs/conditional-rendering.html\"\u003econditional rendering\u003c/a\u003e to dynamically determine the button's text \u003cem\u003ebased on our state variable\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eYou should now be able to change the initial state in the \u003ccode\u003euseState\u003c/code\u003e function and see if your button's text displays what you expect. Setting an initial state of \u003ccode\u003etrue\u003c/code\u003e should display \"ON\", and \u003ccode\u003efalse\u003c/code\u003e should display \"OFF\".\u003c/p\u003e\n\u003ch4\u003e4. Call the setter function to update state\u003c/h4\u003e\n\u003cp\u003eAny time we want to \u003cem\u003eupdate\u003c/em\u003e state, we need to use the \u003cem\u003esetter function\u003c/em\u003e returned by calling \u003ccode\u003euseState\u003c/code\u003e. We also need to determine what triggers that update. In our case it's the button being clicked.\u003c/p\u003e\n\u003cp\u003eLet's start by adding an \u003ccode\u003eonClick\u003c/code\u003e handler to the button:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;button onClick={handleClick}\u0026gt;{isOn ? \"ON\" : \"OFF\"}\u0026lt;/button\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, let's set up the \u003ccode\u003ehandleClick\u003c/code\u003e callback function, and update state. Here, we must call the \u003cem\u003esetter function\u003c/em\u003e to update our state variable. Trying to update the variable won't have any effect (even if we changed our variable declaration to \u003ccode\u003elet\u003c/code\u003e instead of \u003ccode\u003econst\u003c/code\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet [isOn, setIsOn] = useState(false);\u003cbr\u003efunction handleClick() {\u003cbr\u003e  // updating state directly is a no-no!\u003cbr\u003e  isOn = !isOn;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo the way we should update state looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction handleClick() {\u003cbr\u003e  setIsOn((isOn) =\u0026gt; !isOn);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll together, here's our updated component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Toggle() {\u003cbr\u003e  const [isOn, setIsOn] = useState(false);\u003cbr\u003e\u003cbr\u003e  function handleClick() {\u003cbr\u003e    setIsOn((isOn) =\u0026gt; !isOn);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button onClick={handleClick}\u0026gt;{isOn ? \"ON\" : \"OFF\"}\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAdding More Features\u003c/h3\u003e\n\u003cp\u003eWith this state variable in place, let's add another feature to our button. When the button is ON, let's make the background red, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;button style={{ background: \"red\" }}\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen it's OFF, it should have a white background.\u003c/p\u003e\n\u003cp\u003eLet's go through those same questions to determine if we need to add state for this feature.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cblockquote\u003eIs it passed in from a parent via props? If so, it probably isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003eCan you compute it based on any other state or props in your component? If so, it isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003eDoes it remain unchanged over time? If so, it probably isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn this case, we \u003cstrong\u003ecan\u003c/strong\u003e compute it based on other state in our component, so we don't need to add any \u003cem\u003enew\u003c/em\u003e state for this feature.\u003c/p\u003e\n\u003cp\u003eWe can use that same \u003ccode\u003eisOn\u003c/code\u003e state variable, along with some conditional rendering, to get the button to display the correct border color:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Toggle() {\u003cbr\u003e  const [isOn, setIsOn] = useState(false);\u003cbr\u003e\u003cbr\u003e  function handleClick() {\u003cbr\u003e    setIsOn((isOn) =\u0026gt; !isOn);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  const color = isOn ? \"red\" : \"white\";\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;button style={{ background: color }} onClick={handleClick}\u0026gt;\u003cbr\u003e      {isOn ? \"ON\" : \"OFF\"}\u003cbr\u003e    \u0026lt;/button\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThinking like a React developer involves making a lot of decisions about how to structure your components, particularly when it comes to \u003cstrong\u003eprops\u003c/strong\u003e and \u003cstrong\u003estate\u003c/strong\u003e. Now that you've seen the process and some common patterns for working with state, it's up to you to apply these decisions to your own components moving forward.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-state.html\"\u003eThe useState hook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\"\u003eProps vs. State\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state\"\u003eThinking in React\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g6a8703b3d80a2904adf7ee9e4974c4f2"},{"id":199042,"title":"React State and Arrays","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state-arrays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-arrays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-arrays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eWork with arrays in state\u003c/li\u003e \u003cli\u003eSet up a component with multiple state variables\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eWorking With Arrays\u003c/h2\u003e  \u003ch3\u003eAdding Elements To Arrays In State\u003c/h3\u003e  \u003cp\u003eWhen we need to represent a list of data in our UI, it's often a good idea to have the data for that list stored in an array! To give an example, let's build out a component that does the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eShows a button to generate a new spicy food\u003c/li\u003e \u003cli\u003eWhen the button is clicked, adds the newly generated food to a list\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe starter code for this component is in \u003ccode\u003eSpicyFoodList.js\u003c/code\u003e. Before we walk through the solution, see if you can get this working by:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eusing a \u003cstrong\u003estate variable\u003c/strong\u003e to hold an \u003cstrong\u003earray\u003c/strong\u003e of spicy foods;\u003c/li\u003e \u003cli\u003eusing that array to display each spicy food as a \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e; and\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eadding a new spicy food to the array\u003c/strong\u003e when the button is clicked.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eKeep in mind, when you're updating state, you should never \u003cem\u003emutate\u003c/em\u003e the array — instead, find a way to make a \u003cem\u003ecopy\u003c/em\u003e of the array with the new spicy food in it (\u003cstrong\u003ehint\u003c/strong\u003e: the spread operator is your friend here).\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eFirst, let's update our component to return some JSX elements based on this array in state. We can use \u003ccode\u003e.map\u003c/code\u003e on our array to generate an array of \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e elements from our array of foods, and display them in the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foodList = foods.map((food) =\u0026gt; (\u003cbr\u003e  \u0026lt;li key={food.id}\u0026gt;\u003cbr\u003e    {food.name} | Heat: {food.heatLevel} | Cuisine: {food.cuisine}\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e));\u003cbr\u003e\u003cbr\u003ereturn (\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;button onClick={handleAddFood}\u0026gt;Add New Food\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;ul\u0026gt;{foodList}\u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that our foods are displaying, time for the moment of truth: can we update state and get new foods to display dynamically?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleAddFood() {\u003cbr\u003e  const newFood = getNewSpicyFood();\u003cbr\u003e  const newFoodArray = [...foods, newFood];\u003cbr\u003e  setFoods(newFoodArray);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis step is crucial, so let's break it down!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst newFoodArray = [...foods, newFood]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we're using the spread operator (\u003ccode\u003e...\u003c/code\u003e) to make a \u003cem\u003ecopy\u003c/em\u003e of our \u003ccode\u003efoods\u003c/code\u003e array, and insert it into a \u003cem\u003enew\u003c/em\u003e array. We're also adding the newly generated food returned by the \u003ccode\u003egetNewSpicyFood\u003c/code\u003e function at the end of the array.\u003c/p\u003e  \u003cp\u003eWhenever we are updating state, it's important \u003cstrong\u003enot to mutate objects and arrays\u003c/strong\u003e, and instead, to create \u003cstrong\u003ecopies\u003c/strong\u003e of them.\u003c/p\u003e  \u003cp\u003eReact will \u003cem\u003eonly\u003c/em\u003e re-render our component when we set state with a \u003cem\u003enew\u003c/em\u003e value; so we need to create a new \u003cstrong\u003ecopy\u003c/strong\u003e of our original array to pass to the setter function, rather than mutating the original array directly and passing a reference to the original array.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eMake sure to never mutate state directly!\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eAfter setting state, our component should automatically re-render with the new list of foods.\u003c/p\u003e  \u003ch3\u003eRemoving Elements From Arrays In State\u003c/h3\u003e  \u003cp\u003eLet's add another feature. When a user clicks on a food, that food should be \u003cem\u003eremoved\u003c/em\u003e from the list.\u003c/p\u003e  \u003cp\u003eFirst, we'll need to add a click handler to the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e elements, and pass in the id of the food we're trying to remove:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foodList = foods.map((food) =\u0026gt; (\u003cbr\u003e  \u0026lt;li key={food.id} onClick={() =\u0026gt; handleLiClick(food.id)}\u0026gt;\u003cbr\u003e    {food.name} | Heat: {food.heatLevel} | Cuisine: {food.cuisine}\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e)); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, in the \u003ccode\u003ehandleLiClick\u003c/code\u003e function, we need to figure out a way to update our array in state so it no longer includes the food.\u003c/p\u003e  \u003cp\u003eThere are a few approaches you could take here, so try to find a solution on your own before peeking at the answer! Remember, we want to find a way to remove the food \u003cem\u003ewithout mutating state\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eOne common approach to this problem of creating a new array that doesn't include a specific element is using the \u003ccode\u003e.filter\u003c/code\u003e method. Here's how we can do it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleLiClick(id) {\u003cbr\u003e  const newFoodArray = foods.filter((food) =\u0026gt; food.id !== id);\u003cbr\u003e  setFoods(newFoodArray);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCalling \u003ccode\u003e.filter\u003c/code\u003e will return a \u003cem\u003enew array\u003c/em\u003e based on which elements match our criteria in the callback function. So if we write our callback function in \u003ccode\u003e.filter\u003c/code\u003e to look for all foods \u003cem\u003eexcept\u003c/em\u003e the number we're trying to remove, we'll get back a new, shortened list of foods:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[1, 2, 3].filter((number) =\u0026gt; number !== 3);\u003cbr\u003e// =\u0026gt; [1,2] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSetting state with this updated list of foods will re-render our component, causing the food to be removed from the list.\u003c/p\u003e  \u003ch3\u003eUpdating Elements in Arrays in State\u003c/h3\u003e  \u003cp\u003eHere's a tough one! We've seen how to add and remove elements from arrays, but what about updating them?\u003c/p\u003e  \u003cp\u003eLet's update our click feature so that when a user clicks on a food, that food's heat level is incremented by 1.\u003c/p\u003e  \u003cp\u003eIn the \u003ccode\u003ehandleLiClick\u003c/code\u003e function, we need to figure out a way to update our array in state and increment the heat level \u003cem\u003eonly\u003c/em\u003e for the food that was clicked.\u003c/p\u003e  \u003cp\u003eOnce again, there are a few approaches you could take here, so try to find a solution on your own before peeking at the answer! Remember, we want to find a way to update the heat level \u003cem\u003ewithout mutating state\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eOne approach we can take to \u003cem\u003eupdating\u003c/em\u003e items in arrays without mutating state involves using the \u003ccode\u003e.map\u003c/code\u003e method. Calling \u003ccode\u003e.map\u003c/code\u003e will return a new array with the same length as our original array (which is what we want), with some transformations applied to the elements in the array.\u003c/p\u003e  \u003cp\u003eHere's an example of using \u003ccode\u003e.map\u003c/code\u003e to update \u003cem\u003eone element\u003c/em\u003e of an array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[1, 2, 3].map((number) =\u0026gt; {\u003cbr\u003e  if (number === 3) {\u003cbr\u003e    // if the number is the one we're looking for, increment it\u003cbr\u003e    return number + 100;\u003cbr\u003e  } else {\u003cbr\u003e    // otherwise, return the original number\u003cbr\u003e    return number;\u003cbr\u003e  }\u003cbr\u003e});\u003cbr\u003e// =\u0026gt; [1,2,103] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo to use that technique to solve our problem, here's how our click event handler would look:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleLiClick(id) {\u003cbr\u003e  const newFoodArray = foods.map((food) =\u0026gt; {\u003cbr\u003e    if (food.id === id) {\u003cbr\u003e      return {\u003cbr\u003e        ...food,\u003cbr\u003e        heatLevel: food.heatLevel + 1,\u003cbr\u003e      };\u003cbr\u003e    } else {\u003cbr\u003e      return food;\u003cbr\u003e    }\u003cbr\u003e  });\u003cbr\u003e  setFoods(newFoodArray);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eArray Cheat Sheet\u003c/h3\u003e  \u003cp\u003eHere's a quick reference of some common techniques for manipulating arrays in state. Keep this in mind, because working with arrays will be important as a React developer!\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eAdd\u003c/strong\u003e: use the spread operator (\u003ccode\u003e[...]\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eRemove\u003c/strong\u003e: use \u003ccode\u003e.filter\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eUpdate\u003c/strong\u003e: use \u003ccode\u003e.map\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eWorking With Multiple State Variables\u003c/h2\u003e  \u003cp\u003eSometimes, a component needs multiple state variables to represent multiple UI states. To give an example, let's add a feature to our \u003ccode\u003eSpicyFoodList\u003c/code\u003e component that lets the user filter the list to only show foods from a certain cuisine.\u003c/p\u003e  \u003cp\u003eHere's the JSX you'll need for this feature:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;select name=\"filter\"\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"All\"\u0026gt;All\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"American\"\u0026gt;American\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Sichuan\"\u0026gt;Sichuan\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Thai\"\u0026gt;Thai\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Mexican\"\u0026gt;Mexican\u0026lt;/option\u0026gt;\u003cbr\u003e\u0026lt;/select\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry building out this feature on your own, then we'll go through the solution. Think about what new \u003cem\u003estate variable\u003c/em\u003e you'll need to add, and how to use that variable to determine which foods are being displayed!\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eLet's start by talking through what new state we'll need to add. We need some way of keeping track of which option the user selected from the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e tag. We'll also need to use that data to \u003cem\u003efilter\u003c/em\u003e the list of numbers and determine which foods to display.\u003c/p\u003e  \u003cp\u003eLet's set up our initial state to be a string of \"All\" to match the first \u003ccode\u003e\u0026lt;option\u0026gt;\u003c/code\u003e in our dropdown:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst [filterBy, setFilterBy] = useState(\"All\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this state variable in place, we can update the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element to set the \u003ccode\u003efilterBy\u003c/code\u003e variable when its value is changed, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleFilterChange(event) {\u003cbr\u003e  setFilterBy(event.target.value);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u0026lt;select name=\"filter\" onChange={handleFilterChange}\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"All\"\u0026gt;All\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"American\"\u0026gt;American\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Sichuan\"\u0026gt;Sichuan\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Thai\"\u0026gt;Thai\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Mexican\"\u0026gt;Mexican\u0026lt;/option\u0026gt;\u003cbr\u003e\u0026lt;/select\u0026gt;; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, let's figure out how this filter value can be used to update what numbers are displayed. We will need to use \u003cem\u003eboth\u003c/em\u003e of our state variables together to solve this problem! Here's how we can use the filter value to update which items are displayed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst [foods, setFoods] = useState(spicyFoods);\u003cbr\u003econst [filterBy, setFilterBy] = useState(\"All\");\u003cbr\u003e\u003cbr\u003econst foodsToDisplay = foods.filter((food) =\u0026gt; {\u003cbr\u003e  if (filterBy === \"All\") {\u003cbr\u003e    return true;\u003cbr\u003e  } else {\u003cbr\u003e    return food.cuisine === filterBy;\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will give us a new variable, \u003ccode\u003efoodsToDisplay\u003c/code\u003e, that will be an array of:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAll foods from \u003ccode\u003efoods\u003c/code\u003e array if \u003ccode\u003efilterBy\u003c/code\u003e is set to \"All\"\u003c/li\u003e \u003cli\u003eOnly foods that match the cuisine in \u003ccode\u003efilterBy\u003c/code\u003e if \u003ccode\u003efilterBy\u003c/code\u003e is not set to \"All\"\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eNow, we just need to use \u003ccode\u003efoodsToDisplay\u003c/code\u003e instead of \u003ccode\u003efoods\u003c/code\u003e when we're generating the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e elements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foodList = foodsToDisplay.map((food) =\u0026gt; (\u003cbr\u003e  \u0026lt;li key={food.id} onClick={() =\u0026gt; handleLiClick(food.id)}\u0026gt;\u003cbr\u003e    {food.name} | Heat: {food.heatLevel} | Cuisine: {food.cuisine}\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e)); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHaving both of these variables in state and knowing how to use them in conjunction with each other give us a lot of power in React! All we need to worry about is using our programming tools — working with \u003cem\u003edata\u003c/em\u003e; manipulating \u003cem\u003earrays\u003c/em\u003e — and React can take care of all the hard work of updating the DOM correctly.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWhen working with arrays in state, it's important to find ways to set state without mutating the underlying arrays. That means using array methods like \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003efilter\u003c/code\u003e, or the spread operator, to create copies of arrays before setting state.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.robinwieruch.de/react-state-array-add-update-remove\"\u003eReact State Arrays\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gb408e0758e1da7b4c25d3e0b987cac05"},{"id":199043,"title":"React State Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state-and-events-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-and-events-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-and-events-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn the labs for this section, we'll be working on a grocery list app. Some of this app is already built out using static versions of the components. We'll be using \u003cstrong\u003estate\u003c/strong\u003e and \u003cstrong\u003eevents\u003c/strong\u003e to make our app dynamic.\u003c/p\u003e  \u003cp\u003eThe components you have to work with are in the \u003ccode\u003esrc/components\u003c/code\u003e folder. Start by examining these components and draw out your component hierarchy to see how data can be passed from one component to another.\u003c/p\u003e  \u003cp\u003eIn this lab, you'll update state and get more practice with the \u003ccode\u003euseState\u003c/code\u003e hook.\u003c/p\u003e  \u003cp\u003eIt's recommended that you run \u003ccode\u003enpm start\u003c/code\u003e and work on this in the browser \u003cstrong\u003ebefore\u003c/strong\u003e running tests. Try to get your app to match the demo! Once you've built out the components below, run \u003ccode\u003enpm test\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e to see if your code passes the tests.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003ch3\u003eDark Mode Toggle\u003c/h3\u003e  \u003cp\u003eIn the \u003ccode\u003eApp\u003c/code\u003e component, there is a button for toggling between dark mode and light mode. Using the \u003ccode\u003euseState\u003c/code\u003e hook, create a state variable in the \u003ccode\u003eApp\u003c/code\u003e component. Then, use that variable to determine if our app should be in dark mode or light mode.\u003c/p\u003e  \u003cp\u003eYou will also need to add an event handler to the dark mode button, and update state when the button is clicked.\u003c/p\u003e  \u003cp\u003eThe actual functionality of changing our app's theme is handled in CSS, so all you have to do is update the \u003ccode\u003eclassName\u003c/code\u003e of this div based on your state variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div className=\"App dark\"\u0026gt;\u003cbr\u003e{/* for dark mode */}\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;div className=\"App light\"\u0026gt;\u003cbr\u003e{/* for light mode */}\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eAdd to Cart\u003c/h3\u003e  \u003cp\u003eIn the \u003ccode\u003eItem\u003c/code\u003e component, when the user clicks the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element, the item should be added to their virtual cart. The way we'll show the user that the item is in the cart is by changing the className on the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e element:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;li className=\"in-cart\"\u0026gt;\u003cbr\u003e{/* the item is in the cart */}\u003cbr\u003e\u0026lt;/li\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;li className=\"\"\u0026gt;\u003cbr\u003e{/* the item is NOT in the cart */}\u003cbr\u003e\u0026lt;/li\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNaturally, you'll also need to add state to the \u003ccode\u003eItem\u003c/code\u003e component to solve this deliverable!\u003c/p\u003e  \u003ch3\u003eFilter\u003c/h3\u003e  \u003cp\u003eIn the \u003ccode\u003eShoppingList\u003c/code\u003e component, there is a \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element that will allow us to \u003cstrong\u003efilter\u003c/strong\u003e the list of items by category.\u003c/p\u003e  \u003cp\u003eUse the \u003ccode\u003euseState\u003c/code\u003e hook to create a state variable called \u003ccode\u003eselectedCategory\u003c/code\u003e for keeping track of the selected value from this \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element. When the value of the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element is \u003cstrong\u003echanged\u003c/strong\u003e, update state.\u003c/p\u003e  \u003cp\u003eYou should also use the \u003ccode\u003eselectedCategory\u003c/code\u003e variable to determine which items to display in the shopping list. You'll need some way of \u003cstrong\u003efilter\u003c/strong\u003eing the array of items based on the \u003ccode\u003eselectedCategory\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-state.html\"\u003eReact Docs on \u003ccode\u003euseState\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gb1f806bb9430476cb9cc495f59446aa3"},{"id":199044,"title":"React Information Flow","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-information-flow-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-information-flow-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-information-flow-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll explore how to pass callback functions as props in order to change state in a parent component.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003ePractice enforcing React up-down information flow\u003c/li\u003e \u003cli\u003ePractice changing state in a parent from a child component\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eHow Does Information Flow Between Components?\u003c/h2\u003e  \u003cp\u003eWe already know how to use props to pass information \u003cem\u003edown\u003c/em\u003e from parent to child. But how would we do the reverse? How might we have a \u003cstrong\u003echild\u003c/strong\u003e component send data \u003cem\u003eup\u003c/em\u003e to its \u003cstrong\u003eparent\u003c/strong\u003e component? In order to propagate information in the opposite direction, we can send a callback functions \u003cem\u003eas a prop\u003c/em\u003e from the parent component to its child.\u003c/p\u003e  \u003cp\u003eThis allows the callback to be \u003cem\u003eowned\u003c/em\u003e by a different component than the one invoking it. Once invoked, the callback can send data to or change state in the parent component that \u003cem\u003eowns\u003c/em\u003e it, instead of the child component that \u003cem\u003einvoked\u003c/em\u003e it.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eAssuming you've pulled down the starter code and ran \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm start\u003c/code\u003e, you should see a few rectangles in your browser. The large outer rectangle will be a random color every time you refresh the page, but the two smaller rectangles inside will always have a white background. Take a moment to familiarize yourself with the code base. We have a simple application that renders a single \u003ccode\u003eParent\u003c/code\u003e component and two \u003ccode\u003eChild\u003c/code\u003e components. The component hierarchy is as followed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp\u003cbr\u003e└───Parent\u003cbr\u003e    ├───Child\u003cbr\u003e    └───Child \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDeliverables Part 1\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWhen either \u003ccode\u003eChild\u003c/code\u003e component is clicked, the \u003ccode\u003eParent\u003c/code\u003e component should change color.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003ccode\u003esrc/randomColorGenerator.js\u003c/code\u003e has a helper function \u003ccode\u003egetRandomColor()\u003c/code\u003e implemented for you that generates a random color.\u003c/p\u003e  \u003ch3\u003eChanging the color of Parent\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eParent\u003c/code\u003e component has a state called \u003ccode\u003ecolor\u003c/code\u003e that is initially set to a random color. If we want to set the state, it would be easy to do so in a function like shown below:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Parent() {\u003cbr\u003e  const randomColor = getRandomColor();\u003cbr\u003e  const [color, setColor] = useState(randomColor);\u003cbr\u003e\u003cbr\u003e  function handleChangeColor() {\u003cbr\u003e    const newRandomColor = getRandomColor();\u003cbr\u003e    setColor(newRandomColor);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div className=\"parent\" style={{ backgroundColor: color }}\u0026gt;\u003cbr\u003e      \u0026lt;Child /\u0026gt;\u003cbr\u003e      \u0026lt;Child /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut we are going to want to run this \u003ccode\u003ehandleChangeColor()\u003c/code\u003e function when either \u003ccode\u003eChild\u003c/code\u003e component is clicked. So we are going to pass this state changing function \u003cem\u003eas a prop\u003c/em\u003e to both \u003ccode\u003eChild\u003c/code\u003e components.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;div className=\"parent\" style={{ backgroundColor: color }}\u0026gt;\u003cbr\u003e    \u0026lt;Child onChangeColor={handleChangeColor} /\u0026gt;\u003cbr\u003e    \u0026lt;Child onChangeColor={handleChangeColor} /\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, \u003ccode\u003eChild\u003c/code\u003e will have a prop called \u003ccode\u003eonChangeColor\u003c/code\u003e that is a \u003cem\u003efunction\u003c/em\u003e. Specifically, it is the same function object as our \u003ccode\u003eParent\u003c/code\u003e's '\u003ccode\u003ehandleChangeColor\u003c/code\u003e function. Want to see for yourself? Put a \u003ccode\u003econsole.log\u003c/code\u003e inside the \u003ccode\u003eChild\u003c/code\u003e component.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Child(props) {\u003cbr\u003e  console.log(props);\u003cbr\u003e  return \u0026lt;div className=\"child\" style={{ backgroundColor: \"#FFF\" }} /\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat we want to do now is use this \u003ccode\u003eonChangeColor\u003c/code\u003e prop as a React event handler.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(props);\u003cbr\u003ereturn (\u003cbr\u003e  \u0026lt;div\u003cbr\u003e    onClick={props.onChangeColor}\u003cbr\u003e    className=\"child\"\u003cbr\u003e    style={{ backgroundColor: \"#FFF\" }}\u003cbr\u003e  /\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd ta-da! Now, if you go to the app, clicking on \u003cem\u003eeither\u003c/em\u003e of the white rectangle \u003ccode\u003eChild\u003c/code\u003e components will cause the \u003ccode\u003eParent\u003c/code\u003e component to change color! But let's add one more feature!\u003c/p\u003e  \u003ch2\u003eDeliverables Part 2\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWhen either \u003ccode\u003eChild\u003c/code\u003e component is clicked, it should change to its own background color to a random color, and the other \u003ccode\u003eChild\u003c/code\u003e component should change to \u003cem\u003ethat same\u003c/em\u003e color.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eNow, we could put some state in our \u003ccode\u003eChild\u003c/code\u003e component to keep track of its color. However, React components cannot pass data between 'sibling' components. Data can only flow up and down between parent/child. So if we update the color of one \u003ccode\u003eChild\u003c/code\u003e component, we have no way to pass that data to the \u003cem\u003eother\u003c/em\u003e \u003ccode\u003eChild\u003c/code\u003e component. The solution is to store the color of the \u003ccode\u003eChild\u003c/code\u003e in the state of the \u003ccode\u003eParent\u003c/code\u003e component. Then, we let the \u003ccode\u003eParent\u003c/code\u003e component handle the passing of that data to each of its children components.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Parent() {\u003cbr\u003e  const randomColor = getRandomColor();\u003cbr\u003e  const [color, setColor] = useState(randomColor);\u003cbr\u003e  const [childrenColor, setChildrenColor] = useState(\"#FFF\");\u003cbr\u003e\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince the data that represents the color of the two \u003ccode\u003eChild\u003c/code\u003e components lives in \u003ccode\u003eParent\u003c/code\u003e, we should pass that data down as props:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;div className=\"parent\" style={{ backgroundColor: color }}\u0026gt;\u003cbr\u003e    \u0026lt;Child color={childrenColor} onChangeColor={handleChangeColor} /\u0026gt;\u003cbr\u003e    \u0026lt;Child color={childrenColor} onChangeColor={handleChangeColor} /\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's actually use that props data in the \u003ccode\u003eChild\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Child(props) {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u003cbr\u003e      onClick={props.onChangeColor}\u003cbr\u003e      className=\"child\"\u003cbr\u003e      style={{ backgroundColor: props.color }}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLastly, we have to update the \u003ccode\u003ehandleChangeColor()\u003c/code\u003e function in \u003ccode\u003eParent\u003c/code\u003e to change not just the \u003ccode\u003ecolor\u003c/code\u003e state, but also the \u003ccode\u003echildrenColor\u003c/code\u003e. To practice sending data \u003cem\u003eback\u003c/em\u003e to the parent, let's change our \u003ccode\u003ehandleChangeColor\u003c/code\u003e to take in an argument of \u003ccode\u003enewChildColor\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleChangeColor(newChildColor) {\u003cbr\u003e  const newRandomColor = getRandomColor();\u003cbr\u003e  setColor(newRandomColor);\u003cbr\u003e  setChildrenColor(newChildColor);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that the function takes in an argument, we'll need to update the \u003ccode\u003eonClick\u003c/code\u003e of \u003ccode\u003eChild\u003c/code\u003e to be a function that invokes \u003ccode\u003ethis.props.handleColorChange\u003c/code\u003e and passes in a random color as the argument:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Child(props) {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u003cbr\u003e      onClick={() =\u0026gt; props.onChangeColor(getRandomColor())}\u003cbr\u003e      className=\"child\"\u003cbr\u003e      style={{ backgroundColor: props.color }}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWow! Check out the finished product in the browser! When either \u003ccode\u003eChild\u003c/code\u003e component is clicked, the \u003ccode\u003eParent\u003c/code\u003e changes to a random color, but also, both \u003ccode\u003eChild\u003c/code\u003e components change to a different random color.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eFor information to propagate \u003cstrong\u003edown\u003c/strong\u003e the component tree, parents pass \u003ccode\u003eprops\u003c/code\u003e to their children\u003c/li\u003e \u003cli\u003eFor information to propagate \u003cstrong\u003eup\u003c/strong\u003e the component tree, we typically invoke callbacks that were passed from parents to children as \u003ccode\u003eprops\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eComponents of the same level (sibling components) cannot communicate directly! We can only communicate up and down the component tree. So if multiple components need to share the same information, that state should live in the parent (or a more general ancestor) component.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/lifting-state-up.html\"\u003eLifting State Up\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g22831b1961a40f552870d2259e3a0b9e"},{"id":199045,"title":"React Information Flow Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-information-flow-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-information-flow-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-information-flow-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eLast time we worked on the Shopping List app, we ended up with the following component hierarchy:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp\u003cbr\u003e└── ShoppingList\u003cbr\u003e    ├── Item\u003cbr\u003e    ├── Item\u003cbr\u003e    └── Item \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, it would probably make more sense to break the app down more like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/learn-co-curriculum/react-hooks-information-flow-lab/master/images/demo.png\" alt=\"demo\"\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp\u003cbr\u003e├── Header\u003cbr\u003e└── ShoppingList\u003cbr\u003e    ├── Filter\u003cbr\u003e    ├── Item\u003cbr\u003e    ├── Item\u003cbr\u003e    └── Item \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYour goal is to refactor the code from the previous shopping list lab to match the component structure in the image above. As you work on refactoring the code, keep in mind:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWhich components should hold \u003cstrong\u003estate\u003c/strong\u003e? Which components need access to that state?\u003c/li\u003e \u003cli\u003eHow can we update state in one component from a child component?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAlso, remember what we learned in the previous lesson:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eFor information to propagate \u003cem\u003edown\u003c/em\u003e the component tree, parents pass \u003ccode\u003eprops\u003c/code\u003e to their children\u003c/li\u003e \u003cli\u003eFor information to propagate \u003cem\u003eup\u003c/em\u003e the component tree, we typically invoke callbacks that were passed from parents to children as \u003ccode\u003eprops\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eComponents of the same level (sibling components) cannot communicate directly! We can only communicate up and down the component tree. So if multiple components need to share the same information, that state should live in the parent (or a more general ancestor) component.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003ch3\u003eHeader\u003c/h3\u003e  \u003cp\u003eCreate a \u003ccode\u003eHeader\u003c/code\u003e component by refactoring the \u003ccode\u003e\u0026lt;header\u0026gt;\u003c/code\u003e element out of the \u003ccode\u003eApp\u003c/code\u003e component. Clicking on the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e inside of the \u003ccode\u003eHeader\u003c/code\u003e component should still toggle dark mode on and off.\u003c/p\u003e  \u003cp\u003eYou will need to pass a \u003cem\u003ecallback function\u003c/em\u003e as a prop called \u003ccode\u003eonDarkModeClick\u003c/code\u003e to the \u003ccode\u003eHeader\u003c/code\u003e component in order for the test to pass.\u003c/p\u003e  \u003ch3\u003eFilter\u003c/h3\u003e  \u003cp\u003eCreate a \u003ccode\u003eFilter\u003c/code\u003e component by refactoring the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element out of the \u003ccode\u003eShoppingList\u003c/code\u003e component. Changing the selection in the dropdown should still change which items are displayed in the shopping list.\u003c/p\u003e  \u003cp\u003eYou will need to pass a \u003cem\u003ecallback function\u003c/em\u003e as a prop called \u003ccode\u003eonCategoryChange\u003c/code\u003e to the \u003ccode\u003eFilter\u003c/code\u003e component in order for the test to pass.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-state.html\"\u003eReact Docs on \u003ccode\u003euseState\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gd42b9d5c8d71d0cadbd6dce5384efd25"},{"id":199046,"title":"React Controlled Inputs","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll discuss how to set up controlled inputs in React.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eExplain how React uses \u003ccode\u003evalue\u003c/code\u003e on, e.g., \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDescribe strategies for using controlled components\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCode Along\u003c/h2\u003e  \u003cp\u003eIf you want to code along there is starter code in the \u003ccode\u003esrc\u003c/code\u003e folder. Make sure to run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to see the code in the browser.\u003c/p\u003e  \u003ch2\u003eControlling Form Values From State\u003c/h2\u003e  \u003cp\u003eForms in React are similar to their regular HTML counterparts. The JSX we write is almost identical. The way we store and handle form data, however, is entirely new. In React, it is often a good idea to set up \u003cem\u003econtrolled\u003c/em\u003e forms. A controlled form is \u003cstrong\u003ea form that derives its input values from state\u003c/strong\u003e. Consider the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" value={firstName} /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" value={lastName} /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith the setup above, the two text \u003ccode\u003einput\u003c/code\u003e elements will display the corresponding state values.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/react-forms/Image_20_Flowchart.png\" alt=\"Diagram of the form component's state populating a form\"\u003e\u003c/p\u003e  \u003cp\u003eThis code is not quite complete though — as it is now, there is no way to \u003cem\u003echange\u003c/em\u003e the state. The inputs in the form above will be stuck displaying whatever state is set to.\u003c/p\u003e  \u003cp\u003eTo completely control a form, we also need our form to \u003cem\u003eupdate\u003c/em\u003e state.\u003c/p\u003e  \u003ch2\u003eUpdating State via Forms\u003c/h2\u003e  \u003cp\u003eIf we can change state values, React will re-render and our \u003ccode\u003einput\u003c/code\u003es will display the new state. We know that \u003ccode\u003esetFirstName\u003c/code\u003e and \u003ccode\u003esetLastName\u003c/code\u003e are what we'll need to initiate a state change, but when would we use them?\u003c/p\u003e  \u003cp\u003eWe want to fire it \u003cstrong\u003eevery time the form changes\u003c/strong\u003e. Forms should display whatever changes a user makes, even if it is adding a single letter in an input. For this, we use an event listener, \u003ccode\u003eonChange\u003c/code\u003e, that React has set up for us:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e\u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eForm inputs in React can handle with specific events. \u003ccode\u003eonChange\u003c/code\u003e will fire every time the value of an input changes. In our example, we're passing a callback function function that accepts \u003ccode\u003eevent\u003c/code\u003e as its argument. The \u003ccode\u003eevent\u003c/code\u003e data being passed in is automatically provided by the \u003ccode\u003eonChange\u003c/code\u003e event listener. Let's write out what these functions look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleFirstNameChange(event) {\u003cbr\u003e  setFirstName(event.target.value);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction handleLastNameChange(event) {\u003cbr\u003e  setLastName(event.target.value);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eevent\u003c/code\u003e contains data about the \u003ccode\u003etarget\u003c/code\u003e, which is whatever DOM element the \u003ccode\u003eevent\u003c/code\u003e was triggered on. That \u003ccode\u003etarget\u003c/code\u003e, being an \u003ccode\u003einput\u003c/code\u003e element, has a \u003ccode\u003evalue\u003c/code\u003e attribute. This attribute is equal to whatever is currently entered into that particular \u003ccode\u003einput\u003c/code\u003e!\u003c/p\u003e  \u003cp\u003eKeep in mind, \u003cstrong\u003ethis is not the value we provided from state\u003c/strong\u003e. When we read \u003ccode\u003eevent.target.value\u003c/code\u003e, we get whatever content is present when the event fired. In the case of our first input, that would be a combination of whatever \u003ccode\u003efirstName\u003c/code\u003e is equal to \u003cem\u003eplus\u003c/em\u003e \u003cstrong\u003ethe last key stroke\u003c/strong\u003e. If you pressed 's', \u003ccode\u003eevent.target.value\u003c/code\u003e would equal \"Johns\".\u003c/p\u003e  \u003cp\u003eInside both functions is a \u003ccode\u003esetState()\u003c/code\u003e. Again, both functions are nearly identical, with one difference — \u003ccode\u003esetFirstName()\u003c/code\u003e changes the \u003ccode\u003efirstName\u003c/code\u003e, and \u003ccode\u003esetLastName()\u003c/code\u003e changes the \u003ccode\u003elastName\u003c/code\u003e. The full component would look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFirstName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setLastName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the \u003ccode\u003ehandleFirstNameChange()\u003c/code\u003e and \u003ccode\u003ehandleLastNameChange()\u003c/code\u003e functions, we're updating state based on \u003ccode\u003eevent.target.value\u003c/code\u003e. This, in turn, causes a re-render... and the cycle completes. The \u003cem\u003enew\u003c/em\u003e state values we just set are used to set the \u003ccode\u003evalue\u003c/code\u003e attributes of our two \u003ccode\u003einput\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eFrom a \u003cstrong\u003euser\u003c/strong\u003e's perspective, the form behaves exactly how we'd expect, displaying the text that is typed. From \u003cstrong\u003eReact\u003c/strong\u003e's perspective, we gain control over form values, giving us the ability to more easily manipulate (or restrict) what our \u003ccode\u003einputs\u003c/code\u003es display, and send form data to other parts of the app or out onto the internet...\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/react-forms/Image_21_FlowchartUpdate.png\" alt=\"Diagram of onChange events\"\u003e\u003c/p\u003e  \u003cp\u003eControlling forms makes it more convenient to share form values between components. Since the form values are stored in state, they are easily passed down as props or sent upward via a function supplied in props.\u003c/p\u003e  \u003ch2\u003eForm Element Types\u003c/h2\u003e  \u003cp\u003eForm elements include \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e itself. When we talk about inputs in this lesson, we broadly mean the form elements (\u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e) and not always specifically just \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo control the value of these inputs, we use a prop specific to that type of input:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eFor \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;option\u0026gt;\u003c/code\u003e, we use \u003ccode\u003evalue\u003c/code\u003e, as we have seen.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eFor a checkbox (\u003ccode\u003e\u0026lt;input type=\"checkbox\"\u0026gt;\u003c/code\u003e), we use \u003ccode\u003echecked\u003c/code\u003e:\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [newsetter, setNewsetter] = useState(false);\u003cbr\u003e\u003cbr\u003e  function handleNewsletterChange(event) {\u003cbr\u003e    // .checked, not .value!\u003cbr\u003e    setNewsetter(event.target.checked);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;label htmlFor=\"newsletter\"\u0026gt;Subscribe to our Newsletter?\u0026lt;/label\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"checkbox\"\u003cbr\u003e        id=\"newsletter\"\u003cbr\u003e        onChange={handleNewsletterChange}\u003cbr\u003e        {/* checked instead of value */}\u003cbr\u003e        checked={newsetter}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEach of these attributes can be set based on a state value. Each also has an \u003ccode\u003eonChange\u003c/code\u003e event listener, allowing us to update state when a user interacts with a form.\u003c/p\u003e  \u003ch2\u003eWhy Use Controlled Forms When We Do Not Have To\u003c/h2\u003e  \u003cp\u003eControlled forms can very useful for specific purposes — since we can set our state \u003cem\u003eelsewhere\u003c/em\u003e using this setup, its easy to populate forms from existing available data.\u003c/p\u003e  \u003cp\u003eWhen we have a controlled form, the state does not need to be stored in the same component. We could store state in a parent component, instead. To demonstrate this, we'll need to create a new component. To keep it simple, we'll call this \u003ccode\u003eParentComponent\u003c/code\u003e. \u003ccode\u003eParentComponent\u003c/code\u003e can maintain all the functions while \u003ccode\u003eForm\u003c/code\u003e just handles the display of JSX:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/ParentComponent\u003cbr\u003eimport React, { useState } from \"react\";\u003cbr\u003eimport Form from \"./Form\";\u003cbr\u003e\u003cbr\u003efunction ParentComponent() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFirstName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setLastName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;Form\u003cbr\u003e      firstName={firstName}\u003cbr\u003e      lastName={lastName}\u003cbr\u003e      handleFirstNameChange={handleFirstNameChange}\u003cbr\u003e      handleLastNameChange={handleLastNameChange}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default ParentComponent; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen \u003ccode\u003eForm\u003c/code\u003e can become:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/Form\u003cbr\u003eimport React from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form(props) {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        onChange={props.handleFirstNameChange}\u003cbr\u003e        value={props.firstName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        onChange={props.handleLastNameChange}\u003cbr\u003e        value={props.lastName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePreviously, our application was rendering \u003ccode\u003eForm\u003c/code\u003e directly inside \u003ccode\u003esrc/index.js\u003c/code\u003e. Now, however, we've added a component that \u003cem\u003erenders\u003c/em\u003e \u003ccode\u003eForm\u003c/code\u003e as a child. Because of this change, you'll need to update \u003ccode\u003esrc/index.js\u003c/code\u003e so that it renders \u003ccode\u003eParentComponent\u003c/code\u003e instead of \u003ccode\u003eForm\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: Submission functionality is omitted here for simplicity. Also, If you're following along in the example files, don't forget to update \u003ccode\u003eindex.js\u003c/code\u003e to point to \u003ccode\u003eParentComponent\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWith \u003ccode\u003eParentComponent\u003c/code\u003e, we've moved all the form logic up one level.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/react-forms/Image_22_FlowchartReactProps.png\" alt=\"Diagram of a controlled component using props\"\u003e\u003c/p\u003e  \u003cp\u003eBeing able to store controlled form data in other components opens some interesting doors for us. We could, for instance, create another component, a sibling of \u003ccode\u003eForm\u003c/code\u003e, that live displays our form data:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/DisplayData\u003cbr\u003eimport React from \"react\";\u003cbr\u003e\u003cbr\u003efunction DisplayData(props) {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;{props.firstName}\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;{props.lastName}\u0026lt;/h1\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default DisplayData; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...and adding it alongside \u003ccode\u003eForm\u003c/code\u003e (also wrapping both in a \u003ccode\u003ediv\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/ParentComponent\u003cbr\u003eimport React, { useState } from 'react';\u003cbr\u003eimport Form from './Form'\u003cbr\u003eimport DisplayData from './DisplayData'\u003cbr\u003e\u003cbr\u003efunction ParentComponent() {\u003cbr\u003e  // ...\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;Form\u003cbr\u003e        firstName={firstName}\u003cbr\u003e        lastName={lastName}\u003cbr\u003e        handleFirstNameChange={handleFirstNameChange}\u003cbr\u003e        handleLastNameChange={handleLastNameChange}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;DisplayData firstName={firstName} lastName={lastName} /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  )\u003cbr\u003e} ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we have a component that reads from the same state we're changing with the form.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/react-forms/Image_23_FlowchartControlled.png\" alt=\"Diagram of controlled components using props\"\u003e\u003c/p\u003e  \u003cp\u003eThis can be a very useful way to capture user input and utilize it throughout your application, even if a server is not involved.\u003c/p\u003e  \u003cp\u003eThe opposite can also be true. Imagine a user profile page with an 'Edit' button that opens a form for updating user info. When a user clicks that 'Edit' button, they expect to see a form with their user data pre-populated. This way, they can easily make small changes without rewriting all their profile info.\u003c/p\u003e  \u003cp\u003eJust like we did with \u003ccode\u003eParentComponent\u003c/code\u003e, this could be achieved by populating a form with data from props! After all, if we have a React app that is displaying user information, that information is stored \u003cem\u003esomewhere\u003c/em\u003e on the app.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eUsing a controlled component is the preferred way to do things in React — it allows us to keep \u003cem\u003eall\u003c/em\u003e component state in the React state, instead of relying on the DOM to retrieve the element's value through its internal state.\u003c/p\u003e  \u003cp\u003eUsing a controlled form, whenever our state changes, the component re-renders, rendering the input with the new updated value. If we don't update the state, our input will not update when the user types. In other words, we need to update our input's state \u003cem\u003eprogrammatically\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIt might seem a little counterintuitive that we need to be so verbose, but this actually opens the door to additional functionality. For example, let's say we want to write an input that only takes the numbers \u003ccode\u003e0\u003c/code\u003e through \u003ccode\u003e5\u003c/code\u003e. We can now validate the data the user enters \u003cem\u003ebefore\u003c/em\u003e we set it on the state, allowing us to block any invalid values. If the input is invalid, we simply avoid updating the state, preventing the input from updating. We could optionally set another state property (for example, \u003ccode\u003eisInvalidNumber\u003c/code\u003e). Using that state property, we can show an error in our component to indicate that the user tried to enter an invalid value.\u003c/p\u003e  \u003cp\u003eIf we tried to do this using an uncontrolled component, the input would be entered regardless, since we don't have control over the internal state of the input. In our \u003ccode\u003eonChange\u003c/code\u003e handler, we'd have to roll the input back to its previous value, which is pretty tedious!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/forms.html\"\u003eReact Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g71e8f6e14b80e1447eb1dab4743c4d08"},{"id":199047,"title":"React Forms Submit","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-forms-submit\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-submit\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-submit/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll discuss how to handle forms submitting in React.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eHandle a form's submit event in React\u003c/li\u003e \u003cli\u003eUse controlled inputs to validate values\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCode Along\u003c/h2\u003e  \u003cp\u003eIf you want to code along there is starter code in the \u003ccode\u003esrc\u003c/code\u003e folder. Make sure to run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to see the code in the browser.\u003c/p\u003e  \u003ch2\u003eSubmitting a Controlled Form\u003c/h2\u003e  \u003cp\u003eNow that we've learned how to control a form with \u003ccode\u003estate\u003c/code\u003e, we want to set up a way to submit our form. For this, we use a second event, \u003ccode\u003eonSubmit\u003c/code\u003e, added to the \u003ccode\u003eform\u003c/code\u003e in JSX:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e    \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e    \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e    \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e  \u0026lt;/form\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, whenever the form is submitted (by pressing \u003ccode\u003eEnter\u003c/code\u003e/\u003ccode\u003eReturn\u003c/code\u003e, or clicking a Submit button), a callback function will be called, \u003ccode\u003ehandleSubmit\u003c/code\u003e. We don't have a function \u003ccode\u003ehandleSubmit\u003c/code\u003e yet, so let's write one out:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleSubmit(event) {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  const formData = {\u003cbr\u003e    firstName: firstName,\u003cbr\u003e    lastName: lastName,\u003cbr\u003e  };\u003cbr\u003e  props.sendFormDataSomewhere(formData);\u003cbr\u003e  setFirstName(\"\");\u003cbr\u003e  setLastName(\"\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's look at each line of code in this function:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e: The default behavior of a form is to \u003ca href=\"https://www.w3schools.com/html/html_forms.asp\"\u003etry and submit the form data based on a defined action\u003c/a\u003e, causing a redirect. We didn't (and don't need to) define an action. The result, however, is that the form redirects to the current page, causing a refresh. By using \u003ccode\u003eevent.preventDefault()\u003c/code\u003e, we stop this behavior from happening.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003econst formData = { firstName: firstName, lastName: lastName }\u003c/code\u003e: Here, we are putting together the current form data into an object using the values stored in state.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eprops.sendFormDataSomewhere(formData)\u003c/code\u003e: A form, when submitted should send the form data somewhere. As mentioned a moment ago, the traditional HTML way was to send data to a server or another page using the \u003ccode\u003eaction\u003c/code\u003e attribute. In React, we handle requests with asynchronous JavaScript. We won't go into the details of how this works just yet, but we can think of \u003ccode\u003esendFormDataSomewhere()\u003c/code\u003e as the code that handles sending our data off. This function might be defined in the same form component, or can be passed down as a prop.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003esetFirstName(\"\")\u003c/code\u003e: if we want to clear the input fields, all we need to do is set state! In a traditional JavaScript form, you might do something like \u003ccode\u003eevent.target.reset()\u003c/code\u003e to clear out the form fields. Here, we need to ensure that our component state matches what the user sees in the form. By setting state, we're keeping our React component state in sync with what the user sees.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou can contrast this to handling an \u003cem\u003euncontrolled\u003c/em\u003e form being submitted, in which case you would need to access the input fields from the DOM instead of accessing the values from state:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleSubmit(event) {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  // in an uncontrolled form, you need to access the input fields from the DOM\u003cbr\u003e  const formData = {\u003cbr\u003e    firstName: e.target[0].value,\u003cbr\u003e    lastName: e.target[1].value,\u003cbr\u003e  };\u003cbr\u003e  props.sendFormDataSomewhere(formData);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe don't have a server to send our data to, but to demonstrate submission, we could modify our \u003ccode\u003eForm\u003c/code\u003e component to list out submissions, storing them in state:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e  const [submittedData, setSubmittedData] = useState([]);\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFirstName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setLastName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleSubmit(event) {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    const formData = { firstName: firstName, lastName: lastName };\u003cbr\u003e    const dataArray = [...submittedData, formData];\u003cbr\u003e    setSubmittedData(dataArray);\u003cbr\u003e    setFirstName(\"\");\u003cbr\u003e    setLastName(\"\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  const listOfSubmissions = submittedData.map((data, index) =\u0026gt; {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div key={index}\u0026gt;\u003cbr\u003e        {data.firstName} {data.lastName}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e        \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;/form\u0026gt;\u003cbr\u003e      \u0026lt;h3\u0026gt;Submissions\u0026lt;/h3\u0026gt;\u003cbr\u003e      {listOfSubmissions}\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe above component will render previous form submissions on the page! We have a fully functioning controlled form.\u003c/p\u003e  \u003ch2\u003eValidating Inputs\u003c/h2\u003e  \u003cp\u003eOne benefit we get from having our form's input values held in state is an easy way to perform validations when the form is submitted. For example, let's say we want to require that a user enters some data into our form fields before they can submit the form successfully.\u003c/p\u003e  \u003cp\u003eIn our handle submit, we can add some validation logic to check if the form inputs have the required data, and hold some error messages in state:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// add state for holding error messages\u003cbr\u003econst [errors, setErrors] = useState([]);\u003cbr\u003e\u003cbr\u003efunction handleSubmit(event) {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  // first name is required\u003cbr\u003e  if (firstName) {\u003cbr\u003e    const formData = { firstName: firstName, lastName: lastName };\u003cbr\u003e    const dataArray = [...submittedData, formData];\u003cbr\u003e    setSubmittedData(dataArray);\u003cbr\u003e    setFirstName(\"\");\u003cbr\u003e    setLastName(\"\");\u003cbr\u003e    setErrors([]);\u003cbr\u003e  } else {\u003cbr\u003e    setErrors([\"First name is required!\"]);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, we can display an error message to our user in the JSX:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e    {/* conditionally render error messages */}\u003cbr\u003e    {errors.length \u0026gt; 0\u003cbr\u003e      ? errors.map((error, index) =\u0026gt; (\u003cbr\u003e          \u0026lt;p key={index} style={{ color: \"red\" }}\u0026gt;\u003cbr\u003e            {error}\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e        ))\u003cbr\u003e      : null}\u003cbr\u003e    \u0026lt;h3\u0026gt;Submissions\u0026lt;/h3\u0026gt;\u003cbr\u003e    {listOfSubmissions}\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eBy setting up our form components using \u003cstrong\u003econtrolled inputs\u003c/strong\u003e, we give React state control over the data being displayed in the DOM. As a benefit, we can also more easily access form data via state when a form is submitted, so that we can send that data to another component; or use it to make a fetch request; or perform some validation logic before the form data submitted.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/forms.html\"\u003eReact Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gb4d39200027396e94c65a46b5fae67e1"},{"id":199048,"title":"BONUS: React Forms Abstraction","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-forms-abstraction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-abstraction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-abstraction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eMake our form logic more reusable by creating a dynamic \u003ccode\u003eonChange\u003c/code\u003e event handler\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCode Along\u003c/h2\u003e  \u003cp\u003eIf you want to code along there is starter code in the \u003ccode\u003esrc\u003c/code\u003e folder. Make sure to run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to see the code in the browser.\u003c/p\u003e  \u003ch2\u003eForm State\u003c/h2\u003e  \u003cp\u003eLet's talk about the \u003ccode\u003eonChange\u003c/code\u003e event we've got set up now in initial version of our \u003ccode\u003eForm\u003c/code\u003e component. If we look at the original code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFirstName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setLastName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can imagine that adding more input fields to this form is going to get repetitive pretty fast. For every new input field, we'd need to add:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea new state variable by calling \u003ccode\u003euseState()\u003c/code\u003e to hold the value of that input\u003c/li\u003e \u003cli\u003ea new \u003ccode\u003ehandleChange\u003c/code\u003e function to update that piece of state\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAs a first refactor, let's use \u003ccode\u003euseState\u003c/code\u003e just once, and make an object representing all of our input fields:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Form() {\u003cbr\u003e  const [formData, setFormData] = useState({\u003cbr\u003e    firstName: \"John\",\u003cbr\u003e    lastName: \"Henry\",\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFormData({\u003cbr\u003e      ...formData,\u003cbr\u003e      firstName: event.target.value,\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setFormData({\u003cbr\u003e      ...formData,\u003cbr\u003e      lastName: event.target.value,\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        onChange={handleFirstNameChange}\u003cbr\u003e        value={formData.firstName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        onChange={handleLastNameChange}\u003cbr\u003e        value={formData.lastName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince our initial state is an \u003cem\u003eobject\u003c/em\u003e, we have to copy all the key/value pairs from the current version of that object into our new state — that's what this spread operator here is doing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esetFormData({\u003cbr\u003e  // formData is an object, so we need to copy all the key/value pairs\u003cbr\u003e  ...formData,\u003cbr\u003e  // we want to overwrite the lastName key with a new value\u003cbr\u003e  lastName: event.target.value,\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we just have one object in state to update whenever a the input field changes. Our change handlers are still a bit verbose, however. Since each one is changing a different value in our state, we've got them separated here. You can imagine that once we've got a more complicated form, this route may result in a very cluttered component. Instead of separate methods, we could actually condense this down into one abstracted component. Since \u003ccode\u003eevent\u003c/code\u003e is being passed in as the argument, we have access to some of the \u003ccode\u003eevent.target\u003c/code\u003e attributes that may be present.\u003c/p\u003e  \u003cp\u003eIf we give our inputs \u003ccode\u003ename\u003c/code\u003e attributes, we can access them as \u003ccode\u003eevent.target.name\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input\u003cbr\u003e  type=\"text\"\u003cbr\u003e  name=\"firstName\"\u003cbr\u003e  value={formData.firstName}\u003cbr\u003e  onChange={handleFirstNameChange}\u003cbr\u003e/\u0026gt;\u003cbr\u003e\u0026lt;input\u003cbr\u003e  type=\"text\"\u003cbr\u003e  name=\"lastName\"\u003cbr\u003e  value={formData.lastName}\u003cbr\u003e  onChange={handleLastNameChange}\u003cbr\u003e/\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we make sure the \u003ccode\u003ename\u003c/code\u003e attributes of our \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e fields match keys in our state, we can write a generic \u003ccode\u003ehandleChange\u003c/code\u003e function like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleChange(event) {\u003cbr\u003e  // name is the KEY in of the formData object we're trying to update\u003cbr\u003e  const name = event.target.name;\u003cbr\u003e  const value = event.target.value;\u003cbr\u003e\u003cbr\u003e  setFormData({\u003cbr\u003e    ...formData,\u003cbr\u003e    [name]: value,\u003cbr\u003e  });\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we connect this method to both of our \u003ccode\u003einput\u003c/code\u003es, they will both correctly update state. Why? Because for the first \u003ccode\u003einput\u003c/code\u003e, \u003ccode\u003eevent.target.name\u003c/code\u003e is set to \u003ccode\u003efirstName\u003c/code\u003e, while in the second \u003ccode\u003einput\u003c/code\u003e, it is set to \u003ccode\u003elastName\u003c/code\u003e. Each \u003ccode\u003einput\u003c/code\u003e's \u003ccode\u003ename\u003c/code\u003e attribute will change which part of state is actually updated!\u003c/p\u003e  \u003cp\u003eNow, if we want to add a new input field to the form, we just need to add two things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea new key in our \u003ccode\u003eformData\u003c/code\u003e state, and\u003c/li\u003e \u003cli\u003ea new \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e field where the \u003ccode\u003ename\u003c/code\u003e attribute matches our new key\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWe can take it one step further, and also handle \u003ccode\u003echeckbox\u003c/code\u003e inputs in our \u003ccode\u003ehandleChange\u003c/code\u003e input. Since checkboxes have a \u003ccode\u003echecked\u003c/code\u003e attribute instead of the \u003ccode\u003evalue\u003c/code\u003e attribute, here's what we'd need to check what \u003ccode\u003etype\u003c/code\u003e our input is in order to get the correct value in state.\u003c/p\u003e  \u003cp\u003eHere's what the final version of our \u003ccode\u003eForm\u003c/code\u003e component looks like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [formData, setFormData] = useState({\u003cbr\u003e    firstName: \"John\",\u003cbr\u003e    lastName: \"Henry\",\u003cbr\u003e    admin: false,\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  function handleChange(event) {\u003cbr\u003e    const name = event.target.name;\u003cbr\u003e    let value = event.target.value;\u003cbr\u003e\u003cbr\u003e    // use `checked` property of checkboxes instead of `value`\u003cbr\u003e    if (event.target.type === \"checkbox\") {\u003cbr\u003e      value = event.target.checked;\u003cbr\u003e    }\u003cbr\u003e\u003cbr\u003e    setFormData({\u003cbr\u003e      ...formData,\u003cbr\u003e      [name]: value,\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleSubmit(event) {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    console.log(formData);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        name=\"firstName\"\u003cbr\u003e        onChange={handleChange}\u003cbr\u003e        value={formData.firstName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        name=\"lastName\"\u003cbr\u003e        onChange={handleChange}\u003cbr\u003e        value={formData.lastName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"checkbox\"\u003cbr\u003e        name=\"admin\"\u003cbr\u003e        onChange={handleChange}\u003cbr\u003e        checked={formData.admin}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDepending on what input elements you're working with, you might also have to add some additional logic to handle things like number fields (using \u003ccode\u003eparseInt\u003c/code\u003e or \u003ccode\u003eparseFloat\u003c/code\u003e) and other data types to ensure your form state is always in sync with your components.\u003c/p\u003e  \u003cp\u003eIf you're using a lot of forms in your application, it's worth checking out some nice React libraries like \u003ca href=\"https://react-hook-form.com/\"\u003ereact hook form\u003c/a\u003e to handle some of this abstraction as well as adding custom client-side validation to your forms.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/forms.html\"\u003eReact Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g99974a5a880be34d15110fdbff18b9bd"},{"id":199049,"title":"React Controlled Components Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-forms-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lab, you'll write and use controlled components, and write validation for form components.\u003c/p\u003e  \u003ch2\u003eControlled Components\u003c/h2\u003e  \u003cp\u003eNow that we know how to handle form elements in React and how to set up controlled components, it's time to put that knowledge to the test. This lab is fairly extensive, but you'll use many core React concepts here that will surface again and again. Time to get some practice in!\u003c/p\u003e  \u003cp\u003eWe'll continue adding new features to the Shopping List app using controlled components. Make sure to familiarize yourself with the code before diving into the deliverables! Completing these deliverables will also require understanding of all the previous topics from this section, including initializing state, passing data and callback functions as props, and working with events.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003ch3\u003eFilter\u003c/h3\u003e  \u003cp\u003eIn the filter component, there is a new input field for searching our list. \u003cem\u003eWhen the user types in this field\u003c/em\u003e, the list of items should be filtered so that only items whose name matches the text are included.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eDetermine where you need to add state for this feature. What components need to know about the search text?\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eOnce you've determined which component should hold the state for this feature, set up your initial state, and connect that state to the input field. Remember, we're trying to make this input a \u003cem\u003econtrolled\u003c/em\u003e input -- so the input's value should always be in sync with state.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eAfter you've connected the input to state, you'll also need to find a way to \u003cem\u003eset\u003c/em\u003e state when the input \u003cem\u003echanges\u003c/em\u003e. To get the test passing, you'll need to use a prop called \u003ccode\u003eonSearchChange\u003c/code\u003e as a callback.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eFinally, after making those changes, you'll need to use that state value to determine which items are being displayed on the page, similar to how the category dropdown works.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: you may be asking yourself, why are we making this input controlled when the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element is not a controlled input? Well, the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e input should probably be controlled as well! The tests don't require it, but feel free to update the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element to be a controlled.\u003c/p\u003e  \u003ch3\u003eItemForm\u003c/h3\u003e  \u003cp\u003eThere is a new component called \u003ccode\u003eItemForm\u003c/code\u003e that will allow us to add new items to our shopping list. \u003cem\u003eWhen the form is submitted\u003c/em\u003e, a new item should be created and added to our list of items.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eMake all the input fields for this form controlled inputs, so that you can access all the form data via state. When setting the initial state for the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e tag, use an initial value of \"Produce\" (since that's the first option in the list).\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eHandle the form's \u003cem\u003esubmit\u003c/em\u003e event, and use the data that you have saved in state to create a new item object with the following properties:\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003e   const newItem = {\u003cbr\u003e     id: uuid(), // the `uuid` library can be used to generate a unique id\u003cbr\u003e     name: itemName,\u003cbr\u003e     category: itemCategory,\u003cbr\u003e   }; \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003eAdd the new item to the list by updating state. To get the test passing, you'll need to use a prop called \u003ccode\u003eonItemFormSubmit\u003c/code\u003e as a callback.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: to add a new element to an array in state, it's a good idea to use    the spread operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e   function addElement(element) {\u003cbr\u003e     setArray([...array, element]);\u003cbr\u003e   } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe spread operator allows us to copy all the old values of an array into a    new array, and then add new elements as well. When you're working with state    you never want to \u003cem\u003emutate\u003c/em\u003e state by using methods like \u003ccode\u003e.push\u003c/code\u003e -- always    use \u003cem\u003enon-destructive\u003c/em\u003e array methods when working with state!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/forms.html\"\u003eReact Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gc37e1c8e26eebb959cb7d861177070b5"},{"id":199050,"title":"State and Events Mini Project","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state-events-mini-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-events-mini-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-events-mini-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eTo build on what you've learned over the course of this section, we'll be building out a simple task list app to practice working with state and events, focusing in particular on working with arrays.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eThere is some starter code built out for all of the components you'll need. The data for the application is imported in \u003ccode\u003eApp\u003c/code\u003e, so you'll need to pass that data down to the components that need it as props.\u003c/p\u003e  \u003cp\u003eRun \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm start\u003c/code\u003e, then check out the starter code in the browser. You'll see a console message with the \u003ccode\u003eTASK\u003c/code\u003e and \u003ccode\u003eCATEGORY\u003c/code\u003e data you'll need down from \u003ccode\u003eApp\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eTaskList\u003c/h3\u003e  \u003cp\u003eFirst, we'll want to display all the tasks in our app. Display each task using the \u003ccode\u003eTask\u003c/code\u003e component. Make sure to use a \u003ccode\u003ekey\u003c/code\u003e prop!\u003c/p\u003e  \u003cp\u003eYou should also update the \u003ccode\u003eTask\u003c/code\u003e component so that it shows the text and category its task.\u003c/p\u003e  \u003ch3\u003eCategoryFilter\u003c/h3\u003e  \u003cp\u003eFirst, update this component to display \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e elements for each category (again, make sure to use a key prop). \u003cem\u003eWhen the button is clicked\u003c/em\u003e, the following should happen:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWhichever button was clicked should have a class of \u003ccode\u003eselected\u003c/code\u003e. The other buttons should not have any class assigned.\u003c/li\u003e \u003cli\u003eThe list of tasks being displayed should be filtered, so that only tasks that match the category that was clicked are displayed.\u003c/li\u003e \u003cli\u003eIf the button for \"All\" is selected, all the tasks should be displayed.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eNewTaskForm\u003c/h3\u003e  \u003cp\u003eFirst, update this component to display \u003ccode\u003e\u0026lt;option\u0026gt;\u003c/code\u003e elements for each category inside of the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element, so that the user can select a category when adding a new task.\u003c/p\u003e  \u003cp\u003eNext, update this form to be a \u003cem\u003econtrolled component\u003c/em\u003e, so that all form inputs are captured in state.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eWhen the form is submitted\u003c/em\u003e, add a new task to the list with the text and category from the form. You'll need a callback prop named \u003ccode\u003eonTaskFormSubmit\u003c/code\u003e for the tests to pass for this feature.\u003c/p\u003e  \u003ch3\u003eTask\u003c/h3\u003e  \u003cp\u003e\u003cem\u003eWhen the delete button is clicked\u003c/em\u003e, remove the task from the list!\u003c/p\u003e","exportId":"gbbfe95e2db3e54c3abfeaadcfd0e2f88"}]},{"id":21345,"name":"Hooks Side Effects and Data Fetching","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ge0351cba2cd7dd9e3b9809eba0cfa40d","items":[{"id":199028,"title":"The useEffect Hook","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-effect\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll talk about how to use side-effects in our function components with the\n\u003ccode\u003euseEffect\u003c/code\u003e hook, and how to get additional functionality in our components\nbeyond just returning JSX elements.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand side effects in programming\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003euseEffect\u003c/code\u003e hook to write side effects in components\u003c/li\u003e\n\u003cli\u003eControl when the side effects run by using a dependencies array with \u003ccode\u003euseEffect\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eReviewing What We Know\u003c/h2\u003e\n\n\u003cp\u003eHere's a quick recap of some of the key concepts we've learned about React\ncomponents:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003ecomponent\u003c/strong\u003e is a function that takes in \u003cstrong\u003eprops\u003c/strong\u003e and returns \u003cstrong\u003eJSX\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eWhen we call \u003ccode\u003eReactDOM.render\u003c/code\u003e and pass in our components, it will \u003cstrong\u003erender\u003c/strong\u003e\nall of our components by calling our component functions, passing down\nprops, and building the DOM elements out of our components' JSX\u003c/li\u003e\n\u003cli\u003eWhen a component's \u003cstrong\u003estate\u003c/strong\u003e is updated by calling the \u003ccode\u003esetState\u003c/code\u003e function,\nthat component will \u003cstrong\u003ere-render\u003c/strong\u003e, along with all of its children\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eSide Effects\u003c/h2\u003e\n\n\u003cp\u003eIn programming terms, a side effect is defined as:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; an operation, function or expression is said to have a side effect if it\n\u0026gt; modifies some state variable value(s) outside its local environment, that is\n\u0026gt; to say has an observable effect besides returning a value (the main effect) to\n\u0026gt; the invoker of the operation. — \u003ca href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)#:%7E:text=In%20computer%20science%2C%20an%20operation,the%20invoker%20of%20the%20operation.\"\u003eWikipedia on Side Effects\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ePut more simply, if we call a function and that function causes change in our\napplication \u003cem\u003eoutside of the function itself\u003c/em\u003e, it's considered to have caused a\n\u003cstrong\u003eside effect\u003c/strong\u003e. Things like making network requests, accessing data from a\ndatabase, writing to the file system, etc. are common examples of side effects\nin programming.\u003c/p\u003e\n\n\u003cp\u003eIn terms of a React component, the \u003cstrong\u003emain effect\u003c/strong\u003e of the component is to return\nsome JSX. That's been true of all of the components we've been working with! One\nof the first rules we learned about function components is that they take in\nprops, and return JSX.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eHowever\u003c/em\u003e, it's often necessary for a component to perform some \u003cstrong\u003eside effects\u003c/strong\u003e\nin addition to its main job of returning JSX. For example, we might want to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFetch some data from an API when a component loads\u003c/li\u003e\n\u003cli\u003eStart or stop a timer\u003c/li\u003e\n\u003cli\u003eManually change the DOM\u003c/li\u003e\n\u003cli\u003eGet the user's location\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn order to handle these kinds of side effects within our components, we'll need\nto use another special \u003cstrong\u003ehook\u003c/strong\u003e from React: \u003ccode\u003euseEffect\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eUsing the useEffect Hook\u003c/h2\u003e\n\n\u003cp\u003eTo use the \u003ccode\u003euseEffect\u003c/code\u003e hook, we must first import it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { useEffect } from \"react\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, inside our component, we call \u003ccode\u003euseEffect\u003c/code\u003e and pass in a \u003cstrong\u003ecallback\nfunction\u003c/strong\u003e to run as a \u003cstrong\u003eside effect\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  useEffect(\u003cbr\u003e    // side effect function\u003cbr\u003e    () =\u0026gt; {\u003cbr\u003e      console.log(\"useEffect called\");\u003cbr\u003e    }\u003cbr\u003e  );\u003cbr\u003e\u003cbr\u003e  console.log(\"Component rendering\");\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button\u0026gt;Click Me\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" placeholder=\"Type away...\" /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;;\u003cbr\u003e  )\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you run the example code now, you'll see the console messages appear in this\norder:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eComponent rendering\u003c/li\u003e\n\u003cli\u003euseEffect called\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo we are now able to run some extra code as a \u003cstrong\u003eside effect\u003c/strong\u003e any time our\ncomponent is rendered.\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; By using this Hook, you tell React that your component needs to do something\n\u0026gt; after render. React will remember the function you passed (we’ll refer to it\n\u0026gt; as our “effect”), and call it later after performing the DOM updates. — \u0026gt; \u003ca href=\"https://reactjs.org/docs/hooks-effect.html\"\u003eReact docs on the useEffect hook\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's add some state into the equation, and see how that interacts with our\n\u003ccode\u003euseEffect\u003c/code\u003e hook.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e  const [text, setText] = useState(\"\");\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    console.log(\"useEffect called\");\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  console.log(\"Component rendering\");\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; setCount((count) =\u0026gt; count + 1)}\u0026gt;\u003cbr\u003e        I've been clicked {count} times\u003cbr\u003e      \u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        placeholder=\"Type away...\"\u003cbr\u003e        value={text}\u003cbr\u003e        onChange={(e) =\u0026gt; setText(e.target.value)}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTry clicking the button or typing in the input field to trigger updates in\nstate. Every time state is set, we should also see those same two console\nmessages in the same order:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eComponent rendering\u003c/li\u003e\n\u003cli\u003euseEffect called\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eBy default, \u003ccode\u003euseEffect\u003c/code\u003e will run our side effect function every time the\ncomponent re-renders\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erender -\u0026gt; useEffect\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003euseEffect Dependencies\u003c/h2\u003e\n\n\u003cp\u003eSometimes we only want to run our side effect in certain conditions. For\nexample: imagine we're using the \u003ccode\u003euseEffect\u003c/code\u003e hook to fetch some data from an\nexternal API (a common use case for \u003ccode\u003euseEffect\u003c/code\u003e). We don't want to make a\nnetwork request every time our component is updated, only the first time our\ncomponent renders. If we write a component that does just that, we'll see an\nissue:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction DogPics() {\u003cbr\u003e  const [images, setImages] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    fetch(\"https://dog.ceo/api/breeds/image/random/3\")\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((data) =\u0026gt; {\u003cbr\u003e        setImages(data.messages);\u003cbr\u003e      });\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      {images.map((image) =\u0026gt; (\u003cbr\u003e        \u0026lt;img src={image} key={image} /\u0026gt;\u003cbr\u003e      ))}\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning this code will result in an endless loop of \u003ccode\u003efetch\u003c/code\u003e requests (until the\nAPI kicks us out for hitting the rate limit 👀). We'd end up in a cycle like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erender -\u0026gt; useEffect -\u0026gt; setImages -\u0026gt; render -\u0026gt; useEffect -\u0026gt; setImages -\u0026gt; render -\u0026gt; etc...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow can we control when \u003ccode\u003euseEffect\u003c/code\u003e will run our side effect function?\u003c/p\u003e\n\n\u003cp\u003eReact gives us a way to control when the side effect will run, by passing a\nsecond argument to \u003ccode\u003euseEffect\u003c/code\u003e of a \u003cstrong\u003edependencies array\u003c/strong\u003e. In our \u003ccode\u003eApp\u003c/code\u003e\ncomponent, it looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(\u003cbr\u003e  // 1st arg: side effect (callback function)\u003cbr\u003e  () =\u0026gt; console.log(\"useEffect called\"),\u003cbr\u003e  // 2nd arg: dependencies array\u003cbr\u003e  [count]\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUpdate the \u003ccode\u003euseEffect\u003c/code\u003e function in \u003ccode\u003eApp\u003c/code\u003e as above and try running the code\nagain. Now, the side effect will only run when the \u003ccode\u003ecount\u003c/code\u003e variable changes. We\nwon't see any console messages from \u003ccode\u003euseEffect\u003c/code\u003e when typing in the input —\nwe'll only see them when clicking the button!\u003c/p\u003e\n\n\u003cp\u003eWe can also pass in an \u003cem\u003eempty\u003c/em\u003e array of dependencies as a second argument, like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  console.log(\"useEffect called\");\u003cbr\u003e}, []); // second argument is an empty array\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, the side effect will only run the \u003cem\u003efirst time\u003c/em\u003e our component renders! That same\napproach can be used to fix the infinite loop we saw in the fetch example as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  fetch(\"https://dog.ceo/api/breeds/image/random/3\")\u003cbr\u003e    .then((r) =\u0026gt; r.json())\u003cbr\u003e    .then((data) =\u0026gt; {\u003cbr\u003e      setImages(data.messages);\u003cbr\u003e    });\u003cbr\u003e}, []);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, our component rendering cycle now looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erender -\u0026gt; useEffect -\u0026gt; setImages -\u0026gt; render\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePerforming Side Effects\u003c/h2\u003e\n\n\u003cp\u003eRunning a \u003ccode\u003efetch\u003c/code\u003e request as a side effect is one great example of when you'd\nuse the \u003ccode\u003euseEffect\u003c/code\u003e and we'll explore that more in detail in the coming lessons.\nFor now, let's a couple other examples where you might use the \u003ccode\u003euseEffect\u003c/code\u003e hook.\u003c/p\u003e\n\n\u003cp\u003eOne kind of side effect we can demonstrate here is \u003cem\u003eupdating parts of the\nwebpage page outside of the React DOM tree\u003c/em\u003e. React is responsible for all the\nDOM elements rendered by our components, but there are some parts of the webpage\nthat live outside of this tree. Take, for instance, the \u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e of our page\n— this is what shows up in the browser tab, like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/learn-co-curriculum/react-hooks-use-effect/master/images/title.png\" alt=\"title\"\u003e\u003c/p\u003e\n\n\u003cp\u003eUpdating this part of the page would be considered a \u003cem\u003eside effect\u003c/em\u003e, so let's use\n\u003ccode\u003euseEffect\u003c/code\u003e to update it!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  document.title = text;\u003cbr\u003e}, [text]);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, what we're telling React is:\u003c/p\u003e\n\n\u003cp\u003e\"Hey React! When my component renders, I \u003cem\u003ealso\u003c/em\u003e want you to update the\ndocument's title. But you should only do that when the \u003ccode\u003etext\u003c/code\u003e variable changes.\"\u003c/p\u003e\n\n\u003cp\u003eLet's add another side effect, this time running a \u003ccode\u003esetTimeout\u003c/code\u003e function. We\nwant this function to \u003cem\u003ereset\u003c/em\u003e the \u003ccode\u003ecount\u003c/code\u003e variable back to 0 after 5 seconds.\nRunning a \u003ccode\u003esetTimeout\u003c/code\u003e is another example of a side effect, so once again, let's\nuse \u003ccode\u003euseEffect\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  setTimeout(() =\u0026gt; setCount(0), 5000);\u003cbr\u003e}, []);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this side effect, we're telling React:\u003c/p\u003e\n\n\u003cp\u003e\"Hey React! When my App component renders, I also want you to set this timeout\nfunction. In 5 seconds, you should update state and set the count back to 0. You\nshould only set this timeout function once, I don't want a bunch of timeouts\nrunning every time my component updates. kthxbye!\"\u003c/p\u003e\n\n\u003cp\u003eAll together, here's what our updated component looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e  const [text, setText] = useState(\"\");\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    document.title = text;\u003cbr\u003e  }, [text]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setTimeout(() =\u0026gt; setCount(0), 5000);\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  console.log(\"Component rendering\");\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; setCount((count) =\u0026gt; count + 1)}\u0026gt;\u003cbr\u003e        I've been clicked {count} times\u003cbr\u003e      \u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        placeholder=\"Type away...\"\u003cbr\u003e        value={text}\u003cbr\u003e        onChange={(e) =\u0026gt; setText(e.target.value)}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExplore this code to familiarize yourself with \u003ccode\u003euseEffect\u003c/code\u003e, and see what changes\nby changing the dependencies array. It's also a good idea to add some console\nmessages or put in a debugger to see exactly when the side effects will run.\u003c/p\u003e\n\n\u003ch2\u003euseEffect Dependencies Cheatsheet\u003c/h2\u003e\n\n\u003cp\u003eHere's a quick guide on how to use the second argument of \u003ccode\u003euseEffect\u003c/code\u003e to control\nwhen your side effect code will run:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003euseEffect(() =\u0026gt; {})\u003c/code\u003e: No dependencies array\n\n\u003cul\u003e\n\u003cli\u003eRun the side effect \u003cstrong\u003eevery time our component renders\u003c/strong\u003e (whenever state or\nprops change)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003euseEffect(() =\u0026gt; {}, [])\u003c/code\u003e: Empty dependencies array\n\n\u003cul\u003e\n\u003cli\u003eRun the side effect \u003cstrong\u003eonly the first time our component renders\u003c/strong\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003euseEffect(() =\u0026gt; {}, [variable1, variable2])\u003c/code\u003e: Dependencies array with elements in it\n\n\u003cul\u003e\n\u003cli\u003eRun the side effect \u003cstrong\u003eany time the variable(s) change\u003c/strong\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've been working with components solely for rendering to the DOM based\non JSX, and updating based on changes to state. It's also useful to introduce\n\u003cstrong\u003eside effects\u003c/strong\u003e to our components so that we can interact with the world outside\nof the React DOM tree and do things like making network requests or setting\ntimers.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-effect.html\"\u003eReact Docs on useEffect\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://overreacted.io/a-complete-guide-to-useeffect/\"\u003eA Complete Guide to useEffect\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gd4d05163ac3fcdfaa14962b93e5bf70a"},{"id":199029,"title":"The useEffect Hook - Cleaning Up","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-effect-cleanup\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect-cleanup\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect-cleanup/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn the last lesson, we saw how to run functions as \u003cstrong\u003eside effects\u003c/strong\u003e of rendering our components by using the \u003ccode\u003euseEffect\u003c/code\u003e hook. Here, we'll discuss best practices when it comes to cleaning up after those functions so we don't have unnecessary code running in the background when we no longer need it.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eReturn a cleanup function from our callback in the \u003ccode\u003euseEffect\u003c/code\u003e hook\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003euseEffect Cleanup\u003c/h2\u003e  \u003cp\u003eWhen using the \u003ccode\u003euseEffect\u003c/code\u003e hook in a component, you might end up with some long-running code that you no longer need once the component is removed from the page. Here's an example of a component that runs a timer in the background continuously:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clock() {\u003cbr\u003e  const [time, setTime] = useState(new Date());\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setInterval(() =\u0026gt; {\u003cbr\u003e      setTime(new Date());\u003cbr\u003e    }, 1000);\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div\u0026gt;{time.toString()}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the component first renders, the \u003ccode\u003euseEffect\u003c/code\u003e hook will run and create an interval. That interval will run every 1 second in the background, and set the time.\u003c/p\u003e  \u003cp\u003eWe could use this Clock component like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [showClock, setShowClock] = useState(true);\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      {showClock ? \u0026lt;Clock /\u0026gt; : null}\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; setShowClock(!showClock)}\u0026gt;Toggle Clock\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the button is clicked, we want to remove the clock from the DOM. That \u003cem\u003ealso\u003c/em\u003e means we should stop the \u003ccode\u003esetInterval\u003c/code\u003e from running in the background. We need some way of cleaning up our side effect when the component is no longer needed!\u003c/p\u003e  \u003cp\u003eTo demonstrate the issue, try clicking the \"Toggle Clock\" button — you'll likely see a warning message like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eindex.js:1 Warning: Can't perform a React state update on an unmounted\u003cbr\u003ecomponent. This is a no-op, but it indicates a memory leak in your application.\u003cbr\u003eTo fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup\u003cbr\u003efunction. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe reason for this message is that even after removing our \u003ccode\u003eClock\u003c/code\u003e component from the DOM, the \u003ccode\u003esetInterval\u003c/code\u003e function we called in \u003ccode\u003euseEffect\u003c/code\u003e is \u003cstrong\u003estill running in the background\u003c/strong\u003e, and updating state every second.\u003c/p\u003e  \u003cp\u003eReact's solution is to have our \u003ccode\u003euseEffect\u003c/code\u003e function \u003cstrong\u003ereturn a cleanup function\u003c/strong\u003e, which will run after the component \"un-mounts\": when it is removed from the DOM after its parent component no longer returns it. Here's how the cleanup function would look:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clock() {\u003cbr\u003e  const [time, setTime] = useState(new Date());\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    const timerID = setInterval(() =\u0026gt; {\u003cbr\u003e      setTime(new Date());\u003cbr\u003e    }, 1000);\u003cbr\u003e\u003cbr\u003e    // returning a cleanup function\u003cbr\u003e    return function cleanup() {\u003cbr\u003e      clearInterval(timerID);\u003cbr\u003e    };\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div\u0026gt;{time.toString()}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run this app again in the browser, and click the \"Toggle Clock\" button, you'll notice we no longer get that error message. That's because we have successfully cleaned up after our interval is no longer needed by running \u003ccode\u003eclearInterval\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eCleanup functions like this are useful if you have a long-running function that you want to unsubscribe from when the component is no longer on the page. Common examples include:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea timer running via \u003ccode\u003esetInterval\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ea subscription to a web socket connection\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou don't always have to use a cleanup function as part of your \u003ccode\u003euseEffect\u003c/code\u003e code, but it's good to know what scenarios make this functionality useful.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-effect.html\"\u003eReact Docs on useEffect\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://overreacted.io/a-complete-guide-to-useeffect/\"\u003eA Complete Guide to useEffect\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"ga2449b498a187efee9140036c6d231a2"},{"id":199030,"title":"React useEffect Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-effect-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn the labs for this section, we're going to be building a trivia app! The first feature we're going to work on is the Question component.\u003c/p\u003e  \u003cp\u003eThere is some starter code for us to work with. There's a \u003ccode\u003eQuestion\u003c/code\u003e component already set up to display the question and a list of possible answers. It's also hooked up to its parent component, \u003ccode\u003eApp\u003c/code\u003e, so that it has access to all the props it needs.\u003c/p\u003e  \u003cp\u003eThe feature we're going to build out using \u003ccode\u003euseEffect\u003c/code\u003e is a \u003cstrong\u003ecountdown timer\u003c/strong\u003e, so that the user has to answer each question within 10 seconds.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eWhen the \u003ccode\u003eQuestion\u003c/code\u003e component renders, create a side effect using \u003ccode\u003euseEffect\u003c/code\u003e and use \u003ccode\u003esetTimeout\u003c/code\u003e to run a callback function after 1 second.\u003c/p\u003e  \u003cp\u003eInside the callback function for \u003ccode\u003esetTimeout\u003c/code\u003e, use the \u003ccode\u003esetTimeRemaining\u003c/code\u003e function to decrease the amount of time remaining by 1 every 1 second.\u003c/p\u003e  \u003cp\u003eWhen the \u003ccode\u003etimeRemaining\u003c/code\u003e hits 0, do the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ereset \u003ccode\u003etimeRemaining\u003c/code\u003e back to 10 seconds, so our next question will have a fresh timer; and\u003c/li\u003e \u003cli\u003ecall the \u003ccode\u003eonAnswered\u003c/code\u003e callback prop with a value of false (\u003ccode\u003eonAnswered(false)\u003c/code\u003e), to trigger some behavior in the App component.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou should \u003cem\u003ealso\u003c/em\u003e use the \u003cstrong\u003ecleanup function\u003c/strong\u003e for \u003ccode\u003euseEffect\u003c/code\u003e to clean up after the timeout function.\u003c/p\u003e  \u003cp\u003eMake sure to pay attention to any warning/error messages in the console as a result of using \u003ccode\u003euseEffect\u003c/code\u003e, and clean them up by providing any necessary \u003cem\u003edependencies\u003c/em\u003e in the second argument of \u003ccode\u003euseEffect\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you're stuck on getting the timer working, or encountering some strange behavior, make sure to check out the resources below!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-effect.html\"\u003eReact Docs on useEffect\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://upmostly.com/tutorials/settimeout-in-react-components-using-hooks\"\u003esetTimeout Using Hooks\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://overreacted.io/a-complete-guide-to-useeffect/\"\u003eA Complete Guide to useEffect\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gc023271bb8b202b80fae69aa06bc26aa"},{"id":199031,"title":"Data Fetching in React","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-data-fetching\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-data-fetching\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-data-fetching/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eProblem Statement\u003c/h2\u003e  \u003cp\u003eWe've seen that React components come with some neat-o bells and whistles. They can be nested within each other. They can pass information and logic between them with props and they can keep track of their own information in state.\u003c/p\u003e  \u003cp\u003eSo far though, we've been restricted to displaying information organized by the React app itself. In this lesson, we're going to go a step further and incorporate remote data into our React apps. Using fetch requests to APIs, we can build dynamic, responsive apps around data that is provided to us remotely.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIntroduce the use of \u003ccode\u003efetch\u003c/code\u003e within components\u003c/li\u003e \u003cli\u003eConsider some of the best places to include \u003ccode\u003efetch\u003c/code\u003e in our React app\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eUsing \u003ccode\u003efetch\u003c/code\u003e Within React\u003c/h2\u003e  \u003cp\u003eFor a minute, consider how a site like \u003ca href=\"https://www.instagram.com/\"\u003eInstagram\u003c/a\u003e works. If you've got an account on Instagram, when you visit the site, you'll see an endless scroll of photos from people you follow. Everyone sees the same \u003cem\u003eInstagram\u003c/em\u003e website, but the images displayed are unique to the user.\u003c/p\u003e  \u003cp\u003eSimilarly, consider \u003ca href=\"https://airbnb.com/\"\u003eAirBnb\u003c/a\u003e. When you click to look at a listing's information, the page layout is always the same. The data, the images, the reviews... this information changes.\u003c/p\u003e  \u003cp\u003eBoth of these websites are built with React. When you go to one of these sites, React doesn't have the specific listing or image content. If you're on a slow connection (or \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/network-conditions\"\u003ewant to mimic one using the Chrome Dev Tools\u003c/a\u003e), you can see what is happening more clearly. \u003cem\u003eReact\u003c/em\u003e shows up first and renders \u003cem\u003esomething\u003c/em\u003e. Sometimes it is just the background or the skeleton of a website, or maybe navigation and CSS. On Instagram, a photo 'card' might appear but without an image or username attached.\u003c/p\u003e  \u003cp\u003eReact is \u003cem\u003eupdating the DOM\u003c/em\u003e based on the JSX being returned by its components \u003cem\u003efirst\u003c/em\u003e. Once the DOM has been updated, remote data is then requested. When that data has been received, React runs through an update of the necessary components and fills in the info it received. Text content will appear, user information, etc... This first set of data is likely just a JSON object specific to the user or content requested. This object might contain image URLs, so right after the component update, images will be able to load.\u003c/p\u003e  \u003cp\u003eSo, since the data is being requested \u003cem\u003eafter\u003c/em\u003e React has updated the DOM, is there a \u003cem\u003eside effect\u003c/em\u003e that might be useful here?\u003c/p\u003e  \u003cp\u003eWhy yes there is! Whenever we want to fetch data in our components, the \u003ccode\u003euseEffect\u003c/code\u003e hook gives us a great place for making fetch requests. By putting a \u003ccode\u003efetch()\u003c/code\u003e within \u003ccode\u003euseEffect\u003c/code\u003e, when the data is received, we can use \u003ccode\u003esetState\u003c/code\u003e to store the received data. This causes an update with that remote data stored in state. A very simple implementation of the App component with \u003ccode\u003efetch\u003c/code\u003e might look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState, useEffect } from \"react\";\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  const [peopleInSpace, setPeopleInSpace] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    fetch(\"http://api.open-notify.org/astros.json\")\u003cbr\u003e      .then((response) =\u0026gt; response.json())\u003cbr\u003e      .then((data) =\u0026gt; {\u003cbr\u003e        setPeopleInSpace(data.people);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e  // use an empty dependencies array, so we only run the fetch request ONCE\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div\u0026gt;{peopleInSpace.map((person) =\u0026gt; person.name)}\u0026lt;/div\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the code above, after the \u003ccode\u003eApp\u003c/code\u003e component has been rendered to the DOM, a \u003ccode\u003efetch\u003c/code\u003e is called to an API. Once data is returned from the API, the simplest way to store some or all of it is to put it in state.\u003c/p\u003e  \u003cp\u003eIf you have JSX content reliant on that state information, when \u003ccode\u003esetPeopleInSpace\u003c/code\u003e is called and the component re-renders, the content will appear.\u003c/p\u003e  \u003cp\u003ePlacing \u003ccode\u003efetch\u003c/code\u003e in a \u003ccode\u003euseEffect\u003c/code\u003e with an empty dependencies array is ideal for data that you need immediately when a user visits your website or uses your app. Since \u003ccode\u003euseEffect\u003c/code\u003e is also commonly used to initialize intervals, it is ideal to set up any repeating fetch requests here as well.\u003c/p\u003e  \u003cp\u003eWe can also add a loading indicator using this technique. Since our component will render \u003cem\u003ebefore\u003c/em\u003e \u003ccode\u003euseEffect\u003c/code\u003e runs our \u003ccode\u003efetch\u003c/code\u003e request, we can set up another state variable to add a loading indicator, like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [peopleInSpace, setPeopleInSpace] = useState([]);\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    fetch(\"http://api.open-notify.org/astros.json\")\u003cbr\u003e      .then((response) =\u0026gt; response.json())\u003cbr\u003e      .then((data) =\u0026gt; {\u003cbr\u003e        setPeopleInSpace(data.people);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  // if the data hasn't been loaded, show a loading indicator\u003cbr\u003e  if (!isLoaded) return \u0026lt;h3\u0026gt;Loading...\u0026lt;/h3\u0026gt;;\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div\u0026gt;{peopleInSpace.map((person) =\u0026gt; person.name)}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eUsing \u003ccode\u003efetch\u003c/code\u003e With Events\u003c/h4\u003e  \u003cp\u003eWe aren't limited to sending fetch requests when a component is rendered the first time. We can also tie them into events:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleClick() {\u003cbr\u003e  fetch(\"your API url\")\u003cbr\u003e    .then((res) =\u0026gt; res.json())\u003cbr\u003e    .then((json) =\u0026gt; setData(json));\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ereturn \u0026lt;button onClick={handleClick}\u0026gt;Click to Fetch!\u0026lt;/button\u0026gt;; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis lets us send requests on demand. Submitting form data would be handled this way, using a POST request instead of GET.\u003c/p\u003e  \u003cp\u003eA slightly more complicated example would be the infinite scroll of sites like Instagram. An event listener tied to changes in the scroll position of a page could fire off a \u003ccode\u003ehandleScroll\u003c/code\u003e method that requests data before a user reaches the bottom of a page.\u003c/p\u003e  \u003ch4\u003eUsing State with POST Requests\u003c/h4\u003e  \u003cp\u003eOne of the beautiful features of state is that we can organize it however we need. If we were building a form to submit to a server, we can structure state to work nicely with what the server is expecting in a POST request.\u003c/p\u003e  \u003cp\u003eSay we were building a user sign up form. When we send the data, our server is expecting two values within the body of the POST, \u003ccode\u003eusername\u003c/code\u003e and \u003ccode\u003epassword\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSetting up a React controlled form, we can structure our state in the same way:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst [formData, setFormData] = useState({\u003cbr\u003e  username: \"\",\u003cbr\u003e  password: \"\",\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003e//since the id values are the same as the keys in formData, we can write an abstract setFormData here\u003cbr\u003efunction handleChange(event) {\u003cbr\u003e  setFormData({\u003cbr\u003e    ...formData,\u003cbr\u003e    [event.target.id]: event.target.value,\u003cbr\u003e  });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ereturn (\u003cbr\u003e  \u0026lt;form onSubmit={this.handleSubmit}\u0026gt;\u003cbr\u003e    \u0026lt;input\u003cbr\u003e      type=\"text\"\u003cbr\u003e      id=\"username\"\u003cbr\u003e      value={formData.username}\u003cbr\u003e      onChange={handleChange}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e    \u0026lt;input\u003cbr\u003e      type=\"text\"\u003cbr\u003e      id=\"password\"\u003cbr\u003e      value={formData.password}\u003cbr\u003e      onChange={handleChange}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e  \u0026lt;/form\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, when setting up the fetch request, we can just pass the entire state within the body, as there are no other values:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleSubmit(event) {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  fetch(\"the server URL\", {\u003cbr\u003e    method: \"POST\",\u003cbr\u003e    headers: {\u003cbr\u003e      \"Content-Type\": \"application/json\",\u003cbr\u003e    },\u003cbr\u003e    body: JSON.stringify(formData),\u003cbr\u003e  });\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice how we're not bothering to worry about \u003ccode\u003eevent.target\u003c/code\u003e when posting the data. Since the form is controlled, state contains the most up-to-date form data, and it is already in the right format!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWhen you need to \u003cem\u003eget\u003c/em\u003e data from an API when your component is first rendered, using \u003ccode\u003euseEffect\u003c/code\u003e with an empty dependencies array, like this, is a good approach:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  fetch(\"/api\")\u003cbr\u003e    .then((r) =\u0026gt; r.json())\u003cbr\u003e    .then(setData);\u003cbr\u003e}, []); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAside from that, there are no hard and fast rules for how to include fetch requests, and a lot of structure will depend on the data you're working with. As a general practice for writing simpler component code, include \u003ccode\u003efetch\u003c/code\u003e calls in the same component as your top level state.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\"\u003efetch\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"data-fetching-in-react"},{"id":199032,"title":"React Simple Data Fetching Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-simple-data-fetching-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-simple-data-fetching-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-simple-data-fetching-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice creating a React component that utilizes \u003ccode\u003efetch\u003c/code\u003e to display content\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eThis lab is missing the App component that \u003ccode\u003eindex.js\u003c/code\u003e is looking for. To pass the tests in this lab:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreate an \u003ccode\u003eApp\u003c/code\u003e component from scratch\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003euseEffect\u003c/code\u003e hook. Inside the callback for \u003ccode\u003euseEffect\u003c/code\u003e, send a \u003ccode\u003efetch\u003c/code\u003e request to \u003ccode\u003ehttps://dog.ceo/api/breeds/image/random\u003c/code\u003e, a free API that returns a random image of a dog.\u003c/li\u003e \u003cli\u003eDisplay a \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e tag with the text of \"Loading...\" when the component is first rendered\u003c/li\u003e \u003cli\u003eAfter receiving a response from the API, show the dog image in a \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag, with the \u003ccode\u003ealt\u003c/code\u003e attribute set to \"A Random Dog\".\u003c/li\u003e \u003c/ul\u003e","exportId":"gea12229b75bcfc8c6bbe2b40ddcb77b1"},{"id":199033,"title":"Async Giphy Search Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-async-gif-search-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-async-gif-search-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-async-gif-search-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eYou're going to be building out a Gif search using the Giphy API. In this lab, there are no tests to pass. Rather, your task is to create a working app in your browser using the instructions below. When finished, you should have an application that can take in a user's input, fetch JSON data from the Giphy API, and display the results.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/learn-co-curriculum/react-async-gif-search-lab/master/async.gif\" alt=\"giphy search\"\u003e\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eThe URL for the API is\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ehttps://api.giphy.com/v1/gifs/search?q=YOUR QUERY HERE\u0026amp;api_key=dc6zaTOxFJmzC\u0026amp;rating=g\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eWhile the above API key \u003cem\u003emay\u003c/em\u003e work, we recommend creating your own API key by following the \u003ca href=\"https://developers.giphy.com/docs/api/#quick-start-guide\"\u003einstructions on Giphy's developer site\u003c/a\u003e. Creating a key is free and only requires an account. Using your own key will prevent any potential rate limiting if other students are also working on this lesson.\u003c/p\u003e  \u003cp\u003eOnce you've got your key, you should be able to access the Giphy API from a browser and receive a JSON response to confirm everything is working.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ehttps://api.giphy.com/v1/gifs/search?q=dolphin\u0026amp;api_key=YOUR API KEY\u0026amp;rating=g\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eYou should get back an array of objects, each containing information about a particular image.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \"data\": [\u003cbr\u003e    {\u003cbr\u003e      \"type\": \"gif\",\u003cbr\u003e      \"id\": \"l0HlNQ03J5JxX6lva\",\u003cbr\u003e      \"slug\": \"bbc-wildlife-l0HlNQ03J5JxX6lva\",\u003cbr\u003e      \"url\": \"https://giphy.com/gifs/bbc-wildlife-l0HlNQ03J5JxX6lva\",\u003cbr\u003e      \"bitly_gif_url\": \"https://gph.is/2iC32M8\",\u003cbr\u003e      \"bitly_url\": \"https://gph.is/2iC32M8\",\u003cbr\u003e\u003cbr\u003e      ...\u003cbr\u003e\u003cbr\u003e      \"images\": {\u003cbr\u003e        \"fixed_height_still\": {\u003cbr\u003e          \"url\": \"https://media0.giphy.com/media/l0HlNQ03J5JxX6lva/200_s.gif?cid=e1bb72ff5b9fa2866168584b51f13892\",\u003cbr\u003e          \"width\": \"400\",\u003cbr\u003e          \"height\": \"200\",\u003cbr\u003e          \"size\": \"55556\"\u003cbr\u003e        },\u003cbr\u003e        ...\u003cbr\u003e        \"original\": {\u003cbr\u003e          \"url\": \"https://media0.giphy.com/media/l0HlNQ03J5JxX6lva/giphy.gif?cid=e1bb72ff5b9fa2866168584b51f13892\",\u003cbr\u003e          \"width\": \"480\",\u003cbr\u003e          \"height\": \"240\",\u003cbr\u003e        }\u003cbr\u003e        ...\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e    ] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Notice there are many URL keys on each image object. The first \u003ccode\u003eurl\u003c/code\u003e key, just below \u003ccode\u003etype\u003c/code\u003e, \u003ccode\u003eid\u003c/code\u003e, and \u003ccode\u003eslug\u003c/code\u003e, will bring you to the images page on \u003ca href=\"https://giphy.com/\"\u003egiphy.com\u003c/a\u003e. We only want the path to the actual image, which is found at \u003ccode\u003eimages.original.url\u003c/code\u003e. Using other \u003ccode\u003eurl\u003c/code\u003e keys may cause CORS issues.\u003c/p\u003e  \u003ch2\u003eYour Components\u003c/h2\u003e  \u003ch3\u003eApp\u003c/h3\u003e  \u003cp\u003eYour top level component will be the \u003ccode\u003eApp\u003c/code\u003e component - no surprises there! It will be responsible for rendering the \u003ccode\u003eNavBar\u003c/code\u003e component (this component is already provided for you, note the project has bootstrap loaded in) and the \u003ccode\u003eGifListContainer\u003c/code\u003e component.\u003c/p\u003e  \u003ch3\u003eGifListContainer\u003c/h3\u003e  \u003cp\u003e\u003ccode\u003eGifListContainer\u003c/code\u003e should be a component that does data fetching and then renders its corresponding sub-component. That’s it.\u003c/p\u003e  \u003cp\u003eIn our app, the \u003ccode\u003eGifListContainer\u003c/code\u003e will be responsible for fetching the data from the Giphy API, storing the first 3 gifs from the response in its component \u003cstrong\u003estate\u003c/strong\u003e, and passing that data down to its child, the \u003ccode\u003eGifList\u003c/code\u003e component, as a prop.\u003c/p\u003e  \u003cp\u003eIt will also render a \u003ccode\u003eGifSearch\u003c/code\u003e component that renders the form. \u003ccode\u003eGifListContainer\u003c/code\u003e should pass down a submit handler function to \u003ccode\u003eGifSearch\u003c/code\u003e as a prop.\u003c/p\u003e  \u003ch3\u003eGifList\u003c/h3\u003e  \u003cp\u003e\u003ccode\u003eGifList\u003c/code\u003e receives data from its props and renders html given the input data. It can render a top level \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e with each gif as an \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eGifSearch\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eGifSearch\u003c/code\u003e component will render a form that receives the user input for the Giphy search. The text input should be a \u003cem\u003econtrolled component\u003c/em\u003e that stores the value of the input in its component state and renders the DOM accordingly. The React component is always in charge of what the DOM looks like.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eGifSearch\u003c/code\u003e should receive a callback prop from its parent. On a submit event, it should invoke that callback prop with the value of the text input. It is this callback function, defined in \u003ccode\u003eGifListContainer\u003c/code\u003e, that will actually query the API with the text the user has entered.\u003c/p\u003e","exportId":"g023eef3759e09e0d4379b7cd3ac0a206"},{"id":199034,"title":"React Fetch CRUD Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-fetch-crud-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-fetch-crud-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-fetch-crud-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWe're going to continue working on our quiz app, this time from the administrative side of things! We want our quizmasters to be able to view, add, edit, and delete the existing quizzes so they can change the content for the rest of our users.\u003c/p\u003e  \u003cp\u003eThere's some starter code set up, so you won't need to create any new components for this lab. Your goal will be to work with \u003ccode\u003efetch\u003c/code\u003e and interact with our quiz API to perform the necessary CRUD operations to complete these deliverables.\u003c/p\u003e  \u003ch2\u003eSetup\u003c/h2\u003e  \u003cp\u003eAs usual, make sure to run \u003ccode\u003enpm install\u003c/code\u003e to install the necessary dependencies.\u003c/p\u003e  \u003cp\u003eFor this lab, we'll be using \u003ccode\u003ejson-server\u003c/code\u003e to create a RESTful API with our quiz data. You can run \u003ccode\u003ejson-server\u003c/code\u003e by running \u003ccode\u003enpm run server\u003c/code\u003e (the command for this is in the \u003ccode\u003epackage.json\u003c/code\u003e file). Once your server is running, go to \u003ccode\u003ehttp://localhost:4000/questions\u003c/code\u003e in your browser and have a look at the question data.\u003c/p\u003e  \u003cp\u003eThen, in a new terminal tab, run \u003ccode\u003enpm start\u003c/code\u003e to run the React application.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003ch3\u003eGET /questions\u003c/h3\u003e  \u003cp\u003eWhen the application loads, get all the questions from \u003ccode\u003ehttp://localhost:4000/questions\u003c/code\u003e and display them using the \u003ccode\u003eQuestionList\u003c/code\u003e component.\u003c/p\u003e  \u003cp\u003eYou'll need to add \u003ccode\u003euseState\u003c/code\u003e and \u003ccode\u003euseEffect\u003c/code\u003e for this deliverable, but it's up to you to decide where it belongs! Think about which components will need access to the question data.\u003c/p\u003e  \u003ch3\u003ePOST /questions\u003c/h3\u003e  \u003cp\u003eWhen the user clicks the 'New Question' button, a form will be displayed for creating a new question. This form is already set up as a controlled form, so your responsibility will be to send this form data to our API \u003cem\u003ewhen the form is submitted\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eFor the API to work, you'll need to format your POST request like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePOST /questions\u003cbr\u003e\u003cbr\u003eRequired Headers:\u003cbr\u003e{ \"Content-Type\": \"application/json\" }\u003cbr\u003e\u003cbr\u003eBody:\u003cbr\u003e{\u003cbr\u003e  \"prompt\": string,\u003cbr\u003e  \"answers\": array of strings,\u003cbr\u003e  \"correctIndex\": integer\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn addition to updating the form, you should display the new question in the \u003ccode\u003eQuestionList\u003c/code\u003e component.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: because \u003ccode\u003ejson-server\u003c/code\u003e doesn't have any validations, if you make any mistakes and send the body of your request in the wrong format, you'll need to manually delete the entry from the \u003ccode\u003edb.json\u003c/code\u003e file.\u003c/p\u003e  \u003ch3\u003eDELETE /questions/:id\u003c/h3\u003e  \u003cp\u003eWhen the user clicks the 'View Questions' button, a list of all the questions should show up (from deliverable 1). \u003cem\u003eWhen the delete button is clicked\u003c/em\u003e, the question should be removed from the list. It should \u003cem\u003ealso\u003c/em\u003e be deleted on the server.\u003c/p\u003e  \u003cp\u003eMake sure to include the \u003cstrong\u003eid\u003c/strong\u003e of the question you're trying to delete in your request's url!\u003c/p\u003e  \u003ch3\u003ePATCH /questions/:id\u003c/h3\u003e  \u003cp\u003eWhen the user clicks the 'View Questions' button, a list of all the questions should show up (from deliverable 1). \u003cem\u003eWhen the dropdown for the correct answer is changed\u003c/em\u003e, the question should be updated on the server.\u003c/p\u003e  \u003cp\u003eFor the API to work, you'll need to format your POST request like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePATCH /questions/:id\u003cbr\u003e\u003cbr\u003eRequired Headers:\u003cbr\u003e{ \"Content-Type\": \"application/json\" }\u003cbr\u003e\u003cbr\u003eBody:\u003cbr\u003e{\u003cbr\u003e  \"correctIndex\": integer\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMake sure to include the \u003cstrong\u003eid\u003c/strong\u003e of the question you're trying to update in your request's url!\u003c/p\u003e","exportId":"gb66d20dce158b294b2e539cf9776bdcc"}]},{"id":21346,"name":"Advanced Hooks","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g6c1c9e4b153a286fd19fc2afa2e3baed","items":[{"id":199035,"title":"The useRef Hook","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-ref\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-ref\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-ref/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll explore how to use the \u003ccode\u003euseRef\u003c/code\u003e hook and some common use cases for it. You can find starter code with the examples we'll discuss in the \u003ccode\u003esrc/components\u003c/code\u003e directory. Run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to run the example code and code along!\u003c/p\u003e  \u003ch2\u003euseRef and Ref Variables\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003euseRef\u003c/code\u003e hook gives us a way to capture a \u003cstrong\u003ereference\u003c/strong\u003e to values that are accessible across multiple renders of our component. In some ways, it's similar to the \u003ccode\u003euseState\u003c/code\u003e hook: the \u003ccode\u003euseState\u003c/code\u003e hook also lets us keep track of values across multiple renders of our component, like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction CounterState() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  function handleClick() {\u003cbr\u003e    setCount((count) =\u0026gt; count + 1);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;CounterState\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;{count}\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this example, we create a \u003cstrong\u003estate variable\u003c/strong\u003e called \u003ccode\u003ecount\u003c/code\u003e that we can access the value of every time our component re-renders. Also, \u003cstrong\u003ecalling \u003ccode\u003esetCount\u003c/code\u003e will trigger a re-render\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eUsing a ref instead, our component would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useRef } from \"react\";\u003cbr\u003e\u003cbr\u003efunction CounterRef() {\u003cbr\u003e  const count = useRef(0);\u003cbr\u003e\u003cbr\u003e  function handleClick() {\u003cbr\u003e    count.current = count.current + 1;\u003cbr\u003e    console.log(count.current);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;CounterRef\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;{count.current}\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo break down the code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe must first import the \u003ccode\u003euseRef\u003c/code\u003e hook, just like with the other hooks we've seen\u003c/li\u003e \u003cli\u003eWe call \u003ccode\u003euseRef\u003c/code\u003e and pass in an initial value for the ref\u003c/li\u003e \u003cli\u003eCalling \u003ccode\u003euseRef\u003c/code\u003e returns a \u003cstrong\u003eref variable\u003c/strong\u003e, which is an \u003cstrong\u003eobject\u003c/strong\u003e with just one key: \u003ccode\u003ecurrent\u003c/code\u003e. It looks like this: \u003ccode\u003e{ current: 0 }\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eTo update the value of the ref, we update its \u003ccode\u003ecurrent\u003c/code\u003e property: \u003ccode\u003ecount.current = count.current + 1\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe key difference between these approaches is that in the \u003ccode\u003euseRef\u003c/code\u003e example, updating the ref variable \u003cstrong\u003edoes not cause our component to re-render\u003c/strong\u003e. It still allows us to have a variable that persists between renders of our component, but since updating its value does't trigger a re-render, we use it in different situations than when we'd use \u003ccode\u003euseState\u003c/code\u003e. You can think of this ref variable almost like an \u003cstrong\u003einstance variable\u003c/strong\u003e for your function components.\u003c/p\u003e  \u003cp\u003eLet's see some good use cases for the \u003ccode\u003euseRef\u003c/code\u003e hook.\u003c/p\u003e  \u003ch2\u003ePersisting Values Across Renders\u003c/h2\u003e  \u003cp\u003eLet's build out a price tracking component. The features of this component are:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eEvery 1 second, generate a new random price\u003c/li\u003e \u003cli\u003eIf the old price is less than the new price, use a green font color to indicate a rise in price\u003c/li\u003e \u003cli\u003eIf the old price is greater than the new price, use a red font color to indicate a drop in price\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere's some starter code that implements the first feature of generating a random price each second:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useEffect, useState } from \"react\";\u003cbr\u003eimport { makeRandomNumber } from \"../utils\";\u003cbr\u003e\u003cbr\u003efunction Ticker() {\u003cbr\u003e  const [price, setPrice] = useState(0);\u003cbr\u003e  const [color, setColor] = useState(\"black\");\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    // every 1 second, generate a new random price\u003cbr\u003e    const id = setInterval(() =\u0026gt; setPrice(makeRandomNumber), 1000);\u003cbr\u003e    return function () {\u003cbr\u003e      clearInterval(id);\u003cbr\u003e    };\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;TickerMaster\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;h2 style={{ color: color }}\u0026gt;Price: ${price}\u0026lt;/h2\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat we want is a way to set the color based on the change in price between the previous render and the current render. Since we want to change the color based on the price, we can start off by writing out a side effect with the price as the dependency:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  // we need some way to get the prevPrice...\u003cbr\u003e  if (price \u0026gt; prevPrice) {\u003cbr\u003e    setColor(\"green\");\u003cbr\u003e  } else if (price \u0026lt; prevPrice) {\u003cbr\u003e    setColor(\"red\");\u003cbr\u003e  } else {\u003cbr\u003e    setColor(\"black\");\u003cbr\u003e  }\u003cbr\u003e}, [price]); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe still need of persisting the previous price. This is where we can use the \u003ccode\u003euseRef\u003c/code\u003e hook! Since our goal is to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAccess the same data across renders\u003c/li\u003e \u003cli\u003eNot re-render the component when saving this data\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003ccode\u003euseRef\u003c/code\u003e is a good tool for the job. Here's how we'd use it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useEffect, useRef, useState } from \"react\";\u003cbr\u003eimport { makeRandomNumber } from \"../utils\";\u003cbr\u003e\u003cbr\u003efunction Ticker() {\u003cbr\u003e  const [price, setPrice] = useState(0);\u003cbr\u003e  const [color, setColor] = useState(\"black\");\u003cbr\u003e  // create the ref and set its initial value\u003cbr\u003e  const prevPriceRef = useRef(price);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    // use the current value of the ref\u003cbr\u003e    const prevPrice = prevPriceRef.current;\u003cbr\u003e\u003cbr\u003e    console.log({ price, prevPrice });\u003cbr\u003e\u003cbr\u003e    if (price \u0026gt; prevPrice) {\u003cbr\u003e      setColor(\"green\");\u003cbr\u003e    } else if (price \u0026lt; prevPrice) {\u003cbr\u003e      setColor(\"red\");\u003cbr\u003e    } else {\u003cbr\u003e      setColor(\"black\");\u003cbr\u003e    }\u003cbr\u003e    // set the new value of the ref (note: this doesn't trigger a re-render)\u003cbr\u003e    prevPriceRef.current = price;\u003cbr\u003e  }, [price]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    const id = setInterval(() =\u0026gt; setPrice(makeRandomNumber), 1000);\u003cbr\u003e    return function () {\u003cbr\u003e      clearInterval(id);\u003cbr\u003e    };\u003cbr\u003e  }, [price]);\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;TickerMaster\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;h2 style={{ color: color }}\u0026gt;Price: ${price}\u0026lt;/h2\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry using this component in the browser. Explore the component's render cycle by adding some console messages and see how the values in state and in the ref change over time.\u003c/p\u003e  \u003ch2\u003eAccessing DOM Elements\u003c/h2\u003e  \u003cp\u003eOne common use case for the \u003ccode\u003euseRef\u003c/code\u003e hook is to gain access to the actual DOM elements being created by our React components. In general, we want to give React control over the DOM based on the JSX that is returned by our components. However, sometimes it is also useful to gain access to the actual DOM elements for a few uses outside of the React rendering cycle, such as:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eusing a third-party library that needs access to a DOM element\u003c/li\u003e \u003cli\u003eaccessing input values in a non-controlled form\u003c/li\u003e \u003cli\u003esetting focus on an element\u003c/li\u003e \u003cli\u003emeasuring the size of a DOM element\u003c/li\u003e \u003cli\u003eworking with a \u003ccode\u003e\u0026lt;canvas\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e element\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eTo use a ref on a DOM element, we first create the ref using the \u003ccode\u003euseRef\u003c/code\u003e hook, just like before:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Box() {\u003cbr\u003e  const elementRef = useRef();\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;Box\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button\u0026gt;Measure\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, we can attach the ref to a DOM element by adding a special \u003ccode\u003eref\u003c/code\u003e attribute to our JSX:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Box() {\u003cbr\u003e  const elementRef = useRef();\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div ref={elementRef}\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;Box\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button\u0026gt;Measure\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we can access information about that DOM element in our component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Box() {\u003cbr\u003e  const elementRef = useRef();\u003cbr\u003e\u003cbr\u003e  function handleMeasureClick() {\u003cbr\u003e    const div = elementRef.current;\u003cbr\u003e    console.log(\"Measurements: \", div.getBoundingClientRect());\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div ref={elementRef}\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;Box\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleMeasureClick}\u0026gt;Measure\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnother example of using the \u003ccode\u003euseRef\u003c/code\u003e hook to access a DOM element is in the \u003ccode\u003eTickerChart\u003c/code\u003e component. In that example, we're using a \u003ccode\u003e\u0026lt;canvas\u0026gt;\u003c/code\u003e element to draw out a graph of the price changes over time.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eLike \u003ccode\u003euseState\u003c/code\u003e, the \u003ccode\u003euseRef\u003c/code\u003e hooks gives us a variable that will persist across renders of our component. Unlike a \u003cstrong\u003estate variable\u003c/strong\u003e, when we update a \u003cstrong\u003eref variable\u003c/strong\u003e, React will not automatically re-render our component. This makes refs useful for keeping track of persistent data in our components, similar to an instance variable.\u003c/p\u003e  \u003cp\u003eA \u003cstrong\u003eref variable\u003c/strong\u003e can also be used to gain access to DOM elements.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-reference.html#useref\"\u003euseRef\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gab706a61bf97cb2a797d0509556af31a"},{"id":199036,"title":"React Context","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-context\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-context\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-context/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eSo far, we've learned that there is only one way to share data across multiple components: some parent component is responsible for passing down that data to any child components that need it via \u003cstrong\u003eprops\u003c/strong\u003e. However, for large applications where many components need access to the same data, this approach can be a burden.\u003c/p\u003e  \u003cp\u003eThe React Context API, and the \u003ccode\u003euseContext\u003c/code\u003e hook, allows us to share \"global\" data between components without passing that data via props. Libraries like React Router and React Redux take advantage of Context under the hood, so let's see how we can use it in our applications as well!\u003c/p\u003e  \u003ch2\u003eThe Prop Sharing Problem\u003c/h2\u003e  \u003cp\u003eIn this lesson, we have the following components:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp\u003cbr\u003e├── Header\u003cbr\u003e│   ├── ThemeButton\u003cbr\u003e│   └── DarkModeToggle\u003cbr\u003e└── Profile\u003cbr\u003e    └── Interests \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThese components all need access to some shared state, which is currently kept in the App component. Here's a diagram of the state the components share:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp [theme]\u003cbr\u003e├── Header [theme, user]\u003cbr\u003e│   ├── ThemeButton [theme]\u003cbr\u003e│   └── DarkModeToggle [theme]\u003cbr\u003e└── Profile [user]\u003cbr\u003e    └── Interests [theme] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can see, even in this small example, we have several components that need access to the same data.\u003c/p\u003e  \u003cp\u003eIn addition, because of the requirement that we must pass down data from parent to child components, we have a couple of components that take in some data via props, only to pass it along to a child component. For example, looking at the \u003ccode\u003eProfile\u003c/code\u003e component, we can see that it takes in a \u003ccode\u003etheme\u003c/code\u003e prop, even though it doesn't use it directly -- it only needs to take this prop in so that it can pass it down to the \u003ccode\u003eInterests\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// takes theme as a prop\u003cbr\u003efunction Profile({ user, theme }) {\u003cbr\u003e  if (!user) return \u0026lt;h2\u0026gt;Please Login To View Profile\u0026lt;/h2\u0026gt;;\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h2\u0026gt;{user.name}'s Profile\u0026lt;/h2\u0026gt;\u003cbr\u003e      {/* passes theme down to Interests */}\u003cbr\u003e      \u0026lt;Interests interests={user.interests} theme={theme} /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's see how to use React Context to solve this problem.\u003c/p\u003e  \u003ch2\u003eCreating Context\u003c/h2\u003e  \u003cp\u003eIn order to create our context data, we need to create two things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe actual context object\u003c/li\u003e \u003cli\u003eA context provider component\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eLet's start by creating the context for our \u003ccode\u003euser\u003c/code\u003e data. To organize our context code, make a new file called \u003ccode\u003e/src/context/user.js\u003c/code\u003e. Then, create our context:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/context/user.js\u003cbr\u003eimport React from \"react\";\u003cbr\u003e\u003cbr\u003econst UserContext = React.createContext(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter creating the context object, we need a special \"provider\" component that will give access to the context data to its child components. Here's how we can set up the context provider:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/context/user.js\u003cbr\u003eimport React from \"react\";\u003cbr\u003e\u003cbr\u003e// create the context\u003cbr\u003econst UserContext = React.createContext();\u003cbr\u003e\u003cbr\u003e// create a provider component\u003cbr\u003efunction UserProvider({ children }) {\u003cbr\u003e  // the value prop of the provider will be our context data\u003cbr\u003e  // this value will be available to child components of this provider\u003cbr\u003e  return \u0026lt;UserContext.Provider value={null}\u0026gt;{children}\u0026lt;/UserContext.Provider\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport { UserContext, UserProvider }; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith our context created, and our provider component all set up, let's see how we can use this context data from other components.\u003c/p\u003e  \u003ch2\u003eUsing Context\u003c/h2\u003e  \u003cp\u003eIn order to give our components access to the context data, we must first use the provider component to wrap around any component that need access to the context. Based on our component hierarchy, the \u003ccode\u003eHeader\u003c/code\u003e and \u003ccode\u003eProfile\u003c/code\u003e components both need access to the \u003ccode\u003euser\u003c/code\u003e data in our context:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp [theme]\u003cbr\u003e├── Header [theme, user]\u003cbr\u003e│   ├── ThemeButton [theme]\u003cbr\u003e│   └── DarkModeToggle [theme]\u003cbr\u003e└── Profile [user]\u003cbr\u003e    └── Interests [theme] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo let's update the \u003ccode\u003eApp\u003c/code\u003e component with the \u003ccode\u003eUserProvider\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003eimport Header from \"./Header\";\u003cbr\u003eimport Profile from \"./Profile\";\u003cbr\u003e// import the provider\u003cbr\u003eimport { UserProvider } from \"../context/user\";\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  const [theme, setTheme] = useState(\"dark\");\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;main className={theme}\u0026gt;\u003cbr\u003e      {/* wrap components that need access to context data in the provider*/}\u003cbr\u003e      \u0026lt;UserProvider\u0026gt;\u003cbr\u003e        \u0026lt;Header theme={theme} setTheme={setTheme} /\u0026gt;\u003cbr\u003e        \u0026lt;Profile theme={theme} /\u0026gt;\u003cbr\u003e      \u0026lt;/UserProvider\u0026gt;\u003cbr\u003e    \u0026lt;/main\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou'll notice we also removed the \u003ccode\u003euser\u003c/code\u003e prop from these components, since we'll be accessing that data via context instead.\u003c/p\u003e  \u003cp\u003eNext, in order to access the context data from our components, we can use the \u003ccode\u003euseContext\u003c/code\u003e hook. This is another hook that's built into React, and it lets us access the \u003ccode\u003evalue\u003c/code\u003e of our context provider in any child component. Here's how it looks:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// import the useContext hook\u003cbr\u003eimport React, { useContext } from \"react\";\u003cbr\u003e// import the UserContext we created\u003cbr\u003eimport { UserContext } from \"../context/user\";\u003cbr\u003eimport Interests from \"./Interests\";\u003cbr\u003e\u003cbr\u003efunction Profile({ theme }) {\u003cbr\u003e  // call useContext with our UserContext\u003cbr\u003e  const user = useContext(UserContext);\u003cbr\u003e\u003cbr\u003e  // now, we can use the user object just like we would if it was passed as a prop!\u003cbr\u003e  console.log(user);\u003cbr\u003e  if (!user) return \u0026lt;h2\u0026gt;Please Login To View Profile\u0026lt;/h2\u0026gt;;\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h2\u0026gt;{user.name}'s Profile\u0026lt;/h2\u0026gt;\u003cbr\u003e      \u0026lt;Interests interests={user.interests} theme={theme} /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can test this out by updating the \u003ccode\u003evalue\u003c/code\u003e prop in our \u003ccode\u003eUserProvider\u003c/code\u003e to something different, and see that the \u003ccode\u003eProfile\u003c/code\u003e component has access to the updated data:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction UserProvider({ children }) {\u003cbr\u003e  const currentUser = {\u003cbr\u003e    name: \"Duane\",\u003cbr\u003e    interests: [\"Coding\", \"Biking\", \"Words ending in 'ing'\"],\u003cbr\u003e  };\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;UserContext.Provider value={currentUser}\u0026gt;{children}\u0026lt;/UserContext.Provider\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's hook up the \u003ccode\u003eHeader\u003c/code\u003e component to our context as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useContext } from \"react\";\u003cbr\u003eimport ThemedButton from \"./ThemedButton\";\u003cbr\u003eimport DarkModeToggle from \"./DarkModeToggle\";\u003cbr\u003eimport defaultUser from \"../data\";\u003cbr\u003eimport { UserContext } from \"../context/user\";\u003cbr\u003e\u003cbr\u003efunction Header({ theme, setTheme }) {\u003cbr\u003e  const user = useContext(UserContext);\u003cbr\u003e\u003cbr\u003e  function handleLogin() {\u003cbr\u003e    if (user) {\u003cbr\u003e      // setUser(null);\u003cbr\u003e    } else {\u003cbr\u003e      // setUser(defaultUser);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;header\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;React Context\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;nav\u0026gt;\u003cbr\u003e        \u0026lt;ThemedButton onClick={handleLogin} theme={theme}\u0026gt;\u003cbr\u003e          {user ? \"Logout\" : \"Login\"}\u003cbr\u003e        \u0026lt;/ThemedButton\u0026gt;\u003cbr\u003e        \u0026lt;DarkModeToggle theme={theme} setTheme={setTheme} /\u0026gt;\u003cbr\u003e      \u0026lt;/nav\u0026gt;\u003cbr\u003e    \u0026lt;/header\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOne thing you'll notice is that our \u003ccode\u003eHeader\u003c/code\u003e component also is meant to handle logging in/logging out a user. In the first version of our app, that functionality was available to use in the \u003ccode\u003eApp\u003c/code\u003e component since we had a \u003ccode\u003euser\u003c/code\u003e variable as \u003cstrong\u003estate\u003c/strong\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [theme, setTheme] = useState(\"dark\");\u003cbr\u003e  const [user, setUser] = useState(null);\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;main className={theme}\u0026gt;\u003cbr\u003e      \u0026lt;Header theme={theme} setTheme={setTheme} user={user} setUser={setUser} /\u0026gt;\u003cbr\u003e      \u0026lt;Profile theme={theme} user={user} /\u0026gt;\u003cbr\u003e    \u0026lt;/main\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can re-gain this functionality by setting up the \u003cstrong\u003econtext\u003c/strong\u003e value to be stateful instead!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction UserProvider({ children }) {\u003cbr\u003e  const [user, setUser] = useState(null);\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;UserContext.Provider value={{ user, setUser }}\u0026gt;\u003cbr\u003e      {children}\u003cbr\u003e    \u0026lt;/UserContext.Provider\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince the \u003ccode\u003eUserProvider\u003c/code\u003e component is still just a React component, we can use any hooks we'd like within this component. You could also use the \u003ccode\u003euseEffect\u003c/code\u003e hook in the provider, if you'd like: for example, to have your provider component fetch some data from an API when it loads; or to read some saved data from \u003ccode\u003elocalStorage\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIn the code above, we're using \u003ccode\u003euseState\u003c/code\u003e to create a \u003ccode\u003euser\u003c/code\u003e state variable as well as a setter function. In the \u003ccode\u003eProvider\u003c/code\u003e, we're now using an \u003cstrong\u003eobject\u003c/strong\u003e with \u003ccode\u003euser\u003c/code\u003e and \u003ccode\u003esetUser\u003c/code\u003e as the \u003cstrong\u003evalue\u003c/strong\u003e for our context.\u003c/p\u003e  \u003cp\u003eAfter this update, we can now use the \u003ccode\u003esetUser\u003c/code\u003e function in our \u003ccode\u003eHeader\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Header({ theme, setTheme }) {\u003cbr\u003e  const { user, setUser } = useContext(UserContext);\u003cbr\u003e  function handleLogin() {\u003cbr\u003e    if (user) {\u003cbr\u003e      setUser(null);\u003cbr\u003e    } else {\u003cbr\u003e      setUser(defaultUser);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe'll also need to update the \u003ccode\u003eProfile\u003c/code\u003e component since our context value has changed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Profile({ theme }) {\u003cbr\u003e  const { user } = useContext(UserContext);\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eExercise\u003c/h2\u003e  \u003cp\u003eNow that you've seen one approach to using React Context for our user data, try to implement React Context to handle the \u003ccode\u003etheme\u003c/code\u003e data for the app as well!\u003c/p\u003e  \u003cp\u003eCompleted code for this exercise is in the \u003ccode\u003esolution\u003c/code\u003e branch.\u003c/p\u003e  \u003ch2\u003eA Word of Caution\u003c/h2\u003e  \u003cp\u003eOnce new developers encounter context, it's often tempting to reach for it as a solution to all your React state needs, since it helps save the pain of \"prop drilling\". However, React recommends using context sparingly:\u003c/p\u003e  \u003cp\u003e\u0026gt; Context is primarily used when some data needs to be accessible by many \u0026gt; components at different nesting levels. Apply it sparingly because it makes \u0026gt; component reuse more difficult. \u0026gt; \u0026gt; If you only want to avoid passing some props through many levels, component composition is often a simpler solution than context. \u0026gt; — \u003ca href=\"https://reactjs.org/docs/context.html#before-you-use-context\"\u003eBefore You Use Context\u003c/a\u003e\u003c/p\u003e  \u003cp\u003eKeep this in mind when you're considering adding context to your application. Think about whether or not the data that's being held in context is truly \u003cem\u003eglobal\u003c/em\u003e, and shared by many components.\u003c/p\u003e  \u003cp\u003eThis \u003ca href=\"https://youtu.be/3XaXKiXtNjw\"\u003evideo\u003c/a\u003e by React Router creator Michael Jackson shows an alternative to using context for the sake of saving from props drilling, and demonstrates how to use \u003cem\u003ecomposition\u003c/em\u003e instead.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eReact's Context system gives us a way to share global data across multiple components without needing to pass that data via props. Context should be used sparingly, but it is a helpful tool for simplifying our components and minimizing the need for prop drilling.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/context.html\"\u003eReact Context\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\"\u003euseContext\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://youtu.be/3XaXKiXtNjw\"\u003eUsing Composition Instead of Context\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://kentcdodds.com/blog/application-state-management-with-react\"\u003eApplication State Management with React\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g9b33625d0e5d25a3942fa35e01188a04"},{"id":199037,"title":"Custom Hooks","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-custom-hooks\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-custom-hooks\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-custom-hooks/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eOne of the most powerful features of React hooks is that they give us the ability to share logic and state between multiple components by writing our own \u003cstrong\u003ecustom hooks\u003c/strong\u003e. You've already encountered some custom hooks: the \u003ccode\u003euseParams\u003c/code\u003e and \u003ccode\u003euseHistory\u003c/code\u003e hooks from React Router are hooks that let us access the \u003ccode\u003eparams\u003c/code\u003e and \u003ccode\u003ehistory\u003c/code\u003e objects from React Router in any component we want. In this lesson, you'll learn how to create your own custom hooks by extracting hooks-related logic out of components and into a reusable hook function.\u003c/p\u003e  \u003ch2\u003eSetup\u003c/h2\u003e  \u003cp\u003eThis lesson has some starter code for a blog site using React Router. The data for the blog is saved in a \u003ccode\u003edb.json\u003c/code\u003e file, which we'll serve up using \u003ccode\u003ejson-server\u003c/code\u003e. To get started, run \u003ccode\u003enpm install\u003c/code\u003e. Then, run \u003ccode\u003enpm run server\u003c/code\u003e to run our \u003ccode\u003ejson-server\u003c/code\u003e backend in one terminal tab. Open another terminal tab and run \u003ccode\u003enpm start\u003c/code\u003e to run our React frontend.\u003c/p\u003e  \u003cp\u003eWe'll be focusing on two components: the \u003ccode\u003eHomePage\u003c/code\u003e and \u003ccode\u003eArticlePage\u003c/code\u003e components. Make sure to run the app and familiarize yourself with the code before moving on.\u003c/p\u003e  \u003ch2\u003eExtracting Custom Hooks\u003c/h2\u003e  \u003cp\u003eIn both the \u003ccode\u003eHomePage\u003c/code\u003e and \u003ccode\u003eArticlePage\u003c/code\u003e components, you'll notice that we are using the \u003ccode\u003euseEffect\u003c/code\u003e hook in order to set the document title. The \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\"\u003edocument title\u003c/a\u003e is an important part of any website, because it:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eis displayed in the browser tab\u003c/li\u003e \u003cli\u003eis also displayed in the browser history\u003c/li\u003e \u003cli\u003ehelps with accessibility and SEO\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eSince we have similar logic for updating the title in both of our components (and we might want this functionality in other components as our app grows), this logic is a good candidate for a custom hook! Let's start by creating a new file for our custom hook: \u003ccode\u003e/src/hooks/useDocumentTitle.js\u003c/code\u003e. Let's take the \u003ccode\u003euseEffect\u003c/code\u003e code from the \u003ccode\u003eHomePage\u003c/code\u003e component and place it in that file, inside a function called \u003ccode\u003euseDocumentTitle\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/hooks/useDocumentTitle.js\u003cbr\u003eimport { useEffect } from \"react\";\u003cbr\u003e\u003cbr\u003efunction useDocumentTitle() {\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    document.title = \"Underreacted | Home\";\u003cbr\u003e  }, []);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default useDocumentTitle; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere are a couple important things going on with this custom hook already, so let's review.\u003c/p\u003e  \u003cp\u003eSo far, any time we've wanted to use a React hook (like \u003ccode\u003euseState\u003c/code\u003e or \u003ccode\u003euseEffect\u003c/code\u003e), we've only been able to do so inside of our React components (not inside of any other JavaScript functions). \u003cstrong\u003eCustom hooks also allow us to call React hooks\u003c/strong\u003e, so long as we call our custom hook from a React component.\u003c/p\u003e  \u003cp\u003eAnother important convention to note here: the name of our custom hook starts with the word \u003ccode\u003euse\u003c/code\u003e. This is a signal to React (and ESLint) that our hook should follow the \u003ca href=\"https://reactjs.org/docs/hooks-rules.html\"\u003eRules of Hooks\u003c/a\u003e, and also a signal to other developers that this code is meant to be used as a React hook.\u003c/p\u003e  \u003ch2\u003eUsing our Custom Hook\u003c/h2\u003e  \u003cp\u003eNow that we've extracted this custom hook to its own file, we can import it and use it in our \u003ccode\u003eHomePage\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useEffect, useState } from \"react\";\u003cbr\u003eimport About from \"./About\";\u003cbr\u003eimport ArticleList from \"./ArticleList\";\u003cbr\u003eimport useDocumentTitle from \"../hooks/useDocumentTitle\";\u003cbr\u003e\u003cbr\u003efunction HomePage() {\u003cbr\u003e  // fetch data for posts\u003cbr\u003e\u003cbr\u003e  // set the document title\u003cbr\u003e  useDocumentTitle();\u003cbr\u003e\u003cbr\u003e  // return ...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default HomePage; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter that update, our component should work the same. But now our \u003ccode\u003eHomePage\u003c/code\u003e component doesn't have to worry about the logic for updating the document title: it just needs to call the \u003ccode\u003euseDocumentTitle\u003c/code\u003e hook, which will handle that work.\u003c/p\u003e  \u003cp\u003eUpdating our \u003ccode\u003eArticlePage\u003c/code\u003e component won't quite work with our new custom hook just yet, since the title is dynamic in this component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/ArticlePage.js\u003cbr\u003efunction ArticlePage() {\u003cbr\u003e  //...\u003cbr\u003e\u003cbr\u003e  const pageTitle = post ? `Underreacted | ${post.title}` : \"Underreacted\";\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    // depends on the page title\u003cbr\u003e    document.title = pageTitle;\u003cbr\u003e  }, [pageTitle]);\u003cbr\u003e\u003cbr\u003e  //...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo solve this, we can update our \u003ccode\u003euseDocumentTitle\u003c/code\u003e hook to accept an argument of the page title:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction useDocumentTitle(pageTitle) {\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    document.title = pageTitle;\u003cbr\u003e  }, [pageTitle]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, both our components can use this custom hook by passing in a page title when calling the hook:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/ArticlePage.js\u003cbr\u003efunction ArticlePage() {\u003cbr\u003e  //...\u003cbr\u003e\u003cbr\u003e  const pageTitle = post ? `Underreacted | ${post.title}` : \"Underreacted\";\u003cbr\u003e  useDocumentTitle(pageTitle);\u003cbr\u003e\u003cbr\u003e  //...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// src/components/HomePage.js\u003cbr\u003efunction HomePage() {\u003cbr\u003e  //...\u003cbr\u003e\u003cbr\u003e  useDocumentTitle(\"Underreacted | Home\");\u003cbr\u003e\u003cbr\u003e  //...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eReturning Data from Custom Hooks\u003c/h2\u003e  \u003cp\u003eOne other common piece of logic that is shared between our components is fetching data from our API. Both the \u003ccode\u003eArticlePage\u003c/code\u003e and \u003ccode\u003eHomePage\u003c/code\u003e share some similarities with regards to data fetching:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThey both have a couple state variables related to data fetching (\u003ccode\u003eisLoaded\u003c/code\u003e, \u003ccode\u003eposts\u003c/code\u003e, \u003ccode\u003eposts\u003c/code\u003e)\u003c/li\u003e \u003cli\u003eThey both use the \u003ccode\u003euseEffect\u003c/code\u003e hook to fetch data as a side effect of rendering the component\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBy noticing these similarities, we can recognize what logic is coupled together and what we'd need to extract in order to build out our custom hook.\u003c/p\u003e  \u003cp\u003eLet's start with the \u003ccode\u003eHomePage\u003c/code\u003e component once again. Here's all of the logic that is related to working with our API:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/HomePage.js\u003cbr\u003efunction HomePage() {\u003cbr\u003e  // fetch data for posts\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e  const [posts, setPosts] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setIsLoaded(false);\u003cbr\u003e    fetch(\"http://localhost:4000/posts\")\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((posts) =\u0026gt; {\u003cbr\u003e        setPosts(posts);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  // return ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo start off with, let's take all this code out from our \u003ccode\u003eHomePage\u003c/code\u003e component and create a new custom hook called \u003ccode\u003euseQuery\u003c/code\u003e, for querying data from our API:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/hooks/useQuery.js\u003cbr\u003eimport { useState, useEffect } from \"react\";\u003cbr\u003e\u003cbr\u003efunction useQuery() {\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e  const [posts, setPosts] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setIsLoaded(false);\u003cbr\u003e    fetch(\"http://localhost:4000/posts\")\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((posts) =\u0026gt; {\u003cbr\u003e        setPosts(posts);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default useQuery; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJust like before, we created a new file for our custom hook, and imported the React hooks that our custom hook will use. We also gave our custom hook a name that starts with \u003ccode\u003euse\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eUnlike our previous custom hook, however, we're going to need to get some data back out of this component. Specifically, when we're using this component, we'll need access to two things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethe data returned by the fetch request (\u003ccode\u003eposts\u003c/code\u003e)\u003c/li\u003e \u003cli\u003ethe \u003ccode\u003eisLoaded\u003c/code\u003e state\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBut how can we get this data \u003cstrong\u003eout\u003c/strong\u003e of the custom hook? Well, since a custom hook is \u003cstrong\u003ejust a function\u003c/strong\u003e, all we need to do is have our hook \u003cstrong\u003ereturn\u003c/strong\u003e whatever data we need!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/hooks/useQuery.js\u003cbr\u003eimport { useState, useEffect } from \"react\";\u003cbr\u003e\u003cbr\u003efunction useQuery() {\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e  const [posts, setPosts] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setIsLoaded(false);\u003cbr\u003e    fetch(\"http://localhost:4000/posts\")\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((posts) =\u0026gt; {\u003cbr\u003e        setPosts(posts);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  // return an *object* with the data and isLoaded state\u003cbr\u003e  return {\u003cbr\u003e    posts: posts,\u003cbr\u003e    isLoaded: isLoaded,\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default useQuery; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, in order to use this custom hook, we can call it from our \u003ccode\u003eHomePage\u003c/code\u003e component, and \u003cstrong\u003edestructure\u003c/strong\u003e the return value to get the \u003ccode\u003eposts\u003c/code\u003e and \u003ccode\u003eisLoaded\u003c/code\u003e state out:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport useQuery from \"../hooks/useQuery\";\u003cbr\u003e\u003cbr\u003efunction HomePage() {\u003cbr\u003e  // fetch data for posts\u003cbr\u003e  const { posts, isLoaded } = useQuery();\u003cbr\u003e\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur \u003ccode\u003eHomePage\u003c/code\u003e component is now significantly cleaner, because it no longer has to worry about all the logic related to handling the fetch request and setting state based on the response — all of that logic is now nicely encapsulated in our \u003ccode\u003euseQuery\u003c/code\u003e hook!\u003c/p\u003e  \u003cp\u003eIn order to get this hook to work with the \u003ccode\u003eArticlePage\u003c/code\u003e component as well, we need to refactor it a bit and abstract away the logic that is specific to the \u003ccode\u003eHomePage\u003c/code\u003e component's needs.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// take in the url\u003cbr\u003efunction useQuery(url) {\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e  // rename `posts` to a more generic `data`\u003cbr\u003e  const [data, setData] = useState(null);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setIsLoaded(false);\u003cbr\u003e    fetch(url)\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((data) =\u0026gt; {\u003cbr\u003e        setData(data);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, [url]);\u003cbr\u003e  // the url is now a dependency\u003cbr\u003e  // we want to use the side effect whenever the url changes\u003cbr\u003e\u003cbr\u003e  // return an *object* with the data and isLoaded state\u003cbr\u003e  return { data, isLoaded };\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, to use our more generic version of this hook in the \u003ccode\u003eHomePage\u003c/code\u003e component, we just need to make a couple small changes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction HomePage() {\u003cbr\u003e  const { data: posts, isLoaded } = useQuery(\"http://localhost:4000/posts\");\u003cbr\u003e\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince \u003ccode\u003euseQuery\u003c/code\u003e now accepts a URL for the fetch request, we must pass that URL in when we call the hook. It now also returns an object with a more generic name (\u003ccode\u003edata\u003c/code\u003e), so we can \u003ca href=\"https://wesbos.com/destructuring-renaming\"\u003ere-name that variable\u003c/a\u003e to \u003ccode\u003eposts\u003c/code\u003e when destructuring.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003euseQuery\u003c/code\u003e hook should now also work with our \u003ccode\u003eArticlePage\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction ArticlePage() {\u003cbr\u003e  const { id } = useParams();\u003cbr\u003e  const { data: post, isLoaded } = useQuery(\u003cbr\u003e    `http://localhost:4000/posts/${id}`\u003cbr\u003e  );\u003cbr\u003e\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith our custom hooks in place, the completed versions of the \u003ccode\u003eHomePage\u003c/code\u003e and \u003ccode\u003eArticlePage\u003c/code\u003e components are now both significantly shorter. Also, adding new components to our application that need access to similar functionality is now significantly easier, since we don't have to rewrite that functionality from scratch in each new component.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: While our \u003ccode\u003euseQuery\u003c/code\u003e hook works nicely in this example, there are some optimizations we could make to improve it, such as:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHandling errors with \u003ccode\u003e.catch\u003c/code\u003e and adding an error state\u003c/li\u003e \u003cli\u003eUsing one state variable instead of \u003ca href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\"\u003emultiple state variables\u003c/a\u003e, so that it doesn't re-render more than necessary\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\"\u003eUsing the useReducer hook instead of useState\u003c/a\u003e to manage state transitions\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://flaviocopes.com/javascript-memoization/\"\u003eCaching our fetched data\u003c/a\u003e to prevent unnecessary network requests\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://davidwalsh.name/cancel-fetch\"\u003eCancel the fetch\u003c/a\u003e if the component un-mounts before the fetch is complete\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou're encouraged to try adding a few of these optimizations to this hook yourself! There's also a version of the \u003ccode\u003euseQuery\u003c/code\u003e hook in the solution branch called \u003ccode\u003euseQueryAdvanced\u003c/code\u003e that handles some of these optimizations. However, there are also more advanced solutions out there, such as \u003ca href=\"https://react-query.tanstack.com/\"\u003eReact Query\u003c/a\u003e, that handles this logic (and more) with a pre-built custom hook.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eCreating custom hooks allows us to share stateful logic across multiple components. The ability to use custom hooks lets us create more concise components that are focused more on the UI logic. The React community has also embraced custom hooks in a big way — major libraries like \u003ca href=\"https://react-redux.js.org/api/hooks\"\u003eReact Redux\u003c/a\u003e and \u003ca href=\"https://reactrouter.com/web/api/Hooks\"\u003eReact Router\u003c/a\u003e use custom hooks to provide a lot of their functionality, and there are lots of \u003ca href=\"https://github.com/rehooks/awesome-react-hooks\"\u003ecommunity generated custom hooks\u003c/a\u003e out there to explore and add to your projects!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e","exportId":"g790bb1bbe5dc0a0458447e0eb9d4bc44"}]}],"pages":[{"exportId":"this-is-react","title":"This is React","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"this-is-react-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/this-is-react-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/this-is-react-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/this-is-react-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn the world of web development, there are a number of hip names tossed around -\nAngular, Vue, React. These are some of the front end frameworks that have gained\npopularity over the last few years. These frameworks provide a standardized way\nof creating and deploying parts of web applications. This allows developers to\nput their energy and focus towards designing a good experience for end users of\nthe application.\u003c/p\u003e\n\n\u003cp\u003eThe following lessons are all about just one framework, React. Why learn React?\n\u003ca href=\"https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190\"\u003eIn the last few years, React has surpassed other frameworks in popularity and\ndemand\u003c/a\u003e. For good reason, too! In this lesson, we will discuss what React is and why it is so awesome and useful.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce the React framework at a high level\u003c/li\u003e\n\u003cli\u003eExplain some of the benefits of using React when developing web applications\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWhat is React?\u003c/h2\u003e\n\n\u003cp\u003eThe React framework is built entirely out of JavaScript, using a combination of\ndependencies. Using React might seem significantly different to what you're\nused to when writing vanilla JavaScript (or, in other words, just JavaScript). This is because React provides a\nspecific way to organize and structure the design of a web application.\u003c/p\u003e\n\n\u003cp\u003eUsing JSX, an extension of vanilla JavaScript with a specific syntax, we can\nwrite code that looks very similar to HTML. Snippets of this JSX get separated\nout into components, sort of like building blocks. \u003c/p\u003e\n\n\u003cp\u003eWhen combined, these components form a fully working web application. These\ncomponents let us separate code and functionality in a logical and easy to read\nway, producing highly reusable, independent, chunks.\u003c/p\u003e\n\n\u003ch2\u003eSome of the Awesome Features of React\u003c/h2\u003e\n\n\u003cp\u003eReact is more than JSX and components - React has a lot going on under the\nhood. Just to briefly touch on some of the cool features, React includes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea \u003cstrong\u003evirtual DOM\u003c/strong\u003e, that allows for fast, efficient, content rendering. Great for\nhighly interactive apps;\u003c/li\u003e\n\u003cli\u003ea \u003cstrong\u003edeclarative writing\u003c/strong\u003e structure, allowing you to simply express how your app\nshould look and let React handle updates and underlying data changes;\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBabel\u003c/strong\u003e: an included transpiler that converts modern JavaScript and custom\ncode like JSX into more widely compatible JavaScript;\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eWebpack\u003c/strong\u003e: a 'bundler' that takes all our work, along with any required dependency\ncode, and packages it all up in a single, transferable bundle\u003c/li\u003e\n\u003cli\u003eBuilt in ESLint functionality to help improve our code;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReact also has a recommended tool, \u003ccode\u003ecreate-react-app\u003c/code\u003e, that makes it easy to\ncreate a new React project from scratch. The \u003ccode\u003ecreate-react-app\u003c/code\u003e tool sets up\na preconfigured, default, project, ready to launch with \u003ccode\u003enpm start\u003c/code\u003e. This package\nincludes functionality built to be mobile friendly and progressive. That means apps\nwill work on all modern browsers and mobile devices. \u003c/p\u003e\n\n\u003cp\u003eReact is actively maintained by Facebook, and new features are added regularly! Their \u003ca href=\"https://reactjs.org/\"\u003edocs\u003c/a\u003e are well-written and translated into many languages. Once you have a good grasp on React, you will have the ability to create cutting-edge web applications and sites. Knowing React also opens doors to similar frameworks, such as React Native for building mobile apps.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eYou can imagine a framework is like a car - while it is interesting and useful\nto know how the engine works or how to fix a transmission, it isn't necessary\nfor using the car to get where you want to go. What is necessary is that you\nunderstand how to use the pedals, turn the wheel and change gears.\u003c/p\u003e\n\n\u003cp\u003eFirst, we will be covering what you need to know to use React. Later, we'll go\ninto more detail on the critical parts: the engine under the hood. By the end,\nyou will be able to quickly design and create your own React apps!\u003c/p\u003e","frontPage":false},{"exportId":"component-updating","title":"Component Updating","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-update-lifecycle-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/react-update-lifecycle-readme/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-update-lifecycle-readme\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-update-lifecycle-readme/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eExplain what happens when React renders a component\u003c/li\u003e\n    \u003cli\u003eExplain why \u003ccode\u003erender()\u003c/code\u003e must be idempotent\u003c/li\u003e\n    \u003cli\u003eDescribe the parts of the component lifecycle leading up to and coming after \u003ccode\u003erender()\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"http://www.awesomelyluvvie.com/wp-content/uploads/2014/04/lion-king-circle-of-life.gif\"\u003e\n\u003c/p\u003e\n\u003cp\u003eThe Circle of Life. Who knew learning about the React framework could bring us to the Lion King? As with every creature in the animal kingdom, React components get created and destroyed only once. The majority of their lifetime is spent on updating - that is, reacting to user interactions.\u003c/p\u003e\n\u003cp\u003eWe are kindly provided with 4 lifecycle methods to help us handle updates:\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e, \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e, \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e and \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThese methods always get called in the same order and the \u003ccode\u003erender()\u003c/code\u003e method which renders the React component into the DOM will be called just before \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e, so the actual order of lifecycle methods being called is:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003estatic getDerivedStateFromProps(props, state)\u003c/code\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003eshouldComponentUpdate(nextProps, nextState)\u003c/code\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003erender()\u003c/code\u003e (can access props and state via \u003ccode\u003ethis.props\u003c/code\u003e and \u003ccode\u003ethis.state\u003c/code\u003e - previous props are no longer available)\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003egetSnapshotBeforeUpdate(prevProps, prevState)\u003c/code\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003ccode\u003ecomponentDidUpdate(prevProps, prevState, snapshot)\u003c/code\u003e (can still access current props and state via \u003ccode\u003ethis.props\u003c/code\u003e and \u003ccode\u003ethis.state\u003c/code\u003e and this is the last time previous props and state will be available).\u003c/p\u003e\n    \u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003e\u003ccode\u003estatic getDerivedStateFromProps(props, state)\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis method is called on \u003cem\u003eevery\u003c/em\u003e update, meaning whenever the component is receiving new props from its parent or the component's state has changed. A word of caution: a common mistake here is to assume that the props have changed. Just because the method is called doesn't necessarily mean that the props have changed. It is entirely possible that a parent component has updated and in re-rendering has passed the \u003cem\u003esame\u003c/em\u003e props down to its children. In this case, regular components will still be triggered to update.\u003c/p\u003e\n\u003cp\u003eThis method is for deriving state, meaning you want to modify a component's state based on something in the new props. React's \u003ca href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\"\u003eofficial advice\u003c/a\u003e is that you probably don't need this, and in many cases where it seems necessary, there is often a better solution.\u003c/p\u003e\n\u003ch4\u003e\u003ccode\u003eshouldComponentUpdate(nextProps, nextState)\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method is the odd one out in the lifecycle methods as it doesn't operate on the state, but has a \u003ccode\u003eBoolean\u003c/code\u003e return value determining whether the component should update or not. Its sole use is for custom performance optimization.\u003c/p\u003e\n\u003cp\u003eSay, for instance, you only want a component to update when a value changes past a set threshold, you could use this method to prevent component updating \u003cem\u003euntil\u003c/em\u003e the props meet the requirement.\u003c/p\u003e\n\u003cp\u003eFor general optimization of updating, React recommends an alternative - use \u003ccode\u003eReact.PureComponent\u003c/code\u003e instead of \u003ccode\u003eReact.Component\u003c/code\u003e. From the \u003ca href=\"https://reactjs.org/docs/react-api.html#reactpurecomponent\"\u003eReact reference materials\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e\u0026gt; \"If your React component’s render() function renders the same result given the same props and state, you can use React.PureComponent for a performance boost in some cases.\"\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ePureComponent\u003c/code\u003e does not have access to \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e, because it instead runs its own version. The \u003ccode\u003ePureComponent\u003c/code\u003e checks to see if there are any \u003cem\u003eshallow\u003c/em\u003e changes to props and state and will only update if it registers a difference between the current and next states.\u003c/p\u003e\n\u003cp\u003eWhen your applications start to get really big, using \u003ccode\u003ePureComponent\u003c/code\u003e is useful for stopping un-necessary re-renders and making your website faster.\u003c/p\u003e\n\u003cp\u003eWhen you really want to customize the logic for when to re-render, use \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshouldComponentUpdate(nextProps, nextState) {\u003cbr\u003e  return (this.props.myImportantValue !== nextProps.myImportantValue);\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003erender()\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003erender()\u003c/code\u003e method is the most familiar one to all React developers. In fact, in everyday development, we often end up writing React components that only use the \u003ccode\u003erender()\u003c/code\u003e method! At this stage, the next props and state have become available as \u003ccode\u003ethis.props\u003c/code\u003e and \u003ccode\u003ethis.state\u003c/code\u003e and the component gets rendered into React's virtual DOM.\u003c/p\u003e\n\u003cp\u003eIn a theater, this is when a specific scene in a play is being carried out: no changes are being made to the script or the scenery at this stage, it is purely taking the script the director is happy with and the props that have been laid out, and carrying out the play.\u003c/p\u003e\n\u003ch4\u003e\u003ccode\u003egetSnapshotBeforeUpdate(prevProps, prevState)\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eRight after render, but \u003cem\u003ejust before\u003c/em\u003e React commits content from its virtual DOM to the actual DOM, the \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e method is fired. This method is currently only used to capture information that may be changed after an update. For instance, mouse position and scroll position might be changing rapidly and will change by the time the next lifecycle method is invoked. This method returns either \u003ccode\u003enull\u003c/code\u003e or a value that will be passed into the next method, \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e.\u003c/p\u003e\n\u003ch4\u003e\u003ccode\u003ecomponentDidUpdate(prevProps, prevState, snapshot)\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis method isn't used very often, but it is kind of a look back to the update that just occurred. We will have access to both the current props and previous props, as well as any snapshot info from \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e. A common use case for this would be to update a 3rd party library.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  componentDidUpdate(previousProps, previousState) {\u003cbr\u003e   if (previousProps.height !== this.props.height) {\u003cbr\u003e     someChartLibrary.updateHeight(this.props.height);\u003cbr\u003e   }\u003cbr\u003e  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method can also be used to interact with the DOM, say by adjusting scroll position.\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eThese are all the tools we get to help us decide how to react to changes in our component. The \u003ccode\u003erender()\u003c/code\u003e method is the only one we \u003cem\u003emust\u003c/em\u003e have - everything else is optional. Use these methods sparingly. In the ideal world, we want to have as little of these methods as possible.\u003c/p\u003e\n\u003ch4\u003eUpdating lifecycle methods\u003c/h4\u003e\n\u003cp\u003eNot called on initial render, but always called whenever a subsequent re-render is triggered:\u003c/p\u003e\n\u003ctable\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003epreviousProps\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003epreviousState\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n            \u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ebefore every render\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eNot used often\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003eshouldComponentUpdate\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ebefore every re-render (not initially)\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ecan be used to stop unnecessary re-renders for performance optimization\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ejust before React updates and commits new content to the DOM\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eused rarely; can capture data that may be changing rapidly\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentDidUpdate\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003ejust after a re-render has finished\u003c/td\u003e\n            \u003ctd style=\"text-align: center;\"\u003eany DOM updates following a render (mostly interacting with 3rd party libraries)\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003ecomponentDidUpdate\u003c/code\u003e will actually receive the previous props and state as arguments, as the newly applied state and props can be accessed through \u003ccode\u003ethis.props\u003c/code\u003e and \u003ccode\u003ethis.state\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://media.giphy.com/media/wDOFUCaxyv2XC/giphy.gif\"\u003e\n\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://github.com/learn-co-curriculum/react-rendering\"\u003eReact: Component Specs and Lifecycle\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation\"\u003eIdempotent Operations\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"the-virtual-dom","title":"The Virtual DOM","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"javascript-virtual-dom\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/javascript-virtual-dom/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/javascript-virtual-dom\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/javascript-virtual-dom/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eExplain how React handles DOM updates in a performant manner\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIt Is Not a Virtual DOM\u003c/h2\u003e\n\u003cp\u003eEarlier in the history of React, the term \"Virtual DOM\" was used to explain how React was able to perform better than the traditional DOM.\u003c/p\u003e\n\u003cp\u003eThe term 'Virtual DOM' fails to really explain what is happening and may lead to a misunderstanding of what is happening behind the scenes when React renders.\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/virtual_dom_bad.png\" alt=\"Dan Abramov No Longer Likes Virtual DOM\" width=\"300\"\u003e \u003c/p\u003e\n\u003cp\u003eIn this lesson, we're going to briefly review how React handles updates to the screen. This process is known as Reconciliation\u003c/p\u003e\n\u003ch2\u003eUpdating the DOM\u003c/h2\u003e\n\u003cp\u003eBy now, you should already know what the DOM is: a programmatic representation of the document we see in the browser. In JavaScript applications, DOM elements can be added and changed with code. It's possible to build highly complex websites with hundreds or thousands of DOM elements using plain JavaScript. Maybe more importantly, through the DOM, JavaScript allows us to build highly interactive webpages that update dynamically without refreshing. This can come with some challenges, though.\u003c/p\u003e\n\u003cp\u003eWhen the DOM updates, the browser recalculates CSS, lays out the DOM tree and 'repaints' the display. This typically happens so fast you barely notice. However, on a highly interactive website, or on a website where the JavaScript is updating the DOM excessively, the process of recalculating and repainting the display can result in noticeably poor performance.\u003c/p\u003e\n\u003cp\u003eAny time you want your website or app to update without refreshing, you'll need to update the DOM; there is no avoiding it. However, React has some neat tricks for being smart about these updates.\u003c/p\u003e\n\u003ch2\u003eReconciliation, Briefly\u003c/h2\u003e\n\u003cp\u003eIn React, we know that we write components that return JSX elements. These JSX elements represent DOM elements, and when rendered, become those elements on a webpage.\u003c/p\u003e\n\u003cp\u003eDuring the initial render, React \u003cem\u003ealso\u003c/em\u003e uses these elements to build a 'tree' that \u003cem\u003erepresents\u003c/em\u003e what the DOM currently looks like, referred to as the \u003cstrong\u003ecurrent\u003c/strong\u003e tree. When updates are made that would cause a re-render in React, a \u003cem\u003esecond\u003c/em\u003e tree, the \u003cstrong\u003eworkInProgress\u003c/strong\u003e tree is created, representing what the DOM \u003cem\u003ewill\u003c/em\u003e look like. When all updates are processed, the \u003cstrong\u003eworkInProgress\u003c/strong\u003e tree is used to update the DOM and the \u003cstrong\u003ecurrent\u003c/strong\u003e tree is updated to reflect the new updates.\u003c/p\u003e\n\u003cp\u003eThis is a key part of React's performance optimization - React uses these trees as an intermediate step between updates within components (like a change of state) and updates to the DOM. This helps in two ways:\u003c/p\u003e\n\u003ch3\u003eGrouped Updates\u003c/h3\u003e\n\u003cp\u003eUpdates can be grouped together. By waiting until all updates are processed before committing the \u003cstrong\u003eworkInProgress\u003c/strong\u003e tree to the DOM, excessive repaints are avoided.\u003c/p\u003e\n\u003cp\u003eSay, for instance, you have an app with many components, each colored a shade of blue, and a button, that when pressed, turns all those components to red. When that button is pressed, React will put together a tree containing all the components along with their updated properties, \u003cem\u003eTHEN\u003c/em\u003e commit all the changes to the DOM at once. This only requires one repaint. Without this design, we could end up with code that updates the DOM for each individual part of the app, one repaint for each part.\u003c/p\u003e\n\u003ch3\u003eDiffing Changes\u003c/h3\u003e\n\u003cp\u003eIn addition to grouping updates to the DOM, React can apply a diffing algorithm to quickly see what specific pieces of DOM \u003cem\u003eneed\u003c/em\u003e to be updated and how. This reduces the number of DOM changes that need to be made and lets React be particular in its updates, improving performance.\u003c/p\u003e\n\u003cp\u003eIn plain JavaScript some DOM changes are better than others in terms of performance. For example, say you want to add something inside a \u003ccode\u003eul\u003c/code\u003e in your DOM. Using \u003ccode\u003einnerHTML\u003c/code\u003e will work:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eul.innerHTML += '\u0026lt;li\u0026gt;A final list item\u0026lt;/li\u0026gt;'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut this \u003cem\u003erebuilds\u003c/em\u003e the entire DOM inside \u003ccode\u003ediv\u003c/code\u003e. On the other hand, using \u003ccode\u003eappendChild\u003c/code\u003e would \u003cem\u003enot\u003c/em\u003e cause a rebuild:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet li = document.createElement('li')\u003cbr\u003eli.textContent = 'A final list item'\u003cbr\u003eul.appendChild(li)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReact's diffing algorithm is designed to identify changes between what the current DOM looks like and what it will look like (the \u003cstrong\u003ecurrent\u003c/strong\u003e and \u003cstrong\u003eworkInProgress\u003c/strong\u003e trees). Based on the changes it identifies, different DOM updates will be performed to avoid rebuilding unnecessarily.\u003c/p\u003e\n\u003cp\u003eA more detailed explanation of the steps of this diffing process can be found in \u003ca href=\"https://reactjs.org/docs/reconciliation.html\"\u003eReact's Reconciliation documentation\u003c/a\u003e\n\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThere are some \u003ca href=\"https://www.quora.com/Why-is-Reacts-virtual-DOM-so-much-faster-than-the-real-DOM\"\u003emisconceptions\u003c/a\u003e\n    \u003ca href=\"https://news.ycombinator.com/item?id=9155564\"\u003efloating\u003c/a\u003e\n    \u003ca href=\"https://www.reddit.com/r/javascript/comments/6115ay/why_do_developers_think_the_dom_is_slow/\"\u003earound\u003c/a\u003e regarding the DOM being slow, often related to how frameworks like React can improve performance. While DOM manipulation \u003cem\u003eitself\u003c/em\u003e isn't 'slow,' repainting what is displayed in the browser can be.\n\u003c/p\u003e\n\u003cp\u003eReact can be very smart about handling DOM updates, which improves performance. Primarily, it does this in two ways: grouping DOM updates to prevent excessive repaints and being selective about what specifically needs to update and how.\u003c/p\u003e\n\u003cp\u003eRead more a more in-depth dive on these concepts \u003ca href=\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://reactjs.org/docs/reconciliation.html\"\u003eReconciliation\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\"\u003eInside Fiber: in-depth overview of the new reconciliation algorithm in React\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"presentation-components","title":"Presentation Components","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-presentation-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-presentation-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-presentation-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-presentation-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we will examine a specific \"type\" of React component known as a\n\"presentational\" component.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the benefits of presentational components\u003c/li\u003e\n\u003cli\u003eDescribe how we can add interactivity to presentational components by adding a\ncallback function as a prop\u003c/li\u003e\n\u003cli\u003eExplain how to use stateless functional components\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat makes a component \"presentational\"?\u003c/h2\u003e\n\n\u003cp\u003eThe answer to this question, as you may have guessed, is that a presentational\ncomponent is a component whose primary responsibility is to render some piece of\nthe what user sees. Their job, in other words, is to look good!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/oLz0TmduZsUjm/giphy.gif\" alt=\"I'm So Pretty\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThere is, however, a bit more thinking that we need to do here. Very often when we speak of classes or categories of things in\nthe world of programming, the types or classes that we are discussing are\nactually formalized in the libraries or languages themselves. Think, for example\nof when we declare a React \u003ccode\u003eComponent.\u003c/code\u003e We write \u003ccode\u003eclass SomeComponent extends\nComponent\u003c/code\u003e. Either way, we are creating an actual instance of \u003ccode\u003eComponent\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut here's the rub. When we say that some component is \"presentational\" \u003cem\u003ewe\ndefinitely do not mean\u003c/em\u003e that the component is a formal type or class defined by\nthe React library. There is no such thing as type \u003ccode\u003ePresentationalComponent\u003c/code\u003e in\nthe React library. Rather, what we are dealing with here is simply a useful\n\u003cem\u003econvention\u003c/em\u003e, or, better yet, a \u003cem\u003eprogramming pattern\u003c/em\u003e that coders who have used\nReact have found themselves following over and over again as they compose their\ncomponent-based React UIs.\u003c/p\u003e\n\n\u003cp\u003eSo what defines the presentational component pattern? Here's a list of defining features:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003ePresentational components are primarily concerned with how things look\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIf they are class components, they probably only contain a render method. If\nfunctional, they just return some JSX\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey do not know how to alter the data that they render\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey rarely have any internally changeable \u003ccode\u003estate\u003c/code\u003e properties\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey are best written as stateless functional components\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOkay, so there's our pattern description. Now let's jump into some code and see\nhow presentation components actually look in practice.\u003c/p\u003e\n\n\u003ch2\u003eSurprise, you've already written presentational components!\u003c/h2\u003e\n\n\u003cp\u003eYep, this is true. Think about it. A presentational component is simply a\ncomponent that doesn't know anything about how to get the data it displays. If\nthey are mainly responsible for presentation, then you've been writing them from the\nbeginning. A simple \u003ccode\u003eHelloWorld\u003c/code\u003e component, for example, is almost certainly\npresentational. Let's see if that's right — we'll even give our component\nthe ability to take a prop:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass HelloWorld extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;div className=\"hello-world\"\u0026gt;Hello {this.props.message || 'World' }\u0026lt;/div\u0026gt;;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo does this fit our pattern? Absolutely, it does. Here is a component that does\nnothing but render a piece of our UI; that has no notion of how to fetch or\nreload the \u003ccode\u003emessage\u003c/code\u003e data that it takes in as a \u003ccode\u003eprop\u003c/code\u003e; that has no changeable\nstate; and that only contains a render method. So, I think we can safely say it\nfits the pattern well.\u003c/p\u003e\n\n\u003ch2\u003eGreat, but when would we need such a simple component?\u003c/h2\u003e\n\n\u003cp\u003eGood question! Our \u003ccode\u003eHelloWorld\u003c/code\u003e example is obviously not a very real-world\nexample, but consider this: let's say we are working on a massive web\napplication, and we'd like to standardize as well as place some limits on the\ncharacteristics of the  text inputs used throughout the application's forms.\u003c/p\u003e\n\n\u003cp\u003eIn this case, we could certainly establish a style guide that dictates that all uses of \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e use a specific set of CSS classes,\ndefined in our stylesheets. But this leaves our app open to a lot of human\nerror. We would have to consistently follow the convention over time. And\nwhile we could certainly add props to our inputs by doing something like this --\n\u003ccode\u003e\u0026lt;input className='field' {...props}\u0026gt;\u003c/code\u003e -- we've left the types of props that can\nbe provided to our inputs wide open.\u003c/p\u003e\n\n\u003cp\u003eWith React, we can do much better! Consider this \u003ccode\u003eTextField\u003c/code\u003e component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst defaultLimit = 100\u003cbr\u003e\u003cbr\u003eclass TextField extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        className=\"field field-light\"\u003cbr\u003e        onChange={this.props.onChange}\u003cbr\u003e        maxLength={this.props.limit || defaultLimit}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFirst off, notice that here again, what we have is a component that fits the\npresentational pattern. It's a simple wrapper around an \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e. But look how\npowerful it is! This simple wrapper establishes the CSS classes we will use in\none place for every single input used throughout the app. Think of how easy it\nwould be to change if we later decided we wanted a different look! But that's\nnot all we've accomplished here. The component also establishes a\nstraightforward API for all our text fields consisting of an \u003ccode\u003eonChange\u003c/code\u003e callback --\nbecause in most cases our \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003es are going to need to perform some action\nwhen the users type -- and a \u003ccode\u003elimit\u003c/code\u003e for the amount of characters that a user\ncan enter in the field. So although our presentational component is simple, it\ncan still have a degree of interactivity through the addition of callbacks.\u003c/p\u003e\n\n\u003cp\u003eNow, of course, we can argue about whether wrapping the \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e field in this\nway is a good idea. After all, \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003es are nice simple implementations in\ntheir own right. However, providing a component-based interface to text inputs as we\nhave in the field above can be a great win for simplicity in our app. It\nspecifically defines what we mean by a text input. It defines it in a way that\narguably covers the majority of use-cases we can imagine for a simple text\ninput; and it provides this definition in one place that can be found and\nupdated easily in the future. Win, win, win. Are we beginning to see the power\nof presentational components? Good.\u003c/p\u003e\n\n\u003cp\u003eNow imagine that it's not just the \u003ccode\u003eTextField\u003c/code\u003e that our team has executed in\nthis way, but say we've also defined a \u003ccode\u003e\u0026lt;Header /\u0026gt;\u003c/code\u003e and a \u003ccode\u003e\u0026lt;Footer /\u0026gt;\u003c/code\u003e, as well\nas other more unique and customized modules that are still primarily\npresentational. Imagine further that we've composed the majority of our UI out\nof these simple presentational components -- all of them almost entirely\nstateless, all of them designed to do one thing and one thing well: they just\nreceive \u003ccode\u003eprops\u003c/code\u003e from their parent components and render! That's it. They are\nsimple and beautiful and because they aren't doing much, because they are mostly\nstateless, they have a better chance of remaining blissfully bug free!\u003c/p\u003e\n\n\u003cp\u003eThis is the power and importance of presentational components. They are simple\nand they just work. So therefore we should strive to use them as much as\npossible.\u003c/p\u003e\n\n\u003ch2\u003eThe \"Stateless Functional\" Component \u0026amp; \"Pure\" Functions\u003c/h2\u003e\n\n\u003cp\u003eWhat if I told you we can actually make our presentational components even\nsimpler? Well we can, and here's why: Remember how one of the principles in our\nchecklist for the presentational component pattern was that the component\n(probably) does not have state? Well, if in fact we can create a component that\nhas no state, that means that our component doesn't even really need to be a\nJavaScript object of type \u003ccode\u003eComponent\u003c/code\u003e at all. It can just be a simple function\n— one that takes an input and returns a (portion of) the UI.\u003c/p\u003e\n\n\u003cp\u003eSo what's this look like? Here's our \u003ccode\u003eTextField\u003c/code\u003e component rendered as a\nso-called \"functional stateless\" component (a feature available in React since\nv0.14):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst defaultLimit = 100\u003cbr\u003e\u003cbr\u003econst TextField = (props) =\u0026gt;\u003cbr\u003e  \u0026lt;input\u003cbr\u003e    className=\"field field-light\"\u003cbr\u003e    onChange={props.onChange}\u003cbr\u003e    limit={props.limit || defaultLimit}\u003cbr\u003e  /\u0026gt;;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow isn't that just beautiful? It really is. It's just so concise. We've\ndiscarded all that ugly boilerplate. But it's not only concision that makes this\nbeautiful. By transforming our component into a stateless function, we have made\nour \u003ccode\u003eTextField\u003c/code\u003e component an extremely stable and predictable part of our\napplication.\u003c/p\u003e\n\n\u003cp\u003eThe predictability comes from the fact -- and here we can see the influence of\nthe principles of functional programming on React -- that this function will\nalways return the same UI output if given the same \u003ccode\u003eprops\u003c/code\u003e. There are no state\nvariables here that could be set to different values at different times that\nmight lead the function to return something that we didn't predict. What we have\nhere, then, is what in functional terms is called a \"pure\" or \"referentially\ntransparent\"  function.  Our UI has become just a bit more predictable. And, as\nweb developers who've worked on the front-end, we know what a boon that is,\ndon't we? (To review pure functions at greater length, see \u003ca href=\"https://github.com/learn-co-curriculum/javascript-pure-functions\"\u003ethis\nlesson\u003c/a\u003e on the\ntheme.)\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://en.wikipedia.org/wiki/Software_design_pattern\"\u003e\"Software Design Patterns\"\u003c/a\u003e (Wikipedia)\u003c/li\u003e\n\u003cli\u003eDan Abramov, \u003ca href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\"\u003e\"Presentational and Container Components\"\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/reusable-components.html#stateless-functions\"\u003eStateless Functions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAddendum on Presentational Components\u003c/h2\u003e\n\n\u003cp\u003eReact is an ever evolving framework. Thinking of components as presentational is only\none design pattern available and newer features in React allow for alternative designs.\u003c/p\u003e\n\n\u003cp\u003eWe continue to include this content because it is important as someone new to React\nthat you play around and become more familiar with the different ways you can use\ncomponents. You will be better equipped to understand the newer features of React by\nfirst practicing some patterns that, while no longer emphasized, are closer to \nobject-oriented patterns we've seen previously. Once finished with the materials in\nthis course, we encourage you to visit \u003ca href=\"https://reactjs.org/\"\u003ehttps://reactjs.org/\u003c/a\u003e and \nread up on the newest ways in which we can structure components.\u003c/p\u003e","frontPage":false},{"exportId":"phase-2-code-challenge-instructions","title":"Phase 2 Code Challenge Instructions","type":"WikiPage","content":"\u003cp\u003eBefore you can start working on the code challenge, be sure to follow the steps below:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFind your code challenge in the Phase 2 Milestones module\u003c/li\u003e\n\u003cli\u003eOpen the code challenge assignment and download the linked ZIP file\u003c/li\u003e\n\u003cli\u003eUnzip the file on your computer\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e into the directory in your terminal (after, run \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ls \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;; you should see a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;bin/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory and a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file)\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/start \u0026lt;your-name\u0026gt;\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e from the directory; this will create a new directory called \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e to and open the new \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory in your code editor\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo work on your code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEnsure that you're in the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory\u003c/li\u003e\n\u003cli\u003eFollow the instructions in the \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;README.md \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git add . \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;and \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git commit \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;inside of the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory often as you're working\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo submit the code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNavigate to the parent directory of \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in your terminal.\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/end \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e, which will create a new file, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in that directory (for example, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;alicia.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e).\u003c/li\u003e\n\u003cli\u003eNavigate back to the code challenge assignment in the Phase 2 Milestones module in Canvas\u003c/li\u003e\n\u003cli\u003eUpload \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;to the assignment and submit\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eReach out to your instructors\u0026nbsp;\u003cstrong\u003eimmediately\u0026nbsp;\u003c/strong\u003eif you run into issues downloading, working on, or uploading your code challenge.\u003c/p\u003e\n\u003cp\u003eUse this video to guide you through these instructions:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube-nocookie.com/embed/3AM3qXUtnQY\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e","frontPage":false},{"exportId":"react-events-crash-course","title":"React Events Crash Course","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-events-crash-course-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-events-crash-course-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-events-crash-course-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-events-crash-course-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll cover the event system in React. The event system is React's way of implementing native HTML events, such as \u003ccode\u003eonclick\u003c/code\u003e, \u003ccode\u003eonkeydown\u003c/code\u003e, \u003ccode\u003eonmousemove\u003c/code\u003e, etc. Before moving forward with this lesson, you should be familiar with HTML events. For a refresher, see: \u003ca href=\"https://www.w3schools.com/js/js_events.asp\"\u003ethis documentation\u003c/a\u003e. \u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eExplain how React events differ from browser events\u003c/li\u003e \u003cli\u003eDescribe how React standardizes events for compatibility\u003c/li\u003e \u003cli\u003eExplain how to use React events in our application\u003c/li\u003e \u003cli\u003eAdd an event handler to a component\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eReact's Event System\u003c/h2\u003e  \u003cp\u003eReact makes use of basic HTML events by wrapping them in something called \u003ccode\u003eSyntheticEvent\u003c/code\u003es. This wrapper allows React to make sure events are handled the same way across all browsers (a.k.a. standardization). Some browsers treat events differently, and by wrapping these events into a consistent API, React makes our lives easier. It's important to keep in mind that they are the \u003cem\u003eexact same events\u003c/em\u003e, just implemented in a consistent way! That means these events also have methods like \u003ccode\u003epreventDefault()\u003c/code\u003e, \u003ccode\u003estopPropagation()\u003c/code\u003e, and so on.\u003c/p\u003e  \u003ch2\u003eHow to add event handlers\u003c/h2\u003e  \u003cp\u003eConsider the following component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Tickler extends React.Component {\u003cbr\u003e\u003cbr\u003e  tickle = () =\u0026gt; {\u003cbr\u003e    console.log('Tee hee!')\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;button\u0026gt;Tickle me!\u0026lt;/button\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have a \u003ccode\u003etickle()\u003c/code\u003e method, but no way to trigger it! This is a perfect time to add an event handler so that we can see the message 'Tee Hee!' in our console. We attach event handlers to an element in React much like basic HTML:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;button onClick={this.tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, this is exactly how we would do this with basic HTML/JS. The only difference being \u003ccode\u003eonClick\u003c/code\u003e in React vs. \u003ccode\u003eonclick\u003c/code\u003e in basic HTML.\u003c/p\u003e  \u003cp\u003eThe handler name is always comprised of \u003ccode\u003eon\u003c/code\u003e, and the event name itself (i.e. \u003ccode\u003eclick\u003c/code\u003e). These are joined together and camel-cased. As you know, the value of the events are \u003cem\u003ecallbacks\u003c/em\u003e (either a reference to a function or an inline function). As a reminder, we pass the \u003cem\u003efunction object itself\u003c/em\u003e and do not invoke the function. We are telling React's event system: \"Hey! Use this thing later if the event associated with it is triggered\".\u003c/p\u003e  \u003cp\u003eNow, when we click the button, we see a message in our console. Awesome! Going back to the \u003ca href=\"#tickler-example\"\u003ecomplete example\u003c/a\u003e, let's take a quick look at the method. You will notice our method is an arrow function. \u003cstrong\u003eYou will commonly see React component methods defined with arrow functions.\u003c/strong\u003e This is because we often want to access the \u003ccode\u003ethis\u003c/code\u003e keyword within the methods themselves. \u003c/p\u003e  \u003ch2\u003eMoving Forward\u003c/h2\u003e  \u003cp\u003eThe information above is the bare minimum you need to get started with events in React. As we move forward, we will dive deeper into events and explore how they interact with our React applications on a larger scale.\u003c/p\u003e  \u003cp\u003eThere are a lot of event handlers we can add to an element, for example \u003ccode\u003eonKeyUp\u003c/code\u003e, \u003ccode\u003eonMouseDown\u003c/code\u003e, \u003ccode\u003eonFocus\u003c/code\u003e, \u003ccode\u003eonSubmit\u003c/code\u003e, and many more. Check out the \u003ca href=\"https://reactjs.org/docs/events.html#supported-events\"\u003ecomplete list of supported events\u003c/a\u003e to see what else you can play around with! If you have time, the React event documentation linked below is an excellent resource for mastering the \u003ccode\u003eSyntheticEvent\u003c/code\u003e wrapper.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html\"\u003eReact Synthetic Events\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/handling-events.html\"\u003eHandling Events\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html#supported-events\"\u003eSupported Events\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"modular-code-in-react","title":"Modular Code in React","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-modular-code\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-modular-code/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-modular-code\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-modular-code/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson we'll discuss the ES6 keywords \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e and how they\nallow us to share JavaScript code across multiple files.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Understand why it's important to split up our code into smaller files\u003c/li\u003e\n\u003cli\u003e Learn how \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e support our ability to build modular code\u003c/li\u003e\n\u003cli\u003e Understand the different ways to import and export code\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eModular Code\u003c/h2\u003e\n\n\u003cp\u003eModular code is code that is separated into segments (modules), where each file\nis responsible for a feature or specific functionality.\u003c/p\u003e\n\n\u003cp\u003eDevelopers separate their code into modules for many reasons:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eAdhere to the single-responsiblity principle\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eEach module is responsible for accomplishing a certain piece of\nfunctionality, or adding a specific feature to the application\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eEasier to navigate\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eModules that are separated and clearly named make code more readable for\nother developers\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eEasier to debug\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eBugs have less room to hide in isolated, contained code\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eProduce clean and DRY code\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eModules can be reused and repurposed throughout applications\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eModularizing React Code\u003c/h2\u003e\n\n\u003cp\u003eReact makes the modularization of code easy by introducing the component\nstructure.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Hogwarts extends React.Component {\u003cbr\u003e    render() {\u003cbr\u003e        return (\u003cbr\u003e            \u0026lt;div className=\"Hogwarts\"\u0026gt;\u003cbr\u003e                \"Harry. Did you put your name in the Goblet of Fire?\"\u003cbr\u003e            \u0026lt;/div\u0026gt;\u003cbr\u003e        );\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's standard practice to give each of these components their own file. It is\nnot uncommon to see a React program file tree that looks something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── README.md\u003cbr\u003e├── public\u003cbr\u003e└── src\u003cbr\u003e     ├── App.js\u003cbr\u003e     ├── Hogwarts.js\u003cbr\u003e     └── Houses.js\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith our components separated in their own files, all we have to do is figure\nout how to access the code defined in one file within a different file. Well,\nthis is pretty easy to do in React! Introducing IMPORT EXPORT!\u003c/p\u003e\n\n\u003ch2\u003eImport and Export\u003c/h2\u003e\n\n\u003cp\u003eOn a simplified level, \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e enable us to use code from one file\nin other locations across our projects, which becomes increasingly important as\nwe build out larger applications. Let's look at how we can do this.\u003c/p\u003e\n\n\u003ch4\u003eExport\u003c/h4\u003e\n\n\u003cp\u003eExporting a component, or module of code, allows us to call upon that \u003ccode\u003eexport\u003c/code\u003e\nin other files, and use the embedded code within other modules. There are two\nways to \u003ccode\u003eexport\u003c/code\u003e code in JavaScript: we can use the \u003ccode\u003eexport default\u003c/code\u003e syntax or\nwe can explicitly name our exports.\u003c/p\u003e\n\n\u003ch6\u003eExport Default\u003c/h6\u003e\n\n\u003cp\u003eWe can only use \u003ccode\u003eexport default\u003c/code\u003e once per module. The syntax allows us to\ndisregard naming conventions when we want to import the given module.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/houses/HagridsHouse.js\u003cbr\u003eimport React from 'react';\u003cbr\u003e\u003cbr\u003efunction whoseHouse() {\u003cbr\u003e    console.log(`HAGRID'S HOUSE!`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default whoseHouse;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can then use \u003ccode\u003eimport\u003c/code\u003e to make use of that function elsewhere.\n\u003ccode\u003eexport default\u003c/code\u003e allows us to name the exported code whatever we want when\nimporting it. For example, \u003ccode\u003eimport nameThisAnything from './HagridsHouse.js'\u003c/code\u003e\nwill provide us with the same code as\n\u003ccode\u003eimport whoseHouse from './HagridsHouse.js'\u003c/code\u003e -- which is called aliasing!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport whoseHouse from './HagridsHouse.js'\u003cbr\u003eimport ReactDOM from 'react-dom'\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  return (\u003cbr\u003e    whoseHouse()\u003cbr\u003e    // \u0026gt; `HAGRID'S HOUSE!`,\u003cbr\u003e    document.getElementById('root')\u003cbr\u003e  )\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we can \u003ccode\u003eexport default\u003c/code\u003e functions, we can \u003ccode\u003eexport default\u003c/code\u003e components! like\nso...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/houses/Hufflepuff.js\u003cbr\u003eimport React from 'react';\u003cbr\u003e\u003cbr\u003eexport default class Hufflepuff extends React.Component {\u003cbr\u003e    render() {\u003cbr\u003e        return \u0026lt;div\u0026gt;NOBODY CARES ABOUT US\u0026lt;/div\u0026gt;;\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we can import the entire component to any other file in our application,\nusing whatever naming convention that we see fit:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport HooflePoof from './houses/Hufflepuff.js';\u003cbr\u003e\u003cbr\u003eexport default class Hogwarts extends React.Component {\u003cbr\u003e    render() {\u003cbr\u003e        return (\u003cbr\u003e            \u0026lt;div\u0026gt;\u003cbr\u003e                \u0026lt;HooflePoof /\u0026gt;\u003cbr\u003e                //\u0026gt; Will render `NOBODY CARES ABOUT US`, even though we renamed `Hufflepuff`\u003cbr\u003e                // to `HooflePoof`\u003cbr\u003e            \u0026lt;/div\u0026gt;\u003cbr\u003e        );\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou will commonly see a slightly different way of writing this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport React from 'react'\u003cbr\u003eimport HooflePoof from './houses/Hufflepuff.js'\u003cbr\u003e\u003cbr\u003eclass Hogwarts extends React.Component{\u003cbr\u003e  ...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Hogwarts\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMoving the \u003ccode\u003eexport default\u003c/code\u003e to the bottom can make it easier to find exactly\nwhat a file is exporting.\u003c/p\u003e\n\n\u003ch6\u003eNamed Exports\u003c/h6\u003e\n\n\u003cp\u003eWith named exports, we can export multiple pieces of code from within a module,\nallowing us to call on them explicitly when we \u003ccode\u003eimport\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNamed exports allow us to export several specific things at once:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/houses/Gryffindor.js\u003cbr\u003eexport function colors() {\u003cbr\u003e    console.log('Scarlet and Gold');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction values() {\u003cbr\u003e    console.log('Courage, Bravery, Nerve and Chivalry');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport function gryffMascot() {\u003cbr\u003e    console.log('The Lion');\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can then \u003ccode\u003eimport\u003c/code\u003e exports from a file using their original name, or\nby explicitly assigning them a new one. Let's look at an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport * from './houses/Gryffindor.js'\u003cbr\u003e\u003cbr\u003ecolors()\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\u003cbr\u003e\u003cbr\u003egryffMascot()\u003cbr\u003e// \u0026gt; 'The Lion'\u003cbr\u003e\u003cbr\u003evalues()\u003cbr\u003e// \u0026gt; ReferenceError: values is not defined\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe will go into detail on the \u003ccode\u003eimport\u003c/code\u003e line in just a moment, but briefly: \n\u003ccode\u003eimport * from './houses/Gryffindor.js'\u003c/code\u003e imports everything from \u003ccode\u003e./houses/Gryffindor.js\u003c/code\u003e \nthat is \u003cem\u003eexported\u003c/em\u003e. Since we did not explicitly export \u003ccode\u003evalues\u003c/code\u003e in our \u003ccode\u003eGryffindor.js\u003c/code\u003e \nfile, we were unable to have access to the function in \u003ccode\u003eHogwarts.js\u003c/code\u003e. Other \nimported functions \u003cem\u003ewithin\u003c/em\u003e \u003ccode\u003eHogwarts.js\u003c/code\u003e can still call \u003ccode\u003evalues\u003c/code\u003e, though.\u003c/p\u003e\n\n\u003cp\u003eWe can also move named exports to the bottom of a file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/houses/Gryffindor.js\u003cbr\u003efunction colors() {\u003cbr\u003e  console.log(\"Scarlet and Gold\")\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction values() {\u003cbr\u003e  console.log(\"Courage, Bravery, Nerve and Chivalry\")\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction gryffMascot() {\u003cbr\u003e  console.log(\"The Lion\")\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport {\u003cbr\u003e  colors,\u003cbr\u003e  gryffMascot\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eImport\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eimport\u003c/code\u003e keyword is what enables us to take modules that we've exported and\nuse them in other files throughout our applications. There are many ways to\n\u003ccode\u003eimport\u003c/code\u003e with React, and the method that we use depends on what type of code we\nare trying to access and how we exported it.\u003c/p\u003e\n\n\u003cp\u003eIn order to import a module into another file, we write out the relative path to\nthe file that we are trying to get access to. Let's look at some examples:\u003c/p\u003e\n\n\u003ch4\u003eimport * from\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003eimport * from\u003c/code\u003e imports all of the functions that have been exported from a\ngiven module. This syntax looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport * as GryffFunctions from './houses/Gryffindor.js';\u003cbr\u003e\u003cbr\u003eGryffFunctions.colors();\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have the option to rename the module when we \u003ccode\u003eimport\u003c/code\u003e it, as we did above.\nHowever, importing all of the functions by name is also an option:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport * from './houses/Gryffindor.js'\u003cbr\u003e\u003cbr\u003ecolors()\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eimport {function()} from\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003eimport { function() } from\u003c/code\u003e allows us to grab a specific function by name, and\nuse that function within the body of a new module.\u003c/p\u003e\n\n\u003cp\u003eWe're able to reference the function imported by its previously declared name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport { colors } from './houses/Gryffindor.js';\u003cbr\u003eimport { gryffMascot } from './houses/Gryffindor.js';\u003cbr\u003e\u003cbr\u003ecolors();\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\u003cbr\u003e\u003cbr\u003egryffMascot();\u003cbr\u003e// \u0026gt; 'The Lion'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...or rename it inside of our \u003ccode\u003eimport\u003c/code\u003e statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003eimport { colors } from './houses/Gryffindor.js';\u003cbr\u003eimport { gryffMascot as mascot } from './houses/Gryffindor.js';\u003cbr\u003e\u003cbr\u003ecolors();\u003cbr\u003e// \u0026gt; 'Scarlet and Gold'\u003cbr\u003e\u003cbr\u003emascot();\u003cbr\u003e// \u0026gt; 'The Lion'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eImporting Node Modules\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Hogwarts.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport Gryffindor from './houses/Gryffindor';\u003cbr\u003eimport Ravenclaw from './houses/Ravenclaw';\u003cbr\u003eimport Hufflepuff from './houses/Hufflepuff';\u003cbr\u003eimport Slytherin from './houses/Slytherin';\u003cbr\u003e\u003cbr\u003eexport default class Hogwarts extends React.Component {\u003cbr\u003e    render() {\u003cbr\u003e        return (\u003cbr\u003e            \u0026lt;div\u0026gt;\u003cbr\u003e                \u0026lt;Gryffindor /\u0026gt;\u003cbr\u003e                \u0026lt;Ravenclaw /\u0026gt;\u003cbr\u003e                \u0026lt;Hufflepuff /\u0026gt;\u003cbr\u003e                \u0026lt;Slytherin /\u0026gt;\u003cbr\u003e            \u0026lt;/div\u0026gt;\u003cbr\u003e        );\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a look at the first line of code in this file: \u003ccode\u003eimport React from 'react'\u003c/code\u003e.\nHere, we are referencing the React library's default export. The React library\nis located inside of the \u003ccode\u003enode_modules\u003c/code\u003e directory, a specific folder in\nmany Node projects that holds packages of third-party code.\u003c/p\u003e\n\n\u003ch2\u003eRecap\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e enable us to keep code modular, and use it across\ndifferent files. In addition to being able to \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e default\nfunctions, we can rename and alias \u003ccode\u003eimport\u003c/code\u003es, as well as reference Node Modules\nthat are in our project.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/import\"\u003eMDN Import Documentation\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export\"\u003eMDN Export Documentation\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"props","title":"Props","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-props-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-props-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-props-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-props-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover props in further detail and explore how they help us make our\ncomponents more dynamic and reusable. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how props make our components more dynamic and reusable\u003c/li\u003e\n\u003cli\u003ePass props to a component by adding them as attributes when you render them\u003c/li\u003e\n\u003cli\u003eDeclare default prop values in React\u003c/li\u003e\n\u003cli\u003eRender a component with props and default props\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat are props?\u003c/h2\u003e\n\n\u003cp\u003eProps allow us to pass values into our components. These values can be anything:\nstrings, objects (including arrays and functions), and so on. They give us the\nopportunity to make our components more dynamic, and a \u003cstrong\u003elot more\u003c/strong\u003e reusable.\u003c/p\u003e\n\n\u003cp\u003eFor example, say we have a \u003ccode\u003e\u0026lt;MovieCard /\u0026gt;\u003c/code\u003e component. A movie has a title, a\nposter image, and many other attributes (or \u003cstrong\u003eprop\u003c/strong\u003e-erties!). Let's examine what this \u003ccode\u003e\u0026lt;MovieCard /\u0026gt;\u003c/code\u003e component would look like with \u003cem\u003ehardcoded\u003c/em\u003e data vs. dynamic \u003cem\u003eprop\u003c/em\u003e data:\u003c/p\u003e\n\n\u003ch6\u003eHardcoded:\u003c/h6\u003e\n\u003cpre\u003e\u003ccode\u003eclass MovieCard extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"movie-card\"\u0026gt;\u003cbr\u003e        \u0026lt;img src=\"http://image.tmdb.org/t/p/w342/kqjL17yufvn9OVLyXYpvtyrFfak.jpg\" alt=\"Mad Max: Fury Road\" /\u0026gt;\u003cbr\u003e        \u0026lt;h2\u0026gt;Mad Max: Fury Road\u0026lt;/h2\u0026gt;\u003cbr\u003e        \u0026lt;small\u0026gt;Genres: Action, Adventure, Science Fiction, Thriller\u0026lt;/small\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePassing in props\u003c/h2\u003e\n\n\u003cp\u003eMad Max: Fury Road is a ridiculously good movie, but what if we want to render a\nmovie card for another movie? Do we just write another component? No, that would\nbe silly! Instead, we write our components so that they make use of props, which\nare passed from their parents.\u003c/p\u003e\n\n\u003cp\u003eTo pass props to a component, you add them as attributes when you render them:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst movieTitle = \"Mad Max\"\u003cbr\u003e\u0026lt;MovieCard title={movieTitle} /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe value of a prop is passed in through JSX curly braces. As we read before,\nthis value can be anything: a variable, inline values, functions, etc. If your\nvalue is a hardcoded string, you can pass it in through double quotes instead:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;MovieCard title=\"Mad Max\" /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eArmed with that knowledge, let's update \u003ccode\u003eMovieCard\u003c/code\u003es render method to make use of props:\u003c/p\u003e\n\n\u003ch6\u003eDynamic with Props:\u003c/h6\u003e\n\u003cpre\u003e\u003ccode\u003e// assuming we are rendering a MovieCard component with the following JSX:\u003cbr\u003econst title = \"Mad Max\"\u003cbr\u003econst posterURL = \"http://image.tmdb.org/t/p/w342/kqjL17yufvn9OVLyXYpvtyrFfak.jpg\"\u003cbr\u003econst genresArr = [\"Action\", \"Adventure\", \"Science Fiction\", \"Thriller\"]\u003cbr\u003e\u003cbr\u003e\u0026lt;MovieCard title={title} posterSrc={posterURL} genres={genresArr} /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass MovieCard extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"movie-card\"\u0026gt;\u003cbr\u003e        \u0026lt;img src={this.props.posterSrc} alt={this.props.title} /\u0026gt;\u003cbr\u003e        \u0026lt;h2\u0026gt;{this.props.title}\u0026lt;/h2\u0026gt;\u003cbr\u003e        \u0026lt;small\u0026gt;{this.props.genres.join(', ')}\u0026lt;/small\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, does that not look cleaner and more reusable compared to our hard coded\nexample or what!?\u003c/p\u003e\n\n\u003ch2\u003eDefault values for props\u003c/h2\u003e\n\n\u003cp\u003eLet's switch gears here and imagine we are using our application to render a\nlist of hundreds of movies. Let's also assume the data set we have is not always\nreliable when it comes to the urls of the movie posters. \u003c/p\u003e\n\n\u003cp\u003eIn this case, we want to make sure our component doesn't render as an utter\ndisaster when the data is incomplete. In order to do this, we can use a\n\u003cstrong\u003edefault prop\u003c/strong\u003e to assign a poster url when either a bad one, or none at all,\nis provided. For this example, let's use the poster for Max Headroom as a\ndefault, seeing as it is a perfect placeholder:\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;p align=\"center\"\u0026gt;\n  \u0026lt;img src=\"\u003ca href=\"https://m.media-amazon.com/images/M/MV5BOTJjNzczMTUtNzc5MC00ODk0LWEwYjgtNzdiOTEyZmQxNzhmXkEyXkFqcGdeQXVyNzMzMjU5NDY@._V1_UY268_CR1,0,182,268_AL_.jpg\"\u003ehttps://m.media-amazon.com/images/M/MV5BOTJjNzczMTUtNzc5MC00ODk0LWEwYjgtNzdiOTEyZmQxNzhmXkEyXkFqcGdeQXVyNzMzMjU5NDY@._V1_UY268_CR1,0,182,268_AL_.jpg\u003c/a\u003e\" /\u0026gt;\n\u0026lt;/P\u0026gt;\u003c/p\u003e\n\n\u003cp\u003eInstead of passing in that default poster image in case we don't have one, we\ncan tell our \u003ccode\u003eMovieCard\u003c/code\u003e component to use a default prop \u003cstrong\u003eif the \u003ccode\u003eposter\u003c/code\u003e prop\nwas not provided\u003c/strong\u003e. To do this, we add the \u003ccode\u003edefaultProps\u003c/code\u003e property to our\n\u003ccode\u003eMovieCard\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MovieCard extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"movie-card\"\u0026gt;\u003cbr\u003e        \u0026lt;img src={this.props.posterSrc} alt={this.props.title} /\u0026gt;\u003cbr\u003e        \u0026lt;h2\u0026gt;{this.props.title}\u0026lt;/h2\u0026gt;\u003cbr\u003e        \u0026lt;small\u0026gt;{this.props.genres.join(', ')}\u0026lt;/small\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eMovieCard.defaultProps = {\u003cbr\u003e  posterSrc: 'http://i.imgur.com/bJw8ndW.png'\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, whenever we omit the \u003ccode\u003eposterSrc\u003c/code\u003e prop, or if it's undefined, the\n\u003ccode\u003eMovieCard\u003c/code\u003e component will use this default prop instead. That means we don't\nhave to worry about not passing in a poster all the time — the component will\ntake care of this for us!\u003c/p\u003e\n\n\u003ch2\u003eWhy Use Default Props\u003c/h2\u003e\n\n\u003cp\u003eAn alternative way we could have handled bad urls would be to have \u003ccode\u003eMovieCard\u003c/code\u003e's\nparent component \u003cem\u003echeck\u003c/em\u003e whether the \u003ccode\u003eposterSrc\u003c/code\u003e was valid/present, and then\npass some control value as a prop when it renders \u003ccode\u003eMovieCard\u003c/code\u003e. This is not ideal\ncompared to using a default prop within the \u003ccode\u003eMovieCard\u003c/code\u003e component. \u003c/p\u003e\n\n\u003cp\u003eConsider the following: in React, we want components to encapsulate the\nfunctionality that they \u003cem\u003ecan and should be responsible for\u003c/em\u003e. Should the parent\ncomponent of \u003ccode\u003eMovieCard\u003c/code\u003e be responsible for managing the assignment of a default\nmovie poster source value? In our example, we think not. It makes more sense for\nthe component that is responsible for rendering the movie information and poster\nto handle missing data.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/components-and-props.html#default-prop-values\"\u003eReact Default Prop Values\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"jsx","title":"JSX","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-jsx\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-jsx/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-jsx\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-jsx/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll discuss using JSX, its syntax and how it is works within\nthe context of React components.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eTake a deeper look at JSX\u003c/li\u003e\n\u003cli\u003eExplore some of the unique syntax for JSX\u003c/li\u003e\n\u003cli\u003eUnderstand what is required to write valid JSX code\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is JSX?\u003c/h2\u003e\n\n\u003cp\u003eSimply put, JSX allows us to write HTML-like code in our JavaScript files. JSX\nis a syntax extension of JavaScript that creates a very special and extremely\nproductive marriage between HTML and JS.\u003c/p\u003e\n\n\u003cp\u003eWith JSX, we can write React components in an efficient and expressive manner.\nUltimately, JSX looks a lot like the end result we see in the browser (i.e.\nHTML), and is \u003cem\u003emuch\u003c/em\u003e faster to write, especially when incorporating a lot of\nJavaScript and dynamic content.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/l4HnT4tZzUozNFx4s/giphy.gif\" alt=\"Using JSX\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eImperative vs Declarative Programming\u003c/h2\u003e\n\n\u003cp\u003eJSX uses what is sometimes referred to as a \u003cem\u003edeclarative\u003c/em\u003e style of programming,\nwhereas most of the JavaScript code we've written so far would be considered\n\u003cem\u003eimperative\u003c/em\u003e. This may be the first time you're encountering these terms, but\nthat is okay. To write imperative code is to write code that describes \u003cem\u003ehow\u003c/em\u003e\nsomething is done in detail. To write declarative code is to write \u003cem\u003ewhat\u003c/em\u003e you\nwould like to do.\u003c/p\u003e\n\n\u003cp\u003eTo further explain, imagine you walk into a local restaurant with the intention\nof ordering a sandwich.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eTo order declaratively would be to say something like this: \"I would like one\ntoasted ham and cheese sandwich.\" Rather than worry about the details, you are\njust saying \u003cem\u003ewhat\u003c/em\u003e you want and letting the restaurant staff handle the\ndetails.\u003c/li\u003e\n\u003cli\u003eTo order imperatively would mean saying something like this instead: \"I would\nlike you to take three slices of ham, two slices of cheese and a jar of\nmayonaisse from the refrigerator and place them together on a clean counter.\nPlease also find two slices of bread. Stack the ham, cheese and bread in this\norder: bread, ham, ham, ham, cheese, cheese, bread. Remove the top slice of\nbread and apply a dollop of mayo. Replace top slice of bread and place\ncompleted sandwich in oven at 300 degrees for five minutes, then bring it to\nme on a plate.\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn general (and to the relief of restaurant staff everywhere), we prefer the\ndeclarative approach when speaking unless we are speifically instructing someone\nelse. Most of the JavaScript we've written is considered imperative because our\ncode is made of explicit steps. In plain JavaScript, to render a \u003ccode\u003ediv\u003c/code\u003e element\non the page we might end up writing something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet div = document.createElement('div')\u003cbr\u003ediv.textContent = \"hello world\"\u003cbr\u003edocument.body.appendChild(div)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThree distinct steps are used here. In JSX, however, we just need to write \u003cem\u003ewhat\u003c/em\u003e\nwe want, and allow React to figure things out behind the scenes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;hello world\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReact sees this and understands it to be JSX, \u003cstrong\u003enot HTML\u003c/strong\u003e. While the exact details\nof how it creates the DOM element differ from traditional DOM manipulation, the\nend result is the same: a \u003ccode\u003ediv\u003c/code\u003e element added to the page with the text 'hello\nworld' inside.\u003c/p\u003e\n\n\u003ch2\u003eWhat JSX Looks Like\u003c/h2\u003e\n\n\u003cp\u003eReact components return JSX within their \u003ccode\u003erender()\u003c/code\u003e methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Tweet extends Component {\u003cbr\u003e\u003cbr\u003e  currentTime = () =\u0026gt; new Date().toString()\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"tweet\"\u0026gt;\u003cbr\u003e        \u0026lt;img src=\"http://twitter.com/some-avatar.png\" className=\"tweet__avatar\" /\u0026gt;\u003cbr\u003e        \u0026lt;div className=\"tweet__body\"\u0026gt;\u003cbr\u003e            \u0026lt;p\u0026gt;We are writing this tweet in JSX. Holy moly!\u0026lt;/p\u0026gt;\u003cbr\u003e            \u0026lt;p\u0026gt;{ Math.floor(Math.random()*100)} retweets \u0026lt;/p\u0026gt;\u003cbr\u003e            \u0026lt;p\u0026gt;{ this.currentTime() }\u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa, isn't this interesting? It's HTML, but in our JS... with JS \u003cem\u003einside the\nHTML!\u003c/em\u003e Looking at this code, there are some important things to point out:\u003c/p\u003e\n\n\u003ch4\u003eJSX is \u003cem\u003enot\u003c/em\u003e a String\u003c/h4\u003e\n\n\u003cp\u003eThe JSX in the example is not wrapped in quotes. Think of it as another\ntype in JavaScript. \u003cstrong\u003eWe are not interpolating HTML Strings\u003c/strong\u003e like we do with\nstandard JavaScript DOM manipulation.\u003c/p\u003e\n\n\u003ch4\u003eJSX is the return value of the \u003ccode\u003erender()\u003c/code\u003e method\u003c/h4\u003e\n\n\u003cp\u003eEvery component you use needs a \u003ccode\u003erender()\u003c/code\u003e method that returns some valid JSX.\nAlthough our example displays six lines of JSX, this is done for readability\nonly. The entire return statement is wrapped in parentheses so it is considered\none 'chunk' of JSX code, with \u003cem\u003eone\u003c/em\u003e top level element.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;div  className=\"tweet\"\u0026gt;\u003cbr\u003e    ...\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eJSX Can Include JavaScript\u003c/h4\u003e\n\n\u003cp\u003eWhile writing our pseudo-HTML in JSX, we can also write vanilla JavaScript\n\u003cem\u003ein-line\u003c/em\u003e. We do this by wrapping the JavaScript code in curly braces.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;{ Math.floor(Math.random()*100) } retweets\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;{ this.currentTime() }\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example, we call the \u003ccode\u003eMath.floor()\u003c/code\u003e  and \u003ccode\u003eMath.random()\u003c/code\u003e methods\ndirectly, which will return a random number when the component is rendered.\u003c/p\u003e\n\n\u003cp\u003eWe \u003cem\u003ealso\u003c/em\u003e called a custom function, \u003ccode\u003ecurrentTime()\u003c/code\u003e, which returns the String\nvalue of the current date and time. In our example, because \u003ccode\u003ecurrentTime()\u003c/code\u003e is\nanother method within the Tweet class, we must prepend \u003ccode\u003ecurrentTime()\u003c/code\u003e with\n\u003ccode\u003ethis\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;{ this.currentTime() }\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote on Arrow Functions:\u003c/strong\u003e Syntax is important here! Since we're using an\narrow function for \u003ccode\u003ecurrentTime()\u003c/code\u003e,\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrentTime = () =\u0026gt; new Date().toString()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...we are \u003cem\u003eimplicitly binding\u003c/em\u003e the method to the Tweet class. Getting acquainted with\nusing \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"\u003earrow functions\u003c/a\u003e now will save headaches later.\u003c/p\u003e\n\n\u003cp\u003eAs we get into \u003cem\u003eprops\u003c/em\u003e in React, we sometimes need to call functions like\n\u003ccode\u003ecurrentTime()\u003c/code\u003e in a class \u003cem\u003edifferent from its origin\u003c/em\u003e. When this happens,\n\u003cstrong\u003ewithout the arrow function\u003c/strong\u003e, we often have to explicitly bind methods to the\nclass they are \u003cem\u003eoriginally from\u003c/em\u003e, causing us to write code like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethis.currentTime().bind(this)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWithout the \u003ccode\u003e.bind(this)\u003c/code\u003e, the \u003cem\u003efirst\u003c/em\u003e 'this' will refer to whatever object it\nis in when called, which can be a \u003cem\u003edifferent\u003c/em\u003e component.\u003c/p\u003e\n\n\u003ch4\u003eJSX Cannot Include \u003cem\u003eAll\u003c/em\u003e JavaScript Statements\u003c/h4\u003e\n\n\u003cp\u003eJSX is an extension of JavaScript, wrapping a lot of underlying function calls\nin a syntactically appealing style. This is why JSX code is considered\n\u003cem\u003edeclarative\u003c/em\u003e. When \u003cem\u003ewe're\u003c/em\u003e writing in JSX, it is equivalent to saying \"Make an\nh1 element with this content inside\" and letting React work on the element\ncreation and function calls. Because we follow the proper syntax, React knows\nthat when we write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"header\"\u0026gt;Hello!\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReact must convert this JSX into regular, imperative Javascript when\nit renders the component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eReact.createElement(\"h1\", {id: \"header\"}, \"Hello!\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich is then committed to the actual DOM as an \u003ccode\u003eh1\u003c/code\u003e DOM node. We never need\nto see this - all \u003cem\u003ewe\u003c/em\u003e write is the JSX, \u003ccode\u003e\u0026lt;h1 id=\"header\"\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDue to this, as well as JSX's specific syntax, we aren't able to include just\n\u003cem\u003eany\u003c/em\u003e JavaScript statement. For instance, the following will not work in JSX:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"header\"\u0026gt;{if (true) {\u003cbr\u003e  \"Hello\"\u003cbr\u003e} else {\u003cbr\u003e  \"Goodbye\"\u003cbr\u003e}}\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, the ternary alternative \u003cem\u003edoes\u003c/em\u003e work:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"header\"\u0026gt;{ true ? \"Hello\" : \"Goodbye\" }\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere is an easy work around though - you can call class methods in JSX, and\nwithin these methods, you can include whatever valid JavaScript you'd like.\u003c/p\u003e\n\n\u003ch4\u003eA Component Must Return One JSX Element\u003c/h4\u003e\n\n\u003cp\u003eIn all the lesson examples we've seen so far, each component is returning a\n\u003ccode\u003ediv\u003c/code\u003e that contains content or child elements. However, we can actually use any\nHTML element we would normally use to contain content.  The following are all\nvalid components:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass PlainDiv extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;div\u0026gt;I am one line, so I do not need the parentheses\u0026lt;/div\u0026gt;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Photo extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e        \u0026lt;figure\u0026gt;\u003cbr\u003e          \u0026lt;img className=\"image\" src=\"https://s3.amazonaws.com/ironboard-learn/sunglasses.gif\" /\u0026gt;\u003cbr\u003e          \u0026lt;figcaption\u0026gt;Whoa\u0026lt;/figcaption\u0026gt;\u003cbr\u003e        \u0026lt;/figure\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Table extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;table\u0026gt;\u003cbr\u003e        \u0026lt;tr\u0026gt;\u003cbr\u003e          \u0026lt;th\u0026gt;ID\u0026lt;/th\u0026gt;\u003cbr\u003e          \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u003cbr\u003e        \u0026lt;/tr\u0026gt;\u003cbr\u003e        \u0026lt;tr\u0026gt;\u003cbr\u003e          \u0026lt;th\u0026gt;312213\u0026lt;/th\u0026gt;\u003cbr\u003e          \u0026lt;th\u0026gt;Tim Berners-Lee\u0026lt;/th\u0026gt;  \u003cbr\u003e        \u0026lt;/tr\u0026gt;\u003cbr\u003e      \u0026lt;/table\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass ParentComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;main\u0026gt;\u003cbr\u003e        \u0026lt;PlainDiv /\u0026gt;\u003cbr\u003e        \u0026lt;Photo /\u0026gt;\u003cbr\u003e        \u0026lt;Table /\u0026gt;\u003cbr\u003e      \u0026lt;/main\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach of these is a valid component, but \u003cem\u003eall\u003c/em\u003e of these components have \u003cem\u003eone\u003c/em\u003e\nreturned JSX element that contains everything else. Without an element that\nwraps the returned JSX in a component, we will get an error. There are \u003cem\u003esome\u003c/em\u003e\nexceptions to this, such as \u003ca href=\"https://reactjs.org/docs/fragments.html\"\u003eReact fragments\u003c/a\u003e, but most\noften, we will be using the HTML-like JSX elements.\u003c/p\u003e\n\n\u003ch2\u003eAvoiding Keywords\u003c/h2\u003e\n\n\u003cp\u003eOne thing to note about JSX is that, since we're still writing JavaScript code,\nwe need to avoid using keywords in our code. You might have noticed it already:\nwe're setting HTML classes using the \u003ccode\u003eclassName\u003c/code\u003e attribute (or prop, in React\nterms), instead of \u003ccode\u003eclass\u003c/code\u003e. This is because \u003ccode\u003eclass\u003c/code\u003e is a reserved keyword in\nJavaScript! The same thing is true for the \u003ccode\u003efor\u003c/code\u003e label, which is another keyword\nin JS. If you want to use the HTML \u003ccode\u003efor\u003c/code\u003e attribute, you'd use \u003ccode\u003ehtmlFor\u003c/code\u003e instead.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn the early forms of React, instead of JSX, components returned JavaScript that\nwas much less reader friendly. To create a React element, we would write things\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eReact.createElement(\u003cbr\u003e  'h1',\u003cbr\u003e  {className: 'greeting'},\u003cbr\u003e  'Hello, world!'\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile JSX introduces some new rules we must follow, the benefit is that we can\nwrite code that is semantic and \u003cem\u003edeclarative\u003c/em\u003e. Writing this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 className='greeting'\u0026gt;Hello, world!\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eis just much more pleasant. When we're building complex applications, where\ncomponents can be children of other components, JSX provides a critical boost to\nreadability.\u003c/p\u003e\n\n\u003cp\u003eUltimately, all the JSX code we write will get compiled down to standard\nJavaScript and turn into things like \u003ccode\u003eReact.createElement\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eEvery lab from now on already has the JSX transforming stuff set up for you. You\njust need to run \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm start\u003c/code\u003e to execute the JSX --\u0026gt; React\nrun-able JavaScript process.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eJSX: \u003ca href=\"https://facebook.github.io/react/docs/jsx-in-depth.html\"\u003ehttps://facebook.github.io/react/docs/jsx-in-depth.html\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"events-system","title":"Events System","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-event-system\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-event-system/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-event-system\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-event-system/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover the event system in React.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how React events differ from browser events\u003c/li\u003e\n\u003cli\u003eDescribe how React standardizes events for compatibility\u003c/li\u003e\n\u003cli\u003eExplain how to use React events in our application\u003c/li\u003e\n\u003cli\u003eAdd event handlers to an element\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat's the event system in React?\u003c/h2\u003e\n\n\u003cp\u003eReact has its own event system with special event handlers called \u003ccode\u003eSyntheticEvent\u003c/code\u003e. The reason for having a specific event system instead of using native events is cross-browser compatibility. Some browsers treat events differently, and by wrapping these events into a consistent API, React makes our lives a lot easier. It's important to keep in mind that they are the  \u003cem\u003eexact same events\u003c/em\u003e, just implemented in a consistent way! That means these events also have methods that you can call like \u003ccode\u003epreventDefault()\u003c/code\u003e, \u003ccode\u003estopPropagation()\u003c/code\u003e, and so on.\u003c/p\u003e\n\n\u003ch2\u003eHow to add event handlers\u003c/h2\u003e\n\n\u003cp\u003eConsider the following component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Tickler extends React.Component {\u003cbr\u003e\u003cbr\u003e  tickle = () =\u0026gt; {\u003cbr\u003e    console.log('Tee hee!');\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;button\u0026gt;Tickle me!\u0026lt;/button\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have a \u003ccode\u003etickle()\u003c/code\u003e function, but no way to trigger it! This is a perfect time to add an event handler so that we can see the message in our console. We attach event handlers to an element much like how we'd add a prop. The handler name is always comprised of \u003ccode\u003eon\u003c/code\u003e, and the event name itself — for example \u003ccode\u003eclick\u003c/code\u003e. These are joined together and camel-cased, so if we wanted to add a click handler, we'd call the prop \u003ccode\u003eonClick\u003c/code\u003e. This prop takes a function as a value — it can either be a reference to a method on the class (like our \u003ccode\u003etickle()\u003c/code\u003e method), or an inline function. Most of the time, we'll use a function reference. It looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;button onClick={this.tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, we're passing a function \u003cem\u003ereference\u003c/em\u003e, and not executing the \u003ccode\u003etickle\u003c/code\u003e function. Now, when we click the button, we see a message in our console. Awesome! Going back to the \u003ca href=\"#tickler-example\"\u003ecomplete example\u003c/a\u003e, let's take a quick look at the other code living there. You will notice our \u003ccode\u003etickle()\u003c/code\u003e method is an arrow function. \u003cstrong\u003eYou will commonly see React component methods defined with arrow functions\u003c/strong\u003e. This is because we often want to access the this keyword within the methods themselves. By using an arrow function, we avoid creating a new scope with a different value of \u003ccode\u003ethis\u003c/code\u003e. Note that this is \u003cem\u003enot\u003c/em\u003e required in the above example (since we're not accessing the component's \u003ccode\u003ethis\u003c/code\u003e). Realistically, most methods in a React component class will use \u003ccode\u003ethis\u003c/code\u003e in one way or another, so it's a good idea to get in the habit of writing your methods as arrow functions.\u003c/p\u003e\n\n\u003cp\u003eThere are a lot of event handlers we can add to an element, for example \u003ccode\u003eonKeyUp\u003c/code\u003e, \u003ccode\u003eonMouseDown\u003c/code\u003e, \u003ccode\u003eonFocus\u003c/code\u003e, \u003ccode\u003eonSubmit\u003c/code\u003e, and many more. Check out the \u003ca href=\"https://facebook.github.io/react/docs/events.html#supported-events\"\u003ecomplete list of supported events\u003c/a\u003e to see what else you can play around with!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/events.html\"\u003eReact Synthetic Events\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/events.html#supported-events\"\u003eSupported-events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"babel","title":"Babel","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"babel-and-react\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/babel-and-react/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/babel-and-react\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/babel-and-react/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we'll unpack what \u003cstrong\u003eBabel\u003c/strong\u003e brings to the table when developing React applications.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eLearn what Babel is\u003c/li\u003e\n    \u003cli\u003eLearn how Babel integrates with React\u003c/li\u003e\n    \u003cli\u003eFrame Babel's relative importance at this stage in learning React\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\n    \u003cimg src=\"http://www.ancient-origins.net/sites/default/files/field/image/tower-of-babel-2.jpg\" alt=\"Tower of Babel\"\u003e\n\u003c/p\u003e\n\u003cp\u003eIf you don't have time to procrastinate and \u003ca href=\"https://en.wikipedia.org/wiki/Tower_of_Babel\"\u003eread the wiki\u003c/a\u003e, and want to get on with learning programming, allow us to provide the \u003ca href=\"https://en.wikipedia.org/wiki/TL;DR\"\u003eTL;DR\u003c/a\u003e and why it is relevant to the Babel tool we use:\u003c/p\u003e\n\u003cp\u003eThe Tower of Babel was a colossal construction project long ago. It was being built by a united humanity speaking the same language, with the intention of reaching such heights that heaven itself could be accessed. While it was being constructed, the God in the story, (for debated reasons), afflicted the united humans by confounding their speech. This ensured the once united humanity could no longer communicate. What made this ambitious project possible was that multiple cultures, languages, idioms, etc. were all using \u003cem\u003ea common standard\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eAs you may already know, JavaScript (based on the ECMAScript [ES] standard) is an evolving language. Over time we have had several iterations. For the most part, ECMAScript's evolution has changed to incorporate more features and language constructs over time (think ES6 arrow functions, class syntax, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003econst\u003c/code\u003e vs. their absence in ES5!). This resembled the \"confounded\" state described above. What was needed was a way to move all, various standards of JavaScript usage to the same standard. \u003cstrong\u003eThat\u003c/strong\u003e is what the Babel program does — it makes all JavaSript versions emit a common, standard code.\u003c/p\u003e\n\u003cp\u003eLess metaphorically, Babel gained popularity because it \u003ca href=\"https://stackoverflow.com/questions/43968748/is-babel-a-compiler-or-transpiler\"\u003ecompiled/transpiled\u003c/a\u003e newer ES6 syntax and language features into the older (and more widely deployed, at that time) ES5. This was especially important when ES6 came out because many browsers had not yet updated their JavaScript engines to interpret the new language features of ES6.\u003c/p\u003e\n\u003cp\u003eAs of 2019, you are less likely to encounter browsers \u003cstrong\u003enot\u003c/strong\u003e implementing ES6 syntax. For example, open up your Chrome browser's developer console and attempt to assign \u003ccode\u003elet y = 4; console.log(y)\u003c/code\u003e. Better believe Chrome Boi won't complain!\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://learn-verified.s3.amazonaws.com/chrome-boi-wont-complain.png\" height=\"500\" width=\"300\"\u003e\n    \u003cbr\u003e\n  \u003cem\u003eChrome Boi\u003c/em\u003e\u003c/p\u003e\n\u003ch4\u003eThen why is Babel important?\u003c/h4\u003e\n\u003cp\u003eIf most popular browsers have moved to integrate ES6+ syntax, then why is Babel \"still a thing?\"\u003c/p\u003e\n\u003cp\u003eBabel's competency was in reading in one type of text and making in-place transformations such that another type of text came out. Some developers realized that by processing their code with Babel, they could write code that's terse and convenient and then have Babel turn that code into verbose, compliant JavaScript code.\u003c/p\u003e\n\u003cp\u003eLet's take as an example how non-standard JSX (JSX is a React specific syntax) can be transformed, via Babel, into compliant JavaScript. Succinctly, \u003cstrong\u003eBabel turns JSX into normal JavaScript written with the React library\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar profile = (\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;img src=\"avatar.png\" className=\"profile\" /\u0026gt;\u003cbr\u003e    \u0026lt;h3\u0026gt;{[user.firstName, user.lastName].join(' ')}\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...when the above is run through Babel, we receive the following executable code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar profile = (\u003cbr\u003e  React.createElement(\"div\", null,\u003cbr\u003e  React.createElement(\"img\", { src: \"avatar.png\", className: \"profile\" }),\u003cbr\u003e  React.createElement(\"h3\", null, [user.firstName, user.lastName].join(\" \")))\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eDon't worry if the syntax above is unfamiliar. The sentiment you want to take away is that JSX code in the first block, (which looks like some abomination between HTML and plain JavaScript), was transformed into valid JavaScript syntax in the second block after Babel had a go at it.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWhile you don't \u003cstrong\u003estrictly\u003c/strong\u003e need Babel as a dependency when writing React code, not having it means you have to write in the non-JSX syntax seen in the output above. My fingers think that typing that first one is better (because they're lazy). My brain also likes that JSX paints an HTML picture in my mind's eye. JSX removes the burden on the programmer to calculate an intermediary picture of the DOM in their brain when reading this code. So, we teach and write using the pre-Babel-compiled (first syntax above) JSX in our React applications.\u003c/p\u003e\n\u003ch4\u003eNot Just For JSX\u003c/h4\u003e\n\u003cp\u003eIn addition to the JSX magic it provides, Babel can also compile other features and syntactic sugar that is not yet, or never will be, a part of ECMAScript! One example of this is a Babel plugin that enables the usage of \u003ca href=\"https://babeljs.io/docs/plugins/preset-stage-2/\"\u003elanguage features proposed for ECMAScript, but not yet implemented\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eYou have just been introduced to a tool you likely have not worked directly with before. Luckily, it's straightforward to summarize:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBabel\u003c/strong\u003e enables us to use syntax that browsers won't natively recognize by \u003cstrong\u003epre-compiling\u003c/strong\u003e it into syntax that browsers \u003cem\u003edo\u003c/em\u003e natively recognize. When used with React, this can (and in our case will) include, but not be limited to, digesting JSX.\u003c/p\u003e\n\u003ch2\u003eLooking Forward\u003c/h2\u003e\n\u003cp\u003eThat was a chunk of new information, and we have even more coming up. If this is your first time being exposed to a tool like Babel, treat yourself. Stand up, stretch your legs, look at a real human that's not in meme format: you deserve it. When you come back, we will get started on \u003cstrong\u003eWebpack\u003c/strong\u003e in the following lesson.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"http://babeljs.io/\"\u003eBabel\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"component-lifecycle-overview","title":"Component Lifecycle Overview","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-component-lifecycle-overview\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-component-lifecycle-overview/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-component-lifecycle-overview\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-component-lifecycle-overview/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll describe the phases, as well as the importance, of the\nReact component lifecycle.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDistinguish between props and states as they relate to React components\u003c/li\u003e\n\u003cli\u003eDescribe the three phases of the React component lifecycle\u003c/li\u003e\n\u003cli\u003eDefine lifecycle methods and how they enable the component to react to different events\u003c/li\u003e\n\u003cli\u003eDefine and describe various lifecycle methods\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eComponent Lifecycle\u003c/h2\u003e\n\n\u003cp\u003eReact components have two sets of properties: \u003cstrong\u003eprops\u003c/strong\u003e and \u003cstrong\u003estate\u003c/strong\u003e. Props are\ngiven to the component by its parent. You can think of props as an external\ninfluence that the component has no control over, whereas a component's state is\ninternal to the component. A component's state can change in conjunction to the\nprops changing or when the user interacts with the component.\u003c/p\u003e\n\n\u003cp\u003eThe React framework was designed to enable developers to create complex and\nhighly reactive UIs. This enables the components to quickly adapt to changes\nfrom user interactions or updates in the app. In order to enable this, React\ncomponents go through what we call a \u003cstrong\u003ecomponent lifecycle\u003c/strong\u003e. This is broadly\ndivided into three parts: \u003cstrong\u003ecreation\u003c/strong\u003e, \u003cstrong\u003eupdating\u003c/strong\u003e, and \u003cstrong\u003edeletion\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis means that every single thing you see in applications written in React is\nactually a React component and/or a part of one! For example, if you open a new\nchat window in a website written in React, a \u003ccode\u003eChatWindow\u003c/code\u003e component is\n\u003cstrong\u003ecreated\u003c/strong\u003e. As you are interacting with it and sending messages to your friends -\nthat's the \u003cstrong\u003eupdating\u003c/strong\u003e part. And when you finally close the window, the React\ncomponent gets \u003cstrong\u003edeleted\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt seems all pretty straightforward from the user's perspective, however as\nyou'll soon find out, there's a lot of stuff going on behind the scenes.\u003c/p\u003e\n\n\u003ch2\u003eLifecycle Hooks and Rendering\u003c/h2\u003e\n\n\u003cp\u003eIn order to enable this quick reacting and updating, as a developer, you get\naccess to certain built-in events in the React component lifecycle called\n\u003cstrong\u003elifecycle hooks\u003c/strong\u003e or \u003cstrong\u003elifecycle methods\u003c/strong\u003e. These are opportunities for you to\nchange how the component reacts (or doesn't react) to various changes in your\napp.\u003c/p\u003e\n\n\u003cp\u003eThese methods are called \u003cem\u003elifecycle\u003c/em\u003e methods, because they are called at\ndifferent times in the component's lifecycle - just before it's created, after\nit's created, and when it's about to be deleted.\u003c/p\u003e\n\n\u003cp\u003eThe only required method for a React component to be valid is the \u003ccode\u003erender()\u003c/code\u003e\nmethod which describes what the HTML for the component looks like. There are a\nwhole host of optional methods you can use if you need more control over how the\ncomponent responds to change. The optional methods will be called if you include\ndefinitions for them in a component. Otherwise, React will follow its default\nbehavior.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://i1.wp.com/programmingwithmosh.com/wp-content/uploads/2018/10/Screen-Shot-2018-10-31-at-1.44.28-PM.png\" alt=\"Diagram\"\u003e\u003c/p\u003e\n\n\u003ch2\u003ePre-mounting\u003c/h2\u003e\n\n\u003cp\u003eIt is important to remember that components, at their core, are just JS classes.\nThis means that even before mounting has begun, the class's \u003ccode\u003econstructor\u003c/code\u003e\nfunction is called.\u003c/p\u003e\n\n\u003cp\u003eWhile the \u003ccode\u003econstructor\u003c/code\u003e is not related to mounting to the DOM, it is the first\nfunction called upon the initialization of a component; this makes it useful for\ncreating an initial state for a component.\u003c/p\u003e\n\n\u003ch2\u003eMounting\u003c/h2\u003e\n\n\u003cp\u003eWhen the component is initially created, it gets mounted onto the DOM. It sounds\nmore complicated than it is: the component figures out its initial state and\nrenders its initial JSX onto the page. At the mounting stage, there are two\n\u003cem\u003elifecycle hooks\u003c/em\u003e available to us: \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e, and\n\u003ccode\u003ecomponentDidMount\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter the \u003ccode\u003econstructor\u003c/code\u003e is called, \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e will get\ncalled just \u003cem\u003ebefore\u003c/em\u003e \u003ccode\u003erender\u003c/code\u003e. This method gives us access to any props and\nstate, and can modify and return state before a component is rendered. This\nmethod gets called every time a component renders, including the initial render\nand all subsequent re-renders of content. It is uncommon that we use this hook, though -\neven \u003ca href=\"https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops\"\u003ethe React documentation\u003c/a\u003e mentions that it exists for rare use\ncases. We want to prioritize rendering - adding logic that runs before every\nrender can have an impact on a component's performance. It is more common that\nwe want the component to render \u003cem\u003efirst\u003c/em\u003e so a user sees something on the page\nas soon as possible. Once rendered, we can update state, handle complex logic,\netc...\u003c/p\u003e\n\n\u003cp\u003eIn addition, it may seem useful to have access to both props and state and to\ncompare them before rendering, but if you find yourself in need of this, its\npossible there is a better pattern. If you're comparing props from a parent to\nthe state of a child, you can often avoid this by just putting the state \u003cem\u003ein the\nparent component\u003c/em\u003e and handle the comparison logic in the parent.\u003c/p\u003e\n\n\u003cp\u003eSince the introduction of React 16, \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e is the\n\u003cem\u003eonly\u003c/em\u003e hook that fires before render() during mounting. Any code in this\nlifecycle method is extra code to run \u003cem\u003ebefore\u003c/em\u003e JSX is rendered to the DOM.\u003c/p\u003e\n\n\u003cp\u003eAfter the \u003ccode\u003econstructor\u003c/code\u003e and \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e, \u003ccode\u003erender\u003c/code\u003e is\ninvoked, most often returning JSX so that React can insert it into the DOM.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecomponentDidMount\u003c/code\u003e method will get called just \u003cem\u003eafter\u003c/em\u003e the \u003ccode\u003erender\u003c/code\u003e method.\nYou would use this method to set up any long-running processes or asynchronous\nprocesses such as fetching and updating data. It is better to render and display\n\u003cem\u003esomething\u003c/em\u003e to your user even if all of your data isn't ready yet. Once it \u003cem\u003eis\u003c/em\u003e\nready, React can just re-render and use the API content.\u003c/p\u003e\n\n\u003ch2\u003eUpdating\u003c/h2\u003e\n\n\u003cp\u003eWhenever a component's state or props are changed, it gets re-rendered on the\npage. That's the beauty of React components - they're quick to \u003cem\u003ereact\u003c/em\u003e to\nchanges. A re-render could be triggered when a user interacts with the\ncomponent, or if new data (props or state) is passed in.\u003c/p\u003e\n\n\u003cp\u003eFor example, going back to the chat window example, whenever you press \"send\" on\na message, the \u003ccode\u003eChatWindow\u003c/code\u003e component gets re-rendered as it needs to display an\nextra message. Whenever a re-render is triggered, there is a whole host of\nlifecycle hooks that get called. You can choose to use any of these to decide\nhow your React component should respond to changes.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e is invoked before anything else when\nupdating a component, and again, is available for rare situations where you may\nneed to calculate state changes prior to an update.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method is invoked just before the component is about\nto re-render. At this stage, you can compare the old and new props and state and\nprevent unnecessary re-renders: if the changes in state and/or props don't\nactually alter the component that's being shown to the user, there is no point\n\"repainting\" it as it is an unnecessary performance drain.\u003c/p\u003e\n\n\u003cp\u003eAfter the first two hooks, \u003ccode\u003erender\u003c/code\u003e is called, returning the JSX for React.\nReact uses this JSX to figure out what to display on the page.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eJust\u003c/em\u003e before updating, \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e is invoked. The\n\u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e method returns a 'snapshot' that can be used in the\nfinal update lifecycle method, \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e. This snapshot allows us to\ncapture things like scroll position. This sort of value can possibly change in\nthe small amount of time before \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e is invoked.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e method is called just after the component is rendered\nand updated. It is possible in \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e to take some actions\nwithout triggering a re-render of the component, such as focusing on a specific\nform input.\u003c/p\u003e\n\n\u003cp\u003eYou will have access to the previous props and state as well as the current\nones, and you can use this method to update any third party libraries if they\nhappen to need an update due to the re-render.\u003c/p\u003e\n\n\u003ch2\u003eUnmounting\u003c/h2\u003e\n\n\u003cp\u003eAt the unmounting stage, the component gets deleted and cleared out of the page.\nThe only lifecycle hook at this stage is \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e, which is called\njust before the component gets deleted. This is used to clear out any stuff set\nup in \u003ccode\u003ecomponentDidMount\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example, if you had a component that displays the weather data in your home\ntown, you might have set it up to re-fetch the updated weather information every\n10 seconds in \u003ccode\u003ecomponentDidMount\u003c/code\u003e. When the component gets deleted, you wouldn't\nwant to continue doing this data-fetching, so you'd have to get rid of what was\nset up in \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eImagine a big old oak tree. The tree could be a parent component, each of its\nbranches a child component of the tree, each of its leaves a child component of\nthe branch and so on. Each of the leaves go through a very obvious lifecycle of\nbeing created, changing based on state (changing colour based on the season,\nwithering if there's not enough nutrition being passed down from the parent\nbranch, changing into a leaf with a hole bitten out of it if a caterpillar\nmunches on it), and finally falling down when it's autumn.\u003c/p\u003e\n\n\u003cp\u003eSo as it seems, if you need a lifecycle hook, there's sure to be one for your\nevery need!\u003c/p\u003e\n\n\u003ch4\u003eMounting lifecycle methods\u003c/h4\u003e\n\n\u003cp\u003eCalled once on initial render:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just before \u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e is called for the first time\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eSetting initial state\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eright before the initial render and \u003cstrong\u003eall\u003c/strong\u003e re-renders\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eNot used often\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003erender()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eevery time React updates and commits to the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eWriting JSX for components\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just after mounting\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003esetting up side effects (e.g. creating new DOM elements or setting up asynchronous functions\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch4\u003eUpdating lifecycle methods\u003c/h4\u003e\n\n\u003cp\u003eNot called on initial render, but always called whenever a subsequent re-render is triggered:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ebefore every render\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eNot used often\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003eshouldComponentUpdate\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ebefore every re-render (not initially)\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ecan be used to stop unnecessary re-renders for performance optimization\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ejust before React updates and commits new content to the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eused rarely; can capture data that may be changing rapidly\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentDidUpdate\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003ejust after a re-render has finished\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eany DOM updates following a render (mostly interacting with 3rd party libraries)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eCurrent props and state are always available through \u003ccode\u003ethis.props\u003c/code\u003e and\n\u003ccode\u003ethis.state\u003c/code\u003e. Some of these methods have access to previous props and state, or\nthe next props and state. In these cases, the props and state are being passed\ninto the method by React.\u003c/p\u003e\n\n\u003ch4\u003eDismounting lifecycle method\u003c/h4\u003e\n\n\u003cp\u003eCalled only once, just before the component is removed from the DOM:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentWillUnmount\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003en/a\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just before component is removed from the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003edestroying any side effects set up in componentDidMount\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/component-specs.html\"\u003eReact: Component Specs and Lifecycle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://busypeoples.github.io/post/react-component-lifecycle/\"\u003eUnderstanding the React Component Lifecycle\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-react-router","title":"Introduction to React Router","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-introduction-to-react-router\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-introduction-to-react-router/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-introduction-to-react-router\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-introduction-to-react-router/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eHow client-side routing works\u003c/li\u003e\n\u003cli\u003eWhat the trade-offs are for client-side routing\u003c/li\u003e\n\u003cli\u003eWhat \u003ccode\u003epushState\u003c/code\u003e is\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eClient-Side Routing\u003c/h3\u003e\n\n\u003cp\u003eSo, we have learned about building components, changing state, passing props,\netc... You may be wondering how you can make an app with multiple URLs that\ncontain different components. Not every app is a todo list, tic-tac-toe or a\nspreadsheet. So how do we build an app that allows us to have unique pages for\nthe user to interact with? This is where \u003ccode\u003eClient-Side\u003c/code\u003e routing comes in.  \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eClient-Side\u003c/strong\u003e routing is a different beast than what we are used to with\ntraditional server side routing that comes with \u003cstrong\u003eRails\u003c/strong\u003e, \u003cstrong\u003eSinatra\u003c/strong\u003e, or\n\u003cstrong\u003eNode/Express\u003c/strong\u003e, because we aren't making constant \u003cstrong\u003eHTTP GET\u003c/strong\u003e requests.\u003c/p\u003e\n\n\u003cp\u003eLets say that our \u003cstrong\u003eClient-Side\u003c/strong\u003e app is going to have these routes\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://www.movie-maker-2016/movies/new\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://www.movie-maker-2016/movies\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://www.movie-maker-2016/about\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://www.movie-maker-2016/login\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: these links are examples and do not lead to any website\u003c/p\u003e\n\n\u003cp\u003eOur \u003ccode\u003eserver\u003c/code\u003e's only job is to render the \u003ccode\u003eHTML\u003c/code\u003e. Which will look similar to this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Movie Maker 2016\u0026lt;/title\u0026gt;\u003cbr\u003e    \u0026lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"\u0026gt;\u003cbr\u003e    \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div id=\"container\"\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"./bundle.js\" charset=\"utf-8\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith \u003cstrong\u003eClient-Side\u003c/strong\u003e routing, it is now the responsibility of the\n\u003cstrong\u003eClient-Side-Code\u003c/strong\u003e, rather than the server, to handle the routing, fetching \nand displaying of the data in the browser.\u003c/p\u003e\n\n\u003cp\u003eImagine you've built a personal blog with a navigation that links your home\npage, about page and contact page. With Client-Side routing, you might get all\nthe needed data to render all three pages on the first page load. Then, when a\nuser clicks around your site, the Client-Side router swaps the 'home page'\ncomponent with the 'about page' component and renders faster than it would if\nyou were requesting a separate page from a server.\u003c/p\u003e\n\n\u003cp\u003eClient-Side routing brings with it some great benefits. The major one is\n\u003cem\u003eSpeed\u003c/em\u003e. Since we are only making one request to the server we don't have to\nwait for a round trip server call for each page change. We have everything\nstored on the Client-Side already, so we just notify our Client-Side code to\ndisplay the info as we need it.\u003c/p\u003e\n\n\u003ch3\u003eSingle Page App (SPA)\u003c/h3\u003e\n\n\u003cp\u003eIn \u003cstrong\u003eReact\u003c/strong\u003e we will likely be building an \u003cstrong\u003eSPA\u003c/strong\u003e, or Single Page Application.\nThis means we won't require multiple pages to be loaded from the server, just \nthe original \u003cstrong\u003eGET\u003c/strong\u003e request with our initial HTML, CSS and JS files. This\nrequires us to figure out how to make the experience of Client-Side routing work\nto our advantage.\u003c/p\u003e\n\n\u003cp\u003eThere are a couple of things that we need to take into consideration:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWe want to make sure that we have a URL that displays what the user is doing\nat that moment. So if they are viewing a bio page it might look like this\n\u003ccode\u003ehttps://worlds-best-app/bio\u003c/code\u003e instead of this \u003ccode\u003ehttps://worlds-best-app\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe want a user to be able to use the browser's back and forward buttons with\nease.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe want a user to be able to input a URL into the address bar and navigate to\nthe view they need to see.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis was easy with server side rendering: most MVC frameworks come with this for\nfree, because we just defined the routes, added the actions needed to the\ncontroller and then made a call to the model to get the info we desired.\u003c/p\u003e\n\n\u003ch3\u003eLimits of Client-Side routing\u003c/h3\u003e\n\n\u003cp\u003eSo this all sounds great, but what are the limitations?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLoading of CSS \u0026amp; Javascript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSince we are now loading all of our CSS and Javascript on the initial \u003cstrong\u003eGET\u003c/strong\u003e\n  request it can take a while to load our first page. This can be important as\n  the first page load can take a long time if you have a huge application.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAnalytics\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnalytic tools normally track page views, but an SPA doesn't have pages in the\n  traditional sense, so this makes it harder for Analytical tools to track page\n  views. We will need to add extra scripts to handle this limitation.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThey are much harder to design.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe have to plan out all the possibilities that might happen on the\n\u003cstrong\u003eClient-Side\u003c/strong\u003e; this might feel like we are repeating designs that we have\nalready completed with our server routes and models.\u003c/p\u003e\n\n\u003ch4\u003ePush it, Push it\u003c/h4\u003e\n\n\u003cp\u003eWhen we make server calls we are making a \u003cstrong\u003eGET\u003c/strong\u003e request to a URL and that new\nURL is in our address bar. If we have visited a few different URL's that\ninformation is saved in browser history.\u003c/p\u003e\n\n\u003cp\u003eGo to the JavaScript console in Chrome and type\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewindow.history\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return the following code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHistory { length: 32, state: null, scrollRestoration: \"auto\" };\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe length is how many locations you have visited in this window session.\u003c/p\u003e\n\n\u003cp\u003eNow if you type the following code it will take you to the last location in your\nbrowser history.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewindow.history.back();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo ahead and try it out.\u003c/p\u003e\n\n\u003cp\u003e.............\n............\n..........\u003c/p\u003e\n\n\u003cp\u003eOh good, you're back!! :)\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://i.giphy.com/10VbdHyZElXqso.gif\" alt=\"no you didn't!\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSo that is the JavaScript to emulate the experience of using the back button in\nthe browser toolbar. You can also move forward using\n\u003cstrong\u003ewindow.history.forward()\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith the JavaScript's History API we also have the ability to \u003cstrong\u003epushState()\u003c/strong\u003e to\nthe history entries. This method takes in three parameters: \u003cstrong\u003epushState(state,\ntitle, url)\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003estate object:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is a plain JavaScript object that is associated with the new history\n  entry we are going to create with the \u003cstrong\u003epushState()\u003c/strong\u003e function.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003etitle:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is currently ignored by most browsers and it is safe to just pass an\n  empty string or a title here.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eurl:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is the URL for the new history entry. The browser will not attempt to\n  load this URL after it calls pushState().\u003c/p\u003e\n\n\u003cp\u003eWhy don't we go ahead and create a new url in our browser\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst newState = {\u003cbr\u003e  goal: \"Learn about pushState()\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003ewindow.history.pushState(newState, \"new state\", \"new-state\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should notice that your browser has now changed to show \u003ccode\u003enew-state\u003c/code\u003e at the\nend of your URL address.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and type\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewindow.history.state\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should return\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eObject { goal: \"Learn about pushState()\" }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you now use the \u003cstrong\u003ewindow.history.back()\u003c/strong\u003e function you will not go back to\nthe previous page, but your URL address will return to the original URL address.\nIf you use \u003cstrong\u003ewindow.history.forward()\u003c/strong\u003e you will move back to our new URL that\nends in \u003cstrong\u003enew-state\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe have now successfully implemented a basic version of \u003cstrong\u003eClient-Side\u003c/strong\u003e routing.\u003c/p\u003e\n\n\u003cp\u003eAs we start learning about \u003cstrong\u003eReact Router\u003c/strong\u003e we will start implementing\n\u003cstrong\u003epushState()\u003c/strong\u003e within the context of a \u003cstrong\u003eReact\u003c/strong\u003e app.\u003c/p\u003e\n\n\u003ch2\u003eA Word About Accessibility\u003c/h2\u003e\n\n\u003cp\u003eThe web was designed, from its inception, to be a platform for \u003cem\u003eeveryone\u003c/em\u003e,\nincluding those who need help interacting with it through assistive devices.\nThose requiring captions, inverted contrast, etc. have all been able to\nparticipate in \u003cem\u003eour\u003c/em\u003e web because it was designed with the differently-abled\nin mind \u003cem\u003efrom the beginning\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eCreating accessible sites using SPA-style applications represents an\nadditional challenge. Many tutorials breeze past this consideration.\u003c/p\u003e\n\n\u003cp\u003eDesigning SPA's that work with accessibility in mind proves you that you're not\nonly a superior developer, but a great person. Here's a \u003ca href=\"https://blog.usejournal.com/getting-started-with-web-accessibility-in-react-9e591fdb0d52\"\u003eblog post\u003c/a\u003e on\naccessibility in React.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reacttraining.com/react-router/web/guides/quick-start\"\u003eReact Router Tutorial\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\"\u003eManipulating Browser History\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"declarative-programming","title":"Declarative Programming","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-declarative-programming\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-declarative-programming/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-declarative-programming\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-declarative-programming/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll discuss the concept of declarative programming in the context of the virtual DOM.  \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the difference between declarative and imperative programming\u003c/li\u003e\n\u003cli\u003eDescribe some of the trade-offs of declarative programming\u003c/li\u003e\n\u003cli\u003eDescribe the benefits of declarative programming with respect to React\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003ePainting a house\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/Jg6Z88H8Cc9tm/giphy.gif\" alt=\"That's not how you paint a house\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou may have heard the expressions \u003cstrong\u003eimperative\u003c/strong\u003e and \u003cstrong\u003edeclarative\u003c/strong\u003e programming before. Let's quickly give a 'documentation' style description of each, and follow it up with some real world examples. In wrapping up, we will relate it to React's implementation of the Virtual DOM.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e\u003cstrong\u003eImperative Programming:\u003c/strong\u003e\n  - Explicitly describes the actions a program should take\n  - Describes \u003cem\u003ehow\u003c/em\u003e a program should go about doing those actions\n  - example - removing the last element from an array:\n    - \u003cem\u003eaccess\u003c/em\u003e the element at index arr.length - 1 \u003cem\u003efrom this array\u003c/em\u003e and erase it from memory\n    - \u003cem\u003eresize\u003c/em\u003e the array to have 1 less element at the end\n    - \u003cem\u003ereturn\u003c/em\u003e to me this array\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDeclarative Programming:\u003c/strong\u003e\n  - Describes \u003cem\u003ewhat\u003c/em\u003e a program should accomplish (or what the end result should be)\n  - Leaves the determination of \u003cem\u003ehow\u003c/em\u003e to get to the end result up to the program\n  - example - removing the last element from an array:\n    - I have this array: \u003ccode\u003e[1, 2, 3]\u003c/code\u003e\n    - I want an array like that but without the tail element\n    - Make it so, computer.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eNow, let's frame this in a more 'real world' context. Imagine for a second that we're hiring someone to paint our house:\u003c/p\u003e\n\n\u003cp\u003eIn an \u003cstrong\u003eimperative\u003c/strong\u003e world, we'd tell them to open the can of paint, dip their brush in it, and then move the brush in a stroking fashion along the wall. We'd be telling the painter exactly what to do.\u003c/p\u003e\n\n\u003cp\u003eIn a \u003cstrong\u003edeclarative\u003c/strong\u003e world, we would tell the painter \u003cem\u003e\"I want a house with a big ol' cartoon house horrendously smeared across the side of it...Oh! And I've had a tough week so make my day while doing it...\"\u003c/em\u003e, and she'd get it done! Why? Because the painter knows what to do! We don't need to tell her how to apply paint or how to get in and out of costume.\u003c/p\u003e\n\n\u003cp\u003eThis is similar to how we program with React. Let's imagine we have a 'find a hog by weight' component that allows us to filter an array of existing hogs (by weight!). This component can accept a weight to filter by, and displays the matching hog profile pictures in the browser.\u003c/p\u003e\n\n\u003cp\u003eIn our code below (which is a special format that React uses), we don't describe \u003cem\u003ehow\u003c/em\u003e to update the browser (i.e. \"remove that \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, add this \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e, etc.\"). Instead, we provide React with a template of \u003cem\u003ewhat\u003c/em\u003e the component should look like once it is finished being prepared, i.e.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"my-hog-world\" className=\"dank-styling\"\u0026gt;\u003cbr\u003e  { filteredHogsArray.map(hog =\u0026gt; \"\u0026lt;img src=${hog.img}\u0026gt;\") }\u003cbr\u003e  \u0026lt;!-- ^ e.g. show all my hogs in list elements! --\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example above, we are saying: \"When rendered, there should be a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e element with \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e elements for every item in our filteredHogsArray\".\u003c/p\u003e\n\n\u003cp\u003eThis is us interacting in a \u003cstrong\u003edeclarative\u003c/strong\u003e programming manner with React! We neither told it what to explicitly add/delete from the DOM when we wanted something changed, nor did we tell it how to go about changing the DOM. This is perfectly acceptable for React! As we explore more going forward, we will see how this code acts as a template and React does the rest.\u003c/p\u003e\n\n\u003cp\u003eDoesn't a declarative world sound nice? It does to me! We can trust the computer to do what its supposed to in an efficient manner. More and more of the \u003cem\u003ehow to do something\u003c/em\u003e can be abstracted away from us. Perhaps one day, we won't need to think about how to get anything we want. Instead, computers will make \u003cem\u003eall of our decisions for us!\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eThe bee's knees\u003c/h2\u003e\n\n\u003cp\u003eSo, why is this so great? \u003cstrong\u003eDeclarative programming\u003c/strong\u003e allows us to focus on what our React application should look like — as opposed to being concerned with manually updating DOM, adding and removing classes, and so on. That stuff is all done for us in React: we just tell React what the end result should be. It'll do the heavy lifting for us.\u003c/p\u003e\n\n\u003cp\u003eIt's not all sunshine and rainbows though — sometimes the underlying mechanism for transforming our declarative code into actual instructions can suffer from inefficiencies. Fixing this is pretty hard, but luckily, React has done a tremendous job at ensuring that doing something like this is very rarely (or rather, never) necessary.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://stackoverflow.com/questions/33655534/difference-between-declarative-and-imperative-in-react-js\"\u003eDifference between declarative and imperative in React.js?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-npm","title":"Introduction to NPM","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-npm-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/intro-to-npm-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-npm-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-npm-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce Node Package Manager (npm)\u003c/li\u003e\n\u003cli\u003eIntroduce \u003ca href=\"https://www.npmjs.com/\"\u003enpm's online platform\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eEnsure your environment is configured to use npm\u003c/li\u003e\n\u003cli\u003eReview important concepts related to package management in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eJavaScript has been around for many years now, and continues to serve as a\ncritical part of the modern, interactive web. There are web developers all over\nthe world writing JavaScript code, each contributing their own bits of work.\nThat's \u003cem\u003ea lot\u003c/em\u003e of code! In fact, there is a lot of \u003cem\u003eduplicate\u003c/em\u003e code. Multiple\nweb developers, over the years, have solved the same problems over and over.\u003c/p\u003e\n\n\u003cp\u003eFor these situations, we have JavaScript \u003cem\u003epackages\u003c/em\u003e. A package is a file or set\nof files full of existing, \u003cem\u003ereusable\u003c/em\u003e code. They are designed to be shared,\nallowing many web developers to use the same code in their own projects.\u003c/p\u003e\n\n\u003cp\u003eTo help organize these packages in relation to our own work, we use \u003cem\u003enpm\u003c/em\u003e, or\n\u003cem\u003eNode Package Manager\u003c/em\u003e. In this lesson, we will be discussing how npm works and\nwhy it is useful.\u003c/p\u003e\n\n\u003ch2\u003eThe Value of Existing Code\u003c/h2\u003e\n\n\u003cp\u003eWhile it is important that you learn the critical skills to problem solve with\ncode, it is equally important that we learn how to identify existing code that\nsuits our needs and incorporate it into our projects. We don't need to always be\n\u003cem\u003ereinventing the wheel\u003c/em\u003e and writing code that may already exist.\u003c/p\u003e\n\n\u003cp\u003eIn fact, with the amount of developers out in the world, it is likely someone\nelse has not only already invented the same wheel, but tested, upgraded and\ninnovated on it so that it is way better than anything we could write ourselves\nin a short period of time.\u003c/p\u003e\n\n\u003cp\u003eRemember, programming is all about providing a solution to a problem. When 'on\nthe job', so to speak, no one gets bonus points for concocting a novel/clever\nsolution to a problem for which good open source code already existed.\u003c/p\u003e\n\n\u003ch2\u003eSetting Up Node Package Manager\u003c/h2\u003e\n\n\u003cp\u003eBefore we continue, let's make sure your environment is all set to work with\nnpm.\u003c/p\u003e\n\n\u003cp\u003enpm is automatically installed along with \u003cem\u003eNode.js\u003c/em\u003e, which should already be\ninstalled on your system if you've worked through the JavaScript coursework. To\nconfirm you have node installed, enter the following into your command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enode -v\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf a version appears, you have Node.js. If, by chance, you do not have Node.js\ninstalled, you can use the \u003ca href=\"https://github.com/creationix/nvm\"\u003eNode Version Manager\u003c/a\u003e to install Node.js and\nkeep it up to date.\u003c/p\u003e\n\n\u003cp\u003eYou can also double check npm by running the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm -v\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA version number should appear in your terminal. If you'd like, you can update\nnpm by entering the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install --global npm\u003cbr\u003e# or, for short: npm install -g npm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, we've got it installed. But what is npm exactly?\u003c/p\u003e\n\n\u003ch2\u003eNPM Introduction\u003c/h2\u003e\n\n\u003cp\u003eAs mentioned, npm is a package manager for JavaScript. This means that npm works\nwith your JavaScript project directories via the command line, allowing you to\ninstall packages of preexisting code.\u003c/p\u003e\n\n\u003cp\u003eWhat sort of code? All kinds! Some packages are quite small, like\n\u003ca href=\"https://www.npmjs.com/package/isnumber\"\u003eisNumber\u003c/a\u003e, a package that has one function: to check if a value is a\nnumber. Some packages are much more complicated. Huge libraries and frameworks,\nincluding \u003ca href=\"https://www.npmjs.com/package/react\"\u003eReact\u003c/a\u003e and \u003ca href=\"https://expressjs.com/\"\u003eExpress\u003c/a\u003e, are available as npm packages.\nThese larger packages are often \u003cem\u003ethemselves\u003c/em\u003e built using a combination of other\npackages.\u003c/p\u003e\n\n\u003cp\u003eThis modular design, the ability to build a package using other packages, allows\nfor developers to continuously expand the JavaScript universe, creating new,\nmore powerful tools and applications on top of existing, tried and tested code.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003epackage.json\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAll JavaScript labs on Learn.co rely on npm packages for their tests. Many use the\n\u003ccode\u003elearn-browser\u003c/code\u003e npm package, which is built using hundreds of supporting\npackages, including the test framework, \u003ca href=\"https://mochajs.org/\"\u003eMocha\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe lessons themselves don't actually contain all of these packages' code.\nInstead, they contain a list of \u003cem\u003edependencies\u003c/em\u003e in a file called \u003ccode\u003epackage.json\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003epackage.json\u003c/code\u003e file tells you (and \u003ccode\u003enpm\u003c/code\u003e) everything about what packages are\nrequired for a specific JavaScript application, listing out each package name.\u003c/p\u003e\n\n\u003cp\u003eWhen we run the command \u003ccode\u003enpm install\u003c/code\u003e in a directory where a \u003ccode\u003epackage.json\u003c/code\u003e file\nis present, \u003ccode\u003enpm\u003c/code\u003e reads the names of each dependency from the \u003ccode\u003epackage.json\u003c/code\u003e\nfile and downloads the packages from \u003ca href=\"https://www.npmjs.com/\"\u003enpmjs.com\u003c/a\u003e, where they are hosted.\nIt then begins installing those packages - \u003cem\u003eBUT!\u003c/em\u003e those packages also have\n\u003cem\u003etheir own\u003c/em\u003e \u003ccode\u003epackage.json\u003c/code\u003e with their own dependencies! \u003ccode\u003enpm\u003c/code\u003e must also get\nthose packages, and if \u003cem\u003ethose packages\u003c/em\u003e have any dependencies, get them as well.\nSo on and so on. This is what we refer to as a \u003cem\u003edependency tree\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf you are working in a local environment running \u003ccode\u003enpm install\u003c/code\u003e creates a folder\ncalled \u003ccode\u003enode_modules\u003c/code\u003e, which contains all the downloaded packages. \u003cem\u003eNote\u003c/em\u003e: the\n\u003ccode\u003elearn\u003c/code\u003e gem may automatically run \u003ccode\u003enpm install\u003c/code\u003e when you fork a new lesson with\nit.\u003c/p\u003e\n\n\u003cp\u003eWhen building a project from scratch, you may realize you \u003cem\u003eneed\u003c/em\u003e some specific\npackage. We can install packages by running \u003ccode\u003enpm install \u0026lt;package_name\u0026gt;\u003c/code\u003e while\ninside a project directory. If you do not have a correctly structured\n\u003ccode\u003epackage.json\u003c/code\u003e file, the install \u003cem\u003ewill not work\u003c/em\u003e!\u003c/p\u003e\n\n\u003ch2\u003eA Little More on \u003ccode\u003epackage.json\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003epackage.json\u003c/code\u003e file is a key part of sharing JS code repositories on sites\nlike GitHub. Instead of having to include all the dependencies' code with every\nproject, we just include a small file, listing out what npm needs to get for the\nproject.\u003c/p\u003e\n\n\u003cp\u003eThe file also typically includes information about the project, such as the\nname, version, author and license.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003epackage.json\u003c/code\u003e file is written in JSON, so like an object in JavaScript, it\nis always wrapped in curly braces, and includes keys and values. A basic\nexample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e    \"name\": \"intro-to-npm-readme\",\u003cbr\u003e    \"version\": \"1.0.0\",\u003cbr\u003e    \"description\": \"An introduction to npm and package.json\",\u003cbr\u003e    \"main\": \"index.js\",\u003cbr\u003e    \"scripts\": {\u003cbr\u003e        \"test\": \"echo 'hot dog'\"\u003cbr\u003e    },\u003cbr\u003e    \"dependencies\": {\u003cbr\u003e        \"learn-browser\": \"^0.1.17\"\u003cbr\u003e    },\u003cbr\u003e    \"repository\": {\u003cbr\u003e        \"type\": \"git\",\u003cbr\u003e        \"url\": \"git+https://github.com/learn-co-curriculum/intro-to-npm-readme.git\"\u003cbr\u003e    },\u003cbr\u003e    \"author\": \"flatironschool\",\u003cbr\u003e    \"license\": \"ISC\",\u003cbr\u003e    \"bugs\": {\u003cbr\u003e        \"url\": \"https://github.com/learn-co-curriculum/intro-to-npm-readme/issues\"\u003cbr\u003e    },\u003cbr\u003e    \"homepage\":\u003cbr\u003e        \"https://github.com/learn-co-curriculum/intro-to-npm-readme#readme\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn your terminal, if you are in a directory with the above \u003ccode\u003epackage.json\u003c/code\u003e file\npresent, running \u003ccode\u003enpm test\u003c/code\u003e will return \"hot dog.\" This lesson actually does\ninclude this \u003ccode\u003epackage.json\u003c/code\u003e file, so try it for yourself!\u003c/p\u003e\n\n\u003cp\u003eThis works because the command \u003ccode\u003enpm test\u003c/code\u003e is saying: \"Hey npm, look in\n\u003ccode\u003epackage.json\u003c/code\u003e and find the script with the name of 'test', then execute its\nvalue in the terminal.\"\u003c/p\u003e\n\n\u003cp\u003eHaving this file present also means it is possible to install additional packages. There is one dependency already included:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"dependencies\": {\u003cbr\u003e  \"learn-browser\": \"^0.1.17\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning something like \u003ccode\u003enpm install react\u003c/code\u003e will add a second dependency:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"dependencies\": {\u003cbr\u003e  \"learn-browser\": \"^0.1.17\",\u003cbr\u003e  \"react\": \"^16.4.1\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTry it now! Following, take a look to see just how many dependencies (which\nReact relies on) have been added to your \u003ccode\u003enode_modules\u003c/code\u003e directory.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003enpm init\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eSince npm relies on a \u003ccode\u003epackage.json\u003c/code\u003e file, it has a built in command to \u003cem\u003ebuild\u003c/em\u003e\n\u003ccode\u003epackage.json\u003c/code\u003e files. Running \u003ccode\u003enpm init\u003c/code\u003e on the command line will begin a series\nof prompts, asking about specific content to include in the file. At the end, it\nwill create a file or edit an existing \u003ccode\u003epackage.json\u003c/code\u003e file. Very handy when you\nare creating your own projects from scratch!\u003c/p\u003e\n\n\u003ch4\u003eKey Terms\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003enpm - Node Package Manager, a command line tool for handling packages of reusable JavaScript code\u003c/li\u003e\n\u003cli\u003eNode - Node is a JavaScript runtime, allowing JavaScript to be run locally on your computer, instead of in a browser\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eFor all advanced JavaScript lessons, including React and Redux, we rely on npm\nto set up a lot of things 'under the hood'. The applications we build are made\npossible by the contributions of thousands of other coders before us!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRemember!\u003c/strong\u003e While endlessly fun, programming is a means to an end: we have a\nproblem/our employer has a problem, and we give the computer instructions to\ncrush the problem. If available, open, and secure code already exists do not\nhesitate to use it! Compared to physical goods, code snippets have less value\nattributed to novelty (there is a reason you won't see \"artisanal code\" being\nsold on \u003ca href=\"https://etsy.com\"\u003eEtsy\u003c/a\u003e).\u003c/p\u003e","frontPage":false},{"exportId":"component-mounting","title":"Component Mounting","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-component-mounting-lifecycle-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-component-mounting-lifecycle-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-component-mounting-lifecycle-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-component-mounting-lifecycle-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll describe what happens in the mounting and unmounting phases of a React\ncomponent's lifecycle.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe the \u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e and \u003ccode\u003ecomponentDidMount\u003c/code\u003e \nlifecycle methods in the mounting phase\u003c/li\u003e\n\u003cli\u003eDescribe the \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e lifecycle method in the unmounting phase\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eSetup and Cleanup\u003c/h2\u003e\n\n\u003cp\u003eA React component's lifecycle contains distinct phases for creation and\ndeletion. In coding terms, these are called \u003cstrong\u003emounting\u003c/strong\u003e and \u003cstrong\u003eunmounting\u003c/strong\u003e. You\ncan also think of them as \"setup\" and \"cleanup\".\u003c/p\u003e\n\n\u003cp\u003eIf you were going to have a picnic, just before you lay down the picnic blanket\nyou'd make sure the ground was level and clean. Also, after you're done, and\nbefore you clean up your picnic blanket, you'd make sure you've taken all your\nbelongings off it and cleared up any garbage left on the grass so people after\nyou can easily use the same spot.\u003c/p\u003e\n\n\u003cp\u003eThat's very similar to what happens with React components. The browser window is\nalmost like a great big field that loads the components that can be used. And\nwhen they leave, it's only polite of them to clean up the space they were using —\nso that other components can reuse the same space without any annoyances due to\nthings left behind.\u003c/p\u003e\n\n\u003ch2\u003ePre-Mounting\u003c/h2\u003e\n\n\u003ch4\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eTechnically the \u003cstrong\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/strong\u003e is the first function called upon\ninstantiating \u003cstrong\u003eany\u003c/strong\u003e class in JS, not just React Components. That being said,\nthe \u003cstrong\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/strong\u003e has an important role in the life of a component, as it\nacts as a perfect place to set the initial state of a component. Within the\nconstructor, one can initialize state like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass App extends React.Component {\u003cbr\u003e\u003cbr\u003e  constructor() {\u003cbr\u003e    super()\u003cbr\u003e    this.state = {\u003cbr\u003e      key: \"value\"\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn ES7, it is possible to initialize state by simply doing the following inside\nof your component. If you see either the syntax above or below, keep in mind\nthat they accomplish the same task at the same time during the component\nlifecycle.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass App extends React.Component {\u003cbr\u003e  state = {\u003cbr\u003e    key: \"value\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote: Bear in mind that we call \u003ccode\u003esuper\u003c/code\u003e so that we can execute the \u003ccode\u003econstructor\u003c/code\u003e\nfunction that is inherited from React.Component while adding our own\nfunctionality.\u003c/p\u003e\n\n\u003cp\u003eIt is possible to use the \u003ccode\u003econstructor\u003c/code\u003e to set an initial state that is\ndependent upon props like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econstructor(props) {\u003cbr\u003e  super(props);\u003cbr\u003e  this.state = {\u003cbr\u003e    color: props.initialColor\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e//source: https://reactjs.org/docs/react-component.html#constructor\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that in contrast to the previous example, we take \u003ccode\u003eprops\u003c/code\u003e as an argument to\nthe constructor. This is because we are making use of the props to set an\ninitial state - if we aren't using props to do this, then we need not include\n\u003ccode\u003eprops\u003c/code\u003e as an argument to the constructor.\u003c/p\u003e\n\n\u003ch2\u003eMounting\u003c/h2\u003e\n\n\u003cp\u003eIn the mounting (or DOM creation, or \"setup\") phase, we have access to two\n\u003cstrong\u003elifecycle methods\u003c/strong\u003e: \u003cstrong\u003e\u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e\u003c/strong\u003e, and \u003cstrong\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003estatic getDerivedStateFromProps\u003c/code\u003e\u003c/strong\u003e is called every time a component is\nrendered, including the first time, during mounting. From the \u003ca href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state\"\u003eReact blog\u003c/a\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt;\u0026gt; \"getDerivedStateFromProps exists for only one purpose. It enables a component\nto update its internal state as the result of changes in props... We did not\nprovide many examples, because as a general rule, derived state should be used\nsparingly.\"\u003c/p\u003e\n\n\u003cp\u003eIn the context of mounting, if your intention is to set an initial state for\nyour component, it is preferable for you to do this in the \u003ccode\u003econstructor\u003c/code\u003e as\nshown above.\u003c/p\u003e\n\n\u003cp\u003eIf your intention is to set state using data from an async request, it is\npreferable that you do this in \u003ccode\u003ecomponentDidMount\u003c/code\u003e, as we will see below.\u003c/p\u003e\n\n\u003cp\u003eIn picnic terms, \u003ccode\u003egetDerivedStateFromProp\u003c/code\u003e is the moment when you arrive at the\nfield with your picnic blanket and you make sure the spot you've chosen is nice\nand level. You might find something to clean up before you lay your blanket\ndown. However, you're already here. Doing anything else now is just delaying you\nfrom spreading out the blanket and enjoying your lunch.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/strong\u003e is also only called once, but immediately \u003cem\u003eafter\u003c/em\u003e\nthe first \u003ccode\u003erender()\u003c/code\u003e method has taken place. That means that the HTML for the\nReact component has been rendered into the DOM and can be accessed if necessary.\nThis method is used to perform any DOM manipulation or data-fetching that the\ncomponent might need.\u003c/p\u003e\n\n\u003cp\u003eIf you were at a picnic, this is the moment just after you've laid out your\nblanket. You would use this time to set up any things you want to be using\nduring your stay: lay out all your food and drinks, maybe take out a radio and\nput some music on.\u003c/p\u003e\n\n\u003cp\u003eIn React, this is where you would set up any long-running processes you want to\nuse in your component, for example fetching data. Suppose we were building a\nweather app that fetches data on the current weather and displays it to the\nuser. We would want this data to update every 15 seconds without the user having\nto refresh the page. \u003ccode\u003ecomponentDidMount\u003c/code\u003e to the rescue!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecomponentDidMount() {\u003cbr\u003e  this.interval = setInterval(this.fetchWeather, 15000);\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUnmounting\u003c/h2\u003e\n\n\u003cp\u003eIn the unmounting (or deletion, or \"cleanup\") phase, we have just one lifecycle\nmethod to help us out: \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e. The \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e method\nis the last function to be called immediately before the component is removed\nfrom the DOM. It is generally used to perform clean-up for any DOM-elements or\ntimers created in \u003cstrong\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eAt a picnic, \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e corresponds to just before you pick up your\npicnic blanket. You would need to clean up all the food and drinks you've set on\nthe blanket first or they'd spill everywhere! You'd also have to shut down your\nradio. After that's all done you would be free to pick up your picnic blanket\nand put it back in the bag safely. There is no need to make a sandwich right\nnow, we're already leaving.\u003c/p\u003e\n\n\u003cp\u003eFor a React component, this is where you would clean up any of those long\nrunning processes that you set up in \u003ccode\u003ecomponentDidMount\u003c/code\u003e. In the above data\nfetching example, all we would have to do is clear the interval so that the\nweather API would no longer get called every 15 seconds:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecomponentWillUnmount() {\u003cbr\u003e  clearInterval(this.interval);\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eThe mounting and unmounting steps are important for ensuring that the React\ncomponent gets set up and initialized nicely and that when it gets unmounted, it\nleaves the space it occupied just as it was before: nice and tidy.\u003c/p\u003e\n\n\u003cp\u003eIn the mounting step, we can set up any special requirements we may have for\nthat particular component: fetch some data, start counters etc. It is extremely\nimportant to clean up all the things we set up in the unmounting stage in\n\u003ccode\u003ecomponentWillUnmount\u003c/code\u003e, as not doing so may lead to some pretty nasty\nconsequences - even as bad as crashing your carefully crafted application!\u003c/p\u003e\n\n\u003ch4\u003eMounting lifecycle methods\u003c/h4\u003e\n\n\u003cp\u003eCalled once on initial render:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003econstructor\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just before \u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e is called for the first time\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eSetting initial state\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003estatic getDerivedStateFromProps()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eright before the initial render and \u003cstrong\u003eall\u003c/strong\u003e re-renders\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eNot used often\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003erender()\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eevery time React updates and commits to the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eWriting JSX for components\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentDidMount\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just after mounting\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003esetting up side effects (e.g. creating new DOM elements or setting up asynchronous functions\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch4\u003eUnmounting lifecycle method\u003c/h4\u003e\n\n\u003cp\u003eCalled only once, just before the component is removed from the DOM:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center;\"\u003eMethod\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003ecurrent props and state\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eprevState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextProps\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003enextState\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCan call \u003ccode\u003ethis.setState\u003c/code\u003e\n\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eCalled when?\u003c/th\u003e\n\u003cth style=\"text-align: center;\"\u003eUsed for\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center;\"\u003e\u003ccode\u003ecomponentWillUnmount\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eyes\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eno\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003en/a\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003eonce, just before component is removed from the DOM\u003c/td\u003e\n\u003ctd style=\"text-align: center;\"\u003edestroying any side effects set up in componentDidMount\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/component-specs.html\"\u003eReact: Component Specs and Lifecycle\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"using-create-react-app","title":"Using Create React App","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"create-react-app\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/create-react-app/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/create-react-app\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/create-react-app/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eSo far, through this React course, a basic framework of files has been provided\nin the labs. In order for React to work, a specific file structure is required.\nHaving to set all that up every time can be a bit of a pain and is also prone to\nerror. On top of this, copying and pasting old React projects means you may miss\nout on the most up-to-date React features.\u003c/p\u003e\n\n\u003cp\u003eFortunately, the creators of React have also set up a handy tool for rapidly\ncreating the barebones file structure we need for React apps. In this lesson, we\nwill be discussing how to use the \u003ccode\u003ecreate-react-app\u003c/code\u003e node package to get our own\nprojects off the ground.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eEnsure \u003ccode\u003enpm\u003c/code\u003e is updated to utilize newly included \u003ccode\u003enpx\u003c/code\u003e command\u003c/li\u003e\n\u003cli\u003eReview how to create a react app using \u003ccode\u003ecreate-react-app\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eKeeping Up To Date\u003c/h4\u003e\n\n\u003cp\u003eBefore we continue, it is recommended you run \u003ccode\u003enpm install -g npm\u003c/code\u003e. This will\nmake sure you have the newest version of Node Package Manager. Once this is\ninstalled, you should now have access to \u003ccode\u003enpx\u003c/code\u003e. Instead of having to globally\ninstall a node package using \u003ccode\u003enpm\u003c/code\u003e, with \u003ccode\u003enpx\u003c/code\u003e, we can provide a node package\nname as an argument and use remote node packages as though they were installed.\u003c/p\u003e\n\n\u003cp\u003eSince you're grabbing the package remotely, you will be getting the most up to\ndate version of it by default!\u003c/p\u003e\n\n\u003ch4\u003eCreating A React App From Scratch\u003c/h4\u003e\n\n\u003cp\u003eIn your terminal, navigate to a location where you would like your React app\ndirectory to be located.\u003c/p\u003e\n\n\u003cp\u003eDecide on a name for your app. Once you've got one, run the following with your\napp's name in place of \u003ccode\u003e\u0026lt;your_app_name\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpx create-react-app \u0026lt;your_app_name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ecreate-react-app\u003c/code\u003e package sets up the basic file structure and\nexecutes an initial \u003ccode\u003enpm install\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eConclusion\u003c/h4\u003e\n\n\u003cp\u003eThat's it! Fast and easy. The app is ready to run with \u003ccode\u003enpm start\u003c/code\u003e, and will\ndisplay some default content. The \u003ccode\u003eREADME.md\u003c/code\u003e file provided also has a very\ndetailed breakdown of all the additional features that come with\n\u003ccode\u003ecreate-react-app\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOne feature that is included: a service worker that allows the app to cache page\ndata in a user's browser. The result? After a user visits your site once, if they\ndo not have service, they \u003cem\u003ecan still go to your website and see content\u003c/em\u003e. The\ncache will display what the site looked like the last time the user was there!\u003c/p\u003e\n\n\u003cp\u003eWhile it is perfectly fine to set up your own React files, \u003ccode\u003ecreate-react-app\u003c/code\u003e is\na handy solution to quickly get past any setup and get straight to designing\nyour app. Since it is actively maintained by Facebook, you're also always\ngetting a nicely polished, up-to-date base for your React applications!\u003c/p\u003e","frontPage":false},{"exportId":"types-of-components","title":"Types of Components","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-types-of-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-types-of-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-types-of-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-types-of-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eSo far in this course, we've dealt with React's \u003cem\u003eclass\u003c/em\u003e components. These class\ncomponents have all the features we've been learning about - class components\nhave \u003cem\u003estate\u003c/em\u003e, \u003cem\u003elifecycle\u003c/em\u003e methods and can contain their own custom class\nmethods. \u003cem\u003eClass\u003c/em\u003e components are fully featured, but there are times when we\nreally don't need all these features. Some components don't need state. Many\ncomponents don't need to use lifecycle methods. For these cases, there are\nbetter options. In this lesson, we will be looking at some of the alternatives\nto class components. These alternatives can offer a more simplified way to write\ncomponents, while also providing some boosts to performance!\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce pure components and functional components\u003c/li\u003e\n\u003cli\u003eCompare the differences between components, pure components and functional\ncomponents\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eClass Components\u003c/h4\u003e\n\n\u003cp\u003eWe've covered the features of class components thoroughly through the previous\nlessons. To be clear, you can write \u003cem\u003eall of your components\u003c/em\u003e as class\ncomponents. Even with a complex app with many components, this will work just\nfine.\u003c/p\u003e\n\n\u003cp\u003eIf you're not sure how complex a component will become while creating it, just\nstart with a class component. At a minimum, a class component looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003ePure Components\u003c/h4\u003e\n\n\u003cp\u003eA pure component is nearly identical to a regular component. The only difference\nis that a pure component does not have access to the  \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e\nmethod, instead performing an automatic, shallow comparison of old and new props\nand state. To write them, you just need to import and use \u003ccode\u003ePureComponent\u003c/code\u003e\ninstead of \u003ccode\u003eComponent\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { PureComponent } from 'react'\u003cbr\u003e\u003cbr\u003eclass App extends PureComponent {\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe concept of a pure component is similar to a pure function. If a component is\nrepeatedly given the same initial values (props and state), it should behave the\nsame way each time. So, if props and state aren't changing, there is no need to\nupdate the component.\u003c/p\u003e\n\n\u003cp\u003eIf you don't need to fine tune how a class component updates, considered\nconverting most or all of your regular components into pure components.\u003c/p\u003e\n\n\u003ch4\u003eFunctional Components\u003c/h4\u003e\n\n\u003cp\u003eAlthough React is clever when it comes to rendering class components, every\nclass component, when rendered, goes through a series of checks related to its\nlifecycle. If we do not need to use state or lifecycle methods, we can avoid\nthese checks by writing a \u003cem\u003efunctional\u003c/em\u003e component.\u003c/p\u003e\n\n\u003cp\u003eA functional component requires much less than a class component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst App = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;{props.greeting}\u0026lt;/div\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA functional component \u003cem\u003ereturns\u003c/em\u003e JSX, instead of using a \u003ccode\u003erender\u003c/code\u003e method. It\ndoesn't extend \u003ccode\u003eComponent\u003c/code\u003e, so it hasn't inherited what is needed to store\nstate. Functional components can still receive props, but notice above that they\nhave to explicitly be written as the argument for the function.\u003c/p\u003e\n\n\u003cp\u003eFunctional components \u003cem\u003ecan\u003c/em\u003e be fairly complex if we want. We can write helper\nfunctions and variables in the same file and use them within the functional\ncomponent. Generally, though, functional components are very handy for simple,\nlightweight components. Often, when we want a component to just \u003cem\u003edisplay\u003c/em\u003e\ncontent and not worry about any heavy logic, functional components are a great\noption.\u003c/p\u003e\n\n\u003cp\u003eWith ES6, we can even shorten functional components to single lines:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst App = props =\u0026gt; \u0026lt;div\u0026gt;{props.greeting}\u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCombined with \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"\u003eobject destructuring\u003c/a\u003e, we can extract out the\n\u003ccode\u003egreeting\u003c/code\u003e value from \u003ccode\u003eprops\u003c/code\u003e, and do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst App = ({ greeting }) =\u0026gt; \u0026lt;div\u0026gt;{ greeting }\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis simplicity makes it fast and easy to build reusable components. If you've\ngot a bunch of styled buttons on a React app, for instance, you can write a\nreusable Button component that has a consistent style but receives props that\ndefine its text and click event function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst Button = ({ handleClick, text })=\u0026gt; \u0026lt;button style=\"myButton\" onClick={ handleClick }\u0026gt;{ text }\u0026lt;/button\u0026gt;\u003cbr\u003e\u003cbr\u003eexport default Button\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFunctional components update based on prop changes \u003cem\u003eor\u003c/em\u003e if their parent component\nre-renders.\u003c/p\u003e\n\n\u003ch2\u003eContainer vs Presentation Components\u003c/h2\u003e\n\n\u003cp\u003eSo we have both class based and functional components, but you may have also\nheard talk of \u003cem\u003econtainer\u003c/em\u003e and \u003cem\u003epresentation\u003c/em\u003e components. These are not different\n\u003cem\u003etypes\u003c/em\u003e of components, but instead, are a way of thinking on how to organize a\nReact app.\u003c/p\u003e\n\n\u003cp\u003ePresentational components are only concerned with displaying content.\nThey typically don't deal with state, or have a lot of added logic within them.\nThey receive props and display content. The Button component from the functional\ncomponent section above is a great example of this.\u003c/p\u003e\n\n\u003cp\u003eImagine for a moment we were designing a navigation bar, full with links and\ndrop down menus, a search form and a brand logo. In React, we can\ncompartmentalize - each piece can be a component (NavLinks, Menu, Search, etc..)\nand since they all go together, we can create a parent component, that acts as a\n\u003cem\u003econtainer\u003c/em\u003e for everything.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react'\u003cbr\u003eimport Logo from './Logo'\u003cbr\u003eimport NavLinks from './NavLinks'\u003cbr\u003eimport DropMenu from './DropMenu'\u003cbr\u003eimport Search from './Search'\u003cbr\u003e\u003cbr\u003eclass NavigationContainer extends Component {\u003cbr\u003e\u003cbr\u003e  state = {\u003cbr\u003e    query: \"\",\u003cbr\u003e    username: \"\"\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    // \u0026lt;\u0026gt;...\u0026lt;/\u0026gt; is a a React fragment - it does not render anything to the DOM, but can wrap multiple JSX elements\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;\u0026gt;\u003cbr\u003e        \u0026lt;Logo /\u0026gt;\u003cbr\u003e        \u0026lt;NavLinks /\u0026gt;\u003cbr\u003e        \u0026lt;DropMenu username={ this.state.username }/\u0026gt;\u003cbr\u003e        \u0026lt;Search query= {this.state.query } handleChange={ this.handleChange } handleSubmit={ this.handleSubmit }/\u0026gt;\u003cbr\u003e      \u0026lt;/\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  handleSubmit = event =\u0026gt; { ... }\u003cbr\u003e  handleChange = event =\u0026gt; { ... }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing this sort of set up, none of the imported components need to have their\nown state, nor do they need to have any functions defined. Container components,\nlike NavigationContainer, deal with managing state and class methods.\u003c/p\u003e\n\n\u003cp\u003eKeeping all the more complex logic in one place makes it easier to follow the\nflow of information. It also keeps many components simpler and free of clutter.\u003c/p\u003e\n\n\u003cp\u003eContainer components, having to deal with state, are usually class components.\nPresentational components are most often functional components as they don't need to\ncontain custom methods, relying mainly on props.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere are no hard and fast rules about presentational vs container components.\nThis dichotomy is simply a common pattern for organizing your app.\nPresentational components \u003cem\u003ecan\u003c/em\u003e be switched to class components if needed.\u003c/p\u003e\n\n\u003cp\u003eThe main take away here is the difference between \u003cem\u003eclass\u003c/em\u003e and \u003cem\u003efunctional\u003c/em\u003e\ncomponents. Class components are versatile and fully featured components. They\ncan be anything we want them to be. Functional components exchange the class\ncomponent's bells and whistles for simplicity and a small performance boost.\u003c/p\u003e\n\n\u003ch4\u003eResources (if applicable)\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\"\u003ePresentational vs Container Components by Dan Abramov\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/dan_abramov/status/802569801906475008?lang=en\"\u003eDan Abramov's follow up on Twitter\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"useful-tools-for-working-with-react","title":"Useful Tools for Working with React","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"some-useful-tools-for-writing-react\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/some-useful-tools-for-writing-react/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/some-useful-tools-for-writing-react\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/some-useful-tools-for-writing-react/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eHello everyone and welcome to React!\u003c/h2\u003e\n\n\u003cp\u003eBelow are some helpful resources that may accelerate your React learning:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eIf you're using Atom as your text editor, download a JSX plugin (a quick search for 'JSX' will reveal the most popular ones). This will give you some pretty great syntax highlighting for code that is specific to React, and will make coding easier. After the package is installed, open up your \u003ccode\u003epreferences\u003c/code\u003e in Atom. Depending on which package you choose, you may have to edit its settings so that it is the default syntax highlighter for files appended with \u003ccode\u003e.jsx\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eInstall the \u003ca href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\"\u003eReact Devtools Chrome Extension\u003c/a\u003e. This gives you access to some pretty great tools that make it a lot easier to debug your programs in React. Here is the \u003ca href=\"https://github.com/facebook/react-devtools#faq\"\u003erepo\u003c/a\u003e for the extension.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMost importantly, the official \u003ca href=\"https://reactjs.org/\"\u003eReact Documentation\u003c/a\u003e, courtesy of Facebook. While you won't have the time to read over all of it now, it might be good to have bookmarked while you learn React.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAs a bonus, take a look at \u003ca href=\"https://gist.github.com/odewahn/5a5eeb23279eed6a80d7798fdb47fe91\"\u003eerror handling in fetch\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003efetch(\"/api/foo\")\u003cbr\u003e  .then(response =\u0026gt; {\u003cbr\u003e    if (!response.ok) { throw response }\u003cbr\u003e    return response.json()  //we only get here if there is no error\u003cbr\u003e  })\u003cbr\u003e  .then(json =\u0026gt; {\u003cbr\u003e    doSomethingWithResult(json)\u003cbr\u003e  })\u003cbr\u003e  .catch(err =\u0026gt; {\u003cbr\u003e    err.text().then(errorMessage =\u0026gt; {\u003cbr\u003e      displayTheError(errorMessage)\u003cbr\u003e    })\u003cbr\u003e  })\n\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"components","title":"Components","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll introduce the heart of React: components. This will include explaining why\nthey're important and examining a few examples. If the idea and application of\ncomponents don't click immediately, \u003cem\u003edo not worry!\u003c/em\u003e The different moving parts\nrequired to understand how to use them will fall into place as we move forward.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand React components\u003c/li\u003e\n\u003cli\u003eCreate React components and show the HTML they create\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's examine a high level overview of what a React component is before we\nimplement one. The official \u003ca href=\"https://reactjs.org/docs/components-and-props.html\"\u003eReact documentation on components\u003c/a\u003e\nsays it best:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt;Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.\u003c/p\u003e\n\n\u003cp\u003eComponents modularize both \u003cem\u003efunctionality\u003c/em\u003e and \u003cem\u003epresentation\u003c/em\u003e in our code. In\norder to understand how powerful this is, consider just how intricate web\napplications can become. The difficulty in logically arranging, architecting,\nand programming these web applications increases with their size. Components are\nlike little packages: they help us keep everything organized and predictable\nwhile abstracting the \u003ca href=\"https://en.wikipedia.org/wiki/Boilerplate_code\"\u003e'boiler plate'\u003c/a\u003e code. Each component\ncontains a snippet of code that describes what it should render to the DOM.\u003c/p\u003e\n\n\u003cp\u003eEnough of a description — let's see some examples! While the possibilities of\nwhat we can do with components are endless, the first thing we need to\nunderstand about them is the ways in which they act as code templates. Let's\nstart simply and build up from there using a simple example.\u003c/p\u003e\n\n\u003ch2\u003eReact Application Idea\u003c/h2\u003e\n\n\u003cp\u003eLet's imagine we want to post a blog article describing why Bjarne Stroustrup has the \u003ca href=\"https://www.youtube.com/watch?v=JBjjnqG0BP8\"\u003eperfect lecture oration\u003c/a\u003e. We also want our blog article to display comments made by readers.\u003c/p\u003e\n\n\u003ch4\u003eStep 1: write the components\u003c/h4\u003e\n\n\u003cp\u003eFirst, let's make a component to showcase an opinion:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Article extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You're probably used to just seeing \u003ccode\u003eclass Article extends Component\u003c/code\u003e. Just know that \u003ccode\u003eclass Article extends React.Component\u003c/code\u003e is an alternate syntax. Either way, it's doing the same exact thing.\u003c/p\u003e\n\n\u003cp\u003eTake a moment to read that code line by line:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea new class, \u003ccode\u003eArticle\u003c/code\u003e, is declared\u003c/li\u003e\n\u003cli\u003ethe class extends React's \u003ccode\u003ecomponent\u003c/code\u003e class (which provides us with built in methods and attributes)\u003c/li\u003e\n\u003cli\u003ethe class contains a \u003ccode\u003erender()\u003c/code\u003e method that defines exactly what the component should render to the page\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen React creates this element and adds it to the DOM, the resulting HTML will\nlook just as you would expect:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's see what it would look like, were we to only render this one component, in the DOM:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/component-article-example.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOk, that takes care of our \u003ccode\u003eArticle\u003c/code\u003e part of our application. Now let's make a\ncomponent to display a single user's comment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Comment extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        Naturally, I agree with this article.\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake the time to read that component line by line. Here is the HTML that this\nwould create when added to the DOM:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;Naturally, I agree with this article.\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn both of our examples, React is interpreting JavaScript code and spitting out\nplain old HTML that browsers will know how to represent to the user. While the\ncode inside the \u003ccode\u003ereturn()\u003c/code\u003e statement looks like simple HTML, it's actually JSX:\na specialized JavaScript syntax that resembles regular HTML. We will dive deeper\ninto JSX (which is actually quite wonderful) later.\u003c/p\u003e\n\n\u003cp\u003eOnce we have our components in hand, it's time to actually use them.\u003c/p\u003e\n\n\u003ch4\u003eStep 2: use the components\u003c/h4\u003e\n\n\u003cp\u003eNow that we have these components written, all we need to do is make sure some\nother component is making use of them in its \u003ccode\u003erender\u003c/code\u003e method. Every React\napplication has some top level component. Very often, this top level component\nis simply called \u003ccode\u003eApp\u003c/code\u003e. For our example, here's what it might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass App extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;Article /\u0026gt;\u003cbr\u003e        \u0026lt;Comment /\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we can see JSX coming into play a bit more. The code inside the \u003ccode\u003ereturn()\u003c/code\u003e\nstill looks a lot like regular HTML, but in addition to rendering a regular old\nHTML \u003ccode\u003ediv\u003c/code\u003e element we're also rendering our two components. We've created code\nthat is not only well structured and modular, but also a straightforward\ndescription of what we want the \u003ccode\u003eApp\u003c/code\u003e component to do: render the article first,\nfollowed by the comment. Here is what the resulting HTML will look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;Naturally, I agree with this article.\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/component-article-comment-example.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis unpacks logically. The \u003ccode\u003eApp\u003c/code\u003e component (being our top level component)\nwraps around both \u003ccode\u003eArticle\u003c/code\u003e and \u003ccode\u003eComment\u003c/code\u003e, and we already know what they look\nlike when they are turned into HTML.\u003c/p\u003e\n\n\u003cp\u003eAs you may expect, we refer to the \u003ccode\u003eApp\u003c/code\u003e component as the \u003cem\u003eparent\u003c/em\u003e component of\nboth the \u003ccode\u003eComment\u003c/code\u003e and \u003ccode\u003eArticle\u003c/code\u003e components. Inversely, we refer to \u003ccode\u003eComment\u003c/code\u003e\nand \u003ccode\u003eArticle\u003c/code\u003e as \u003cem\u003echildren\u003c/em\u003e components of \u003ccode\u003eApp\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eWe just introduced simplified, bare bones, React components. They are used to\nhouse modularized front end code. In our example, as is often the case, they\ncontain information on how a portion of our application should be turned into\nHTML.\u003c/p\u003e\n\n\u003cp\u003eGoing forward, we will continue with this example. We will show how components\ncan be re-used and how they can be written as dynamic templates that contain\ncontent that can change based on user actions.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/react-api.html\"\u003eReact Top-Level API\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/introducing-jsx.html\"\u003eIntroducing JSX\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"data-fetching-in-react","title":"Data Fetching in React","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-data-fetching\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-data-fetching\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-data-fetching/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eProblem Statement\u003c/h2\u003e  \u003cp\u003eWe've seen that React components come with some neat-o bells and whistles. They can be nested within each other. They can pass information and logic between them with props and they can keep track of their own information in state.\u003c/p\u003e  \u003cp\u003eSo far though, we've been restricted to displaying information organized by the React app itself. In this lesson, we're going to go a step further and incorporate remote data into our React apps. Using fetch requests to APIs, we can build dynamic, responsive apps around data that is provided to us remotely.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIntroduce the use of \u003ccode\u003efetch\u003c/code\u003e within components\u003c/li\u003e \u003cli\u003eConsider some of the best places to include \u003ccode\u003efetch\u003c/code\u003e in our React app\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eUsing \u003ccode\u003efetch\u003c/code\u003e Within React\u003c/h2\u003e  \u003cp\u003eFor a minute, consider how a site like \u003ca href=\"https://www.instagram.com/\"\u003eInstagram\u003c/a\u003e works. If you've got an account on Instagram, when you visit the site, you'll see an endless scroll of photos from people you follow. Everyone sees the same \u003cem\u003eInstagram\u003c/em\u003e website, but the images displayed are unique to the user.\u003c/p\u003e  \u003cp\u003eSimilarly, consider \u003ca href=\"https://airbnb.com/\"\u003eAirBnb\u003c/a\u003e. When you click to look at a listing's information, the page layout is always the same. The data, the images, the reviews... this information changes.\u003c/p\u003e  \u003cp\u003eBoth of these websites are built with React. When you go to one of these sites, React doesn't have the specific listing or image content. If you're on a slow connection (or \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/network-conditions\"\u003ewant to mimic one using the Chrome Dev Tools\u003c/a\u003e), you can see what is happening more clearly. \u003cem\u003eReact\u003c/em\u003e shows up first and renders \u003cem\u003esomething\u003c/em\u003e. Sometimes it is just the background or the skeleton of a website, or maybe navigation and CSS. On Instagram, a photo 'card' might appear but without an image or username attached.\u003c/p\u003e  \u003cp\u003eReact is \u003cem\u003eupdating the DOM\u003c/em\u003e based on the JSX being returned by its components \u003cem\u003efirst\u003c/em\u003e. Once the DOM has been updated, remote data is then requested. When that data has been received, React runs through an update of the necessary components and fills in the info it received. Text content will appear, user information, etc... This first set of data is likely just a JSON object specific to the user or content requested. This object might contain image URLs, so right after the component update, images will be able to load.\u003c/p\u003e  \u003cp\u003eSo, since the data is being requested \u003cem\u003eafter\u003c/em\u003e React has updated the DOM, is there a \u003cem\u003eside effect\u003c/em\u003e that might be useful here?\u003c/p\u003e  \u003cp\u003eWhy yes there is! Whenever we want to fetch data in our components, the \u003ccode\u003euseEffect\u003c/code\u003e hook gives us a great place for making fetch requests. By putting a \u003ccode\u003efetch()\u003c/code\u003e within \u003ccode\u003euseEffect\u003c/code\u003e, when the data is received, we can use \u003ccode\u003esetState\u003c/code\u003e to store the received data. This causes an update with that remote data stored in state. A very simple implementation of the App component with \u003ccode\u003efetch\u003c/code\u003e might look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState, useEffect } from \"react\";\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  const [peopleInSpace, setPeopleInSpace] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    fetch(\"http://api.open-notify.org/astros.json\")\u003cbr\u003e      .then((response) =\u0026gt; response.json())\u003cbr\u003e      .then((data) =\u0026gt; {\u003cbr\u003e        setPeopleInSpace(data.people);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e  // use an empty dependencies array, so we only run the fetch request ONCE\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div\u0026gt;{peopleInSpace.map((person) =\u0026gt; person.name)}\u0026lt;/div\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the code above, after the \u003ccode\u003eApp\u003c/code\u003e component has been rendered to the DOM, a \u003ccode\u003efetch\u003c/code\u003e is called to an API. Once data is returned from the API, the simplest way to store some or all of it is to put it in state.\u003c/p\u003e  \u003cp\u003eIf you have JSX content reliant on that state information, when \u003ccode\u003esetPeopleInSpace\u003c/code\u003e is called and the component re-renders, the content will appear.\u003c/p\u003e  \u003cp\u003ePlacing \u003ccode\u003efetch\u003c/code\u003e in a \u003ccode\u003euseEffect\u003c/code\u003e with an empty dependencies array is ideal for data that you need immediately when a user visits your website or uses your app. Since \u003ccode\u003euseEffect\u003c/code\u003e is also commonly used to initialize intervals, it is ideal to set up any repeating fetch requests here as well.\u003c/p\u003e  \u003cp\u003eWe can also add a loading indicator using this technique. Since our component will render \u003cem\u003ebefore\u003c/em\u003e \u003ccode\u003euseEffect\u003c/code\u003e runs our \u003ccode\u003efetch\u003c/code\u003e request, we can set up another state variable to add a loading indicator, like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [peopleInSpace, setPeopleInSpace] = useState([]);\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    fetch(\"http://api.open-notify.org/astros.json\")\u003cbr\u003e      .then((response) =\u0026gt; response.json())\u003cbr\u003e      .then((data) =\u0026gt; {\u003cbr\u003e        setPeopleInSpace(data.people);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  // if the data hasn't been loaded, show a loading indicator\u003cbr\u003e  if (!isLoaded) return \u0026lt;h3\u0026gt;Loading...\u0026lt;/h3\u0026gt;;\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div\u0026gt;{peopleInSpace.map((person) =\u0026gt; person.name)}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eUsing \u003ccode\u003efetch\u003c/code\u003e With Events\u003c/h4\u003e  \u003cp\u003eWe aren't limited to sending fetch requests when a component is rendered the first time. We can also tie them into events:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleClick() {\u003cbr\u003e  fetch(\"your API url\")\u003cbr\u003e    .then((res) =\u0026gt; res.json())\u003cbr\u003e    .then((json) =\u0026gt; setData(json));\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ereturn \u0026lt;button onClick={handleClick}\u0026gt;Click to Fetch!\u0026lt;/button\u0026gt;; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis lets us send requests on demand. Submitting form data would be handled this way, using a POST request instead of GET.\u003c/p\u003e  \u003cp\u003eA slightly more complicated example would be the infinite scroll of sites like Instagram. An event listener tied to changes in the scroll position of a page could fire off a \u003ccode\u003ehandleScroll\u003c/code\u003e method that requests data before a user reaches the bottom of a page.\u003c/p\u003e  \u003ch4\u003eUsing State with POST Requests\u003c/h4\u003e  \u003cp\u003eOne of the beautiful features of state is that we can organize it however we need. If we were building a form to submit to a server, we can structure state to work nicely with what the server is expecting in a POST request.\u003c/p\u003e  \u003cp\u003eSay we were building a user sign up form. When we send the data, our server is expecting two values within the body of the POST, \u003ccode\u003eusername\u003c/code\u003e and \u003ccode\u003epassword\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSetting up a React controlled form, we can structure our state in the same way:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst [formData, setFormData] = useState({\u003cbr\u003e  username: \"\",\u003cbr\u003e  password: \"\",\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003e//since the id values are the same as the keys in formData, we can write an abstract setFormData here\u003cbr\u003efunction handleChange(event) {\u003cbr\u003e  setFormData({\u003cbr\u003e    ...formData,\u003cbr\u003e    [event.target.id]: event.target.value,\u003cbr\u003e  });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ereturn (\u003cbr\u003e  \u0026lt;form onSubmit={this.handleSubmit}\u0026gt;\u003cbr\u003e    \u0026lt;input\u003cbr\u003e      type=\"text\"\u003cbr\u003e      id=\"username\"\u003cbr\u003e      value={formData.username}\u003cbr\u003e      onChange={handleChange}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e    \u0026lt;input\u003cbr\u003e      type=\"text\"\u003cbr\u003e      id=\"password\"\u003cbr\u003e      value={formData.password}\u003cbr\u003e      onChange={handleChange}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e  \u0026lt;/form\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, when setting up the fetch request, we can just pass the entire state within the body, as there are no other values:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleSubmit(event) {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  fetch(\"the server URL\", {\u003cbr\u003e    method: \"POST\",\u003cbr\u003e    headers: {\u003cbr\u003e      \"Content-Type\": \"application/json\",\u003cbr\u003e    },\u003cbr\u003e    body: JSON.stringify(formData),\u003cbr\u003e  });\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice how we're not bothering to worry about \u003ccode\u003eevent.target\u003c/code\u003e when posting the data. Since the form is controlled, state contains the most up-to-date form data, and it is already in the right format!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWhen you need to \u003cem\u003eget\u003c/em\u003e data from an API when your component is first rendered, using \u003ccode\u003euseEffect\u003c/code\u003e with an empty dependencies array, like this, is a good approach:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  fetch(\"/api\")\u003cbr\u003e    .then((r) =\u0026gt; r.json())\u003cbr\u003e    .then(setData);\u003cbr\u003e}, []); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAside from that, there are no hard and fast rules for how to include fetch requests, and a lot of structure will depend on the data you're working with. As a general practice for writing simpler component code, include \u003ccode\u003efetch\u003c/code\u003e calls in the same component as your top level state.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\"\u003efetch\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"asynchronous-react","title":"Asynchronous React","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-async-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-async-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-async-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-async-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eWe've seen that React components come with some neat-o bells and whistles. They\ncan be nested within each other. They can pass information and logic between\nthem with props and they can keep track of their own information in state.\u003c/p\u003e\n\n\u003cp\u003eSo far though, we've been restricted to displaying information organized by the\nReact app itself. In this lesson, we're going to go a step further and\nincorporate remote data into our React apps. Using fetch requests to APIs, we\ncan build dynamic, responsive apps around data that is provided to us remotely.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce the use of \u003ccode\u003efetch\u003c/code\u003e within components\u003c/li\u003e\n\u003cli\u003eConsider some of the best places to include \u003ccode\u003efetch\u003c/code\u003e in our React app\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eUsing \u003ccode\u003efetch\u003c/code\u003e Within React\u003c/h4\u003e\n\n\u003cp\u003eFor a minute, consider how a site like \u003ca href=\"https://www.instagram.com/\"\u003eInstagram\u003c/a\u003e works. If you've got\nan account on Instagram, when you visit the site, you'll see an endless scroll\nof photos from people you follow. Everyone sees the same \u003cem\u003eInstagram\u003c/em\u003e website,\nbut the images displayed are unique to the user.\u003c/p\u003e\n\n\u003cp\u003eSimilarly, consider \u003ca href=\"https://www.imdb.com/\"\u003eIMDb, the Internet Movie Database\u003c/a\u003e. When you click to\nlook at a movie's information, the page is always the same. The data, the\nimages, the reviews, the cast... this information changes.\u003c/p\u003e\n\n\u003cp\u003eBoth of these websites are built with React. When you go to one of these sites,\nReact doesn't have the specific movie or image content. If you're on a slow\nconnection (or \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/network-conditions\"\u003ewant to mimic one using the Chrome Dev Tools\u003c/a\u003e), you can\nsee what is happening more clearly. \u003cem\u003eReact\u003c/em\u003e shows up first and renders\n\u003cem\u003esomething\u003c/em\u003e. Sometimes it is just the background or the skeleton of a website, or\nmaybe navigation and CSS. On Instagram, a photo 'card' might appear but without\nan image or username attached.\u003c/p\u003e\n\n\u003cp\u003eReact is \u003cem\u003emounting\u003c/em\u003e its basic components \u003cem\u003efirst\u003c/em\u003e. Once these are mounted, remote\ndata is then requested. When that data has been received, React runs through an\nupdate of the necessary components and fills in the info it received. Text\ncontent will appear, user information, etc... This first set of data is likely\njust a JSON object specific to the user or content requested. This object might\ncontain image URLs, so right after the component update, images will be able\nto load.\u003c/p\u003e\n\n\u003cp\u003eSo, since the data is being requested \u003cem\u003eafter\u003c/em\u003e React has mounted its components,\nis there a component lifecycle method that might be useful here?\u003c/p\u003e\n\n\u003cp\u003eWhy yes there is! \u003ccode\u003ecomponentDidMount\u003c/code\u003e happens to be a great place for making\nfetch requests. By putting a \u003ccode\u003efetch()\u003c/code\u003e within \u003ccode\u003ecomponentDidMount\u003c/code\u003e, when the data\nis received, we can use \u003ccode\u003esetState\u003c/code\u003e to store the received data. This causes an\nupdate with that remote data stored in state. A very simple implementation of\nthe App component with \u003ccode\u003efetch\u003c/code\u003e might look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  state = {\u003cbr\u003e    peopleInSpace: []\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.state.peopleInSpace.map(person =\u0026gt; person.name)}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  componentDidMount() {\u003cbr\u003e    fetch('http://api.open-notify.org/astros.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(data =\u0026gt; {\u003cbr\u003e        this.setState({\u003cbr\u003e          peopleInSpace: data.people\u003cbr\u003e        })\u003cbr\u003e      })\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the code above, once App mounts, a \u003ccode\u003efetch\u003c/code\u003e is called to an API. Once data is\nreturned from the API, the simplest way to store some or all of it is to put it in\nstate.\u003c/p\u003e\n\n\u003cp\u003eIf you have JSX content reliant on that state information, when \u003ccode\u003esetState\u003c/code\u003e is\ncalled and the component re-renders, the content will appear.\u003c/p\u003e\n\n\u003cp\u003ePlacing \u003ccode\u003efetch\u003c/code\u003e in \u003ccode\u003ecomponentDidMount\u003c/code\u003e is ideal for data that you need\nimmediately when a user visits your website or uses your app. Since\n\u003ccode\u003ecomponentDidMount\u003c/code\u003e is also commonly used to initialize intervals, it is ideal\nto set up any repeating fetch requests here as well.\u003c/p\u003e\n\n\u003ch4\u003eUsing \u003ccode\u003efetch\u003c/code\u003e With Events\u003c/h4\u003e\n\n\u003cp\u003eWe aren't limited to sending fetch requests when a component is mounted. We can\nalso tie them into events:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehandleClick = event =\u0026gt; {\u003cbr\u003e  fetch('your API url')\u003cbr\u003e    .then(res =\u0026gt; res.json())\u003cbr\u003e    .then(json =\u0026gt; this.setState({data: json}))\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;button onClick={this.handleClick}\u0026gt;Click to Fetch!\u0026lt;/button\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis lets us send requests on demand. Submitting form data would be handled this\nway, using a POST request instead of GET.\u003c/p\u003e\n\n\u003cp\u003eA slightly more complicated example would be the infinite scroll of sites like\nInstagram. An event listener tied to changes in the scroll position of a page\ncould fire off a \u003ccode\u003ehandleScroll\u003c/code\u003e method that requests data before a user reaches\nthe bottom of a page.\u003c/p\u003e\n\n\u003ch4\u003eUsing State with POST Requests\u003c/h4\u003e\n\n\u003cp\u003eOne of the beautiful features of state is that we can organize it however we\nneed. If we were building a form to submit to a server, we can structure state\nto work nicely with what the server is expecting in a POST request.\u003c/p\u003e\n\n\u003cp\u003eSay we were building a user sign up form. When we send the data, our server is\nexpecting two values within the body of the POST, \u003ccode\u003eusername\u003c/code\u003e and \u003ccode\u003epassword\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSetting up a React controlled form, we can structure our state in the same way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estate = {\u003cbr\u003e  username: \"\",\u003cbr\u003e  password: \"\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e//since the id values are the same as the keys in state, we can write an abstract setState here\u003cbr\u003ehandleChange = event =\u0026gt; {\u003cbr\u003e  this.setState({\u003cbr\u003e    [event.target.id]: event.target.value\u003cbr\u003e  })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form onSubmit={this.handleSubmit}\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" id=\"username\" value={this.state.username} onChange={this.handleChange}/\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" id=\"password\" value={this.state.password} onChange={this.handleChange}/\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, when setting up the fetch request, we can just pass the entire state within the\nbody, as there are no other values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehandleSubmit = event =\u0026gt; {\u003cbr\u003e  event.preventDefault()\u003cbr\u003e  fetch('the server URL', {\u003cbr\u003e    method: \"POST\",\u003cbr\u003e    headers: {\u003cbr\u003e      \"Content-Type\": \"application/json\"\u003cbr\u003e    },\u003cbr\u003e    body: JSON.stringify(this.state)\u003cbr\u003e  })\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice how we're not bothering to worry about \u003ccode\u003eevent.target\u003c/code\u003e when posting the\ndata. Since the form is controlled, state contains the most up-to-date form\ndata, and it is already in the right format!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere are no hard and fast rules for how to include fetch requests, and a lot of\nstructure will depend on the data you're working with. As a general practice for\nwriting simpler component code, include \u003ccode\u003efetch\u003c/code\u003e calls in the same component as\nyour top level state. You can always pass down methods as props that contain\n\u003ccode\u003efetch\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\"\u003efetch\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"container-components","title":"Container Components","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-container-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-container-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-container-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-container-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this lesson, we will learn about React \"container components.\" By the end of\nthis lesson you will be able to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the difference between container components and presentational components\u003c/li\u003e\n\u003cli\u003eExplain how to create a container component.\u003c/li\u003e\n\u003cli\u003eExplain the benefits of using a container component.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat Are Container Components\u003c/h2\u003e\n\n\u003cp\u003eWe know now that much of our app ought to consist of presentational components,\nwhich deal exclusively with the way the UI looks and which preferably carry no\nstate. By the same token, our applications will almost always need some\ncomponents that take responsibility for the \u003cem\u003ethe way things work.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/9HXOac9CZshOM/giphy.gif\" alt=\"Dolphins\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSo what is a container component? The main thing to keep in mind here is that\ncontainer components and presentational components go together. In fact, you can\nthink of them as part of the same design pattern. Where presentational\ncomponents don't manage state, container components do. Where presentation\ncomponents are usually subordinate \"children\" in a component hierarchy,\ncontainer components are in almost every case the \"parents\" of presentational\ncomponents.\u003c/p\u003e\n\n\u003cp\u003eHere's a concise definition of the container component pattern:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eContainer components are primarily concerned with \u003cem\u003ehow things work\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey rarely have any HTML markup of their own, aside from a wrapping \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e;\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey are often stateful\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThey are responsible for providing data and behavior to their children (usually\npresentational components).\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAn Example\u003c/h2\u003e\n\n\u003cp\u003eTo make things a bit clearer, let's look at an example. Let's take a very basic\nuse case of a \u003ccode\u003eBookList\u003c/code\u003e widget that we need to write for an application that\nallows book lovers to communicate about their favorite reads. The component\nspecification is simple enough: the component should just render the current\nuser's book list. Here's one way this component could be written:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BookList extends Component {\u003cbr\u003e  constructor(props) {\u003cbr\u003e    super(props);\u003cbr\u003e\u003cbr\u003e    this.state = {\u003cbr\u003e      books: []\u003cbr\u003e    };\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  componentDidMount() {\u003cbr\u003e    fetch('https://learn-co-curriculum.github.io/books-json-example-api/books.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(bookData =\u0026gt; this.setState({ books: bookData.books }))\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  renderBooks = () =\u0026gt; {\u003cbr\u003e    return this.state.books.map(book =\u0026gt; {\u003cbr\u003e      return (\u003cbr\u003e        \u0026lt;div className=\"book\"\u0026gt;\u003cbr\u003e          \u0026lt;img src={ book.img_url } /\u0026gt;\u003cbr\u003e          \u0026lt;h3\u0026gt;{ book.title }\u0026lt;/h3\u0026gt;\u003cbr\u003e        \u0026lt;/div\u0026gt;\u003cbr\u003e      )\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"book-list\"\u0026gt;\u003cbr\u003e        { this.renderBooks() }\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn some respects, this is a perfectly acceptable component. It meets our basic\nspecification. However, there are some disadvantages to this implementation.\nConsider for a moment the number of assumptions this component makes about how\nand what data is fetched and how that data displayed:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIt assumes that the call to the api returns a JSON object containing a list of\nbook objects with the properties \u003ccode\u003eimg_url\u003c/code\u003e and \u003ccode\u003etitle\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt assumes that the book list will always be rendered with the same markup\nreturned by the render function.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn short, this component has tightly coupled together a whole set of assumptions\nabout the data layer with another set of assumptions about the presentation\nlayer. This is less than ideal.\u003c/p\u003e\n\n\u003cp\u003eWhy? Well, what if the data returned by our API call changed at some point in\nthe future? Suddenly we'd have errors. Or, what if we found that we needed book\nlists elsewhere in our app? Could we reuse this code? No! Because the whole\nthing has too many assumptions built-in; it's just too opinionated about how it\n\u003cem\u003eshould\u003c/em\u003e be used. What a shame!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://gifrific.com/wp-content/uploads/2014/02/Angry-Mr-Bean-Shakes-Head.gif\" alt=\"Mr. Bean is outraged\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eSeparating Concerns Using a Container Component\u003c/h2\u003e\n\n\u003cp\u003eLuckily, with React, we have an alternative. The key lies in our ability to\n\u003cem\u003ecompose\u003c/em\u003e our UI out of multiple React components. Using this feature, we can\nbreak the above single component into two components. First, we'd isolate the\nUI layer into a presentational component; then we'd wrap that presentational\ncomponent in a container component that handles the state and other business\nlogic.\u003c/p\u003e\n\n\u003cp\u003eHere's how this might look. Take a gander at the following code snippets. First,\nwe have the presentational component, \u003ccode\u003eBook\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/Book.js\u003cbr\u003eimport React from 'react';\u003cbr\u003e\u003cbr\u003econst Book = ({ title, img_url }) =\u0026gt; (\u003cbr\u003e  \u0026lt;div className=\"book\"\u0026gt;\u003cbr\u003e    \u0026lt;img src={ img_url } alt={title}/\u0026gt;\u003cbr\u003e    \u0026lt;h3\u0026gt;{ title }\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003eexport default Book;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe component above has one thing to do - given props of \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003eimg_url\u003c/code\u003e, define how\nthese props should be displayed. This component is so simple, it's easy to write it compactly\nas a functional component.\u003c/p\u003e\n\n\u003cp\u003eSince we're dealing with an app that displays book\u003cem\u003es\u003c/em\u003e, one level up from\n\u003ccode\u003eBooks\u003c/code\u003e, we can write a second component, \u003ccode\u003eBookList\u003c/code\u003e. This component takes in a\n\u003ccode\u003ebooks\u003c/code\u003e prop and maps over it, rendering a \u003ccode\u003eBook\u003c/code\u003e component for each element in\nthe \u003ccode\u003ebooks\u003c/code\u003e prop.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/BookList.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport Book from './Book';\u003cbr\u003e\u003cbr\u003econst BookList = ({ books }) =\u0026gt; (\u003cbr\u003e  \u0026lt;div className=\"book-list\"\u0026gt;\u003cbr\u003e    { books.map(book =\u0026gt; \u0026lt;Book title={book.title} img_url={book.img_url} /\u0026gt;) }\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003eexport default BookList;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere again, although there is a bit more going on in the \u003ccode\u003eBookList\u003c/code\u003e component,\nthere isn't really anything complicated going on - this component could also be\nconsidered a presentational component, as all it really does is to define how to\ndisplay the \u003ccode\u003eBook\u003c/code\u003e components and to pass data to those components.\u003c/p\u003e\n\n\u003cp\u003eThat leaves the final component, where the main logic is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// src/BookListContainer.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport BookList from './BookList';\u003cbr\u003e\u003cbr\u003eclass BookListContainer extends React.Component {\u003cbr\u003e  constructor() {\u003cbr\u003e    super()\u003cbr\u003e\u003cbr\u003e    this.state = {\u003cbr\u003e      books: []\u003cbr\u003e    };\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  componentDidMount() {\u003cbr\u003e    fetch('https://learn-co-curriculum.github.io/books-json-example-api/books.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(bookData =\u0026gt; this.setState({ books: bookData.books }))\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return \u0026lt;BookList books={this.state.books} /\u0026gt;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default BookListContainer;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis component maintains the state and handles a request for data from a remote\nAPI. In terms of rendering, all it does it render \u003ccode\u003eBookList\u003c/code\u003e and pass a piece of\nstate down.\u003c/p\u003e\n\n\u003cp\u003eSo what have we done? We've broken up the original component into a few pieces.\nAll the state is contained in our container component \u003ccode\u003eBookListContainer\u003c/code\u003e. The\nlogic is the same, but it is has been \u003cem\u003euncoupled\u003c/em\u003e from the presentation layer,\nwhich is now contained in the \u003ccode\u003eBookList\u003c/code\u003e and \u003ccode\u003eBook\u003c/code\u003e components. Those\ncomponents, which are stateless, are now incredibly stable as well as concise.\u003c/p\u003e\n\n\u003cp\u003eBecause we've uncoupled (or to be more precise, loosely coupled) the data and\npresentation layers, we can now easily reuse the \u003ccode\u003eBookList\u003c/code\u003e component. We could,\nfor example, write another container component — let's say\n\u003ccode\u003eFavoritedBookListContainer\u003c/code\u003e — and then import and wrap \u003ccode\u003eBookList\u003c/code\u003e in\norder to build a different piece of our UI with the same code. \u003c/p\u003e\n\n\u003cp\u003eIf, later, our design team decided to redesign the way book lists appear in our\napp, they would only need to update \u003ccode\u003eBookList\u003c/code\u003e. This is React at its best.\nSaving time and minimizing codebase.\u003c/p\u003e\n\n\u003cp\u003eThe container component pattern in React therefore helps us write better code by\nenhancing the separation of concerns, i.e. the decoupling of the data and\npresentation layers, and by enabling code-reuse.\u003c/p\u003e\n\n\u003ch2\u003eAddendum on Container Components\u003c/h2\u003e\n\n\u003cp\u003eReact is an ever evolving framework. Using container and presentational components\nis just one way in which we can write and structure React applications. New additions\nto the language, such as \u003ca href=\"https://reactjs.org/docs/hooks-intro.html\"\u003eReact hooks\u003c/a\u003e, solve some of the challenges that were helped\nby creating separate components to handle logic and presentation. The originator\nof the container design pattern, Dan Abramov (part of the React dev team), has added a note to his\noriginal post on container components regarding this.\u003c/p\u003e\n\n\u003cp\u003eWhile container components have been de-emphasized, they are still a useful tool\nwhile you get your feet wet with React. Structuring apps with container and\npresentational components helps us to understand the way data is shared in an\napplication. It allows us to think in a more object-oriented way about React\ncomponents and can keep our applications organized.\u003c/p\u003e\n\n\u003cp\u003eIt is now entirely possible to write React applications in a single functional\ncomponent, and we encourage you to explore the newest features of React after \ncompleting these lessons.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@learnreact/container-components-c0e67432e005#.2kd1wuyp4\"\u003eContainer Components\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/learning-react-container-components/\"\u003eCSS Tricks: Container Components\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"webpack","title":"Webpack","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"webpack-and-react\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/webpack-and-react/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/webpack-and-react\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/webpack-and-react/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll unpack what \u003cstrong\u003eWebpack\u003c/strong\u003e brings to the table when developing React applications.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn what Webpack is\u003c/li\u003e\n\u003cli\u003eLearn how Webpack integrates with React\u003c/li\u003e\n\u003cli\u003eFrame Webpack's relative importance at this stage in learning React\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eWelcome back! We are picking up where we left off in the \u003ca href=\"https://learn.co/lessons/babel-and-react\"\u003eprevious lesson\u003c/a\u003e. If you didn't take a break, shame on you. In this lesson, we will explore Webpack and its place in the React development process.\u003c/p\u003e\n\n\u003ch2\u003eThe Problem\u003c/h2\u003e\n\n\u003cp\u003eTo best describe Webpack, we will begin by describing the problem that it was created to solve.\u003c/p\u003e\n\n\u003cp\u003ePicture having a server that sends some JavaScript using webpage to browsers. Let's imagine we have some \u003ccode\u003eanimateDiv.js\u003c/code\u003e script we want browsers to receive that itself makes use of \u003ccode\u003ejquery\u003c/code\u003e. The first file we send to a requesting client, \u003ccode\u003eindex.html\u003c/code\u003e, may look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- index.html --\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;meta charset=\"utf-8\"\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"jquery.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e    \u0026lt;script src=\"animateDiv.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Discotek\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div class=\"animat\" onclick=\"animateDiv.js\"\u0026gt;\u003cbr\u003e      I'm going to animate if you click me!\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this approach, we are actually making three http requests to the server for the application:\n  - We hit the base url and are returned the \u003ccode\u003eindex.html\u003c/code\u003e file\n  - \u003ccode\u003eindex.html\u003c/code\u003e tells the browser to request \u003ccode\u003ejquery.js\u003c/code\u003e from the server\n  - \u003ccode\u003eindex.html\u003c/code\u003e tells the browser to request \u003ccode\u003eanimateDiv.js\u003c/code\u003e from the server\u003c/p\u003e\n\n\u003cp\u003eA quick and dirty way around this would be to combine our JavaScript files into one file on the server (bringing this to two requests):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- index.html --\u0026gt;\n...\u003cbr\u003e\u0026lt;script src=\"combinedJqueryAnimateDiv.js\"\u0026gt;\u0026lt;/script\u0026gt;\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could go one step futher and even in-line the JavaScript directly into our HTML in a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag (sending everything at once in \u003ccode\u003eindex.html\u003c/code\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- index.html --\u0026gt;\n...\u003cbr\u003e\u0026lt;script\u0026gt;\u003cbr\u003e  // all the contents of jquery.js and animateDiv.js written directly here!\u003cbr\u003e\u0026lt;/script\u0026gt;\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUnfortunately, this is not very practical. We need to, by 'hand', combine JavaScript code from multiple files into one. Well...we're programmers! We automate the boring tasks like this! Introducing \u003cstrong\u003eWebpack\u003c/strong\u003e!\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://webpack.js.org/\"\u003eWebpack\u003c/a\u003e lets us combine different files automatically. This means that we can freely import external JS code in our JavaScript files (both local files as well as \u003ccode\u003enode_modules\u003c/code\u003e installed with \u003ccode\u003enpm\u003c/code\u003e). We trust that Webpack, before we send clients our JS code over the internet, intelligently packages it up for us. In a simplified example:\n  - File \u003ccode\u003esiliconOverlord.js\u003c/code\u003e has space-age AI code in it\n  - File \u003ccode\u003eenslaveHumanity.js\u003c/code\u003e wants to make use of this other file and send it to browsers all over the internet.\n  - Instead of always sending both \u003ccode\u003eenslaveHumanity.js\u003c/code\u003e and \u003ccode\u003esiliconOverlord.js\u003c/code\u003e to browsers, one after the other, \u003cstrong\u003eWebpack\u003c/strong\u003e pre-bundles them together into a single file that can be sent instead: \u003ccode\u003esingularity.js\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you have been working with dependencies already (\u003ccode\u003egem\u003c/code\u003es in rails, \u003ccode\u003erequire\u003c/code\u003e in vanilla JS, etc.) you may have noticed we did not need any tool like Webpack to work with code written in other files. While this is true, and we don't \u003cem\u003eneed\u003c/em\u003e Webpack to do this, let's highlight the problem Webpack solves before trying to understand it:.\u003c/p\u003e\n\n\u003cp\u003eWhen compiling a React application with Webpack, it'll check every file for dependencies that it needs to import, and also include that code. In more technical terms, it's traversing the dependency tree and inlining those dependencies in our application. What we'll end up with is one big JS file that includes \u003cem\u003eall\u003c/em\u003e of our code, including any dependencies (like \u003ccode\u003ejQuery\u003c/code\u003e, your components, your \u003ccode\u003enpm\u003c/code\u003e modules, etc.) in that file too. The convenience of this is not to be underestimated: one file, with \u003cem\u003eall\u003c/em\u003e of our code, means we only need to transfer a single thing to our clients when they ask for our React applications!\u003c/p\u003e\n\n\u003cp\u003eEnough theory, let's take a look at a rudimentary example of how Webpack does this. Let's assume we have the following application on our server that we want to share with the world:\u003c/p\u003e\n\n\u003ch3\u003eSimplified Webpack example\u003c/h3\u003e\n\n\u003cp\u003eThe files we want our client to have, which constitute one whole dank web application:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// reveal.js (pre Webpack digestion)\u003cbr\u003efunction reveal(person, realIdentity) {\u003cbr\u003e  person.identity = realIdentity\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default reveal\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// main.js (pre Webpack digestion)\u003cbr\u003eimport reveal from './reveal.js'\u003cbr\u003e\u003cbr\u003econst gutMensch = {\u003cbr\u003e  name: \"Andrew Cohn\",\u003cbr\u003e  identity: \"Friendly Neighborhood Flatiron Teacher\",\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ereveal(gutMensch, \"Chrome Boi\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWithout Webpack, we would need to find some way to send both files to our client and ensure they are playing  nicely together. We couldn't just send the \u003ccode\u003emain.js\u003c/code\u003e file wizzing over the internet, through a \u003ca href=\"https://en.wikipedia.org/wiki/Series_of_tubes\"\u003eseries of tubes\u003c/a\u003e, to our client expecting it to make use of the \u003ccode\u003ereveal\u003c/code\u003e function: the client hasn't even received the \u003ccode\u003ereveal.js\u003c/code\u003e file in this case! While we have several ways we could make this work, most of them are headaches and someone else has already made an excellent solution: Webpack.\u003c/p\u003e\n\n\u003cp\u003eInstead of writing our own bespoke, artisanal, Etsy™ sell-able dependency solution, we can just use Webpack!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe result after we unleash Webpack on these files:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// bundle.js (post Webpack digestion)\u003cbr\u003efunction reveal(person, realIdentity) {\u003cbr\u003e  person.identity = realIdentity\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst gutMensch = {\u003cbr\u003e  name: \"Andrew Cohn\",\u003cbr\u003e  identity: \"Friendly Neighborhood Flatiron Teacher\",\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ereveal(gutMensch, \"Chrome Boi\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we were to first pre-digest our files with Webpack, we would instead have a single, all-encompassing, file that ensures our dependencies are right where they belong.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eYou have just read a lot of information about a tool you likely have not worked directly with before. Luckily, its straightforward to summarize:\u003c/p\u003e\n\n\u003cp\u003eIn React, \u003cstrong\u003eWebpack\u003c/strong\u003e manages pesky dependency loading for us by \u003cstrong\u003epre-digesting\u003c/strong\u003e our many files' code and outputting a single 'bundle', which contains all of our code, with dependencies properly placed, in one file.\u003c/p\u003e\n\n\u003ch2\u003eLooking Forward\u003c/h2\u003e\n\n\u003cp\u003eAfter reading the previous lesson on Babel and now this one on Webpack, you may, understandably, be asking yourself:\n  - \"How important is this Webpack/Babel jargon?\"\n  - \"How much do I need to learn about the different tools that improve React development experience vs. actual React programming?\"\u003c/p\u003e\n\n\u003cp\u003eBecause \u003ccode\u003ecreate-react-app\u003c/code\u003e is so opaque with configuration files, allow us to be transparent with you:\u003c/p\u003e\n\n\u003cp\u003eAt Flatiron, we are constantly balancing an explanation of the fundamentals against practice on the real skills that will get you producing valuable applications the quickest. We believe that, while learning React basics, it's important to know how these tools (Webpack + Babel) work on a \u003cem\u003ehigh level\u003c/em\u003e. Let's justify both in turn:\u003c/p\u003e\n\n\u003cp\u003eMost React code nowadays is being compiled one way or another — be it using \u003cstrong\u003eWebpack\u003c/strong\u003e, an alternative such as \u003ca href=\"http://browserify.org/\"\u003eBrowserify\u003c/a\u003e, or something else. We want to use it, but we don't want to create unnecessary busywork for ourselves or distract with peripherals.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, there are a lot of juicy nectarines (read: low hanging fruit) that aren't present in the ECMAScript version browsers implement, such as \u003ca href=\"https://babeljs.io/docs/plugins/preset-stage-2/\"\u003eupcoming proposed JS language features\u003c/a\u003e, which we can pluck with \u003cstrong\u003eBabel\u003c/strong\u003e. Don't you want to sink your teeth into those \u003ca href=\"https://en.wikipedia.org/wiki/Syntactic_sugar\"\u003esyntactic sugary\u003c/a\u003e stone fruits?\u003c/p\u003e\n\n\u003cp\u003eFor the most part, Babel and Webpack will be abstracted from you so you can focus on learning the primary React competencies.  This will streamline the development process. In layperson terms, if React development skills were muscles, we want to focus on getting you \u003ca href=\"https://i.imgur.com/RAegPMp.jpg\"\u003eswol\u003c/a\u003e before having you worry about learning to assemble weight machines.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWebpack: \u003ca href=\"https://webpack.js.org/\"\u003ehttps://webpack.js.org/\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eBabel: \u003ca href=\"http://babeljs.io/\"\u003ehttp://babeljs.io/\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"dynamic-components","title":"Dynamic Components","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-dynamic-components\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-dynamic-components/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-dynamic-components\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-dynamic-components/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll take the next step with React components and examine how they can be used\nas dynamic templates.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand how React components can be dynamic templates\u003c/li\u003e\n\u003cli\u003eCreate dynamic React components and show the HTML they create\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eAs the building blocks of React applications, components are \u003cem\u003edynamic\u003c/em\u003e, in that\nthey can describe a template of HTML and fill in variable data. This lesson\nbuilds a real example of a blogging application to illustrate dynamic\ncomponents.\u003c/p\u003e\n\n\u003cp\u003eWe will use the following components:\n  - \u003ccode\u003eBlogContent\u003c/code\u003e - contains the content of the blog post\n  - \u003ccode\u003eComment\u003c/code\u003e - contains one user's comment\n  - \u003ccode\u003eBlogPost\u003c/code\u003e - the 'top level' React component, which is responsible for rendering both\n\u003ccode\u003eBlogContent\u003c/code\u003e and \u003ccode\u003eComment\u003c/code\u003e\u003c/p\u003e\n\n\u003ch4\u003eMaking Components Dynamic\u003c/h4\u003e\n\n\u003cp\u003eTime to put the \u003cstrong\u003edynamic\u003c/strong\u003e aspect of components to use! Let's start with the\n\u003ccode\u003eBlogContent\u003c/code\u003e component. The following snippet shows how we can describe\nvariables in our components' \u003ccode\u003erender()\u003c/code\u003e methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BlogContent extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.props.articleText}\u003cbr\u003e      \u0026lt;/div\u0026gt;  \u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see something new in the above code. Inside of \u003ccode\u003erender()\u003c/code\u003e's return\nblock, we have this funky syntax: \u003ccode\u003e{this.props.articleText}\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eThis line is telling React to place the value that \u003ccode\u003ethis.props.articleText\u003c/code\u003e\nrepresents within the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e. Ok, so where does \u003ccode\u003ethis.props.articleText\u003c/code\u003e come\nfrom?\u003c/p\u003e\n\n\u003ch4\u003ePassing Information\u003c/h4\u003e\n\n\u003cp\u003eReact allows us to pass units of information from a parent component down to a\nchild component. We call these \u003cstrong\u003eprops\u003c/strong\u003e, which we will dig more into in a later lesson.\nLet's see how we can pass information from \u003ccode\u003eBlogPost\u003c/code\u003e down to its child\n\u003ccode\u003eBlogContent\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BlogPost extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;BlogContent articleText={\"Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\"}/\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above, we see the \u003ccode\u003eBlogPost\u003c/code\u003e component, and inside of it, we refer to the \u003ccode\u003eBlogContent\u003c/code\u003e component. We also create a prop for \u003ccode\u003eBlogContent\u003c/code\u003e called \u003ccode\u003earticleText\u003c/code\u003e that we assign a value of \"Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\" This value is accessible from within the\n\u003ccode\u003eBlogContent\u003c/code\u003e component as \u003ccode\u003ethis.props.articleText\u003c/code\u003e! To create props, we write them the same way as writting attributes for an HTML tag. But remember, this is JSX and not HTML! \u003c/p\u003e\n\n\u003cp\u003eOne more thing about props: they can be any data type! In our example, we pass a string as a prop. But we can pass a number, boolean, object, function, etc. as a prop! \u003c/p\u003e\n\n\u003ch4\u003eExpanding our Application\u003c/h4\u003e\n\n\u003cp\u003eWe still need a \u003ccode\u003eComment\u003c/code\u003e component that we can use for each comment in a\n\u003ccode\u003eBlogPost\u003c/code\u003e. The \u003ccode\u003eComment\u003c/code\u003e component would look something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Comment extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.props.commentText}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis component, when used, will display content that is passed down to it,\nallowing us to pass different content to multiple \u003ccode\u003eComment\u003c/code\u003e components.  Let's\nadd them in. Of course, with components being re-usable, we can make as many as\nwe want:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BlogPost extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;BlogContent articleText={\"Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\"}/\u0026gt;\u003cbr\u003e        \u0026lt;Comment /\u0026gt;\u003cbr\u003e        \u0026lt;Comment /\u0026gt;\u003cbr\u003e        \u0026lt;Comment /\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...and just as before, we can pass content data down to them:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BlogPost extends React.Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;BlogContent articleText={\"Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\"}/\u0026gt;\u003cbr\u003e        \u0026lt;Comment commentText={\"I agree with this statement. - Angela Merkel\"}/\u0026gt;\u003cbr\u003e        \u0026lt;Comment commentText={\"A universal truth. - Noam Chomsky\"}/\u0026gt;\u003cbr\u003e        \u0026lt;Comment commentText={\"Truth is singular. Its ‘versions’ are mistruths. - Sonmi-451\"}/\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere is quite a bit going on here. Most notably, we are passing information\nfrom a parent component to many child components. Specifically, we are doing this by creating a prop called \u003ccode\u003ecommentText\u003c/code\u003e to pass to each \u003ccode\u003eComment\u003c/code\u003e component, which is then accessible in each instance of \u003ccode\u003eComment\u003c/code\u003e as \u003ccode\u003ethis.props.commentText\u003c/code\u003e. Let's expand the HTML that\nthis would ultimately render:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003ex\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Dear Reader: Bjarne Stroustrup has the perfect lecture oration.\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    I agree with this statement. - Angela Merkel\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    A universal truth. - Noam Chomsky\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Truth is singular. Its ‘versions’ are mistruths - Sonmi-451\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...but seeing is believing so let's look at this in technicolor! Following is an\ninspection of the L and \u003cem\u003ereal live DOM elements\u003c/em\u003e that React rendered when we\nblasted this code into a new application (classes, IDs, and minor CSS have been\nadded for a better visual display):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/completed-example-dynamic-components.gif\" alt=\"completed example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAlright now! Take a moment. Stretch your limbs, make a sandwich, let the\nglorious paradigm sink in. Dynamic components are a core facet of React\nprogramming, and most of what we do as React programmers builds upon them.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eWhile HTML elements are the basic building blocks of a website, (for\nexample, a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e), a React application usually consists of several React\n\u003cem\u003ecomponents\u003c/em\u003e combined together. Unlike simple HTML elements, React components\nare smarter and bigger. They allow you to do much more and incorporate logic\ninto how content displays.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReact components:\u003c/strong\u003e\n  - are modular, reusable, and enable a 'templating' like functionality\n  - help us organize our user interface's \u003cem\u003elogic\u003c/em\u003e and \u003cem\u003epresentation\u003c/em\u003e\n  - enable us to think about each piece in isolation, enabling us to apply structure to complex programs\u003c/p\u003e\n\n\u003ch2\u003eLooking Forward\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we introduced some fundamentals of a React component. Going\nforward we will expand on what we can do with components, how they fit into the\nlarger React landscape, and what built-in functionality they come with.\u003c/p\u003e\n\n\u003ch2\u003eA Quick Note About the Past...\u003c/h2\u003e\n\n\u003cp\u003eReact is a living framework that is constantly being updated and improved upon.\nCompounding on that, React has spanned the transition from ES5 to ES6, (the\nnewer version of which has had many updates, including \u003ccode\u003eClass\u003c/code\u003e syntax). This\nmeans old versions of React code will, in some places, look different.\u003c/p\u003e\n\n\u003cp\u003eIn older versions a method, \u003ccode\u003eReact.createClass()\u003c/code\u003e, was used in place of where we\nwere defining our own \u003ccode\u003eClass\u003c/code\u003ees and extending the \u003ccode\u003eReact.component\u003c/code\u003e class (see\ncode above!). While this \u003ccode\u003eReact.createClass()\u003c/code\u003e method has since been deprecated,\nit is still present in many older code bases and tutorials.\u003c/p\u003e\n\n\u003cp\u003eFor now, we recommend sticking with the up-to-date class syntax we present, but\ndon't be alarmed if you come across unfamiliar ways to create React components.\nThe \u003ca href=\"https://reactjs.org/docs/react-without-es6.html\"\u003eReact documentation\u003c/a\u003e is always there for you regarding backwards\ncompatibility.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/react-api.html\"\u003eReact Top-Level API\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"state","title":"State","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-state-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-state-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-state-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-state-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll dive into component \u003cstrong\u003estate\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain what state is\u003c/li\u003e\n\u003cli\u003eExplain the difference between state and props\u003c/li\u003e\n\u003cli\u003eShow examples of how state is defined and updated\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat's state?\u003c/h2\u003e\n\n\u003cp\u003eLet's quickly talk about what \u003cem\u003estate\u003c/em\u003e is in React. State is data that is mutated\nin your component. A component's state, unlike a component's props, \u003cem\u003ecan\u003c/em\u003e change\nduring the component's life.\u003c/p\u003e\n\n\u003cp\u003eConsider the limitations of props: for a component's props to change, its\n\u003cem\u003eparent\u003c/em\u003e component needs to send it new props (after which, the component would\n'remake' itself with the new props). State provides us with a way to maintain and update information \u003cem\u003ewithin\u003c/em\u003e a component \u003cem\u003ewithout\u003c/em\u003e requiring its parent to somehow\nsend updated information.\u003c/p\u003e\n\n\u003cp\u003eImagine that we have a single component which displays an integer. When a user\nclicks the component, it should increment its integer by 1. If we were to\nrepresent this integer value in the component using \u003cstrong\u003estate\u003c/strong\u003e, the component\ncould increment itself without needing any fussy prop passing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MyComp extends React.Component {\u003cbr\u003e\u003cbr\u003e  // we use the constructor to set the INITIAL STATE\u003cbr\u003e  constructor() {\u003cbr\u003e    super()\u003cbr\u003e    this.state = {\u003cbr\u003e      count: 0\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  // our increment method makes use of the 'setState' method, which is what we use to alter state\u003cbr\u003e  increment = () =\u0026gt; {\u003cbr\u003e    const newCount = this.state.count + 1\u003cbr\u003e    this.setState({\u003cbr\u003e      count: newCount\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div onClick={this.increment}\u0026gt;\u003cbr\u003e        {this.state.count}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere's a lot going on above. Let's take some time to break things down. We set\nup the initial value of state in the \u003ccode\u003econstructor()\u003c/code\u003e. Remember from Object Oriented\nJavascript, the value of \u003ccode\u003ethis\u003c/code\u003e above is an instance of our class \u003ccode\u003eMyComp\u003c/code\u003e. So\n\u003ccode\u003ethis.state = {count: 0}\u003c/code\u003e is saying this instance of \u003ccode\u003eMyComp\u003c/code\u003e should have a\nproperty called \u003ccode\u003estate\u003c/code\u003e that has a value of \u003ccode\u003e{count : 0}\u003c/code\u003e. Also, we should call\n\u003ccode\u003esuper()\u003c/code\u003e in the constructor since we are inheriting from another class via the\n\u003ccode\u003eextends\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003cp\u003eAlso, handling events in React work a bit differently than in vanilla JavaScript.\nWe are going to dive deeper into React event handling later. For now, know that\nReact events are written as attributes inside a JSX tag and are named using\ncamelCase. Notice the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e tag in the \u003ccode\u003erender\u003c/code\u003e method has an attribute\n\u003ccode\u003eonClick\u003c/code\u003e which is set equal to the function object \u003ccode\u003ethis.increment\u003c/code\u003e. What this code\ndoes is:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWhen the \u003ccode\u003ediv\u003c/code\u003e is clicked,\u003c/li\u003e\n\u003cli\u003ethe function \u003ccode\u003ethis.increment\u003c/code\u003e will be invoked,\u003c/li\u003e\n\u003cli\u003ethereby updating the state of \u003ccode\u003eMyComp\u003c/code\u003e using \u003ccode\u003ethis.setState()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNote: You may have noticed that \u003ccode\u003eincrement\u003c/code\u003e is written as an instance method and \nas an arrow function. We write it as an \u003cstrong\u003earrow function\u003c/strong\u003e to bind the value of \u003ccode\u003ethis\u003c/code\u003e \nto be our instance of \u003ccode\u003eMyComp\u003c/code\u003e. Then, when we say \u003ccode\u003ethis.setState()\u003c/code\u003e, we are really \njust saying to set the state of \u003ccode\u003eMyComp\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eTake your time to read through the above code. Work through it line by line and\nmake sure you are comfortable before moving forward.\u003c/p\u003e\n\n\u003ch2\u003eInitial State and 'setState()'\u003c/h2\u003e\n\n\u003cp\u003eLet's further explore both the setting of \u003cstrong\u003einitial state\u003c/strong\u003e in the constructor and the use of\n\u003cstrong\u003ethis.setState()\u003c/strong\u003e:\u003c/p\u003e\n\n\u003ch4\u003eInitial State\u003c/h4\u003e\n\n\u003cp\u003eIn order to understand \u003cem\u003ewhy\u003c/em\u003e we are setting \u003cstrong\u003einitial state\u003c/strong\u003e in the constructor\nthe most important thing to know is that the \u003ccode\u003econstructor\u003c/code\u003e method runs \u003cstrong\u003efirst\u003c/strong\u003e\nwhen a component is made (and \u003ccode\u003erender()\u003c/code\u003e runs later!). Because we won't dive\nfurther into the React Component Lifecycle just yet, commit this mantra to\nheart:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; We set initial state in the constructor because it runs first\u003c/p\u003e\n\n\u003cp\u003e...got it? Good. Don't forget. Now forget we even mentioned this new concept of\n'Component Lifecycle' and stay focused on state.\u003c/p\u003e\n\n\u003cp\u003eOnce we have provided a component with its \u003cstrong\u003einitial state\u003c/strong\u003e we can manipulate\nit later using the method: \u003ccode\u003esetState()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003esetState()\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003esetState()\u003c/code\u003e is straightforward in its purpose: it sets/updates state! That's\nit! That's what it's there for. While simple in that way, there is one very\nimportant caveat about \u003cem\u003ehow\u003c/em\u003e it functions that we need to explore: it sets state\n\u003cem\u003easynchronously\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn order to understand why this is important, let's look at an example of\n\u003ccode\u003esetState()\u003c/code\u003e being used in a component. The following gif is of this component\n(pay close attention to the \u003ccode\u003econsole.log()\u003c/code\u003es:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  constructor() {\u003cbr\u003e    super()\u003cbr\u003e    this.state = {\u003cbr\u003e      count: 0\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  increment = () =\u0026gt; {\u003cbr\u003e    console.log(`before setState: ${this.state.count}`)\u003cbr\u003e\u003cbr\u003e    this.setState({\u003cbr\u003e      count: this.state.count + 1\u003cbr\u003e    })\u003cbr\u003e\u003cbr\u003e    console.log(`after setState: ${this.state.count}`)\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div onClick={this.increment}\u0026gt;\u003cbr\u003e        {this.state.count}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/asynchronous-state-setting-example.gif\" alt=\"state example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat we are seeing is \u003ccode\u003esetState()\u003c/code\u003e functioning \u003cem\u003easynchronously\u003c/em\u003e. When we execute\n\u003ccode\u003esetState()\u003c/code\u003e, it is \u003cem\u003enon-blocking\u003c/em\u003e. It fires off a message to the React\ncomponent's inner workings saying: \"Hey, you need to update state to this value\nwhen you have a chance.\" The component finishes doing its current task \u003cem\u003ebefore\u003c/em\u003e\nupdating the state. In this case, it finishes executing the \u003ccode\u003eincrement\u003c/code\u003e function\nin full before updating the state.\u003c/p\u003e\n\n\u003cp\u003eIt's not uncommon for new React developers to get 'bitten' by the asynchronous\nnature of \u003ccode\u003esetState()\u003c/code\u003e at least once. If \u003ccode\u003esetState()\u003c/code\u003e were not \u003cem\u003easynchronous\u003c/em\u003e,\nthe two logs would not be the same number.\u003c/p\u003e\n\n\u003ch2\u003eA Word of Caution\u003c/h2\u003e\n\n\u003cp\u003eWhile component state is a very powerful feature, it should be used as sparingly\nas possible. State adds (sometimes unnecessary) complexity and can be very easy\nto lose track of. The more state we introduce in our application, the harder it\nwill be to keep track of all of the changes in our data. Remember: state is for\nvalues that are expected to change during the components life.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003estate\u003c/strong\u003e is for values that are expected to change\u003c/li\u003e\n\u003cli\u003ewe assign \u003cstrong\u003einitial state\u003c/strong\u003e in the constructor\u003c/li\u003e\n\u003cli\u003ewe update state with \u003ccode\u003esetState()\u003c/code\u003e, which is a method provided by the \u003ccode\u003eReact.Component\u003c/code\u003e class\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esetState()\u003c/code\u003e is \u003cem\u003easynchronous\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#components-are-just-state-machines\"\u003eOfficial React docs on state\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\"\u003eProps vs. state\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"events-in-detail","title":"Events in Detail","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-events-in-detail\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-events-in-detail/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-events-in-detail\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-events-in-detail/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll look at how we can use event data and event pooling. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eAccess event data\u003c/li\u003e\n\u003cli\u003eDescribe how event pooling works\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eAccessing event data\u003c/h2\u003e\n\n\u003cp\u003eLet's take a deeper look at the actual event being passed through. A \u003ccode\u003eSyntheticEvent\u003c/code\u003e event has all of its usual properties and methods. These include its type, target, mouse coordinates, and so on. As a reminder, we add an event handler to a JSX tag, and then we can use the event's data like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexport default class Clicker extends React.Component {\u003cbr\u003e\u003cbr\u003e  handleClick = (event) =\u0026gt; {\u003cbr\u003e    console.log(event.type); // prints 'click'\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;button onClick={this.handleClick}\u0026gt;Click me!\u0026lt;/button\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor example, if we wanted to get the target of an event, we'd use \u003ccode\u003eevent.target\u003c/code\u003e. If we want to prevent a default action whenever an event happens, we call \u003ccode\u003eevent.preventDefault()\u003c/code\u003e. This is all super similar to regular browser events and should feel very familiar!\u003c/p\u003e\n\n\u003ch2\u003eEvent pooling\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/38Gl1kiklmY5W/giphy.gif\" alt=\"Chilling in the pool\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSince React has its own implementation for events (called \u003ccode\u003eSyntheticEvent\u003c/code\u003e), it allows us to take advantage of several techniques to increase the performance of our applications. One such technique is called 'event pooling'. It might sound complicated, but it's actually pretty simple.\u003c/p\u003e\n\n\u003cp\u003eEvent pooling means that whenever an event fires, its event data (an object) is sent to the callback. The object is then immediately cleaned up for later use. This is what we mean by 'pooling': the event object is in effect being sent back to the pool for use in a later event. It's something that trips up a lot of people, and you might have run into it yourself when inspecting \u003ccode\u003eSyntheticEvent\u003c/code\u003e in the browser.\u003c/p\u003e\n\n\u003cp\u003eIf we click the button of our \u003ccode\u003eClicker\u003c/code\u003e component and then inspect the logged out object in our console, we notice that all properties are \u003ccode\u003enull\u003c/code\u003e again. By the time we inspect the object in our browser, the event object will have already been returned to the pool. This means that we can't access event data in an asynchronous manner by saving it in the state, or running a timeout and \u003cem\u003ethen\u003c/em\u003e accessing the event again.\u003c/p\u003e\n\n\u003cp\u003eYou usually don't need to access your event data in an asynchronous manner like described above, but if you do, there are two options: you either store the data you need in a variable (e.g. \u003ccode\u003econst target = event.target\u003c/code\u003e), \u003cem\u003eor\u003c/em\u003e we can make the event persistent by calling that method: \u003ccode\u003eevent.persist()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/events.html\"\u003eReact Events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"react-fragments","title":"React Fragments","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-fragments-and-portals\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-fragments-and-portals/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-fragments-and-portals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-fragments-and-portals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain the use of fragments in React components\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWhy Fragments\u003c/h2\u003e\n\n\u003cp\u003eIt is required that every React component must return a single JSX element.\nBecause of this, we often use the HTML-like elements such as \u003ccode\u003ediv\u003c/code\u003e to wrap other\nelements within the JSX. When rendered, this creates a DOM element for that\nouter \u003ccode\u003ediv\u003c/code\u003e, which is sometimes unnecessary. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass ChildComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass ParentComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"parent\"\u0026gt;\u003cbr\u003e        \u0026lt;ChildComponent /\u0026gt;\u003cbr\u003e        \u0026lt;ChildComponent /\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis set up creates a DOM structure that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"parent\"\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThose nested \u003ccode\u003ediv\u003c/code\u003es don't have any purpose here and don't have any styling\nbesides their default properties. Without them though, we would have an error as\nthere are \u003cem\u003etwo\u003c/em\u003e \u003ccode\u003ep\u003c/code\u003e tags being returned in the ChildComponent. Instead, we could\nuse JSX Fragments, preventing the extra \u003ccode\u003ediv\u003c/code\u003es from being added to the DOM:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass ChildComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    //The wrapping 'div' here has been replaced with a React fragment\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass ParentComponent extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;ChildComponent /\u0026gt;\u003cbr\u003e        \u0026lt;ChildComponent /\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    )\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the fragment in place, the DOM will now look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hey, I am a child\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;My name is child component\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/\u0026gt;\u003c/code\u003e are shorthand for \u003ccode\u003e\u0026lt;React.Fragment\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/React.Fragment\u0026gt;\u003c/code\u003e\nand can be used interchangeably. \u003cstrong\u003eThey allow a component to return multiple\nelements without adding a wrapper element that adds to the DOM.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFragments are not restricted to the outermost element being returned in JSX.\nImagine you had an array of book objects in your props that you want rendered to\nthe DOM. Each book has multiple attributes you want to display, but you don't\nneed an element that wraps around these attributes. A fragment can be used here,\nand can still take a key attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst Bookshelf = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;section\u0026gt;\u003cbr\u003e      {props.books.map(book =\u0026gt; (\u003cbr\u003e        \u0026lt;React.Fragment key={item.id}\u0026gt;\u003cbr\u003e          \u0026lt;h1\u0026gt;{book.title}\u0026lt;/h1\u0026gt;\u003cbr\u003e          \u0026lt;h2\u0026gt;{book.author}\u0026lt;/h2\u0026gt;\u003cbr\u003e        \u0026lt;/React.Fragment\u0026gt;\u003cbr\u003e      ))}\u003cbr\u003e    \u0026lt;/section\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u0026gt; According to the \u003ca href=\"https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html#support-for-fragment-syntax\"\u003eReact docs\u003c/a\u003e: \n\u0026gt; As of 16.2.0, support for fragment shorthand syntax \u003ccode\u003e\u0026lt;\u0026gt;\u0026lt;p\u0026gt;Hello\u0026lt;/p\u0026gt;\u0026lt;/\u0026gt;\u003c/code\u003e will vary depending on the tools you use to build your app. A stable release may take a bit longer as we await adoption by upstream projects. Support for JSX fragments is available in Babel v7.0.0-beta.31 and above! So for compatibility purposes, it may be better to fully write out \u003ccode\u003e\u0026lt;React.Fragment\u0026gt;\u0026lt;p\u0026gt;Hello\u0026lt;/p\u0026gt;\u0026lt;/React.Fragment\u0026gt;\u003c/code\u003e for the time being.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eFragments are a small addition to React overall, but when used properly, can\nreduce a lot of unnecessary DOM bloat. They allow us a bit more flexibility in\nhow we write our components, eliminating the need for wrapper elements.\u003c/p\u003e","frontPage":false}],"assignments":[{"exportId":"g023eef3759e09e0d4379b7cd3ac0a206","title":"Async Giphy Search Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-async-gif-search-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-async-gif-search-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-async-gif-search-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eYou're going to be building out a Gif search using the Giphy API. In this lab, there are no tests to pass. Rather, your task is to create a working app in your browser using the instructions below. When finished, you should have an application that can take in a user's input, fetch JSON data from the Giphy API, and display the results.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/learn-co-curriculum/react-async-gif-search-lab/master/async.gif\" alt=\"giphy search\"\u003e\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eThe URL for the API is\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ehttps://api.giphy.com/v1/gifs/search?q=YOUR QUERY HERE\u0026amp;api_key=dc6zaTOxFJmzC\u0026amp;rating=g\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eWhile the above API key \u003cem\u003emay\u003c/em\u003e work, we recommend creating your own API key by following the \u003ca href=\"https://developers.giphy.com/docs/api/#quick-start-guide\"\u003einstructions on Giphy's developer site\u003c/a\u003e. Creating a key is free and only requires an account. Using your own key will prevent any potential rate limiting if other students are also working on this lesson.\u003c/p\u003e  \u003cp\u003eOnce you've got your key, you should be able to access the Giphy API from a browser and receive a JSON response to confirm everything is working.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ehttps://api.giphy.com/v1/gifs/search?q=dolphin\u0026amp;api_key=YOUR API KEY\u0026amp;rating=g\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eYou should get back an array of objects, each containing information about a particular image.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \"data\": [\u003cbr\u003e    {\u003cbr\u003e      \"type\": \"gif\",\u003cbr\u003e      \"id\": \"l0HlNQ03J5JxX6lva\",\u003cbr\u003e      \"slug\": \"bbc-wildlife-l0HlNQ03J5JxX6lva\",\u003cbr\u003e      \"url\": \"https://giphy.com/gifs/bbc-wildlife-l0HlNQ03J5JxX6lva\",\u003cbr\u003e      \"bitly_gif_url\": \"https://gph.is/2iC32M8\",\u003cbr\u003e      \"bitly_url\": \"https://gph.is/2iC32M8\",\u003cbr\u003e\u003cbr\u003e      ...\u003cbr\u003e\u003cbr\u003e      \"images\": {\u003cbr\u003e        \"fixed_height_still\": {\u003cbr\u003e          \"url\": \"https://media0.giphy.com/media/l0HlNQ03J5JxX6lva/200_s.gif?cid=e1bb72ff5b9fa2866168584b51f13892\",\u003cbr\u003e          \"width\": \"400\",\u003cbr\u003e          \"height\": \"200\",\u003cbr\u003e          \"size\": \"55556\"\u003cbr\u003e        },\u003cbr\u003e        ...\u003cbr\u003e        \"original\": {\u003cbr\u003e          \"url\": \"https://media0.giphy.com/media/l0HlNQ03J5JxX6lva/giphy.gif?cid=e1bb72ff5b9fa2866168584b51f13892\",\u003cbr\u003e          \"width\": \"480\",\u003cbr\u003e          \"height\": \"240\",\u003cbr\u003e        }\u003cbr\u003e        ...\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e    ] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Notice there are many URL keys on each image object. The first \u003ccode\u003eurl\u003c/code\u003e key, just below \u003ccode\u003etype\u003c/code\u003e, \u003ccode\u003eid\u003c/code\u003e, and \u003ccode\u003eslug\u003c/code\u003e, will bring you to the images page on \u003ca href=\"https://giphy.com/\"\u003egiphy.com\u003c/a\u003e. We only want the path to the actual image, which is found at \u003ccode\u003eimages.original.url\u003c/code\u003e. Using other \u003ccode\u003eurl\u003c/code\u003e keys may cause CORS issues.\u003c/p\u003e  \u003ch2\u003eYour Components\u003c/h2\u003e  \u003ch3\u003eApp\u003c/h3\u003e  \u003cp\u003eYour top level component will be the \u003ccode\u003eApp\u003c/code\u003e component - no surprises there! It will be responsible for rendering the \u003ccode\u003eNavBar\u003c/code\u003e component (this component is already provided for you, note the project has bootstrap loaded in) and the \u003ccode\u003eGifListContainer\u003c/code\u003e component.\u003c/p\u003e  \u003ch3\u003eGifListContainer\u003c/h3\u003e  \u003cp\u003e\u003ccode\u003eGifListContainer\u003c/code\u003e should be a component that does data fetching and then renders its corresponding sub-component. That’s it.\u003c/p\u003e  \u003cp\u003eIn our app, the \u003ccode\u003eGifListContainer\u003c/code\u003e will be responsible for fetching the data from the Giphy API, storing the first 3 gifs from the response in its component \u003cstrong\u003estate\u003c/strong\u003e, and passing that data down to its child, the \u003ccode\u003eGifList\u003c/code\u003e component, as a prop.\u003c/p\u003e  \u003cp\u003eIt will also render a \u003ccode\u003eGifSearch\u003c/code\u003e component that renders the form. \u003ccode\u003eGifListContainer\u003c/code\u003e should pass down a submit handler function to \u003ccode\u003eGifSearch\u003c/code\u003e as a prop.\u003c/p\u003e  \u003ch3\u003eGifList\u003c/h3\u003e  \u003cp\u003e\u003ccode\u003eGifList\u003c/code\u003e receives data from its props and renders html given the input data. It can render a top level \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e with each gif as an \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eGifSearch\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eGifSearch\u003c/code\u003e component will render a form that receives the user input for the Giphy search. The text input should be a \u003cem\u003econtrolled component\u003c/em\u003e that stores the value of the input in its component state and renders the DOM accordingly. The React component is always in charge of what the DOM looks like.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eGifSearch\u003c/code\u003e should receive a callback prop from its parent. On a submit event, it should invoke that callback prop with the value of the text input. It is this callback function, defined in \u003ccode\u003eGifListContainer\u003c/code\u003e, that will actually query the API with the text the user has entered.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g99974a5a880be34d15110fdbff18b9bd","title":"BONUS: React Forms Abstraction","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-forms-abstraction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-abstraction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-abstraction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eMake our form logic more reusable by creating a dynamic \u003ccode\u003eonChange\u003c/code\u003e event handler\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCode Along\u003c/h2\u003e  \u003cp\u003eIf you want to code along there is starter code in the \u003ccode\u003esrc\u003c/code\u003e folder. Make sure to run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to see the code in the browser.\u003c/p\u003e  \u003ch2\u003eForm State\u003c/h2\u003e  \u003cp\u003eLet's talk about the \u003ccode\u003eonChange\u003c/code\u003e event we've got set up now in initial version of our \u003ccode\u003eForm\u003c/code\u003e component. If we look at the original code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFirstName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setLastName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can imagine that adding more input fields to this form is going to get repetitive pretty fast. For every new input field, we'd need to add:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea new state variable by calling \u003ccode\u003euseState()\u003c/code\u003e to hold the value of that input\u003c/li\u003e \u003cli\u003ea new \u003ccode\u003ehandleChange\u003c/code\u003e function to update that piece of state\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAs a first refactor, let's use \u003ccode\u003euseState\u003c/code\u003e just once, and make an object representing all of our input fields:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Form() {\u003cbr\u003e  const [formData, setFormData] = useState({\u003cbr\u003e    firstName: \"John\",\u003cbr\u003e    lastName: \"Henry\",\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFormData({\u003cbr\u003e      ...formData,\u003cbr\u003e      firstName: event.target.value,\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setFormData({\u003cbr\u003e      ...formData,\u003cbr\u003e      lastName: event.target.value,\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        onChange={handleFirstNameChange}\u003cbr\u003e        value={formData.firstName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        onChange={handleLastNameChange}\u003cbr\u003e        value={formData.lastName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince our initial state is an \u003cem\u003eobject\u003c/em\u003e, we have to copy all the key/value pairs from the current version of that object into our new state — that's what this spread operator here is doing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esetFormData({\u003cbr\u003e  // formData is an object, so we need to copy all the key/value pairs\u003cbr\u003e  ...formData,\u003cbr\u003e  // we want to overwrite the lastName key with a new value\u003cbr\u003e  lastName: event.target.value,\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we just have one object in state to update whenever a the input field changes. Our change handlers are still a bit verbose, however. Since each one is changing a different value in our state, we've got them separated here. You can imagine that once we've got a more complicated form, this route may result in a very cluttered component. Instead of separate methods, we could actually condense this down into one abstracted component. Since \u003ccode\u003eevent\u003c/code\u003e is being passed in as the argument, we have access to some of the \u003ccode\u003eevent.target\u003c/code\u003e attributes that may be present.\u003c/p\u003e  \u003cp\u003eIf we give our inputs \u003ccode\u003ename\u003c/code\u003e attributes, we can access them as \u003ccode\u003eevent.target.name\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input\u003cbr\u003e  type=\"text\"\u003cbr\u003e  name=\"firstName\"\u003cbr\u003e  value={formData.firstName}\u003cbr\u003e  onChange={handleFirstNameChange}\u003cbr\u003e/\u0026gt;\u003cbr\u003e\u0026lt;input\u003cbr\u003e  type=\"text\"\u003cbr\u003e  name=\"lastName\"\u003cbr\u003e  value={formData.lastName}\u003cbr\u003e  onChange={handleLastNameChange}\u003cbr\u003e/\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we make sure the \u003ccode\u003ename\u003c/code\u003e attributes of our \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e fields match keys in our state, we can write a generic \u003ccode\u003ehandleChange\u003c/code\u003e function like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleChange(event) {\u003cbr\u003e  // name is the KEY in of the formData object we're trying to update\u003cbr\u003e  const name = event.target.name;\u003cbr\u003e  const value = event.target.value;\u003cbr\u003e\u003cbr\u003e  setFormData({\u003cbr\u003e    ...formData,\u003cbr\u003e    [name]: value,\u003cbr\u003e  });\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we connect this method to both of our \u003ccode\u003einput\u003c/code\u003es, they will both correctly update state. Why? Because for the first \u003ccode\u003einput\u003c/code\u003e, \u003ccode\u003eevent.target.name\u003c/code\u003e is set to \u003ccode\u003efirstName\u003c/code\u003e, while in the second \u003ccode\u003einput\u003c/code\u003e, it is set to \u003ccode\u003elastName\u003c/code\u003e. Each \u003ccode\u003einput\u003c/code\u003e's \u003ccode\u003ename\u003c/code\u003e attribute will change which part of state is actually updated!\u003c/p\u003e  \u003cp\u003eNow, if we want to add a new input field to the form, we just need to add two things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea new key in our \u003ccode\u003eformData\u003c/code\u003e state, and\u003c/li\u003e \u003cli\u003ea new \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e field where the \u003ccode\u003ename\u003c/code\u003e attribute matches our new key\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWe can take it one step further, and also handle \u003ccode\u003echeckbox\u003c/code\u003e inputs in our \u003ccode\u003ehandleChange\u003c/code\u003e input. Since checkboxes have a \u003ccode\u003echecked\u003c/code\u003e attribute instead of the \u003ccode\u003evalue\u003c/code\u003e attribute, here's what we'd need to check what \u003ccode\u003etype\u003c/code\u003e our input is in order to get the correct value in state.\u003c/p\u003e  \u003cp\u003eHere's what the final version of our \u003ccode\u003eForm\u003c/code\u003e component looks like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [formData, setFormData] = useState({\u003cbr\u003e    firstName: \"John\",\u003cbr\u003e    lastName: \"Henry\",\u003cbr\u003e    admin: false,\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  function handleChange(event) {\u003cbr\u003e    const name = event.target.name;\u003cbr\u003e    let value = event.target.value;\u003cbr\u003e\u003cbr\u003e    // use `checked` property of checkboxes instead of `value`\u003cbr\u003e    if (event.target.type === \"checkbox\") {\u003cbr\u003e      value = event.target.checked;\u003cbr\u003e    }\u003cbr\u003e\u003cbr\u003e    setFormData({\u003cbr\u003e      ...formData,\u003cbr\u003e      [name]: value,\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleSubmit(event) {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    console.log(formData);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        name=\"firstName\"\u003cbr\u003e        onChange={handleChange}\u003cbr\u003e        value={formData.firstName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        name=\"lastName\"\u003cbr\u003e        onChange={handleChange}\u003cbr\u003e        value={formData.lastName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"checkbox\"\u003cbr\u003e        name=\"admin\"\u003cbr\u003e        onChange={handleChange}\u003cbr\u003e        checked={formData.admin}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDepending on what input elements you're working with, you might also have to add some additional logic to handle things like number fields (using \u003ccode\u003eparseInt\u003c/code\u003e or \u003ccode\u003eparseFloat\u003c/code\u003e) and other data types to ensure your form state is always in sync with your components.\u003c/p\u003e  \u003cp\u003eIf you're using a lot of forms in your application, it's worth checking out some nice React libraries like \u003ca href=\"https://react-hook-form.com/\"\u003ereact hook form\u003c/a\u003e to handle some of this abstraction as well as adding custom client-side validation to your forms.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/forms.html\"\u003eReact Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g790bb1bbe5dc0a0458447e0eb9d4bc44","title":"Custom Hooks","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-custom-hooks\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-custom-hooks\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-custom-hooks/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eOne of the most powerful features of React hooks is that they give us the ability to share logic and state between multiple components by writing our own \u003cstrong\u003ecustom hooks\u003c/strong\u003e. You've already encountered some custom hooks: the \u003ccode\u003euseParams\u003c/code\u003e and \u003ccode\u003euseHistory\u003c/code\u003e hooks from React Router are hooks that let us access the \u003ccode\u003eparams\u003c/code\u003e and \u003ccode\u003ehistory\u003c/code\u003e objects from React Router in any component we want. In this lesson, you'll learn how to create your own custom hooks by extracting hooks-related logic out of components and into a reusable hook function.\u003c/p\u003e  \u003ch2\u003eSetup\u003c/h2\u003e  \u003cp\u003eThis lesson has some starter code for a blog site using React Router. The data for the blog is saved in a \u003ccode\u003edb.json\u003c/code\u003e file, which we'll serve up using \u003ccode\u003ejson-server\u003c/code\u003e. To get started, run \u003ccode\u003enpm install\u003c/code\u003e. Then, run \u003ccode\u003enpm run server\u003c/code\u003e to run our \u003ccode\u003ejson-server\u003c/code\u003e backend in one terminal tab. Open another terminal tab and run \u003ccode\u003enpm start\u003c/code\u003e to run our React frontend.\u003c/p\u003e  \u003cp\u003eWe'll be focusing on two components: the \u003ccode\u003eHomePage\u003c/code\u003e and \u003ccode\u003eArticlePage\u003c/code\u003e components. Make sure to run the app and familiarize yourself with the code before moving on.\u003c/p\u003e  \u003ch2\u003eExtracting Custom Hooks\u003c/h2\u003e  \u003cp\u003eIn both the \u003ccode\u003eHomePage\u003c/code\u003e and \u003ccode\u003eArticlePage\u003c/code\u003e components, you'll notice that we are using the \u003ccode\u003euseEffect\u003c/code\u003e hook in order to set the document title. The \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\"\u003edocument title\u003c/a\u003e is an important part of any website, because it:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eis displayed in the browser tab\u003c/li\u003e \u003cli\u003eis also displayed in the browser history\u003c/li\u003e \u003cli\u003ehelps with accessibility and SEO\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eSince we have similar logic for updating the title in both of our components (and we might want this functionality in other components as our app grows), this logic is a good candidate for a custom hook! Let's start by creating a new file for our custom hook: \u003ccode\u003e/src/hooks/useDocumentTitle.js\u003c/code\u003e. Let's take the \u003ccode\u003euseEffect\u003c/code\u003e code from the \u003ccode\u003eHomePage\u003c/code\u003e component and place it in that file, inside a function called \u003ccode\u003euseDocumentTitle\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/hooks/useDocumentTitle.js\u003cbr\u003eimport { useEffect } from \"react\";\u003cbr\u003e\u003cbr\u003efunction useDocumentTitle() {\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    document.title = \"Underreacted | Home\";\u003cbr\u003e  }, []);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default useDocumentTitle; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere are a couple important things going on with this custom hook already, so let's review.\u003c/p\u003e  \u003cp\u003eSo far, any time we've wanted to use a React hook (like \u003ccode\u003euseState\u003c/code\u003e or \u003ccode\u003euseEffect\u003c/code\u003e), we've only been able to do so inside of our React components (not inside of any other JavaScript functions). \u003cstrong\u003eCustom hooks also allow us to call React hooks\u003c/strong\u003e, so long as we call our custom hook from a React component.\u003c/p\u003e  \u003cp\u003eAnother important convention to note here: the name of our custom hook starts with the word \u003ccode\u003euse\u003c/code\u003e. This is a signal to React (and ESLint) that our hook should follow the \u003ca href=\"https://reactjs.org/docs/hooks-rules.html\"\u003eRules of Hooks\u003c/a\u003e, and also a signal to other developers that this code is meant to be used as a React hook.\u003c/p\u003e  \u003ch2\u003eUsing our Custom Hook\u003c/h2\u003e  \u003cp\u003eNow that we've extracted this custom hook to its own file, we can import it and use it in our \u003ccode\u003eHomePage\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useEffect, useState } from \"react\";\u003cbr\u003eimport About from \"./About\";\u003cbr\u003eimport ArticleList from \"./ArticleList\";\u003cbr\u003eimport useDocumentTitle from \"../hooks/useDocumentTitle\";\u003cbr\u003e\u003cbr\u003efunction HomePage() {\u003cbr\u003e  // fetch data for posts\u003cbr\u003e\u003cbr\u003e  // set the document title\u003cbr\u003e  useDocumentTitle();\u003cbr\u003e\u003cbr\u003e  // return ...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default HomePage; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter that update, our component should work the same. But now our \u003ccode\u003eHomePage\u003c/code\u003e component doesn't have to worry about the logic for updating the document title: it just needs to call the \u003ccode\u003euseDocumentTitle\u003c/code\u003e hook, which will handle that work.\u003c/p\u003e  \u003cp\u003eUpdating our \u003ccode\u003eArticlePage\u003c/code\u003e component won't quite work with our new custom hook just yet, since the title is dynamic in this component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/ArticlePage.js\u003cbr\u003efunction ArticlePage() {\u003cbr\u003e  //...\u003cbr\u003e\u003cbr\u003e  const pageTitle = post ? `Underreacted | ${post.title}` : \"Underreacted\";\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    // depends on the page title\u003cbr\u003e    document.title = pageTitle;\u003cbr\u003e  }, [pageTitle]);\u003cbr\u003e\u003cbr\u003e  //...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo solve this, we can update our \u003ccode\u003euseDocumentTitle\u003c/code\u003e hook to accept an argument of the page title:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction useDocumentTitle(pageTitle) {\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    document.title = pageTitle;\u003cbr\u003e  }, [pageTitle]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, both our components can use this custom hook by passing in a page title when calling the hook:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/ArticlePage.js\u003cbr\u003efunction ArticlePage() {\u003cbr\u003e  //...\u003cbr\u003e\u003cbr\u003e  const pageTitle = post ? `Underreacted | ${post.title}` : \"Underreacted\";\u003cbr\u003e  useDocumentTitle(pageTitle);\u003cbr\u003e\u003cbr\u003e  //...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// src/components/HomePage.js\u003cbr\u003efunction HomePage() {\u003cbr\u003e  //...\u003cbr\u003e\u003cbr\u003e  useDocumentTitle(\"Underreacted | Home\");\u003cbr\u003e\u003cbr\u003e  //...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eReturning Data from Custom Hooks\u003c/h2\u003e  \u003cp\u003eOne other common piece of logic that is shared between our components is fetching data from our API. Both the \u003ccode\u003eArticlePage\u003c/code\u003e and \u003ccode\u003eHomePage\u003c/code\u003e share some similarities with regards to data fetching:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThey both have a couple state variables related to data fetching (\u003ccode\u003eisLoaded\u003c/code\u003e, \u003ccode\u003eposts\u003c/code\u003e, \u003ccode\u003eposts\u003c/code\u003e)\u003c/li\u003e \u003cli\u003eThey both use the \u003ccode\u003euseEffect\u003c/code\u003e hook to fetch data as a side effect of rendering the component\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBy noticing these similarities, we can recognize what logic is coupled together and what we'd need to extract in order to build out our custom hook.\u003c/p\u003e  \u003cp\u003eLet's start with the \u003ccode\u003eHomePage\u003c/code\u003e component once again. Here's all of the logic that is related to working with our API:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/HomePage.js\u003cbr\u003efunction HomePage() {\u003cbr\u003e  // fetch data for posts\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e  const [posts, setPosts] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setIsLoaded(false);\u003cbr\u003e    fetch(\"http://localhost:4000/posts\")\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((posts) =\u0026gt; {\u003cbr\u003e        setPosts(posts);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  // return ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo start off with, let's take all this code out from our \u003ccode\u003eHomePage\u003c/code\u003e component and create a new custom hook called \u003ccode\u003euseQuery\u003c/code\u003e, for querying data from our API:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/hooks/useQuery.js\u003cbr\u003eimport { useState, useEffect } from \"react\";\u003cbr\u003e\u003cbr\u003efunction useQuery() {\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e  const [posts, setPosts] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setIsLoaded(false);\u003cbr\u003e    fetch(\"http://localhost:4000/posts\")\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((posts) =\u0026gt; {\u003cbr\u003e        setPosts(posts);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default useQuery; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJust like before, we created a new file for our custom hook, and imported the React hooks that our custom hook will use. We also gave our custom hook a name that starts with \u003ccode\u003euse\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eUnlike our previous custom hook, however, we're going to need to get some data back out of this component. Specifically, when we're using this component, we'll need access to two things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethe data returned by the fetch request (\u003ccode\u003eposts\u003c/code\u003e)\u003c/li\u003e \u003cli\u003ethe \u003ccode\u003eisLoaded\u003c/code\u003e state\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBut how can we get this data \u003cstrong\u003eout\u003c/strong\u003e of the custom hook? Well, since a custom hook is \u003cstrong\u003ejust a function\u003c/strong\u003e, all we need to do is have our hook \u003cstrong\u003ereturn\u003c/strong\u003e whatever data we need!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/hooks/useQuery.js\u003cbr\u003eimport { useState, useEffect } from \"react\";\u003cbr\u003e\u003cbr\u003efunction useQuery() {\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e  const [posts, setPosts] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setIsLoaded(false);\u003cbr\u003e    fetch(\"http://localhost:4000/posts\")\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((posts) =\u0026gt; {\u003cbr\u003e        setPosts(posts);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  // return an *object* with the data and isLoaded state\u003cbr\u003e  return {\u003cbr\u003e    posts: posts,\u003cbr\u003e    isLoaded: isLoaded,\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default useQuery; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, in order to use this custom hook, we can call it from our \u003ccode\u003eHomePage\u003c/code\u003e component, and \u003cstrong\u003edestructure\u003c/strong\u003e the return value to get the \u003ccode\u003eposts\u003c/code\u003e and \u003ccode\u003eisLoaded\u003c/code\u003e state out:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport useQuery from \"../hooks/useQuery\";\u003cbr\u003e\u003cbr\u003efunction HomePage() {\u003cbr\u003e  // fetch data for posts\u003cbr\u003e  const { posts, isLoaded } = useQuery();\u003cbr\u003e\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur \u003ccode\u003eHomePage\u003c/code\u003e component is now significantly cleaner, because it no longer has to worry about all the logic related to handling the fetch request and setting state based on the response — all of that logic is now nicely encapsulated in our \u003ccode\u003euseQuery\u003c/code\u003e hook!\u003c/p\u003e  \u003cp\u003eIn order to get this hook to work with the \u003ccode\u003eArticlePage\u003c/code\u003e component as well, we need to refactor it a bit and abstract away the logic that is specific to the \u003ccode\u003eHomePage\u003c/code\u003e component's needs.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// take in the url\u003cbr\u003efunction useQuery(url) {\u003cbr\u003e  const [isLoaded, setIsLoaded] = useState(false);\u003cbr\u003e  // rename `posts` to a more generic `data`\u003cbr\u003e  const [data, setData] = useState(null);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setIsLoaded(false);\u003cbr\u003e    fetch(url)\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((data) =\u0026gt; {\u003cbr\u003e        setData(data);\u003cbr\u003e        setIsLoaded(true);\u003cbr\u003e      });\u003cbr\u003e  }, [url]);\u003cbr\u003e  // the url is now a dependency\u003cbr\u003e  // we want to use the side effect whenever the url changes\u003cbr\u003e\u003cbr\u003e  // return an *object* with the data and isLoaded state\u003cbr\u003e  return { data, isLoaded };\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, to use our more generic version of this hook in the \u003ccode\u003eHomePage\u003c/code\u003e component, we just need to make a couple small changes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction HomePage() {\u003cbr\u003e  const { data: posts, isLoaded } = useQuery(\"http://localhost:4000/posts\");\u003cbr\u003e\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince \u003ccode\u003euseQuery\u003c/code\u003e now accepts a URL for the fetch request, we must pass that URL in when we call the hook. It now also returns an object with a more generic name (\u003ccode\u003edata\u003c/code\u003e), so we can \u003ca href=\"https://wesbos.com/destructuring-renaming\"\u003ere-name that variable\u003c/a\u003e to \u003ccode\u003eposts\u003c/code\u003e when destructuring.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003euseQuery\u003c/code\u003e hook should now also work with our \u003ccode\u003eArticlePage\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction ArticlePage() {\u003cbr\u003e  const { id } = useParams();\u003cbr\u003e  const { data: post, isLoaded } = useQuery(\u003cbr\u003e    `http://localhost:4000/posts/${id}`\u003cbr\u003e  );\u003cbr\u003e\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith our custom hooks in place, the completed versions of the \u003ccode\u003eHomePage\u003c/code\u003e and \u003ccode\u003eArticlePage\u003c/code\u003e components are now both significantly shorter. Also, adding new components to our application that need access to similar functionality is now significantly easier, since we don't have to rewrite that functionality from scratch in each new component.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: While our \u003ccode\u003euseQuery\u003c/code\u003e hook works nicely in this example, there are some optimizations we could make to improve it, such as:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHandling errors with \u003ccode\u003e.catch\u003c/code\u003e and adding an error state\u003c/li\u003e \u003cli\u003eUsing one state variable instead of \u003ca href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\"\u003emultiple state variables\u003c/a\u003e, so that it doesn't re-render more than necessary\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\"\u003eUsing the useReducer hook instead of useState\u003c/a\u003e to manage state transitions\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://flaviocopes.com/javascript-memoization/\"\u003eCaching our fetched data\u003c/a\u003e to prevent unnecessary network requests\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://davidwalsh.name/cancel-fetch\"\u003eCancel the fetch\u003c/a\u003e if the component un-mounts before the fetch is complete\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou're encouraged to try adding a few of these optimizations to this hook yourself! There's also a version of the \u003ccode\u003euseQuery\u003c/code\u003e hook in the solution branch called \u003ccode\u003euseQueryAdvanced\u003c/code\u003e that handles some of these optimizations. However, there are also more advanced solutions out there, such as \u003ca href=\"https://react-query.tanstack.com/\"\u003eReact Query\u003c/a\u003e, that handles this logic (and more) with a pre-built custom hook.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eCreating custom hooks allows us to share stateful logic across multiple components. The ability to use custom hooks lets us create more concise components that are focused more on the UI logic. The React community has also embraced custom hooks in a big way — major libraries like \u003ca href=\"https://react-redux.js.org/api/hooks\"\u003eReact Redux\u003c/a\u003e and \u003ca href=\"https://reactrouter.com/web/api/Hooks\"\u003eReact Router\u003c/a\u003e use custom hooks to provide a lot of their functionality, and there are lots of \u003ca href=\"https://github.com/rehooks/awesome-react-hooks\"\u003ecommunity generated custom hooks\u003c/a\u003e out there to explore and add to your projects!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge6b6025f3f49a625e59537f079a60db4","title":"Event Handling in React","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-event-handling\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-event-handling\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-event-handling/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll cover the event system in React. We'll learn how to attach event listeners to specific elements,\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eExplain how to use React events in our application\u003c/li\u003e \u003cli\u003eAdd event handlers to an element\u003c/li\u003e \u003cli\u003eExplain how React events differ from browser events\u003c/li\u003e \u003cli\u003eDescribe how React standardizes events for compatibility\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eAdding Event Handlers\u003c/h2\u003e  \u003cp\u003eConsider the following component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Tickler() {\u003cbr\u003e  function tickle() {\u003cbr\u003e    console.log(\"Teehee!\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button\u0026gt;Tickle me!\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have a \u003ccode\u003etickle()\u003c/code\u003e function, but no way to trigger it! This is a perfect time to add an event handler so that we can see the message in our console. We attach event handlers to an element much like how we'd add a prop. The handler name is always comprised of \u003ccode\u003eon\u003c/code\u003e, and the event name itself — for example \u003ccode\u003eclick\u003c/code\u003e. These are joined together and camel-cased, so if we wanted to add a click handler, we'd call the prop \u003ccode\u003eonClick\u003c/code\u003e. This prop takes a function as a value — it can either be a reference to a function (like our \u003ccode\u003etickle()\u003c/code\u003e function), or an inline function. Most of the time, we'll use a function reference. It looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;button onClick={tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can see, we're passing a function \u003cem\u003ereference\u003c/em\u003e, and not executing the \u003ccode\u003etickle\u003c/code\u003e function. Our updated component looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Tickler() {\u003cbr\u003e  function tickle() {\u003cbr\u003e    console.log(\"Teehee!\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button onClick={tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when we click the button, we see a message in our console. Awesome!\u003c/p\u003e  \u003cp\u003eWe can also use arrow functions for event handlers:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Tickler() {\u003cbr\u003e  return \u0026lt;button onClick={() =\u0026gt; console.log(\"Teehee!\")}\u0026gt;Tickle me!\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eArrow functions are a good choice if your event handler doesn't need to handle much logic. If you have more than one line of code to run in your event handler, it's a good idea to create a separate callback function (like in the first example).\u003c/p\u003e  \u003ch2\u003eWhat Can We Listen For Events On?\u003c/h2\u003e  \u003cp\u003eOne more thing to note about event listeners: you can only attach event handlers to DOM elements, \u003cem\u003enot\u003c/em\u003e React components. For example, this will not work:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clickable() {\u003cbr\u003e  return \u0026lt;button\u0026gt;Click Me\u0026lt;/button\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  function handleClick() {\u003cbr\u003e    console.log(\"click\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;Clickable onClick={handleClick} /\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e... but this will:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clickable() {\u003cbr\u003e  function handleClick() {\u003cbr\u003e    console.log(\"click\");\u003cbr\u003e  }\u003cbr\u003e  return \u0026lt;button onClick={handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  return \u0026lt;Clickable /\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we want to make the first example work so that \u003ccode\u003ehandleClick\u003c/code\u003e is called in \u003ccode\u003eApp\u003c/code\u003e, we'd have to pass \u003ccode\u003eonClick\u003c/code\u003e as a \u003cstrong\u003eprop\u003c/strong\u003e on the \u003ccode\u003eClickable\u003c/code\u003e component, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clickable({ onClick }) {\u003cbr\u003e  return \u0026lt;button onClick={onClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  function handleClick() {\u003cbr\u003e    console.log(\"click\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;Clickable onClick={handleClick} /\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this example, we're passing down a reference to the \u003ccode\u003ehandleClick\u003c/code\u003e function as a \u003cstrong\u003eprop\u003c/strong\u003e called \u003ccode\u003eonClick\u003c/code\u003e to the \u003ccode\u003eClickable\u003c/code\u003e component. Then, we're assigning using that prop as the callback function for the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element's \u003ccode\u003eonClick\u003c/code\u003e attribute. That way, when the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element is clicked, the callback function \u003ccode\u003ehandleClick\u003c/code\u003e will be called. Whew! That's a lot to keep track of. We'll cover this concept of passing down callback functions as props in more detail later on.\u003c/p\u003e  \u003cp\u003eLet's explore a few other common event types and their use cases here. There's some starter code provided, so feel free to code along and test things out in the console!\u003c/p\u003e  \u003ch3\u003eonClick\u003c/h3\u003e  \u003cp\u003eAs we saw in the example above, adding a \u003ccode\u003eclick\u003c/code\u003e event is pretty straightforward!\u003c/p\u003e  \u003cp\u003eUsing our \u003ccode\u003eTickler\u003c/code\u003e component as an example, let's see what else we can do with a click event.\u003c/p\u003e  \u003cp\u003eUpdate your component to look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Tickler() {\u003cbr\u003e  function tickle(event) {\u003cbr\u003e    console.log(event);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button onClick={tickle}\u0026gt;Tickle me!\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJust like when we handle events in JavaScript, when we handle events in React, we can provide a \u003ccode\u003eevent\u003c/code\u003e parameter to our event handler callback function. When the button is clicked, we can access all the information about the event (such as the event \u003ccode\u003etarget\u003c/code\u003e, mouse coordinates via \u003ccode\u003eclientX\u003c/code\u003e and \u003ccode\u003eclientY\u003c/code\u003e, etc).\u003c/p\u003e  \u003cp\u003eWhat if we wanted to pass other information to the event handler though? In the \u003ccode\u003eMultiButton\u003c/code\u003e component, we have three buttons that all share the same callback function for their \u003ccode\u003eonClick\u003c/code\u003e event:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction MultiButton() {\u003cbr\u003e  function handleClick(number) {\u003cbr\u003e    console.log(`Button ${number} was clicked`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;Button 1\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;Button 2\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;Button 3\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen one of the buttons is clicked, we want the callback to log out the button's number. If you try clicking one of those buttons now, you'll still see the \u003ccode\u003eevent\u003c/code\u003e object being logged, not the number of the button.\u003c/p\u003e  \u003cp\u003eWe could try this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction MultiButton() {\u003cbr\u003e  function handleClick(number) {\u003cbr\u003e    console.log(`Button x was clicked`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick(1)}\u0026gt;Button 1\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick(2)}\u0026gt;Button 2\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick(3)}\u0026gt;Button 3\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...but now, the console messages will appear as soon as our component is rendered, not when the button is clicked. This is why we always need to provide a \u003cem\u003efunction definition\u003c/em\u003e, not a \u003cem\u003efunction invocation\u003c/em\u003e to our event handlers. Here's the solution:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction MultiButton() {\u003cbr\u003e  function handleClick(number) {\u003cbr\u003e    console.log(`Button x was clicked`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; handleClick(1)}\u0026gt;Button 1\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; handleClick(2)}\u0026gt;Button 2\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; handleClick(3)}\u0026gt;Button 3\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy writing out an arrow function here, we're providing each of our button's \u003ccode\u003eonClick\u003c/code\u003e handlers a \u003cem\u003efunction definition\u003c/em\u003e that will only be \u003cem\u003einvoked\u003c/em\u003e when the button is clicked!\u003c/p\u003e  \u003ch3\u003eonChange\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eonChange\u003c/code\u003e attribute is useful for handling when \u003cem\u003einput values\u003c/em\u003e have changed. This event listener is often used with \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e inputs (basically, anywhere you need to capture a user's input).\u003c/p\u003e  \u003cp\u003eHere are a couple examples of using the \u003ccode\u003eonChange\u003c/code\u003e handler:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction ChangeItUp() {\u003cbr\u003e  function handleChange(event) {\u003cbr\u003e    console.log(`${event.target.name}: ${event.target.value}`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        name=\"search\"\u003cbr\u003e        onChange={handleChange}\u003cbr\u003e        placeholder=\"Enter search term...\"\u003cbr\u003e      /\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;select name=\"filter\" onChange={handleChange}\u0026gt;\u003cbr\u003e        \u0026lt;option value=\"all\"\u0026gt;Select a filter...\u0026lt;/option\u0026gt;\u003cbr\u003e        \u0026lt;option value=\"completed\"\u0026gt;Completed\u0026lt;/option\u0026gt;\u003cbr\u003e        \u0026lt;option value=\"incomplete\"\u0026gt;Incomplete\u0026lt;/option\u0026gt;\u003cbr\u003e      \u0026lt;/select\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eonSubmit\u003c/h3\u003e  \u003cp\u003eWhenever you're working with \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e elements, handling the submit event is a good way to interact with all the data from the form after it's been submitted.\u003c/p\u003e  \u003cp\u003eHere's a quick example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Login() {\u003cbr\u003e  function handleSubmit(event) {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    console.log(\"I submit\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" name=\"username\" placeholder=\"Enter username...\" /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"password\" name=\"password\" placeholder=\"Enter password...\" /\u0026gt;\u003cbr\u003e      \u0026lt;button\u0026gt;Login\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the form is submitted, just like in vanilla JavaScript, you must call \u003ccode\u003eevent.preventDefault()\u003c/code\u003e to prevent the form from making a network request.\u003c/p\u003e  \u003cp\u003eWe'll go into forms in more detail in a later lesson, and show the preferred way for collecting data from \u003cem\u003eall\u003c/em\u003e the form input fields. For now, just remember - use the \u003ccode\u003eonSubmit\u003c/code\u003e event handler, and always call \u003ccode\u003epreventDefault()\u003c/code\u003e!\u003c/p\u003e  \u003ch2\u003eHow Does React Handle Events?\u003c/h2\u003e  \u003cp\u003eYou may have noticed when inspecting the \u003ccode\u003eevent\u003c/code\u003e object that it's a bit different than the standard browser event. React's \u003ccode\u003eevent\u003c/code\u003e object is a special object called: \u003ccode\u003eSyntheticBaseEvent\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eReact has its own event system with special event handlers called \u003ccode\u003eSyntheticEvent\u003c/code\u003e. The reason for having a specific event system instead of using native events is cross-browser compatibility. Some browsers treat events differently, and by wrapping these events into a consistent API, React makes our lives a lot easier. It's important to keep in mind that they are the \u003cem\u003eexact same events\u003c/em\u003e, just implemented in a consistent way! That means these events also have methods that you can call like \u003ccode\u003epreventDefault()\u003c/code\u003e, \u003ccode\u003estopPropagation()\u003c/code\u003e, and so on.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eIn React, you can add event listeners to elements in JSX by providing a \u003ccode\u003eonEvent\u003c/code\u003e attribute and passing a \u003cem\u003ecallback function\u003c/em\u003e. Some commonly used event listeners include \u003ccode\u003eonClick\u003c/code\u003e, \u003ccode\u003eonChange\u003c/code\u003e, and \u003ccode\u003eonSubmit\u003c/code\u003e. You can find a full list of supported events \u003ca href=\"https://reactjs.org/docs/events.html#supported-events\"\u003ehere\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eReact has its own internal events system that makes events behave consistently across various browsers.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html\"\u003eReact Synthetic Events\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/handling-events.html\"\u003eHandling Events\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html#supported-events\"\u003eSupported Events\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g28ebf492afdb0a07d2410e94516f988e","title":"Event Handling in React Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-event-handling-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-event-handling-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-event-handling-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this lab you'll respond to events in React and write event handlers.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The components are not defined yet, but the files are present. Before the tests will run, you must export components from \u003ccode\u003eEyesOnMe.js\u003c/code\u003e and \u003ccode\u003eKeypad.js\u003c/code\u003e. To get started, write very basic components that you \u003cem\u003eknow\u003c/em\u003e will not pass all the tests, but at least be valid React.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eKeypad\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/3o6MbdTboTFWOUsLkc/giphy.gif\" alt=\"Keypad\"\u003e\u003c/p\u003e\n\u003cp\u003eMr. Burns has requested us to build a new keypad component for the nuclear plant, since the last one was way too complicated for his employees to use. We'll keep things super simple instead, and use an \u003ccode\u003e\u0026lt;input type=\"password\" /\u0026gt;\u003c/code\u003e field to capture input. Here's how to complete the exercise:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIn the \u003ccode\u003ecomponents/Keypad.js\u003c/code\u003e file, create a \u003ccode\u003eKeypad\u003c/code\u003e React component.\u003c/li\u003e\n\u003cli\u003eIn that component, render an \u003ccode\u003einput\u003c/code\u003e with the right type.\u003c/li\u003e\n\u003cli\u003eOn that \u003ccode\u003einput\u003c/code\u003e, add an event handler that listens for the \u003ccode\u003echange\u003c/code\u003e event.\u003c/li\u003e\n\u003cli\u003eWhen that event fires, use \u003ccode\u003econsole.log\u003c/code\u003e to print out the text \u003ccode\u003e'Entering password...'\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eEyes on the ball\u003c/h2\u003e\n\u003cp\u003eLet's say you're in the club with your buddy. The music's blaring, lights are flashing... It's so hard to get his attention! Your job is to create a component that registers whenever he focuses on you, \u003cem\u003eand\u003c/em\u003e when his eyes are drifting off.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIn the \u003ccode\u003ecomponents/EyesOnMe.js\u003c/code\u003e file, create a \u003ccode\u003eEyesOnMe\u003c/code\u003e React component.\u003c/li\u003e\n\u003cli\u003eIn that component, render a \u003ccode\u003ebutton\u003c/code\u003e with the text \u003ccode\u003e'Eyes on me'\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eOn that \u003ccode\u003ebutton\u003c/code\u003e, add event handlers that listens for the \u003ccode\u003efocus\u003c/code\u003e and \u003ccode\u003eblur\u003c/code\u003e events.\u003c/li\u003e\n\u003cli\u003eWhen the \u003ccode\u003efocus\u003c/code\u003e event fires, use \u003ccode\u003econsole.log\u003c/code\u003e to print out the text \u003ccode\u003e'Good!'\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWhen the \u003ccode\u003eblur\u003c/code\u003e event fires, use \u003ccode\u003econsole.log\u003c/code\u003e to print out the text \u003ccode\u003e'Hey! Eyes on me!'\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/events.html\"\u003eReact Events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g12f597ba903c3f30c37833e308717314","title":"Phase 2 Code Challenge: Bot Battlr","type":"Assignment","content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"phase-4-bot-battler-20200928.zip\" href=\"viewer/files/Uploaded%20Media/phase-4-bot-battler-20200928.zip?canvas_download=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\"\u003ephase-4-bot-battler-20200928.zip\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a file upload","graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga9664e05d8af9ac3205483b91dae070e","title":"Phase 2 Project: Building a Client-Side Application with React","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-2-react-assessment\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-2-react-assessment\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-2-react-assessment/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eBuild a React single page application from scratch\u003c/li\u003e\n\u003cli\u003eApply your knowledge of components, props and state management\u003c/li\u003e\n\u003cli\u003eIncorporate client-side routing\u003c/li\u003e\n\u003cli\u003eUse data from external APIs\u003c/li\u003e\n\u003cli\u003ePersist data in a mock up backend\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eReact Project Overview\u003c/h2\u003e\n\u003cp\u003eThis assignment is open-ended when it comes to the actual content. You are free to create whatever you'd like, as long as it incorporates the requirements listed in these instructions.\u003c/p\u003e\n\u003cp\u003eIf you don't have any inspiration at the moment, here are a couple of ideas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInstagram, but only for dog and cat pictures\u003c/li\u003e\n\u003cli\u003eA weather app that changes style based on the weather\u003c/li\u003e\n\u003cli\u003eA reddit feed for researching stocks\u003c/li\u003e\n\u003cli\u003eDuolingo for being a better neighbor\u003c/li\u003e\n\u003cli\u003eA turn-based boardgame\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUse the \u003ccode\u003ecreate-react-app\u003c/code\u003e generator to start your project.\n\u003cul\u003e\n\u003cli\u003eFollow the instructions on this repo to setup the generator: \u003ca href=\"https://github.com/facebookincubator/create-react-app\"\u003ecreate-react-app\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eYour app should have one HTML page to render your react application\u003c/li\u003e\n\u003cli\u003eYour app should use multiple components in a way that keeps your code well organized.\u003c/li\u003e\n\u003cli\u003eThere should be 3 routes\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe Application must make use of \u003ccode\u003ereact-router\u003c/code\u003e and proper RESTful routing (should you choose to use react-router v3 please refer to the appropriate \u003ca href=\"https://github.com/ReactTraining/react-router/tree/v3/docs\"\u003edocs\u003c/a\u003e; docs for v4 can be found \u003ca href=\"https://reacttraining.com/react-router/web/guides/quick-start\"\u003ehere\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYour app must incorporate API data. This data can be from a public API or from a GitHub JSON file you create\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYour app must persist some data using a JSON server as a mock up backend\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYour application should have some minimal styling: feel free to incorporate a UI framework (like \u003ca href=\"https://react-bootstrap.github.io/\"\u003ereact-bootstrap\u003c/a\u003e or \u003ca href=\"https://material-ui.com/\"\u003ematerial-ui\u003c/a\u003e), but if you want to write CSS yourself, go for it!\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGo wild! These are only the basic requirements — you're free to add on as much stuff as you'd like.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6d098ed501fa13f9a2ea51eecb043ea6","title":"Phase 2 Rubric","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eRead the rubric attached below.\u003c/span\u003e\u003c/p\u003e","submissionTypes":null,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9b33625d0e5d25a3942fa35e01188a04","title":"React Context","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-context\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-context\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-context/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eSo far, we've learned that there is only one way to share data across multiple components: some parent component is responsible for passing down that data to any child components that need it via \u003cstrong\u003eprops\u003c/strong\u003e. However, for large applications where many components need access to the same data, this approach can be a burden.\u003c/p\u003e  \u003cp\u003eThe React Context API, and the \u003ccode\u003euseContext\u003c/code\u003e hook, allows us to share \"global\" data between components without passing that data via props. Libraries like React Router and React Redux take advantage of Context under the hood, so let's see how we can use it in our applications as well!\u003c/p\u003e  \u003ch2\u003eThe Prop Sharing Problem\u003c/h2\u003e  \u003cp\u003eIn this lesson, we have the following components:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp\u003cbr\u003e├── Header\u003cbr\u003e│   ├── ThemeButton\u003cbr\u003e│   └── DarkModeToggle\u003cbr\u003e└── Profile\u003cbr\u003e    └── Interests \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThese components all need access to some shared state, which is currently kept in the App component. Here's a diagram of the state the components share:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp [theme]\u003cbr\u003e├── Header [theme, user]\u003cbr\u003e│   ├── ThemeButton [theme]\u003cbr\u003e│   └── DarkModeToggle [theme]\u003cbr\u003e└── Profile [user]\u003cbr\u003e    └── Interests [theme] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can see, even in this small example, we have several components that need access to the same data.\u003c/p\u003e  \u003cp\u003eIn addition, because of the requirement that we must pass down data from parent to child components, we have a couple of components that take in some data via props, only to pass it along to a child component. For example, looking at the \u003ccode\u003eProfile\u003c/code\u003e component, we can see that it takes in a \u003ccode\u003etheme\u003c/code\u003e prop, even though it doesn't use it directly -- it only needs to take this prop in so that it can pass it down to the \u003ccode\u003eInterests\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// takes theme as a prop\u003cbr\u003efunction Profile({ user, theme }) {\u003cbr\u003e  if (!user) return \u0026lt;h2\u0026gt;Please Login To View Profile\u0026lt;/h2\u0026gt;;\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h2\u0026gt;{user.name}'s Profile\u0026lt;/h2\u0026gt;\u003cbr\u003e      {/* passes theme down to Interests */}\u003cbr\u003e      \u0026lt;Interests interests={user.interests} theme={theme} /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's see how to use React Context to solve this problem.\u003c/p\u003e  \u003ch2\u003eCreating Context\u003c/h2\u003e  \u003cp\u003eIn order to create our context data, we need to create two things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe actual context object\u003c/li\u003e \u003cli\u003eA context provider component\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eLet's start by creating the context for our \u003ccode\u003euser\u003c/code\u003e data. To organize our context code, make a new file called \u003ccode\u003e/src/context/user.js\u003c/code\u003e. Then, create our context:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/context/user.js\u003cbr\u003eimport React from \"react\";\u003cbr\u003e\u003cbr\u003econst UserContext = React.createContext(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter creating the context object, we need a special \"provider\" component that will give access to the context data to its child components. Here's how we can set up the context provider:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/context/user.js\u003cbr\u003eimport React from \"react\";\u003cbr\u003e\u003cbr\u003e// create the context\u003cbr\u003econst UserContext = React.createContext();\u003cbr\u003e\u003cbr\u003e// create a provider component\u003cbr\u003efunction UserProvider({ children }) {\u003cbr\u003e  // the value prop of the provider will be our context data\u003cbr\u003e  // this value will be available to child components of this provider\u003cbr\u003e  return \u0026lt;UserContext.Provider value={null}\u0026gt;{children}\u0026lt;/UserContext.Provider\u0026gt;;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport { UserContext, UserProvider }; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith our context created, and our provider component all set up, let's see how we can use this context data from other components.\u003c/p\u003e  \u003ch2\u003eUsing Context\u003c/h2\u003e  \u003cp\u003eIn order to give our components access to the context data, we must first use the provider component to wrap around any component that need access to the context. Based on our component hierarchy, the \u003ccode\u003eHeader\u003c/code\u003e and \u003ccode\u003eProfile\u003c/code\u003e components both need access to the \u003ccode\u003euser\u003c/code\u003e data in our context:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp [theme]\u003cbr\u003e├── Header [theme, user]\u003cbr\u003e│   ├── ThemeButton [theme]\u003cbr\u003e│   └── DarkModeToggle [theme]\u003cbr\u003e└── Profile [user]\u003cbr\u003e    └── Interests [theme] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo let's update the \u003ccode\u003eApp\u003c/code\u003e component with the \u003ccode\u003eUserProvider\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003eimport Header from \"./Header\";\u003cbr\u003eimport Profile from \"./Profile\";\u003cbr\u003e// import the provider\u003cbr\u003eimport { UserProvider } from \"../context/user\";\u003cbr\u003e\u003cbr\u003efunction App() {\u003cbr\u003e  const [theme, setTheme] = useState(\"dark\");\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;main className={theme}\u0026gt;\u003cbr\u003e      {/* wrap components that need access to context data in the provider*/}\u003cbr\u003e      \u0026lt;UserProvider\u0026gt;\u003cbr\u003e        \u0026lt;Header theme={theme} setTheme={setTheme} /\u0026gt;\u003cbr\u003e        \u0026lt;Profile theme={theme} /\u0026gt;\u003cbr\u003e      \u0026lt;/UserProvider\u0026gt;\u003cbr\u003e    \u0026lt;/main\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default App; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou'll notice we also removed the \u003ccode\u003euser\u003c/code\u003e prop from these components, since we'll be accessing that data via context instead.\u003c/p\u003e  \u003cp\u003eNext, in order to access the context data from our components, we can use the \u003ccode\u003euseContext\u003c/code\u003e hook. This is another hook that's built into React, and it lets us access the \u003ccode\u003evalue\u003c/code\u003e of our context provider in any child component. Here's how it looks:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// import the useContext hook\u003cbr\u003eimport React, { useContext } from \"react\";\u003cbr\u003e// import the UserContext we created\u003cbr\u003eimport { UserContext } from \"../context/user\";\u003cbr\u003eimport Interests from \"./Interests\";\u003cbr\u003e\u003cbr\u003efunction Profile({ theme }) {\u003cbr\u003e  // call useContext with our UserContext\u003cbr\u003e  const user = useContext(UserContext);\u003cbr\u003e\u003cbr\u003e  // now, we can use the user object just like we would if it was passed as a prop!\u003cbr\u003e  console.log(user);\u003cbr\u003e  if (!user) return \u0026lt;h2\u0026gt;Please Login To View Profile\u0026lt;/h2\u0026gt;;\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h2\u0026gt;{user.name}'s Profile\u0026lt;/h2\u0026gt;\u003cbr\u003e      \u0026lt;Interests interests={user.interests} theme={theme} /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can test this out by updating the \u003ccode\u003evalue\u003c/code\u003e prop in our \u003ccode\u003eUserProvider\u003c/code\u003e to something different, and see that the \u003ccode\u003eProfile\u003c/code\u003e component has access to the updated data:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction UserProvider({ children }) {\u003cbr\u003e  const currentUser = {\u003cbr\u003e    name: \"Duane\",\u003cbr\u003e    interests: [\"Coding\", \"Biking\", \"Words ending in 'ing'\"],\u003cbr\u003e  };\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;UserContext.Provider value={currentUser}\u0026gt;{children}\u0026lt;/UserContext.Provider\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's hook up the \u003ccode\u003eHeader\u003c/code\u003e component to our context as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useContext } from \"react\";\u003cbr\u003eimport ThemedButton from \"./ThemedButton\";\u003cbr\u003eimport DarkModeToggle from \"./DarkModeToggle\";\u003cbr\u003eimport defaultUser from \"../data\";\u003cbr\u003eimport { UserContext } from \"../context/user\";\u003cbr\u003e\u003cbr\u003efunction Header({ theme, setTheme }) {\u003cbr\u003e  const user = useContext(UserContext);\u003cbr\u003e\u003cbr\u003e  function handleLogin() {\u003cbr\u003e    if (user) {\u003cbr\u003e      // setUser(null);\u003cbr\u003e    } else {\u003cbr\u003e      // setUser(defaultUser);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;header\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;React Context\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;nav\u0026gt;\u003cbr\u003e        \u0026lt;ThemedButton onClick={handleLogin} theme={theme}\u0026gt;\u003cbr\u003e          {user ? \"Logout\" : \"Login\"}\u003cbr\u003e        \u0026lt;/ThemedButton\u0026gt;\u003cbr\u003e        \u0026lt;DarkModeToggle theme={theme} setTheme={setTheme} /\u0026gt;\u003cbr\u003e      \u0026lt;/nav\u0026gt;\u003cbr\u003e    \u0026lt;/header\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOne thing you'll notice is that our \u003ccode\u003eHeader\u003c/code\u003e component also is meant to handle logging in/logging out a user. In the first version of our app, that functionality was available to use in the \u003ccode\u003eApp\u003c/code\u003e component since we had a \u003ccode\u003euser\u003c/code\u003e variable as \u003cstrong\u003estate\u003c/strong\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [theme, setTheme] = useState(\"dark\");\u003cbr\u003e  const [user, setUser] = useState(null);\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;main className={theme}\u0026gt;\u003cbr\u003e      \u0026lt;Header theme={theme} setTheme={setTheme} user={user} setUser={setUser} /\u0026gt;\u003cbr\u003e      \u0026lt;Profile theme={theme} user={user} /\u0026gt;\u003cbr\u003e    \u0026lt;/main\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can re-gain this functionality by setting up the \u003cstrong\u003econtext\u003c/strong\u003e value to be stateful instead!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction UserProvider({ children }) {\u003cbr\u003e  const [user, setUser] = useState(null);\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;UserContext.Provider value={{ user, setUser }}\u0026gt;\u003cbr\u003e      {children}\u003cbr\u003e    \u0026lt;/UserContext.Provider\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince the \u003ccode\u003eUserProvider\u003c/code\u003e component is still just a React component, we can use any hooks we'd like within this component. You could also use the \u003ccode\u003euseEffect\u003c/code\u003e hook in the provider, if you'd like: for example, to have your provider component fetch some data from an API when it loads; or to read some saved data from \u003ccode\u003elocalStorage\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIn the code above, we're using \u003ccode\u003euseState\u003c/code\u003e to create a \u003ccode\u003euser\u003c/code\u003e state variable as well as a setter function. In the \u003ccode\u003eProvider\u003c/code\u003e, we're now using an \u003cstrong\u003eobject\u003c/strong\u003e with \u003ccode\u003euser\u003c/code\u003e and \u003ccode\u003esetUser\u003c/code\u003e as the \u003cstrong\u003evalue\u003c/strong\u003e for our context.\u003c/p\u003e  \u003cp\u003eAfter this update, we can now use the \u003ccode\u003esetUser\u003c/code\u003e function in our \u003ccode\u003eHeader\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Header({ theme, setTheme }) {\u003cbr\u003e  const { user, setUser } = useContext(UserContext);\u003cbr\u003e  function handleLogin() {\u003cbr\u003e    if (user) {\u003cbr\u003e      setUser(null);\u003cbr\u003e    } else {\u003cbr\u003e      setUser(defaultUser);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe'll also need to update the \u003ccode\u003eProfile\u003c/code\u003e component since our context value has changed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Profile({ theme }) {\u003cbr\u003e  const { user } = useContext(UserContext);\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eExercise\u003c/h2\u003e  \u003cp\u003eNow that you've seen one approach to using React Context for our user data, try to implement React Context to handle the \u003ccode\u003etheme\u003c/code\u003e data for the app as well!\u003c/p\u003e  \u003cp\u003eCompleted code for this exercise is in the \u003ccode\u003esolution\u003c/code\u003e branch.\u003c/p\u003e  \u003ch2\u003eA Word of Caution\u003c/h2\u003e  \u003cp\u003eOnce new developers encounter context, it's often tempting to reach for it as a solution to all your React state needs, since it helps save the pain of \"prop drilling\". However, React recommends using context sparingly:\u003c/p\u003e  \u003cp\u003e\u0026gt; Context is primarily used when some data needs to be accessible by many \u0026gt; components at different nesting levels. Apply it sparingly because it makes \u0026gt; component reuse more difficult. \u0026gt; \u0026gt; If you only want to avoid passing some props through many levels, component composition is often a simpler solution than context. \u0026gt; — \u003ca href=\"https://reactjs.org/docs/context.html#before-you-use-context\"\u003eBefore You Use Context\u003c/a\u003e\u003c/p\u003e  \u003cp\u003eKeep this in mind when you're considering adding context to your application. Think about whether or not the data that's being held in context is truly \u003cem\u003eglobal\u003c/em\u003e, and shared by many components.\u003c/p\u003e  \u003cp\u003eThis \u003ca href=\"https://youtu.be/3XaXKiXtNjw\"\u003evideo\u003c/a\u003e by React Router creator Michael Jackson shows an alternative to using context for the sake of saving from props drilling, and demonstrates how to use \u003cem\u003ecomposition\u003c/em\u003e instead.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eReact's Context system gives us a way to share global data across multiple components without needing to pass that data via props. Context should be used sparingly, but it is a helpful tool for simplifying our components and minimizing the need for prop drilling.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/context.html\"\u003eReact Context\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\"\u003euseContext\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://youtu.be/3XaXKiXtNjw\"\u003eUsing Composition Instead of Context\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://kentcdodds.com/blog/application-state-management-with-react\"\u003eApplication State Management with React\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc37e1c8e26eebb959cb7d861177070b5","title":"React Controlled Components Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-forms-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lab, you'll write and use controlled components, and write validation for form components.\u003c/p\u003e  \u003ch2\u003eControlled Components\u003c/h2\u003e  \u003cp\u003eNow that we know how to handle form elements in React and how to set up controlled components, it's time to put that knowledge to the test. This lab is fairly extensive, but you'll use many core React concepts here that will surface again and again. Time to get some practice in!\u003c/p\u003e  \u003cp\u003eWe'll continue adding new features to the Shopping List app using controlled components. Make sure to familiarize yourself with the code before diving into the deliverables! Completing these deliverables will also require understanding of all the previous topics from this section, including initializing state, passing data and callback functions as props, and working with events.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003ch3\u003eFilter\u003c/h3\u003e  \u003cp\u003eIn the filter component, there is a new input field for searching our list. \u003cem\u003eWhen the user types in this field\u003c/em\u003e, the list of items should be filtered so that only items whose name matches the text are included.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eDetermine where you need to add state for this feature. What components need to know about the search text?\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eOnce you've determined which component should hold the state for this feature, set up your initial state, and connect that state to the input field. Remember, we're trying to make this input a \u003cem\u003econtrolled\u003c/em\u003e input -- so the input's value should always be in sync with state.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eAfter you've connected the input to state, you'll also need to find a way to \u003cem\u003eset\u003c/em\u003e state when the input \u003cem\u003echanges\u003c/em\u003e. To get the test passing, you'll need to use a prop called \u003ccode\u003eonSearchChange\u003c/code\u003e as a callback.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eFinally, after making those changes, you'll need to use that state value to determine which items are being displayed on the page, similar to how the category dropdown works.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: you may be asking yourself, why are we making this input controlled when the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element is not a controlled input? Well, the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e input should probably be controlled as well! The tests don't require it, but feel free to update the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element to be a controlled.\u003c/p\u003e  \u003ch3\u003eItemForm\u003c/h3\u003e  \u003cp\u003eThere is a new component called \u003ccode\u003eItemForm\u003c/code\u003e that will allow us to add new items to our shopping list. \u003cem\u003eWhen the form is submitted\u003c/em\u003e, a new item should be created and added to our list of items.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eMake all the input fields for this form controlled inputs, so that you can access all the form data via state. When setting the initial state for the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e tag, use an initial value of \"Produce\" (since that's the first option in the list).\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eHandle the form's \u003cem\u003esubmit\u003c/em\u003e event, and use the data that you have saved in state to create a new item object with the following properties:\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003e   const newItem = {\u003cbr\u003e     id: uuid(), // the `uuid` library can be used to generate a unique id\u003cbr\u003e     name: itemName,\u003cbr\u003e     category: itemCategory,\u003cbr\u003e   }; \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003eAdd the new item to the list by updating state. To get the test passing, you'll need to use a prop called \u003ccode\u003eonItemFormSubmit\u003c/code\u003e as a callback.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: to add a new element to an array in state, it's a good idea to use    the spread operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e   function addElement(element) {\u003cbr\u003e     setArray([...array, element]);\u003cbr\u003e   } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe spread operator allows us to copy all the old values of an array into a    new array, and then add new elements as well. When you're working with state    you never want to \u003cem\u003emutate\u003c/em\u003e state by using methods like \u003ccode\u003e.push\u003c/code\u003e -- always    use \u003cem\u003enon-destructive\u003c/em\u003e array methods when working with state!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/forms.html\"\u003eReact Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g71e8f6e14b80e1447eb1dab4743c4d08","title":"React Controlled Inputs","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll discuss how to set up controlled inputs in React.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eExplain how React uses \u003ccode\u003evalue\u003c/code\u003e on, e.g., \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDescribe strategies for using controlled components\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCode Along\u003c/h2\u003e  \u003cp\u003eIf you want to code along there is starter code in the \u003ccode\u003esrc\u003c/code\u003e folder. Make sure to run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to see the code in the browser.\u003c/p\u003e  \u003ch2\u003eControlling Form Values From State\u003c/h2\u003e  \u003cp\u003eForms in React are similar to their regular HTML counterparts. The JSX we write is almost identical. The way we store and handle form data, however, is entirely new. In React, it is often a good idea to set up \u003cem\u003econtrolled\u003c/em\u003e forms. A controlled form is \u003cstrong\u003ea form that derives its input values from state\u003c/strong\u003e. Consider the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" value={firstName} /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" value={lastName} /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith the setup above, the two text \u003ccode\u003einput\u003c/code\u003e elements will display the corresponding state values.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/react-forms/Image_20_Flowchart.png\" alt=\"Diagram of the form component's state populating a form\"\u003e\u003c/p\u003e  \u003cp\u003eThis code is not quite complete though — as it is now, there is no way to \u003cem\u003echange\u003c/em\u003e the state. The inputs in the form above will be stuck displaying whatever state is set to.\u003c/p\u003e  \u003cp\u003eTo completely control a form, we also need our form to \u003cem\u003eupdate\u003c/em\u003e state.\u003c/p\u003e  \u003ch2\u003eUpdating State via Forms\u003c/h2\u003e  \u003cp\u003eIf we can change state values, React will re-render and our \u003ccode\u003einput\u003c/code\u003es will display the new state. We know that \u003ccode\u003esetFirstName\u003c/code\u003e and \u003ccode\u003esetLastName\u003c/code\u003e are what we'll need to initiate a state change, but when would we use them?\u003c/p\u003e  \u003cp\u003eWe want to fire it \u003cstrong\u003eevery time the form changes\u003c/strong\u003e. Forms should display whatever changes a user makes, even if it is adding a single letter in an input. For this, we use an event listener, \u003ccode\u003eonChange\u003c/code\u003e, that React has set up for us:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e\u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eForm inputs in React can handle with specific events. \u003ccode\u003eonChange\u003c/code\u003e will fire every time the value of an input changes. In our example, we're passing a callback function function that accepts \u003ccode\u003eevent\u003c/code\u003e as its argument. The \u003ccode\u003eevent\u003c/code\u003e data being passed in is automatically provided by the \u003ccode\u003eonChange\u003c/code\u003e event listener. Let's write out what these functions look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleFirstNameChange(event) {\u003cbr\u003e  setFirstName(event.target.value);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction handleLastNameChange(event) {\u003cbr\u003e  setLastName(event.target.value);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eevent\u003c/code\u003e contains data about the \u003ccode\u003etarget\u003c/code\u003e, which is whatever DOM element the \u003ccode\u003eevent\u003c/code\u003e was triggered on. That \u003ccode\u003etarget\u003c/code\u003e, being an \u003ccode\u003einput\u003c/code\u003e element, has a \u003ccode\u003evalue\u003c/code\u003e attribute. This attribute is equal to whatever is currently entered into that particular \u003ccode\u003einput\u003c/code\u003e!\u003c/p\u003e  \u003cp\u003eKeep in mind, \u003cstrong\u003ethis is not the value we provided from state\u003c/strong\u003e. When we read \u003ccode\u003eevent.target.value\u003c/code\u003e, we get whatever content is present when the event fired. In the case of our first input, that would be a combination of whatever \u003ccode\u003efirstName\u003c/code\u003e is equal to \u003cem\u003eplus\u003c/em\u003e \u003cstrong\u003ethe last key stroke\u003c/strong\u003e. If you pressed 's', \u003ccode\u003eevent.target.value\u003c/code\u003e would equal \"Johns\".\u003c/p\u003e  \u003cp\u003eInside both functions is a \u003ccode\u003esetState()\u003c/code\u003e. Again, both functions are nearly identical, with one difference — \u003ccode\u003esetFirstName()\u003c/code\u003e changes the \u003ccode\u003efirstName\u003c/code\u003e, and \u003ccode\u003esetLastName()\u003c/code\u003e changes the \u003ccode\u003elastName\u003c/code\u003e. The full component would look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFirstName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setLastName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the \u003ccode\u003ehandleFirstNameChange()\u003c/code\u003e and \u003ccode\u003ehandleLastNameChange()\u003c/code\u003e functions, we're updating state based on \u003ccode\u003eevent.target.value\u003c/code\u003e. This, in turn, causes a re-render... and the cycle completes. The \u003cem\u003enew\u003c/em\u003e state values we just set are used to set the \u003ccode\u003evalue\u003c/code\u003e attributes of our two \u003ccode\u003einput\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eFrom a \u003cstrong\u003euser\u003c/strong\u003e's perspective, the form behaves exactly how we'd expect, displaying the text that is typed. From \u003cstrong\u003eReact\u003c/strong\u003e's perspective, we gain control over form values, giving us the ability to more easily manipulate (or restrict) what our \u003ccode\u003einputs\u003c/code\u003es display, and send form data to other parts of the app or out onto the internet...\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/react-forms/Image_21_FlowchartUpdate.png\" alt=\"Diagram of onChange events\"\u003e\u003c/p\u003e  \u003cp\u003eControlling forms makes it more convenient to share form values between components. Since the form values are stored in state, they are easily passed down as props or sent upward via a function supplied in props.\u003c/p\u003e  \u003ch2\u003eForm Element Types\u003c/h2\u003e  \u003cp\u003eForm elements include \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e itself. When we talk about inputs in this lesson, we broadly mean the form elements (\u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e) and not always specifically just \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo control the value of these inputs, we use a prop specific to that type of input:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eFor \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;option\u0026gt;\u003c/code\u003e, we use \u003ccode\u003evalue\u003c/code\u003e, as we have seen.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eFor a checkbox (\u003ccode\u003e\u0026lt;input type=\"checkbox\"\u0026gt;\u003c/code\u003e), we use \u003ccode\u003echecked\u003c/code\u003e:\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [newsetter, setNewsetter] = useState(false);\u003cbr\u003e\u003cbr\u003e  function handleNewsletterChange(event) {\u003cbr\u003e    // .checked, not .value!\u003cbr\u003e    setNewsetter(event.target.checked);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;label htmlFor=\"newsletter\"\u0026gt;Subscribe to our Newsletter?\u0026lt;/label\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"checkbox\"\u003cbr\u003e        id=\"newsletter\"\u003cbr\u003e        onChange={handleNewsletterChange}\u003cbr\u003e        {/* checked instead of value */}\u003cbr\u003e        checked={newsetter}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEach of these attributes can be set based on a state value. Each also has an \u003ccode\u003eonChange\u003c/code\u003e event listener, allowing us to update state when a user interacts with a form.\u003c/p\u003e  \u003ch2\u003eWhy Use Controlled Forms When We Do Not Have To\u003c/h2\u003e  \u003cp\u003eControlled forms can very useful for specific purposes — since we can set our state \u003cem\u003eelsewhere\u003c/em\u003e using this setup, its easy to populate forms from existing available data.\u003c/p\u003e  \u003cp\u003eWhen we have a controlled form, the state does not need to be stored in the same component. We could store state in a parent component, instead. To demonstrate this, we'll need to create a new component. To keep it simple, we'll call this \u003ccode\u003eParentComponent\u003c/code\u003e. \u003ccode\u003eParentComponent\u003c/code\u003e can maintain all the functions while \u003ccode\u003eForm\u003c/code\u003e just handles the display of JSX:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/ParentComponent\u003cbr\u003eimport React, { useState } from \"react\";\u003cbr\u003eimport Form from \"./Form\";\u003cbr\u003e\u003cbr\u003efunction ParentComponent() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFirstName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setLastName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;Form\u003cbr\u003e      firstName={firstName}\u003cbr\u003e      lastName={lastName}\u003cbr\u003e      handleFirstNameChange={handleFirstNameChange}\u003cbr\u003e      handleLastNameChange={handleLastNameChange}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default ParentComponent; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen \u003ccode\u003eForm\u003c/code\u003e can become:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/Form\u003cbr\u003eimport React from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form(props) {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        onChange={props.handleFirstNameChange}\u003cbr\u003e        value={props.firstName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        onChange={props.handleLastNameChange}\u003cbr\u003e        value={props.lastName}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePreviously, our application was rendering \u003ccode\u003eForm\u003c/code\u003e directly inside \u003ccode\u003esrc/index.js\u003c/code\u003e. Now, however, we've added a component that \u003cem\u003erenders\u003c/em\u003e \u003ccode\u003eForm\u003c/code\u003e as a child. Because of this change, you'll need to update \u003ccode\u003esrc/index.js\u003c/code\u003e so that it renders \u003ccode\u003eParentComponent\u003c/code\u003e instead of \u003ccode\u003eForm\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: Submission functionality is omitted here for simplicity. Also, If you're following along in the example files, don't forget to update \u003ccode\u003eindex.js\u003c/code\u003e to point to \u003ccode\u003eParentComponent\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWith \u003ccode\u003eParentComponent\u003c/code\u003e, we've moved all the form logic up one level.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/react-forms/Image_22_FlowchartReactProps.png\" alt=\"Diagram of a controlled component using props\"\u003e\u003c/p\u003e  \u003cp\u003eBeing able to store controlled form data in other components opens some interesting doors for us. We could, for instance, create another component, a sibling of \u003ccode\u003eForm\u003c/code\u003e, that live displays our form data:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/DisplayData\u003cbr\u003eimport React from \"react\";\u003cbr\u003e\u003cbr\u003efunction DisplayData(props) {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;{props.firstName}\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;{props.lastName}\u0026lt;/h1\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default DisplayData; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...and adding it alongside \u003ccode\u003eForm\u003c/code\u003e (also wrapping both in a \u003ccode\u003ediv\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/components/ParentComponent\u003cbr\u003eimport React, { useState } from 'react';\u003cbr\u003eimport Form from './Form'\u003cbr\u003eimport DisplayData from './DisplayData'\u003cbr\u003e\u003cbr\u003efunction ParentComponent() {\u003cbr\u003e  // ...\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;Form\u003cbr\u003e        firstName={firstName}\u003cbr\u003e        lastName={lastName}\u003cbr\u003e        handleFirstNameChange={handleFirstNameChange}\u003cbr\u003e        handleLastNameChange={handleLastNameChange}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e      \u0026lt;DisplayData firstName={firstName} lastName={lastName} /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  )\u003cbr\u003e} ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we have a component that reads from the same state we're changing with the form.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/react-forms/Image_23_FlowchartControlled.png\" alt=\"Diagram of controlled components using props\"\u003e\u003c/p\u003e  \u003cp\u003eThis can be a very useful way to capture user input and utilize it throughout your application, even if a server is not involved.\u003c/p\u003e  \u003cp\u003eThe opposite can also be true. Imagine a user profile page with an 'Edit' button that opens a form for updating user info. When a user clicks that 'Edit' button, they expect to see a form with their user data pre-populated. This way, they can easily make small changes without rewriting all their profile info.\u003c/p\u003e  \u003cp\u003eJust like we did with \u003ccode\u003eParentComponent\u003c/code\u003e, this could be achieved by populating a form with data from props! After all, if we have a React app that is displaying user information, that information is stored \u003cem\u003esomewhere\u003c/em\u003e on the app.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eUsing a controlled component is the preferred way to do things in React — it allows us to keep \u003cem\u003eall\u003c/em\u003e component state in the React state, instead of relying on the DOM to retrieve the element's value through its internal state.\u003c/p\u003e  \u003cp\u003eUsing a controlled form, whenever our state changes, the component re-renders, rendering the input with the new updated value. If we don't update the state, our input will not update when the user types. In other words, we need to update our input's state \u003cem\u003eprogrammatically\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIt might seem a little counterintuitive that we need to be so verbose, but this actually opens the door to additional functionality. For example, let's say we want to write an input that only takes the numbers \u003ccode\u003e0\u003c/code\u003e through \u003ccode\u003e5\u003c/code\u003e. We can now validate the data the user enters \u003cem\u003ebefore\u003c/em\u003e we set it on the state, allowing us to block any invalid values. If the input is invalid, we simply avoid updating the state, preventing the input from updating. We could optionally set another state property (for example, \u003ccode\u003eisInvalidNumber\u003c/code\u003e). Using that state property, we can show an error in our component to indicate that the user tried to enter an invalid value.\u003c/p\u003e  \u003cp\u003eIf we tried to do this using an uncontrolled component, the input would be entered regardless, since we don't have control over the internal state of the input. In our \u003ccode\u003eonChange\u003c/code\u003e handler, we'd have to roll the input back to its previous value, which is pretty tedious!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/forms.html\"\u003eReact Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb66d20dce158b294b2e539cf9776bdcc","title":"React Fetch CRUD Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-fetch-crud-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-fetch-crud-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-fetch-crud-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWe're going to continue working on our quiz app, this time from the administrative side of things! We want our quizmasters to be able to view, add, edit, and delete the existing quizzes so they can change the content for the rest of our users.\u003c/p\u003e  \u003cp\u003eThere's some starter code set up, so you won't need to create any new components for this lab. Your goal will be to work with \u003ccode\u003efetch\u003c/code\u003e and interact with our quiz API to perform the necessary CRUD operations to complete these deliverables.\u003c/p\u003e  \u003ch2\u003eSetup\u003c/h2\u003e  \u003cp\u003eAs usual, make sure to run \u003ccode\u003enpm install\u003c/code\u003e to install the necessary dependencies.\u003c/p\u003e  \u003cp\u003eFor this lab, we'll be using \u003ccode\u003ejson-server\u003c/code\u003e to create a RESTful API with our quiz data. You can run \u003ccode\u003ejson-server\u003c/code\u003e by running \u003ccode\u003enpm run server\u003c/code\u003e (the command for this is in the \u003ccode\u003epackage.json\u003c/code\u003e file). Once your server is running, go to \u003ccode\u003ehttp://localhost:4000/questions\u003c/code\u003e in your browser and have a look at the question data.\u003c/p\u003e  \u003cp\u003eThen, in a new terminal tab, run \u003ccode\u003enpm start\u003c/code\u003e to run the React application.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003ch3\u003eGET /questions\u003c/h3\u003e  \u003cp\u003eWhen the application loads, get all the questions from \u003ccode\u003ehttp://localhost:4000/questions\u003c/code\u003e and display them using the \u003ccode\u003eQuestionList\u003c/code\u003e component.\u003c/p\u003e  \u003cp\u003eYou'll need to add \u003ccode\u003euseState\u003c/code\u003e and \u003ccode\u003euseEffect\u003c/code\u003e for this deliverable, but it's up to you to decide where it belongs! Think about which components will need access to the question data.\u003c/p\u003e  \u003ch3\u003ePOST /questions\u003c/h3\u003e  \u003cp\u003eWhen the user clicks the 'New Question' button, a form will be displayed for creating a new question. This form is already set up as a controlled form, so your responsibility will be to send this form data to our API \u003cem\u003ewhen the form is submitted\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eFor the API to work, you'll need to format your POST request like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePOST /questions\u003cbr\u003e\u003cbr\u003eRequired Headers:\u003cbr\u003e{ \"Content-Type\": \"application/json\" }\u003cbr\u003e\u003cbr\u003eBody:\u003cbr\u003e{\u003cbr\u003e  \"prompt\": string,\u003cbr\u003e  \"answers\": array of strings,\u003cbr\u003e  \"correctIndex\": integer\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn addition to updating the form, you should display the new question in the \u003ccode\u003eQuestionList\u003c/code\u003e component.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: because \u003ccode\u003ejson-server\u003c/code\u003e doesn't have any validations, if you make any mistakes and send the body of your request in the wrong format, you'll need to manually delete the entry from the \u003ccode\u003edb.json\u003c/code\u003e file.\u003c/p\u003e  \u003ch3\u003eDELETE /questions/:id\u003c/h3\u003e  \u003cp\u003eWhen the user clicks the 'View Questions' button, a list of all the questions should show up (from deliverable 1). \u003cem\u003eWhen the delete button is clicked\u003c/em\u003e, the question should be removed from the list. It should \u003cem\u003ealso\u003c/em\u003e be deleted on the server.\u003c/p\u003e  \u003cp\u003eMake sure to include the \u003cstrong\u003eid\u003c/strong\u003e of the question you're trying to delete in your request's url!\u003c/p\u003e  \u003ch3\u003ePATCH /questions/:id\u003c/h3\u003e  \u003cp\u003eWhen the user clicks the 'View Questions' button, a list of all the questions should show up (from deliverable 1). \u003cem\u003eWhen the dropdown for the correct answer is changed\u003c/em\u003e, the question should be updated on the server.\u003c/p\u003e  \u003cp\u003eFor the API to work, you'll need to format your POST request like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePATCH /questions/:id\u003cbr\u003e\u003cbr\u003eRequired Headers:\u003cbr\u003e{ \"Content-Type\": \"application/json\" }\u003cbr\u003e\u003cbr\u003eBody:\u003cbr\u003e{\u003cbr\u003e  \"correctIndex\": integer\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMake sure to include the \u003cstrong\u003eid\u003c/strong\u003e of the question you're trying to update in your request's url!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb4d39200027396e94c65a46b5fae67e1","title":"React Forms Submit","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-forms-submit\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-submit\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-forms-submit/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll discuss how to handle forms submitting in React.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eHandle a form's submit event in React\u003c/li\u003e \u003cli\u003eUse controlled inputs to validate values\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCode Along\u003c/h2\u003e  \u003cp\u003eIf you want to code along there is starter code in the \u003ccode\u003esrc\u003c/code\u003e folder. Make sure to run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to see the code in the browser.\u003c/p\u003e  \u003ch2\u003eSubmitting a Controlled Form\u003c/h2\u003e  \u003cp\u003eNow that we've learned how to control a form with \u003ccode\u003estate\u003c/code\u003e, we want to set up a way to submit our form. For this, we use a second event, \u003ccode\u003eonSubmit\u003c/code\u003e, added to the \u003ccode\u003eform\u003c/code\u003e in JSX:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e    \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e    \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e    \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e  \u0026lt;/form\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, whenever the form is submitted (by pressing \u003ccode\u003eEnter\u003c/code\u003e/\u003ccode\u003eReturn\u003c/code\u003e, or clicking a Submit button), a callback function will be called, \u003ccode\u003ehandleSubmit\u003c/code\u003e. We don't have a function \u003ccode\u003ehandleSubmit\u003c/code\u003e yet, so let's write one out:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleSubmit(event) {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  const formData = {\u003cbr\u003e    firstName: firstName,\u003cbr\u003e    lastName: lastName,\u003cbr\u003e  };\u003cbr\u003e  props.sendFormDataSomewhere(formData);\u003cbr\u003e  setFirstName(\"\");\u003cbr\u003e  setLastName(\"\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's look at each line of code in this function:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eevent.preventDefault()\u003c/code\u003e: The default behavior of a form is to \u003ca href=\"https://www.w3schools.com/html/html_forms.asp\"\u003etry and submit the form data based on a defined action\u003c/a\u003e, causing a redirect. We didn't (and don't need to) define an action. The result, however, is that the form redirects to the current page, causing a refresh. By using \u003ccode\u003eevent.preventDefault()\u003c/code\u003e, we stop this behavior from happening.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003econst formData = { firstName: firstName, lastName: lastName }\u003c/code\u003e: Here, we are putting together the current form data into an object using the values stored in state.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eprops.sendFormDataSomewhere(formData)\u003c/code\u003e: A form, when submitted should send the form data somewhere. As mentioned a moment ago, the traditional HTML way was to send data to a server or another page using the \u003ccode\u003eaction\u003c/code\u003e attribute. In React, we handle requests with asynchronous JavaScript. We won't go into the details of how this works just yet, but we can think of \u003ccode\u003esendFormDataSomewhere()\u003c/code\u003e as the code that handles sending our data off. This function might be defined in the same form component, or can be passed down as a prop.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003esetFirstName(\"\")\u003c/code\u003e: if we want to clear the input fields, all we need to do is set state! In a traditional JavaScript form, you might do something like \u003ccode\u003eevent.target.reset()\u003c/code\u003e to clear out the form fields. Here, we need to ensure that our component state matches what the user sees in the form. By setting state, we're keeping our React component state in sync with what the user sees.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou can contrast this to handling an \u003cem\u003euncontrolled\u003c/em\u003e form being submitted, in which case you would need to access the input fields from the DOM instead of accessing the values from state:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleSubmit(event) {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  // in an uncontrolled form, you need to access the input fields from the DOM\u003cbr\u003e  const formData = {\u003cbr\u003e    firstName: e.target[0].value,\u003cbr\u003e    lastName: e.target[1].value,\u003cbr\u003e  };\u003cbr\u003e  props.sendFormDataSomewhere(formData);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe don't have a server to send our data to, but to demonstrate submission, we could modify our \u003ccode\u003eForm\u003c/code\u003e component to list out submissions, storing them in state:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Form() {\u003cbr\u003e  const [firstName, setFirstName] = useState(\"John\");\u003cbr\u003e  const [lastName, setLastName] = useState(\"Henry\");\u003cbr\u003e  const [submittedData, setSubmittedData] = useState([]);\u003cbr\u003e\u003cbr\u003e  function handleFirstNameChange(event) {\u003cbr\u003e    setFirstName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleLastNameChange(event) {\u003cbr\u003e    setLastName(event.target.value);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function handleSubmit(event) {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    const formData = { firstName: firstName, lastName: lastName };\u003cbr\u003e    const dataArray = [...submittedData, formData];\u003cbr\u003e    setSubmittedData(dataArray);\u003cbr\u003e    setFirstName(\"\");\u003cbr\u003e    setLastName(\"\");\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  const listOfSubmissions = submittedData.map((data, index) =\u0026gt; {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div key={index}\u0026gt;\u003cbr\u003e        {data.firstName} {data.lastName}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e        \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;/form\u0026gt;\u003cbr\u003e      \u0026lt;h3\u0026gt;Submissions\u0026lt;/h3\u0026gt;\u003cbr\u003e      {listOfSubmissions}\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Form; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe above component will render previous form submissions on the page! We have a fully functioning controlled form.\u003c/p\u003e  \u003ch2\u003eValidating Inputs\u003c/h2\u003e  \u003cp\u003eOne benefit we get from having our form's input values held in state is an easy way to perform validations when the form is submitted. For example, let's say we want to require that a user enters some data into our form fields before they can submit the form successfully.\u003c/p\u003e  \u003cp\u003eIn our handle submit, we can add some validation logic to check if the form inputs have the required data, and hold some error messages in state:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// add state for holding error messages\u003cbr\u003econst [errors, setErrors] = useState([]);\u003cbr\u003e\u003cbr\u003efunction handleSubmit(event) {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  // first name is required\u003cbr\u003e  if (firstName) {\u003cbr\u003e    const formData = { firstName: firstName, lastName: lastName };\u003cbr\u003e    const dataArray = [...submittedData, formData];\u003cbr\u003e    setSubmittedData(dataArray);\u003cbr\u003e    setFirstName(\"\");\u003cbr\u003e    setLastName(\"\");\u003cbr\u003e    setErrors([]);\u003cbr\u003e  } else {\u003cbr\u003e    setErrors([\"First name is required!\"]);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, we can display an error message to our user in the JSX:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;form onSubmit={handleSubmit}\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleFirstNameChange} value={firstName} /\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" onChange={handleLastNameChange} value={lastName} /\u0026gt;\u003cbr\u003e      \u0026lt;button type=\"submit\"\u0026gt;Submit\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e    {/* conditionally render error messages */}\u003cbr\u003e    {errors.length \u0026gt; 0\u003cbr\u003e      ? errors.map((error, index) =\u0026gt; (\u003cbr\u003e          \u0026lt;p key={index} style={{ color: \"red\" }}\u0026gt;\u003cbr\u003e            {error}\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e        ))\u003cbr\u003e      : null}\u003cbr\u003e    \u0026lt;h3\u0026gt;Submissions\u0026lt;/h3\u0026gt;\u003cbr\u003e    {listOfSubmissions}\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eBy setting up our form components using \u003cstrong\u003econtrolled inputs\u003c/strong\u003e, we give React state control over the data being displayed in the DOM. As a benefit, we can also more easily access form data via state when a form is submitted, so that we can send that data to another component; or use it to make a fetch request; or perform some validation logic before the form data submitted.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/forms.html\"\u003eReact Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g22831b1961a40f552870d2259e3a0b9e","title":"React Information Flow","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-information-flow-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-information-flow-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-information-flow-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll explore how to pass callback functions as props in order to change state in a parent component.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003ePractice enforcing React up-down information flow\u003c/li\u003e \u003cli\u003ePractice changing state in a parent from a child component\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eHow Does Information Flow Between Components?\u003c/h2\u003e  \u003cp\u003eWe already know how to use props to pass information \u003cem\u003edown\u003c/em\u003e from parent to child. But how would we do the reverse? How might we have a \u003cstrong\u003echild\u003c/strong\u003e component send data \u003cem\u003eup\u003c/em\u003e to its \u003cstrong\u003eparent\u003c/strong\u003e component? In order to propagate information in the opposite direction, we can send a callback functions \u003cem\u003eas a prop\u003c/em\u003e from the parent component to its child.\u003c/p\u003e  \u003cp\u003eThis allows the callback to be \u003cem\u003eowned\u003c/em\u003e by a different component than the one invoking it. Once invoked, the callback can send data to or change state in the parent component that \u003cem\u003eowns\u003c/em\u003e it, instead of the child component that \u003cem\u003einvoked\u003c/em\u003e it.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eAssuming you've pulled down the starter code and ran \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm start\u003c/code\u003e, you should see a few rectangles in your browser. The large outer rectangle will be a random color every time you refresh the page, but the two smaller rectangles inside will always have a white background. Take a moment to familiarize yourself with the code base. We have a simple application that renders a single \u003ccode\u003eParent\u003c/code\u003e component and two \u003ccode\u003eChild\u003c/code\u003e components. The component hierarchy is as followed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp\u003cbr\u003e└───Parent\u003cbr\u003e    ├───Child\u003cbr\u003e    └───Child \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDeliverables Part 1\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWhen either \u003ccode\u003eChild\u003c/code\u003e component is clicked, the \u003ccode\u003eParent\u003c/code\u003e component should change color.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003ccode\u003esrc/randomColorGenerator.js\u003c/code\u003e has a helper function \u003ccode\u003egetRandomColor()\u003c/code\u003e implemented for you that generates a random color.\u003c/p\u003e  \u003ch3\u003eChanging the color of Parent\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eParent\u003c/code\u003e component has a state called \u003ccode\u003ecolor\u003c/code\u003e that is initially set to a random color. If we want to set the state, it would be easy to do so in a function like shown below:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Parent() {\u003cbr\u003e  const randomColor = getRandomColor();\u003cbr\u003e  const [color, setColor] = useState(randomColor);\u003cbr\u003e\u003cbr\u003e  function handleChangeColor() {\u003cbr\u003e    const newRandomColor = getRandomColor();\u003cbr\u003e    setColor(newRandomColor);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div className=\"parent\" style={{ backgroundColor: color }}\u0026gt;\u003cbr\u003e      \u0026lt;Child /\u0026gt;\u003cbr\u003e      \u0026lt;Child /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut we are going to want to run this \u003ccode\u003ehandleChangeColor()\u003c/code\u003e function when either \u003ccode\u003eChild\u003c/code\u003e component is clicked. So we are going to pass this state changing function \u003cem\u003eas a prop\u003c/em\u003e to both \u003ccode\u003eChild\u003c/code\u003e components.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;div className=\"parent\" style={{ backgroundColor: color }}\u0026gt;\u003cbr\u003e    \u0026lt;Child onChangeColor={handleChangeColor} /\u0026gt;\u003cbr\u003e    \u0026lt;Child onChangeColor={handleChangeColor} /\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, \u003ccode\u003eChild\u003c/code\u003e will have a prop called \u003ccode\u003eonChangeColor\u003c/code\u003e that is a \u003cem\u003efunction\u003c/em\u003e. Specifically, it is the same function object as our \u003ccode\u003eParent\u003c/code\u003e's '\u003ccode\u003ehandleChangeColor\u003c/code\u003e function. Want to see for yourself? Put a \u003ccode\u003econsole.log\u003c/code\u003e inside the \u003ccode\u003eChild\u003c/code\u003e component.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Child(props) {\u003cbr\u003e  console.log(props);\u003cbr\u003e  return \u0026lt;div className=\"child\" style={{ backgroundColor: \"#FFF\" }} /\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat we want to do now is use this \u003ccode\u003eonChangeColor\u003c/code\u003e prop as a React event handler.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(props);\u003cbr\u003ereturn (\u003cbr\u003e  \u0026lt;div\u003cbr\u003e    onClick={props.onChangeColor}\u003cbr\u003e    className=\"child\"\u003cbr\u003e    style={{ backgroundColor: \"#FFF\" }}\u003cbr\u003e  /\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd ta-da! Now, if you go to the app, clicking on \u003cem\u003eeither\u003c/em\u003e of the white rectangle \u003ccode\u003eChild\u003c/code\u003e components will cause the \u003ccode\u003eParent\u003c/code\u003e component to change color! But let's add one more feature!\u003c/p\u003e  \u003ch2\u003eDeliverables Part 2\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWhen either \u003ccode\u003eChild\u003c/code\u003e component is clicked, it should change to its own background color to a random color, and the other \u003ccode\u003eChild\u003c/code\u003e component should change to \u003cem\u003ethat same\u003c/em\u003e color.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eNow, we could put some state in our \u003ccode\u003eChild\u003c/code\u003e component to keep track of its color. However, React components cannot pass data between 'sibling' components. Data can only flow up and down between parent/child. So if we update the color of one \u003ccode\u003eChild\u003c/code\u003e component, we have no way to pass that data to the \u003cem\u003eother\u003c/em\u003e \u003ccode\u003eChild\u003c/code\u003e component. The solution is to store the color of the \u003ccode\u003eChild\u003c/code\u003e in the state of the \u003ccode\u003eParent\u003c/code\u003e component. Then, we let the \u003ccode\u003eParent\u003c/code\u003e component handle the passing of that data to each of its children components.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Parent() {\u003cbr\u003e  const randomColor = getRandomColor();\u003cbr\u003e  const [color, setColor] = useState(randomColor);\u003cbr\u003e  const [childrenColor, setChildrenColor] = useState(\"#FFF\");\u003cbr\u003e\u003cbr\u003e  // ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince the data that represents the color of the two \u003ccode\u003eChild\u003c/code\u003e components lives in \u003ccode\u003eParent\u003c/code\u003e, we should pass that data down as props:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereturn (\u003cbr\u003e  \u0026lt;div className=\"parent\" style={{ backgroundColor: color }}\u0026gt;\u003cbr\u003e    \u0026lt;Child color={childrenColor} onChangeColor={handleChangeColor} /\u0026gt;\u003cbr\u003e    \u0026lt;Child color={childrenColor} onChangeColor={handleChangeColor} /\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's actually use that props data in the \u003ccode\u003eChild\u003c/code\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Child(props) {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u003cbr\u003e      onClick={props.onChangeColor}\u003cbr\u003e      className=\"child\"\u003cbr\u003e      style={{ backgroundColor: props.color }}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLastly, we have to update the \u003ccode\u003ehandleChangeColor()\u003c/code\u003e function in \u003ccode\u003eParent\u003c/code\u003e to change not just the \u003ccode\u003ecolor\u003c/code\u003e state, but also the \u003ccode\u003echildrenColor\u003c/code\u003e. To practice sending data \u003cem\u003eback\u003c/em\u003e to the parent, let's change our \u003ccode\u003ehandleChangeColor\u003c/code\u003e to take in an argument of \u003ccode\u003enewChildColor\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleChangeColor(newChildColor) {\u003cbr\u003e  const newRandomColor = getRandomColor();\u003cbr\u003e  setColor(newRandomColor);\u003cbr\u003e  setChildrenColor(newChildColor);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that the function takes in an argument, we'll need to update the \u003ccode\u003eonClick\u003c/code\u003e of \u003ccode\u003eChild\u003c/code\u003e to be a function that invokes \u003ccode\u003ethis.props.handleColorChange\u003c/code\u003e and passes in a random color as the argument:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Child(props) {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u003cbr\u003e      onClick={() =\u0026gt; props.onChangeColor(getRandomColor())}\u003cbr\u003e      className=\"child\"\u003cbr\u003e      style={{ backgroundColor: props.color }}\u003cbr\u003e    /\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWow! Check out the finished product in the browser! When either \u003ccode\u003eChild\u003c/code\u003e component is clicked, the \u003ccode\u003eParent\u003c/code\u003e changes to a random color, but also, both \u003ccode\u003eChild\u003c/code\u003e components change to a different random color.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eFor information to propagate \u003cstrong\u003edown\u003c/strong\u003e the component tree, parents pass \u003ccode\u003eprops\u003c/code\u003e to their children\u003c/li\u003e \u003cli\u003eFor information to propagate \u003cstrong\u003eup\u003c/strong\u003e the component tree, we typically invoke callbacks that were passed from parents to children as \u003ccode\u003eprops\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eComponents of the same level (sibling components) cannot communicate directly! We can only communicate up and down the component tree. So if multiple components need to share the same information, that state should live in the parent (or a more general ancestor) component.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/lifting-state-up.html\"\u003eLifting State Up\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd42b9d5c8d71d0cadbd6dce5384efd25","title":"React Information Flow Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-information-flow-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-information-flow-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-information-flow-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eLast time we worked on the Shopping List app, we ended up with the following component hierarchy:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp\u003cbr\u003e└── ShoppingList\u003cbr\u003e    ├── Item\u003cbr\u003e    ├── Item\u003cbr\u003e    └── Item \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, it would probably make more sense to break the app down more like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/learn-co-curriculum/react-hooks-information-flow-lab/master/images/demo.png\" alt=\"demo\"\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eApp\u003cbr\u003e├── Header\u003cbr\u003e└── ShoppingList\u003cbr\u003e    ├── Filter\u003cbr\u003e    ├── Item\u003cbr\u003e    ├── Item\u003cbr\u003e    └── Item \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYour goal is to refactor the code from the previous shopping list lab to match the component structure in the image above. As you work on refactoring the code, keep in mind:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWhich components should hold \u003cstrong\u003estate\u003c/strong\u003e? Which components need access to that state?\u003c/li\u003e \u003cli\u003eHow can we update state in one component from a child component?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAlso, remember what we learned in the previous lesson:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eFor information to propagate \u003cem\u003edown\u003c/em\u003e the component tree, parents pass \u003ccode\u003eprops\u003c/code\u003e to their children\u003c/li\u003e \u003cli\u003eFor information to propagate \u003cem\u003eup\u003c/em\u003e the component tree, we typically invoke callbacks that were passed from parents to children as \u003ccode\u003eprops\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eComponents of the same level (sibling components) cannot communicate directly! We can only communicate up and down the component tree. So if multiple components need to share the same information, that state should live in the parent (or a more general ancestor) component.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003ch3\u003eHeader\u003c/h3\u003e  \u003cp\u003eCreate a \u003ccode\u003eHeader\u003c/code\u003e component by refactoring the \u003ccode\u003e\u0026lt;header\u0026gt;\u003c/code\u003e element out of the \u003ccode\u003eApp\u003c/code\u003e component. Clicking on the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e inside of the \u003ccode\u003eHeader\u003c/code\u003e component should still toggle dark mode on and off.\u003c/p\u003e  \u003cp\u003eYou will need to pass a \u003cem\u003ecallback function\u003c/em\u003e as a prop called \u003ccode\u003eonDarkModeClick\u003c/code\u003e to the \u003ccode\u003eHeader\u003c/code\u003e component in order for the test to pass.\u003c/p\u003e  \u003ch3\u003eFilter\u003c/h3\u003e  \u003cp\u003eCreate a \u003ccode\u003eFilter\u003c/code\u003e component by refactoring the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element out of the \u003ccode\u003eShoppingList\u003c/code\u003e component. Changing the selection in the dropdown should still change which items are displayed in the shopping list.\u003c/p\u003e  \u003cp\u003eYou will need to pass a \u003cem\u003ecallback function\u003c/em\u003e as a prop called \u003ccode\u003eonCategoryChange\u003c/code\u003e to the \u003ccode\u003eFilter\u003c/code\u003e component in order for the test to pass.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-state.html\"\u003eReact Docs on \u003ccode\u003euseState\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gea12229b75bcfc8c6bbe2b40ddcb77b1","title":"React Simple Data Fetching Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-simple-data-fetching-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-simple-data-fetching-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-simple-data-fetching-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice creating a React component that utilizes \u003ccode\u003efetch\u003c/code\u003e to display content\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eThis lab is missing the App component that \u003ccode\u003eindex.js\u003c/code\u003e is looking for. To pass the tests in this lab:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreate an \u003ccode\u003eApp\u003c/code\u003e component from scratch\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003euseEffect\u003c/code\u003e hook. Inside the callback for \u003ccode\u003euseEffect\u003c/code\u003e, send a \u003ccode\u003efetch\u003c/code\u003e request to \u003ccode\u003ehttps://dog.ceo/api/breeds/image/random\u003c/code\u003e, a free API that returns a random image of a dog.\u003c/li\u003e \u003cli\u003eDisplay a \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e tag with the text of \"Loading...\" when the component is first rendered\u003c/li\u003e \u003cli\u003eAfter receiving a response from the API, show the dog image in a \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag, with the \u003ccode\u003ealt\u003c/code\u003e attribute set to \"A Random Dog\".\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g998c0be41d1a8793a0adc4e38f95b357","title":"React State","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we'll dive into component \u003cstrong\u003estate\u003c/strong\u003e, and see how we can make our components respond to change dynamically by working with the React state system.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eExplain what state is\u003c/li\u003e\n\u003cli\u003eExplain the difference between state and props\u003c/li\u003e\n\u003cli\u003eShow examples of how state is defined and updated\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eWhat's state?\u003c/h2\u003e\n\u003cp\u003eLet's quickly talk about what \u003cstrong\u003estate\u003c/strong\u003e is in React. State is data that is \u003cstrong\u003edynamic\u003c/strong\u003e in your component. A component's state, unlike a component's props, \u003cem\u003ecan\u003c/em\u003e change during the component's life.\u003c/p\u003e\n\u003cp\u003eConsider the limitations of props: for a component's props to change, its \u003cstrong\u003eparent\u003c/strong\u003e component needs to send it new props (after which, the component would 'remake' itself with the new props). State provides us with a way to maintain and update information \u003cem\u003ewithin\u003c/em\u003e a component \u003cem\u003ewithout\u003c/em\u003e requiring its parent to somehow send updated information.\u003c/p\u003e\n\u003cp\u003eImagine that we have a single component which displays an integer. When a user clicks the component, it should increment its integer by 1. If we were to represent this integer value in the component using \u003cstrong\u003estate\u003c/strong\u003e, the component could increment its own state and automatically re-render whenever state is updated!\u003c/p\u003e\n\u003ch2\u003euseState\u003c/h2\u003e\n\u003cp\u003eIn order to work with these special \u003cstrong\u003estate variables\u003c/strong\u003e in our components, we must first import a function from React called \u003ccode\u003euseState\u003c/code\u003e. This special function is a \u003cstrong\u003eReact Hook\u003c/strong\u003e that will let us \"hook into\" React's internal state inside of our function component.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\"; \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInitializing State\u003c/h3\u003e\n\u003cp\u003eOnce we've imported the \u003ccode\u003euseState\u003c/code\u003e hook, we can call it inside of our component, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction Counter() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button\u0026gt;{count}\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we call \u003ccode\u003euseState(0)\u003c/code\u003e inside the function component, that creates a new \"state variable\" which our function gets access to. That new state variable has an \u003cstrong\u003einitial value\u003c/strong\u003e of 0 (or whatever we pass into \u003ccode\u003euseState\u003c/code\u003e when we call it).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003euseState\u003c/code\u003e will return an \u003cstrong\u003earray\u003c/strong\u003e that has two things inside of it:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ecount\u003c/code\u003e: the current value for the state variable\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esetCount\u003c/code\u003e: a \u003cem\u003esetter\u003c/em\u003e function so we can update the state variable\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe could access those elements from the array individually, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst countState = useState(0);\u003cbr\u003e// =\u0026gt; [0, setStateFunction]\u003cbr\u003econst count = countState[0];\u003cbr\u003econst setCount = countState[1]; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut to clean up the code, React recommends using \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"\u003earray destructuring\u003c/a\u003e to achieve the same result in one line of code instead of three:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst [count, setCount] = useState(0); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can then use the \u003ccode\u003ecount\u003c/code\u003e variable to access that piece of state and display its current value in the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\u003ch2\u003eSetting State\u003c/h2\u003e\n\u003cp\u003eThe setter function we get back from calling \u003ccode\u003euseState\u003c/code\u003e is straightforward in its purpose: it sets/updates state! That's it! That's what it's there for. Whenever we want to update state, we can just call the setter function (in our case, \u003ccode\u003esetCount\u003c/code\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Counter() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  function increment() {\u003cbr\u003e    setCount(count + 1);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button onClick={increment}\u0026gt;{count}\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, when the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element is clicked, it will run our \u003ccode\u003eincrement\u003c/code\u003e function. \u003ccode\u003eincrement\u003c/code\u003e calls the \u003ccode\u003esetCount\u003c/code\u003e function to do these two things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUpdate the value of \u003ccode\u003ecount\u003c/code\u003e to be \u003ccode\u003ecount + 1\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRe-render our component\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe magic of working with \u003cstrong\u003estate\u003c/strong\u003e is that we don't have to worry about any complex DOM manipulation (like finding the button element and telling it to display the new \u003ccode\u003ecount\u003c/code\u003e value) — whenever we call the \u003ccode\u003esetCount\u003c/code\u003e function, React will automatically re-render our component, along with any of its child components, and update the DOM based on the new values for state!\u003c/p\u003e\n\u003cp\u003eUsing state like this allows React to be very performant: based on which component is updated, React can determine which child components are affected and how the DOM needs to be changed when these components are re-rendered.\u003c/p\u003e\n\u003cp\u003eTake your time to read through the above code. Work through it line by line and make sure you are comfortable before moving forward.\u003c/p\u003e\n\u003ch3\u003eSetting State is Asynchronous\u003c/h3\u003e\n\u003cp\u003eWhile using the \u003ccode\u003esetCount\u003c/code\u003e function is straightforward enough, there is one very important caveat about \u003cem\u003ehow\u003c/em\u003e it functions that we need to explore: it sets state \u003cstrong\u003easynchronously\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eIn order to understand why this is important, let's look at an example of a state setter function being used in a component. The following gif is of this component (pay close attention to the \u003ccode\u003econsole.log()\u003c/code\u003es:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Counter() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  function increment() {\u003cbr\u003e    console.log(`before setState: ${count}`);\u003cbr\u003e\u003cbr\u003e    setCount(count + 1);\u003cbr\u003e\u003cbr\u003e    console.log(`after setState: ${count}`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div onClick={increment}\u0026gt;{count}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/asynchronous-state-setting-example.gif\" alt=\"async set state example\"\u003e\u003c/p\u003e\n\u003cp\u003eWhat we are seeing is \u003ccode\u003esetCount()\u003c/code\u003e functioning \u003cstrong\u003easynchronously\u003c/strong\u003e. When we execute \u003ccode\u003esetCount()\u003c/code\u003e, it is \u003cem\u003enon-blocking\u003c/em\u003e. It fires off a message to the React component's inner workings saying: \"Hey, you need to update state to this value when you have a chance.\" The component finishes doing its current task \u003cem\u003ebefore\u003c/em\u003e updating the state. In this case, it finishes executing the \u003ccode\u003eincrement\u003c/code\u003e function in full before updating the state.\u003c/p\u003e\n\u003cp\u003eIt's not uncommon for new React developers to get 'bitten' by the asynchronous nature of state setter functions at least once. If setting state were not \u003cem\u003easynchronous\u003c/em\u003e, the two logs would not be the same number.\u003c/p\u003e\n\u003cp\u003eFor this reason, React recommends using a slightly different syntax for setting state when working with values that are calculated based on the previous version of state (like our counter). To demonstrate the issue, consider the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Counter() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  function increment() {\u003cbr\u003e    // call setCount twice, to update the counter by two every time we click\u003cbr\u003e    setCount(count + 1);\u003cbr\u003e    setCount(count + 1);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div onClick={increment}\u0026gt;{count}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is a contrived example — we could just as easily have called \u003ccode\u003esetCount(count + 2)\u003c/code\u003e instead of calling \u003ccode\u003esetCount\u003c/code\u003e twice. But if you run this example in your browser, you may be surprised at the result. Instead of seeing the counter incremented by two, it's still only incremented by 1!\u003c/p\u003e\n\u003cp\u003eThis problem makes more sense if we add some logs back in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction increment() {\u003cbr\u003e  console.log(`before setState: ${count}`);\u003cbr\u003e  setCount(count + 1);\u003cbr\u003e  console.log(`after setState once: ${count}`);\u003cbr\u003e  setCount(count + 1);\u003cbr\u003e  console.log(`after setState twice: ${count}`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven though we call \u003ccode\u003esetCount\u003c/code\u003e multiple times, the value of \u003ccode\u003ecount\u003c/code\u003e isn't updated immediately!\u003c/p\u003e\n\u003cp\u003eAs mentioned before, setting state is not synchronous. In our example, calling \u003ccode\u003esetCount(count + 1)\u003c/code\u003e will evaluate to \u003ccode\u003esetCount(1)\u003c/code\u003e in \u003cem\u003eboth\u003c/em\u003e cases:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction increment() {\u003cbr\u003e  console.log(count);\u003cbr\u003e  // =\u0026gt; 0\u003cbr\u003e\u003cbr\u003e  setCount(count + 1);\u003cbr\u003e  // equivalent to setCount(0 + 1)\u003cbr\u003e\u003cbr\u003e  console.log(count);\u003cbr\u003e  // =\u0026gt; 0\u003cbr\u003e\u003cbr\u003e  setCount(0 + 1);\u003cbr\u003e  // equivalent to setCount(0 + 1)\u003cbr\u003e\u003cbr\u003e  console.log(count);\u003cbr\u003e  // =\u0026gt; 0\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReact actually provides a built in solution for this problem. Instead of passing a new value into \u003ccode\u003esetCount\u003c/code\u003e, we can also pass a callback function. That function, when called inside \u003ccode\u003esetCount\u003c/code\u003e will be passed the state variable from when that \u003ccode\u003esetCount\u003c/code\u003e was called. This is typically referred to as the \u003cem\u003eprevious state\u003c/em\u003e. With this knowledge, we can rewrite the \u003ccode\u003eincrement\u003c/code\u003e function to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction increment() {\u003cbr\u003e  setCount((currentCount) =\u0026gt; currentCount + 1);\u003cbr\u003e  setCount((currentCount) =\u0026gt; currentCount + 1);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using the callback version of \u003ccode\u003esetCount\u003c/code\u003e, React will pass in the current value of \u003ccode\u003ecount\u003c/code\u003e before updating it. Now our code works as intended and updates \u003ccode\u003ecount\u003c/code\u003e by 2 when the button is clicked.\u003c/p\u003e\n\u003cp\u003eAs a rule of thumb, \u003cstrong\u003eany time you need to set state based on the current value of state, you should use the callback syntax\u003c/strong\u003e.\u003c/p\u003e\n\u003ch3\u003eRules of Hooks\u003c/h3\u003e\n\u003cp\u003eSince the \u003ccode\u003euseState\u003c/code\u003e hook is the first of several React Hooks we'll be learning about, now's a good time to review some general \u003ca href=\"https://reactjs.org/docs/hooks-rules.html\"\u003erules for working with hooks\u003c/a\u003e:\u003c/p\u003e\n\u003ch4\u003eOnly Call Hooks at the Top Level\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon’t call Hooks inside loops, conditions, or nested functions.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhen you're using a React Hook, such as \u003ccode\u003euseState\u003c/code\u003e, it's important that the hook is always called every time your component is rendered. That means this syntax isn't valid:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Counter(props) {\u003cbr\u003e  if (props.shouldHaveCount) {\u003cbr\u003e    // This is wrong -- never call a hook inside a condition\u003cbr\u003e    const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e    // return ...\u003cbr\u003e  }\u003cbr\u003e  // return ...\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe reason for this comes down to how React keeps track of which state variables are associated with — hooks must always be called in the same order. For a more detailed explanation, check out the \u003ca href=\"https://reactjs.org/docs/hooks-rules.html#explanation\"\u003eReact docs\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eOnly Call Hooks from React Functions\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon’t call Hooks from regular JavaScript functions.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eReact Hooks are meant to work specifically with React components, so make sure to only use Hooks inside of React components. We'll see how to create our custom hooks later on — custom hooks and React components are the only two places you can use React hooks.\u003c/p\u003e\n\u003ch2\u003eA Word of Caution\u003c/h2\u003e\n\u003cp\u003eWhile component state is a very powerful feature, it should be used as sparingly as possible. State adds (sometimes unnecessary) complexity and can be very easy to lose track of. The more state we introduce in our application, the harder it will be to keep track of all of the changes in our data. Remember: \u003cstrong\u003estate is only for values that are expected to change during the components life\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWhenever we need \u003cem\u003edynamic\u003c/em\u003e data in our applications (values that change over time), we should use \u003cstrong\u003estate\u003c/strong\u003e. We create our initial state by calling the \u003ccode\u003euseState\u003c/code\u003e hook inside of our components.\u003c/p\u003e\n\u003cp\u003eTo update state, we must use the \u003ccode\u003esetState\u003c/code\u003e function returned by \u003ccode\u003euseState\u003c/code\u003e, so that changes to state cause our components to re-render.\u003c/p\u003e\n\u003cp\u003eAlso, setting state is \u003cem\u003easynchronous\u003c/em\u003e, so any updates to state that are based on the current value of state should be made using the callback syntax.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-state.html\"\u003eThe useState hook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\"\u003eProps vs. State\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state\"\u003eThinking in React\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-rules.html\"\u003eRules of Hooks\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb408e0758e1da7b4c25d3e0b987cac05","title":"React State and Arrays","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state-arrays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-arrays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-arrays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eWork with arrays in state\u003c/li\u003e \u003cli\u003eSet up a component with multiple state variables\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eWorking With Arrays\u003c/h2\u003e  \u003ch3\u003eAdding Elements To Arrays In State\u003c/h3\u003e  \u003cp\u003eWhen we need to represent a list of data in our UI, it's often a good idea to have the data for that list stored in an array! To give an example, let's build out a component that does the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eShows a button to generate a new spicy food\u003c/li\u003e \u003cli\u003eWhen the button is clicked, adds the newly generated food to a list\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe starter code for this component is in \u003ccode\u003eSpicyFoodList.js\u003c/code\u003e. Before we walk through the solution, see if you can get this working by:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eusing a \u003cstrong\u003estate variable\u003c/strong\u003e to hold an \u003cstrong\u003earray\u003c/strong\u003e of spicy foods;\u003c/li\u003e \u003cli\u003eusing that array to display each spicy food as a \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e; and\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eadding a new spicy food to the array\u003c/strong\u003e when the button is clicked.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eKeep in mind, when you're updating state, you should never \u003cem\u003emutate\u003c/em\u003e the array — instead, find a way to make a \u003cem\u003ecopy\u003c/em\u003e of the array with the new spicy food in it (\u003cstrong\u003ehint\u003c/strong\u003e: the spread operator is your friend here).\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eFirst, let's update our component to return some JSX elements based on this array in state. We can use \u003ccode\u003e.map\u003c/code\u003e on our array to generate an array of \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e elements from our array of foods, and display them in the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foodList = foods.map((food) =\u0026gt; (\u003cbr\u003e  \u0026lt;li key={food.id}\u0026gt;\u003cbr\u003e    {food.name} | Heat: {food.heatLevel} | Cuisine: {food.cuisine}\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e));\u003cbr\u003e\u003cbr\u003ereturn (\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;button onClick={handleAddFood}\u0026gt;Add New Food\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;ul\u0026gt;{foodList}\u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that our foods are displaying, time for the moment of truth: can we update state and get new foods to display dynamically?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleAddFood() {\u003cbr\u003e  const newFood = getNewSpicyFood();\u003cbr\u003e  const newFoodArray = [...foods, newFood];\u003cbr\u003e  setFoods(newFoodArray);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis step is crucial, so let's break it down!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst newFoodArray = [...foods, newFood]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we're using the spread operator (\u003ccode\u003e...\u003c/code\u003e) to make a \u003cem\u003ecopy\u003c/em\u003e of our \u003ccode\u003efoods\u003c/code\u003e array, and insert it into a \u003cem\u003enew\u003c/em\u003e array. We're also adding the newly generated food returned by the \u003ccode\u003egetNewSpicyFood\u003c/code\u003e function at the end of the array.\u003c/p\u003e  \u003cp\u003eWhenever we are updating state, it's important \u003cstrong\u003enot to mutate objects and arrays\u003c/strong\u003e, and instead, to create \u003cstrong\u003ecopies\u003c/strong\u003e of them.\u003c/p\u003e  \u003cp\u003eReact will \u003cem\u003eonly\u003c/em\u003e re-render our component when we set state with a \u003cem\u003enew\u003c/em\u003e value; so we need to create a new \u003cstrong\u003ecopy\u003c/strong\u003e of our original array to pass to the setter function, rather than mutating the original array directly and passing a reference to the original array.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eMake sure to never mutate state directly!\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eAfter setting state, our component should automatically re-render with the new list of foods.\u003c/p\u003e  \u003ch3\u003eRemoving Elements From Arrays In State\u003c/h3\u003e  \u003cp\u003eLet's add another feature. When a user clicks on a food, that food should be \u003cem\u003eremoved\u003c/em\u003e from the list.\u003c/p\u003e  \u003cp\u003eFirst, we'll need to add a click handler to the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e elements, and pass in the id of the food we're trying to remove:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foodList = foods.map((food) =\u0026gt; (\u003cbr\u003e  \u0026lt;li key={food.id} onClick={() =\u0026gt; handleLiClick(food.id)}\u0026gt;\u003cbr\u003e    {food.name} | Heat: {food.heatLevel} | Cuisine: {food.cuisine}\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e)); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, in the \u003ccode\u003ehandleLiClick\u003c/code\u003e function, we need to figure out a way to update our array in state so it no longer includes the food.\u003c/p\u003e  \u003cp\u003eThere are a few approaches you could take here, so try to find a solution on your own before peeking at the answer! Remember, we want to find a way to remove the food \u003cem\u003ewithout mutating state\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eOne common approach to this problem of creating a new array that doesn't include a specific element is using the \u003ccode\u003e.filter\u003c/code\u003e method. Here's how we can do it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleLiClick(id) {\u003cbr\u003e  const newFoodArray = foods.filter((food) =\u0026gt; food.id !== id);\u003cbr\u003e  setFoods(newFoodArray);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCalling \u003ccode\u003e.filter\u003c/code\u003e will return a \u003cem\u003enew array\u003c/em\u003e based on which elements match our criteria in the callback function. So if we write our callback function in \u003ccode\u003e.filter\u003c/code\u003e to look for all foods \u003cem\u003eexcept\u003c/em\u003e the number we're trying to remove, we'll get back a new, shortened list of foods:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[1, 2, 3].filter((number) =\u0026gt; number !== 3);\u003cbr\u003e// =\u0026gt; [1,2] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSetting state with this updated list of foods will re-render our component, causing the food to be removed from the list.\u003c/p\u003e  \u003ch3\u003eUpdating Elements in Arrays in State\u003c/h3\u003e  \u003cp\u003eHere's a tough one! We've seen how to add and remove elements from arrays, but what about updating them?\u003c/p\u003e  \u003cp\u003eLet's update our click feature so that when a user clicks on a food, that food's heat level is incremented by 1.\u003c/p\u003e  \u003cp\u003eIn the \u003ccode\u003ehandleLiClick\u003c/code\u003e function, we need to figure out a way to update our array in state and increment the heat level \u003cem\u003eonly\u003c/em\u003e for the food that was clicked.\u003c/p\u003e  \u003cp\u003eOnce again, there are a few approaches you could take here, so try to find a solution on your own before peeking at the answer! Remember, we want to find a way to update the heat level \u003cem\u003ewithout mutating state\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eOne approach we can take to \u003cem\u003eupdating\u003c/em\u003e items in arrays without mutating state involves using the \u003ccode\u003e.map\u003c/code\u003e method. Calling \u003ccode\u003e.map\u003c/code\u003e will return a new array with the same length as our original array (which is what we want), with some transformations applied to the elements in the array.\u003c/p\u003e  \u003cp\u003eHere's an example of using \u003ccode\u003e.map\u003c/code\u003e to update \u003cem\u003eone element\u003c/em\u003e of an array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[1, 2, 3].map((number) =\u0026gt; {\u003cbr\u003e  if (number === 3) {\u003cbr\u003e    // if the number is the one we're looking for, increment it\u003cbr\u003e    return number + 100;\u003cbr\u003e  } else {\u003cbr\u003e    // otherwise, return the original number\u003cbr\u003e    return number;\u003cbr\u003e  }\u003cbr\u003e});\u003cbr\u003e// =\u0026gt; [1,2,103] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo to use that technique to solve our problem, here's how our click event handler would look:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleLiClick(id) {\u003cbr\u003e  const newFoodArray = foods.map((food) =\u0026gt; {\u003cbr\u003e    if (food.id === id) {\u003cbr\u003e      return {\u003cbr\u003e        ...food,\u003cbr\u003e        heatLevel: food.heatLevel + 1,\u003cbr\u003e      };\u003cbr\u003e    } else {\u003cbr\u003e      return food;\u003cbr\u003e    }\u003cbr\u003e  });\u003cbr\u003e  setFoods(newFoodArray);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eArray Cheat Sheet\u003c/h3\u003e  \u003cp\u003eHere's a quick reference of some common techniques for manipulating arrays in state. Keep this in mind, because working with arrays will be important as a React developer!\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eAdd\u003c/strong\u003e: use the spread operator (\u003ccode\u003e[...]\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eRemove\u003c/strong\u003e: use \u003ccode\u003e.filter\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eUpdate\u003c/strong\u003e: use \u003ccode\u003e.map\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eWorking With Multiple State Variables\u003c/h2\u003e  \u003cp\u003eSometimes, a component needs multiple state variables to represent multiple UI states. To give an example, let's add a feature to our \u003ccode\u003eSpicyFoodList\u003c/code\u003e component that lets the user filter the list to only show foods from a certain cuisine.\u003c/p\u003e  \u003cp\u003eHere's the JSX you'll need for this feature:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;select name=\"filter\"\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"All\"\u0026gt;All\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"American\"\u0026gt;American\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Sichuan\"\u0026gt;Sichuan\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Thai\"\u0026gt;Thai\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Mexican\"\u0026gt;Mexican\u0026lt;/option\u0026gt;\u003cbr\u003e\u0026lt;/select\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry building out this feature on your own, then we'll go through the solution. Think about what new \u003cem\u003estate variable\u003c/em\u003e you'll need to add, and how to use that variable to determine which foods are being displayed!\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eLet's start by talking through what new state we'll need to add. We need some way of keeping track of which option the user selected from the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e tag. We'll also need to use that data to \u003cem\u003efilter\u003c/em\u003e the list of numbers and determine which foods to display.\u003c/p\u003e  \u003cp\u003eLet's set up our initial state to be a string of \"All\" to match the first \u003ccode\u003e\u0026lt;option\u0026gt;\u003c/code\u003e in our dropdown:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst [filterBy, setFilterBy] = useState(\"All\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this state variable in place, we can update the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element to set the \u003ccode\u003efilterBy\u003c/code\u003e variable when its value is changed, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction handleFilterChange(event) {\u003cbr\u003e  setFilterBy(event.target.value);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u0026lt;select name=\"filter\" onChange={handleFilterChange}\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"All\"\u0026gt;All\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"American\"\u0026gt;American\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Sichuan\"\u0026gt;Sichuan\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Thai\"\u0026gt;Thai\u0026lt;/option\u0026gt;\u003cbr\u003e  \u0026lt;option value=\"Mexican\"\u0026gt;Mexican\u0026lt;/option\u0026gt;\u003cbr\u003e\u0026lt;/select\u0026gt;; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, let's figure out how this filter value can be used to update what numbers are displayed. We will need to use \u003cem\u003eboth\u003c/em\u003e of our state variables together to solve this problem! Here's how we can use the filter value to update which items are displayed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst [foods, setFoods] = useState(spicyFoods);\u003cbr\u003econst [filterBy, setFilterBy] = useState(\"All\");\u003cbr\u003e\u003cbr\u003econst foodsToDisplay = foods.filter((food) =\u0026gt; {\u003cbr\u003e  if (filterBy === \"All\") {\u003cbr\u003e    return true;\u003cbr\u003e  } else {\u003cbr\u003e    return food.cuisine === filterBy;\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will give us a new variable, \u003ccode\u003efoodsToDisplay\u003c/code\u003e, that will be an array of:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAll foods from \u003ccode\u003efoods\u003c/code\u003e array if \u003ccode\u003efilterBy\u003c/code\u003e is set to \"All\"\u003c/li\u003e \u003cli\u003eOnly foods that match the cuisine in \u003ccode\u003efilterBy\u003c/code\u003e if \u003ccode\u003efilterBy\u003c/code\u003e is not set to \"All\"\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eNow, we just need to use \u003ccode\u003efoodsToDisplay\u003c/code\u003e instead of \u003ccode\u003efoods\u003c/code\u003e when we're generating the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e elements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foodList = foodsToDisplay.map((food) =\u0026gt; (\u003cbr\u003e  \u0026lt;li key={food.id} onClick={() =\u0026gt; handleLiClick(food.id)}\u0026gt;\u003cbr\u003e    {food.name} | Heat: {food.heatLevel} | Cuisine: {food.cuisine}\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e)); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHaving both of these variables in state and knowing how to use them in conjunction with each other give us a lot of power in React! All we need to worry about is using our programming tools — working with \u003cem\u003edata\u003c/em\u003e; manipulating \u003cem\u003earrays\u003c/em\u003e — and React can take care of all the hard work of updating the DOM correctly.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWhen working with arrays in state, it's important to find ways to set state without mutating the underlying arrays. That means using array methods like \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003efilter\u003c/code\u003e, or the spread operator, to create copies of arrays before setting state.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.robinwieruch.de/react-state-array-add-update-remove\"\u003eReact State Arrays\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6a8703b3d80a2904adf7ee9e4974c4f2","title":"React State and Events Code-along","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state-and-events-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-and-events-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-and-events-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this code-along, we'll get some hands-on practice writing components with state and setting state based on different kinds of events.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eSet up a component with one state variable\u003c/li\u003e\n\u003cli\u003eUpdate state based on events\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eAdding State to a Component\u003c/h2\u003e\n\u003cp\u003eTo get some practice adding state to a component, code along with this readme. There's some starter code in the \u003ccode\u003esrc/components\u003c/code\u003e folder. We'll be adding state to some existing components and building out some functionality that depends on state.\u003c/p\u003e\n\u003cp\u003eAs a quick recap:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eState is data that is changes over time in your component. State must be initialized in a component by calling \u003ccode\u003euseState\u003c/code\u003e. Updating state by calling \u003ccode\u003esetState\u003c/code\u003e will cause our components to re-render automatically.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTo code along, run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to install the dependencies and get the demo app running.\u003c/p\u003e\n\u003ch3\u003eDetermining When To Add State\u003c/h3\u003e\n\u003cp\u003eFor our first component, let's work on a toggle button. It should do the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe button should say \"OFF\" when it is first displayed\u003c/li\u003e\n\u003cli\u003eWhen the button is clicked, it should say \"ON\"\u003c/li\u003e\n\u003cli\u003eWhen the button is clicked again, it should say \"OFF\"\u003c/li\u003e\n\u003cli\u003eetc\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet's talk through the steps and how we might think about building a feature like this as a React developer.\u003c/p\u003e\n\u003cp\u003eFirst, let's decide: do we actually need state for this feature? We need to determine if the data for this feature is \u003cem\u003estatic\u003c/em\u003e (doesn't change) or \u003cem\u003edynamic\u003c/em\u003e (does change). If it's dynamic, we'll definitely need state! We should also ask if this feature could be made using \u003cstrong\u003eprops\u003c/strong\u003e instead of \u003cstrong\u003estate\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eHere are some questions from \u003ca href=\"https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state\"\u003eThinking in React\u003c/a\u003e that will help us decide if we need state:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cblockquote\u003eIs it passed in from a parent via props? If so, it probably isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003eCan you compute it based on any other state or props in your component? If so, it isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003eDoes it remain unchanged over time? If so, it probably isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSince this component isn't being passed any props that will let us display some new button text, and the button's text is \u003cem\u003edynamic\u003c/em\u003e (it changes), we definitely need to add state!\u003c/p\u003e\n\u003cp\u003eOur full checklist looks like this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e🚫 Is it passed as a prop?\u003c/li\u003e\n\u003cli\u003e🚫 Can you compute it based on any other state or props in your component?\u003c/li\u003e\n\u003cli\u003e✅ Does it change over time?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo it's time to add state! There's some starter code in the \u003ccode\u003eToggle.js\u003c/code\u003e file. If you're feeling good about what you learned in the last lesson, give it a shot now! We'll walk through the steps below.\u003c/p\u003e\n\u003cp\u003e...\u003c/p\u003e\n\u003cp\u003e...\u003c/p\u003e\n\u003cp\u003e...\u003c/p\u003e\n\u003cp\u003e...\u003c/p\u003e\n\u003cp\u003eOk, hope you were able to get that going! Here's our process for adding state to build out this feature.\u003c/p\u003e\n\u003ch4\u003e1. Import the \u003ccode\u003euseState\u003c/code\u003e hook\u003c/h4\u003e\n\u003cp\u003eAny time we need state in a component, we need to use the \u003ccode\u003euseState\u003c/code\u003e hook from React. We can import it like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\"; \u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e2. Set up the initial state\u003c/h4\u003e\n\u003cp\u003eTo create a state variable in our component, we need to call \u003ccode\u003euseState\u003c/code\u003e and provide an initial value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Toggle() {\u003cbr\u003e  const [isOn, setIsOn] = useState(false);\u003cbr\u003e  // ... the rest of Toggle component\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhenever you're using a React hook, it \u003cstrong\u003emust\u003c/strong\u003e be within a React component. We're setting the initial state here as \u003ccode\u003efalse\u003c/code\u003e, because the button should be \"OFF\" when the component first renders.\u003c/p\u003e\n\u003ch4\u003e3. Use the state variable in the component\u003c/h4\u003e\n\u003cp\u003eNow that we have this new variable, it's time to use it! We can use the \u003ccode\u003eisOn\u003c/code\u003e variable to determine what text to display in the button:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;button\u0026gt;{isOn ? \"ON\" : \"OFF\"}\u0026lt;/button\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we're doing some \u003ca href=\"https://reactjs.org/docs/conditional-rendering.html\"\u003econditional rendering\u003c/a\u003e to dynamically determine the button's text \u003cem\u003ebased on our state variable\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eYou should now be able to change the initial state in the \u003ccode\u003euseState\u003c/code\u003e function and see if your button's text displays what you expect. Setting an initial state of \u003ccode\u003etrue\u003c/code\u003e should display \"ON\", and \u003ccode\u003efalse\u003c/code\u003e should display \"OFF\".\u003c/p\u003e\n\u003ch4\u003e4. Call the setter function to update state\u003c/h4\u003e\n\u003cp\u003eAny time we want to \u003cem\u003eupdate\u003c/em\u003e state, we need to use the \u003cem\u003esetter function\u003c/em\u003e returned by calling \u003ccode\u003euseState\u003c/code\u003e. We also need to determine what triggers that update. In our case it's the button being clicked.\u003c/p\u003e\n\u003cp\u003eLet's start by adding an \u003ccode\u003eonClick\u003c/code\u003e handler to the button:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;button onClick={handleClick}\u0026gt;{isOn ? \"ON\" : \"OFF\"}\u0026lt;/button\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, let's set up the \u003ccode\u003ehandleClick\u003c/code\u003e callback function, and update state. Here, we must call the \u003cem\u003esetter function\u003c/em\u003e to update our state variable. Trying to update the variable won't have any effect (even if we changed our variable declaration to \u003ccode\u003elet\u003c/code\u003e instead of \u003ccode\u003econst\u003c/code\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet [isOn, setIsOn] = useState(false);\u003cbr\u003efunction handleClick() {\u003cbr\u003e  // updating state directly is a no-no!\u003cbr\u003e  isOn = !isOn;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo the way we should update state looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction handleClick() {\u003cbr\u003e  setIsOn((isOn) =\u0026gt; !isOn);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll together, here's our updated component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Toggle() {\u003cbr\u003e  const [isOn, setIsOn] = useState(false);\u003cbr\u003e\u003cbr\u003e  function handleClick() {\u003cbr\u003e    setIsOn((isOn) =\u0026gt; !isOn);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return \u0026lt;button onClick={handleClick}\u0026gt;{isOn ? \"ON\" : \"OFF\"}\u0026lt;/button\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAdding More Features\u003c/h3\u003e\n\u003cp\u003eWith this state variable in place, let's add another feature to our button. When the button is ON, let's make the background red, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;button style={{ background: \"red\" }}\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen it's OFF, it should have a white background.\u003c/p\u003e\n\u003cp\u003eLet's go through those same questions to determine if we need to add state for this feature.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cblockquote\u003eIs it passed in from a parent via props? If so, it probably isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003eCan you compute it based on any other state or props in your component? If so, it isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003eDoes it remain unchanged over time? If so, it probably isn’t state.\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn this case, we \u003cstrong\u003ecan\u003c/strong\u003e compute it based on other state in our component, so we don't need to add any \u003cem\u003enew\u003c/em\u003e state for this feature.\u003c/p\u003e\n\u003cp\u003eWe can use that same \u003ccode\u003eisOn\u003c/code\u003e state variable, along with some conditional rendering, to get the button to display the correct border color:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction Toggle() {\u003cbr\u003e  const [isOn, setIsOn] = useState(false);\u003cbr\u003e\u003cbr\u003e  function handleClick() {\u003cbr\u003e    setIsOn((isOn) =\u0026gt; !isOn);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  const color = isOn ? \"red\" : \"white\";\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;button style={{ background: color }} onClick={handleClick}\u0026gt;\u003cbr\u003e      {isOn ? \"ON\" : \"OFF\"}\u003cbr\u003e    \u0026lt;/button\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThinking like a React developer involves making a lot of decisions about how to structure your components, particularly when it comes to \u003cstrong\u003eprops\u003c/strong\u003e and \u003cstrong\u003estate\u003c/strong\u003e. Now that you've seen the process and some common patterns for working with state, it's up to you to apply these decisions to your own components moving forward.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-state.html\"\u003eThe useState hook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\"\u003eProps vs. State\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state\"\u003eThinking in React\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb1f806bb9430476cb9cc495f59446aa3","title":"React State Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state-and-events-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-and-events-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-and-events-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn the labs for this section, we'll be working on a grocery list app. Some of this app is already built out using static versions of the components. We'll be using \u003cstrong\u003estate\u003c/strong\u003e and \u003cstrong\u003eevents\u003c/strong\u003e to make our app dynamic.\u003c/p\u003e  \u003cp\u003eThe components you have to work with are in the \u003ccode\u003esrc/components\u003c/code\u003e folder. Start by examining these components and draw out your component hierarchy to see how data can be passed from one component to another.\u003c/p\u003e  \u003cp\u003eIn this lab, you'll update state and get more practice with the \u003ccode\u003euseState\u003c/code\u003e hook.\u003c/p\u003e  \u003cp\u003eIt's recommended that you run \u003ccode\u003enpm start\u003c/code\u003e and work on this in the browser \u003cstrong\u003ebefore\u003c/strong\u003e running tests. Try to get your app to match the demo! Once you've built out the components below, run \u003ccode\u003enpm test\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e to see if your code passes the tests.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003ch3\u003eDark Mode Toggle\u003c/h3\u003e  \u003cp\u003eIn the \u003ccode\u003eApp\u003c/code\u003e component, there is a button for toggling between dark mode and light mode. Using the \u003ccode\u003euseState\u003c/code\u003e hook, create a state variable in the \u003ccode\u003eApp\u003c/code\u003e component. Then, use that variable to determine if our app should be in dark mode or light mode.\u003c/p\u003e  \u003cp\u003eYou will also need to add an event handler to the dark mode button, and update state when the button is clicked.\u003c/p\u003e  \u003cp\u003eThe actual functionality of changing our app's theme is handled in CSS, so all you have to do is update the \u003ccode\u003eclassName\u003c/code\u003e of this div based on your state variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div className=\"App dark\"\u0026gt;\u003cbr\u003e{/* for dark mode */}\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;div className=\"App light\"\u0026gt;\u003cbr\u003e{/* for light mode */}\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eAdd to Cart\u003c/h3\u003e  \u003cp\u003eIn the \u003ccode\u003eItem\u003c/code\u003e component, when the user clicks the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element, the item should be added to their virtual cart. The way we'll show the user that the item is in the cart is by changing the className on the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e element:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;li className=\"in-cart\"\u0026gt;\u003cbr\u003e{/* the item is in the cart */}\u003cbr\u003e\u0026lt;/li\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;li className=\"\"\u0026gt;\u003cbr\u003e{/* the item is NOT in the cart */}\u003cbr\u003e\u0026lt;/li\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNaturally, you'll also need to add state to the \u003ccode\u003eItem\u003c/code\u003e component to solve this deliverable!\u003c/p\u003e  \u003ch3\u003eFilter\u003c/h3\u003e  \u003cp\u003eIn the \u003ccode\u003eShoppingList\u003c/code\u003e component, there is a \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element that will allow us to \u003cstrong\u003efilter\u003c/strong\u003e the list of items by category.\u003c/p\u003e  \u003cp\u003eUse the \u003ccode\u003euseState\u003c/code\u003e hook to create a state variable called \u003ccode\u003eselectedCategory\u003c/code\u003e for keeping track of the selected value from this \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element. When the value of the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element is \u003cstrong\u003echanged\u003c/strong\u003e, update state.\u003c/p\u003e  \u003cp\u003eYou should also use the \u003ccode\u003eselectedCategory\u003c/code\u003e variable to determine which items to display in the shopping list. You'll need some way of \u003cstrong\u003efilter\u003c/strong\u003eing the array of items based on the \u003ccode\u003eselectedCategory\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-state.html\"\u003eReact Docs on \u003ccode\u003euseState\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc023271bb8b202b80fae69aa06bc26aa","title":"React useEffect Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-effect-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn the labs for this section, we're going to be building a trivia app! The first feature we're going to work on is the Question component.\u003c/p\u003e  \u003cp\u003eThere is some starter code for us to work with. There's a \u003ccode\u003eQuestion\u003c/code\u003e component already set up to display the question and a list of possible answers. It's also hooked up to its parent component, \u003ccode\u003eApp\u003c/code\u003e, so that it has access to all the props it needs.\u003c/p\u003e  \u003cp\u003eThe feature we're going to build out using \u003ccode\u003euseEffect\u003c/code\u003e is a \u003cstrong\u003ecountdown timer\u003c/strong\u003e, so that the user has to answer each question within 10 seconds.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eWhen the \u003ccode\u003eQuestion\u003c/code\u003e component renders, create a side effect using \u003ccode\u003euseEffect\u003c/code\u003e and use \u003ccode\u003esetTimeout\u003c/code\u003e to run a callback function after 1 second.\u003c/p\u003e  \u003cp\u003eInside the callback function for \u003ccode\u003esetTimeout\u003c/code\u003e, use the \u003ccode\u003esetTimeRemaining\u003c/code\u003e function to decrease the amount of time remaining by 1 every 1 second.\u003c/p\u003e  \u003cp\u003eWhen the \u003ccode\u003etimeRemaining\u003c/code\u003e hits 0, do the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ereset \u003ccode\u003etimeRemaining\u003c/code\u003e back to 10 seconds, so our next question will have a fresh timer; and\u003c/li\u003e \u003cli\u003ecall the \u003ccode\u003eonAnswered\u003c/code\u003e callback prop with a value of false (\u003ccode\u003eonAnswered(false)\u003c/code\u003e), to trigger some behavior in the App component.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou should \u003cem\u003ealso\u003c/em\u003e use the \u003cstrong\u003ecleanup function\u003c/strong\u003e for \u003ccode\u003euseEffect\u003c/code\u003e to clean up after the timeout function.\u003c/p\u003e  \u003cp\u003eMake sure to pay attention to any warning/error messages in the console as a result of using \u003ccode\u003euseEffect\u003c/code\u003e, and clean them up by providing any necessary \u003cem\u003edependencies\u003c/em\u003e in the second argument of \u003ccode\u003euseEffect\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you're stuck on getting the timer working, or encountering some strange behavior, make sure to check out the resources below!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-effect.html\"\u003eReact Docs on useEffect\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://upmostly.com/tutorials/settimeout-in-react-components-using-hooks\"\u003esetTimeout Using Hooks\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://overreacted.io/a-complete-guide-to-useeffect/\"\u003eA Complete Guide to useEffect\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gbbfe95e2db3e54c3abfeaadcfd0e2f88","title":"State and Events Mini Project","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-state-events-mini-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-events-mini-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-state-events-mini-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eTo build on what you've learned over the course of this section, we'll be building out a simple task list app to practice working with state and events, focusing in particular on working with arrays.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eThere is some starter code built out for all of the components you'll need. The data for the application is imported in \u003ccode\u003eApp\u003c/code\u003e, so you'll need to pass that data down to the components that need it as props.\u003c/p\u003e  \u003cp\u003eRun \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm start\u003c/code\u003e, then check out the starter code in the browser. You'll see a console message with the \u003ccode\u003eTASK\u003c/code\u003e and \u003ccode\u003eCATEGORY\u003c/code\u003e data you'll need down from \u003ccode\u003eApp\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eTaskList\u003c/h3\u003e  \u003cp\u003eFirst, we'll want to display all the tasks in our app. Display each task using the \u003ccode\u003eTask\u003c/code\u003e component. Make sure to use a \u003ccode\u003ekey\u003c/code\u003e prop!\u003c/p\u003e  \u003cp\u003eYou should also update the \u003ccode\u003eTask\u003c/code\u003e component so that it shows the text and category its task.\u003c/p\u003e  \u003ch3\u003eCategoryFilter\u003c/h3\u003e  \u003cp\u003eFirst, update this component to display \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e elements for each category (again, make sure to use a key prop). \u003cem\u003eWhen the button is clicked\u003c/em\u003e, the following should happen:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWhichever button was clicked should have a class of \u003ccode\u003eselected\u003c/code\u003e. The other buttons should not have any class assigned.\u003c/li\u003e \u003cli\u003eThe list of tasks being displayed should be filtered, so that only tasks that match the category that was clicked are displayed.\u003c/li\u003e \u003cli\u003eIf the button for \"All\" is selected, all the tasks should be displayed.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eNewTaskForm\u003c/h3\u003e  \u003cp\u003eFirst, update this component to display \u003ccode\u003e\u0026lt;option\u0026gt;\u003c/code\u003e elements for each category inside of the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element, so that the user can select a category when adding a new task.\u003c/p\u003e  \u003cp\u003eNext, update this form to be a \u003cem\u003econtrolled component\u003c/em\u003e, so that all form inputs are captured in state.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eWhen the form is submitted\u003c/em\u003e, add a new task to the list with the text and category from the form. You'll need a callback prop named \u003ccode\u003eonTaskFormSubmit\u003c/code\u003e for the tests to pass for this feature.\u003c/p\u003e  \u003ch3\u003eTask\u003c/h3\u003e  \u003cp\u003e\u003cem\u003eWhen the delete button is clicked\u003c/em\u003e, remove the task from the list!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd4d05163ac3fcdfaa14962b93e5bf70a","title":"The useEffect Hook","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-effect\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll talk about how to use side-effects in our function components with the\n\u003ccode\u003euseEffect\u003c/code\u003e hook, and how to get additional functionality in our components\nbeyond just returning JSX elements.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand side effects in programming\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003euseEffect\u003c/code\u003e hook to write side effects in components\u003c/li\u003e\n\u003cli\u003eControl when the side effects run by using a dependencies array with \u003ccode\u003euseEffect\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eReviewing What We Know\u003c/h2\u003e\n\n\u003cp\u003eHere's a quick recap of some of the key concepts we've learned about React\ncomponents:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003ecomponent\u003c/strong\u003e is a function that takes in \u003cstrong\u003eprops\u003c/strong\u003e and returns \u003cstrong\u003eJSX\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eWhen we call \u003ccode\u003eReactDOM.render\u003c/code\u003e and pass in our components, it will \u003cstrong\u003erender\u003c/strong\u003e\nall of our components by calling our component functions, passing down\nprops, and building the DOM elements out of our components' JSX\u003c/li\u003e\n\u003cli\u003eWhen a component's \u003cstrong\u003estate\u003c/strong\u003e is updated by calling the \u003ccode\u003esetState\u003c/code\u003e function,\nthat component will \u003cstrong\u003ere-render\u003c/strong\u003e, along with all of its children\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eSide Effects\u003c/h2\u003e\n\n\u003cp\u003eIn programming terms, a side effect is defined as:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; an operation, function or expression is said to have a side effect if it\n\u0026gt; modifies some state variable value(s) outside its local environment, that is\n\u0026gt; to say has an observable effect besides returning a value (the main effect) to\n\u0026gt; the invoker of the operation. — \u003ca href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)#:%7E:text=In%20computer%20science%2C%20an%20operation,the%20invoker%20of%20the%20operation.\"\u003eWikipedia on Side Effects\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ePut more simply, if we call a function and that function causes change in our\napplication \u003cem\u003eoutside of the function itself\u003c/em\u003e, it's considered to have caused a\n\u003cstrong\u003eside effect\u003c/strong\u003e. Things like making network requests, accessing data from a\ndatabase, writing to the file system, etc. are common examples of side effects\nin programming.\u003c/p\u003e\n\n\u003cp\u003eIn terms of a React component, the \u003cstrong\u003emain effect\u003c/strong\u003e of the component is to return\nsome JSX. That's been true of all of the components we've been working with! One\nof the first rules we learned about function components is that they take in\nprops, and return JSX.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eHowever\u003c/em\u003e, it's often necessary for a component to perform some \u003cstrong\u003eside effects\u003c/strong\u003e\nin addition to its main job of returning JSX. For example, we might want to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFetch some data from an API when a component loads\u003c/li\u003e\n\u003cli\u003eStart or stop a timer\u003c/li\u003e\n\u003cli\u003eManually change the DOM\u003c/li\u003e\n\u003cli\u003eGet the user's location\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn order to handle these kinds of side effects within our components, we'll need\nto use another special \u003cstrong\u003ehook\u003c/strong\u003e from React: \u003ccode\u003euseEffect\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eUsing the useEffect Hook\u003c/h2\u003e\n\n\u003cp\u003eTo use the \u003ccode\u003euseEffect\u003c/code\u003e hook, we must first import it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React, { useEffect } from \"react\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, inside our component, we call \u003ccode\u003euseEffect\u003c/code\u003e and pass in a \u003cstrong\u003ecallback\nfunction\u003c/strong\u003e to run as a \u003cstrong\u003eside effect\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  useEffect(\u003cbr\u003e    // side effect function\u003cbr\u003e    () =\u0026gt; {\u003cbr\u003e      console.log(\"useEffect called\");\u003cbr\u003e    }\u003cbr\u003e  );\u003cbr\u003e\u003cbr\u003e  console.log(\"Component rendering\");\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button\u0026gt;Click Me\u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" placeholder=\"Type away...\" /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;;\u003cbr\u003e  )\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you run the example code now, you'll see the console messages appear in this\norder:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eComponent rendering\u003c/li\u003e\n\u003cli\u003euseEffect called\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo we are now able to run some extra code as a \u003cstrong\u003eside effect\u003c/strong\u003e any time our\ncomponent is rendered.\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; By using this Hook, you tell React that your component needs to do something\n\u0026gt; after render. React will remember the function you passed (we’ll refer to it\n\u0026gt; as our “effect”), and call it later after performing the DOM updates. — \u0026gt; \u003ca href=\"https://reactjs.org/docs/hooks-effect.html\"\u003eReact docs on the useEffect hook\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's add some state into the equation, and see how that interacts with our\n\u003ccode\u003euseEffect\u003c/code\u003e hook.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e  const [text, setText] = useState(\"\");\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    console.log(\"useEffect called\");\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  console.log(\"Component rendering\");\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; setCount((count) =\u0026gt; count + 1)}\u0026gt;\u003cbr\u003e        I've been clicked {count} times\u003cbr\u003e      \u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        placeholder=\"Type away...\"\u003cbr\u003e        value={text}\u003cbr\u003e        onChange={(e) =\u0026gt; setText(e.target.value)}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTry clicking the button or typing in the input field to trigger updates in\nstate. Every time state is set, we should also see those same two console\nmessages in the same order:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eComponent rendering\u003c/li\u003e\n\u003cli\u003euseEffect called\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eBy default, \u003ccode\u003euseEffect\u003c/code\u003e will run our side effect function every time the\ncomponent re-renders\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erender -\u0026gt; useEffect\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003euseEffect Dependencies\u003c/h2\u003e\n\n\u003cp\u003eSometimes we only want to run our side effect in certain conditions. For\nexample: imagine we're using the \u003ccode\u003euseEffect\u003c/code\u003e hook to fetch some data from an\nexternal API (a common use case for \u003ccode\u003euseEffect\u003c/code\u003e). We don't want to make a\nnetwork request every time our component is updated, only the first time our\ncomponent renders. If we write a component that does just that, we'll see an\nissue:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction DogPics() {\u003cbr\u003e  const [images, setImages] = useState([]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    fetch(\"https://dog.ceo/api/breeds/image/random/3\")\u003cbr\u003e      .then((r) =\u0026gt; r.json())\u003cbr\u003e      .then((data) =\u0026gt; {\u003cbr\u003e        setImages(data.messages);\u003cbr\u003e      });\u003cbr\u003e  });\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      {images.map((image) =\u0026gt; (\u003cbr\u003e        \u0026lt;img src={image} key={image} /\u0026gt;\u003cbr\u003e      ))}\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning this code will result in an endless loop of \u003ccode\u003efetch\u003c/code\u003e requests (until the\nAPI kicks us out for hitting the rate limit 👀). We'd end up in a cycle like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erender -\u0026gt; useEffect -\u0026gt; setImages -\u0026gt; render -\u0026gt; useEffect -\u0026gt; setImages -\u0026gt; render -\u0026gt; etc...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow can we control when \u003ccode\u003euseEffect\u003c/code\u003e will run our side effect function?\u003c/p\u003e\n\n\u003cp\u003eReact gives us a way to control when the side effect will run, by passing a\nsecond argument to \u003ccode\u003euseEffect\u003c/code\u003e of a \u003cstrong\u003edependencies array\u003c/strong\u003e. In our \u003ccode\u003eApp\u003c/code\u003e\ncomponent, it looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(\u003cbr\u003e  // 1st arg: side effect (callback function)\u003cbr\u003e  () =\u0026gt; console.log(\"useEffect called\"),\u003cbr\u003e  // 2nd arg: dependencies array\u003cbr\u003e  [count]\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUpdate the \u003ccode\u003euseEffect\u003c/code\u003e function in \u003ccode\u003eApp\u003c/code\u003e as above and try running the code\nagain. Now, the side effect will only run when the \u003ccode\u003ecount\u003c/code\u003e variable changes. We\nwon't see any console messages from \u003ccode\u003euseEffect\u003c/code\u003e when typing in the input —\nwe'll only see them when clicking the button!\u003c/p\u003e\n\n\u003cp\u003eWe can also pass in an \u003cem\u003eempty\u003c/em\u003e array of dependencies as a second argument, like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  console.log(\"useEffect called\");\u003cbr\u003e}, []); // second argument is an empty array\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, the side effect will only run the \u003cem\u003efirst time\u003c/em\u003e our component renders! That same\napproach can be used to fix the infinite loop we saw in the fetch example as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  fetch(\"https://dog.ceo/api/breeds/image/random/3\")\u003cbr\u003e    .then((r) =\u0026gt; r.json())\u003cbr\u003e    .then((data) =\u0026gt; {\u003cbr\u003e      setImages(data.messages);\u003cbr\u003e    });\u003cbr\u003e}, []);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, our component rendering cycle now looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erender -\u0026gt; useEffect -\u0026gt; setImages -\u0026gt; render\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePerforming Side Effects\u003c/h2\u003e\n\n\u003cp\u003eRunning a \u003ccode\u003efetch\u003c/code\u003e request as a side effect is one great example of when you'd\nuse the \u003ccode\u003euseEffect\u003c/code\u003e and we'll explore that more in detail in the coming lessons.\nFor now, let's a couple other examples where you might use the \u003ccode\u003euseEffect\u003c/code\u003e hook.\u003c/p\u003e\n\n\u003cp\u003eOne kind of side effect we can demonstrate here is \u003cem\u003eupdating parts of the\nwebpage page outside of the React DOM tree\u003c/em\u003e. React is responsible for all the\nDOM elements rendered by our components, but there are some parts of the webpage\nthat live outside of this tree. Take, for instance, the \u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e of our page\n— this is what shows up in the browser tab, like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/learn-co-curriculum/react-hooks-use-effect/master/images/title.png\" alt=\"title\"\u003e\u003c/p\u003e\n\n\u003cp\u003eUpdating this part of the page would be considered a \u003cem\u003eside effect\u003c/em\u003e, so let's use\n\u003ccode\u003euseEffect\u003c/code\u003e to update it!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  document.title = text;\u003cbr\u003e}, [text]);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, what we're telling React is:\u003c/p\u003e\n\n\u003cp\u003e\"Hey React! When my component renders, I \u003cem\u003ealso\u003c/em\u003e want you to update the\ndocument's title. But you should only do that when the \u003ccode\u003etext\u003c/code\u003e variable changes.\"\u003c/p\u003e\n\n\u003cp\u003eLet's add another side effect, this time running a \u003ccode\u003esetTimeout\u003c/code\u003e function. We\nwant this function to \u003cem\u003ereset\u003c/em\u003e the \u003ccode\u003ecount\u003c/code\u003e variable back to 0 after 5 seconds.\nRunning a \u003ccode\u003esetTimeout\u003c/code\u003e is another example of a side effect, so once again, let's\nuse \u003ccode\u003euseEffect\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  setTimeout(() =\u0026gt; setCount(0), 5000);\u003cbr\u003e}, []);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this side effect, we're telling React:\u003c/p\u003e\n\n\u003cp\u003e\"Hey React! When my App component renders, I also want you to set this timeout\nfunction. In 5 seconds, you should update state and set the count back to 0. You\nshould only set this timeout function once, I don't want a bunch of timeouts\nrunning every time my component updates. kthxbye!\"\u003c/p\u003e\n\n\u003cp\u003eAll together, here's what our updated component looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e  const [text, setText] = useState(\"\");\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    document.title = text;\u003cbr\u003e  }, [text]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setTimeout(() =\u0026gt; setCount(0), 5000);\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  console.log(\"Component rendering\");\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; setCount((count) =\u0026gt; count + 1)}\u0026gt;\u003cbr\u003e        I've been clicked {count} times\u003cbr\u003e      \u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;input\u003cbr\u003e        type=\"text\"\u003cbr\u003e        placeholder=\"Type away...\"\u003cbr\u003e        value={text}\u003cbr\u003e        onChange={(e) =\u0026gt; setText(e.target.value)}\u003cbr\u003e      /\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExplore this code to familiarize yourself with \u003ccode\u003euseEffect\u003c/code\u003e, and see what changes\nby changing the dependencies array. It's also a good idea to add some console\nmessages or put in a debugger to see exactly when the side effects will run.\u003c/p\u003e\n\n\u003ch2\u003euseEffect Dependencies Cheatsheet\u003c/h2\u003e\n\n\u003cp\u003eHere's a quick guide on how to use the second argument of \u003ccode\u003euseEffect\u003c/code\u003e to control\nwhen your side effect code will run:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003euseEffect(() =\u0026gt; {})\u003c/code\u003e: No dependencies array\n\n\u003cul\u003e\n\u003cli\u003eRun the side effect \u003cstrong\u003eevery time our component renders\u003c/strong\u003e (whenever state or\nprops change)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003euseEffect(() =\u0026gt; {}, [])\u003c/code\u003e: Empty dependencies array\n\n\u003cul\u003e\n\u003cli\u003eRun the side effect \u003cstrong\u003eonly the first time our component renders\u003c/strong\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003euseEffect(() =\u0026gt; {}, [variable1, variable2])\u003c/code\u003e: Dependencies array with elements in it\n\n\u003cul\u003e\n\u003cli\u003eRun the side effect \u003cstrong\u003eany time the variable(s) change\u003c/strong\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've been working with components solely for rendering to the DOM based\non JSX, and updating based on changes to state. It's also useful to introduce\n\u003cstrong\u003eside effects\u003c/strong\u003e to our components so that we can interact with the world outside\nof the React DOM tree and do things like making network requests or setting\ntimers.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-effect.html\"\u003eReact Docs on useEffect\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://overreacted.io/a-complete-guide-to-useeffect/\"\u003eA Complete Guide to useEffect\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga2449b498a187efee9140036c6d231a2","title":"The useEffect Hook - Cleaning Up","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-effect-cleanup\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect-cleanup\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-effect-cleanup/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn the last lesson, we saw how to run functions as \u003cstrong\u003eside effects\u003c/strong\u003e of rendering our components by using the \u003ccode\u003euseEffect\u003c/code\u003e hook. Here, we'll discuss best practices when it comes to cleaning up after those functions so we don't have unnecessary code running in the background when we no longer need it.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eReturn a cleanup function from our callback in the \u003ccode\u003euseEffect\u003c/code\u003e hook\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003euseEffect Cleanup\u003c/h2\u003e  \u003cp\u003eWhen using the \u003ccode\u003euseEffect\u003c/code\u003e hook in a component, you might end up with some long-running code that you no longer need once the component is removed from the page. Here's an example of a component that runs a timer in the background continuously:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clock() {\u003cbr\u003e  const [time, setTime] = useState(new Date());\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    setInterval(() =\u0026gt; {\u003cbr\u003e      setTime(new Date());\u003cbr\u003e    }, 1000);\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div\u0026gt;{time.toString()}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the component first renders, the \u003ccode\u003euseEffect\u003c/code\u003e hook will run and create an interval. That interval will run every 1 second in the background, and set the time.\u003c/p\u003e  \u003cp\u003eWe could use this Clock component like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction App() {\u003cbr\u003e  const [showClock, setShowClock] = useState(true);\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      {showClock ? \u0026lt;Clock /\u0026gt; : null}\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; setShowClock(!showClock)}\u0026gt;Toggle Clock\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the button is clicked, we want to remove the clock from the DOM. That \u003cem\u003ealso\u003c/em\u003e means we should stop the \u003ccode\u003esetInterval\u003c/code\u003e from running in the background. We need some way of cleaning up our side effect when the component is no longer needed!\u003c/p\u003e  \u003cp\u003eTo demonstrate the issue, try clicking the \"Toggle Clock\" button — you'll likely see a warning message like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eindex.js:1 Warning: Can't perform a React state update on an unmounted\u003cbr\u003ecomponent. This is a no-op, but it indicates a memory leak in your application.\u003cbr\u003eTo fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup\u003cbr\u003efunction. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe reason for this message is that even after removing our \u003ccode\u003eClock\u003c/code\u003e component from the DOM, the \u003ccode\u003esetInterval\u003c/code\u003e function we called in \u003ccode\u003euseEffect\u003c/code\u003e is \u003cstrong\u003estill running in the background\u003c/strong\u003e, and updating state every second.\u003c/p\u003e  \u003cp\u003eReact's solution is to have our \u003ccode\u003euseEffect\u003c/code\u003e function \u003cstrong\u003ereturn a cleanup function\u003c/strong\u003e, which will run after the component \"un-mounts\": when it is removed from the DOM after its parent component no longer returns it. Here's how the cleanup function would look:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Clock() {\u003cbr\u003e  const [time, setTime] = useState(new Date());\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    const timerID = setInterval(() =\u0026gt; {\u003cbr\u003e      setTime(new Date());\u003cbr\u003e    }, 1000);\u003cbr\u003e\u003cbr\u003e    // returning a cleanup function\u003cbr\u003e    return function cleanup() {\u003cbr\u003e      clearInterval(timerID);\u003cbr\u003e    };\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  return \u0026lt;div\u0026gt;{time.toString()}\u0026lt;/div\u0026gt;;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run this app again in the browser, and click the \"Toggle Clock\" button, you'll notice we no longer get that error message. That's because we have successfully cleaned up after our interval is no longer needed by running \u003ccode\u003eclearInterval\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eCleanup functions like this are useful if you have a long-running function that you want to unsubscribe from when the component is no longer on the page. Common examples include:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea timer running via \u003ccode\u003esetInterval\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ea subscription to a web socket connection\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou don't always have to use a cleanup function as part of your \u003ccode\u003euseEffect\u003c/code\u003e code, but it's good to know what scenarios make this functionality useful.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-effect.html\"\u003eReact Docs on useEffect\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://overreacted.io/a-complete-guide-to-useeffect/\"\u003eA Complete Guide to useEffect\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gab706a61bf97cb2a797d0509556af31a","title":"The useRef Hook","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-hooks-use-ref\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-ref\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-hooks-use-ref/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll explore how to use the \u003ccode\u003euseRef\u003c/code\u003e hook and some common use cases for it. You can find starter code with the examples we'll discuss in the \u003ccode\u003esrc/components\u003c/code\u003e directory. Run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to run the example code and code along!\u003c/p\u003e  \u003ch2\u003euseRef and Ref Variables\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003euseRef\u003c/code\u003e hook gives us a way to capture a \u003cstrong\u003ereference\u003c/strong\u003e to values that are accessible across multiple renders of our component. In some ways, it's similar to the \u003ccode\u003euseState\u003c/code\u003e hook: the \u003ccode\u003euseState\u003c/code\u003e hook also lets us keep track of values across multiple renders of our component, like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useState } from \"react\";\u003cbr\u003e\u003cbr\u003efunction CounterState() {\u003cbr\u003e  const [count, setCount] = useState(0);\u003cbr\u003e\u003cbr\u003e  function handleClick() {\u003cbr\u003e    setCount((count) =\u0026gt; count + 1);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;CounterState\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;{count}\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this example, we create a \u003cstrong\u003estate variable\u003c/strong\u003e called \u003ccode\u003ecount\u003c/code\u003e that we can access the value of every time our component re-renders. Also, \u003cstrong\u003ecalling \u003ccode\u003esetCount\u003c/code\u003e will trigger a re-render\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eUsing a ref instead, our component would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useRef } from \"react\";\u003cbr\u003e\u003cbr\u003efunction CounterRef() {\u003cbr\u003e  const count = useRef(0);\u003cbr\u003e\u003cbr\u003e  function handleClick() {\u003cbr\u003e    count.current = count.current + 1;\u003cbr\u003e    console.log(count.current);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;CounterRef\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleClick}\u0026gt;{count.current}\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo break down the code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe must first import the \u003ccode\u003euseRef\u003c/code\u003e hook, just like with the other hooks we've seen\u003c/li\u003e \u003cli\u003eWe call \u003ccode\u003euseRef\u003c/code\u003e and pass in an initial value for the ref\u003c/li\u003e \u003cli\u003eCalling \u003ccode\u003euseRef\u003c/code\u003e returns a \u003cstrong\u003eref variable\u003c/strong\u003e, which is an \u003cstrong\u003eobject\u003c/strong\u003e with just one key: \u003ccode\u003ecurrent\u003c/code\u003e. It looks like this: \u003ccode\u003e{ current: 0 }\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eTo update the value of the ref, we update its \u003ccode\u003ecurrent\u003c/code\u003e property: \u003ccode\u003ecount.current = count.current + 1\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe key difference between these approaches is that in the \u003ccode\u003euseRef\u003c/code\u003e example, updating the ref variable \u003cstrong\u003edoes not cause our component to re-render\u003c/strong\u003e. It still allows us to have a variable that persists between renders of our component, but since updating its value does't trigger a re-render, we use it in different situations than when we'd use \u003ccode\u003euseState\u003c/code\u003e. You can think of this ref variable almost like an \u003cstrong\u003einstance variable\u003c/strong\u003e for your function components.\u003c/p\u003e  \u003cp\u003eLet's see some good use cases for the \u003ccode\u003euseRef\u003c/code\u003e hook.\u003c/p\u003e  \u003ch2\u003ePersisting Values Across Renders\u003c/h2\u003e  \u003cp\u003eLet's build out a price tracking component. The features of this component are:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eEvery 1 second, generate a new random price\u003c/li\u003e \u003cli\u003eIf the old price is less than the new price, use a green font color to indicate a rise in price\u003c/li\u003e \u003cli\u003eIf the old price is greater than the new price, use a red font color to indicate a drop in price\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere's some starter code that implements the first feature of generating a random price each second:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useEffect, useState } from \"react\";\u003cbr\u003eimport { makeRandomNumber } from \"../utils\";\u003cbr\u003e\u003cbr\u003efunction Ticker() {\u003cbr\u003e  const [price, setPrice] = useState(0);\u003cbr\u003e  const [color, setColor] = useState(\"black\");\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    // every 1 second, generate a new random price\u003cbr\u003e    const id = setInterval(() =\u0026gt; setPrice(makeRandomNumber), 1000);\u003cbr\u003e    return function () {\u003cbr\u003e      clearInterval(id);\u003cbr\u003e    };\u003cbr\u003e  }, []);\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;TickerMaster\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;h2 style={{ color: color }}\u0026gt;Price: ${price}\u0026lt;/h2\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat we want is a way to set the color based on the change in price between the previous render and the current render. Since we want to change the color based on the price, we can start off by writing out a side effect with the price as the dependency:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\u003cbr\u003e  // we need some way to get the prevPrice...\u003cbr\u003e  if (price \u0026gt; prevPrice) {\u003cbr\u003e    setColor(\"green\");\u003cbr\u003e  } else if (price \u0026lt; prevPrice) {\u003cbr\u003e    setColor(\"red\");\u003cbr\u003e  } else {\u003cbr\u003e    setColor(\"black\");\u003cbr\u003e  }\u003cbr\u003e}, [price]); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe still need of persisting the previous price. This is where we can use the \u003ccode\u003euseRef\u003c/code\u003e hook! Since our goal is to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAccess the same data across renders\u003c/li\u003e \u003cli\u003eNot re-render the component when saving this data\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003ccode\u003euseRef\u003c/code\u003e is a good tool for the job. Here's how we'd use it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { useEffect, useRef, useState } from \"react\";\u003cbr\u003eimport { makeRandomNumber } from \"../utils\";\u003cbr\u003e\u003cbr\u003efunction Ticker() {\u003cbr\u003e  const [price, setPrice] = useState(0);\u003cbr\u003e  const [color, setColor] = useState(\"black\");\u003cbr\u003e  // create the ref and set its initial value\u003cbr\u003e  const prevPriceRef = useRef(price);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    // use the current value of the ref\u003cbr\u003e    const prevPrice = prevPriceRef.current;\u003cbr\u003e\u003cbr\u003e    console.log({ price, prevPrice });\u003cbr\u003e\u003cbr\u003e    if (price \u0026gt; prevPrice) {\u003cbr\u003e      setColor(\"green\");\u003cbr\u003e    } else if (price \u0026lt; prevPrice) {\u003cbr\u003e      setColor(\"red\");\u003cbr\u003e    } else {\u003cbr\u003e      setColor(\"black\");\u003cbr\u003e    }\u003cbr\u003e    // set the new value of the ref (note: this doesn't trigger a re-render)\u003cbr\u003e    prevPriceRef.current = price;\u003cbr\u003e  }, [price]);\u003cbr\u003e\u003cbr\u003e  useEffect(() =\u0026gt; {\u003cbr\u003e    const id = setInterval(() =\u0026gt; setPrice(makeRandomNumber), 1000);\u003cbr\u003e    return function () {\u003cbr\u003e      clearInterval(id);\u003cbr\u003e    };\u003cbr\u003e  }, [price]);\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;TickerMaster\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;h2 style={{ color: color }}\u0026gt;Price: ${price}\u0026lt;/h2\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry using this component in the browser. Explore the component's render cycle by adding some console messages and see how the values in state and in the ref change over time.\u003c/p\u003e  \u003ch2\u003eAccessing DOM Elements\u003c/h2\u003e  \u003cp\u003eOne common use case for the \u003ccode\u003euseRef\u003c/code\u003e hook is to gain access to the actual DOM elements being created by our React components. In general, we want to give React control over the DOM based on the JSX that is returned by our components. However, sometimes it is also useful to gain access to the actual DOM elements for a few uses outside of the React rendering cycle, such as:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eusing a third-party library that needs access to a DOM element\u003c/li\u003e \u003cli\u003eaccessing input values in a non-controlled form\u003c/li\u003e \u003cli\u003esetting focus on an element\u003c/li\u003e \u003cli\u003emeasuring the size of a DOM element\u003c/li\u003e \u003cli\u003eworking with a \u003ccode\u003e\u0026lt;canvas\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e element\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eTo use a ref on a DOM element, we first create the ref using the \u003ccode\u003euseRef\u003c/code\u003e hook, just like before:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Box() {\u003cbr\u003e  const elementRef = useRef();\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;Box\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button\u0026gt;Measure\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, we can attach the ref to a DOM element by adding a special \u003ccode\u003eref\u003c/code\u003e attribute to our JSX:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Box() {\u003cbr\u003e  const elementRef = useRef();\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div ref={elementRef}\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;Box\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button\u0026gt;Measure\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we can access information about that DOM element in our component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Box() {\u003cbr\u003e  const elementRef = useRef();\u003cbr\u003e\u003cbr\u003e  function handleMeasureClick() {\u003cbr\u003e    const div = elementRef.current;\u003cbr\u003e    console.log(\"Measurements: \", div.getBoundingClientRect());\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div ref={elementRef}\u0026gt;\u003cbr\u003e      \u0026lt;h1\u0026gt;Box\u0026lt;/h1\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={handleMeasureClick}\u0026gt;Measure\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnother example of using the \u003ccode\u003euseRef\u003c/code\u003e hook to access a DOM element is in the \u003ccode\u003eTickerChart\u003c/code\u003e component. In that example, we're using a \u003ccode\u003e\u0026lt;canvas\u0026gt;\u003c/code\u003e element to draw out a graph of the price changes over time.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eLike \u003ccode\u003euseState\u003c/code\u003e, the \u003ccode\u003euseRef\u003c/code\u003e hooks gives us a variable that will persist across renders of our component. Unlike a \u003cstrong\u003estate variable\u003c/strong\u003e, when we update a \u003cstrong\u003eref variable\u003c/strong\u003e, React will not automatically re-render our component. This makes refs useful for keeping track of persistent data in our components, similar to an instance variable.\u003c/p\u003e  \u003cp\u003eA \u003cstrong\u003eref variable\u003c/strong\u003e can also be used to gain access to DOM elements.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://reactjs.org/docs/hooks-reference.html#useref\"\u003euseRef\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[{"exportId":"g60c7abef36b08553e1e2a6515ede6c57","title":"Discussion Questions: Core React Concepts","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Mod4-DQ-1\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Mod4-DQ-1\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Mod4-DQ-1/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003cp\u003eEach person in your group should take one of the following topics and explain it to the group in their own words. Be sure to provide concrete examples in your explanations. For the remaining topics, discuss them as a whole group.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eComponents\u003c/li\u003e \u003cli\u003eNode Package Manager\u003c/li\u003e \u003cli\u003eJSX\u003c/li\u003e \u003cli\u003eStatic Components vs. Dynamic Components\u003c/li\u003e \u003cli\u003eImports and Exports\u003c/li\u003e \u003cli\u003eProps\u003c/li\u003e \u003c/ul\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g4c6e4e670cd166edc57f977b83ecd660","title":"Discussion Questions: Sorting!","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"M4-DQ5-Observing-Selection-and-Insertion-Sort\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ5-Observing-Selection-and-Insertion-Sort\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ5-Observing-Selection-and-Insertion-Sort/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eSort!\u003c/h2\u003e  \u003cp\u003eAll you need to focus on is writing two sorting algorithms. One in \u003ccode\u003esorts/insertionSort.js\u003c/code\u003e and the other in \u003ccode\u003esorts/selectionSort.js\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eSelection Sort\u003c/h2\u003e  \u003cp\u003eSee this link: (\u003ca href=\"https://en.wikipedia.org/wiki/Selection_sort\"\u003ehttps://en.wikipedia.org/wiki/Selection_sort\u003c/a\u003e)   1. for every item in the collection   2. find the smallest item in the unsorted portion of the array and swap it with the current item\u003c/p\u003e  \u003ch2\u003eInsertion Sort\u003c/h2\u003e  \u003cp\u003eSee this link: \u003ca href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\u003ehttps://en.wikipedia.org/wiki/Insertion_sort\u003c/a\u003e   1. for every item in the collection    2. check if the previous item is greater than the current item   3. if greater, the current item is not in place: swap it with the previous item   4. repeat this process until the item is in the proper place   5. only then move on to the next item in the collection\u003c/p\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e to see your sorting algorithm played back to you visually in the browser:   - A red flash indicates that an array element has been \u003cem\u003ewritten\u003c/em\u003e   - A green flash indicates that an array element has been \u003cem\u003eread\u003c/em\u003e\u003c/p\u003e  \u003ch4\u003eHere is how your solution may look:\u003c/h4\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/react/example-solution-minified.gif\" alt=\"Example Solution\"\u003e\u003c/p\u003e  \u003ch3\u003eDeliverables\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eWrite insertion and selection sort in the \u003ccode\u003e./src\u003c/code\u003e directory\u003c/li\u003e \u003cli\u003eDiscuss an explanation for the different speeds of the sorts\u003c/li\u003e \u003cli\u003eUnderstanding that one visual action (either a read or write) is occurring for each array every unit of time (e.g. they have always completed the same amount of actions at any given point), discuss what this is an accurate, and inaccurate, time representation of.\u003c/li\u003e \u003cli\u003eProvide an explanation for how both changes in array sizes as well as changes in how scrambled the arrays are would affect performance for the sorting algorithms\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eTips\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eFeel free to alter the size of the arrays and duration of the steps in config.js\u003c/li\u003e \u003c/ul\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g33cb99726d27b58c87e56c4b4c68da29","title":"Discussion Questions: Props vs. State","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"props-and-state-discussion-questions\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/props-and-state-discussion-questions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/props-and-state-discussion-questions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003col\u003e \u003cli\u003eWhat is the difference between \u003cem\u003eprops\u003c/em\u003e and \u003cem\u003estate\u003c/em\u003e in React?\u003c/li\u003e \u003cli\u003eWhen would you use state instead of props?\u003c/li\u003e \u003cli\u003eAssuming \u003ccode\u003eUserDetail\u003c/code\u003e is a component, what will its \u003cem\u003eprops\u003c/em\u003e be if it's rendered as follows:\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003econst user = {name: 'Spider Man', age: 32}\u003cbr\u003e\u003cbr\u003e\u0026lt;UserDetail title=\"Profile Page\" dog=\"Fido\" user={user} /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003eTake a look at \u003ccode\u003ehttps://learn.co\u003c/code\u003e. Pretend you were going to recreate a specific page. What top level components would you have? What props would they receive and what state would they own? What components would they have as children?\u003c/li\u003e \u003c/ol\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"ge6f6d60c51d837f32840b7cfb0e62f77","title":"Danger Will Hoginson, Danger!","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"M4-DQ4-Passing-Callbacks-to-Comrade-Hogs-in-React\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ4-Passing-Callbacks-to-Comrade-Hogs-in-React\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ4-Passing-Callbacks-to-Comrade-Hogs-in-React/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch4\u003eWARNING: This lab contains potentially disrupting sounds. Please be conscious of other students around you who may not be fully immersed in the hog heaven that you are soon to be. Either use headphones OR mute your computer before starting this lab!\u003c/h4\u003e  \u003ch3\u003eOh no! Schmutziges hog GalaxySNote7 is at it again!\u003c/h3\u003e  \u003cp\u003eNo longer content grounding planes and delaying flights, this greased up hog is now stirring up trouble in the pig pen!\u003c/p\u003e  \u003cp\u003eWe know he is a filthy fellow, but which one? Rumor has it he was hanging out with Truffle Shuffle earlier, cramming his greedy little snout into the ground.\u003c/p\u003e  \u003cp\u003eFind GalaxySNote7 and help him alert his fellow hogs when someone touches his snout.\u003c/p\u003e  \u003ch3\u003eDeliverables:\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eSee the sample video stored in ./public for an idea on how to get started\u003c/li\u003e \u003cli\u003eOn click, GalaxySNote7 should trigger a change in state for the pig pen's environment\u003c/li\u003e \u003cli\u003eGalaxy and his hog cadre should react to this change in their environment and use the \u003ccode\u003eexclaim\u003c/code\u003e method to render their warnings\u003c/li\u003e \u003cli\u003eThink about what components should own what information\u003c/li\u003e \u003cli\u003eAdhere to React patterns --\u0026gt; information propagates up and down the component tree, but not sideways\u003c/li\u003e \u003cli\u003eUnderstanding this, draw out the component tree with your group. A component tree should show the components and the data (props!) that are communicated between them\u003c/li\u003e \u003cli\u003eAfter at least two seconds, things in the pig pen should cool off, and the environment should return to normal (this means we should be able to click on GalaxySNote7 again, instigating the same chain of events all over again AFTER he has cooled his jets)\u003c/li\u003e \u003cli\u003eOnce GalaxySNote7 is successfully instigating panic when he is tickled, incorporate the sounds where you see fit!\u003c/li\u003e \u003c/ul\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"ga9eb104b177e5fa002784bb3caa1b3c8","title":"Discussion Questions: Exploring Props and State Further","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-dq-props-state\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-dq-props-state\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-dq-props-state/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this program, we have three components: \u003ccode\u003eApp\u003c/code\u003e, \u003ccode\u003eMasterHog\u003c/code\u003e, and \u003ccode\u003eBabyHog\u003c/code\u003e.\u003c/p\u003e  \u003ch6\u003e\n\u003ccode\u003eMasterHog\u003c/code\u003e:\u003c/h6\u003e  \u003cul\u003e \u003cli\u003eHas an eye color that can change via a radio button on the DOM\u003c/li\u003e \u003cli\u003eRenders three \u003ccode\u003eBabyHog\u003c/code\u003es, which inherit its eye color\u003c/li\u003e \u003cli\u003eOwns the non-variable data associated with each \u003ccode\u003eBabyHog\u003c/code\u003e. This includes their: name, eye color, and hobby. \u003cem\u003e(Obviously, \u003ccode\u003eMasterHog\u003c/code\u003e gets to name her babies, and they genetically inherit her eye color. Not obviously, \u003ccode\u003eMasterHog\u003c/code\u003e also gets to determine their hobbies)\u003c/em\u003e Look inside \u003ccode\u003esrc/db.js\u003c/code\u003e to see data defining what the \u003ccode\u003eBabyHog\u003c/code\u003e offspring should \"inherit.\"\u003c/li\u003e \u003c/ul\u003e  \u003ch6\u003e\n\u003ccode\u003eBabyHog\u003c/code\u003e:\u003c/h6\u003e  \u003cul\u003e \u003cli\u003eHas an eye color received from its parent\u003c/li\u003e \u003cli\u003eHas a hobby assigned by its parent\u003c/li\u003e \u003cli\u003eHas a name given by its parent\u003c/li\u003e \u003cli\u003eHas a variable weight, that can be changed via buttons\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e While the \u003ccode\u003eMasterHog\u003c/code\u003e component can change its own eye color via radio buttons, its children can only inherit the eye color of their parent!\u003c/p\u003e  \u003ch2\u003eDirections:\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUnderstanding the data associated with both the \u003ccode\u003eMasterHog\u003c/code\u003e as well as the \u003ccode\u003eBabyHog\u003c/code\u003e components, \u003cem\u003eplan out\u003c/em\u003e what data should be kept as state vs. props in each component and then implement it\u003c/li\u003e \u003cli\u003eMake use of the \u003ccode\u003esrc/db.js\u003c/code\u003e file (import it!). Hint: arrays can be mapped and return JSX! Just because the starter code has three \u003ccode\u003eBabyHog\u003c/code\u003e components written in doesn't mean it's an ideal solution\u003c/li\u003e \u003cli\u003eDepending on the \u003ccode\u003eBabyHog\u003c/code\u003e eye color, a different image should be rendered (several are being imported in the \u003ccode\u003eBabyHog\u003c/code\u003e component)\u003c/li\u003e \u003cli\u003eWhile the \u003ccode\u003echangeWeight\u003c/code\u003e method has been implemented in \u003ccode\u003eBabyHog\u003c/code\u003e, it is not 'hooked up' to the component. Make sure the function is invoked so our hogs can grow and shrink when either of the buttons are clicked. (Consider how \u003ccode\u003eMasterHog\u003c/code\u003e's \u003ccode\u003echangeEyeColor\u003c/code\u003e method is 'hooked up' if you are stuck here)\u003c/li\u003e \u003c/ul\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g61575855e24e111e9fa98fbba2a957a3","title":"Discussion Questions: Conditional Rendering","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"M4-DQ3-Conditional-Rendering\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ3-Conditional-Rendering\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/M4-DQ3-Conditional-Rendering/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eGet together in groups and clone down this repository. For the purposes of this discussion question, you should work only out of \u003ccode\u003ecomponents/MenuBar.js\u003c/code\u003e and \u003ccode\u003econtainers/MainBox.js\u003c/code\u003e. Your end goal is to make this app function like so:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/3oFzmbfBOqAmBzA7AY/giphy.gif\" alt=\"alt text\" title=\"final\"\u003e\u003c/p\u003e  \u003cp\u003eA few things to think about:\u003c/p\u003e  \u003col\u003e \u003cli\u003eWhich component should have state?\u003c/li\u003e \u003cli\u003eBased on your answer to the question above, which component should have a method to change state?\u003c/li\u003e \u003cli\u003eWhich component should call the function that changes state?\u003c/li\u003e \u003cli\u003eWhich component is responsible for passing down props?\u003c/li\u003e \u003cli\u003eHow can state be used to manage the rendering of components and change the style of components already on the page?\u003c/li\u003e \u003c/ol\u003e ","lockAt":null,"unlockAt":null,"graded":false}],"quizzes":[],"files":null}