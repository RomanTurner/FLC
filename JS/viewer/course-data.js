window.COURSE_DATA = {"language":"en","lastDownload":"2021-07-06T11:56:05-04:00","title":"Phase 1","modules":[{"id":18918,"name":"Welcome to Phase 1","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gaa12712a2bd222e74a89f07da187eacb","items":[{"id":173424,"title":"Welcome - What To Expect In Phase 1","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-to-phase-1-js-what-to-expect\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-phase-1-js-what-to-expect\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-phase-1-js-what-to-expect/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eFirst,\u003c/h2\u003e  \u003ch3\u003eCongratulations!\u003c/h3\u003e  \u003cp\u003eWelcome to the the start of Phase 1 — our core JavaScript content! What you've done so far is no small feat. There is much more ahead, but you're well on your way!\u003c/p\u003e  \u003chr\u003e  \u003ch2\u003eThe Journey of Learning Something New\u003c/h2\u003e  \u003ch3\u003eThe Stages of Learning\u003c/h3\u003e  \u003cp\u003eYou will see below an image that illustrates the stages of learning that each of us goes through, at least when it comes to programming:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/20468684/44881320-33845480-ac7d-11e8-8a69-5e30c51ebfd9.jpg\" alt=\"alt text\" title=\"Consciousness of Competence\"\u003e\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eSTART: You don't know what the road to knowledge looks like.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eSECOND: You've learned what the road looks like, and consequently you know you're rather far from your end goal.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eTHIRD: You're working toward the goal via the road, acknowledging an increase in knowledge along the way.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eGOAL: You got to the goal and moved on to other roads, taking the knowledge with you!\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eThe Emotional Journey of Creating Anything Great\u003c/h3\u003e  \u003cp\u003eYou will see below an image that illustrates the emotional journey of creating anything great. We want you to take a look at this because there is much that you and your cohort mates can take away from it as you enter the most intensive of the five modules:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://i.imgur.com/X4QR5en.png\" alt=\"alt text\" title=\"The Emotional Journey of Creating Anything Great\"\u003e\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eThe first point we want share with you is that it is normal to feel the weight of Phase 1 (and the entire program) on your shoulders — you will not be alone in however you will be feeling. Many students are actively going through the same thing. Lean on each other! We encourage you to find others at the same place in the course as you and make time to work together towards your shared goals.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe second point we want to share with you is that you should try to be aware of where you find yourself mentally and emotionally, and should act accordingly to attempt to stay out of the dark swamp. Lean on family, and remember to have confidence in your support system. If the administrative support system available to you is not clear, talk to an instructor and a meeting can be arranged with the two of you and an administrator such as the Senior Program Manager.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003ePutting It Together\u003c/h3\u003e  \u003cp\u003eWe know JavaScript is new to most (if not all) of you. It is not unusual, when a student gets to the second step of \"The Stages of Learning\" and sees how long that road is, to feel discouraged. If you feel that happening to you, keep the above two points in mind and also keep confidence in the curriculum: it is a thoroughly crafted, thoroughly tested, and further refined system that is designed to get you ready for the workforce!\u003c/p\u003e  \u003ch3\u003ePersonal Empowerment Protocol\u003c/h3\u003e  \u003col\u003e \u003cli\u003eRead the Error\u003c/li\u003e \u003cli\u003eGoogle the Problem\u003c/li\u003e \u003cli\u003eAsk a Neighbor\u003c/li\u003e \u003cli\u003eAsk an Instructor\u003c/li\u003e \u003c/ol\u003e  \u003chr\u003e  \u003ch2\u003eThe Content\u003c/h2\u003e  \u003ch3\u003eThings to Know\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eLearning JavaScript can be difficult because it is a language with many quirks and a large vocabulary.\u003c/li\u003e \u003cli\u003eThe material for this module requires increased use of critical thinking and problem solving skills. You cannot pattern match to solve the labs.  Your priority should be drilling down and understanding the underlying concepts, not just passing the tests.\u003c/li\u003e \u003cli\u003eTest your code often! As you code, you should be regularly checking your \u003cem\u003eassumptions\u003c/em\u003e about what your code is doing against what it's actually telling the browser to do. Continually ask yourself what your code is doing and why it is doing it.\u003c/li\u003e \u003cli\u003eOne topic does not always flow into the other. This is because JavaScript has many moving parts.\u003c/li\u003e \u003cli\u003eGoing forward, \u003cstrong\u003enot all assignments will have tests\u003c/strong\u003e. There will be some that are more open-ended. These are provided to allow you to practice applying concepts without being restricted to a specific design. You will need to use your judgment to determine how much time you should spend working on this content.\u003c/li\u003e \u003c/ul\u003e  \u003chr\u003e  \u003ch2\u003eIndependence\u003c/h2\u003e  \u003cp\u003eWe want to empower you to take control of your own learning. This means learning to teach yourself how to approach new topics, debug, and find the answers to conceptual questions.\u003c/p\u003e  \u003cp\u003eFor this reason, instructors may steer you towards resources, rather than answer your questions directly. We aren’t avoiding the question; we want to see if you can read documentation and master Google-fu. These are the skills you will need in your first job!\u003c/p\u003e","exportId":"welcome-what-to-expect-in-phase-1"},{"id":178538,"title":"Blogging","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"immersive-course-logistics-maintaining-a-blog\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/immersive-course-logistics-maintaining-a-blog\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/immersive-course-logistics-maintaining-a-blog/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eDuring this course, you will be required to set up a personal technical blog, blog regularly and share some blog posts with your fellow classmates.\u003c/p\u003e  \u003cp\u003eBut don't worry! It's going to be fun. We promise.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/immersive-course-logistics/maintaining-a-blog/Image_135_CatOnComputer.jpg\" alt=\"Photo by Catherine Heath on Unsplash\"\u003e\u003c/p\u003e  \u003ch2\u003eWhy We Blog\u003c/h2\u003e  \u003cp\u003eThere are a number of very important reasons for maintaining your blog. Having a personal technical blog demonstrates that you:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eKnow your craft\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUnderstand and are passionate about your industry\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eCan communicate through writing\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAnd perhaps you can even build an audience - suggesting you’re pretty darn likeable!\u003c/p\u003e  \u003cp\u003eAll of these are important down the line (don't worry about it now!) when you are engaging in the job search.\u003c/p\u003e  \u003cp\u003eLastly, and very importantly, by blogging, you are giving back to the development community of which you are now a part. How many times over the past few weeks have you Googled something like \"iterate over nested hash ruby\" and stumbled upon someone's technical blog? Even if you haven't had that experience yet, we guarantee that over the course of the next few months, you'll follow along with some generous developers blog post to implement something like \u003ca href=\"https://medium.com/@LindaHaviv/the-beginner-s-guide-scraping-in-ruby-cheat-sheet-c4f9c26d1b8c#.kkwe918o4\"\u003eweb scraping with Ruby\u003c/a\u003e, \u003ca href=\"https://medium.com/@sherriously/switching-from-standard-bcrypt-rails-authentication-to-devise-1fd0e910bdda#.fj8ckgksq\"\u003esetting up the Devise gem in a Rails application\u003c/a\u003e or even \u003ca href=\"http://www.thegreatcodeadventure.com/lets-make-a-gem/\"\u003emaking your own gem\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eAs a beginning developer, you'll find yourself taking advantage of the many wonderful blogs out there. That's one of the great things about the tech community--it's full of people who want to learn, and who want to help others learn.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eYour\u003c/em\u003e blog is your opportunity to give back to the tech community.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eDon't assume that, because you are a beginner, you have nothing to contribute.\u003c/strong\u003e Your perspective as a beginner is immensely valuable, especially to other beginners.\u003c/p\u003e  \u003cp\u003eBelow, we'll discuss the benefits of blogging and how you can get started.\u003c/p\u003e  \u003ch2\u003eBenefits of Blogging\u003c/h2\u003e  \u003cp\u003eBlogging has many benefits for job seekers and non-seekers alike.\u003c/p\u003e  \u003cp\u003eFor starters, as a new developer, blogging allows you to reflect on what you have learned. (Aka personal development.)\u003c/p\u003e  \u003cp\u003eBlogging allows you to cement new concepts and technologies, and provides a platform in which you can go deeper into exploring those concepts.\u003c/p\u003e  \u003cp\u003eLearning to code takes lots of practice and lots of repetition. Once you complete one new challenge, you'll have to re-enact what you learned again and again, and even build on it. We've seen students write simple how-to blog posts and revisit their own posts again and again when faced with similar challenges.\u003c/p\u003e  \u003cp\u003eBlogging also sets you apart from others in the job search. When an employer sees that you have a blog, it shows you’re unique, passionate, and productive on your own time. And guess what? Hiring managers want to hire people who are passionate and driven.\u003c/p\u003e  \u003cp\u003eEven more, blogging shows a lot more than a resume does. On a resume, you simply recall your experience, accomplishments, and what skills you have. With a blog you show what you can do. It ultimately provides more information on you and your personality than a resume alone.\u003c/p\u003e  \u003cp\u003eAside from standing out to employers, maintaining a blog keeps you sharp. It gives you the opportunity to put your skills to use. Skills like developing and designing your website to writing content.\u003c/p\u003e  \u003cp\u003eBlogging also gives you the opportunity to engage with other bloggers, and vice versa. It is a great way to engage with others and build relationships with people in your industry.\u003c/p\u003e  \u003cp\u003eBlogging is an investment in yourself. It's a space in which you can showcase what you've learned, strengthen and explore what you're learning and contribute to the larger tech community.\u003c/p\u003e  \u003cp\u003eAnd above all, it's fun! \u003cstrong\u003eDon't think that every blog post you write must be ground-breaking.\u003c/strong\u003e Your blog is your space to explore what you're learning, and keep in mind that there are a lot of beginners out there that will benefit from you sharing what you're learning at every stage of your development as a developer.\u003c/p\u003e  \u003ch2\u003eSome Short and Happy Stories About Blogging\u003c/h2\u003e  \u003cp\u003eWhile we mainly blog for our own personal growth and to give back to the community, ocassionally, blogging during coursework has led some surprising results!\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eOne former student, Tracy, maintained a technical blog while she was a student and TA at Flatiron. When Tracy applied to be a developer at Rent the Runway, her future employers checked out her \u003ca href=\"http://talum.github.io/\"\u003eawesome blog\u003c/a\u003e and liked it so much, they skipped over giving her a code challenge and advanced her to the final interview stage.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eAnother student, Steven, had their \u003ca href=\"https://codeburst.io/bottom-of-the-barrel-8ef73eff00f0\"\u003eblog post\u003c/a\u003e picked up by a Medium publication.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eOne student from 2017 received a job offer from an employer who found him \u003cem\u003ethrough his blog\u003c/em\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eWe recommend setting up your blog on an easy-to-use platform like \u003ca href=\"https://medium.com/\"\u003eMedium\u003c/a\u003e or \u003ca href=\"https://www.tumblr.com/\"\u003eTumblr\u003c/a\u003e. Setting up your blog and posting new content should be easy––reserve your effort for writing blog posts and learning to code. However, if you want a bit of an extra challenge, you can try blogging with \u003ca href=\"https://jekyllrb.com/\"\u003eJekyll\u003c/a\u003e or \u003ca href=\"http://octopress.org/\"\u003eOctopress\u003c/a\u003e. Or, if you're willing to pay a monthly fee, we recommend using \u003ca href=\"https://ghost.org/\"\u003eGhost\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eDon't hesitate to write your first blog post. Keep it simple. Pick a small topic that you're interested in exploring more, or a concept/technique/technology that you recently learned about that you'd like to cement for yourself. Something like \u003ca href=\"http://www.korenlc.com/nested-arrays-hashes-loops-in-ruby/\"\u003eNested Arrays and Hashes in Ruby\u003c/a\u003e or even something a little less technical.\u003c/p\u003e  \u003cp\u003eSoon, we'll deploy a schedule of blog posts. Every day three different students will have a completed blog post due that they will share with the class. You can expect to have one blog post due every two-and-a-half to three weeks (but don't hesitate to blog more frequently than that!)\u003c/p\u003e  \u003cp\u003eIn the meantime, for inspiration, and to get excited about blogging, you can check out the \u003ca href=\"https://flatiron-blogger.herokuapp.com/posts\"\u003ecatalogue of Flatiron Student blog posts\u003c/a\u003e (you'll be prompted to log in with your GitHub account first).\u003c/p\u003e  \u003ch2\u003eGeneral Guidelines\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eStick to programming related topics.\u003c/li\u003e \u003cli\u003eIf you are including code examples, make sure to test them and ensure there are no errors\u003c/li\u003e \u003cli\u003eDo not plagiarize\u003c/li\u003e \u003cli\u003eNo offensive material. Remember, this is a blog that you will be able to use in your future job search.\u003c/li\u003e \u003cli\u003eCiting any sources is very helpful to your readers.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDon't forget to check spelling and grammar before publishing!\u003c/p\u003e","exportId":"blogging"}]},{"id":18919,"name":"Discussion Questions","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g76b16b40af29d8468125108b87d27225","items":[{"id":173425,"title":"Discussion Questions: Arrow Functions","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"arrow-functions-discussion-questions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/arrow-functions-discussion-questions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/arrow-functions-discussion-questions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eArrow functions are a cool new feature of ES6. They introduce a different syntax and carry slightly different behavior than function expressions.  \u003c/p\u003e  \u003cp\u003eTake a look at the following code examples and return values with your table partners. Without looking anything up, see if you can deduce the differences and similarities in how arrow functions behave. \u003c/p\u003e  \u003ch3\u003eExamples\u003c/h3\u003e  \u003ch3\u003eArrow Function Shortcuts\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst playMusic = function (music) {\u003cbr\u003e  return \"Playing some \" + music\u003cbr\u003e}\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = (music) =\u0026gt; {\u003cbr\u003e  return \"Playing some \" + music\u003cbr\u003e}\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\"\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = music =\u0026gt; {\u003cbr\u003e  return \"Playing some \" + music\u003cbr\u003e}\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\"\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = music =\u0026gt; {\u003cbr\u003e  \"Playing some \" + music\u003cbr\u003e}\u003cbr\u003eplayMusic(\"Jazz\") // undefined \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = music =\u0026gt;  \"Playing some \" + music\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = music =\u0026gt;  (\u003cbr\u003e  \"Playing some \" + music\u003cbr\u003e )\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst readBooks = (book1, book2) =\u0026gt; {\u003cbr\u003e  return `I read '${book1}' and '${book2}'`\u003cbr\u003e}\u003cbr\u003ereadBooks(\"The Old Man and the Sea\", \"1984\") // \"I read 'The Old Man and the Sea' and '1984'\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst readBooks = (book1, book2) =\u0026gt;  `I read '${book1}' and '${book2}'`\u003cbr\u003ereadBooks(\"The Old Man and the Sea\", \"1984\") // \"I read 'The Old Man and the Sea' and '1984'\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst readBooks = book1, book2 =\u0026gt;  `I read '${book1}' and '${book2}'` // Syntax Error  \u003c/code\u003e\u003c/pre\u003e","exportId":"g9dcd3413bd6eda35184c560abba719de"},{"id":173426,"title":"Discussion Questions: Thinking in Types","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-thinking-in-types\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-thinking-in-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-thinking-in-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecall the datatypes in JavaScript\u003c/li\u003e \u003cli\u003eIdentify the types of different data\u003c/li\u003e \u003cli\u003eIdentify the types of input and output of functions and operators\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eJS Data Types Review Questions\u003c/h2\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eWhat are the basic data types in JavaScript? Fill in the table of types below with descriptions of the types and the operators that work on them.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eObject\u003c/code\u003e is the basic data type that we use to build other, more specialized 'types' of data. Name some of the ways that \u003ccode\u003eObject\u003c/code\u003e is used in JavaScript (e.g. what other types are really \u003ccode\u003eObject\u003c/code\u003e underneath).\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eExercise - Thinking in Types\u003c/h2\u003e  \u003cp\u003eWhen writing a function, it's often helpful to start by considering the inputs and the output. In particular, knowing the data type of the inputs and the data type of the outputs lets you know what kinds of operations are allowed on those arguments. They also hint at what the 'right' operations to do are.\u003c/p\u003e  \u003cp\u003eFor the following functions, fill in the table with the types of the inputs and the types of the outputs.\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eFunction\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003efunction addFive(number) { return number + 5}\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003efunction sum(A, B) { return A + B }\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003efunction concat(A, B) { return \"\" + A + B }\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003edocument.querySelector\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ewindow.fetch\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch3\u003e\"Shapes\" of \u003ccode\u003eObject\u003c/code\u003es\u003c/h3\u003e  \u003cp\u003eMany functions operate on \u003ccode\u003eObject\u003c/code\u003e types that need to have particular keys. In such cases, it's useful to name the 'shapes' of \u003ccode\u003eObject\u003c/code\u003e that functions expect. You might say that a 'Person' is an \u003ccode\u003eObject\u003c/code\u003e that has keys 'name' and 'age'. You might write:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// Person: {\u003cbr\u003e//  name: string,\u003cbr\u003e//  age: number,\u003cbr\u003e// } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eto represent the 'shape' of a Person.\u003c/p\u003e  \u003cp\u003eWhen you have functions like the following, you can use the shorthand to write the type of the input and output.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction getName(person) {\u003cbr\u003e  return person.name;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction getAge(person) {\u003cbr\u003e  return person.age;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction makePerson(name, age) {\u003cbr\u003e  return {\u003cbr\u003e    name: name,\u003cbr\u003e    age: age\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction birthday(person) {\u003cbr\u003e  person.age += 1;\u003cbr\u003e  return person;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// Point: {\u003cbr\u003e// x: number\u003cbr\u003e// y: number\u003cbr\u003e// name: string\u003cbr\u003e//}\u003cbr\u003e\u003cbr\u003efunction getDistance(pointA, pointB) {\u003cbr\u003e  return Math.sqrt((pointA.x - pointB.x) ** 2 + (pointA.y - pointB.y) ** 2);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFill in the table using the 'shape' shorthand\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eFunction\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetName\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetAge\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003emakePerson\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ebirthday\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetDistance\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch3\u003eFunction Signatures\u003c/h3\u003e  \u003cp\u003eIt's often conventional to write the 'signature' of a function to concisely capture the function's name, the names and types of the arguments, and the type of the return value. For the \u003ccode\u003egetDistance\u003c/code\u003e function above, the signature might be written as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// getDistance(pointA: Point, pointB: Point): number \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003e:\u003c/code\u003e is used to indicate that the type is 'about' the preciding name. In \u003ccode\u003epointA: Point\u003c/code\u003e, \u003ccode\u003epointA\u003c/code\u003e is a \u003ccode\u003ePoint\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eReading this function signature out loud, you would say\u003c/p\u003e  \u003cp\u003e\u0026gt; \u003ccode\u003egetDistance\u003c/code\u003e is a function that takes in Points pointA and pointB and returns a number.\u003c/p\u003e  \u003cp\u003eFor practice, add the function signature to the functions in the table.\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eFunction\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003cth\u003efunction signature\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetName\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetAge\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003emakePerson\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ebirthday\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetDistance\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch3\u003eOperators as 'Functions'\u003c/h3\u003e  \u003cp\u003eYou can think of many operators as if they were functions. They take in inputs and evaluate to an output.\u003c/p\u003e  \u003cp\u003eFor the following operators, fill in the types of the inputs and outputs. Following the example, try to write out a function signature, as if the operator was a function.\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eOperator\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003cth\u003efunction signature\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e*\u003c/td\u003e \u003ctd\u003enumber, number\u003c/td\u003e \u003ctd\u003enumber\u003c/td\u003e \u003ctd\u003emultiply(a: number, b: number): number\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e+ (string)\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e+ (number)\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e-\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e^\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e**\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\\\u003c/td\u003e \u003ctd\u003e\\\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u0026amp;\u0026amp;\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch3\u003eFunctions that take in functions as arguments\u003c/h3\u003e  \u003cp\u003eSome functions take in functions as arguments ('callback functions'). If those functions will be called with particular types of arguments, it's helpful to specify the type of function that will be passed in.\u003c/p\u003e  \u003cp\u003e\u0026gt; Note: you may see the word \u003ccode\u003evoid\u003c/code\u003e meaning 'this function does not return anything'\u003c/p\u003e  \u003cp\u003eFill in the rest of the table.\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eFunction\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003cth\u003efunction signature\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eEventTarget.addEventListener\u003c/code\u003e\u003c/td\u003e \u003ctd\u003estring, handler(e: Event): void\u003c/td\u003e \u003ctd\u003evoid\u003c/td\u003e \u003ctd\u003eaddEventListener(type: string, handler: function): void\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ewindow.setTimeout\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eArray.prototype.map\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eArray.prototype.find\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eArray.prototype.filter\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eArray.prototype.reduce\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e ","exportId":"gf698bad77d7abd974fb9d88a90c25e46"},{"id":173427,"title":"Discussion Questions: JS and the DOM","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-intro-to-dom-js\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-intro-to-dom-js\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-intro-to-dom-js/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview the Relationship between HTML, CSS, and JavaScript\u003c/li\u003e \u003cli\u003eDefine the DOM\u003c/li\u003e \u003cli\u003eDescribe how the DOM can be manipulated with DevTools\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eQuestions: Frontend File Setup\u003c/h2\u003e  \u003cp\u003eAnswer the following questions with your group:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow do you link a JavaScript file to an HTML document?\u003c/li\u003e \u003cli\u003eHow do you link a CSS file to an HTML document?\u003c/li\u003e \u003cli\u003eWhat are the roles of HTML, CSS, and JavaScript on a webpage?\u003c/li\u003e \u003cli\u003eWhat is the DOM? How is it related to HTML, CSS, and JavaScript?\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise: Basic Frontend File Setup\u003c/h2\u003e  \u003cp\u003eCreate the basic frontend file setup in a new folder. You should have:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ean html file \u003ccode\u003eindex.html\u003c/code\u003e with a header and a paragraph\u003c/li\u003e \u003cli\u003ea css file \u003ccode\u003estyle.css\u003c/code\u003e with a single rule changing something about the display of the elements\u003c/li\u003e \u003cli\u003ea js file \u003ccode\u003eindex.js\u003c/code\u003e with a single statement logging \"Hello, world\" to the console\u003c/li\u003e \u003cli\u003etags linking the css and the javascript into your html file\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eOpen the index.html file and verify that the CSS and JS are linked to your files and running.\u003c/p\u003e  \u003ch2\u003eGroup Exploration: Chrome DevTools\u003c/h2\u003e  \u003cp\u003eChrome's Developer Tools are powerful tools for inspecting and debugging frontend applications. With your group, explore the DevTools for your new frontend project and answer the following questions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow do you open the Developer Tools?\u003c/li\u003e \u003cli\u003eHow do you log different values from your JavaScript program to the Console tab? How do you log multiple values at once?\u003c/li\u003e \u003cli\u003eHow do you use JavaScript's \u003ccode\u003edebugger\u003c/code\u003e keyword?\u003c/li\u003e \u003cli\u003eHow do you highlight an element in the DOM from the Elements tab?\u003c/li\u003e \u003cli\u003eHow do you find the DOM representation of an element that's displayed on the page? (Hint: Check the mouse-in-square button in the top navigation bar of the DevTools)\u003c/li\u003e \u003cli\u003eHow do you change the content that appears on the page using the Elements tab?\u003c/li\u003e \u003cli\u003eWhat do each of the Elements, Console, Sources, and Network tabs show you?\u003c/li\u003e \u003c/ul\u003e ","exportId":"gc94651a032446a8b2d297e6ca8535df0"},{"id":173428,"title":"Discussion Questions: Events","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-events\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-events\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-events/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecall the different types of JavaScript Events\u003c/li\u003e \u003cli\u003eIdentify when the \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event will trigger\u003c/li\u003e \u003cli\u003eImplement a callback attached to an event handler\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise\u003c/h2\u003e  \u003cp\u003eTake a look at each of the code samples below. For each sample, work with your group to answer the following questions.\u003c/p\u003e  \u003col\u003e \u003cli\u003eWhat does each line of code do?\u003c/li\u003e \u003cli\u003eHow does this piece of code work?\u003c/li\u003e \u003cli\u003eGiven this code sample, what can you learn or describe about JavaScript\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eExample 1\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notify\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003e\u003cbr\u003econst button = document.getElementById(\"notify\")\u003cbr\u003ebutton.addEventListener('click', function(){\u003cbr\u003e  console.log(\"Printing a Message!\")\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 2\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notify\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003e\u003cbr\u003econst button = document.getElementById(\"notify\")\u003cbr\u003ebutton.addEventListener('mouseover', function(){\u003cbr\u003e  console.log(\"Printing a Message!\")\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 3\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notify\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003e\u003cbr\u003econst button = document.getElementById(\"notify\")\u003cbr\u003ebutton.addEventListener('mouseover', function(){\u003cbr\u003e  console.log(\"Printing a Message!\")\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 4\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notify\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003edocument.addEventListener(\"DOMContentLoaded\", function(){\u003cbr\u003e  const button = document.getElementById(\"notify\")\u003cbr\u003e  button.addEventListener('mouseover', function(){\u003cbr\u003e    console.log(\"Printing a Message!\")\u003cbr\u003e  })\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 5\u003c/h3\u003e  \u003cp\u003eOops. Looks like this developer made some mistakes typing. Identify the mistakes.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notifiable\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003edocument.addListenerEvent(\"DOMContentLoaded\", function(){\u003cbr\u003e  const button = document.getElementById(\"notifliable\")\u003cbr\u003e  button.addListenerEvent('click', function(){\u003cbr\u003e    console.log(\"Printing a Message!\")\u003cbr\u003e  })\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e","exportId":"g6543cad463046fd2e440bf5678d83020"},{"id":173429,"title":"Discussion Questions: ES6 Features","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-es6-features\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-es6-features\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-es6-features/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eInterpret feature documentation\u003c/li\u003e \u003cli\u003eRecognize syntactic sugar\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eES6 Feature Review Questions\u003c/h2\u003e  \u003ch3\u003eSummary of Features\u003c/h3\u003e  \u003cp\u003eRead the \u003ca href=\"https://github.com/lukehoban/es6features#readme\"\u003eSummary of ES6 Features\u003c/a\u003e\u003c/p\u003e  \u003cp\u003eAs you read, keep several running lists:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eterms and concepts you don't recognize or don't understand\u003c/li\u003e \u003cli\u003eshorthand syntax for code that you've written in the past week\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDon't feel the need to understand what all of the language features mean right now - since you have the list of features you don't understand, you can return later to read more.\u003c/p\u003e  \u003ch3\u003eComparison of ES6 Features\u003c/h3\u003e  \u003cp\u003eNext, open the explorable \u003ca href=\"http://es6-features.org\"\u003eComparison of ES6 Features\u003c/a\u003e. Each person in your group should choose one feature to explore. After 10 minutes of exploration, you'll take turns explaining the feature to your teammates. You should be able to speak to\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe syntax of the new feature\u003c/li\u003e \u003cli\u003eWhat the feature is for\u003c/li\u003e \u003cli\u003eWhat syntax the feature replaces or is a shorthand for\u003c/li\u003e \u003cli\u003eSome example uses of the feature\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eGood features to choose:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eTemplate Literals\u003c/li\u003e \u003cli\u003eScoping\u003c/li\u003e \u003cli\u003eConstants\u003c/li\u003e \u003cli\u003eExtended Parameter Handling\u003c/li\u003e \u003cli\u003eEnhanced Object Properties\u003c/li\u003e \u003cli\u003eDestructuring Assignment\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eGroup Discussion\u003c/h2\u003e  \u003col\u003e \u003cli\u003eCompare your lists of terms you don't recognize. Do you as a group have explanations for features that you did not individually?\u003c/li\u003e \u003cli\u003eFor the feature you chose, explain the feature to your group.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eFurther Reading\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://tc39.github.io/process-document/\"\u003eTC39 Process\u003c/a\u003e - how does the ECMAScript standard get updated?\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://github.com/tc39/proposals\"\u003eTC39 Proposals\u003c/a\u003e - what is the status of proposals for changes to the ECMAScript standard?\u003c/li\u003e \u003c/ul\u003e ","exportId":"g207e72228ebde0766c4f510089cbd5d2"},{"id":173430,"title":"Discussion Questions: Client-Server Communication","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-client-server-communication-ii\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-client-server-communication-ii\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-client-server-communication-ii/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain what the \u003ccode\u003efetch\u003c/code\u003e function is used for\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efetch\u003c/code\u003e to retrieve data from a server\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise\u003c/h2\u003e  \u003cp\u003eTake a look at each of the code samples below. Each example will show you some code, as well as either the return value of what is logged to the console.\u003c/p\u003e  \u003col\u003e \u003cli\u003eHow does this piece of code work?\u003c/li\u003e \u003cli\u003eWhy does the code do what it does?\u003c/li\u003e \u003cli\u003eGiven this code sample, what can you learn or describe about JavaScript\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eExample 1\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst url = \"https://data.cityofnewyork.us/api/views/p94q-8hxh\" // CityBike Data from data.gov\u003cbr\u003econst data = fetch(url)\u003cbr\u003e\u003cbr\u003econsole.log(data) // Promise\u0026nbsp;{\u0026lt;pending\u0026gt;} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 2\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst url = \"https://data.cityofnewyork.us/api/views/p94q-8hxh\" // CityBike Data from data.gov\u003cbr\u003efetch(url).then(console.log)\u003cbr\u003e// Response\u0026nbsp;{type: \"cors\", url: \"https://data.cityofnewyork.us/api/views/p94q-8hxh\", redirected: false, status: 200, ok: true,\u0026nbsp;…} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 3\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst url = \"https://data.cityofnewyork.us/api/views/p94q-8hxh\" // CityBike Data from data.gov\u003cbr\u003efetch(url)\u003cbr\u003e  .then(function(response){\u003cbr\u003e    return response.json()\u003cbr\u003e  }).then(console.log)\u003cbr\u003e// {id: \"p94q-8hxh\", name: \"Citi Bike Live Station Feed (JSON)\", attribution: \"CitiBike\", attributionLink: \"http://citibikenyc.com/stations/json\", averageRating: 0,\u0026nbsp;…}``` \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eBonus\u003c/h3\u003e  \u003cp\u003eHow would you implement a function called \u003ccode\u003egetJSON\u003c/code\u003e so that the below code works as outlined?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst url = \"https://data.cityofnewyork.us/api/views/p94q-8hxh\" // CityBike Data from data.gov\u003cbr\u003e\u003cbr\u003egetJSON(url).then(console.log)\u003cbr\u003e// {id: \"p94q-8hxh\", name: \"Citi Bike Live Station Feed (JSON)\", attribution: \"CitiBike\", attributionLink: \"http://citibikenyc.com/stations/json\", averageRating: 0,\u0026nbsp;…}`` \u003c/code\u003e\u003c/pre\u003e","exportId":"g55db90ad1462b097493e996081d9cd8a"},{"id":173431,"title":"Discussion Questions: AJAX","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ajax-discussion-question\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ajax-discussion-question\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ajax-discussion-question/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify synchronous and asynchronous code\u003c/li\u003e \u003cli\u003eDescribe the process of communicating with the server\u003c/li\u003e \u003cli\u003eProcess data successfully returned from fetch()\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise\u003c/h2\u003e  \u003ch3\u003eQuestion 1\u003c/h3\u003e  \u003cp\u003eGiven the following code list the order of console.logs:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(\"Hello\")\u003cbr\u003e\u003cbr\u003efetch('https://randomuser.me/api/')\u003cbr\u003e  .then( res =\u0026gt; res.json() )\u003cbr\u003e  .then( data =\u0026gt; {\u003cbr\u003e    console.log(\"Hi\") \u003cbr\u003e  })\u003cbr\u003e\u003cbr\u003econsole.log(\"Sup?\") \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eQuestion 2\u003c/h3\u003e  \u003cp\u003eWhen fetchData is executed what will be console logged?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction fetchData(){\u003cbr\u003e        let data = fetch('https://randomuser.me/api/')\u003cbr\u003e          .then( res =\u0026gt; res.json() )\u003cbr\u003e          .then( res =\u0026gt; res )\u003cbr\u003e        console.log(data)   \u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efetchData() \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat will be console logged when the following code is run? Why?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction fetchData(){\u003cbr\u003e        let data = fetch('https://randomuser.me/api/')\u003cbr\u003e          .then( res =\u0026gt; res.json() )\u003cbr\u003e          .then( json =\u0026gt; console.log(json) )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efetchData() \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat will be console logged when the following code is run? Why?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction fetchData(){\u003cbr\u003e        let data = fetch('https://randomuser.me/api/')\u003cbr\u003e          .then( res =\u0026gt; res.json() )\u003cbr\u003e          .then( console.log )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efetchData() \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eQuestion 3\u003c/h3\u003e  \u003cp\u003eIn your own words: what does asynchronous mean?\u003c/p\u003e  \u003ch3\u003eQuestion 4\u003c/h3\u003e  \u003cp\u003eWrite out the request and response cycle. What is its purpose? How does it work?\u003c/p\u003e  \u003ch3\u003eQuestion 5\u003c/h3\u003e  \u003cp\u003eCheck out the JSON you get from making a GET request to \u003ca href=\"https://randomuser.me/api/\"\u003ethis\u003c/a\u003e url (\u003ca href=\"https://randomuser.me/api/\"\u003ehttps://randomuser.me/api/\u003c/a\u003e).\u003c/p\u003e  \u003cp\u003eOpen up the Github repository for this reading and view the provided \u003ccode\u003esrc/index.html\u003c/code\u003e file in the browser. In \u003ccode\u003esrc/index.js\u003c/code\u003e, make an AJAX request to that url when the button is clicked and append the retrieved information to the DOM. Use the labels to append the right data in the appropriate h4's, h3's and img tags.\u003c/p\u003e ","exportId":"g3c8ec8b37903b7cea15c7d23891dce77"},{"id":173432,"title":"Discussion Questions: Execution Context","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-discussion-question-execution-context\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-discussion-question-execution-context\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-discussion-question-execution-context/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain JavaScript execution context in terms of English language patterns\u003c/li\u003e \u003cli\u003ePredict behavior of JavaScript's \u003ccode\u003ethis\u003c/code\u003e keyword\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise: Context in Language\u003c/h2\u003e  \u003cp\u003eIn conversation, we use pronouns to 'stand in' for the nouns they refer to. In order to understand sentences that take advantage of this 'language feature', speakers need to be able to infer the meaning \u003cem\u003efrom the context\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eFor the following example phrases, figure out what the \u003cstrong\u003ebolded pronoun\u003c/strong\u003e refers to:\u003c/p\u003e  \u003cp\u003e\u0026gt; 🎵 Oh, \u003cstrong\u003eI\u003c/strong\u003e just can't wait to be king! 🎵\u003c/p\u003e  \u003cp\u003e\u0026gt; All the world's a stage, and all the men and women merely players: \u003cstrong\u003ethey\u003c/strong\u003e have their exits and their entrances. [Shakespeare, As You Like It]\u003c/p\u003e  \u003cp\u003e\u0026gt; Every building is designed around the movements of people: \u003cstrong\u003ethey\u003c/strong\u003e have their exits and their entrances.\u003c/p\u003e  \u003cp\u003e\u0026gt; \u003cstrong\u003eThis\u003c/strong\u003e weekend we are going to visit Grandma\u003c/p\u003e  \u003cp\u003e\u0026gt; \"Hello, who is \u003cstrong\u003ethis\u003c/strong\u003e?\"\u003c/p\u003e  \u003ch3\u003eContext in Language Discussion Questions\u003c/h3\u003e  \u003cp\u003eIn English, you are able to follow certain (unconscious) rules to determine what a particular pronoun refers to.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eThe phrase \"\u003cstrong\u003ethey\u003c/strong\u003e have their exits and their entrances\" referred to a different \u003cstrong\u003ethey\u003c/strong\u003e in the two different sentences. What let you know what the pronoun referred to?\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWhat rules does the JavaScript engine use to infer the meaning of \u003ccode\u003ethis\u003c/code\u003e?\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u0026gt; Note: Interpreting the phrase \"Hello, who is \u003cstrong\u003ethis\u003c/strong\u003e?\" in English follows similar rules to the way the JavaScript engine determines the meaning of \u003ccode\u003ethis\u003c/code\u003e. It's based on the \u003cem\u003ecaller\u003c/em\u003e (unless another rule applies). You might keep this example in mind if you're trying to remember how JavaScript's \u003ccode\u003ethis\u003c/code\u003e rules work.\u003c/p\u003e  \u003ch2\u003ePredicting the behavior of JavaScript's \u003ccode\u003ethis\u003c/code\u003e keyword\u003c/h2\u003e  \u003cp\u003eIn your groups, for each of the following snippets, predict the output. Then, run the sample code and check if your answer was right. If you predicted wrong, try to figure out why the code behaved differently from what you expected.\u003c/p\u003e  \u003cp\u003ePay close attention - the rules aren't always what you think at first glance.\u003c/p\u003e  \u003ch3\u003eExample 1\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003evar telephone = {\u003cbr\u003e  origin: \"home phone\",\u003cbr\u003e  answer: function() {\u003cbr\u003e    console.log(`Hello, ${this.origin} called the function`);\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003etelephone.answer(); \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 2\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003evar telephone = {\u003cbr\u003e  origin: \"home phone\",\u003cbr\u003e  answer: function() {\u003cbr\u003e    console.log(`Hello, ${this.origin} called the function`);\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eanswer = telephone.answer;\u003cbr\u003eanswer(); \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 3\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003evar telephone = {\u003cbr\u003e  answer: function() {\u003cbr\u003e    console.log(`Hello, ${this.origin} called the function`);\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003evar cellphone = {\u003cbr\u003e  origin: \"cell phone\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003ecellphone.answer = telephone.answer;\u003cbr\u003ecellphone.answer(); \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 4\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003evar telephone = {\u003cbr\u003e  origin: \"home phone\",\u003cbr\u003e  answer: () =\u0026gt; {\u003cbr\u003e    console.log(`Hello, ${this.origin} called the function`);\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003etelephone.answer(); \u003c/code\u003e\u003c/pre\u003e","exportId":"gc829042d182e00111647f4ca21dda8c9"}]},{"id":18920,"name":"JavaScript Fundamentals","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g79aa04e95f2efe7e50b716539aa01777","items":[{"id":173433,"title":"Review: JavaScript Variables","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-variables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine what a variable is\u003c/li\u003e \u003cli\u003eVariable names in JavaScript\u003c/li\u003e \u003cli\u003eInitializing variables in JavaScript\u003c/li\u003e \u003cli\u003eRetrieving and changing the value of variables\u003c/li\u003e \u003cli\u003eIdentify when to use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for declaring variables\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn an earlier lesson, we talked about using the \u003cem\u003eassignment expression\u003c/em\u003e to save information into a variable. \"Saving\" to a variable allows us to \u003cem\u003estore\u003c/em\u003e a result so we can use it again later. Storing calculations to \u003cem\u003etemporary storage places\u003c/em\u003e is the heart of making efficient programs. It's a simple idea that has powerful consequences.\u003c/p\u003e  \u003ch2\u003eWhat is a Variable?\u003c/h2\u003e  \u003cp\u003eA variable is a container in which we can store values for later retrieval.\u003c/p\u003e  \u003cp\u003eImagine a box that can hold any type of data: a number, a string, etc. We take some data that we want to store, place it inside the box, and hand the box off to the JavaScript engine, which stores it in memory. All done! Our data is safely cached until we need to access it again.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/17556281/28639657-fea1930a-7216-11e7-8c38-45bc9fab96a7.gif\" alt=\"Raiders of the Lost Ark warehouse\"\u003e\u003c/p\u003e  \u003cp\u003eBut wait! When we ask for the data back, how will the JavaScript engine know \u003cem\u003ewhich\u003c/em\u003e box to retrieve? We need to assign a name to our variable —\u0026nbsp;a label for our box — so that we can use the \u003cem\u003evariable lookup expression\u003c/em\u003e to tell the engine exactly which piece of stored data we want to access.\u003c/p\u003e  \u003ch2\u003eVariable Names in JavaScript\u003c/h2\u003e  \u003cp\u003eVariable names in JavaScript can sometimes be complicated, but if you follow these three rules you'll be fine:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eStart every variable name with a lowercase letter. Variable names starting with a number are not valid.\u003c/li\u003e \u003cli\u003eDon't use spaces. If a variable name consists of multiple words, \u003ccode\u003ecamelCaseYourVariableNames\u003c/code\u003e (see the camel humps?) instead of \u003ccode\u003esnake_casing_them\u003c/code\u003e (think of the underscore as a snake that swallowed the words).\u003c/li\u003e \u003cli\u003eDon't use JavaScript \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Reserved_keywords_as_of_ECMAScript_2015\"\u003ereserved words\u003c/a\u003e or \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Future_reserved_keywords\"\u003efuture reserved words\u003c/a\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIt's important to note that case matters, so \u003ccode\u003ejavaScript\u003c/code\u003e, \u003ccode\u003ejavascript\u003c/code\u003e, \u003ccode\u003eJavaScript\u003c/code\u003e, and \u003ccode\u003eJAVASCRIPT\u003c/code\u003e are four different variables.\u003c/p\u003e  \u003ch2\u003eInitializing Variables in JavaScript\u003c/h2\u003e  \u003cp\u003eInitializing variables in JavaScript is really a two-step process: first, we \u003cem\u003edeclare\u003c/em\u003e the variable, then we \u003cem\u003eassign a value\u003c/em\u003e to it.\u003c/p\u003e  \u003cp\u003eTo declare the variable, we use either the \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e reserved word. (And, in fact, there's a third option as well: \u003ccode\u003evar\u003c/code\u003e. We'll talk about when to use each a bit later in this lesson. For now, just know that when you see \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003evar\u003c/code\u003e, those are reserved words that are used to declare a variable.)\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine sets aside a chunk of memory to store the declared variable. Then, we assign a value to that variable using the \u003cem\u003eassignment expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi = 3.14159;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can make our code a bit more efficient by packaging both initialization steps —\u0026nbsp;declaration and assignment —\u0026nbsp;in a single line of code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou will encounter cases later on where it makes sense to declare a variable without immediately assigning a value to it, but combining the two steps will work most of the time.\u003c/p\u003e  \u003ch3\u003eInitializing Multiple Variables\u003c/h3\u003e  \u003cp\u003eLet's say I needed to declare and define multiple variables. It feels like a lot to have to repeat \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e over and over again. To alleviate this pain, JavaScript allows us to initialize multiple variables in a single line of code. The variables must be separated with commas, and the entire line must end with a semicolon.\u003c/p\u003e  \u003cp\u003eLet's condense the below code into one line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5;\u003cbr\u003econst b = 2;\u003cbr\u003econst c = 3;\u003cbr\u003econst d = \"Hello\";\u003cbr\u003econst e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe above is equivalent to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5,\u003cbr\u003e      b = 2,\u003cbr\u003e      c = 3,\u003cbr\u003e      d = \"Hello\",\u003cbr\u003e      e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ewhich can be converted to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5, b = 2, c = 3, d = \"Hello\", e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eRetrieving and Changing the Value of Variables\u003c/h2\u003e  \u003cp\u003eSay we've declared a variable \u003ccode\u003epi\u003c/code\u003e and set its value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo retrieve the value of \u003ccode\u003epi\u003c/code\u003e, we use the \u003cem\u003evariable lookup expression\u003c/em\u003e, i.e., we simply type in its name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we want to change (reassign) that value, we use the \u003cem\u003eassignment expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi;\u003cbr\u003e//=\u0026gt; 3.14159\u003cbr\u003epi = 3.14;\u003cbr\u003epi;\u003cbr\u003e//=\u0026gt; 3.14; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eIdentify When to Use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for Declaring Variables\u003c/h2\u003e  \u003cp\u003eIn the past, \u003ccode\u003evar\u003c/code\u003e was the only option available in JavaScript for declaring variables. Then, in 2015, the language underwent a major revision that, among many other changes, added two new options: \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Delving into the history of JavaScript and the many changes and improvements that were made to it in 2015 is outside the scope of this lesson. However, as you're learning to code in JavaScript you may see references to \u003ccode\u003eECMAScript 2015\u003c/code\u003e, \u003ccode\u003eES2015\u003c/code\u003e, or \u003ccode\u003eES6\u003c/code\u003e. These terms are interchangeable and refer to that major revision. (ECMAScript is the \"offical\" name of JavaScript.) There are some resources listed at the end of this lesson if you're interested in learning more about \u003ccode\u003eES2015\u003c/code\u003e and the history of JavaScript.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThe addition of \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e was in response to significant problems that the use of \u003ccode\u003evar\u003c/code\u003e can cause. In particular, it can create scope issues (which is a whole other topic that you'll learn about later) that lead to unpredictable and difficult to diagnose bugs in your code. You will likely see \u003ccode\u003evar\u003c/code\u003e used a lot in legacy code and older StackOverflow posts, so it's important to be familiar with it. \u003cstrong\u003e\u003cem\u003eHowever, there is no good reason to use \u003ccode\u003evar\u003c/code\u003e to declare variables in your own code, and good reasons not to\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003elet\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe main advantage of using \u003ccode\u003elet\u003c/code\u003e for declaring a variable is that, unlike \u003ccode\u003evar\u003c/code\u003e, it will throw an error if you try to declare the same variable a second time:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003elet pi = \"the ratio between a circle's circumference and diameter\";\u003cbr\u003e//=\u0026gt; Uncaught SyntaxError: Identifier 'pi' has already been declared \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhy is this a good thing? Well, you can imagine how easy it could be, especially in a lengthy program, to accidentally reuse a variable name. Doing so can cause unpredictable behavior because the value associated with the variable in one part of the program may be changed by code in a different part of the program. These types of problems can be very difficult to track down and debug. Using \u003ccode\u003elet\u003c/code\u003e to declare your variables will reduce the likelihood of introducing such errors into your code.\u003c/p\u003e  \u003cp\u003eWhile we can't \u003cem\u003eredeclare\u003c/em\u003e a variable that is declared using \u003ccode\u003elet\u003c/code\u003e, we can still \u003cem\u003ereassign\u003c/em\u003e its value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = \"the ratio between a circle's circumference and diameter\";\u003cbr\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\"\u003cbr\u003e\u003cbr\u003epi;\u003cbr\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003e\u003ccode\u003econst\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003econst\u003c/code\u003e reserved word should be your go-to option for declaring variables in JavaScript. When you declare a variable with \u003ccode\u003econst\u003c/code\u003e, not only can it not be redeclared but it also \u003cstrong\u003e\u003cem\u003ecannot be reassigned\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = 2.71828;\u003cbr\u003e//=\u0026gt; Uncaught TypeError: Assignment to constant variable. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you (or another developer) sees that \u003ccode\u003epi\u003c/code\u003e has been declared with \u003ccode\u003econst\u003c/code\u003e, you immediately know that the variable points to the same value every other time it's referenced in the program. For variables declared with \u003ccode\u003elet\u003c/code\u003e (or \u003ccode\u003evar\u003c/code\u003e), you cannot be so sure and will have to keep track of how those variables change throughout the program. The extra information provided by \u003ccode\u003econst\u003c/code\u003e is valuable, and it comes at no extra cost to you! Just use \u003ccode\u003econst\u003c/code\u003e whenever possible and reap the benefits.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: With \u003ccode\u003elet\u003c/code\u003e, it's possible to declare a variable without assigning a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = 3.14159;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, because \u003ccode\u003econst\u003c/code\u003e doesn't allow reassignment after the variable is initialized, we \u003cstrong\u003emust\u003c/strong\u003e assign a value right away:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst pi;\u003cbr\u003e//=\u0026gt; Uncaught SyntaxError: Missing initializer in const declaration\u003cbr\u003e\u003cbr\u003econst pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003cp\u003eAs your JavaScript powers increase with experience, you'll develop a more nuanced understanding of what to use where. However, for now, this is a good rule of thumb:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003evar\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e never.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003elet\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e when you know the value of a variable will change. For example, a \u003ccode\u003ecounter\u003c/code\u003e variable that starts at \u003ccode\u003e0\u003c/code\u003e and is subsequently incremented to \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e, and so on. In the lessons on looping and iteration in JavaScript, \u003ccode\u003elet\u003c/code\u003e will have its moment in the spotlight.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003econst\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e for \u003cem\u003eevery\u003c/em\u003e other variable.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBest practice is to always declare variables with \u003ccode\u003econst\u003c/code\u003e and then, if you later realize that the value has to change over the course of your program, circle back to change it to \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe covered what a variable is, how to initialize and retrieve it, and how to assign or reassign its value. We also looked at best practices for naming variables and for when to use \u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003econst\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#Variables\"\u003eMDN —\u0026nbsp;Language basics crash course: Variables\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003eMDN —\u0026nbsp;\u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003eMDN —\u0026nbsp;\u003ccode\u003econst\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003eMDN —\u0026nbsp;\u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75\"\u003eJavaScript ES6+: \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003econst\u003c/code\u003e?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/JavaScript#History\"\u003eW3C - A Short History of JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ECMAScript#Versions\"\u003eWikipedia - ECMAScript: Versions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"review-javascript-variables"},{"id":173434,"title":"Review: Variables Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-javascript-variables-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-variables-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-variables-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice using \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e to declare variables in JavaScript\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eIn this lab we'll practice declaring and assigning values to variables. We'll also go over how to read the test document. Understanding how to read the tests can be a valuable tool in figuring out exactly what you'll need to do to complete the lab.\u003c/p\u003e  \u003ch3\u003eTests\u003c/h3\u003e  \u003cp\u003eWhen we want to run an experiment, we need to develop a hypothesis and we need to test it. In programming, we run tests to verify that programs behave the way we think they do. Tests help us identify bugs and judge how healthy our applications are.\u003c/p\u003e  \u003cp\u003eWe use tests to describe the program's behavior, just as you would in a professional coding environment, and we also use them as teaching tools. You are in charge of getting the tests to pass.\u003c/p\u003e  \u003ch3\u003eStructure\u003c/h3\u003e  \u003cp\u003eThe structure of this lab — where its files and folders are located — looks roughly like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e├── CONTRIBUTING.md\u003cbr\u003e├── LICENSE.md\u003cbr\u003e├── README.md\u003cbr\u003e├── index.js\u003cbr\u003e├── node_modules/\u003cbr\u003e├── package.json\u003cbr\u003e└── test\u003cbr\u003e    └── indexTest.js \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAll labs will more or less have the same structure. (And non-lab lessons, for that matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)\u003c/p\u003e  \u003ch3\u003eCode Along\u003c/h3\u003e  \u003cp\u003eOpen up \u003ccode\u003eindex.js\u003c/code\u003e in your text editor; you should see, well, nothing. We'll fix that soon.\u003c/p\u003e  \u003cp\u003eNow open up \u003ccode\u003etest/indexTest.js\u003c/code\u003e. Hey, there's something! What's all of this stuff doing?\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The \u003ccode\u003etest/indexTest.js\u003c/code\u003e has great info that we want to look at, but do not edit this file otherwise you may have extra difficulty passing this lab.\u003c/p\u003e  \u003cp\u003eA few lines down in the \u003ccode\u003etest/indexTest.js\u003c/code\u003e file you will see:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edescribe('index.js', function () {\u003cbr\u003e  // there's stuff in here, too\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003edescribe\u003c/code\u003e is a function provided by our test library, Mocha, and it's used to hold our tests. After the word \u003ccode\u003edescribe\u003c/code\u003e is information about our tests. Tests are used as a way to document the behavior of a function to developers. For example, the next word \u003ccode\u003edescribe\u003c/code\u003e is followed by the word \u003ccode\u003ecompanyName\u003c/code\u003e. Here the test is telling us that the tests that come afterwards will be about \u003ccode\u003ecompanyName\u003c/code\u003e. Then comes the word \u003ccode\u003eit\u003c/code\u003e, where you see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eit('is set as Scuber', function () {\u003cbr\u003e  // tests are here\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is telling us that the \u003ccode\u003ecompanyName\u003c/code\u003e should be set to \u003ccode\u003eScuber\u003c/code\u003e. Finally, filling in the missing part of the \u003ccode\u003eit\u003c/code\u003e code, we see:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eit('is set as Scuber', function () {\u003cbr\u003e  expect(companyName).to.equal('Scuber');\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis example shows that the test expects \u003ccode\u003ecompanyName\u003c/code\u003e to equal \u003ccode\u003eScuber\u003c/code\u003e. That \u003ccode\u003eexpect\u003c/code\u003e and \u003ccode\u003eto.equal\u003c/code\u003e are essentially doing the same thing as \u003ccode\u003ecompanyName == 'Scuber'\u003c/code\u003e. In other words, \u003ccode\u003eexpect(companyName).to.equal('Scuber')\u003c/code\u003e is running code that will have this first test pass if \u003ccode\u003ecompanyName\u003c/code\u003e equals \u003ccode\u003eScuber\u003c/code\u003e and fail if it does not.\u003c/p\u003e  \u003cp\u003eDon't worry too much yet if it's hard to understand what is happening inside of the \u003ccode\u003etest/indexTest.js\u003c/code\u003e file. But it's a good idea to open up the file, and gather the information that you can. We will also provide instructions in the \u003ccode\u003eREADME.md\u003c/code\u003e file that will allow you to complete the lab.\u003c/p\u003e  \u003ch2\u003eRunning the Tests\u003c/h2\u003e  \u003cp\u003eTo run the tests, type \u003ccode\u003elearn\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e in the terminal. You should now see the current status of the tests in the terminal. For the moment, all of the tests fail. Let's figure out how to get one of them passing! (The rest will be up to you.)\u003c/p\u003e  \u003cp\u003eTo get our first test to pass, we can open up our \u003ccode\u003eindex.js\u003c/code\u003e file, and write the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet companyName = 'Scuber'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run \u003ccode\u003elearn\u003c/code\u003e again, you'll see that our first test is now passing. However, the second test, which is also about \u003ccode\u003ecompanyName\u003c/code\u003e, is not yet passing. It's not passing because it expects \u003ccode\u003ecompanyName\u003c/code\u003e to be declared using a different keyword than the \u003ccode\u003elet\u003c/code\u003e keyword — it needs a keyword that is used for variables that can't be changed...\u003c/p\u003e  \u003cp\u003eContinue to work through the problems below. Keep in mind the general workflow for a lab:\u003c/p\u003e  \u003col\u003e \u003cli\u003eRun \u003ccode\u003elearn\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eRead the errors; vocalize what they're asking you to do.\u003c/li\u003e \u003cli\u003eWrite code; repeat steps 1 and 2 often until a test passes.\u003c/li\u003e \u003cli\u003eRepeat as needed until all the tests are passing.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eWorking Through the Problems\u003c/h2\u003e  \u003cp\u003eIf you open up \u003ccode\u003etest/indexTest.js\u003c/code\u003e, you will see the tasks in front of you:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ecompanyName\u003c/code\u003e — Inside the \u003ccode\u003etest/indexTest.js\u003c/code\u003e file, look at the \u003ccode\u003edescribe\u003c/code\u003e function call for the \u003ccode\u003ecompanyName\u003c/code\u003e variable. The two \u003ccode\u003eit\u003c/code\u003e function calls inside this \u003ccode\u003edescribe\u003c/code\u003e tell us the features of \u003ccode\u003ecompanyName\u003c/code\u003e we need to create. To review, in the first \u003ccode\u003eit\u003c/code\u003e function call, it says that \u003ccode\u003eit\u003c/code\u003e (companyName) \u003ccode\u003eis set as Scuber\u003c/code\u003e. In the next line, you can see that the test checks to make sure this occurs by seeing if \u003ccode\u003ecompanyName\u003c/code\u003e equals \u003ccode\u003eScuber\u003c/code\u003e. So this means that you need to go to your \u003ccode\u003eindex.js\u003c/code\u003e file and declare a variable named \u003ccode\u003ecompanyName\u003c/code\u003e and set it equal to \u003ccode\u003eScuber\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eIn the second \u003ccode\u003eit\u003c/code\u003e function call for \u003ccode\u003ecompanyName\u003c/code\u003e, it says it \u003ccode\u003eis defined as a const\u003c/code\u003e. The next line of code tests this. So you need to make sure that you are using the correct type of variable declaration such that attempting to reassign the variable throws an error.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003emostProfitableNeighborhood\u003c/code\u003e and \u003ccode\u003ecompanyCeo\u003c/code\u003e — Here we are getting more practice with declaring variables. Read the tests to see how you need to code these two variables to get the remaining tests passing.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003eMDN: Let\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003eMDN: Const\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gd4d4e32f4edfa786d18cb64fc8f3c77d"},{"id":173435,"title":"Review: Strings Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-review-strings-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-review-strings-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-review-strings-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eConcatenate strings with the \u003ccode\u003e+\u003c/code\u003e operator\u003c/li\u003e \u003cli\u003eInterpolate variables and other JavaScript expressions inside template literals\u003c/li\u003e \u003cli\u003eRead the MDN documentation on string methods and practice using a few\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eFor this lab, you've just been onboarded to the dev team working on Flatbook, the world's premier Flatiron School-based social network. At the moment, the view that our users see upon logging in is pretty generic. We'd like to improve the user experience by adding some custom greeting capabilities.\u003c/p\u003e  \u003ch2\u003eWork Through Failing Tests in a JavaScript Test Suite\u003c/h2\u003e  \u003cp\u003eTo start off, let's run the test suite with the \u003ccode\u003elearn\u003c/code\u003e command. Our code is currently failing all of the tests, but we expected that because we haven't done anything yet. Let's get to work!\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003ecurrentUser\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe first test is telling us that \u003ccode\u003ecurrentUser\u003c/code\u003e is not defined. Let's go to \u003ccode\u003eindex.js\u003c/code\u003e and write the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper'; \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Generally, when the tests ask you to define something, you want to define it exactly as indicated in the test. But in this case, you don't have to write \u003ccode\u003e'Grace Hopper'\u003c/code\u003e, because the important part is the variable name: \u003ccode\u003ecurrentUser\u003c/code\u003e.  You can use your own name, your pet's name, your favorite programmer's name — whatever you'd like.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eRerun the tests and you should see that the first one is passing.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003ewelcomeMessage\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe next failing test is similarly helpful, telling us exactly what we have to fix: \u003ccode\u003ewelcomeMessage contains \"Welcome to Flatbook, \"\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's return to \u003ccode\u003eindex.js\u003c/code\u003e and define our second variable below where we declared \u003ccode\u003ecurrentUser\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = 'Welcome to Flatbook, '; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRerun the tests; you should see a second passing test.\u003c/p\u003e  \u003cp\u003eThe third test tells us that \u003ccode\u003ewelcomeMessage\u003c/code\u003e should contain the value stored in \u003ccode\u003ecurrentUser\u003c/code\u003e. This seems like it might contradict the second test a bit, but let's try it out. Let's erase \u003ccode\u003e'Welcome to Flatbook, '\u003c/code\u003e and set \u003ccode\u003ewelcomeMessage\u003c/code\u003e equal to \u003ccode\u003ecurrentUser\u003c/code\u003e instead:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = currentUser; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we rerun the tests, we still have two passing. But now the first and third tests are passing instead of the first and second! That doesn't seem quite right.\u003c/p\u003e  \u003cp\u003eIt turns out that the tests want \u003ccode\u003ewelcomeMessage\u003c/code\u003e to include \u003cem\u003eboth\u003c/em\u003e \u003ccode\u003e'Welcome to Flatbook, '\u003c/code\u003e and the value stored in \u003ccode\u003ecurrentUser\u003c/code\u003e. Maybe we can include both of them in a single string?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = 'Welcome to Flatbook, currentUser'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we rerun the tests, we're once again passing the second test, but we're back to failing the third test. The new error message for the third test gives us a hint about what's happening:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eAssertionError: expected 'Welcome to Flatbook, currentUser' to contain 'Grace Hopper' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen JavaScript is expecting a variable to contain one thing, and it does not, that is known as an \u003ccode\u003eAssertionError\u003c/code\u003e. The test suite looked at the value stored in \u003ccode\u003ewelcomeMessage\u003c/code\u003e and expected to find the string \u003ccode\u003e'Grace Hopper'\u003c/code\u003e, which is the value stored in \u003ccode\u003ecurrentUser\u003c/code\u003e. Instead, \u003ccode\u003ewelcomeMessage\u003c/code\u003e contains the literal string \u003ccode\u003e\"currentUser\"\u003c/code\u003e. It's important to understand the distinction:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ecurrentUser\u003c/code\u003e is a \u003cem\u003evariable\u003c/em\u003e that contains a string (\u003ccode\u003e'Grace Hopper'\u003c/code\u003e in our examples).\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003e'currentUser'\u003c/code\u003e is a \u003cem\u003estring\u003c/em\u003e,\u0026nbsp;\u003cstrong\u003e\u003cem\u003enot a variable\u003c/em\u003e\u003c/strong\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe JavaScript engine sees a matching pair of single quotes (\u003ccode\u003e' '\u003c/code\u003e), creates a new string, and assumes that \u003cem\u003eeverything\u003c/em\u003e in between the matching punctuation marks is part of that string. For example, if we add quotation marks around the first line of code that we wrote, it becomes a simple string consisting of 35 characters:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof \"const currentUser = 'Grace Hopper';\";\u003cbr\u003e//=\u0026gt; \"string\"\u003cbr\u003e\u003cbr\u003e\"const currentUser = 'Grace Hopper';\".length;\u003cbr\u003e//=\u0026gt; 35\u003cbr\u003e\u003cbr\u003ecurrentUser;\u003cbr\u003e//=\u0026gt; Uncaught ReferenceError: currentUser is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs demonstrated by the last line in that snippet, because we turned our code into a string it no longer functions as JavaScript code for declaring and assigning a \u003ccode\u003ecurrentUser\u003c/code\u003e variable.\u003c/p\u003e  \u003cp\u003eSince we want \u003ccode\u003ewelcomeMessage\u003c/code\u003e to contain both \u003ccode\u003e'Welcome to Flatbook, '\u003c/code\u003e and the value stored in \u003ccode\u003ecurrentUser\u003c/code\u003e, we have two options: \u003cstrong\u003econcatenation\u003c/strong\u003e and \u003cstrong\u003einterpolation\u003c/strong\u003e.\u003c/p\u003e  \u003ch2\u003eConcatenate Strings with the \u003ccode\u003e+\u003c/code\u003e Operator\u003c/h2\u003e  \u003cp\u003eString concatenation is a way to take two strings and add one to the other, creating a single, longer string. The easiest way to concatenate strings in JavaScript is with the \u003ccode\u003e+\u003c/code\u003e operator, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"High \" + \"five!\";\u003cbr\u003e//=\u0026gt; \"High five!\"\u003cbr\u003e\u003cbr\u003e\"We\" + ' ' + `can` + \" \" + 'concat' + `enate` + \" as many strings \" + 'as our heart ' + `desires.`;\u003cbr\u003e//=\u0026gt; \"We can concatenate as many strings as our heart desires.\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince our \u003ccode\u003ecurrentUser\u003c/code\u003e variable contains a string, we can concatenate it to the end of \u003ccode\u003e'Welcome to Flatbook, '\u003c/code\u003e to dynamically create a new string based on whatever value \u003ccode\u003ecurrentUser\u003c/code\u003e contains at a given moment:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = 'Welcome to Flatbook, ' + currentUser; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we run the test suite with our updated code, we'll see both the second and third tests passing! However, before we move on, let's talk about interpolation.\u003c/p\u003e  \u003ch2\u003eInterpolate Variables and Other JavaScript Expressions Inside Template Literals\u003c/h2\u003e  \u003cp\u003eString interpolation lets us dynamically insert values in the middle of a string. To do this, we need to use \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003etemplate literals\u003c/a\u003e, which are simply strings wrapped in backticks rather than single or double quotes. Template literals enable us to interpolate the value of a variable into a string by wrapping the variable in curly braces preceded by a dollar sign: \u003ccode\u003e${yourVariable}\u003c/code\u003e. The \u003ccode\u003e${}\u003c/code\u003e, when inside backticks, tells the JavaScript engine that it needs to \u003cem\u003einterpret the value\u003c/em\u003e of \u003ccode\u003eyourVariable\u003c/code\u003e and insert that value into the string. If you forget to use the backticks and use single or double quotes instead, the dollar sign, curly braces and variable name will all be inserted into the string instead of the variable's value.\u003c/p\u003e  \u003cp\u003eUnlike string concatenation, template literals will also allow you to use multi-line strings. Wrapping the string in backticks preserves any new lines when the string is returned or output.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myString = 'template literal';\u003cbr\u003e\u003cbr\u003econst myNumber = 10;\u003cbr\u003e\u003cbr\u003econst myBoolean = false;\u003cbr\u003e\u003cbr\u003e`Saying that interpolation with ${myString}s is better than concatenation ${90 + myNumber}% of the time is simply ${myBoolean}. But it is pretty cool!\u003cbr\u003e\u003cbr\u003eBeware that new lines inside of a ${myString} will be preserved as new lines in the resulting ${typeof myString}!`;\u003cbr\u003e//=\u0026gt; \"Saying that interpolation with template literals is better than concatenation 100% of the time is simply false. But it is pretty cool!\u003cbr\u003e\u003cbr\u003e// Beware that new lines inside of a template literal will be preserved as new lines in the resulting string!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, in the example above, one of the things we interpolated into our string is an arithmetic expression: \u003ccode\u003e${90 + myNumber}\u003c/code\u003e. We aren't limited to interpolating just variables — we can use \u003cem\u003eany expression\u003c/em\u003e inside the curly braces.\u003c/p\u003e  \u003cp\u003eWhile, for most purposes, the choice of whether to use concatenation or string interpolation is primarily a matter of personal preference, JavaScript programmers tend to use string interpolation for all but the simplest of cases.\u003c/p\u003e  \u003cp\u003eLet's rewrite our \u003ccode\u003ewelcomeMessage\u003c/code\u003e to use a template literal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = `Welcome to Flatbook, ${currentUser}`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first three tests are still passing, but the fourth wants our \u003ccode\u003ewelcomeMessage\u003c/code\u003e to end with an exclamation point. The fix is as simple as adding a \u003ccode\u003e!\u003c/code\u003e as the last character in the template literal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = `Welcome to Flatbook, ${currentUser}!`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFour tests down, six to go!\u003c/p\u003e  \u003ch2\u003eRead the MDN Documentation on String Methods and Practice Using a Few\u003c/h2\u003e  \u003ch4\u003e\u003ccode\u003eexcitedWelcomeMessage\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eSometimes we get so excited when someone logs into their Flatbook account that we just want to shout out loud. We \u003cem\u003ecould\u003c/em\u003e copy over most of the code from \u003ccode\u003ewelcomeMessage\u003c/code\u003e and then change every character to its uppercase equivalent, but as developers we try not to repeat ourselves. Instead, let's use the \u003ccode\u003e.toUpperCase()\u003c/code\u003e string method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = `Welcome to Flatbook, ${currentUser}!`;\u003cbr\u003e\u003cbr\u003econst excitedWelcomeMessage = welcomeMessage.toUpperCase(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAll strings in JavaScript have access to the same set of default methods, which are common operations like changing a string and returning the new version, searching through a string for specific character(s) and returning the match, and so on. For example, we can use \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"\u003e\u003ccode\u003e.toUpperCase()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"\u003e\u003ccode\u003e.toLowerCase()\u003c/code\u003e\u003c/a\u003e on a string to make the entire string uppercase or lowercase. There are lots of other \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Methods_2\"\u003estring methods\u003c/a\u003e that you'll find useful at various points throughout your JavaScript programming career.\u003c/p\u003e  \u003cp\u003eRerun the tests; you should see the first seven tests passing. Woohoo!\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003eshortGreeting\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe mobile team at Flatbook is busy redesigning the site for smaller devices, and they're a bit concerned about how much real estate the \u003ccode\u003ewelcomeMessage\u003c/code\u003e takes up on the screen. They want us to create a shorter version that truncates the \u003ccode\u003ecurrentUser\u003c/code\u003e's name into just their first initial.\u003c/p\u003e  \u003cp\u003eIf you take a look at the first error, you'll see that the JavaScript engine is telling us that it can't find \u003ccode\u003eshortGreeting\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eshortGreeting\u003cbr\u003e  contains \"Welcome, \"\u003cbr\u003e    ReferenceError: shortGreeting is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnce we define it in \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003e\u003cbr\u003econst shortGreeting = ''; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ewe see a new error from the test suite:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eshortGreeting\u003cbr\u003e  contains \"Welcome, \"\u003cbr\u003e    AssertionError: expected '' to contain 'Welcome, ' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt expected \u003ccode\u003eshortGreeting\u003c/code\u003e to contain the string \u003ccode\u003e\"Welcome, \"\u003c/code\u003e, but \u003ccode\u003eshortGreeting\u003c/code\u003e is currently an empty string, \u003ccode\u003e''\u003c/code\u003e. We can fix that now:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003e\u003cbr\u003econst shortGreeting = 'Welcome, '; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext up is another \u003ccode\u003eAssertionError\u003c/code\u003e, this one checking that \u003ccode\u003eshortGreeting\u003c/code\u003e contains the first letter from \u003ccode\u003ecurrentUser\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eshortGreeting\u003cbr\u003e  contains the first initial of the name stored in the 'currentUser' variable\u003cbr\u003e    AssertionError: expected 'Welcome, ' to contain 'G' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo get a sense of how specific the tests are, let's start by adding the entirety of \u003ccode\u003ecurrentUser\u003c/code\u003e to \u003ccode\u003eshortGreeting\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003econst shortGreeting = `Welcome, ${currentUser}`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we changed the single quotes to backticks, which allows us to interpolate with \u003ccode\u003e${ }\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe new error reads as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eshortGreeting\u003cbr\u003e  contains the first initial of the name stored in the 'currentUser' variable\u003cbr\u003e    AssertionError: expected 'Welcome, Grace Hopper' to not contain 'race Hopper' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe test suite checks that \u003ccode\u003eshortGreeting\u003c/code\u003e contains the first character in \u003ccode\u003ecurrentUser\u003c/code\u003e (\u003ccode\u003eG\u003c/code\u003e in our example) and that it \u003cem\u003edoesn't\u003c/em\u003e contain the rest of the string (\u003ccode\u003erace Hopper\u003c/code\u003e).\u003c/p\u003e  \u003cp\u003eThere are a few different ways we could get just the first character of \u003ccode\u003ecurrentUser\u003c/code\u003e. The easiest would be to use \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Character_access\"\u003ebracket notation or the \u003ccode\u003e.charAt()\u003c/code\u003e method\u003c/a\u003e to grab the character at index \u003ccode\u003e0\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'[0];\u003cbr\u003e//=\u0026gt; \"E\"\u003cbr\u003e\u003cbr\u003e'Edsger Dijkstra'.charAt(0);\u003cbr\u003e//=\u0026gt; \"E\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, it's a good practice to make our code flexible and future-proof it a bit. What if our product team decides it would be better to shorten \u003ccode\u003ecurrentName\u003c/code\u003e to two characters instead of one? Or three characters?\u003c/p\u003e  \u003cp\u003eFor the added flexibility, we're going to use \u003ccode\u003e.slice()\u003c/code\u003e, but you can always explore the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Methods_2\"\u003eMDN documentation on string methods\u003c/a\u003e to pick out your own strategy.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eIf you take a look at the documentation for \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/a\u003e, you will see the following description:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eThe \u003cstrong\u003eslice()\u003c/strong\u003e method extracts a section of a string and returns it as a new string, without modifying the original string.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThe method takes two arguments: the index at which the extraction should begin and the index \u003cem\u003ebefore which\u003c/em\u003e it should end. When we talk about indexes of a string, we're talking about how to access specific characters at various points within the string. Recall that computers start counting with 0. Because we start at index \u003ccode\u003e0\u003c/code\u003e instead of \u003ccode\u003e1\u003c/code\u003e, the index of each character in a string is always one less than the character's place in the string. The second character is at index \u003ccode\u003e1\u003c/code\u003e, the fifth at index \u003ccode\u003e4\u003c/code\u003e, the twelfth at index \u003ccode\u003e11\u003c/code\u003e, and so on. The index of the last character is always one less than the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"\u003elength\u003c/a\u003e of the string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'.length;\u003cbr\u003e//=\u0026gt; 15\u003cbr\u003e\u003cbr\u003e'Edsger Dijkstra'[15];\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e'Edsger Dijkstra'[14];\u003cbr\u003e//=\u0026gt; \"a\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we omit both arguments, \u003ccode\u003e.slice()\u003c/code\u003e will return a full copy of the original string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'.slice();\u003cbr\u003e//=\u0026gt; \"Edsger Dijkstra\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we provide a single argument, \u003ccode\u003e.slice()\u003c/code\u003e will return a copy from that index to the end of the string. For example, to grab Dijkstra's last name, we could start the slice on index \u003ccode\u003e7\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'.slice(7);\u003cbr\u003e//=\u0026gt; \"Dijkstra\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we wanted the first three characters of Dijkstra's name, we would specify \u003ccode\u003e0\u003c/code\u003e as the first argument, the index at which to start, and \u003ccode\u003e3\u003c/code\u003e as the second argument, the index before which to end:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'.slice(0, 3);\u003cbr\u003e//=\u0026gt; \"Eds\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo satisfy our team's current specifications for \u003ccode\u003eshortGreeting\u003c/code\u003e, we need to start our slice at index \u003ccode\u003e0\u003c/code\u003e and end it before index \u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecurrentUser.slice(0, 1); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when our product team asks us to use the first two characters of \u003ccode\u003ecurrentUser\u003c/code\u003e, the change is as simple as \u003ccode\u003ecurrentUser.slice(0, 1)\u003c/code\u003e → \u003ccode\u003ecurrentUser.slice(0, 2)\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAdd an exclamation point to the end, and the entire test suite should be passing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003econst shortGreeting = `Welcome, ${currentUser.slice(0, 1)}!`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGreat work!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://webmasters.stackexchange.com/questions/8525/how-do-i-open-the-javascript-console-in-different-browsers/77337#77337\"\u003eStackExchange – How to open the JavaScript console\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003eMDN —\u0026nbsp;Template literals\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\"\u003eDRY —\u0026nbsp;Don't Repeat Yourself\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"\u003eMDN —\u0026nbsp;String — \u003ccode\u003e.length\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Character_access\"\u003eMDN —\u0026nbsp;String —\u0026nbsp;Character access\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Methods_2\"\u003eMDN —\u0026nbsp;String — Methods\u003c/a\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"\u003eMDN —\u0026nbsp;\u003ccode\u003e.toUpperCase()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"\u003eMDN —\u0026nbsp;\u003ccode\u003e.toLowerCase()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"\u003eMDN —\u0026nbsp;\u003ccode\u003e.slice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"gf2bf27ef433375bcdab6e456e9f91643"},{"id":173436,"title":"Review: Comparisons","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-comparisons-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify equality operators\u003c/li\u003e \u003cli\u003eCompare numbers using relational operators\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNow that we know what \u003cem\u003eBoolean expressions\u003c/em\u003e are we'll start learning how to create them. In this lesson we'll learn about comparison operators, which enable us to check to see if a value is what we're expecting. Follow along with the examples below in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e JavaScript includes both \u003cem\u003estrict\u003c/em\u003e and \u003cem\u003eloose\u003c/em\u003e comparison operators. When writing JavaScript, you should strongly prefer the \u003cstrong\u003estrict\u003c/strong\u003e operators. The reason for this is the loose operators will return true even if the data types aren't the same, which can result in unexpected behavior and bugs that can be difficult to track down. Even if you find you need to compare two values of different data types, you should avoid using loose operators. You will be better off converting the data type of one of the variables so they have the same type, then comparing them using a strict operator.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify equality operators\u003c/h2\u003e  \u003cp\u003eJavaScript includes four equality operators:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003estrict equality operator\u003c/strong\u003e (\u003ccode\u003e===\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003estrict inequality operator\u003c/strong\u003e (\u003ccode\u003e!==\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eloose equality operator\u003c/strong\u003e (\u003ccode\u003e==\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eloose inequality operator\u003c/strong\u003e (\u003ccode\u003e!=\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThese operators allow us to compare values and determine whether they are the same.\u003c/p\u003e  \u003ch3\u003eStrict Equality Operator \u003ccode\u003e===\u003c/code\u003e and Strict Inequality Operator \u003ccode\u003e!==\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe \u003cstrong\u003estrict equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal \u003cem\u003ewithout performing type conversions\u003c/em\u003e. Even if the values on both sides of the operator look similar (e.g., \u003ccode\u003e'42' === 42\u003c/code\u003e), the \u003ccode\u003e===\u003c/code\u003e operator will only return \u003ccode\u003etrue\u003c/code\u003e if the data types also match:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 === 42\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e42 === '42'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003etrue === 1\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e'0' === false\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003enull === undefined\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e' ' === 0\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is logical and accurate!\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003estrict inequality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are \u003cem\u003enot\u003c/em\u003e equal \u003cem\u003ewithout\u003c/em\u003e performing type conversions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9000 !== 9001\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e9001 !== '9001'\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e[] !== ''\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003eLoose Equality Operator \u003ccode\u003e==\u003c/code\u003e and Loose Inequality Operator \u003ccode\u003e!=\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe \u003cstrong\u003eloose equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 == 42\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, it will \u003cem\u003ealso\u003c/em\u003e return \u003ccode\u003etrue\u003c/code\u003e if it can perform a type conversion (e.g., changing the string \u003ccode\u003e'42'\u003c/code\u003e into the number \u003ccode\u003e42\u003c/code\u003e) that makes the two values equal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 == '42'\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003etrue == 1\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e'0' == false\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003enull == undefined\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e' ' == 0\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cstrong\u003eloose inequality operator\u003c/strong\u003e is the opposite of \u003ccode\u003e==\u003c/code\u003e. It returns \u003ccode\u003etrue\u003c/code\u003e if two values are \u003cem\u003enot\u003c/em\u003e equal, performing type conversions as necessary:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9000 != 9001\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e9001 != '9001'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e[] != ''\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is confusing and inaccurate! It makes no sense that the string \u003ccode\u003e'0'\u003c/code\u003e is equal to the boolean \u003ccode\u003efalse\u003c/code\u003e or that \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e — two \u003cstrong\u003ecompletely different\u003c/strong\u003e data types — are equivalent.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch2\u003eCompare Numbers with Relational Operators\u003c/h2\u003e  \u003cp\u003eJavaScript includes four relational operators:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003egreater than\u003c/strong\u003e (\u003ccode\u003e\u0026gt;\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003egreater than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026gt;=\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eless than\u003c/strong\u003e (\u003ccode\u003e\u0026lt;\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eless than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026lt;=\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe behavior of these operators is consistent with the meaning of the corresponding symbols in mathematics:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt; 9\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e88 \u0026gt;= 88\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e88 \u0026lt; 9\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, beware of type conversion when comparing non-numbers against numbers. For instance, when a string is compared with a number, the JavaScript engine tries to convert the string to a number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt; '9'\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the engine can't convert the string into a number, the comparison will always return \u003ccode\u003efalse\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt;= 'hello'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e88 \u0026lt;= 'hello'\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eStrings are compared with other strings lexicographically, meaning character-by-character from left-to-right. The following returns \u003ccode\u003efalse\u003c/code\u003e because the Unicode value of \u003ccode\u003e8\u003c/code\u003e, the first character in \u003ccode\u003e88\u003c/code\u003e, is less than the Unicode value of \u003ccode\u003e9\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'88' \u0026gt; '9'\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you aren't sure what data type you are going to be receiving, but you still need to compare them, make sure that you tell JavaScript to \u003ca href=\"https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/\"\u003econvert the string to a number first\u003c/a\u003e, and then compare.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Stick to comparing \u003cem\u003enumerical\u003c/em\u003e values with the relational operators and you'll be golden.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eJavaScript contains both equality and relational operators that we can use in writing code to compare two values. The resulting statements are \u003cem\u003eBoolean expressions\u003c/em\u003e — they always return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eMake sure you're using the strict equality operators whenever possible, and only comparing numerical values using the relational operators, and you'll avoid annoying errors that can be time consuming to troubleshoot!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\"\u003eComparison operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\"\u003eEquality comparisons and sameness\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://dorey.github.io/JavaScript-Equality-Table/\"\u003eJavaScript Equality Table\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://forum.freecodecamp.org/t/javascript-comparison-operators/14660\"\u003efreeCodeCamp Forum —\u0026nbsp;JavaScript Comparison Operators\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"review-comparisons"},{"id":173437,"title":"Review: Conditionals","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-review-conditionals\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-review-conditionals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-review-conditionals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview what constitutes an expression in JavaScript\u003c/li\u003e \u003cli\u003eOrganize code using block statements\u003c/li\u003e \u003cli\u003eReview the difference between truthy and falsy values\u003c/li\u003e \u003cli\u003eReview how to use conditional statements\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIf you're hungry, you make a sandwich. If the traffic light is green, you press the gas pedal. If your rent is due, then you pay your rent. This breaks down into a lot of conditional choices:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e hungry → make sandwich.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → don't make sandwich.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e light is green → press gas pedal.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → press brake pedal.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e it's the first of the month → pay rent.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → don't pay rent.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWriting code involves the same type of logic —\u0026nbsp;we only want an action to happen \u003cem\u003eif\u003c/em\u003e a certain condition is met. In the programming world, this is called \u003cstrong\u003econtrol flow\u003c/strong\u003e because, well, it helps \u003cem\u003econtrol\u003c/em\u003e the \u003cem\u003eflow\u003c/em\u003e of an application.\u003c/p\u003e  \u003cp\u003eBefore we dive into JavaScript's conditional structures, let's review a few concepts that provide the syntactic underpinnings.\u003c/p\u003e  \u003ch2\u003eReview What Constitutes an Expression in JavaScript\u003c/h2\u003e  \u003cp\u003eA JavaScript expression is \u003cstrong\u003ea unit of code that returns a value\u003c/strong\u003e. Primitive values are expressions because they resolve to a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9;\u003cbr\u003e// =\u0026gt; 9\u003cbr\u003e\u003cbr\u003e('Hello, world!');\u003cbr\u003e// =\u0026gt; \"Hello, world!\"\u003cbr\u003e\u003cbr\u003efalse;\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo are arithmetic and string operations. This code resolves to the number \u003ccode\u003e64\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e8 * 8;\u003cbr\u003e// =\u0026gt; 64 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd this resolves to the string \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Hello, ' + 'world!';\u003cbr\u003e// =\u0026gt; \"Hello, world!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDitto for comparison and assignment operations. This comparison resolves to the boolean \u003ccode\u003etrue\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2 \u0026gt; 1;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVariable declarations are NOT expressions...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst greeting = \"Hello!\";\u003cbr\u003elet answer; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...but variable assignments ARE, resolving to the assigned value (\u003ccode\u003e42\u003c/code\u003e, in this case):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eanswer = 42;\u003cbr\u003e// =\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFinally, variable lookups are also expressions, resolving to the value contained in the variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fullName = 'Ada Lovelace';\u003cbr\u003e\u003cbr\u003efullName;\u003cbr\u003e// =\u0026gt; \"Ada Lovelace\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eOrganize Code Using Block Statements\u003c/h2\u003e  \u003cp\u003eA block statement is a pair of curly braces (\u003ccode\u003e{ }\u003c/code\u003e) used to group JavaScript statements. It plays a role in conditional statements, loops, and functions.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e    ('This line is a JavaScript statement nested inside a block statement!');\u003cbr\u003e\u003cbr\u003e    // This is also a statement nested inside a block:\u003cbr\u003e    5 * 5 - 5;\u003cbr\u003e\u003cbr\u003e    // And so are these:\u003cbr\u003e    const weCan = 'group multiple statements';\u003cbr\u003e\u003cbr\u003e    const suchAs = 'these variable declarations';\u003cbr\u003e\u003cbr\u003e    const insideA = 'block statement.';\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; 20 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBlock statements return the value of the \u003cem\u003elast evaluated expression\u003c/em\u003e inside the curly braces. Remember, the variable declarations are \u003cem\u003enot\u003c/em\u003e expressions, so the value of \u003ccode\u003e5 * 5 - 5\u003c/code\u003e is returned.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The statement above \u003cem\u003eimplicitly\u003c/em\u003e returns 20 (the value returned by \u003ccode\u003e5 * 5 - 5\u003c/code\u003e, when evaluated). Functions, which we will discuss in an upcoming lesson, also contain all of their code inside curly braces, but for functions, we need to \u003cem\u003eexplicitly\u003c/em\u003e use the word \u003ccode\u003ereturn\u003c/code\u003e to tell JavaScript what we want the return value to be (if we want one at all). Just remember that the \u003cem\u003eimplicit return is something unique to block statements\u003c/em\u003e like the ones we use for \u003ccode\u003eif...else\u003c/code\u003e and loop statements.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eReview the Difference Between Truthy and Falsy Values\u003c/h2\u003e  \u003cp\u003eTruthiness and falsiness indicate what happens when the value is converted into a boolean. If, upon conversion, the value becomes \u003ccode\u003etrue\u003c/code\u003e, we say that it's a \u003cstrong\u003etruthy\u003c/strong\u003e value. If it becomes \u003ccode\u003efalse\u003c/code\u003e, we say that it's \u003cstrong\u003efalsy\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eIn JavaScript, the following values are \u003cstrong\u003efalsy\u003c/strong\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/li\u003e \u003cli\u003eAn empty string (\u003ccode\u003e''\u003c/code\u003e, \u003ccode\u003e\"\"\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cstrong\u003eEvery other value is truthy\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eTo check whether a value is truthy or falsy in our browser's JS console, we can pass it to the global \u003ccode\u003eBoolean\u003c/code\u003e object, which converts the value into its boolean equivalent:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eBoolean(false);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(null);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(undefined);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(0);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(NaN);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean('');\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(true);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean(42);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean('Hello, world!');\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean({ firstName: 'Brendan', lastName: 'Eich' });\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: \u003ccode\u003edocument.all\u003c/code\u003e is also falsy, but don't worry about it for now. (Or ever, really — it's an imperfect solution for legacy code compatibility.) Ready to put that killer new vocabulary to the test? Here we go!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eReview How to Use Conditional Statements\u003c/h2\u003e  \u003cp\u003eJavaScript includes three structures for implementing code conditionally: \u003cem\u003eif statements\u003c/em\u003e, \u003cem\u003eswitch statements\u003c/em\u003e, and \u003cem\u003eternary expressions\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003eif\u003c/code\u003e statement\u003c/h3\u003e  \u003cp\u003eTo write a basic \u003ccode\u003eif\u003c/code\u003e statement, we use the following structure:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (condition) {\u003cbr\u003e    // Block of code\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt consists of the \u003ccode\u003eif\u003c/code\u003e keyword followed by the condition to be checked in parentheses.  After that comes a \u003cem\u003eblock statement\u003c/em\u003e (more commonly called a \u003cem\u003ecode block\u003c/em\u003e): one or more JavaScript expressions or statements enclosed in \u003ccode\u003e{}\u003c/code\u003e. The \u003cem\u003ecode block\u003c/em\u003e contains the code we want to execute \u003cem\u003eif\u003c/em\u003e the condition returns a truthy value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 30;\u003cbr\u003e\u003cbr\u003elet isAdult;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the condition returns a \u003cstrong\u003efalsy\u003c/strong\u003e value, do nothing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 14;\u003cbr\u003e\u003cbr\u003elet isAdult;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eelse\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eOften we want to run one block of code when the condition returns a \u003ccode\u003etruthy\u003c/code\u003e value and a \u003cem\u003edifferent\u003c/em\u003e block of code when it returns a \u003ccode\u003efalsey\u003c/code\u003e value. To do this, we use an \u003ccode\u003eelse\u003c/code\u003e clause:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 14;\u003cbr\u003e\u003cbr\u003elet isAdult;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e} else {\u003cbr\u003e    isAdult = false;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the \u003ccode\u003eelse\u003c/code\u003e clause \u003cstrong\u003edoes not take a condition\u003c/strong\u003e — if the condition for the \u003ccode\u003eif\u003c/code\u003e returns a falsey value, we want the \u003ccode\u003eelse\u003c/code\u003e code block to run \u003cstrong\u003eno matter what\u003c/strong\u003e. This means that exactly one of the code blocks will \u003cem\u003ealways\u003c/em\u003e run.\u003c/p\u003e  \u003ch4\u003eTernary Expressions\u003c/h4\u003e  \u003cp\u003eRecall that this is the exact situation where we can use a ternary expression. Here's what the code above would look like using the ternary operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 26;\u003cbr\u003e\u003cbr\u003elet isAdult;\u003cbr\u003e\u003cbr\u003eage \u0026gt;= 18 ? (isAdult = true) : (isAdult = false);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we assign \u003ccode\u003eisAdult\u003c/code\u003e as \u003ccode\u003etrue\u003c/code\u003e if the condition returns a truthy value and as \u003ccode\u003efalse\u003c/code\u003e otherwise, exactly like the version using \u003ccode\u003eif\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eRemember that a ternary is an \u003cem\u003eexpression\u003c/em\u003e — it returns a \u003cem\u003evalue\u003c/em\u003e. What this means is that we can simplify the code above a bit and assign the \u003cem\u003eresult\u003c/em\u003e of the ternary directly to a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 26;\u003cbr\u003econst isAdult = age \u0026gt;= 18 ? true : false;\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e What is the ternary above doing? Basically, it's saying: \"when the conditional code returns \u003ccode\u003etrue\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e, and when the conditional code returns \u003ccode\u003efalse\u003c/code\u003e, return \u003ccode\u003efalse\u003c/code\u003e.\" Sounds a bit redundant, doesn't it? When the return values are \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e as in the example above, you actually don't need to use a ternary — or an \u003ccode\u003eif...else\u003c/code\u003e — at all! This is because \u003cstrong\u003e\u003cem\u003ethe conditional is an expression as well\u003c/em\u003e\u003c/strong\u003e. The return value of \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e is a \u003cem\u003eBoolean value\u003c/em\u003e (\u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e), so it can be assigned directly to our \u003ccode\u003eisAdult\u003c/code\u003e variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 6;\u003cbr\u003econst isAdult = age \u0026gt;= 18;\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e//=\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe ternary (or \u003ccode\u003eif...else\u003c/code\u003e) is only necessary if the desired return value is something other than a Boolean:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 20;\u003cbr\u003econst ageMessage = age \u0026gt;= 18 ? \"Congratulations! You're an adult!\" : \"Enjoy your childhood while it lasts!\";\u003cbr\u003e\u003cbr\u003eageMessage;\u003cbr\u003e//=\u0026gt; \"Congratulations! You're an adult!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf it helps you visualize what's going on, you can wrap the condition, the expressions, or the entire ternary in parentheses:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 17;\u003cbr\u003e\u003cbr\u003econst isAdult = (age \u0026gt;= 18) ? true : false;\u003cbr\u003e\u003cbr\u003econst canWork = (age \u0026gt;= 16) ? (1 === 1) : (1 !== 1);\u003cbr\u003e\u003cbr\u003econst canEnlist = (isAdult ? true : false);\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003ecanWork;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanEnlist;\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Be careful to not overuse the ternary operator. It's fine for slimming down a simple \u003ccode\u003eif...else\u003c/code\u003e, but be conscious of how easy your code is to understand for an outsider. Remember, you generally write code once, but it gets read (by yourself and others) \u003cstrong\u003efar\u003c/strong\u003e more than once. The ternary is often more difficult to quickly interpret than a regular old \u003ccode\u003eif...else\u003c/code\u003e, so make sure the reduction in code is worth any potential reduction in readability.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003e\u003ccode\u003eelse if\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eWe've discussed the case where our condition is \u003cem\u003ebinary\u003c/em\u003e (one code block executes if the conditional returns true and a second executes otherwise), but sometimes we need to check multiple conditions. We can handle this situation by using one or more \u003ccode\u003eelse if\u003c/code\u003e clauses.\u003c/p\u003e  \u003cp\u003eLet's say that instead of just deciding whether the passed-in \u003ccode\u003eage\u003c/code\u003e meets the criterion for \u003ccode\u003eisAdult\u003c/code\u003e, we want to add in some other examples of adulthood (in American society, at least): \u003ccode\u003ecanWork\u003c/code\u003e, \u003ccode\u003ecanEnlist\u003c/code\u003e, and \u003ccode\u003ecanDrink\u003c/code\u003e. 16-year-olds can legally work; 18-year-olds can do what 16-year-olds can do \u003cstrong\u003eplus\u003c/strong\u003e they can enlist and they are legal adults; 21-year-olds can do what 16- and 18-year-olds can do \u003cstrong\u003eplus\u003c/strong\u003e they can drink (at the federally set minimum age).\u003c/p\u003e  \u003cp\u003eHere's how we can handle that using \u003ccode\u003eelse if\u003c/code\u003e clauses:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 20;\u003cbr\u003e\u003cbr\u003elet isAdult, canWork, canEnlist, canDrink;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 21) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e    canWork = true;\u003cbr\u003e    canEnlist = true;\u003cbr\u003e    canDrink = true;\u003cbr\u003e} else if (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e    canWork = true;\u003cbr\u003e    canEnlist = true;\u003cbr\u003e} else if (age \u0026gt;= 16) {\u003cbr\u003e    canWork = true;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanWork;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanEnlist;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanDrink;\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny time you use an \u003ccode\u003eif...else if\u003c/code\u003e construction, \u003cstrong\u003eat most one code block will be executed\u003c/strong\u003e. As soon as one of the conditions returns a truthy value, the attached code block runs and the conditional statement ends. In the example above, we have not included an \u003ccode\u003eelse\u003c/code\u003e statement so, if none of the conditions is truthy, no code blocks will be run. If we had included an \u003ccode\u003eelse\u003c/code\u003e clause, exactly one code block would be run.\u003c/p\u003e  \u003ch4\u003eNested \u003ccode\u003eif\u003c/code\u003e Statements\u003c/h4\u003e  \u003cp\u003eYou may have noticed that there is some redundancy in the example above: three of the four variables appear in more than one of the conditions. In this circumstance, we can streamline our code a bit by using nested conditional statements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 17;\u003cbr\u003e\u003cbr\u003elet isAdult, canWork, canEnlist, canDrink;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 16) {\u003cbr\u003e  canWork = true;\u003cbr\u003e\u003cbr\u003e  if (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e    canEnlist = true;\u003cbr\u003e\u003cbr\u003e    if (age \u0026gt;= 21) {\u003cbr\u003e      canDrink = true;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ecanWork; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first \u003ccode\u003eif\u003c/code\u003e condition checks for the \"base level\" of adulthood (\u003ccode\u003eage \u0026gt;= 16\u003c/code\u003e), and each subsequent nested \u003ccode\u003eif\u003c/code\u003e \"adds on.\" Note that each inner \u003ccode\u003eif\u003c/code\u003e statement is nested \u003cstrong\u003einside\u003c/strong\u003e the code block of the one before. This means that the inner \u003ccode\u003eif\u003c/code\u003e statements will only execute if the outer ones are truthy. This makes sense: if age is less than 16, we're done — there's no need to check the remaining conditions because we know they have to be false as well. Otherwise JavaScript will keep checking each subsequent condition until it either comes to one that is false or finishes running all the code blocks.\u003c/p\u003e  \u003cp\u003eWhile nested \u003ccode\u003eif\u003c/code\u003es are more efficient than \u003ccode\u003eif...else if\u003c/code\u003es for handling overlapping categories, they are also more difficult to read. An \u003ccode\u003eif...else if\u003c/code\u003e construction will always work. You should consider the tradeoff of readability vs. efficiency in deciding which construction to use.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eLet's say we have a program that includes a variable containing a person's food order and we want to create a variable containing the appropriate ingredients. Using an \u003ccode\u003eif...else if\u003c/code\u003e construction, that might look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst order = 'cheeseburger';\u003cbr\u003e\u003cbr\u003elet ingredients;\u003cbr\u003eif (order === 'cheeseburger') {\u003cbr\u003e    ingredients = 'bun, burger, cheese, lettuce, tomato, onion';\u003cbr\u003e} else if (order === 'hamburger') {\u003cbr\u003e    ingredients = 'bun, burger, lettuce, tomato, onion';\u003cbr\u003e} else if (order === 'malted') {\u003cbr\u003e    ingredients = 'milk, ice cream, malted milk powder';\u003cbr\u003e} else {\u003cbr\u003e    console.log(\"Sorry, that's not on the menu right now.\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs we can see, there's quite a bit of repetition here: we always test \u003ccode\u003eorder\u003c/code\u003e and we always compare with \u003ccode\u003e===\u003c/code\u003e. This is a pretty common selection need. It's so standard that the \u003ccode\u003eswitch\u003c/code\u003e statement was created to enable us to streamline our code. Here's the \u003ccode\u003eswitch\u003c/code\u003e version of the code above:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst order = 'cheeseburger';\u003cbr\u003e\u003cbr\u003elet ingredients;\u003cbr\u003e\u003cbr\u003eswitch (order) {\u003cbr\u003e    case 'cheeseburger':\u003cbr\u003e        ingredients = 'bun, burger, cheese, lettuce, tomato, onion';\u003cbr\u003e        break;\u003cbr\u003e    case 'hamburger':\u003cbr\u003e        ingredients = 'bun, burger, lettuce, tomato, onion';\u003cbr\u003e        break;\u003cbr\u003e    case 'malted':\u003cbr\u003e        ingredients = 'milk, ice cream, malted milk powder';\u003cbr\u003e        break;\u003cbr\u003e    default:\u003cbr\u003e        console.log(\"Sorry, that's not on the menu right now.\");\u003cbr\u003e        break;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine compares the value passed in to the \u003ccode\u003eswitch\u003c/code\u003e statement (here, \u003ccode\u003eorder\u003c/code\u003e) against each of the \u003ccode\u003ecase\u003c/code\u003e values \u003cem\u003eusing strict equality\u003c/em\u003e (\u003ccode\u003e===\u003c/code\u003e). When a match is found, the statements nested under that \u003ccode\u003ecase\u003c/code\u003e are executed. In this example, by using the \u003ccode\u003eswitch\u003c/code\u003e statement, we avoid the need to repeat the \u003ccode\u003eif (order === _____)\u003c/code\u003e line for each possibility.\u003c/p\u003e  \u003cp\u003eWe can also assign the same set of statements to multiple cases. In the following example, if the \u003ccode\u003eage\u003c/code\u003e variable contains any number between \u003ccode\u003e13\u003c/code\u003e and \u003ccode\u003e19\u003c/code\u003e, the \u003ccode\u003eisTeenager\u003c/code\u003e variable will be set to \u003ccode\u003etrue\u003c/code\u003e. If it contains anything other than a number between \u003ccode\u003e13\u003c/code\u003e and \u003ccode\u003e19\u003c/code\u003e, none of our \u003ccode\u003ecase\u003c/code\u003es will hit, and it will end up at the \u003ccode\u003edefault\u003c/code\u003e, which sets \u003ccode\u003eisTeenager\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 15;\u003cbr\u003e\u003cbr\u003elet isTeenager;\u003cbr\u003e\u003cbr\u003eswitch (age) {\u003cbr\u003e    case 13:\u003cbr\u003e    case 14:\u003cbr\u003e    case 15:\u003cbr\u003e    case 16:\u003cbr\u003e    case 17:\u003cbr\u003e    case 18:\u003cbr\u003e    case 19:\u003cbr\u003e        isTeenager = true;\u003cbr\u003e        break;\u003cbr\u003e    default:\u003cbr\u003e        isTeenager = false;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e and \u003ccode\u003ebreak\u003c/code\u003e keywords are both optional in basic \u003ccode\u003eswitch\u003c/code\u003e statements, but useful. In more complicated statements, they become necessary to ensure the correct flow.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e keyword is similar to the \u003ccode\u003eelse\u003c/code\u003e clause in an \u003ccode\u003eif...else\u003c/code\u003e construction. It specifies a set of statements to run after all of the \u003ccode\u003eswitch\u003c/code\u003e statement's \u003ccode\u003ecase\u003c/code\u003es have been checked. However, it is different from an \u003ccode\u003eelse\u003c/code\u003e in that \u003cstrong\u003ethe only time it does \u003cem\u003enot\u003c/em\u003e run is if the engine hits a \u003ccode\u003ebreak\u003c/code\u003e in one of the \u003ccode\u003ecase\u003c/code\u003e statements\u003c/strong\u003e. If you only want one code block in your \u003ccode\u003eswitch\u003c/code\u003e statement to execute, you should always include the \u003ccode\u003ebreak\u003c/code\u003e keyword.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eIn the previous example, \u003ccode\u003ebreak\u003c/code\u003e is used to stop the \u003ccode\u003eswitch\u003c/code\u003e statement from continuing to look at case statements once it finds a match. If we left out the \u003ccode\u003ebreak\u003c/code\u003e keyword, the switch statement would get to a match at \u003ccode\u003ecase 15\u003c/code\u003e and continue on through to \u003ccode\u003ecase 19\u003c/code\u003e, setting \u003ccode\u003eisTeenager\u003c/code\u003e to true. However, since we didn't break after that assignment, the code would continue to execute and \u003ccode\u003eisTeenager\u003c/code\u003e would wind up being reset to false. To keep that from happening, we use \u003ccode\u003ebreak\u003c/code\u003e to tell the JavaScript engine to stop executing the \u003ccode\u003eswitch\u003c/code\u003e statement as soon as it finds a match. You will often see switch statements where \u003ccode\u003ebreak\u003c/code\u003e is used in every case as a way to ensure there is no unexpected behavior from multiple cases executing.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e Sometimes we \u003cem\u003ewant\u003c/em\u003e to potentially match multiple cases, and we will need to leave out \u003ccode\u003ebreak\u003c/code\u003e in order to do this. We can refactor the \u003ccode\u003eif...else if...else\u003c/code\u003e example we saw earlier as a more compact, less repetitious \u003ccode\u003eswitch\u003c/code\u003e statement. To make it work, we will employ a neat little trick: we'll use comparisons for our \u003ccode\u003ecase\u003c/code\u003e statements instead of a simple value.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 25;\u003cbr\u003e\u003cbr\u003elet isAdult, canWork, canEnlist, canDrink;\u003cbr\u003e\u003cbr\u003eswitch (true) {\u003cbr\u003e    case age \u0026gt;= 21:\u003cbr\u003e        canDrink = true;\u003cbr\u003e    case age \u0026gt;= 18:\u003cbr\u003e        isAdult = true;\u003cbr\u003e        canEnlist = true;\u003cbr\u003e    case age \u0026gt;= 16:\u003cbr\u003e        canWork = true;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanWork;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanEnlist;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanDrink;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe specified \u003ccode\u003etrue\u003c/code\u003e as the value to \u003ccode\u003eswitch\u003c/code\u003e on. All of our \u003ccode\u003ecase\u003c/code\u003es are \u003cem\u003ecomparison expressions\u003c/em\u003e that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Therefore, if a comparison returns \u003ccode\u003etrue\u003c/code\u003e, its statements will be run. Because we did not include any \u003ccode\u003ebreak\u003c/code\u003e statements, once \u003cem\u003eone\u003c/em\u003e case statement matches, all subsequent statements will execute. This is what we want here: if \u003ccode\u003eage\u003c/code\u003e is greater than 21, it's also greater than 18 and 16, so we want \u003cem\u003eall\u003c/em\u003e the assignments to be made.\u003c/p\u003e  \u003cp\u003eIf we set \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e20\u003c/code\u003e in the above example, the first \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 21\u003c/code\u003e, returns \u003ccode\u003efalse\u003c/code\u003e and the assignment of \u003ccode\u003ecanDrink\u003c/code\u003e never happens. The engine then proceeds to the next \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e, which returns \u003ccode\u003etrue\u003c/code\u003e, assigning the value \u003ccode\u003etrue\u003c/code\u003e to \u003ccode\u003eisAdult\u003c/code\u003e and \u003ccode\u003ecanEnlist\u003c/code\u003e. Since it encounters no \u003ccode\u003ebreak\u003c/code\u003e statement, it then proceeds to the last case statement where \u003ccode\u003ecanWork\u003c/code\u003e is set to true as well.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eYou now have three different types of conditional statements available to you: the \u003ccode\u003eif\u003c/code\u003e statement, the \u003ccode\u003eternary\u003c/code\u003e expression, and the \u003ccode\u003eswitch\u003c/code\u003e statement. The \u003ccode\u003eif\u003c/code\u003e statement is the one you will use most often — in fact, you can \u003cem\u003ealways\u003c/em\u003e construct your conditional code using some combination of \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse if\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e. It may not be the most efficient way to write the code, but it will always do the trick.\u003c/p\u003e  \u003cp\u003eAs a rule of thumb, you may find it makes sense to start with \u003ccode\u003eif\u003c/code\u003e statements and, once you've got the code working, consider refactoring it to use a ternary or switch statement if they're better suited for what you need to do.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\"\u003eExpressions\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"\u003eBlock statement\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003efalsy\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#Conditional_statements\"\u003eConditional statements\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\"\u003eConditional (ternary) operator\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"review-conditionals"},{"id":173438,"title":"Review: Logical Operators","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-logical-operators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDescribe how to use \u003ccode\u003e!\u003c/code\u003e to negate an expression\u003c/li\u003e \u003cli\u003eDescribe how to convert an expression to a Boolean using \u003ccode\u003e!!\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e \u003cli\u003eDescribe how to link conditions using the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e \u003cli\u003ePractice What We Learned\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lesson, we will continue to expand our toolset for creating Boolean expressions by learning about logical operators. Using JavaScript's three logical operators, NOT (\u003ccode\u003e!\u003c/code\u003e), AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e), and OR (\u003ccode\u003e||\u003c/code\u003e), we'll learn how to negate and combine expressions. These operators, in combination with the equality and relational operators we learned earlier, will enable us to create more complex and sophisticated Boolean expressions.\u003c/p\u003e  \u003ch2\u003eDescribe How to Use \u003ccode\u003e!\u003c/code\u003e to Negate an Expression\u003c/h2\u003e  \u003ch3\u003e\n\u003ccode\u003e!\u003c/code\u003e NOT\u003c/h3\u003e  \u003cp\u003eIn an earlier lesson, we learned about truthy and falsey values in JavaScript. The logical NOT operator (\u003ccode\u003e!\u003c/code\u003e), also called the \u003cem\u003ebang operator\u003c/em\u003e, operates on an expression, returning the opposite of the expression's truthiness. If \u003ccode\u003ex\u003c/code\u003e resolves to a truthy value, \u003ccode\u003e!x\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e. If \u003ccode\u003ex\u003c/code\u003e is falsey, \u003ccode\u003e!x\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UniqueAnotherAutomaticvectorization?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you click the Run button you'll see the bang operator in action, returning the reverse of \u003ccode\u003etruthyValue\u003c/code\u003e's truthiness. Then modify the code on line 4 to verify that it works for the falsey value as well. (Recall that you will need to create your own account to make changes.)\u003c/p\u003e  \u003ch2\u003eDescribe How to Convert an Expression to a Boolean Using \u003ccode\u003e!!\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn an earlier lesson, we passed values into the \u003ccode\u003eBoolean()\u003c/code\u003e \u003cem\u003econstructor function\u003c/em\u003e to check their truthiness. We'll learn all about constructor functions later in the course; for now, just think of \u003ccode\u003eBoolean()\u003c/code\u003e as a function that takes in some input, \u003cem\u003econstructs\u003c/em\u003e a new Boolean from that input, and outputs the newly constructed Boolean.\u003c/p\u003e  \u003cp\u003eAs a shorter way to convert any value into a Boolean, we can use two NOT operators:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/WanGrimyFunction?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eThe JavaScript engine reads from left to right: it sees the first \u003ccode\u003e!\u003c/code\u003e and looks to the right to check what we're asking it to invert (\u003ccode\u003e!truthyValue\u003c/code\u003e). It then sees the second \u003ccode\u003e!\u003c/code\u003e and looks to the right \u003cem\u003eagain\u003c/em\u003e, this time finding our \u003ccode\u003etruthyValue\u003c/code\u003e variable. At this point, the engine resolves \u003ccode\u003etruthyValue\u003c/code\u003e to \u003ccode\u003e\"This value is truthy.\"\u003c/code\u003e, which (as it tells us) is truthy. It then executes the inner \u003ccode\u003e!\u003c/code\u003e operator on it. \u003ccode\u003e!truthyValue\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, so instead of \u003ccode\u003e!!truthyValue\u003c/code\u003e JavaScript is now evaluating \u003ccode\u003e!false\u003c/code\u003e. Executing the outer \u003ccode\u003e!\u003c/code\u003e operator on \u003ccode\u003efalse\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTry inverting various values in the REPL above to get a feel for the NOT operator. See what happens when you stack a ton of them: \u003ccode\u003e!!!!!!!!!truthyValue\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can edit line 3 in \u003ccode\u003eindex.js\u003c/code\u003e \u003cem\u003eor\u003c/em\u003e add lines of code below the current code. If you add lines, when you click the Run button, the value returned in the bottom window will be the return value of the \u003cem\u003elast expression evaluated\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eOn to the next!\u003c/p\u003e  \u003ch2\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e Operators\u003c/h2\u003e  \u003ch3\u003e\n\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (AND)\u003c/h3\u003e  \u003cp\u003eThe logical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) operator takes two expressions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexpression1 \u0026amp;\u0026amp; expression2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe return value of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator is always \u003cstrong\u003eone of the two expressions\u003c/strong\u003e. If the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the first expression. If the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the second expression.\u003c/p\u003e  \u003cp\u003eAgain, if the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns that value and exits \u003cem\u003ewithout ever checking the second expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efalse \u0026amp;\u0026amp; 'Anything';\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e// 4 * 0 returns 0, which is falsey\u003cbr\u003e4 * 0 \u0026amp;\u0026amp; 'Anything';\u003cbr\u003e// =\u0026gt; 0 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e then returns whatever the second expression evaluates to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etrue \u0026amp;\u0026amp; false;\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e1 + 1 \u0026amp;\u0026amp; 'Whatever';\u003cbr\u003e// =\u0026gt; \"Whatever\"\u003cbr\u003e\u003cbr\u003e'The truthiest of truthy strings' \u0026amp;\u0026amp; 9 * 9;\u003cbr\u003e// =\u0026gt; 81 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere are three different ways the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator can be evaluated:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eLeft side\u003c/th\u003e     \u003cth\u003eRight side\u003c/th\u003e     \u003cth\u003eReturn value\u003c/th\u003e     \u003cth\u003eTruthiness of return value\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eDoesn't matter\u003c/td\u003e     \u003ctd\u003eLeft side\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eRight side\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eRight side\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003col\u003e \u003cli\u003eIf the left-side expression is falsey, the right-side expression doesn't matter at all. The \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the left side's falsey value and finishes.\u003c/li\u003e \u003cli\u003eIf the left-side expression is truthy, the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the right side's value (whether it's truthy or falsey) and finishes.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWhat this means is that the return value of the expression will be truthy if the values on either side of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e are \u003cem\u003eboth\u003c/em\u003e truthy, and falsey otherwise.\u003c/p\u003e  \u003cp\u003eIf you're feeling a little confused, that's ok. This is one of those concepts that's a bit hard to understand unless you've played around with it in code. You will have an opportunity to practice at the end of the lesson.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e||\u003c/code\u003e (OR)\u003c/h3\u003e  \u003cp\u003eThe logical OR (\u003ccode\u003e||\u003c/code\u003e) operator also takes two expressions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexpression1 || expression2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs with \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, the return value of the \u003ccode\u003e||\u003c/code\u003e operator is always \u003cstrong\u003eone of the two expressions\u003c/strong\u003e. If the first expression is truthy, \u003ccode\u003e||\u003c/code\u003e returns the value of the first expression. If the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns the value of the second expression.\u003c/p\u003e  \u003cp\u003eIf the first expression is truthy, that value is immediately returned and the second expression is never evaluated:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etrue || 'Whatever';\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e1 + 1 || 'Whatever';\u003cbr\u003e// =\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns whatever the second expression evaluates to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efalse || 'Whatever';\u003cbr\u003e// =\u0026gt; \"Whatever\"\u003cbr\u003e\u003cbr\u003e1 === 2 || 8 * 8;\u003cbr\u003e// =\u0026gt; 64\u003cbr\u003e\u003cbr\u003e'' || 'Not ' + 'an ' + 'empty ' + 'string';\u003cbr\u003e// =\u0026gt; \"Not an empty string\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere are three different ways the \u003ccode\u003e||\u003c/code\u003e operator can be evaluated:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eLeft side\u003c/th\u003e     \u003cth\u003eRight side\u003c/th\u003e     \u003cth\u003eReturn value\u003c/th\u003e     \u003cth\u003eTruthiness of return value\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eDoesn't matter\u003c/td\u003e     \u003ctd\u003eLeft side\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eRight side\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eRight side\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003col\u003e \u003cli\u003eIf the left-side expression is truthy, the right-side expression doesn't matter at all. The \u003ccode\u003e||\u003c/code\u003e operator returns the left side's truthy value and completes.\u003c/li\u003e \u003cli\u003eIf the left-side expression is falsey, the \u003ccode\u003e||\u003c/code\u003e operator returns the right side's value (regardless of whether it's truthy or falsey) and completes.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWhat this means is that the return value of the expression will be truthy if \u003cem\u003eone or both\u003c/em\u003e of the values on either side of the \u003ccode\u003e||\u003c/code\u003e are truthy, and falsey otherwise.\u003c/p\u003e  \u003ch2\u003ePracticing What We've Learned\u003c/h2\u003e  \u003cp\u003eThe REPL below contains a number of expressions that use the logical operators we've learned about in this lesson:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/EmbellishedPresentOrigin?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eBefore we get to that, however...\u003c/p\u003e  \u003ch3\u003eA Note About Comments in Code\u003c/h3\u003e  \u003cp\u003eNote that most of the lines in the REPL currently have the characters \u003ccode\u003e//\u003c/code\u003e at the front. The \u003ccode\u003e//\u003c/code\u003e is used in JavaScript to 'comment out' lines of code. Any line in your code that has \u003ccode\u003e//\u003c/code\u003e at the front will \u003cem\u003enot be interpreted\u003c/em\u003e by the JavaScript engine. This enables us to do two things: 1) include text (i.e., messages meant for humans) in our code files without JavaScript throwing an error, and 2) \u003cem\u003etemporarily\u003c/em\u003e keep lines of code from being interpreted; this  second use can be especially handy when debugging code.\u003c/p\u003e  \u003cp\u003eTry removing the \u003ccode\u003e//\u003c/code\u003e at the beginning of line 1 and clicking the Run button. Not surprisingly, JavaScript doesn't know what to do with that line of 'code'. The \u003ccode\u003e//\u003c/code\u003e enables programmers to include messages to other programmers — or to their own future selves — for documentation or clarification purposes. Don't forget to re-comment out line 1 before you move on.\u003c/p\u003e  \u003ch3\u003eInstructions\u003c/h3\u003e  \u003cp\u003eOkay, let's get some practice with logical operators. Take a look at line 4 in the REPL (the only un-commented out line). What do you think the expression will return? Think it through and come up with an answer, then click Run to check whether you're right. When you're done with the first expression, work your way down, un-commenting out each expression in turn. Be sure you think each example through and figure out your answer before clicking Run.\u003c/p\u003e  \u003cp\u003eIf you're having difficulty with the examples, try following this procedure:\u003c/p\u003e  \u003col\u003e \u003cli\u003eEvaluate each side of the operator individually: what is the \u003cem\u003ereturn value\u003c/em\u003e of each individual expression, and what is the \u003cem\u003etruthiness\u003c/em\u003e of each of those values?\u003c/li\u003e \u003cli\u003eFind the corresponding row in the appropriate table above and refer to the 'Return value' column to determine the return value of the full expression.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eFinally, once you're done with the provided expressions, experiment with some examples of your own to cement your understanding.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn the last few lessons, we've been introduced to powerful tools for creating Boolean expressions: comparison operators (equality and relational) and logical operators. With these tools, we can construct very sophisticated expressions. A bit later in the course, we will learn how to use these expressions to execute code conditionally, which will enable us to implement powerful logic in our programs.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/\"\u003eMDN\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\"\u003eLogical operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals\"\u003eReview of conditionals, comparisons, and logical operators\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"review-logical-operators"},{"id":173439,"title":"Review: Control Flow Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-basics-control-flow-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-control-flow-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-control-flow-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePractice writing \u003ccode\u003eif...else if...else\u003c/code\u003e statements.\u003c/li\u003e\n\u003cli\u003ePractice working with the ternary operator.\u003c/li\u003e\n\u003cli\u003ePractice writing \u003ccode\u003eswitch\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eYou have been hired as a contractor for Scuber, a burgeoning startup that helps busy parents transport their children to and from all of their activities on scooters.\u003c/p\u003e\n\u003cp\u003eScuber's drivers charge their passengers a variable amount based on how far they need to travel. Modify the \u003ccode\u003eindex.js\u003c/code\u003e file to make sure that Scuber's drivers are properly telling their passengers how much the ride will cost.\u003c/p\u003e\n\u003ch2\u003eRead the Tests\u003c/h2\u003e\n\u003cp\u003eWe know that you do not have much experience with testing, so that is why it is very important for you to read the instructions in this and every lab. That being said, reading the tests can often provide important clues on how to complete a lab. Let's take a look at the first test for this lab together:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('index.js', function () {\u003cbr\u003e  describe('scuberGreetingForFeet()', function () {\u003cbr\u003e    it('gives customers a free sample if the ride is less than or equal to 400 feet', function () {\u003cbr\u003e      expect(scuberGreetingForFeet(199)).to.equal('This one is on me!');\u003cbr\u003e    });\u003cbr\u003e\u003cbr\u003e    // tests continue...\u003cbr\u003e  });\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, so all of the fancy \u003ccode\u003edescribe\u003c/code\u003e words are just there to organize the requirements, and provide a description for what each function should do. By reading the text inside of the \u003ccode\u003edescribe\u003c/code\u003e words, we can see that there is some function that should give customers a free sample, where the first 400 feet are free. Then in the next line we see a function called \u003ccode\u003escuberGreetingForFeet\u003c/code\u003e being executed with \u003ccode\u003e199\u003c/code\u003e passed through as an argument to the function. Executing the \u003ccode\u003escuberGreetingForFeet\u003c/code\u003e function with the argument should return \u003ccode\u003e\"This one is on me!\"\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWe will tackle the details of function writing in depth in an upcoming lab. For now, briefly, a function declaration is written like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction addFive(someNumber) {\u003cbr\u003e  //Everything I want my function to do I put inside these curly braces\u003cbr\u003e  //In this example, let's say I want my function, addFive, to add 5 to\u003cbr\u003e  //any number I pass in (someNumber), but only IF the number is greater\u003cbr\u003e  //than zero:\u003cbr\u003e  let result\u003cbr\u003e  if (someNumber \u0026gt; 0) {\u003cbr\u003e    result = someNumber + 5;\u003cbr\u003e  }\u003cbr\u003e  //at the end, if I want my function to return something, I need to state it:\u003cbr\u003e  return result\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e//once our function is declared, we can call addFive, passing in values \u003cbr\u003e//as arguments:\u003cbr\u003e\u003cbr\u003eaddFive(10);\u003cbr\u003e//=\u0026gt; 15\u003cbr\u003e\u003cbr\u003eaddFive(20);\u003cbr\u003e//=\u0026gt; 25\u003cbr\u003e\u003cbr\u003eaddFive(-5);\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003eaddFive(addFive(5));\u003cbr\u003e//=\u0026gt; 15!! In this case, the return value of addFive(5), 10, is passed in \u003cbr\u003e//as the argument to the outer addFive, returning 15 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, looking back at our test example, \u003ccode\u003escuberGreetingForFeet(199)\u003c/code\u003e is calling the function \u003ccode\u003escuberGreetingForFeet\u003c/code\u003e, and passing in the value \u003ccode\u003e199\u003c/code\u003e as the argument. When we write this function, we need to write the logic inside the curly braces to pass our tests and return the result:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction scuberGreetingForFeet(someValue) {\u003cbr\u003e  //this is where we can use conditionals given our argument, someValue\u003cbr\u003e  //don't forget to return whatever the result is!\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe big clue from reading the example test above is that the tests in the \u003ccode\u003eindexTest.js\u003c/code\u003e file are calling the functions that we write inside the \u003ccode\u003eindex.js\u003c/code\u003e file. These tests pass arguments to our function. When this test passes an argument of \u003ccode\u003e199\u003c/code\u003e to our function, the \u003ccode\u003escuberGreetingForFeet\u003c/code\u003e function should return \u003ccode\u003e\"This one is on me!\"\u003c/code\u003e. That makes sense, considering the text in the \u003ccode\u003edescribe\u003c/code\u003e and \u003ccode\u003eit\u003c/code\u003e functions say that the first 400 feet should be free. That \u003ccode\u003e199\u003c/code\u003e must be indicating the distance in feet of the requested ride.\u003c/p\u003e\n\u003cp\u003eSo reading tests is essentially like reading the instructions. It's something we may have avoided for much of our lives, but when it comes to programming, tests fill in the picture of the goal we are trying to accomplish. They run mini-experiments on our code and help us better understand our code and the problem we are solving.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eThere are three functions that have been declared for you. You will need to fill in the following code:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003escuberGreetingForFeet()\u003c/code\u003e — Use \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse if\u003c/code\u003e statements to return the correct greeting based on the distance the passenger desires to travel.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eternaryCheckCity()\u003c/code\u003e — Use a ternary operator to return the correct response based on the desired destination of the passenger.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eswitchOnCharmFromTip()\u003c/code\u003e — Use a \u003ccode\u003eswitch\u003c/code\u003e statement to return a different response based on the generosity of the passenger's tip.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: Beware a gotcha! In JavaScript, you cannot express the concept of 'between' in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2 \u0026lt; 5 \u0026lt; 4\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt seems like that expression should evaluate to \u003ccode\u003efalse\u003c/code\u003e because \u003ccode\u003e5\u003c/code\u003e is not less than \u003ccode\u003e4\u003c/code\u003e. However, we're forgetting about the order of operations — let's think about how the JavaScript engine evaluates that expression. First, the engine compares \u003ccode\u003e2 \u0026lt; 5\u003c/code\u003e, which evaluates to \u003ccode\u003etrue\u003c/code\u003e. At that point, it's as though the value \u003ccode\u003etrue\u003c/code\u003e has replaced \u003ccode\u003e2 \u0026lt; 5\u003c/code\u003e in the expression, resulting in \u003ccode\u003etrue \u0026lt; 4\u003c/code\u003e. The engine sees that we're trying to compare a non-number (\u003ccode\u003etrue\u003c/code\u003e) against a number (\u003ccode\u003e4\u003c/code\u003e), and under the hood it converts \u003ccode\u003etrue\u003c/code\u003e into a number:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNumber(true);\u003cbr\u003e// =\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat leaves us with \u003ccode\u003e1 \u0026lt; 4\u003c/code\u003e, which the JavaScript engine correctly evaluates to \u003ccode\u003etrue\u003c/code\u003e. Can you figure out how to properly evaluate whether \u003ccode\u003e5\u003c/code\u003e is greater than \u003ccode\u003e2\u003c/code\u003e \u003cstrong\u003eAND\u003c/strong\u003e \u003ccode\u003e5\u003c/code\u003e is less than \u003ccode\u003e4\u003c/code\u003e using logical operators? Ponder that as you work through the assignment.\u003c/p\u003e\n\u003cp\u003eGood luck!\u003c/p\u003e","exportId":"ge92237c29981fea074595ee22d7b4d0f"},{"id":173440,"title":"Review: Arithmetic Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-js-fundamentals-arithmetic-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-js-fundamentals-arithmetic-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-js-fundamentals-arithmetic-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize the limitations of math in JavaScript\u003c/li\u003e \u003cli\u003eEmploy operators to perform arithmetic and assign values to variables\u003c/li\u003e \u003cli\u003eExplain what \u003ccode\u003eNaN\u003c/code\u003e is\u003c/li\u003e \u003cli\u003eUse built-in objects like \u003ccode\u003eMath\u003c/code\u003e and \u003ccode\u003eNumber\u003c/code\u003e to accomplish complex tasks\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe're going to discuss a number of the common operators and objects we'll use to perform arithmetic operations in JavaScript.\u003c/p\u003e  \u003cp\u003eIn the browser's JavaScript console, we can test out all of the examples in this lesson. Remember that we can't redeclare variables previously declared with \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e, so the page may have to be refreshed (which wipes away all declared variables) or different variable names can be chosen than those in the examples.\u003c/p\u003e  \u003ch2\u003eRecognize the Limitations of Math in JavaScript\u003c/h2\u003e  \u003cp\u003e\u003cstrong\u003eMath is awesome!\u003c/strong\u003e JavaScript has only a single, all-encompassing \u003ccode\u003enumber\u003c/code\u003e type. While other languages might have distinct types for integers, decimals, and the like, JavaScript represents everything as a double-precision floating-point number, or \u003cem\u003efloat\u003c/em\u003e. This imposes some interesting technical limitations on the precision of the arithmetic we can perform with JavaScript. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e0.1 * 0.1;\u003cbr\u003e//=\u0026gt; 0.010000000000000002\u003cbr\u003e\u003cbr\u003e0.1 + 0.1 + 0.1;\u003cbr\u003e//=\u0026gt; 0.30000000000000004\u003cbr\u003e\u003cbr\u003e1 - 0.9;\u003cbr\u003e//=\u0026gt; 0.09999999999999998 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou shouldn't waste too much time diving into why this happens, but it basically boils down to the language, once again, trying to be too user-friendly. Under the hood, JavaScript stores numbers in binary (base-2) format, as a series of \u003ccode\u003e1\u003c/code\u003es and \u003ccode\u003e0\u003c/code\u003es, but it displays numbers in the more human-readable decimal (base-10) format. The problem that the above code snippet highlights is that it's really easy to represent something like \u003ccode\u003e1/10\u003c/code\u003e in decimal (\u003ccode\u003e0.1\u003c/code\u003e) but impossible to do it in binary (\u003ccode\u003e0.0001100110011...\u003c/code\u003e). It's the exact same problem that the decimal system has in trying to represent \u003ccode\u003e1/3\u003c/code\u003e as \u003ccode\u003e0.33333333333...\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe only time you'd really have to worry about this is if you needed to calculate something to a high degree of precision, like interest payments for a bank. However, for most of our day-to-day arithmetic needs, JavaScript is more than capable.\u003c/p\u003e  \u003ch2\u003eEmploy Operators to Perform Arithmetic and Assign Values to Variables\u003c/h2\u003e  \u003cp\u003eJavaScript employs a pretty standard set of arithmetic operators.\u003c/p\u003e  \u003ch3\u003eArithmetic Operators\u003c/h3\u003e  \u003ch4\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eWe've used the addition operator to concatenate strings, but it's also used to add numbers together:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e40 + 2;\u003cbr\u003e//=\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe subtraction operator returns the difference between two numbers:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9001 - 9000;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe multiplication operator returns the product of two numbers:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e6 * 7;\u003cbr\u003e//=\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e/\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe division operator returns the result of the left number divided by the right number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9001 / 42;\u003cbr\u003e//=\u0026gt; 214.3095238095238 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e%\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe remainder operator returns the remainder when the left number is divided by the right number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9001 % 42;\u003cbr\u003e//=\u0026gt; 13 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e**\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe exponentiation operator returns the left number raised to the power of the right number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2 ** 8;\u003cbr\u003e//=\u0026gt; 256 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eOrder of Operations\u003c/h3\u003e  \u003cp\u003eJavaScript evaluates compound arithmetic operations by following the standard \u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003eorder of operations\u003c/a\u003e used in basic math. Anything in parentheses has highest priority; exponentiation is second; then multiplication, division, and remainder; and, finally, addition and subtraction, in order from left to right. This is how the JavaScript compiler works. For example:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003e( )\u003c/code\u003e → \u003ccode\u003e**\u003c/code\u003e → \u003ccode\u003e*\u003c/code\u003e \u003ccode\u003e/\u003c/code\u003e \u003ccode\u003e%\u003c/code\u003e → \u003ccode\u003e+\u003c/code\u003e \u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2 - (2 % 2) + (2 / 2 ** 2) * 2;\u003cbr\u003e//=\u0026gt; 3\u003cbr\u003e\u003cbr\u003e2 - ((2 % (2 + 2)) / 2 ** 2) * 2;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eIncrementing and Decrementing\u003c/h3\u003e  \u003cp\u003eJavaScript also has a pair of operators that we can use to increment and decrement a numerical value stored in a variable.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003e++\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe \u003ccode\u003e++\u003c/code\u003e operator increments the stored number by \u003ccode\u003e1\u003c/code\u003e. If the \u003ccode\u003e++\u003c/code\u003e operator comes after the variable (e.g., \u003ccode\u003ecounter++\u003c/code\u003e), the variable's value is \u003cem\u003ereturned first and then incremented\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ecounter++;\u003cbr\u003e//=\u0026gt; 0\u003cbr\u003e\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the \u003ccode\u003e++\u003c/code\u003e operator comes before the variable (e.g., \u003ccode\u003e++counter\u003c/code\u003e), the variable's value is \u003cem\u003eincremented first and then returned\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e++counter;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn both cases, \u003ccode\u003ecounter\u003c/code\u003e contains the value \u003ccode\u003e1\u003c/code\u003e after incrementing. The difference is in whether we want the operation to return the original or incremented value.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003e--\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe \u003ccode\u003e--\u003c/code\u003e operator decrements the stored number by \u003ccode\u003e1\u003c/code\u003e and has the same pair of prefix and postfix options as the \u003ccode\u003e++\u003c/code\u003e operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e// Return the current value of 'counter' and then decrement by 1\u003cbr\u003ecounter--;\u003cbr\u003e//=\u0026gt; 0\u003cbr\u003e\u003cbr\u003e// Check the new value of 'counter'\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; -1\u003cbr\u003e\u003cbr\u003e// Decrement 'counter' and then return the new value\u003cbr\u003e--counter;\u003cbr\u003e//=\u0026gt; -2\u003cbr\u003e\u003cbr\u003e// Check the new value of 'counter'\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; -2 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eAssignment operators\u003c/h2\u003e  \u003cp\u003eJavaScript has a number of operators for assigning a value to a variable. We've already used the most basic, \u003ccode\u003e=\u003c/code\u003e, but we can also couple it with an arithmetic operator to perform an operation \u003cem\u003eand\u003c/em\u003e assign the value of the operation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ecounter += 10;\u003cbr\u003e//=\u0026gt; 10\u003cbr\u003e\u003cbr\u003ecounter -= 2;\u003cbr\u003e//=\u0026gt; 8\u003cbr\u003e\u003cbr\u003ecounter *= 4;\u003cbr\u003e//=\u0026gt; 32\u003cbr\u003e\u003cbr\u003ecounter /= 2;\u003cbr\u003e//=\u0026gt; 16\u003cbr\u003e\u003cbr\u003ecounter %= 6;\u003cbr\u003e//=\u0026gt; 4\u003cbr\u003e\u003cbr\u003ecounter **= 3;\u003cbr\u003e//=\u0026gt; 64 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eExplain What \u003ccode\u003eNaN\u003c/code\u003e Is\u003c/h2\u003e  \u003cp\u003eJavaScript tries to return a value for every operation, but sometimes we'll ask it to calculate the incalculable. For example, imagine that one of the lines of code in our program increments the value of a \u003ccode\u003ecounter\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e. However, something broke in a different part of the program, and \u003ccode\u003ecounter\u003c/code\u003e is currently \u003ccode\u003eundefined\u003c/code\u003e. When the JavaScript engine reaches the incrementing line, what happens?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecounter++;\u003cbr\u003e//=\u0026gt; NaN \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine can't add \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003eundefined\u003c/code\u003e, so it tells us the result is \u003cstrong\u003eNot a Number\u003c/strong\u003e —\u0026nbsp;\u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eTop Tip\u003c/em\u003e\u003c/strong\u003e: Much like \u003ccode\u003eundefined\u003c/code\u003e, you should never assign \u003ccode\u003eNaN\u003c/code\u003e as the value of a variable and instead let it be a signal that some weird maths are happening in your code.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eUse built-in objects like \u003ccode\u003eMath\u003c/code\u003e and \u003ccode\u003eNumber\u003c/code\u003e to accomplish complex tasks\u003c/h2\u003e  \u003cp\u003eTo satisfy most of our math needs, JavaScript provides several built-in objects that we can reference anywhere in JavaScript code, including \u003ccode\u003eNumber\u003c/code\u003e and \u003ccode\u003eMath\u003c/code\u003e. With these objects, we can perform complex tasks like generating random numbers.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eNumber\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eNumber\u003c/code\u003e object comes with a collection of handy methods that we can use for checking and converting numbers in JavaScript.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003eNumber.isInteger()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eChecks whether the provided argument is an integer:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.isInteger(42);\u003cbr\u003e//=\u0026gt; true\u003cbr\u003e\u003cbr\u003eNumber.isInteger(0.42);\u003cbr\u003e//=\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eNumber.isFinite()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eChecks whether the provided argument is finite:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.isFinite(9001);\u003cbr\u003e//=\u0026gt; true\u003cbr\u003e\u003cbr\u003eNumber.isFinite(Infinity);\u003cbr\u003e//=\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eNumber.isNaN()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eChecks whether the provided argument is \u003ccode\u003eNaN\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.isNaN(10);\u003cbr\u003e//=\u0026gt; false\u003cbr\u003e\u003cbr\u003eNumber.isNaN(undefined);\u003cbr\u003e//=\u0026gt; false\u003cbr\u003e\u003cbr\u003eNumber.isNaN(NaN);\u003cbr\u003e//=\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eNumber.parseInt()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eAccepts a string as its first argument and parses it as an integer. The second argument is the base that should be used in parsing (e.g., \u003ccode\u003e2\u003c/code\u003e for binary or \u003ccode\u003e10\u003c/code\u003e for decimal). For example, \u003ccode\u003e100\u003c/code\u003e is \u003ccode\u003e100\u003c/code\u003e in decimal but \u003ccode\u003e4\u003c/code\u003e in binary:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.parseInt('100', 10);\u003cbr\u003e//=\u0026gt; 100\u003cbr\u003e\u003cbr\u003eNumber.parseInt('100', 2);\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second argument is optional, but you should always provide it to avoid confusion.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003eNumber.parseFloat()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003e\u003ccode\u003eNumber.parseFloat()\u003c/code\u003e only accepts a single argument, the string that should be parsed into a floating-point number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.parseFloat('3.14159');\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003e\u003ccode\u003eMath\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eMath\u003c/code\u003e object contains some properties representing common mathematical values, such as \u003ccode\u003eMath.PI\u003c/code\u003e and \u003ccode\u003eMath.E\u003c/code\u003e, as well as a number of methods for performing useful calculations.\u003c/p\u003e  \u003ch4\u003e\n\u003ccode\u003eMath.ceil()\u003c/code\u003e / \u003ccode\u003eMath.floor()\u003c/code\u003e / \u003ccode\u003eMath.round()\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eJavaScript provides three methods for rounding numbers. \u003ccode\u003eMath.ceil()\u003c/code\u003e rounds the number \u003cem\u003eup\u003c/em\u003e, \u003ccode\u003eMath.floor()\u003c/code\u003e rounds the number \u003cem\u003edown\u003c/em\u003e, and \u003ccode\u003eMath.round()\u003c/code\u003e rounds the number either up or down, whichever is nearest:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eMath.ceil(0.5);\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003eMath.floor(0.5);\u003cbr\u003e//=\u0026gt; 0\u003cbr\u003e\u003cbr\u003eMath.round(0.5);\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003eMath.round(0.49);\u003cbr\u003e//=\u0026gt; 0 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\n\u003ccode\u003eMath.max()\u003c/code\u003e / \u003ccode\u003eMath.min()\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eThese two methods accept a number of arguments and return the lowest and highest constituent, respectively:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eMath.max(1, 2, 3, 4, 5);\u003cbr\u003e//=\u0026gt; 5\u003cbr\u003e\u003cbr\u003eMath.min(1, 2, 3, 4, 5);\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eMath.random()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThis method generates a random number between \u003ccode\u003e0\u003c/code\u003e (inclusive) and \u003ccode\u003e1\u003c/code\u003e (exclusive):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eMath.random();\u003cbr\u003e//=\u0026gt; 0.4495507082209371 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn combination with some simple arithmetic and one of the rounding methods, we can generate random integers within a specific range. For example, to generate a random integer between \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e10\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eMath.floor(Math.random() * 10) + 1;\u003cbr\u003e//=\u0026gt; 8\u003cbr\u003e\u003cbr\u003eMath.floor(Math.random() * 10) + 1;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003eMath.floor(Math.random() * 10) + 1;\u003cbr\u003e//=\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eMath.random()\u003c/code\u003e returns a number between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e0.999...\u003c/code\u003e, which we multiply by \u003ccode\u003e10\u003c/code\u003e to give us a number between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e9.999...\u003c/code\u003e. We then pass that number to \u003ccode\u003eMath.floor()\u003c/code\u003e, which returns an integer between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e9\u003c/code\u003e. That's one less than the desired range (\u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003e10\u003c/code\u003e), so we add one at the end of the equation. Try it out in the JS console!\u003c/p\u003e  \u003ch2\u003eAssignment\u003c/h2\u003e  \u003cp\u003eThere are four challenges we need you to solve. Code your solution in \u003ccode\u003eindex.js\u003c/code\u003e. We'll provide some brief instructions here, but you should really rely on the test failure messages to guide your code.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003col\u003e \u003cli\u003eCreate a variable called \u003ccode\u003emultiply\u003c/code\u003e set to an equation that will multiply the variables \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e; the result of the multiplication should be \u003ccode\u003e62\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eCreate a variable called \u003ccode\u003erandom\u003c/code\u003e that will generate a random integer greater than 0.\u003c/li\u003e \u003cli\u003eCreate a variable called \u003ccode\u003emod\u003c/code\u003e set to an equation that will calculate the remainder of dividing variable \u003ccode\u003enum3\u003c/code\u003e by \u003ccode\u003enum4\u003c/code\u003e; the remainder should be \u003ccode\u003e4\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eCreate a variable called \u003ccode\u003emax\u003c/code\u003e that finds the highest number in a set; the value returned should be \u003ccode\u003e20\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/17556281/28846833-e671480c-76da-11e7-9285-17b5c592e065.gif\" alt=\"Good luck\"\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math\"\u003eBasic math in JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\"\u003eArithmetic operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\"\u003eOperator precedence\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\"\u003eAssignment operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\"\u003e\u003ccode\u003eNumber\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\"\u003e\u003ccode\u003eMath\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://2ality.com/2012/04/number-encoding.html\"\u003e2ality — How numbers are encoded in JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003eOrder of Operations\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gcdeec4f37584b0ec9ecfbc4ddfca1983"},{"id":178487,"title":"P1 Quiz1 - JS Fundamentals","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gab37382c356f0f29f8dbdbe7b4103a4e","questionCount":9,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":9.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"","exportId":"g46e99fcec12bec5a8e0858abe2cdf853"}]},{"id":18921,"name":"Functions in JavaScript","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g34e6a30b5e8740131efd722f7b5fcaf7","items":[{"id":173441,"title":"Review: Functions","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-functions-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-functions-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-functions-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine abstraction\u003c/li\u003e \u003cli\u003eExplain that functions are abstractions\u003c/li\u003e \u003cli\u003eExplain how to \u003cem\u003ecall\u003c/em\u003e a function\u003c/li\u003e \u003cli\u003eDefine \"Generalization\"\u003c/li\u003e \u003cli\u003eDemonstrate \"Generalization\" by using \u003cem\u003eparameters\u003c/em\u003e and \u003cem\u003earguments\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eDemonstrate \u003cem\u003ereturn values\u003c/em\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eFunctions are the single most important unit of code in JavaScript. Much like a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e or a \u003ccode\u003e\u0026lt;section\u0026gt;\u003c/code\u003e in HTML, functions serve as ways to group together related bits of JavaScript code.  Grouped code is easier to read, debug, and improve.\u003c/p\u003e  \u003ch2\u003eDefine Abstraction\u003c/h2\u003e  \u003cp\u003eAbstraction comes from Latin roots which mean \"to pull away.\" It's the \"take-away\" or \"impression\" of a whole thing.  As humans, we often take sets of single actions or things and \u003cem\u003eabstract them\u003c/em\u003e into another word.\u003c/p\u003e  \u003cp\u003eThat word that we \"pull away\" is the \"abstraction.\" Literally it means \"the pulled away thing.\" You might not think about it often, but your brain is full of abstractions.\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eSingle Units\u003c/th\u003e     \u003cth\u003eAbstraction\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eJohn, Paul, George, Ringo\u003c/td\u003e     \u003ctd\u003eThe Beatles\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eGet two pieces of bread, put jam on ...\u003c/td\u003e     \u003ctd\u003eMake a peanut butter and jelly sandwich\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eHermione, Harry, Ron\u003c/td\u003e     \u003ctd\u003eTroublesome Gryffindors\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003evisit site, make userid, make password...\u003c/td\u003e     \u003ctd\u003eSign up for Flatbook\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eget in the lift, hit \"G\" button, exit elevator, walk to subway...\u003c/td\u003e     \u003ctd\u003eGo home\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003cp\u003eWe create abstractions to make it easier to shorten our sentences. We'd never get anything done if we couldn't abstract! We also use abstractions to decide what doesn't fit or what should fit. \"Mozart\" doesn't belong with The Beatles, but he does fit with \"Classical Masters.\"\u003c/p\u003e  \u003cp\u003eAbstractions help us think about complex activities. Humans brought the pattern of \"abstracting work\" to JavaScript. Abstractions that hold work are called \u003cem\u003efunctions\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eExplain That Functions Are Abstractions\u003c/h2\u003e  \u003cp\u003eFunctions combine a series of steps under a new name. That's why they're \u003cem\u003eabstractions\u003c/em\u003e. We'll call that the \u003cem\u003efunction name\u003c/em\u003e. More formally:\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eA function is an object that contains a sequence of JavaScript statements.  We can execute or \u003cem\u003ecall\u003c/em\u003e it multiple times.\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eTo \u003cem\u003ecall\u003c/em\u003e a function means to run the independent pieces that make it. Synonyms to \u003cem\u003ecall\u003c/em\u003e that you might see are \u003cem\u003eexecute\u003c/em\u003e and \u003cem\u003einvoke\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eLet's describe a series of single, non-abstract, tasks:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(\"Wake Byron the poodle\");\u003cbr\u003econsole.log(\"Leash Byron the poodle\");\u003cbr\u003econsole.log(\"Walk to the park Byron the poodle\");\u003cbr\u003econsole.log(\"Throw the frisbee for Byron the poodle\");\u003cbr\u003econsole.log(\"Walk home with Byron the poodle\");\u003cbr\u003econsole.log(\"Unleash Byron the poodle\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo abstract these single actions into a collective name, we do:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseByronThePoodle() {\u003cbr\u003e  console.log(\"Wake Byron the poodle\");\u003cbr\u003e  console.log(\"Leash Byron the poodle\");\u003cbr\u003e  console.log(\"Walk to the park Byron the poodle\");\u003cbr\u003e  console.log(\"Throw the frisbee for Byron the poodle\");\u003cbr\u003e  console.log(\"Walk home with Byron the poodle\");\u003cbr\u003e  console.log(\"Unleash Byron the poodle\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis code above is a \u003cem\u003efunction declaration\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eHere we have \u003cem\u003eabstracted\u003c/em\u003e 6 activities into 1 activity: \u003ccode\u003eexerciseByronThePoodle\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: Abstractions themselves can be lumped together \u003cem\u003eas if\u003c/em\u003e they were single things.  The abstraction \u003ccode\u003edailyDogCareForByron\u003c/code\u003e probably includes \u003ccode\u003efeedByronThePoodle\u003c/code\u003e, \u003ccode\u003egiveWaterToByronThePoodle\u003c/code\u003e, \u003ccode\u003eexerciseByronThePoodle\u003c/code\u003e, etc.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eExplain How To \u003cem\u003eCall\u003c/em\u003e a Function\u003c/h2\u003e  \u003cp\u003eTo \"execute\" or \"call\" a function in JavaScript you add \u003ccode\u003e()\u003c/code\u003e after its name. To execute the function we just defined, you run: \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e. When we ran \u003ccode\u003edocument.querySelector()\u003c/code\u003e, we were \u003cem\u003ecalling\u003c/em\u003e a function. \u003ccode\u003eMath.floor()\u003c/code\u003e is another function. That \u003ccode\u003e()\u003c/code\u003e is also known as the \u003cem\u003einvocation operator\u003c/em\u003e because it tells JavaScript to...invoke the function.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eLEARNING TIP\u003c/strong\u003e: Try defining a small function in the JavaScript console to test this out. You can copy the syntax provided above.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eA \u003cem\u003efunction\u003c/em\u003e must be \u003cem\u003edeclared\u003c/em\u003e before it can be called. Calling \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e before the function has been declared causes an error for JavaScript.\u003c/p\u003e  \u003ch2\u003eDefine \"Generalization\"\u003c/h2\u003e  \u003cp\u003eLooking at our abstraction, \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e, it's pretty concrete, the opposite of abstract. It's concrete because it only works for Byron the Poodle. Our function would be more \u003cem\u003eabstract\u003c/em\u003e if it were written for \u003cem\u003eall dogs\u003c/em\u003e and it just-so-happened that Byron the Poodle was one of the eligible things to undergo the function's processes. The process of moving from \u003cem\u003econcrete\u003c/em\u003e to \u003cem\u003eabstract\u003c/em\u003e is called \"generalization\" (or \"abstraction,\" by some).\u003c/p\u003e  \u003ch2\u003eDemonstrate \"Generalization\" By Using \u003cem\u003eParameters\u003c/em\u003e And \u003cem\u003eArguments\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eLet's make \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e more general. Looking at the \u003ccode\u003econsole.log()\u003c/code\u003e statements, we repeatedly refer to a dog's name and a dog's breed. Both of these are \u003ccode\u003eStrings\u003c/code\u003e. If we were to write them as JavaScript variables inside the function we might write \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's use \u003ccode\u003eString\u003c/code\u003e interpolation to generalize the \u003cem\u003ebody\u003c/em\u003e of our function\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseByronThePoodle() {\u003cbr\u003e  const dogName = \"Byron\";\u003cbr\u003e  const dogBreed = \"poodle\";\u003cbr\u003e  console.log(`Wake ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Leash ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk to the park ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Throw the frisbee for ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk home with ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Unleash ${dogName} the ${dogBreed}`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we \u003cem\u003ecall\u003c/em\u003e this function, we'll get the exact \u003cem\u003esame\u003c/em\u003e result as the original \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eBut there are some advances here. We define the \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e in only one place. That means we can change things a bit easier now by changing these variables instead of using find-and-replace (\u003ccode\u003e2 * 6 = 12\u003c/code\u003e) twelve times.\u003c/p\u003e  \u003cp\u003eOur problem now is that our function has the \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e locked in. If we could make it possible to tell each \u003cem\u003ecall\u003c/em\u003e of the function \"Hey use these \u003ccode\u003eString\u003c/code\u003es instead\" we could get more \u003cem\u003egeneral\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eThat's the purpose of \u003cem\u003eparameters\u003c/em\u003e. \u003cem\u003eParameters\u003c/em\u003e are locally-scoped variables that are usable (\"scoped\") to inside the function. In our example, our variables \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e should become \u003cem\u003eparameters\u003c/em\u003e.  They're defined inside of the \u003cem\u003efunction declaration's\u003c/em\u003e \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseDog(dogName, dogBreed) { ... ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJavaScript will assign the \u003cem\u003earguments\u003c/em\u003e of \"Byron\" and \"poodle\" to the \u003cem\u003eparameters\u003c/em\u003e \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e when this function is called like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexerciseDog(\"Byron\", \"poodle\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe full \u003cem\u003efunction declaration\u003c/em\u003e for \u003ccode\u003eexerciseDog\u003c/code\u003e is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseDog(dogName, dogBreed) {\u003cbr\u003e  console.log(`Wake ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Leash ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk to the park ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Throw the frisbee for ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk home with ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Unleash ${dogName} the ${dogBreed}`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the function is \u003cem\u003ecalled\u003c/em\u003e, it assigns \u003ccode\u003edogName = \"Byron\"\u003c/code\u003e and \u003ccode\u003edogBreed = \"poodle\"\u003c/code\u003e. The parameters are usable inside the function body \u003cem\u003eas if\u003c/em\u003e they had been set with \u003ccode\u003econst\u003c/code\u003e inside the function.\u003c/p\u003e  \u003cp\u003eBecause our function is now more \u003cem\u003egeneral\u003c/em\u003e, we can:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexerciseDog(\"Boo\", \"puggle\");\u003cbr\u003eexerciseDog(\"Jojo\", \"mutt\");\u003cbr\u003eexerciseDog(\"Emmeline\", \"bernedoodle\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf expected arguments aren't given, the parameters won't be set. The parameters' values will be \u003ccode\u003eundefined\u003c/code\u003e.  This is just like non-initialized variables; if you don't assign a value they're \u003ccode\u003eundefined\u003c/code\u003e.  \u003cstrong\u003eThis will  not cause an error in JavaScript\u003c/strong\u003e. This can lead to humorous bugs like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"Wake undefined the undefined\"  // From: console.log(\"Wake ${dogName} the ${dogBreed}\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can assign default arguments to our parameters. While it's not as attention-grabbing as a real error, it's a helpful signal that we've run off the rails.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseDog(dogName=\"ERROR the Broken Dog\", dogBreed=\"Sick Puppy\") { ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn summary, we went from:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea list of operations\u003c/li\u003e \u003cli\u003eto a wrapped abstraction called a function\u003c/li\u003e \u003cli\u003eto a more general version of the function\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eDemonstrate \u003cem\u003eReturn Values\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eSometimes it's helpful to send something \u003cem\u003eback\u003c/em\u003e to the place where the function was \u003cem\u003ecalled\u003c/em\u003e. It's like a \"summary\" of what happened in the function. In real life, we expect the function \"bake a cake\" to return a \"cake\". Or we expect \"Visit the ATM\" to return paper money. Functions in JavaScript can also return things.  Consider:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003econst weatherToday = \"Rainy\";\u003cbr\u003e\u003cbr\u003efunction exerciseDog(dogName, dogBreed) {\u003cbr\u003e  if (weatherToday === \"Rainy\") {\u003cbr\u003e    return `${dogName} did not exercise due to rain`;\u003cbr\u003e  }\u003cbr\u003e  console.log(`Wake ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Leash ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk to the park ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Throw the frisbee for ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk home with ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Unleash ${dogName} the ${dogBreed}`);\u003cbr\u003e  return `${dogName} is happy and tired!`\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst result = exerciseDog(\"Byron\", \"poodle\");\u003cbr\u003econsole.log(result); // =\u0026gt; \"Byron did not exercise due to rain\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the JavaScript engine encounters a \u003ccode\u003ereturn\u003c/code\u003estatement it \"returns\" the value of the thing that appears to the right of the word. The thing could be a \u003ccode\u003eString\u003c/code\u003e, a \u003ccode\u003eNumber\u003c/code\u003e or an \u003cem\u003eexpression\u003c/em\u003e like \u003ccode\u003e1 + 1\u003c/code\u003e (which returns, \u003ccode\u003e2\u003c/code\u003e, sensibly enough).\u003c/p\u003e  \u003cp\u003eWhen a \u003ccode\u003ereturn\u003c/code\u003e is reached in the code, no further code behavior happens. Above,  if \u003ccode\u003eweatherToday === \"Rainy\"\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e, \u003cstrong\u003ethe only thing that happens\u003c/strong\u003e is  the evaluation and return of the \u003ccode\u003eString\u003c/code\u003e \u003ccode\u003e${dogName} did not exercise due to rain\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eReturn values can be saved to variables. Or they can be used as inputs to other functions.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we learned about the  idea of abstraction, both in real life and in code. Abstractions reduce complexity by allowing us to think in groups of activities or things instead of being fully zoomed-in all the time. JavaScript functions are defined:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction functionName(parameter1, parameter2, parameter3) {\u003cbr\u003e  body code goes here\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFunctions are \"called\" by entering the function's name followed by the \u003cem\u003einvocation operator\u003c/em\u003e, \u003ccode\u003e()\u003c/code\u003e. \"Invoke\" or \"execute\" mean the same thing. Arguments that the function declaration expects should be passed inside of the invocation operator. Functions can, but are not obligated to, return \u003cem\u003ereturn values\u003c/em\u003e at the end of their execution. Return values are often results of a process, grand totals, or success / failure data.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions\"\u003eFunctions — reusable blocks of code\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values\"\u003eFunction return values\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\"\u003eFunction declaration\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"review-functions"},{"id":173442,"title":"Functions Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-basics-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice writing functions\u003c/li\u003e \u003cli\u003eExplain calling functions from within other functions\u003c/li\u003e \u003cli\u003ePractice basics of control flow and \u003ccode\u003ereturn\u003c/code\u003e statements\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eScuber, our transportation company, has gained some traction among moms and dads in New York City. It has also received a few requests.\u003c/p\u003e  \u003cp\u003eFirst, Scuber's executives want to ensure that Scuber's headquarters is near its customers. They would like you to write a function that takes in a pickup location for a passenger, and returns the number of blocks from its headquarters on 42nd Street. For example, if the pickup location is \u003ccode\u003e50\u003c/code\u003e (i.e., 50th Street), the return value should be \u003ccode\u003e8\u003c/code\u003e. The function's return value can then be used for another function that translates the number of blocks from headquarters to the distance in feet.\u003c/p\u003e  \u003cp\u003eSecond, customers want Scuber to calculate the number of feet travelled based on the distance. Write a function called \u003ccode\u003edistanceTravelledInFeet\u003c/code\u003e that takes in the beginning and destination blocks and returns the number of feet travelled. Each block in Manhattan is 264 feet long. For example \u003ccode\u003edistanceTravelledInFeet(34, 38)\u003c/code\u003e representing 34th St to 38th St, returns 1056 (\u003ccode\u003e(38-34)*264\u003c/code\u003e). You can assume that we are only calculating distance uptown/downtown, not from river to river.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e and look at the tests currently breaking. You will need to write these functions from scratch, and test them as you go to get them working. Remember to look through the tests, which are located in \u003ccode\u003etest/indexTest.js\u003c/code\u003e. It's a bit easier to think through the testing process in steps.\u003c/p\u003e  \u003col\u003e \u003cli\u003eThe first describe statement, \u003ccode\u003edescribe('index.js', function()\u003c/code\u003e, tells us the file being tested. Here, it's the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/li\u003e \u003cli\u003eOur second describe statement, \u003ccode\u003edescribe('distanceFromHqInBlocks()', function()\u003c/code\u003e, lets us know what the name of our function is. In this case, our test is expecting to find a function called \u003ccode\u003edistanceFromHqInBlocks()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eOur third statement, \u003ccode\u003eit('returns a distance in blocks', function()\u003c/code\u003e, describes what our function is doing. In this case, we're going to be calculating some kind of distance.\u003c/li\u003e \u003cli\u003eFinally, our last statement, \u003ccode\u003eexpect(distanceFromHqInBlocks(43)).to.equal(1)\u003c/code\u003e, tells us what our test is expecting the result to be. There are a couple really important clues here. Our first one is the 43. That tells us that our function is expecting an argument to be passed in, so we'll need to specify some kind of variable. Our other clue is the 1, because that tells us what the result is. If we're passing in 43, we're expecting our function to calculate that it's 1 block from headquarters.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eTry reading through all of the tests first, before you write any code! It will help you decide how to structure your code in the cleanest and most efficient manner.\u003c/p\u003e  \u003cp\u003eTo complete all of your work assignments, you'll need to write four functions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003edistanceFromHqInBlocks\u003c/code\u003e: Returns the number of blocks from Scuber's headquarters to the pickup location.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003edistanceFromHqInFeet\u003c/code\u003e: Returns the number of feet from Scuber's headquarters to the pickup location. You can use your \u003ccode\u003edistanceFromHqInBlocks\u003c/code\u003e function to help return the correct value here. Try something like this:\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003efunction distanceFromHqInBlocks (someValue) {\u003cbr\u003e  //returns the number of blocks given a value\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction distanceFromHqInFeet (someValue) {\u003cbr\u003e  distanceFromHqInBlocks(someValue);\u003cbr\u003e  // calls distanceFromHqInBlocks from inside the distanceFromHqInFeet function, passing the argument from distanceFromHqInFeet into distanceFromHqInBlocks\u003cbr\u003e  //the return value of distanceFromHqInBlocks can then be used to calculate feet\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003edistanceTravelledInFeet\u003c/code\u003e: Calculates the number of feet a passenger travels given a starting block and an ending block — it only calculates distance North and South (uptown/downtown). It uses the knowledge that a block is 264 feet long.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003ecalculatesFarePrice\u003c/code\u003e: Given the same starting and ending block as the previous test (\u003cem\u003ehint hint\u003c/em\u003e), return the fare for the customer. The first four hundred feet are free. For a distance between 400 and 2000 feet, the price is 2 cents per foot (not including 400, which are free!). Then Scuber charges a flat fare for a distance over 2000 feet and under 2500 feet. Finally, Scuber does not allow any rides over 2500 feet — the function returns \u003ccode\u003e'cannot travel that far'\u003c/code\u003e if a ride over 2500 feet is requested.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g1daea43705565d1f7f0b40343a906b7f"},{"id":173443,"title":"Functions: Continued","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-javascript-functions-continued\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-functions-continued\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-functions-continued/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine a function using a function declaration\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003ehoisting\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003efunction expression\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eanonymous function\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine a function using a function expression\u003c/li\u003e \u003cli\u003eDefine an IIFE: \u003ccode\u003eInstantly-Invoked Function Expression\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003efunction-level scope\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003escope chain\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eclosure\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThis lab describes some more advanced concepts related to JavaScript functions. Be sure to take time to experiment or read up on a concept if you're not comfortable with the idea before moving on. If you're struggling here, the remainder of this module will be challenging. Fix any gaps now before moving on.\u003c/p\u003e  \u003cp\u003eWe also recommend that you complete the lab as you read through the sections. Reinforcing what you read by physically typing in the code will help make sure the concepts are locked in. We'll prompt you when it's a good time to shift modes from \"reading along\" to coding.\u003c/p\u003e  \u003ch2\u003eDefine a Function Using Function Declaration\u003c/h2\u003e  \u003cp\u003eIn JavaScript, the most common way to define functions is with a \u003cstrong\u003efunction declaration\u003c/strong\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction razzle() {\u003cbr\u003e  console.log(\"You've been razzled!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe word \u003ccode\u003erazzle\u003c/code\u003e becomes a \u003cem\u003epointer\u003c/em\u003e to some stored, potential, not-yet-actually-run bit of work (the function). We use the \u003cem\u003epointer\u003c/em\u003e to \u003cem\u003ecall\u003c/em\u003e or \u003cem\u003einvoke\u003c/em\u003e the function. We \u003cem\u003ecall\u003c/em\u003e the function by adding \u003ccode\u003e()\u003c/code\u003e after the \u003cem\u003epointer\u003c/em\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction razzle() {\u003cbr\u003e  console.log(\"You've been razzled!\");\u003cbr\u003e}\u003cbr\u003erazzle();\u003cbr\u003e//=\u0026gt; \"You've been razzled!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInterestingly, you can write function declarations \u003cem\u003eafter\u003c/em\u003e you call them:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erazzle(); //=\u0026gt; \"You've been razzled!\"\u003cbr\u003efunction razzle() {\u003cbr\u003e  console.log(\"You've been razzled!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFunctions can be passed arguments, given default arguments, etc.  Here's a brief code synopsis:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction razzle(lawyer=\"Billy\", target=\"'em\") {\u003cbr\u003e  console.log(`${lawyer} razzle-dazzles ${target}!`);\u003cbr\u003e}\u003cbr\u003erazzle(); //=\u0026gt; Billy razzle-dazzles 'em!\u003cbr\u003erazzle(\"Methuselah\", \"T'challah\"); //=\u0026gt; Methuselah razzle-dazzles T'challah! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eLAB\u003c/strong\u003e: Implement a function called \u003ccode\u003esaturdayFun\u003c/code\u003e. It should return a \u003ccode\u003eString\u003c/code\u003e like \u003ccode\u003e\"This Saturday, I want to ....!\"\u003c/code\u003e Fill in the \u003ccode\u003e...\u003c/code\u003e with the activity that's passed in as the first parameter. If nothing is passed in, default to \u003ccode\u003e\"roller-skate\"\u003c/code\u003e. Run \u003ccode\u003elearn\u003c/code\u003e to verify you've gotten the first set of tests passing before continuing with the lesson.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eHoisting\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eJavaScript's ability to call functions \u003cem\u003ebefore\u003c/em\u003e they appear in the code is called \u003cem\u003ehoisting\u003c/em\u003e. For hoisting to work, \u003cstrong\u003ethe function must be defined using a function declaration\u003c/strong\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eFunction Expression\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe've learned that programming languages feature \u003cem\u003eexpressions\u003c/em\u003e: arrangements of constants, variables, and symbols that, when interpreted by the language, produce a \u003cem\u003evalue\u003c/em\u003e. To review, open up your browser console and type in these examples:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1 + 1; //=\u0026gt; 2\u003cbr\u003e\"Razzle \" + \"dazzle!\"; //=\u0026gt; \"Razzle dazzle!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe examples above are expressions that return \u003cem\u003eprimitive values\u003c/em\u003e, but JavaScript also has \u003cem\u003efunction expressions\u003c/em\u003e that look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003evalue\u003c/em\u003e returned by this expression is the function itself. Go ahead and enter the above into the browser console; you should see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eUncaught SyntaxError: Function statements require a function name \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe problem is that, when the function expression appears by itself as shown above, \u003cstrong\u003eJavaScript does not recognize it as a function expression\u003c/strong\u003e; it instead interprets it as a function declaration that's missing its name. One way to tell the JavaScript engine that it's a function expression is to use the \u003ccode\u003egrouping operator ()\u003c/code\u003e to wrap the entire thing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(function() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRecall that the grouping operator is usually used in arithmetic operations to tell the JavaScript engine to evaluate the value that's inside it first. It's serving a similar purpose in this case: it's telling JavaScript to interpret what's inside the parentheses as a \u003cem\u003evalue\u003c/em\u003e. With the grouping operator in place, the JavaScript engine recognizes our function as a function expression. Enter the function into your console again, this time using the grouping operator. You should see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eƒ () {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJavaScript now correctly shows us the return value of our function expression: a \u003cem\u003efunction\u003c/em\u003e (indicated by the \u003ccode\u003eƒ ()\u003c/code\u003e) storing the work of logging our message.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eAnonymous Function\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eAn \u003cstrong\u003eanonymous function\u003c/strong\u003e is, quite simply, a function that doesn't have a name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUnlike a function declaration, there's no function name in front of the \u003ccode\u003e()\u003c/code\u003e. Note, however, that if we don't assign a name to the function, we have no way to call it. We lose access to our function immediately after it's created. So how can we invoke an anonymous function? We've seen one way before: we can use it as a callback function. For example, you'll often see anonymous functions passed as an argument to an event listener:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst button = document.getElementById('button');\u003cbr\u003ebutton.addEventListener('click', function() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur anonymous function is being passed as an argument to \u003ccode\u003eaddEventListener\u003c/code\u003e. The JavaScript engine \"stores it away\" as work to be executed later, when the button is clicked.\u003c/p\u003e  \u003ch2\u003eDefine a Function Using a Function Expression\u003c/h2\u003e  \u003cp\u003eAnother way we can solve the problem of accessing an anonymous function is by declaring a variable and assigning the function as its value. Recall that any expression can be assigned to a variable; this includes function expressions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fn = function() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code above defines our function using a function expression. If we ask JavaScript what's in \u003ccode\u003efn\u003c/code\u003e, it tells us:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efn; //=\u0026gt; ƒ () { console.log(\"Yet more razzling\") } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, \u003ccode\u003efn\u003c/code\u003e is a \u003cem\u003epointer\u003c/em\u003e to the stored block of work that hasn't yet been invoked. Just as with \u003cstrong\u003efunction declaration\u003c/strong\u003e, to actually do the work, we need to \u003cem\u003einvoke\u003c/em\u003e or \u003cem\u003ecall\u003c/em\u003e the function. We do this by adding \u003ccode\u003e()\u003c/code\u003e to the end of our \"pointer\", the variable name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fn = function() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} //=\u0026gt; undefined\u003cbr\u003efn; //=\u0026gt; ƒ () { console.log(\"Yet more razzling\") }\u003cbr\u003efn(); // \"Yet more razzling\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAlso as with a function declaration, if we need to pass arguments to the function, we would include those in the parentheses when we call the function.\u003c/p\u003e  \u003cp\u003eWe now know how to define a function as a function expression. Very importantly, \u003cstrong\u003e\u003cem\u003efunction expressions are not hoisted\u003c/em\u003e\u003c/strong\u003e. The same is true for any variable assignment: if we assign a \u003ccode\u003eString\u003c/code\u003e or the result of an arithmetic expression to a variable, those assignments are not hoisted either.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eLAB\u003c/strong\u003e: Implement a function expression called \u003ccode\u003emondayWork\u003c/code\u003e. The function should return a \u003ccode\u003eString\u003c/code\u003e like \u003ccode\u003e\"This Monday, I will ... .\"\u003c/code\u003e Fill in the \u003ccode\u003e...\u003c/code\u003e with the activity that's passed in as the first parameter. If nothing is passed in, default to \u003ccode\u003e\"go to the office\"\u003c/code\u003e. Run \u003ccode\u003elearn\u003c/code\u003e to verify you've gotten this set of tests passing before continuing with the lesson.\u003c/p\u003e  \u003ch2\u003eDefine an IIFE: Instantly-Invoked Function Expression\u003c/h2\u003e  \u003cp\u003eAnother way to invoke an anonymous function is by creating what's known as an \u003ccode\u003einstantly-invoked function expression (IIFE)\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAs a thought experiment, consider what happens here:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(function(baseNumber){ return baseNumber + 3 })(2); //=\u0026gt; ??? \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe recognize the first \u003ccode\u003e()\u003c/code\u003e as the grouping operator that tells the JavaScript engine to interpret the contents as a value — in this case, a function expression. What this means is that, in the IIFE statement, the value returned by the first set of parentheses is an anonymous function, which can be invoked (instantly).\u003c/p\u003e  \u003cp\u003eThe second \u003ccode\u003e()\u003c/code\u003e are the \u003ccode\u003e()\u003c/code\u003e of function invocation. When we put them immediately after the first set of parentheses, we're invoking the function that those parentheses return immediately after defining it. Try it out in the browser console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(function(baseNumber){ return baseNumber + 3; })(2); //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInterestingly, any variables, functions, \u003ccode\u003eArray\u003c/code\u003es, etc. that are defined \u003cem\u003einside\u003c/em\u003e of the function expression's body \u003cem\u003ecan't\u003c/em\u003e be seen \u003cem\u003eoutside\u003c/em\u003e of the IIFE. To see this, check the value of \u003ccode\u003ebaseNumber\u003c/code\u003e in the console. It's like opening up a micro-dimension, a bubble-universe, doing all the work you could ever want to do there, and then closing the space-time rift. We'll see some of the practical power of \"hiding things\" in IIFEs a little later in this lesson.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eFunction-Level Scope\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eJavaScript exhibits \"function-level\" scope. This means that if a function is defined \u003cem\u003einside another\u003c/em\u003e function, the inner function has access to all the parameters of, as well as any variables defined in, the outer function. This works recursively: if we nest a third function inside the inner function, it will have access to all the variables of both the inner and outer enclosing functions. Each of the enclosing parents' scopes are made available via the \u003cem\u003escope chain\u003c/em\u003e. We will define the scope chain a bit later in this lesson. Let's start by seeing it in action.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: This is where people \u003cstrong\u003ereally\u003c/strong\u003e start to get awed by JavaScript.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eConsider this code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction outer(greeting, msg=\"It's a fine day to learn\") { // 2\u003cbr\u003e  const innerFunction =  function(name, lang=\"Python\") { // 3\u003cbr\u003e    return `${greeting}, ${name}! ${msg} ${lang}`; // 4\u003cbr\u003e  }\u003cbr\u003e  return innerFunction(\"student\", \"JavaScript\"); // 5\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eouter(\"Hello\"); // 1\u003cbr\u003e//=\u0026gt; \"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's break this down:\u003c/p\u003e  \u003col\u003e \u003cli\u003eWe call \u003ccode\u003eouter\u003c/code\u003e, passing \u003ccode\u003e\"Hello\"\u003c/code\u003e as an argument.\u003c/li\u003e \u003cli\u003eThe argument (\u003ccode\u003e\"Hello\"\u003c/code\u003e) is saved in \u003ccode\u003eouter\u003c/code\u003e's \u003ccode\u003egreeting\u003c/code\u003e parameter. The other parameter, \u003ccode\u003emsg\u003c/code\u003e, is set to a default value.\u003c/li\u003e \u003cli\u003eHere's our old friend the function expression. It expects two arguments, to be stored in the parameters \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elang\u003c/code\u003e, and \u003ccode\u003elang\u003c/code\u003e is assigned the default value of \u003ccode\u003e\"Python\"\u003c/code\u003e. The function expression itself is saved in the local variable \u003ccode\u003einnerFunction\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eInside \u003ccode\u003einnerFunction\u003c/code\u003e we make use of its parameters, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elang\u003c/code\u003e, \u003cstrong\u003e\u003cem\u003eas well as\u003c/em\u003e\u003c/strong\u003e the \u003ccode\u003egreeting\u003c/code\u003e and \u003ccode\u003emsg\u003c/code\u003e parameters defined in innerFunction's containing (parent) function, \u003ccode\u003eouter\u003c/code\u003e. \u003ccode\u003einnerFunction\u003c/code\u003e has access to those variables via the scope chain.\u003c/li\u003e \u003cli\u003eFinally, inside \u003ccode\u003eouter\u003c/code\u003e, we invoke \u003ccode\u003einnerFunction\u003c/code\u003e, passing arguments that get stored in \u003ccode\u003einnerFunction\u003c/code\u003e's \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elang\u003c/code\u003e parameters.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eThis might look a little bit weird, but it generally makes sense to our intuition about scopes: inner things can see their parent outer things.\u003c/p\u003e  \u003cp\u003eNote that currently, the values of the arguments being passed to \u003ccode\u003einnerFunction\u003c/code\u003e are part of the \u003cstrong\u003edefinition\u003c/strong\u003e of \u003ccode\u003eouter\u003c/code\u003e. In order to change those values we have to modify the \u003ccode\u003eouter\u003c/code\u003e function. This is not ideal.\u003c/p\u003e  \u003cp\u003eWith a simple change, something miraculous can happen. Rather than having \u003ccode\u003eouter\u003c/code\u003e return the result of calling \u003ccode\u003einnerFunction\u003c/code\u003e, let's have it return the function itself:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction outer(greeting, msg=\"It's a fine day to learn\") {\u003cbr\u003e  const innerFunction =  function(name, lang=\"Python\") {\u003cbr\u003e    return `${greeting}, ${name}! ${msg} ${lang}`;\u003cbr\u003e  }\u003cbr\u003e  return innerFunction;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe return value of \u003ccode\u003eouter\u003c/code\u003e is now an \u003cstrong\u003eanonymous function\u003c/strong\u003e. To invoke it, we update the function call as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eouter(\"Hello\")(\"student\", \"JavaScript\");\u003cbr\u003e//=\u0026gt; \"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe function call is processed by the JavaScript engine from left to right. First, \u003ccode\u003eouter\u003c/code\u003e is called with the argument \"Hello.\" The return value of calling \u003ccode\u003eouter(\"Hello\")\u003c/code\u003e is itself a function and, therefore, can itself be called. We do this by chaining on the second set of parentheses. This is basically the same concept as assigning a function expression to a variable and using the variable name followed by \u003ccode\u003e()\u003c/code\u003e to invoke the function. You can almost think of \u003ccode\u003eouter(\"Hello\")\u003c/code\u003e as the \"name\" of the function that's returned by \u003ccode\u003eouter\u003c/code\u003e. It's the same as if we did this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst storedFunction = outer(\"Hello\");\u003cbr\u003estoredFunction(\"student\", \"JavaScript\");\u003cbr\u003e//=\u0026gt; \"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that we are no longer calling \u003ccode\u003einnerFunction\u003c/code\u003e from inside \u003ccode\u003eouter\u003c/code\u003e. Amazingly, the code works \u003cstrong\u003e\u003cem\u003eexactly the same\u003c/em\u003e\u003c/strong\u003e: it \u003cstrong\u003e\u003cem\u003estill\u003c/em\u003e\u003c/strong\u003e has access to those parent function's variables. It's like a little wormhole in space-time to the \u003ccode\u003eouter\u003c/code\u003e's scope!\u003c/p\u003e  \u003cp\u003eWe can tighten this code up a bit more: instead of assigning the function expression to \u003ccode\u003einnerFunction\u003c/code\u003e and returning that, let's just return the function expression.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction outer(greeting, msg=\"It's a fine day to learn\") {\u003cbr\u003e  return function(name, lang=\"Python\") {\u003cbr\u003e    return `${greeting}, ${name}! ${msg} ${lang};`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eouter(\"Hello\")(\"student\", \"JavaScript\")\u003cbr\u003e//=\u0026gt; \"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo review: we first called \u003ccode\u003eouter\u003c/code\u003e, passing in the argument \"Hello\". \u003ccode\u003eouter\u003c/code\u003e \u003cstrong\u003ereturned an anonymous function\u003c/strong\u003e inside which the default value of \u003ccode\u003emsg\u003c/code\u003e and the passed-in value of \u003ccode\u003egreeting\u003c/code\u003e have now been set. It's almost as if \u003ccode\u003eouter\u003c/code\u003e returned:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction(name, lang=\"Python\") { // The \"inner\" function\u003cbr\u003e  return `Hello, ${name}! It's a fine day to learn ${lang}`\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe invoked this returned \u003cem\u003e\"inner\" function\"\u003c/em\u003e by adding the second set of parentheses and passing the arguments \u003ccode\u003e\"student\"\u003c/code\u003e and \u003ccode\u003e\"JavaScript\"\u003c/code\u003e, which were stored in \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elang\u003c/code\u003e. This filled in the final two values inside of the template string and returned:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDefine \u003ccode\u003eClosure\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn the previous example, we could call the \"inner\" function, the \u003cstrong\u003eanonymous function\u003c/strong\u003e, a \"closure.\" It \"encloses\" the function-level scope of its parent. And, like a backpack, it can carry out the knowledge that it saw — \u003cem\u003eeven when you're out of the parent's scope\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eRecall the IIFE discussion. Since what's inside an IIFE can't be seen, if we wanted to let just tiny bits of information leak back out, we might want to pass that information back out, through a closure.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst array = (\u003cbr\u003e  function(thingToAdd) {\u003cbr\u003e    const base = 3;\u003cbr\u003e    return [\u003cbr\u003e      function() { return base + thingToAdd; },\u003cbr\u003e      function() { return base; }\u003cbr\u003e    ];\u003cbr\u003e  }\u003cbr\u003e)(2) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the value on the right of the \u003ccode\u003e=\u003c/code\u003e in the first line is a function expression. That function takes a single argument and returns an array that contains two functions. The \u003ccode\u003e(2)\u003c/code\u003e after the function expression executes that function (instantly), and the two inner functions are stored in the \u003ccode\u003earray\u003c/code\u003e variable.\u003c/p\u003e  \u003cp\u003eGo ahead and copy the code above into your browser console and take a look at the values of the two elements of \u003ccode\u003earray\u003c/code\u003e. You should see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earray[0]; //=\u0026gt; ƒ () { return base + thingToAdd; }\u003cbr\u003earray[1]; //=\u0026gt; ƒ () { return base; } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, if you try looking at the value of \u003ccode\u003ebase\u003c/code\u003e in the console you'll get a reference error: the value of \u003ccode\u003ebase\u003c/code\u003e is not accessible outside the function it's defined in. Now go ahead and \u003cem\u003ecall\u003c/em\u003e the two returned functions; you should see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earray[0](); //=\u0026gt; 5\u003cbr\u003earray[1](); //=\u0026gt; 3 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe two functions being returned in \u003ccode\u003earray\u003c/code\u003e are \u003cstrong\u003eclosures\u003c/strong\u003e; they have access to the \u003ccode\u003ebase\u003c/code\u003e variable because it's defined in their parent function. When they're executed, they \"let out\" the values of the sum and the original base number, allowing us to see them.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eScope Chain\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe mechanism behind all the cool stuff we just saw is the \u003cem\u003escope chain\u003c/em\u003e which allows functions defined inside functions (inside functions) to access all their parent (and grandparent) scopes' variables. Here's a simple example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction demoChain(name) {\u003cbr\u003e  const part1 = 'hi'\u003cbr\u003e  return function() {\u003cbr\u003e    const part2 = 'there'\u003cbr\u003e    return function() { \u003cbr\u003e      console.log(`${part1.toUpperCase()} ${part2} ${name}`);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edemoChain(\"Dr. Stephen Strange\")()() //=\u0026gt; HI there Dr. Stephen Strange \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen it is called, the innermost function has access to \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003epart1\u003c/code\u003e, and \u003ccode\u003epart2\u003c/code\u003e through the \u003cem\u003escope chain\u003c/em\u003e. As a result, when the \u003ccode\u003econsole.log()\u003c/code\u003e statement is run, the string includes all three values. That's awesome wormhole, space-time magic!\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eLAB\u003c/strong\u003e:\u003c/p\u003e  \u003cp\u003eImplement a function called \u003ccode\u003ewrapAdjective\u003c/code\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eIt should return a function  \u003cul\u003e \u003cli\u003eThis \"inner\" function should:\u003c/li\u003e \u003cli\u003etake a single parameter that should default to \u003ccode\u003e\"special\"\u003c/code\u003e. Name it however you wish.\u003c/li\u003e \u003cli\u003ereturn a \u003ccode\u003eString\u003c/code\u003e of the form \"You are ...\" where \u003ccode\u003e...\u003c/code\u003e should be the adjective this function received wrapped in visual flair\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eIt should take as parameter a \u003ccode\u003eString\u003c/code\u003e that will be used to create visual flair\u003c/li\u003e \u003cli\u003eYou may call the parameter whatever you like, but its default value should be \u003ccode\u003e\"*\"\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCall example: \u003ccode\u003econst encouragingPromptFunction = wrapAdjective(\"!!!\")\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThus a total call should be:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewrapAdjective(\"%\")(\"a dedicated programmer\") //=\u0026gt; \"You are %a dedicated programmer%!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e to verify you've gotten this set of tests passing.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've covered the basics of function declaration, invocation, and function scope. As a refresher on your skills, we've provided a simple lab to make sure that you're set for the new information coming up in the rest of this module.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/First-class_function\"\u003eWikipedia — First-class function\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/705173/what-is-meant-by-first-class-object\"\u003eStackOverflow — What is meant by 'first class object'?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://web.archive.org/web/20170606141950/http://helephant.com/2008/08/19/functions-are-first-class-objects-in-javascript/\"\u003eHelephant — Functions are first class objects in javascript (Wayback Machine)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://2ality.com/2012/09/expressions-vs-statements.html\"\u003e2ality — Expressions versus statements in JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/web/JavaScript/Reference/Operators/function\"\u003eMDN — Functions\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements\"\u003eMDN — Statements and declarations\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g28d20289376b2cea6dd0f4d6d480e304"},{"id":173444,"title":"Arrow Functions","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-arrow-functions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-arrow-functions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-arrow-functions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview declaring a function using a function expression\u003c/li\u003e \u003cli\u003eDeclare a function using arrow syntax\u003c/li\u003e \u003cli\u003eDescribe situations where arrow functions are used\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe original style for defining functions in JavaScript is the \u003cem\u003efunction declaration\u003c/em\u003e. But JavaScript has two other ways to write functions: the \u003cem\u003efunction expression\u003c/em\u003e and the \u003cem\u003earrow function\u003c/em\u003e. In this lesson, we will start by briefly reviewing function expressions, then we will learn how to write functions using \u003cem\u003earrow syntax\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eReview: Declare a Function Using a Function Expression\u003c/h2\u003e  \u003cp\u003eThe first method we learned for defining a function is the \u003cem\u003efunction declaration\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction foo() {\u003cbr\u003e  return 'bar';\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut, as we've learned, a function can also be written as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foo = function() {\u003cbr\u003e  return 'bar';\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efunction() {...}\u003c/code\u003e to the right of the assignment operator (\u003ccode\u003e=\u003c/code\u003e) is called a \u003cem\u003efunction expression\u003c/em\u003e. The best way to understand function expressions is by analogy.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst sum = 1 + 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEvaluate the expression \u003ccode\u003e1 + 1\u003c/code\u003e, returning \u003ccode\u003e2\u003c/code\u003e, and assign it to the variable \u003ccode\u003esum\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst difference = 10 - 1; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEvaluate the expression \u003ccode\u003e10 - 1\u003c/code\u003e, returning \u003ccode\u003e9\u003c/code\u003e, and assign it to the variable \u003ccode\u003edifference\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foo = function() {\u003cbr\u003e  return 'bar';\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEvaluate the expression \u003ccode\u003efunction() { return 'bar' }\u003c/code\u003e, returning a thing that can be called, and assign it to the variable \u003ccode\u003efoo\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe've also learned that the function expression (again, the thing to the right of \u003ccode\u003e=\u003c/code\u003e) is known as an \u003cem\u003eanonymous function\u003c/em\u003e. It doesn't have a name associated with it like you see in a \u003cem\u003efunction declaration\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eHowever, when we assign an anonymous function to a variable, we have a name that points to a callable thing. We can call this anonymous function by invoking \u003ccode\u003efoo()\u003c/code\u003e. That anonymous function is now, for all practical purposes, named \u003ccode\u003efoo\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThere are a few subtle differences between \u003cem\u003efunction declarations\u003c/em\u003e and \u003cem\u003efunction expressions\u003c/em\u003e, but they are very minute. Neither is really better than the other. Over time, conventions have evolved in the JavaScript programming community for when to use one vs. the other; you will develop a sense for these as you continue to learn JavaScript. Ultimately, however, you are free to use whichever one you prefer.\u003c/p\u003e  \u003ch2\u003eDeclare a Function Using An Arrow Function\u003c/h2\u003e  \u003cp\u003eThe arrow syntax builds on the syntax of the function expression and provides a shorthand way to declare functions that doesn't require using the \u003ccode\u003efunction\u003c/code\u003e keyword. In fact, in cases where the function body consists of one line of code, we can define it in a single line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst add = (parameter1, parameter2) =\u0026gt; parameter1 + parameter2;\u003cbr\u003eadd(2,3); //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFirst, we declare a variable \u003ccode\u003eadd\u003c/code\u003e and assign an \u003cem\u003eanonymous function\u003c/em\u003e as its value. Nothing new there. So, let's look to the right of the \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(parameter1, parameter2) =\u0026gt; parameter1 + parameter2;\u003cbr\u003e// Parameter list ^^^^^   // Function Body ^^^^^^^^ \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is a very short function body! It adds \u003ccode\u003eparameter1\u003c/code\u003e and \u003ccode\u003eparameter2\u003c/code\u003e. There are a couple of things to be aware of in the code above: first, note that if the function body consists of a single expression, we no longer need to wrap it in curly braces. Second, \u003cstrong\u003ewhen there are no braces, arrow functions have an \u003cem\u003eimplicit\u003c/em\u003e return\u003c/strong\u003e, i.e., they \u003cem\u003eautomatically\u003c/em\u003e return the result of the last expression! \u003cstrong\u003eThis is the only situation in which a JavaScript function doesn't require \u003cem\u003eexplicit return\u003c/em\u003e with the \u003ccode\u003ereturn\u003c/code\u003e keyword.\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eTo the left of the \u003ccode\u003e=\u0026gt;\u003c/code\u003e, you see the parameters that are defined for the function. This looks similar to what we would have done with a function declaration: list the parameters, separated by commas, inside of \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf your arrow function has only one parameter, the \u003ccode\u003e()\u003c/code\u003e around the parameter becomes optional:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst twoAdder = x =\u0026gt; x + 2;\u003cbr\u003e// is the same as\u003cbr\u003econst twoAdder = (x) =\u0026gt; x + 2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAlmost all developers will drop the parentheses in this case.\u003c/p\u003e  \u003cp\u003eIf we need to do more work than return a single expression, we'll need \u003ccode\u003e{}\u003c/code\u003e to wrap the multiple lines of code, \u003cstrong\u003eand\u003c/strong\u003e we'll have to declare a \u003ccode\u003ereturn\u003c/code\u003e. That sweet no-\u003ccode\u003ereturn\u003c/code\u003e syntax is only available if your function body is one expression long.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst sum = (parameter1, parameter2) =\u0026gt; {\u003cbr\u003e  console.log(`Adding ${parameter1}`);\u003cbr\u003e  console.log(`Adding ${parameter2}`);\u003cbr\u003e  return parameter1 + parameter2;\u003cbr\u003e}\u003cbr\u003esum(1,2); //=\u0026gt; 3 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDescribe Situations Where Arrow Functions Are Used\u003c/h2\u003e  \u003cp\u003eArrow functions are often used in JavaScript's \u003cem\u003eiterator\u003c/em\u003e methods. An iterator is a method that allows you to deal with a set of data one at a time. For example, if you had a group of students' essays, you could only grade them one at a time.\u003c/p\u003e  \u003cp\u003eIn addition to looping constructs such as \u003ccode\u003efor\u003c/code\u003e, JavaScript includes a number of \u003cem\u003eadvanced iterators\u003c/em\u003e; we'll learn about these later in this section. For now, to see an example of how arrow functions are used in these methods, we'll preview JavaScript's \u003ccode\u003e.map()\u003c/code\u003e method.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003e.map()\u003c/code\u003e method is called on an \u003ccode\u003eArray\u003c/code\u003e and takes a function as an argument. It iterates through the array, passing each element in turn to the function. It then takes that function's return value and adds it to a new array, leaving the original array unchanged. That new array, containing the modified elements, is returned at the end after all iterations are complete.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst nums = [1,2,3];\u003cbr\u003econst squares = nums.map(x =\u0026gt; x ** 2); \u003cbr\u003esquares; //=\u0026gt; [1,4,9]\u003cbr\u003enums; //=\u0026gt; [1,2,3] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the argument being passed to \u003ccode\u003emap\u003c/code\u003e above is an arrow function! In each iteration through the \u003ccode\u003enums\u003c/code\u003e array, \u003ccode\u003emap\u003c/code\u003e passes the value of the current element to the arrow function as an argument and it is assigned to the parameter \u003ccode\u003ex\u003c/code\u003e. That value is then squared and stored in a new array. After \u003ccode\u003emap\u003c/code\u003e has iterated through all of the elements, it returns the new array containing the squared values.\u003c/p\u003e  \u003cp\u003eIf all this math stuff seems a bit too textbook-y, be reassured that we can iterate through anything, not just numbers. In the following example, we can imagine that \u003ccode\u003eoverdueTodoItems\u003c/code\u003e is a collection of DOM elements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efinishedItems = overdueTodoItems.map( item =\u0026gt; item.className = \"complete\" );\u003cbr\u003eheader.innerText = `You finished ${finishedItems.length} items!`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr we might use \u003ccode\u003emap\u003c/code\u003e in billing software:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elapsedUserAccounts.map( u =\u0026gt; sendBillTo(u.address) ); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDon't worry if you don't completely follow everything that goes on here — we will cover advanced iterators in detail later in this section.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eYou are going to write several methods. Write your code in the \u003ccode\u003eindex.js\u003c/code\u003e file. Let the tests guide you through the process.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson you saw two different styles for declaring functions: function expressions and arrow functions. Neither is \"better\" than the standard function declaration we've been using. Arrow functions excel when a simple change or operation needs to be used repeatedly. But they're certainly used to write long, complex functions too! As you continue through the course, you'll see all three methods used to write functions, and develop a feel for when to use each.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"\u003eMDN: Arrow Functions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g0afe51031589acd6c9fc0cdae7168289"},{"id":173445,"title":"Callback Functions","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-callback-functions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-callback-functions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-callback-functions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUnderstand that we can pass functions as arguments in JavaScript\u003c/li\u003e \u003cli\u003eDefine callback functions\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003ePassing Functions as Arguments\u003c/h2\u003e  \u003cp\u003eWe know we can pass numbers, strings, objects, and arrays into a function as arguments, but did you know we can also \u003cstrong\u003epass functions into other functions\u003c/strong\u003e? We'll go into this in greater depth in an upcoming lesson, but it's important to start thinking about this concept now: in JavaScript, \u003cstrong\u003efunctions are objects\u003c/strong\u003e. Specifically, they are objects with a special, hidden code property that can be invoked.\u003c/p\u003e  \u003cp\u003eThis is how we pass an object into a function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction iReturnThings (thing) {\u003cbr\u003e  return thing;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eiReturnThings({ firstName: 'Brendan', lastName: 'Eich' });\u003cbr\u003e// =\u0026gt; {firstName: \"Brendan\", lastName: \"Eich\"} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd this is how we pass a function into a function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eiReturnThings(function () { return 4 + 5; });\u003cbr\u003e// =\u0026gt; ƒ () { return 4 + 5; } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that a representation of the passed-in function was returned, but \u003cstrong\u003eit was not invoked\u003c/strong\u003e. The \u003ccode\u003eiReturnThings()\u003c/code\u003e function accepted the passed-in function as its lone argument, \u003ccode\u003ething\u003c/code\u003e. As with all arguments, \u003ccode\u003ething\u003c/code\u003e was then available everywhere inside \u003ccode\u003eiReturnThings()\u003c/code\u003e as a local variable. When we passed a function into \u003ccode\u003eiReturnThings()\u003c/code\u003e, the \u003ccode\u003ething\u003c/code\u003e variable contained that function. Currently, all \u003ccode\u003eiReturnThings()\u003c/code\u003e does is return whatever value is stored inside \u003ccode\u003ething\u003c/code\u003e. However, if we know \u003ccode\u003ething\u003c/code\u003e contains a function, we can do a piece of awesome, function-y magic to it: \u003cstrong\u003ewe can invoke it\u003c/strong\u003e and return the function's result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction iInvokeThings (thing) {\u003cbr\u003e  return thing();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eiInvokeThings(function () { return 4 + 5; });\u003cbr\u003e// =\u0026gt; 9\u003cbr\u003e\u003cbr\u003eiInvokeThings(function () { return 'Hello, ' + 'world!'; });\u003cbr\u003e// =\u0026gt; \"Hello, world!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe pass in a function as the lone argument, store it inside the \u003ccode\u003ething\u003c/code\u003e variable, and then use the invocation operator (a pair of parentheses) to invoke the stored function: \u003ccode\u003ething()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As we dive deeper and deeper into functional programming in JavaScript, it bears repeating: this is \u003cstrong\u003every\u003c/strong\u003e complicated material! This is likely the first time you're encountering any of this stuff so, if you're struggling with the new concepts, don't sweat it! Set aside some extra time to re-read and practice, and make sure you're coding along with every example we cover in the lessons.\u003c/p\u003e  \u003ch2\u003eDefine Callback Functions\u003c/h2\u003e  \u003cp\u003eIf you've done any outside reading on JavaScript, you've probably come across the name of the pattern we just introduced: \u003cem\u003ecallback functions\u003c/em\u003e. When we pass a function into another function wherein it might be invoked, we refer to the passed function as a \u003cem\u003ecallback\u003c/em\u003e. The term derives from the fact that the function isn't invoked immediately — instead it's \u003cem\u003ecalled back\u003c/em\u003e, or invoked at a later point.\u003c/p\u003e  \u003cp\u003eYou may have noticed, but all of our callback functions so far have been \u003cem\u003eanonymous functions\u003c/em\u003e; that is, we haven't assigned them an identifier. You're welcome to name your callback functions if you'd like, but generally, it just clutters things up if you only use the callback function in one place. And, anyway, we already have a way to refer to them: by the name of the parameter into which they're passed! For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction main (cb) {\u003cbr\u003e  console.log(cb());\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emain(function () { return \"After I get passed to the main() function as the only argument, I'm stored in the local 'cb' variable!\"});\u003cbr\u003e// LOG: After I get passed to the main() function as the only argument, I'm stored in the local 'cb' variable! \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003eWe passed an anonymous function, \u003ccode\u003efunction () { return \"After I get passed... }\u003c/code\u003e, as the lone argument to our invocation of \u003ccode\u003emain()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003emain()\u003c/code\u003e stored the passed-in function in the local \u003ccode\u003ecb\u003c/code\u003e variable and then invoked the callback function.\u003c/li\u003e \u003cli\u003eThe invoked callback returned its long string, which was \u003ccode\u003econsole.log()\u003c/code\u003e-ed out in \u003ccode\u003emain()\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWe know that the parameters we define for our outer function are available anywhere inside the function. As a result, we can pass them as arguments to the callback function. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction greet (name, cb) {\u003cbr\u003e  return cb(name);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003egreet('Ada Lovelace', function (name) { return 'Hello there, ' + name; });\u003cbr\u003e// =\u0026gt; \"Hello there, Ada Lovelace\"\u003cbr\u003e\u003cbr\u003efunction doMath (num1, num2, cb) {\u003cbr\u003e  return cb(num1, num2);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edoMath(42, 8, function (num1, num2) { return num1 * num2; });\u003cbr\u003e// =\u0026gt; 336 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the above examples, what the \u003ccode\u003egreet()\u003c/code\u003e and \u003ccode\u003edoMath()\u003c/code\u003e functions are doing is pretty trivial: they're simply returning the result of calling the callback function. But let's consider another example. Imagine for a moment that we have a very expensive operation we need to execute, and that we need to do different things with the data it returns at different points in our program. We can use a callback to help us encapsulate that operation into its own function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction somethingExpensive(cb) {\u003cbr\u003e  // do something crazy,\u003cbr\u003e  // like fetching a bajillion websites\u003cbr\u003e  // then pass their data to the callback:\u003cbr\u003e  cb(data);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis approach allows us to separate the execution of the expensive operation from the functions that use the data it returns. We do this by passing whichever function we currently need to \u003ccode\u003esomethingExpensive()\u003c/code\u003e as a callback. Once the expensive operation is finished, we simply call \u003ccode\u003ecb()\u003c/code\u003e, passing the data along as an argument.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we learned about JavaScript callback functions. If the topic feels a little abstract at this point, don't worry! We will learn a lot more about callback functions and how they can be used in upcoming lessons.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/\"\u003eJavaScript Is Sexy: Callbacks\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://stackoverflow.com/questions/9596276/how-to-explain-callbacks-in-plain-english-how-are-they-different-from-calling-o\"\u003eStackOverflow: Explain Callbacks in Plain English\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"callback-functions"},{"id":173446,"title":"First-Class Functions","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-first-class-functions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine \"first-class function\"\u003c/li\u003e \u003cli\u003eUse inline functions\u003c/li\u003e \u003cli\u003eUse functions as return values\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSometimes in life, we need to take a first step. Since life isn't scripted like a reality TV show, anything can happen after that initial step. We need to be able to adjust accordingly.\u003c/p\u003e  \u003cp\u003eImagine an exercise routine: every morning, we run 5 miles. But afterwards — depending on the day — we might lift weights, go for a swim, or run an extra 5 miles.\u003c/p\u003e  \u003cp\u003eIn programming-speak, we could write out a function for every day (follow along!):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Monday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Pump iron');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction Tuesday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Swim 40 laps');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction Wednesday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction Thursday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Pump iron');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction Friday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Swim 40 laps');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut that's pretty tedious. And we already know that functions are supposed to help us \u003cem\u003ereduce\u003c/em\u003e this kind of repetition.\u003c/p\u003e  \u003cp\u003eWhat if we pull all of our five-mile runs into their own function?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction runFiveMiles() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOkay, that cuts down \u003cem\u003eslightly\u003c/em\u003e on how much code we need to write. Let's do the same thing for lifting weights and swimming:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction liftWeights() {\u003cbr\u003e  console.log('Pump iron');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction swimFortyLaps() {\u003cbr\u003e  console.log('Swim 40 laps');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAwesome! We've cut down a little bit more: \u003ccode\u003eMonday()\u003c/code\u003e could now look like\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Monday() {\u003cbr\u003e  runFiveMiles();\u003cbr\u003e  liftWeights();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile it is a tiny bit shorter than before, there is definitely still room for improvement. We know that every day, our routine includes two activities. We also know that the first activity is always a run. That means that the second activity can be variable. What if we created a function that took the second activity as a parameter?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseRoutine(postRunActivity) {\u003cbr\u003e  runFiveMiles();\u003cbr\u003e  postRunActivity();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that, in \u003ccode\u003eexerciseRoutine()\u003c/code\u003e, the \u003ccode\u003epostRunActivity\u003c/code\u003e parameter is a \u003cem\u003ecallback function\u003c/em\u003e — we call it after we call \u003ccode\u003erunFiveMiles()\u003c/code\u003e. Now let's try to use this new function we created in our \u003ccode\u003eMonday()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Monday() {\u003cbr\u003e  exerciseRoutine(liftWeights);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that we aren't \u003cem\u003ecalling\u003c/em\u003e \u003ccode\u003eliftWeights\u003c/code\u003e. When we want to pass a function as a value, we pass it by \u003cem\u003ereference\u003c/em\u003e by omitting the parentheses. We're not running the function at this point. It's up to \u003ccode\u003eexerciseRoutine()\u003c/code\u003e to call the function when it is needed.\u003c/p\u003e  \u003cp\u003eIf we call \u003ccode\u003eMonday()\u003c/code\u003e, we'll see that we run five miles, and then we lift weights — awesome!\u003c/p\u003e  \u003ch2\u003eDefine First-Class Functions\u003c/h2\u003e  \u003cp\u003eFunctions in JavaScript are \u003cstrong\u003efirst-class objects\u003c/strong\u003e, which means they can be treated like any other object: they can be assigned to a variable, passed as values to other functions, returned as the value from another function, etc. They're super useful, as you can see — they even help us exercise in the mornings!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eNote that we stated above that JavaScript functions can be treated like any \u003cem\u003eother\u003c/em\u003e object. In JavaScript, functions are a special type of object!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eInline Functions\u003c/h2\u003e  \u003cp\u003eWhat if, though, we want to have a one-off day of Pilates in our exercise routine? Keep in mind that our \u003ccode\u003eexerciseRoutine()\u003c/code\u003e function requires a function as its first (and only) parameter. However, that function doesn't have to be defined beforehand! We can pass an \u003cem\u003eanonymous function\u003c/em\u003e to \u003ccode\u003eexerciseRoutine()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo start with, let's use the full function syntax we've come to know and love:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexerciseRoutine(function() {\u003cbr\u003e  console.log('Stretch! Work that core!');\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003e// \"Go for a five-mile run\"\u003cbr\u003e// \"Stretch! Work that core!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can rewrite this to be more concise by using an arrow function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexerciseRoutine(() =\u0026gt; {\u003cbr\u003e  console.log('Stretch! Work that core!');\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003e// Or even shorter:\u003cbr\u003eexerciseRoutine(() =\u0026gt; console.log('Stretch! Work that core!')); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBecause we only need to use our function this one time, there's no need to give it a name or assign it to a variable. Instead, we define it inline as an anonymous function, passing it as the argument when we call \u003ccode\u003eexerciseRoutine()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eReturning Functions\u003c/h2\u003e  \u003cp\u003eFunctions can also return other functions. This is useful when we want to package up a function and its environment, but don't want to call it \u003cem\u003ejust yet\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eFor example, let's say our morning routine involves drinking a cup of coffee, exercising immediately, and then at some point later (depending on how we feel), eating breakfast. What we'll have for breakfast depends on what kind of exercise we're doing.\u003c/p\u003e  \u003cp\u003eLet's translate this to a function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction morningRoutine(exercise) {\u003cbr\u003e  let breakfast;\u003cbr\u003e\u003cbr\u003e  if (exercise === liftWeights) {\u003cbr\u003e    breakfast = 'protein bar';\u003cbr\u003e  } else if (exercise === swimFortyLaps) {\u003cbr\u003e    breakfast = 'kale smoothie';\u003cbr\u003e  } else {\u003cbr\u003e    breakfast = 'granola';\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  exerciseRoutine(exercise);\u003cbr\u003e\u003cbr\u003e  // we could give this function a name if we wanted to, but since\u003cbr\u003e  // it's only available _inside_ morningRoutine(), we don't need to\u003cbr\u003e  return function() {\u003cbr\u003e    console.log(`Nom nom nom, this ${breakfast} is delicious!`);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when we call \u003ccode\u003emorningRoutine()\u003c/code\u003e, our exercise routine will be logged as before, but we'll also get a function back:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst afterExercise = morningRoutine(liftWeights);\u003cbr\u003e// LOG: Go for a five-mile run\u003cbr\u003e// LOG: Pump iron\u003cbr\u003e\u003cbr\u003eafterExercise;\u003cbr\u003e//=\u0026gt; ƒ () { console.log(`Nom nom nom, this ${breakfast} is delicious!`); } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can call that function later:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eafterExercise();\u003cbr\u003e// LOG: Nom nom nom, this protein bar is delicious! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you haven't been following along, it's vitally important that you go back and do so. First-class functions are one of JavaScript's most powerful features, but it takes some practice for them to sink in.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://en.wikipedia.org/wiki/First-class_function\"\u003eWikipedia\u003c/a\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/First-class_function\"\u003eFirst-class function\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/#more-1037\"\u003eJavaScript is Sexy\u003c/a\u003e: \u003ca href=\"http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/#more-1037\"\u003eHigher-order functions\u003c/a\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"g0a66fef15cc3e444b760ef6fdf157436"},{"id":173447,"title":"JavaScript Advanced Functions: First-Class Functions Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-first-class-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAssign functions to a variable.\u003c/li\u003e \u003cli\u003eStore functions in a data structure.\u003c/li\u003e \u003cli\u003eWrite functions that return other functions.\u003c/li\u003e \u003cli\u003ePass a function to another function.\u003c/li\u003e \u003cli\u003eCall a function returned by another function.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eFunctions are a very important part of JavaScript, and you will use them all the time. Without functions, we wouldn't get anything done! In this lab, we'll take a look at how we can use functions as first-class objects to pass them around, store them in variables and data structures, and return them from other functions.\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ereturnFirstTwoDrivers()\u003c/code\u003e — Declare a variable with \u003ccode\u003econst\u003c/code\u003e that is assigned an anonymous function. The assigned function should accept an array of drivers as an argument and return the \u003cstrong\u003efirst\u003c/strong\u003e two drivers in the array.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ereturnLastTwoDrivers()\u003c/code\u003e — Declare a variable with \u003ccode\u003econst\u003c/code\u003e that is assigned an anonymous function. The assigned function should accept an array of drivers as an argument and return the \u003cstrong\u003elast\u003c/strong\u003e two drivers in the array.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eselectingDrivers\u003c/code\u003e — This is an array containing two elements: the two functions that we previously defined (\u003ccode\u003ereturnFirstTwoDrivers()\u003c/code\u003e and \u003ccode\u003ereturnLastTwoDrivers()\u003c/code\u003e).\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e — This is a higher-order function that takes in one argument, an integer, and returns a function that will multiply a fare for a ride accordingly. If \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e receives an argument of \u003ccode\u003e4\u003c/code\u003e, it will return a function that takes in a fare as an argument and quadruples the fare.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003efareDoubler()\u003c/code\u003e — Declare a variable with \u003ccode\u003econst\u003c/code\u003e and assign a function returned by \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e to it. Invoke \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e in such a way that the new \u003ccode\u003efareDoubler()\u003c/code\u003e function accepts a fare as its lone argument and doubles it.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003efareTripler()\u003c/code\u003e — Declare a variable with \u003ccode\u003econst\u003c/code\u003e and assign a function returned by \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e to it. Invoke \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e in such a way that the new \u003ccode\u003efareTripler()\u003c/code\u003e function accepts a fare as its lone argument and triples it.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eselectDifferentDrivers()\u003c/code\u003e — This function takes two arguments, an array of \u003ccode\u003edrivers\u003c/code\u003e and either the \u003ccode\u003ereturnFirstTwoDrivers()\u003c/code\u003e or \u003ccode\u003ereturnLastTwoDrivers()\u003c/code\u003e function. Based on these two arguments, \u003ccode\u003eselectDifferentDrivers()\u003c/code\u003e will return either the first two drivers or the last two drivers.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/First-class_function\"\u003eWikipedia: First-class function\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003eMDN: Functions\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://typeofnan.dev/what-is-a-higher-order-function/\"\u003eTypeOfNaN: What is a Higher-Order Function?\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g85193d40cf5f4610f8441e1e7e5d7de7"},{"id":178488,"title":"P1 Quiz2 - Functions in JS","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gfcd2dd86335e0769cd4d0266679e240c","questionCount":16,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":16.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"","exportId":"g06298dfee037bbc34186e60c454eb69c"}]},{"id":18922,"name":"Scope","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g06ebfcb2b55e455e814f11bcf46b762a","items":[{"id":173448,"title":"Introduction to Scope","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-principles-scope-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain in general terms what the execution context is.\u003c/li\u003e \u003cli\u003eDescribe the difference between global- and function-scoped code.\u003c/li\u003e \u003cli\u003eUnderstand how block scoping affects variables declared with \u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003e\u003cem\u003eScope\u003c/em\u003e is, in short, the concept of \u003cstrong\u003ewhere something is available\u003c/strong\u003e. In the case of JavaScript, it has to do with where declared variables and methods are available within our code.\u003c/p\u003e  \u003cp\u003eScope is a ubiquitous concept in programming and one of the most misunderstood principles in JavaScript, frustrating even seasoned engineers. Not understanding how scope works will lead to pain. Just ask this guy:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-readme/telescope_fail.gif\" alt=\"\"\u003e\u003c/p\u003e  \u003ch2\u003eLet's talk about Slack, baby\u003c/h2\u003e  \u003cp\u003eAs the newest engineer at Flatbook, you have access to the company's Slack team. The Slack team is organized into channels, some of which are company-wide, such as the main \u003ccode\u003e#general\u003c/code\u003e channel, and some of which are used by individual teams for intra-team communication, such as \u003ccode\u003e#education\u003c/code\u003e, \u003ccode\u003e#engineering\u003c/code\u003e, and \u003ccode\u003e#marketing\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eEach channel forms its own \u003cem\u003escope\u003c/em\u003e, meaning that its messages are only visible to those with access to the channel. Within \u003ccode\u003e#engineering\u003c/code\u003e, you can interact with the other members of your team, referring and responding to messages that they send. However, you can't see any of the messages posted inside \u003ccode\u003e#marketing\u003c/code\u003e —\u0026nbsp;that's a different scope that you don't have access to.\u003c/p\u003e  \u003cp\u003eThe same exact principle of distinct scopes exists in JavaScript, and it has to do with where declared variables and functions are visible.\u003c/p\u003e  \u003ch2\u003eExecution contexts\u003c/h2\u003e  \u003cp\u003eJust as every message on Slack is sent in a channel, every piece of JavaScript code is run in an \u003cem\u003eexecution context\u003c/em\u003e. In a Slack channel, we have access to all of the messages sent in that channel; we can send a message that references any of the other messages posted in the same channel. Similarly, in a JavaScript execution context, we have access to all of the variables and functions declared in that context. Within an execution context, we can write an expression that references a variable or invokes a function declared in the same context.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-readme/execution_context_and_scope_1.png\" alt=\"Execution context and scope\"\u003e\u003c/p\u003e  \u003cp\u003eUp to this point, much of the JavaScript code we've written has lived in the \u003cem\u003eglobal execution context\u003c/em\u003e, the context that implicitly wraps all of the JavaScript code in a project. Variables and functions declared in the global execution context —\u0026nbsp;in the \u003cem\u003eglobal scope\u003c/em\u003e —\u0026nbsp;are accessible everywhere in your JavaScript code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// 'myFunc' is declared in the global scope and available everywhere in your code:\u003cbr\u003efunction myFunc () {\u003cbr\u003e  return 42;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e// 'myVar' is able to reference and invoke 'myFunc' because both are declared in the same scope (the global execution context):\u003cbr\u003econst myVar = myFunc() * 2;\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// =\u0026gt; 84 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-readme/execution_context_and_scope_2.png\" alt=\"Execution context and scope\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eTop Tip\u003c/em\u003e\u003c/strong\u003e: If a variable or function is \u003cstrong\u003enot\u003c/strong\u003e declared inside a function or block, it's in the global execution context.\u003c/p\u003e  \u003ch2\u003eFunction scope\u003c/h2\u003e  \u003cp\u003eWhen we declare a new function and write some code in the function body, we're no longer in the global execution context. The function creates a new execution context with its own scope. Inside the function body, we can reference variables and functions declared in the function's scope:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction myFunc () {\u003cbr\u003e  const myVar = 42;\u003cbr\u003e\u003cbr\u003e  return myVar * 2;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003emyFunc();\u003cbr\u003e// =\u0026gt; 84 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, from outside the function, we can't reference anything declared inside of it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction myFunc () {\u003cbr\u003e  const myVar = 42;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003emyVar * 2;\u003cbr\u003e// Uncaught ReferenceError: myVar is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe function body creates its own scope. It's like a separate channel on Slack —\u0026nbsp;only the members of that channel can read the messages sent in it.\u003c/p\u003e  \u003ch2\u003eBlock scope\u003c/h2\u003e  \u003cp\u003eA block statement also creates its own scope... kind of.\u003c/p\u003e  \u003cp\u003eVariables declared with \u003ccode\u003evar\u003c/code\u003e are \u003cstrong\u003enot\u003c/strong\u003e block-scoped:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (true) {\u003cbr\u003e  var myVar = 42;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// =\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, variables declared with \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e \u003cstrong\u003eare\u003c/strong\u003e block-scoped:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (true) {\u003cbr\u003e  const myVar = 42;\u003cbr\u003e\u003cbr\u003e  let myOtherVar = 9001;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// Uncaught ReferenceError: myVar is not defined\u003cbr\u003e\u003cbr\u003emyOtherVar;\u003cbr\u003e// Uncaught ReferenceError: myOtherVar is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is yet another reason to \u003cstrong\u003enever use \u003ccode\u003evar\u003c/code\u003e\u003c/strong\u003e. As long as you stick to declaring variables with \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e, what happens in block stays in block.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-readme/what_happens_here_stays_here.gif\" alt=\"Remember, what happens here stays here.\"\u003e\u003c/p\u003e  \u003ch2\u003eThe global gotcha\u003c/h2\u003e  \u003cp\u003eIn a perfect world, you'd always remember to declare new variables with \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e, and you'd never run into any weird scoping issues. However, it's inevitable that at some point you're going to forget the \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e and accidentally do something like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efirstName = 'Ada'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVariables created without a \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003evar\u003c/code\u003e keyword are \u003cstrong\u003ealways globally-scoped\u003c/strong\u003e, regardless of where they sit in your code. If you create one inside of a block, it's still available globally:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (true) {\u003cbr\u003e  lastName = 'Lovelace';\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elastName;\u003cbr\u003e// =\u0026gt; \"Lovelace\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you create one inside of a function —\u0026nbsp;wait for it —\u0026nbsp;it's still available globally:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction bankAccount () {\u003cbr\u003e  secretPassword = 'il0v3pupp135';\u003cbr\u003e\u003cbr\u003e  return 'bankAccount() function invoked!';\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ebankAccount();\u003cbr\u003e// =\u0026gt; \"bankAccount() function invoked!\"\u003cbr\u003e\u003cbr\u003esecretPassword;\u003cbr\u003e// =\u0026gt; \"il0v3pupp135\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOh no; our super secret password has leaked into the global scope and is available everywhere! Declaring global variables and functions should only be used as a last resort if you absolutely need access to something \u003cstrong\u003eeverywhere\u003c/strong\u003e in your program. In general, it's best practice to make variables and functions available only where they're needed —\u0026nbsp;and nowhere else. Making a variable available in places that shouldn't have access to it can only lead to bad things and make your debugging process more complex. The more pieces of code that can access a given variable, the more places you have to check for bugs if/when that variable contains an unexpected value.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eSo, to sum up our tricks for taming the scope monster:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAlways use \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e to declare variables.\u003c/li\u003e \u003cli\u003eKeep in mind that every function creates its own scope, and any variables or functions you declare inside of the function will not be available outside of it.\u003c/li\u003e \u003cli\u003eFor Dijkstra's sake, \u003cstrong\u003e\u003cem\u003ealways use \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e to declare variables\u003c/em\u003e\u003c/strong\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/scope\"\u003eScope\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#Function_scope\"\u003eFunctions —\u0026nbsp;Function scope\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"introduction-to-scope"},{"id":173449,"title":"Scope Chain","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-principles-scope-chain-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-chain-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-chain-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate nested functions.\u003c/li\u003e \u003cli\u003eExplain that the environment in which a function is created gets added to its scope chain.\u003c/li\u003e \u003cli\u003eDescribe how the scope chain makes variables and functions declared in the outer environment available within a nested function.\u003c/li\u003e \u003cli\u003eExplain how the JavaScript engine makes a first pass over your code before executing it.\u003c/li\u003e \u003cli\u003eDescribe what happens during the \u003cem\u003eexecution phase\u003c/em\u003e of the JavaScript runtime.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eEvery function in JavaScript has access to a \u003cem\u003escope chain\u003c/em\u003e, which includes references to the function's outer scope (the scope in which the function was declared), the outer scope's outer scope, and so on. In this lesson, we'll discuss how the scope chain allows us to access variables and functions declared in outer scopes within an inner function. We'll also talk about what's happening under the hood when we run JavaScript code and how that impacts \u003cem\u003eidentifier resolution\u003c/em\u003e and the \u003cem\u003escope chain\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eNested scopes and the scope chain\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-chain-readme/nested_elevators.gif\" alt=\"Nested elevators\"\u003e\u003c/p\u003e  \u003cp\u003eIn addition to the \u003ccode\u003e#engineering\u003c/code\u003e channel, every software engineer is a member of Flatbook's \u003ccode\u003e#general\u003c/code\u003e channel. Engineers can see all of the messages sent in both channels. If a message in \u003ccode\u003e#general\u003c/code\u003e piques our interest, we can refer to the message in \u003ccode\u003e#engineering\u003c/code\u003e despite the fact that it was posted in \u003ccode\u003e#general\u003c/code\u003e. To bend the analogy back towards functions and scope, everything \u003cem\u003edeclared\u003c/em\u003e in \u003ccode\u003e#general\u003c/code\u003e is accessible in \u003ccode\u003e#engineering\u003c/code\u003e. \u003ccode\u003e#general\u003c/code\u003e, our global scope, is effectively the \u003cem\u003eouter scope\u003c/em\u003e for \u003ccode\u003e#engineering\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eFor a function declared at the top level of our JavaScript file (that is, not declared inside of another function), its outer scope is the \u003cem\u003eglobal scope\u003c/em\u003e. When that new function is invoked, it can access all of the variables and functions declared in the global scope. Upon invocation, the function creates a new scope and \u003cstrong\u003eretains a reference to the \u003cem\u003eouter scope\u003c/em\u003e in which it was declared\u003c/strong\u003e. Inside the new function's body, in addition to variables and functions declared in that function, \u003cstrong\u003ewe also have access to variables and functions declared in the outer scope\u003c/strong\u003e. Let's see that in action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst globalVar = 1;\u003cbr\u003e\u003cbr\u003efunction firstFunc () {\u003cbr\u003e  const firstVar = 2;\u003cbr\u003e\u003cbr\u003e  return firstVar + globalVar;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirstFunc();\u003cbr\u003e// =\u0026gt; 3 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003efirstVar\u003c/code\u003e is declared inside the function, and \u003ccode\u003eglobalVar\u003c/code\u003e is declared in the outer scope, but we have access to \u003cstrong\u003eboth\u003c/strong\u003e inside \u003ccode\u003efirstFunc()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhen we invoke \u003ccode\u003efirstFunc()\u003c/code\u003e, the first line of code inside the function, \u003ccode\u003econst firstVar = 2;\u003c/code\u003e, runs first, creating a new local variable. When the JavaScript engine reaches the function's second line, it sees the reference to \u003ccode\u003efirstVar\u003c/code\u003e and says, \"Great, I know what that means: it's a local variable!\" Then, the engine encounters the reference to \u003ccode\u003eglobalVar\u003c/code\u003e and says, \"What the heck is this?! That's not declared locally!\"\u003c/p\u003e  \u003cp\u003eWhen the engine can't find a local match, it then goes looking in the outer scope and —\u0026nbsp;voilà! —\u0026nbsp;finds a match there. Because of the way functions can look up variables declared in outer scopes, we say they have access to a \u003cem\u003escope chain\u003c/em\u003e. Through the scope chain, a function has access to all variables and functions declared in its outer scope.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eTop Tip\u003c/em\u003e\u003c/strong\u003e: What matters for the scope chain is where the function is declared —\u0026nbsp;not where it is invoked.\u003c/p\u003e  \u003cp\u003eWe can think of JavaScript scopes as a nested system:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-chain-readme/scope_chain.png\" alt=\"Scope chain\"\u003e\u003c/p\u003e  \u003cp\u003eAll variables and functions declared in outer scopes are available in inner scopes via the scope chain. This can go on ad infinitum, with functions nested in functions nested in functions, each new level creating a new scope that can reference functions and variables declared in its outer scopes through the scope chain:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst globalVar = 1;\u003cbr\u003e\u003cbr\u003efunction firstFunc () {\u003cbr\u003e  const firstVar = 2;\u003cbr\u003e\u003cbr\u003e  function secondFunc () {\u003cbr\u003e    const secondVar = 3;\u003cbr\u003e\u003cbr\u003e    return secondVar + firstVar + globalVar;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  const resultFromSecondFunc = secondFunc();\u003cbr\u003e\u003cbr\u003e  return resultFromSecondFunc;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirstFunc();\u003cbr\u003e// =\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInside \u003ccode\u003efirstFunc()\u003c/code\u003e, we've defined a second function, \u003ccode\u003esecondFunc()\u003c/code\u003e. That second function creates yet another scope, and in it we can reference \u003ccode\u003efirstVar\u003c/code\u003e \u003cstrong\u003eand\u003c/strong\u003e \u003ccode\u003eglobalVar\u003c/code\u003e via the scope chain:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-chain-readme/nested_scope_chain.png\" alt=\"Nested scope chain\"\u003e\u003c/p\u003e  \u003cp\u003eInside \u003ccode\u003esecondFunc()\u003c/code\u003e, \u003ccode\u003efirstVar\u003c/code\u003e is accessible via the outer scope, and \u003ccode\u003eglobalVar\u003c/code\u003e is accessible via the outer scope's outer scope. Head spinning? Just remember that the scope chain is \u003ca href=\"https://en.wikipedia.org/wiki/Turtles_all_the_way_down\"\u003escopes all the way down\u003c/a\u003e. If \u003ccode\u003ea()\u003c/code\u003e is declared inside \u003ccode\u003eb()\u003c/code\u003e and \u003ccode\u003eb()\u003c/code\u003e is declared inside \u003ccode\u003ec()\u003c/code\u003e, \u003ccode\u003ea()\u003c/code\u003e has access to functions and variables declared in its own scope, \u003ccode\u003eb()\u003c/code\u003e's scope, and \u003ccode\u003ec()\u003c/code\u003e's scope. That's the scope chain in action!\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: The scope chain only goes in one direction. An outer scope \u003cstrong\u003edoes not have access to things declared in an inner scope\u003c/strong\u003e. In the previous code snippet, \u003ccode\u003efirstFunc()\u003c/code\u003e \u003cstrong\u003ecannot access \u003ccode\u003esecondVar\u003c/code\u003e\u003c/strong\u003e. In addition, two functions declared in the same scope do not have access to anything declared in the other's scope:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fruit = 'Apple';\u003cbr\u003e\u003cbr\u003efunction first () {\u003cbr\u003e  const vegetable = 'Broccoli';\u003cbr\u003e\u003cbr\u003e  console.log('fruit:', fruit);\u003cbr\u003e  console.log('vegetable:', vegetable);\u003cbr\u003e  console.log('legume:', legume);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second () {\u003cbr\u003e  const legume = 'Peanut';\u003cbr\u003e\u003cbr\u003e  console.log('fruit:', fruit);\u003cbr\u003e  console.log('legume:', legume);\u003cbr\u003e  console.log('vegetable:', vegetable);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBoth \u003ccode\u003efirst()\u003c/code\u003e and \u003ccode\u003esecond()\u003c/code\u003e have access to \u003ccode\u003efruit\u003c/code\u003e, but \u003ccode\u003efirst()\u003c/code\u003e cannot access \u003ccode\u003elegume\u003c/code\u003e and \u003ccode\u003esecond()\u003c/code\u003e cannot access \u003ccode\u003evegetable\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efirst();\u003cbr\u003e// LOG: fruit: Apple\u003cbr\u003e// LOG: vegetable: Broccoli\u003cbr\u003e// ERROR: Uncaught ReferenceError: legume is not defined\u003cbr\u003e\u003cbr\u003esecond();\u003cbr\u003e// LOG: fruit: Apple\u003cbr\u003e// LOG: legume: Peanut\u003cbr\u003e// ERROR: Uncaught ReferenceError: vegetable is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOkay, we have an idea of what the scope chain is, but how does it actually work under the hood?\u003c/p\u003e  \u003ch2\u003eThe JavaScript engine and identifier resolution\u003c/h2\u003e  \u003ch3\u003eIdentifiers\u003c/h3\u003e  \u003cp\u003eAs a brief refresher, when we declare a variable or a function, we provide a name that allows us to refer back to it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = \"myVar refers to the variable that contains this string\";\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003efunction myFunc () {\u003cbr\u003e  return \"myFunc refers to this function that returns this string\";\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe call those names \u003cem\u003eidentifiers\u003c/em\u003e because they allow us to \u003cstrong\u003eidentify\u003c/strong\u003e the variable or function we're referring to.\u003c/p\u003e  \u003ch3\u003eThe JavaScript engine\u003c/h3\u003e  \u003cp\u003eWhen our JavaScript code is run in the browser, the JavaScript engine actually makes two separate passes over our code:\u003c/p\u003e  \u003ch4\u003eCompilation phase\u003c/h4\u003e  \u003cp\u003eThe first pass is the \u003cem\u003ecompilation phase\u003c/em\u003e, in which the engine steps through our code line-by-line:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eWhen it reaches a variable declaration, the engine allocates memory and sets up a reference to the variable's identifier, e.g., \u003ccode\u003emyVar\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eWhen the engine encounters a function declaration, it does three things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAllocates memory and sets up a reference to the function's identifier, e.g., \u003ccode\u003emyFunc\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eCreates a new execution context with a new scope.\u003c/li\u003e \u003cli\u003eAdds a reference to the parent scope (the outer environment) to the scope chain, making variables and functions declared in the outer environment available in the new function's scope.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch4\u003eExecution phase\u003c/h4\u003e  \u003cp\u003eThe second pass is the \u003cem\u003eexecution phase\u003c/em\u003e. The JavaScript engine again steps through our code line-by-line, but this time it actually runs our code, assigning values to variables and invoking functions.\u003c/p\u003e  \u003cp\u003eOne of the engine's tasks is the process of matching identifiers to the corresponding values stored in memory. Let's walk through the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 42;\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// =\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDuring the compilation phase, a reference to the identifier \u003ccode\u003emyVar\u003c/code\u003e is stored in memory. The variable isn't yet assigned a value, and the second line (\u003ccode\u003emyVar;\u003c/code\u003e) is skipped over entirely because it isn't a declaration.\u003c/p\u003e  \u003cp\u003eDuring the execution phase, the value \u003ccode\u003e42\u003c/code\u003e is assigned to \u003ccode\u003emyVar\u003c/code\u003e. When the engine reaches the second line, it sees the identifier \u003ccode\u003emyVar\u003c/code\u003e and resolves it to a value through a process known as \u003cem\u003eidentifier resolution\u003c/em\u003e. The engine first checks the current scope to see if \u003ccode\u003emyVar\u003c/code\u003e has been declared in it. If it finds no declaration for \u003ccode\u003emyVar\u003c/code\u003e in the current scope, the engine then starts moving up the scope chain, checking the parent scope and then the parent scope's parent scope and so on until it finds a matching declared identifier or reaches the global scope. If the engine traverses all the way up to the global scope and still can't find a match, it will throw a \u003ccode\u003eReferenceError\u003c/code\u003e and inform you that the identifier is not declared anywhere in the scope chain.\u003c/p\u003e  \u003cp\u003eLet's look at an example. Remember, the engine will continue to move up the scope chain \u003cstrong\u003eonly\u003c/strong\u003e if it can't find a matching identifier in the current scope. Because of this, we can actually use the same identifier to declare variables or functions in multiple scopes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 42;\u003cbr\u003e\u003cbr\u003efunction myFunc () {\u003cbr\u003e  const myVar = 9001;\u003cbr\u003e\u003cbr\u003e  return myVar;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emyFunc();\u003cbr\u003e// =\u0026gt; 9001 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDuring the compilation phase, a reference to \u003ccode\u003emyVar\u003c/code\u003e is created in the global scope, and a reference to a \u003cstrong\u003edifferent\u003c/strong\u003e \u003ccode\u003emyVar\u003c/code\u003e is created in \u003ccode\u003emyFunc()\u003c/code\u003e's scope. The global \u003ccode\u003emyVar\u003c/code\u003e exists in the scope chain for \u003ccode\u003emyFunc()\u003c/code\u003e, but the engine never makes it that far. The engine finds a matching reference within \u003ccode\u003emyFunc()\u003c/code\u003e, and it resolves the \u003ccode\u003emyVar\u003c/code\u003e identifier to \u003ccode\u003e9001\u003c/code\u003e without having to traverse up the scope chain.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThis topic might feel a bit esoteric, but it's critical to understanding how identifier lookups happen in JavaScript. That is, when the JavaScript engine encounters a variable or function, how it knows what value or function to retrieve from memory. If the engine finds the identifier declared locally, it uses that value. However, if it doesn't find a local match, it then looks up (or down, depending on your perspective) the scope chain until it either finds a match in an outer scope or throws an \u003ccode\u003eUncaught ReferenceError\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#Name_conflicts\"\u003eMDN: Functions —\u0026nbsp;Name conflicts\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"scope-chain"},{"id":173450,"title":"Scope Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-principles-scope-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUnderstand how functions determine scope in JavaScript\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eScuber's drivers are beginning to take down some notes about their customers. Use your knowledge of scope to access and change some of these variables.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eA word of warning. In this lab, you will practice doing some bad things. For example, we'll ask you to declare variables in global scope, and write functions that break down. You'll also need to use \u003ccode\u003evar\u003c/code\u003e to declare all variables except when specifically instructed otherwise. We do this because, by testing the limits and exposing the underbelly of a language, you can better understand it and know what to avoid in the future.\u003c/p\u003e  \u003cp\u003eOk, these are your tasks:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ecustomerName\u003c/code\u003e: Declare a variable in global scope called \u003ccode\u003ecustomerName\u003c/code\u003e using the \u003ccode\u003evar\u003c/code\u003e keyword.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eupperCaseCustomerName()\u003c/code\u003e: Write a function that accesses that global \u003ccode\u003ecustomerName\u003c/code\u003e variable, and uppercases it.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003esetBestCustomer()\u003c/code\u003e: Write a function that when called, declares a variable called \u003ccode\u003ebestCustomer\u003c/code\u003e in global scope and assigns it to be \u003ccode\u003e'not bob'\u003c/code\u003e. (Poor Bob.) Also, poor us, declaring a global variable from inside a function is one of those things we would never want to do normally, but is good for us to explore right now.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eoverwriteBestCustomer()\u003c/code\u003e: See the consequences of declaring a variable in global scope, by writing a new function called \u003ccode\u003eoverwriteBestCustomer()\u003c/code\u003e that changes that \u003ccode\u003ebestCustomer\u003c/code\u003e variable.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eleastFavoriteCustomer\u003c/code\u003e and \u003ccode\u003echangeLeastFavoriteCustomer()\u003c/code\u003e: Now declare a constant (using the \u003ccode\u003econst\u003c/code\u003e keyword) in global scope called \u003ccode\u003eleastFavoriteCustomer\u003c/code\u003e; be sure to assign it some initial value. Finally, write a function called \u003ccode\u003echangeLeastFavoriteCustomer()\u003c/code\u003e that attempts to change that constant - notice what JavaScript does when you try to change the constant.\u003c/li\u003e \u003c/ul\u003e","exportId":"gaf0f5dbc7cfb513f0464e82566a25807"},{"id":173451,"title":"Lexical scoping","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-principles-lexical-scoping-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-lexical-scoping-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-lexical-scoping-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain the concept of lexical scoping.\u003c/li\u003e \u003cli\u003eDescribe how lexical scoping informs the scope chain of a function.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll learn how JavaScript decides which outer scope to place into the scope chain for a new function.\u003c/p\u003e  \u003cp\u003eFirst, a brief note. Some of the material introduced in this section might feel a bit confusing or esoteric, but, fear not, you're going to get more and more comfortable with these concepts throughout this course. If you're finding it difficult to wrap your brain around some of these more abstract concepts at this point, \u003cstrong\u003edon't freak out\u003c/strong\u003e. This is really difficult material that even seasoned programmers occasionally struggle with. After you've read the material and given it a college try, feel free to move on to the next lesson — with a mental note to return once you have more JavaScript experience under your belt. Okay, onwards and upwards!\u003c/p\u003e  \u003cp\u003eTake a look at the following code snippet:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 'Foo';\u003cbr\u003e\u003cbr\u003efunction first () {\u003cbr\u003e  console.log('Inside first()');\u003cbr\u003e\u003cbr\u003e  console.log('myVar is currently equal to:', myVar);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second () {\u003cbr\u003e  const myVar = 'Bar';\u003cbr\u003e\u003cbr\u003e  first();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThink about what we've learned in previous lessons about how JavaScript looks up the scope chain to perform identifier resolution. Given that information, what do you think will get logged out to the console when we invoke \u003ccode\u003esecond()\u003c/code\u003e? Let's try it out:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esecond();\u003cbr\u003e// LOG: Inside first()\u003cbr\u003e// LOG: myVar is currently equal to: Foo\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDid that catch you by surprise? At first glance, it might seem like \u003ccode\u003eBar\u003c/code\u003e should get printed out. Inside \u003ccode\u003esecond()\u003c/code\u003e, that string is assigned to the \u003ccode\u003emyVar\u003c/code\u003e variable right before \u003ccode\u003efirst()\u003c/code\u003e is invoked:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction second () {\u003cbr\u003e  const myVar = 'Bar';\u003cbr\u003e\u003cbr\u003e  first();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, the assignment of \u003ccode\u003emyVar\u003c/code\u003e as \u003ccode\u003e'Bar'\u003c/code\u003e is \u003cstrong\u003enot visible to \u003ccode\u003efirst()\u003c/code\u003e\u003c/strong\u003e. This is because \u003ccode\u003esecond()\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e the parent scope of \u003ccode\u003efirst()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIn the following diagram, the red \u003ccode\u003emyVar\u003c/code\u003e is declared in the global scope, and the green \u003ccode\u003emyVar\u003c/code\u003e is declared inside \u003ccode\u003esecond()\u003c/code\u003e:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/lexical-scoping-readme/lexical_scope.png\" alt=\"Lexical scope\"\u003e\u003c/p\u003e  \u003cp\u003eNo variable named \u003ccode\u003emyVar\u003c/code\u003e exists inside \u003ccode\u003efirst()\u003c/code\u003e. When the JavaScript engine reaches the second line of code inside the function, it has to consult the scope chain to figure out what the heck this \u003ccode\u003emyVar\u003c/code\u003e thing is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('myVar is currently equal to:', myVar); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe engine's first (and only) stop in the scope chain is the global scope, where it finds a variable named \u003ccode\u003emyVar\u003c/code\u003e. The reference to \u003ccode\u003emyVar\u003c/code\u003e inside \u003ccode\u003efirst()\u003c/code\u003e is pointed at that external variable, so \u003ccode\u003econsole.log()\u003c/code\u003e prints out \u003ccode\u003emyVar is currently equal to: Foo\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003efirst()\u003c/code\u003e is declared in the global scope, and, when it comes to the scope chain, JavaScript functions don't care where they are invoked. \u003cstrong\u003eThe only thing that matters is where they are declared\u003c/strong\u003e. When we declare a new function, the function asks, \"Where was I created?\" The answer to that question is the outer environment (the outer scope) that gets stored in the new function's scope chain.\u003c/p\u003e  \u003cp\u003eThis is called \u003cem\u003elexical scoping\u003c/em\u003e, and \u003cem\u003elexical environment\u003c/em\u003e is a synonym for \u003cem\u003escope\u003c/em\u003e that you might encounter in advanced JavaScript materials. \u003cem\u003eLexical\u003c/em\u003e means \"having to do with words,\" and for lexical scoping what counts is where we, the programmer, typed out the function declaration within our code.\u003c/p\u003e  \u003cp\u003eIn the example above, we typed out our declaration for \u003ccode\u003efirst()\u003c/code\u003e in the global scope. If we instead declare \u003ccode\u003efirst()\u003c/code\u003e inside \u003ccode\u003esecond()\u003c/code\u003e, then \u003ccode\u003efirst()\u003c/code\u003e's reference to its outer scope points at \u003ccode\u003esecond()\u003c/code\u003e instead of at the global scope:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 'Foo';\u003cbr\u003e\u003cbr\u003efunction second () {\u003cbr\u003e  function first () {\u003cbr\u003e    console.log('Inside first()');\u003cbr\u003e\u003cbr\u003e    console.log('myVar is currently equal to:', myVar);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  const myVar = 'Bar';\u003cbr\u003e\u003cbr\u003e  first();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we invoke \u003ccode\u003esecond()\u003c/code\u003e this time, it creates a local \u003ccode\u003emyVar\u003c/code\u003e variable set to \u003ccode\u003e'Bar'\u003c/code\u003e. Then, it invokes \u003ccode\u003efirst()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esecond();\u003cbr\u003e// LOG: Inside first()\u003cbr\u003e// LOG: myVar is currently equal to: Bar\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile \u003ccode\u003efirst()\u003c/code\u003e is executing, it again encounters the reference to \u003ccode\u003emyVar\u003c/code\u003e and realizes it doesn't have a local variable or function with that name. \u003ccode\u003efirst()\u003c/code\u003e looks up the scope chain again, but this time \u003ccode\u003efirst()\u003c/code\u003e's outer scope isn't the global scope. It's the scope of \u003ccode\u003esecond()\u003c/code\u003e \u003cstrong\u003ebecause \u003ccode\u003efirst()\u003c/code\u003e was declared inside \u003ccode\u003esecond()\u003c/code\u003e\u003c/strong\u003e. So \u003ccode\u003efirst()\u003c/code\u003e uses the version of the \u003ccode\u003emyVar\u003c/code\u003e variable from the \u003ccode\u003esecond()\u003c/code\u003e scope, which contains the string \u003ccode\u003e'Bar'\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eWrapping up\u003c/h2\u003e  \u003cp\u003eIf this isn't making a ton of sense, don't sweat it too much! We're spending time on things like the \u003cem\u003escope chain\u003c/em\u003e and the \u003cem\u003elexical environment\u003c/em\u003e now because they're fundamental to the language, but they are not easy concepts to grasp! Keep these concepts in mind as you move through the rest of the course. As you write more and more JavaScript code, you'll notice some of the language's eccentricities cropping up. But then you'll remember things like lexical scoping and the scope chain, and you'll be in a much better position to explain what's going on —\u0026nbsp;\u003cstrong\u003ewhy\u003c/strong\u003e your code is being interpreted a certain way.\u003c/p\u003e  \u003cp\u003eInvesting the time and effort now will pay huge dividends throughout your JavaScript programming career. Knowing how to declare and invoke a function is great and necessary, but knowing what's actually going on under the hood during the declaration and invocation is exponentially more powerful.\u003c/p\u003e  \u003cp\u003eWhen a variable contains an unexpected value, understanding the scope chain will save you countless hours of painful debugging. When you're wondering where to declare a function so that it can access the proper variables, your familiarity with JavaScript's lexical scoping will save the day. When you want to impress some new friends at a party, hit 'em with a quick lesson on how running JavaScript code consists of distinct compilation and execution phases.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/lexical-scoping-readme/cool_party.gif\" alt=\"Cool party!\"\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=Bv_5Zv5c-Ts\"\u003eJavaScript: Understanding the Weird Parts - The First 3.5 Hours\u003c/a\u003e (Video)\u003c/li\u003e \u003c/ul\u003e","exportId":"lexical-scoping"}]},{"id":18923,"name":"Working with Data Structures in JavaScript","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g7b2e17ff701145579bbddcbcc1fd6006","items":[{"id":173452,"title":"Review: Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-arrays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify data structures and \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eCreate \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eAccess the elements in an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn about nested \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eIntroduce \u003ccode\u003eArray\u003c/code\u003e methods\u003c/li\u003e \u003cli\u003eUnderstand mutability\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSo far, we've been focusing on JavaScript's \u003cem\u003eprimitive\u003c/em\u003e data types — types that represent a single value — in particular, strings, Booleans, and numbers. But sometimes we need a way to store a \u003cem\u003ecollection\u003c/em\u003e of data. For this, we need data structures. In this and the next lesson, we will learn about a very useful data structure: \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eBe sure to follow along with the examples in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify Data Structures and Arrays\u003c/h2\u003e  \u003cp\u003eA \u003cem\u003edata structure\u003c/em\u003e is a means for associating and organizing information. Outside of the programming world, we use data structures all the time. For example, we might have a shopping list of the items we need to buy on our next grocery run or an address book for organizing contact information.\u003c/p\u003e  \u003cp\u003eIf we have a lot of related data, it's best to represent it in a related system. Imagine that we're working on a lottery application that has to represent the winning lottery numbers. We could do that as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstNumber = 32;\u003cbr\u003econst secondNumber = 9;\u003cbr\u003econst thirdNumber = 14;\u003cbr\u003econst fourthNumber = 33;\u003cbr\u003econst fifthNumber = 48;\u003cbr\u003econst powerBall = 5; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe've represented all six pieces of data, but there's no way to refer to them as a group. Every single time we want to reference that combination of winning numbers, we need to remember and type out six different variable names:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstNumber = 32;\u003cbr\u003econst secondNumber = 9;\u003cbr\u003econst thirdNumber = 14;\u003cbr\u003econst fourthNumber = 33;\u003cbr\u003econst fifthNumber = 48;\u003cbr\u003econst powerBall = 5;\u003cbr\u003e\u003cbr\u003efunction logWinningNumbers (first, second, third, fourth, fifth, power) {\u003cbr\u003e  console.log('Winning numbers:', first, second, third, fourth, fifth, power);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogWinningNumbers(firstNumber, secondNumber, thirdNumber, fourthNumber, fifthNumber, powerBall);\u003cbr\u003e// LOG: Winning numbers: 32 9 14 33 48 5\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's so much typing! There are much, much better ways to organize data in JavaScript. Let's learn about one of the most common: the \u003cem\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eCreate Arrays\u003c/h2\u003e  \u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is a list, with the items listed in a particular order, surrounded by square brackets (\u003ccode\u003e[]\u003c/code\u003e) and separated by commas:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e['This', 'is', 'an', 'array', 'of', 'strings.'];\u003cbr\u003e// =\u0026gt; [\"This\", \"is\", \"an\", \"array\", \"of\", \"strings.\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003emembers\u003c/em\u003e or \u003cem\u003eelements\u003c/em\u003e in an \u003ccode\u003eArray\u003c/code\u003e can be data of any type in JavaScript:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e['Hello, world!', 42, null, NaN];\u003cbr\u003e// =\u0026gt; [\"Hello, world!\", 42, null, NaN] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: In some other languages \u003ccode\u003eArrays\u003c/code\u003e \u003cem\u003ecannot include elements of multiple types\u003c/em\u003e. In C, C++, Java, Swift, and others you cannot mix types. JavaScript, Python, Ruby, Lisp, and others permit this.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eArrays are \u003cem\u003eordered\u003c/em\u003e, meaning that the elements in them will always appear in the same order. This also means that the \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[1, 2, 3]\u003c/code\u003e is different from the \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[3, 2, 1]\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eJust like any other type of JavaScript data, we can assign an \u003ccode\u003eArray\u003c/code\u003e to a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37];\u003cbr\u003e\u003cbr\u003econst tvShows = ['Game of Thrones', 'Breaking Bad', 'Veep', 'Mad Men']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can find out how many elements an \u003ccode\u003eArray\u003c/code\u003e contains by checking the \u003ccode\u003eArray\u003c/code\u003e's built-in \u003ccode\u003elength\u003c/code\u003e property:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = ['This', 'array', 'has', 5, 'elements'];\u003cbr\u003e\u003cbr\u003emyArray.length;\u003cbr\u003e// =\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe defined the above \u003ccode\u003eArray\u003c/code\u003es using the \u003cem\u003earray literal\u003c/em\u003e syntax —\u0026nbsp;that is, we literally typed out the \u003ccode\u003eArray\u003c/code\u003e that we wanted to create, square brackets and all. There are other ways to create new \u003ccode\u003eArray\u003c/code\u003es, but they are only necessary for very rare circumstances. For now, use \u003ccode\u003eArray\u003c/code\u003e literals.\u003c/p\u003e  \u003cp\u003eTo get a sense of just how effective \u003ccode\u003eArray\u003c/code\u003es are at keeping data organized, let's rewrite our lottery code to use an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst winningNumbers = [32, 9, 14, 33, 48, 5];\u003cbr\u003e\u003cbr\u003efunction logWinningNumbers (numbers) {\u003cbr\u003e  console.log('Winning numbers:', numbers);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogWinningNumbers(winningNumbers);\u003cbr\u003e// LOG: Winning numbers: [32, 9, 14, 33, 48, 5]\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eArray\u003c/code\u003e provides organization, and we only have to remember \u003cem\u003eone\u003c/em\u003e identifier (\u003ccode\u003ewinningNumbers\u003c/code\u003e) instead of six (\u003ccode\u003efirstNumber\u003c/code\u003e, \u003ccode\u003esecondNumber\u003c/code\u003e, and so on). We can also call \u003ccode\u003eArrays\u003c/code\u003e \u003cem\u003eexpressive\u003c/em\u003e because putting all the winning numbers in a shared data structure communicates to other programmers \"Hey, these things go together.\"\u003c/p\u003e  \u003cp\u003eThe one benefit of storing all six lottery numbers separately is that we had a really easy way to access each individual number. For example, we could just reference \u003ccode\u003epowerBall\u003c/code\u003e to grab the sixth number. Luckily, \u003ccode\u003eArray\u003c/code\u003es offer an equally simple syntax for accessing individual members.\u003c/p\u003e  \u003ch2\u003eUsing the Computed Member Access Operator\u003c/h2\u003e  \u003cp\u003eEvery element in an \u003ccode\u003eArray\u003c/code\u003e is assigned a unique index value that corresponds to its place within the collection, \u003cstrong\u003estarting at 0\u003c/strong\u003e. The first element in the \u003ccode\u003eArray\u003c/code\u003e is at index \u003ccode\u003e0\u003c/code\u003e, the fifth element at index \u003ccode\u003e4\u003c/code\u003e, and the 428th element at index \u003ccode\u003e427\u003c/code\u003e. The \u003cem\u003ecomputed member access operator\u003c/em\u003e (\u003ccode\u003e[]\u003c/code\u003e) allows us to access the element at a given index.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Most people just call it \u003cem\u003ebracket notation\u003c/em\u003e or the \u003cem\u003ebracket operator\u003c/em\u003e, so don't worry too much about remembering the term \u003cem\u003ecomputed member access operator\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAccessing an Element\u003c/h3\u003e  \u003cp\u003eTo access an element, we use the computed member access operator like this: \u003ccode\u003enameOfArray[index]\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst winningNumbers = [32, 9, 14, 33, 48, 5];\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ewinningNumbers[0];\u003cbr\u003e// =\u0026gt; 32\u003cbr\u003e\u003cbr\u003ewinningNumbers[3];\u003cbr\u003e// =\u0026gt; 33 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take a minute to think about how we could access the \u003cstrong\u003elast\u003c/strong\u003e element in any \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf \u003ccode\u003emyArray\u003c/code\u003e contains 10 elements, the final element will be at \u003ccode\u003emyArray[9]\u003c/code\u003e. If \u003ccode\u003emyArray\u003c/code\u003e contains 15000 elements, the final element will be at \u003ccode\u003emyArray[14999]\u003c/code\u003e. So the index of the final element is always one less than the number of elements in the \u003ccode\u003eArray\u003c/code\u003e. If only we had an easy way to figure out how many elements are in the \u003ccode\u003eArray\u003c/code\u003e...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ealphabet.length;\u003cbr\u003e// =\u0026gt; 26\u003cbr\u003e\u003cbr\u003ealphabet[alphabet.length - 1];\u003cbr\u003e// =\u0026gt; \"z\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is why it's called the \u003cstrong\u003e\u003cem\u003ecomputed\u003c/em\u003e\u003c/strong\u003e \u003cem\u003emember access operator\u003c/em\u003e. We placed an expression (\u003ccode\u003ealphabet.length - 1\u003c/code\u003e) inside the square brackets, and the JavaScript engine \u003cem\u003ecomputed\u003c/em\u003e the value of that expression to determine which element we were trying to access. In this case, \u003ccode\u003ealphabet.length - 1\u003c/code\u003e evaluated to \u003ccode\u003e25\u003c/code\u003e, so \u003ccode\u003ealphabet[alphabet.length - 1]\u003c/code\u003e became \u003ccode\u003ealphabet[25]\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eUpdating the Value of an Element\u003c/h2\u003e  \u003cp\u003eWe can also use the computed member access operator (\u003ccode\u003e[]\u003c/code\u003e) — along with the assignment operator (\u003ccode\u003e=\u003c/code\u003e) — to update the value of an element in the array. To do that, we access the element we want then reassign that element's value using \u003ccode\u003e=\u003c/code\u003e. Say we've defined an array, \u003ccode\u003eplanets\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Juptier\", \"Saturn\", \"Uranus\", \"Neptune\"];\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks like we've got a typo. Let's fix it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eplanets[4] = \"Jupiter\"; \u003cbr\u003e//=\u0026gt; \"Jupiter\"\u003cbr\u003e\u003cbr\u003eplanets;\u003cbr\u003e//=\u0026gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You might wonder why that worked, given that we declared \u003ccode\u003eplanets\u003c/code\u003e using \u003ccode\u003econst\u003c/code\u003e. After all, declaring with \u003ccode\u003econst\u003c/code\u003e is supposed to prevent us from reassigning the value of the variable! This is an important thing to know about how \u003ccode\u003econst\u003c/code\u003e works with \u003ccode\u003eArray\u003c/code\u003es. We are not able to reassign the array \u003cem\u003eitself\u003c/em\u003e but we \u003cstrong\u003ecan\u003c/strong\u003e reassign any of its elements. We can also add or delete elements. JavaScript \u003ccode\u003eObject\u003c/code\u003es work similarly when declared using \u003ccode\u003econst\u003c/code\u003e (which isn't surprising, given that \u003ccode\u003eArray\u003c/code\u003es are a special type of \u003ccode\u003eObject\u003c/code\u003e).\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAdding an Element to the End of an Array\u003c/h3\u003e  \u003cp\u003eWhile it is not the best way to accomplish the task, we can also use the computed member access operator to add an element to the end of an array. If conclusive evidence of the existence of \u003ca href=\"https://en.wikipedia.org/wiki/Planet_Nine\"\u003ePlanet Nine\u003c/a\u003e is ever found, we could add it to the end of our array as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eplanets[planets.length] = \"Planet Nine\"; // Why did we use planets.length here?\u003cbr\u003e// =\u0026gt; \"Planet Nine\"\u003cbr\u003e\u003cbr\u003eplanets;\u003cbr\u003e//=\u0026gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Planet Nine\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe will learn better ways to add an element to the end of an array in the next lesson.\u003c/p\u003e  \u003ch2\u003eNested Arrays\u003c/h2\u003e  \u003cp\u003eWe mentioned above that arrays can contain elements of \u003cstrong\u003eany\u003c/strong\u003e data type; this includes \u003cstrong\u003eother \u003ccode\u003eArray\u003c/code\u003es\u003c/strong\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst egregiouslyNestedArray = ['How', ['deep', ['can', ['we', ['go', ['?'], 'Pretty'], 'dang'], 'deep,'], 'it'], 'seems.']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you examine the array above, you'll see it contains three elements, the second of which is itself an array.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[0];\u003cbr\u003e//=\u0026gt; 'How'\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1];\u003cbr\u003e//=\u0026gt; [ 'deep', [ 'can', [ 'we', [Array], 'dang' ], 'deep,' ], 'it' ]\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[2];\u003cbr\u003e//=\u0026gt; 'seems.' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo we know we can access the inner array using \u003ccode\u003eegregiouslyNestedArray[1]\u003c/code\u003e, but how do we access the array nested inside \u003cem\u003ethat\u003c/em\u003e array? We simply add another set of brackets:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][0];\u003cbr\u003e//=\u0026gt; 'deep'\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1][1];\u003cbr\u003e//=\u0026gt; [ 'can', [ 'we', [ 'go', [Array], 'Pretty' ], 'dang' ], 'deep,' ]\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1][2];\u003cbr\u003e//=\u0026gt; 'it' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can continue drilling down in this way, adding another set of brackets for each nested array, until we get to the innermost array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][1][1][1][1];\u003cbr\u003e//=\u0026gt; ['?'] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat innermost array contains only one element, so how would we access that?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][1][1][1][1][0];\u003cbr\u003e//=\u0026gt; '?' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile it's great that \u003ccode\u003eArray\u003c/code\u003es allow us to store other \u003ccode\u003eArray\u003c/code\u003es inside them, this is a terrible way to represent a deeply nested data structure. In general, it is best to keep your \u003ccode\u003eArray\u003c/code\u003es to no more than two levels deep. Two levels is perfect for representing two-dimensional things like a tic-tac-toe board:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst board = [\u003cbr\u003e  ['X', 'O', ' '],\u003cbr\u003e  [' ', 'X', 'O'],\u003cbr\u003e  ['X', ' ', 'O']\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003eboard;\u003cbr\u003e// =\u0026gt; [[\"X\", \"O\", \" \"], [\" \", \"X\", \"O\"], [\"X\", \" \", \"O\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe cool thing about representing a game board like that is in how we can access the different squares by specifying coordinates. The first \u003ccode\u003e[]\u003c/code\u003e operator grabs the row that we want, top (\u003ccode\u003eboard[0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1]\u003c/code\u003e), or bottom (\u003ccode\u003eboard[2]\u003c/code\u003e). For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eboard[1];\u003cbr\u003e// =\u0026gt; [\" \", \"X\", \"O\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second \u003ccode\u003e[]\u003c/code\u003e operator specifies the column, or the square within that row: left (\u003ccode\u003eboard[1][0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1][1]\u003c/code\u003e), or right (\u003ccode\u003eboard[1][2]\u003c/code\u003e). For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eboard[0][0];\u003cbr\u003e// =\u0026gt; \"X\"\u003cbr\u003e\u003cbr\u003eboard[0][2];\u003cbr\u003e// =\u0026gt; \" \"\u003cbr\u003e\u003cbr\u003eboard[2][2];\u003cbr\u003e// =\u0026gt; \"O\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEffectively, we're using X and Y coordinates to refer to data within a two- dimensional structure.\u003c/p\u003e  \u003ch2\u003eArray Methods\u003c/h2\u003e  \u003cp\u003eJavaScript includes a number of built-in \u003ccode\u003eArray\u003c/code\u003e \u003cem\u003emethods\u003c/em\u003e, functions that \u003cem\u003ebelong to\u003c/em\u003e (i.e., can only be called on) \u003ccode\u003eArray\u003c/code\u003es. These methods allow us to manipulate arrays in various ways, for example, to add an element to the beginning or end of an \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe have seen methods already in this course. In an earlier lesson, for example, we learned how to use a String method, \u003ccode\u003etoUpperCase()\u003c/code\u003e, to convert a String to all uppercase:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e\u003cbr\u003estring.toUpperCase();\u003cbr\u003e//=\u0026gt; \"HELLO\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs shown above, we call String methods \u003cem\u003eon\u003c/em\u003e a string or string variable using the dot notation. \u003ccode\u003eArray\u003c/code\u003e methods work in the same way. Some of them will take one or more arguments — for example, the element we want to add to the array. The arguments are passed in the parentheses after the method name.\u003c/p\u003e  \u003cp\u003eWe will learn about these \u003ccode\u003eArray\u003c/code\u003e methods in the next lesson. Before we get to that, however, we need to introduce one more concept.\u003c/p\u003e  \u003ch2\u003eMutability\u003c/h2\u003e  \u003cp\u003eSome methods update or \u003cem\u003emutate\u003c/em\u003e the object they are called on; these methods are referred to as \u003cem\u003edestructive\u003c/em\u003e. Other methods, known as \u003cem\u003enondestructive\u003c/em\u003e methods, leave the object intact. For example, the String method \u003ccode\u003etoUpperCase()\u003c/code\u003e is \u003cem\u003enondestructive\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e\u003cbr\u003estring.toUpperCase();\u003cbr\u003e//=\u0026gt; \"HELLO\"\u003cbr\u003e\u003cbr\u003estring;\u003cbr\u003e//=\u0026gt; \"Hello\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003etoUpperCase()\u003c/code\u003e method returns the uppercased version of \u003ccode\u003estring\u003c/code\u003e, it does not \u003cem\u003echange\u003c/em\u003e its value to uppercase.\u003c/p\u003e  \u003cp\u003eSometimes we want to mutate the original object but, in general, it's good practice to avoid mutating a program's state whenever possible. Otherwise, we won't always know what we're dealing with. You will learn more about immutability and why it's important later in the course. But, in the meantime, it's important to know which JavaScript methods are destructive and which are nondestructive so you can choose the appropriate method for what you need to accomplish.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, We learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to create them, access their elements, and change the value of elements. We also learned that arrays can contain elements of any data type, including other \u003ccode\u003eArray\u003c/code\u003es; we refer to these as \u003cem\u003enested\u003c/em\u003e arrays. Finally, we talked a little bit about the concept of mutability. Armed with this knowledge, we are now ready to tackle JavaScript \u003ccode\u003eArray\u003c/code\u003e methods.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"review-arrays"},{"id":178489,"title":"Review: Array Methods","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eAdd elements to an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove elements from an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eReplace elements in an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the last lesson, we learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to create them and access their elements. In this lab, we will dive into JavaScript's \u003ccode\u003eArray\u003c/code\u003e methods, which enable us to add, remove, and change elements.\u003c/p\u003e  \u003cp\u003eWe discussed the fact that it's important to pay attention to whether the method is \u003cem\u003edestructive\u003c/em\u003e (i.e., it \u003cem\u003emutates\u003c/em\u003e the array) or \u003cem\u003enondestructive\u003c/em\u003e. Another factor to pay attention to is what the \u003cem\u003ereturn value\u003c/em\u003e of each of these methods is. Be sure to follow along and experiment with each method in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e until you understand how it works, what it does to the original array, and what it returns.\u003c/p\u003e  \u003ch2\u003eAdd Elements to an Array\u003c/h2\u003e  \u003cp\u003eWe'll start with the JavaScript methods we can use to add elements to an array: \u003ccode\u003epush()\u003c/code\u003e and \u003ccode\u003eunshift()\u003c/code\u003e, which are \u003cem\u003edestructive\u003c/em\u003e methods, and the spread operator, which is \u003cem\u003enondestructive\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThese two methods work in the same way:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethey take one or more arguments (the element or elements you want to add)\u003c/li\u003e \u003cli\u003ethey \u003cem\u003ereturn\u003c/em\u003e the length of the modified array\u003c/li\u003e \u003cli\u003ethey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe difference is that the \u003ccode\u003e.push()\u003c/code\u003e method adds elements to the end of an \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003eunshift()\u003c/code\u003e adds them to the beginning of the array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst superheroes = ['Catwoman', 'She-Hulk', 'Jessica Jones'];\u003cbr\u003e\u003cbr\u003esuperheroes.push('Wonder Woman');\u003cbr\u003e// =\u0026gt; 4\u003cbr\u003e\u003cbr\u003esuperheroes;\u003cbr\u003e// =\u0026gt; [\"Catwoman\", \"She-Hulk\", \"Jessica Jones\", \"Wonder Woman\"]\u003cbr\u003e\u003cbr\u003econst cities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003ecities.unshift('Boston', 'Chicago');\u003cbr\u003e// =\u0026gt; 3\u003cbr\u003e\u003cbr\u003ecities;\u003cbr\u003e// =\u0026gt; [\"Boston\", \"Chicago\", \"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBefore moving on, try out the examples above as well as some examples of your own in the REPL.\u003c/p\u003e  \u003ch3\u003eSpread Operator\u003c/h3\u003e  \u003cp\u003eThe \u003cem\u003espread operator\u003c/em\u003e, which looks like an ellipsis: \u003ccode\u003e...\u003c/code\u003e, allows us to \"spread out\" the elements of an existing \u003ccode\u003eArray\u003c/code\u003e into a new \u003ccode\u003eArray\u003c/code\u003e, creating a copy:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003econst copyOfCoolCities = [...coolCities];\u003cbr\u003e\u003cbr\u003ecopyOfCoolCities;\u003cbr\u003e//=\u0026gt; [\"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote about copying arrays in Javascript\u003c/strong\u003e You might wonder why we would do this rather than just \u003ccode\u003ecopyOfCoolCities = coolCities\u003c/code\u003e. The answer is that \u003ccode\u003ecoolCities\u003c/code\u003e \u003cem\u003epoints to a location in memory\u003c/em\u003e and when you use the assignment operator to create a copy, you create a second variable that points to the \u003cem\u003esame\u003c/em\u003e location. What this means is that, if you change \u003ccode\u003ecopyOfCoolCities\u003c/code\u003e, \u003ccode\u003ecoolCities\u003c/code\u003e is changed as well (and vice versa).\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eA Second note about copying arrays in JavaScript\u003c/strong\u003e Copying arrays in JavaScript is complicated! Some methods of copying create \u003cem\u003edeep\u003c/em\u003e copies and some create \u003cem\u003eshallow\u003c/em\u003e copies. Using the spread operator to copy an array creates a shallow copy. What this means is that, if you use it to copy a nested array, the inner array (or arrays) \u003cem\u003estill points to the same location in memory\u003c/em\u003e as in the original array. So if you modify the \u003cem\u003einner\u003c/em\u003e array in the copy, it changes the inner array in the original array as well (and vice versa). Don't worry too much about shallow and deep copies at this point: just know that you can safely use the spread operator to clone \u003cem\u003enon-nested\u003c/em\u003e arrays.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eNote that, because the spread operator is an operator rather than a method, it works differently than \u003ccode\u003epush()\u003c/code\u003e and \u003ccode\u003eunshift()\u003c/code\u003e: in the example above, we're constructing an \u003ccode\u003eArray\u003c/code\u003e using \u003cem\u003eliteral\u003c/em\u003e notation (i.e., typing the square brackets) and populating it by using the spread operator on the \u003ccode\u003eArray\u003c/code\u003e we want to copy.\u003c/p\u003e  \u003cp\u003eWhere the spread operator comes in especially handy is when we want to add one or more new elements either before or after the elements in the original array (or both) without mutating the original array. To add an element to the front of the new array, we simply type in the new element before spreading the elements in the original array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003econst allCities = ['Los Angeles', ...coolCities];\u003cbr\u003e\u003cbr\u003ecoolCities;\u003cbr\u003e// =\u0026gt; [\"New York\", \"San Francisco\"]\u003cbr\u003e\u003cbr\u003eallCities;\u003cbr\u003e// =\u0026gt; [\"Los Angeles\", \"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd, as you might expect, to add a new item to the end of an \u003ccode\u003eArray\u003c/code\u003e, we type in the new element \u003cem\u003eafter\u003c/em\u003e spreading the elements in the original array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCats = ['Hobbes', 'Felix', 'Tom'];\u003cbr\u003e\u003cbr\u003econst allCats = [...coolCats, 'Garfield'];\u003cbr\u003e\u003cbr\u003ecoolCats;\u003cbr\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\"]\u003cbr\u003e\u003cbr\u003eallCats;\u003cbr\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\", \"Garfield\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, in both cases, we created a new \u003ccode\u003eArray\u003c/code\u003e instead of modifying the original one —\u0026nbsp;our \u003ccode\u003ecoolCities\u003c/code\u003e and \u003ccode\u003ecoolCats\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003es were untouched. Because we didn't modify the original array, in order to save the results of our work we had to assign it to a variable.\u003c/p\u003e  \u003cp\u003eBe sure to experiment with the spread operator in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e until you're comfortable with how it works — it will come in handy later!\u003c/p\u003e  \u003ch2\u003eRemove Elements from an Array\u003c/h2\u003e  \u003cp\u003eAs complements for \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, respectively, we have \u003ccode\u003e.pop()\u003c/code\u003e and \u003ccode\u003e.shift()\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e.pop()\u003c/code\u003e and \u003ccode\u003e.shift()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eAs with \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, these two methods work in the same way:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethey don't take any arguments\u003c/li\u003e \u003cli\u003ethey remove a single element\u003c/li\u003e \u003cli\u003ethey \u003cem\u003ereturn\u003c/em\u003e the element that is removed\u003c/li\u003e \u003cli\u003ethey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003e.pop()\u003c/code\u003e method removes the last element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.pop();\u003cbr\u003e// =\u0026gt; \"Sun\"\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003e.shift()\u003c/code\u003e method removes the first element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.shift();\u003cbr\u003e// =\u0026gt; \"Mon\"\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice above that both methods returned the removed element and mutated the original array.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eTo remove elements from an \u003ccode\u003eArray\u003c/code\u003e nondestructively (without mutating the original \u003ccode\u003eArray\u003c/code\u003e), we can use the \u003ccode\u003e.slice()\u003c/code\u003e method. Just as the name implies, \u003ccode\u003e.slice()\u003c/code\u003e returns a portion, or \u003cstrong\u003eslice\u003c/strong\u003e, of an \u003ccode\u003eArray\u003c/code\u003e. The method takes 0, 1, or 2 arguments and returns a new array containing the sliced elements.\u003c/p\u003e  \u003ch4\u003eWith No Arguments\u003c/h4\u003e  \u003cp\u003eIf we don't provide any arguments, \u003ccode\u003e.slice()\u003c/code\u003e will return a copy of the original \u003ccode\u003eArray\u003c/code\u003e with all elements intact:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003econst copyOfPrimes = primes.slice();\u003cbr\u003e\u003cbr\u003eprimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7]\u003cbr\u003e\u003cbr\u003ecopyOfPrimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that creating a copy using \u003ccode\u003e.slice()\u003c/code\u003e works the same way as if you use the spread operator: they both create a \u003cem\u003eshallow\u003c/em\u003e copy, and with both the copy points to a different object in memory than the original. If you add an element to one of the arrays, it does \u003cstrong\u003enot\u003c/strong\u003e get added to the others:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003econst copyOfPrimesUsingSlice = primes.slice();\u003cbr\u003e\u003cbr\u003econst copyOfPrimesUsingSpreadOperator = [...primes];\u003cbr\u003e\u003cbr\u003eprimes.push(11);\u003cbr\u003e// =\u0026gt; 5\u003cbr\u003e\u003cbr\u003eprimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7, 11]\u003cbr\u003e\u003cbr\u003ecopyOfPrimesUsingSlice;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7]\u003cbr\u003e\u003cbr\u003ecopyOfPrimesUsingSpreadOperator;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7] \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eWith Arguments\u003c/h4\u003e  \u003cp\u003eWe can also provide one or two arguments to \u003ccode\u003e.slice()\u003c/code\u003e: the first is the index where the slice should begin and the second is the index \u003cstrong\u003ebefore which\u003c/strong\u003e it should end:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(2, 5);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf no second argument is provided, the slice will run from the index specified by the first argument to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(5);\u003cbr\u003e// =\u0026gt; [\"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo return a new \u003ccode\u003eArray\u003c/code\u003e with the first element removed, we call \u003ccode\u003e.slice(1)\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(1);\u003cbr\u003e// =\u0026gt; [\"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can return an array with the last element removed in a way that will look familiar from the previous lesson:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(0, days.length - 1);\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, \u003ccode\u003e.slice()\u003c/code\u003e provides an easier syntax for referencing the last element (or elements) in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(-1);\u003cbr\u003e// =\u0026gt; [\"Sun\"]\u003cbr\u003e\u003cbr\u003edays.slice(-3);\u003cbr\u003e// =\u0026gt; [\"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.slice(0, -1);\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we provide a negative index, the JavaScript engine knows to start counting from the last element in the \u003ccode\u003eArray\u003c/code\u003e instead of the first.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eUnlike \u003ccode\u003e.slice()\u003c/code\u003e, which is nondestructive, \u003ccode\u003e.splice()\u003c/code\u003e performs destructive actions. Depending on how many arguments we give it, \u003ccode\u003e.splice()\u003c/code\u003e allows us to remove elements, add elements, or replace elements (or any combination of the three).\u003c/p\u003e  \u003ch4\u003eWith a Single Argument\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first argument expected by \u003ccode\u003e.splice()\u003c/code\u003e is the index at which to begin the splice. If we only provide the one argument, \u003ccode\u003e.splice()\u003c/code\u003e will destructively remove a chunk of the original \u003ccode\u003eArray\u003c/code\u003e beginning at the provided index and continuing to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.splice(2);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e \u003cstrong\u003eboth\u003c/strong\u003e mutated the original array (by removing a chunk) \u003cstrong\u003eand\u003c/strong\u003e returned a new array containing the removed chunk.\u003c/p\u003e  \u003cp\u003eWe can use a negative 'start' index with \u003ccode\u003esplice()\u003c/code\u003e, the same as with \u003ccode\u003eslice()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.splice(-2);\u003cbr\u003e// =\u0026gt; [\"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"] \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eWith Two Arguments\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start, deleteCount) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we provide two arguments to \u003ccode\u003e.splice()\u003c/code\u003e, the first is still the index at which to begin splicing, and the second dictates how many elements we want to remove from the \u003ccode\u003eArray\u003c/code\u003e. For example, to remove \u003ccode\u003e3\u003c/code\u003e elements, starting with the element at index \u003ccode\u003e2\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.splice(2, 3);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere again, we see that \u003ccode\u003esplice()\u003c/code\u003e removed elements from the original array, mutating that array, and returned the removed elements in a new array.\u003c/p\u003e  \u003ch2\u003eReplace Elements in an Array\u003c/h2\u003e  \u003ch3\u003e\n\u003ccode\u003e.splice()\u003c/code\u003e with 3+ arguments\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start, deleteCount, item1, item2, ...) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter the first two, every additional argument passed to \u003ccode\u003e.splice()\u003c/code\u003e will be inserted into the \u003ccode\u003eArray\u003c/code\u003e at the position indicated by the first argument. We can replace a single element in an \u003ccode\u003eArray\u003c/code\u003e as follows, discarding a card and drawing a new one:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst cards = ['Ace of Spades', 'Jack of Clubs', 'Nine of Clubs', 'Nine of Diamonds', 'Three of Hearts'];\u003cbr\u003e\u003cbr\u003ecards.splice(2, 1, 'Ace of Clubs');\u003cbr\u003e// =\u0026gt; [\"Nine of Clubs\"]\u003cbr\u003e\u003cbr\u003ecards;\u003cbr\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have deleted \"Nine of Clubs\" and inserted \"Ace of Clubs\" in place, effectively \u003cem\u003ereplacing\u003c/em\u003e the original card.\u003c/p\u003e  \u003cp\u003eOr we can remove two elements and insert three new ones as our restaurant expands its vegetarian options:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst menu = ['Jalapeno Poppers', 'Cheeseburger', 'Fish and Chips', 'French Fries', 'Onion Rings'];\u003cbr\u003e\u003cbr\u003emenu.splice(1, 2, 'Veggie Burger', 'House Salad', 'Teriyaki Tofu');\u003cbr\u003e// =\u0026gt; [\"Cheeseburger\", \"Fish and Chips\"]\u003cbr\u003e\u003cbr\u003emenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe aren't required to remove anything with \u003ccode\u003e.splice()\u003c/code\u003e — we can use it to insert any number of elements anywhere within an \u003ccode\u003eArray\u003c/code\u003e by passing 0 as the second argument. Here we're adding new books to our library in alphabetical order:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst books = ['Bleak House', 'David Copperfield', 'Our Mutual Friend'];\u003cbr\u003e\u003cbr\u003ebooks.splice(2, 0, 'Great Expectations', 'Oliver Twist');\u003cbr\u003e// =\u0026gt; []\u003cbr\u003e\u003cbr\u003ebooks;\u003cbr\u003e// =\u0026gt; [\"Bleak House\", \"David Copperfield\", \"Great Expectations\", \"Oliver Twist\", \"Our Mutual Friend\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e returns an empty \u003ccode\u003eArray\u003c/code\u003e when we provide a second argument of \u003ccode\u003e0\u003c/code\u003e. This makes sense because the return value is the set of elements that were removed, and we're telling it to remove \u003ccode\u003e0\u003c/code\u003e elements.\u003c/p\u003e  \u003cp\u003eKeep playing around with \u003ccode\u003e.splice()\u003c/code\u003e in the REPL to get comfortable with it.\u003c/p\u003e  \u003ch3\u003eUsing the Computed Member Access Operator to Replace Elements\u003c/h3\u003e  \u003cp\u003eRecall from the previous lesson that we can also use the computed member access operator to replace a single element in an \u003ccode\u003eArray\u003c/code\u003e. If we only need to replace one element, this is a simpler approach:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst cards = ['Ace of Spades', 'Jack of Clubs', 'Nine of Clubs', 'Nine of Diamonds', 'Three of Hearts'];\u003cbr\u003e\u003cbr\u003ecards[2] = 'Ace of Clubs';\u003cbr\u003e// =\u0026gt; \"Ace of Clubs\"\u003cbr\u003e\u003cbr\u003ecards;\u003cbr\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBoth this approach and \u003ccode\u003esplice()\u003c/code\u003e are destructive —\u0026nbsp;they modify the original \u003ccode\u003eArray\u003c/code\u003e. There's a \u003cem\u003enondestructive\u003c/em\u003e way to replace or add items at arbitrary points within an \u003ccode\u003eArray\u003c/code\u003e; to do it we need to combine the \u003ccode\u003eslice()\u003c/code\u003e method and the spread operator.\u003c/p\u003e  \u003ch3\u003eSlicing and Spreading\u003c/h3\u003e  \u003cp\u003eCombining \u003ccode\u003e.slice()\u003c/code\u003e and the spread operator allows us to replace elements \u003cem\u003enondestructively\u003c/em\u003e, leaving the original \u003ccode\u003eArray\u003c/code\u003e unharmed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst menu = ['Jalapeno Poppers', 'Cheeseburger', 'Fish and Chips', 'French Fries', 'Onion Rings'];\u003cbr\u003e\u003cbr\u003econst newMenu = [...menu.slice(0, 1), 'Veggie Burger', 'House Salad', 'Teriyaki Tofu', ...menu.slice(3)];\u003cbr\u003e\u003cbr\u003emenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Cheeseburger\", \"Fish and Chips\", \"French Fries\", \"Onion Rings\"]\u003cbr\u003e\u003cbr\u003enewMenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's unpack this a little bit. We're assigning an array to \u003ccode\u003enewMenu\u003c/code\u003e using literal notation. Inside the brackets, we are spreading the result of calling slice on \u003ccode\u003emenu\u003c/code\u003e with the arguments \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e, then typing in three new elements, then spreading the result of calling slice on \u003ccode\u003emenu\u003c/code\u003e with the argument \u003ccode\u003e3\u003c/code\u003e. Here, we are taking advantage of the fact that the \u003ccode\u003eslice()\u003c/code\u003e method \u003cstrong\u003ereturns a new array\u003c/strong\u003e. We can spread the elements in \u003cstrong\u003ethat\u003c/strong\u003e array just as we can with any other array.\u003c/p\u003e  \u003cp\u003ePlay around with this in the REPL until it makes sense; break it down into its component parts and try each piece on its own. It's the trickiest thing that we've encountered in this lesson, so don't sweat it if it takes a little while to sink in!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've learned a variety of methods we can use to remove, add, and replace the elements in \u003ccode\u003eArray\u003c/code\u003es. We've learned that some methods are \u003cem\u003edestructive\u003c/em\u003e and some are \u003cem\u003enondestructive\u003c/em\u003e. With this knowledge, you have the tools you need to manipulate \u003ccode\u003eArray\u003c/code\u003es in very complex ways.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/array-methods/javascript-array-methods.jpg\" alt=\"JavaScript Array Methods\"\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"review-array-methods"},{"id":173453,"title":"Review: Arrays Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice writing arrays\u003c/li\u003e \u003cli\u003ePractice using \u003cem\u003edestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e \u003cli\u003ePractice using \u003cem\u003enondestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've learned about how arrays work and about the array methods built in to JavaScript that we can use to manipulate them. Now it's time to practice what we've learned.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eOpen up the \u003ccode\u003etest\u003c/code\u003e folder and take a look at \u003ccode\u003eindexTest.js\u003c/code\u003e. Note that some of the names of the functions you will be writing begin with \u003ccode\u003edestructively\u003c/code\u003e and some don't. This is a clue as to which \u003ccode\u003eArray\u003c/code\u003e method you will need to use for each function.\u003c/p\u003e  \u003cp\u003eNote also that the first test asks for an array called \u003ccode\u003ecats\u003c/code\u003e, set to an initial value of \u003ccode\u003e[\"Milo\", \"Otis\", \"Garfield\"]\u003c/code\u003e. In your functions, you will be accessing and manipulating this array.\u003c/p\u003e  \u003cp\u003eNear the top of \u003ccode\u003eindexTest.js\u003c/code\u003e you will see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    beforeEach(function () {\u003cbr\u003e      cats.length = 0;\u003cbr\u003e\u003cbr\u003e      cats.push('Milo', 'Otis', 'Garfield');\u003cbr\u003e    }); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat this code does is \u003cem\u003ereset\u003c/em\u003e the array to its original contents before each test is run. The reason we need to do this is because some of your functions will be \u003cem\u003edestructive\u003c/em\u003e — they will change the original \u003ccode\u003ecats\u003c/code\u003e array. This is a problem because it means the input to the remaining functions will be dependent on the outcome of other functions. It also means that the expected return value of a function might change if the tests are run in a different order. This makes it more difficult both to write tests in the first place and to figure out how to get the tests to pass. Resetting the array returns us to a blank slate between tests.\u003c/p\u003e  \u003cp\u003eThis is also a good illustration of why it's generally good practice to avoid mutating a program's state whenever possible. If we use only \u003cem\u003enondestructive\u003c/em\u003e methods, we have complete control over what's going into and coming out of the function. This makes our programs more robust, easier to maintain, and less prone to bugs.\u003c/p\u003e  \u003cp\u003eRemember the workflow:\u003c/p\u003e  \u003col\u003e \u003cli\u003eRun the tests using \u003ccode\u003enpm test\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eRead the errors; vocalize what they're asking you to do.\u003c/li\u003e \u003cli\u003eWrite code; repeat steps 1 and 2 often until a test passes.\u003c/li\u003e \u003cli\u003eRepeat as needed for the remaining tests.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","exportId":"g178879c3d7b187bc062fe6b49b2bece3"},{"id":173454,"title":"Review: Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eIdentify JavaScript \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003cli\u003eAccess a value stored in an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn about JavaScript's Object methods\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhile \u003ccode\u003eArray\u003c/code\u003es are great for representing simple, ordered data sets, they're generally not so great at modeling a more complex structure. For that, we need \u003ccode\u003eObject\u003c/code\u003es. In this lesson, we'll begin to learn about \u003ccode\u003eObject\u003c/code\u003es, specifically, what they are, how to create them, and how to access values stored in them. In the next lesson, we'll learn how to modify \u003ccode\u003eObject\u003c/code\u003es, both destructively and nondestructively.\u003c/p\u003e  \u003cp\u003eBe sure to follow along with the examples in this lesson in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: You may have heard about or be familiar with the concept of \u003cem\u003eobject-oriented programming\u003c/em\u003e. Un-helpfully JavaScript called this thing with curly braces (\u003ccode\u003e{}\u003c/code\u003e) an \u003ccode\u003eObject\u003c/code\u003e, but it is not related to object orientation. There was initially no thought that JavaScript would ever need to accommodate object-oriented programming but as it grew in popularity, the ability to use object orientation was added to the language. A JavaScript \u003ccode\u003eObject\u003c/code\u003e, however, is a \u003cem\u003edata structure\u003c/em\u003e consisting of \u003ccode\u003ekey\u003c/code\u003es and \u003ccode\u003evalue\u003c/code\u003es, similar to Ruby's \u003ccode\u003eHash\u003c/code\u003e, Python's \u003ccode\u003eDictionary\u003c/code\u003e or C-like languages' \u003ccode\u003estruct\u003c/code\u003e(ure). It is important not to confuse the two.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify JavaScript Objects\u003c/h2\u003e  \u003cp\u003eLet's think about how we could represent a company's address in JavaScript. Addresses are made up of words and numbers, so at first it might make sense to store the address as a string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = '11 Broadway, 2nd Floor, New York, NY 10004'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat looks decent enough, but what happens if the company moves to a different floor in the same building? We just need to modify one piece of the address, but with a string we'd have to involve some pretty complicated find-and-replace pattern matching or replace the entire thing. Instead, let's throw the different pieces of the address into an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = ['11 Broadway', '2nd Floor', 'New York', 'NY', '10004']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we can just grab the small piece that we want to update and leave the rest as is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress[1] = '3rd Floor';\u003cbr\u003e\u003cbr\u003eaddress;\u003cbr\u003e//=\u0026gt; [\"11 Broadway\", \"3rd Floor\", \"New York\", \"NY\", \"10004\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis seems like a better solution, but it still has its drawbacks. Namely, \u003ccode\u003eaddress[1]\u003c/code\u003e is a \u003cstrong\u003eterrible\u003c/strong\u003e way to refer to the second line of an address. What if there is no second line, e.g., \u003ccode\u003e['11 Broadway', 'New York', 'NY', '10004']\u003c/code\u003e? Then \u003ccode\u003eaddress[1]\u003c/code\u003e will contain the city name instead of the floor number.\u003c/p\u003e  \u003cp\u003eWe could standardize it, putting an empty string in \u003ccode\u003eaddress[1]\u003c/code\u003e if there's no second line in the address, but it's still poorly named. \u003ccode\u003eaddress[1]\u003c/code\u003e offers very little insight into what data we should expect to find in there. It's a part of an address, sure, but which part?\u003c/p\u003e  \u003cp\u003eTo get around this, we could store the individual pieces of the address in separate, appropriately-named variables:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst street1 = '11 Broadway';\u003cbr\u003econst street2 = '2nd Floor';\u003cbr\u003econst city = 'New York';\u003cbr\u003econst state = 'NY';\u003cbr\u003econst zipCode = '10004'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's solved one issue but reintroduced the same problem we tackled in the lesson on \u003ccode\u003eArray\u003c/code\u003es: storing pieces of related data in a bunch of unrelated variables is not a great idea! If only there were a best-of-both-worlds solution —\u0026nbsp;a way to store all of our address information in a single data structure while also maintaining a descriptive naming scheme. The data structure we're after here is the \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003eWhat Is an Object?\u003c/h3\u003e  \u003cp\u003eLike \u003ccode\u003eArray\u003c/code\u003es, JavaScript \u003ccode\u003eObject\u003c/code\u003es are collections of data. They consist of a list of \u003cem\u003eproperties\u003c/em\u003e (\u003cem\u003ekey-value pairs\u003c/em\u003e) bounded by curly braces (\u003ccode\u003e{ }\u003c/code\u003e). The properties can point to values of any data type —\u0026nbsp;even other \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eWe can have empty \u003ccode\u003eObject\u003c/code\u003es:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr \u003ccode\u003eObject\u003c/code\u003es with a single property:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{ key: value } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we have to represent multiple properties in the same \u003ccode\u003eObject\u003c/code\u003e (which is most of the time), we use commas to separate them:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  key1: value1,\u003cbr\u003e  key2: value2\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also have nested \u003ccode\u003eObject\u003c/code\u003es, in which the values associated with one or more of the keys is another \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  key1: value1,\u003cbr\u003e  key2: {\u003cbr\u003e    innerKey1: innerValue1,\u003cbr\u003e    innerKey2: innerValue2\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere is no limit to how deeply nested our \u003ccode\u003eObject\u003c/code\u003es can be.\u003c/p\u003e  \u003cp\u003eFor a real example, let's define our address as an \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street: {\u003cbr\u003e    line1: '11 Broadway',\u003cbr\u003e    line2: '2nd Floor'\u003cbr\u003e  },\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: '10004'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we're defining \u003ccode\u003eaddress\u003c/code\u003e using \u003ccode\u003eObject\u003c/code\u003e literal syntax: literally typing out the \u003ccode\u003eObject\u003c/code\u003e inside the \u003ccode\u003e{}\u003c/code\u003e. Our address \u003ccode\u003eObject\u003c/code\u003e has four keys: street, city, state, and zipCode. The first key points to another \u003ccode\u003eObject\u003c/code\u003e which itself has two keys: line1 and line2. Note that there's a comma between each key-value pair in both the top-level \u003ccode\u003eObject\u003c/code\u003e and the nested \u003ccode\u003eObject\u003c/code\u003e. Practice creating an object in the REPL; then try leaving out a comma to see what happens.\u003c/p\u003e  \u003cp\u003eMultiple properties can have the same value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Avocado toast',\u003cbr\u003e  lunch: 'Avocado toast',\u003cbr\u003e  dinner: 'Avocado toast'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals.breakfast;\u003cbr\u003e// =\u0026gt; \"Avocado toast\"\u003cbr\u003e\u003cbr\u003emeals.dinner;\u003cbr\u003e// =\u0026gt; \"Avocado toast\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut keys must be unique. If the same key is used for multiple properties, only the final value will be retained.\u0026nbsp;The rest will be overwritten:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Avocado toast',\u003cbr\u003e  breakfast: 'Oatmeal',\u003cbr\u003e  breakfast: 'Scrambled eggs'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e// =\u0026gt; { breakfast: \"Scrambled eggs\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe real data in an \u003ccode\u003eObject\u003c/code\u003e is stored in the \u003cem\u003evalue\u003c/em\u003e half of the key-value pairings. The \u003cem\u003ekey\u003c/em\u003e is what lets us access that value. In the same way we use \u003cem\u003eidentifiers\u003c/em\u003e to name variables and functions, inside an \u003ccode\u003eObject\u003c/code\u003e we assign each value a key. We can then refer to that key and the JavaScript engine knows exactly which value we're trying to access.\u003c/p\u003e  \u003ch2\u003eAccess a Value Stored in an Object\u003c/h2\u003e  \u003cp\u003eWe access an \u003ccode\u003eObject\u003c/code\u003e stored in a variable in the same way we access any variable's value: by typing the variable name. Then, to access one of the values \u003cem\u003einside\u003c/em\u003e our \u003ccode\u003eObject\u003c/code\u003e, we add a reference to the key associated with the value we want; we can do that using either \u003cem\u003edot notation\u003c/em\u003e or \u003cem\u003ebracket notation\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eDot Notation\u003c/h3\u003e  \u003cp\u003eWith \u003cem\u003edot notation\u003c/em\u003e, we use the \u003cem\u003emember access operator\u003c/em\u003e (a single period) to access values in an \u003ccode\u003eObject\u003c/code\u003e. For example, we can grab the individual pieces of our address, above, as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.street;\u003cbr\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003cbr\u003e\u003cbr\u003eaddress.city;\u003cbr\u003e//=\u0026gt; \"New York\"\u003cbr\u003e\u003cbr\u003eaddress.state;\u003cbr\u003e//=\u0026gt; \"NY\"\u003cbr\u003e\u003cbr\u003eaddress.zipCode;\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen to access a value inside \u003ccode\u003eaddress.street\u003c/code\u003e, we simply append the inner key, again using dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.street.line1;\u003cbr\u003e//=\u0026gt; \"11 Broadway\"\u003cbr\u003e\u003cbr\u003eaddress.street.line2;\u003cbr\u003e//=\u0026gt; \"2nd Floor\" \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You might initially think we should use \u003ccode\u003eaddress.line1\u003c/code\u003e to access the value associated with the \u003ccode\u003eline1\u003c/code\u003e key, but \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003eaddress.street\u003c/code\u003e are \u003cem\u003eseparate\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003es. \u003ccode\u003eaddress.street\u003c/code\u003e is the \u003cem\u003eidentifier\u003c/em\u003e for the nested \u003ccode\u003eObject\u003c/code\u003e — the one that contains the \u003ccode\u003eline1\u003c/code\u003e key — and we can use dot notation on that just the same as on the top-level \u003ccode\u003eObject\u003c/code\u003e, \u003ccode\u003eaddress\u003c/code\u003e. Experiment in the REPL to make sure you understand how it works.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eDot notation is fantastic for readability, as we can just reference the bare key name (e.g., \u003ccode\u003estreet\u003c/code\u003e or \u003ccode\u003ezipCode\u003c/code\u003e). Because of this simple syntax, it should be your go-to strategy for accessing the properties of an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Most people just call it \u003cem\u003edot notation\u003c/em\u003e or the \u003cem\u003edot operator\u003c/em\u003e, so don't worry too much about remembering the term \u003cem\u003emember access operator\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eAccessing Nonexistent Properties\u003c/h4\u003e  \u003cp\u003eIf we try to access the \u003ccode\u003ecountry\u003c/code\u003e property of our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, what will happen?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.country;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt returns \u003ccode\u003eundefined\u003c/code\u003e because there is no matching key on the \u003ccode\u003eObject\u003c/code\u003e. JavaScript is too nice to throw an error, so it lets us down gently. Keep one thing in mind, though: if you're seeing \u003ccode\u003eundefined\u003c/code\u003e when trying to access an \u003ccode\u003eObject\u003c/code\u003e's properties, you should recheck which properties exist on the \u003ccode\u003eObject\u003c/code\u003e (along with your spelling and capitalization)!\u003c/p\u003e  \u003ch3\u003eBracket Notation\u003c/h3\u003e  \u003cp\u003eWith \u003cem\u003ebracket notation\u003c/em\u003e, we use the \u003cem\u003ecomputed member access operator\u003c/em\u003e, which, recall from the lesson on \u003ccode\u003eArray\u003c/code\u003es, is a pair of square brackets (\u003ccode\u003e[]\u003c/code\u003e). To access the same properties as above, we need to represent them as strings inside the operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress['street'];\u003cbr\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003cbr\u003e\u003cbr\u003eaddress['street']['line1'];\u003cbr\u003e//=\u0026gt; \"11 Broadway\"\u003cbr\u003e\u003cbr\u003eaddress['street']['line2'];\u003cbr\u003e//=\u0026gt; \"2nd Floor\"\u003cbr\u003e\u003cbr\u003eaddress['city'];\u003cbr\u003e//=\u0026gt; \"New York\"\u003cbr\u003e\u003cbr\u003eaddress['state'];\u003cbr\u003e//=\u0026gt; \"NY\"\u003cbr\u003e\u003cbr\u003eaddress['zipCode'];\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBracket notation is a bit harder to read than dot notation, so we always default to the latter. However, there are two main situations in which we need to use bracket notation.\u003c/p\u003e  \u003ch4\u003eNonstandard Keys\u003c/h4\u003e  \u003cp\u003eIf (for whatever reason) you need to use a nonstandard string as the key in an \u003ccode\u003eObject\u003c/code\u003e, you'll only be able to access the properties with bracket notation. For example, this is a valid \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wildKeys = {\u003cbr\u003e  'Cash rules everything around me.': 'Wu',\u003cbr\u003e  'C.R.E.A.M.': 'Tang',\u003cbr\u003e  'Get the money.': 'For',\u003cbr\u003e  \"$ $ bill, y'all!\": 'Ever'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's impossible to access those properties with dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewildKeys.'Cash rules everything around me.';\u003cbr\u003e// ERROR: Uncaught SyntaxError: Unexpected string \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut bracket notation works just fine:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewildKeys[\"$ $ bill, y'all!\"];\u003cbr\u003e//=\u0026gt; \"Ever\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn order to access a property via dot notation, \u003cstrong\u003ethe key must follow the same naming rules applied to variables and functions\u003c/strong\u003e. It's also important to note that under the hood \u003cstrong\u003eall keys are strings\u003c/strong\u003e. Don't waste too much time worrying whether a key is accessible via dot notation. If you follow these rules when naming your keys, everything will work out:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ecamelCaseEverything\u003c/li\u003e \u003cli\u003eStart the key with a lowercase letter\u003c/li\u003e \u003cli\u003eNo spaces or punctuation\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIf you follow those three rules, you'll be able to access all of an \u003ccode\u003eObject\u003c/code\u003e's properties via bracket notation \u003cstrong\u003eor\u003c/strong\u003e dot notation.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Always name your \u003ccode\u003eObject\u003c/code\u003e's keys according to the above three rules. Keeping everything standardized is good, and being able to access properties via dot notation makes the code much more readable.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eAccessing Properties Dynamically\u003c/h4\u003e  \u003cp\u003eThe other situation in which bracket notation is required is if we want to dynamically access properties (i.e., using variables rather than literal identifiers). The reason we need to enclose the key inside quotes when we use the literal key is because, when we \u003cstrong\u003edon't\u003c/strong\u003e use the quotes, JavaScript will interpret what's inside the brackets as a variable.\u003c/p\u003e  \u003cp\u003eFrom the lesson on \u003ccode\u003eArray\u003c/code\u003es, remember why we call it the \u003cem\u003ecomputed member access operator\u003c/em\u003e: we can place any expression inside the brackets and JavaScript will \u003cem\u003ecompute\u003c/em\u003e its value to figure out which property to access. For example, we can access the \u003ccode\u003ezipCode\u003c/code\u003e property from our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress['zip' + 'Code'];\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePretty neat, but the real strength of bracket notation is its ability to compute the value of variables on the fly. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Oatmeal',\u003cbr\u003e  lunch: 'Caesar salad',\u003cbr\u003e  dinner: 'Chimichangas'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet mealName = 'lunch';\u003cbr\u003e\u003cbr\u003emeals[mealName];\u003cbr\u003e//=\u0026gt; \"Caesar salad\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy placing \u003ccode\u003emealName\u003c/code\u003e in the square brackets, we're telling the JavaScript engine it needs to \u003cem\u003einterpret\u003c/em\u003e the value inside those brackets. It evalutes \u003ccode\u003emealName\u003c/code\u003e, resolves it to \u003ccode\u003e'lunch'\u003c/code\u003e, and returns \"Caesar salad\". Note that we didn't enclose the key in quotes: the keys themselves are strings, but \u003ccode\u003emealName\u003c/code\u003e is a variable \u003cem\u003econtaining\u003c/em\u003e a string. If we try to use the \u003ccode\u003emealName\u003c/code\u003e variable with dot notation instead, it doesn't work:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emealName = 'dinner';\u003cbr\u003e//=\u0026gt; \"dinner\"\u003cbr\u003e\u003cbr\u003emeals.mealName;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith dot notation, JavaScript doesn't treat \u003ccode\u003emealName\u003c/code\u003e as a variable —\u0026nbsp;instead it checks whether a property exists with the literal key \u003ccode\u003emealName\u003c/code\u003e, only finds properties named \u003ccode\u003ebreakfast\u003c/code\u003e, \u003ccode\u003elunch\u003c/code\u003e, and \u003ccode\u003edinner\u003c/code\u003e, and so returns \u003ccode\u003eundefined\u003c/code\u003e. Essentially, dot notation is for when you know the exact name of the property in advance, and bracket notation is for when you need to compute it when the program runs.\u003c/p\u003e  \u003cp\u003eThe need for bracket notation doesn't stop at dynamically accessing properties on an already-created \u003ccode\u003eObject\u003c/code\u003e. We can also use bracket notation to dynamically set properties \u003cem\u003eduring the creation of a new \u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst morningMeal = 'breakfast';\u003cbr\u003econst middayMeal = 'lunch';\u003cbr\u003econst eveningMeal = 'dinner';\u003cbr\u003e\u003cbr\u003econst meals = {\u003cbr\u003e  [morningMeal]: 'French toast',\u003cbr\u003e  [middayMeal]: 'Personal pizza',\u003cbr\u003e  [eveningMeal]: 'Fish and chips'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e//=\u0026gt; { breakfast: \"French toast\", lunch: \"Personal pizza\", dinner: \"Fish and chips\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnce again, by wrapping the variable names in square brackets, we're letting JavaScript know that it needs to interpret the contents. Let's try doing the same thing without the square brackets:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst morningMeal = 'breakfast';\u003cbr\u003econst middayMeal = 'lunch';\u003cbr\u003econst eveningMeal = 'dinner';\u003cbr\u003e\u003cbr\u003econst meals = {\u003cbr\u003e  morningMeal: 'French toast',\u003cbr\u003e  middayMeal: 'Personal pizza',\u003cbr\u003e  eveningMeal: 'Fish and chips'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e//=\u0026gt; { morningMeal: \"French toast\", middayMeal: \"Personal pizza\", eveningMeal: \"Fish and chips\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWithout the square brackets, JavaScript treated each key as a literal identifier instead of a variable. Bracket notation — the \u003cem\u003ecomputed member access operator\u003c/em\u003e — once again shows its powers of computation!\u003c/p\u003e  \u003cp\u003eBracket notation will really come in handy when we start iterating over \u003ccode\u003eObject\u003c/code\u003es and programmatically accessing and assigning properties.\u003c/p\u003e  \u003ch2\u003eJavaScript's Object Methods\u003c/h2\u003e  \u003cp\u003eJavaScript includes a number of built-in \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\"\u003estatic \u003ccode\u003eObject\u003c/code\u003e methods\u003c/a\u003e (\u003cem\u003estatic\u003c/em\u003e means that these methods are called on the \u003ccode\u003eObject\u003c/code\u003e class itself, rather than on an instance of an \u003ccode\u003eObject\u003c/code\u003e). We will talk briefly about a couple of them here and go into detail about one more in the next lesson.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe can get a list of the top-level keys in an \u003ccode\u003eObject\u003c/code\u003e by using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/a\u003e static method. We do that by calling \u003ccode\u003eObject.keys()\u003c/code\u003e and passing the \u003ccode\u003eObject\u003c/code\u003e instance as an argument. The return value is an \u003ccode\u003eArray\u003c/code\u003e containing all of the keys at the \u003cem\u003etop level\u003c/em\u003e of the \u003ccode\u003eObject\u003c/code\u003e instance.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wednesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eObject.keys(wednesdayMenu);\u003cbr\u003e//=\u0026gt; [\"cheesePlate\", \"fries\", \"salad\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that it didn't pick up the keys in the nested \u003ccode\u003echeesePlate\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e —\u0026nbsp;just the keys from the properties declared at the top level within \u003ccode\u003ewednesdayMenu\u003c/code\u003e. How do you think we could use \u003ccode\u003eObject.keys()\u003c/code\u003e to get a list of the keys inside the nested \u003ccode\u003eObject\u003c/code\u003e? Try it out in the REPL.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: The sequence in which keys are ordered in the returned \u003ccode\u003eArray\u003c/code\u003e is not consistent across browsers and should not be relied upon. All of the \u003ccode\u003eObject\u003c/code\u003e's keys will be in the \u003ccode\u003eArray\u003c/code\u003e, but you can't count on \u003ccode\u003ekeyA\u003c/code\u003e always being at index \u003ccode\u003e0\u003c/code\u003e of the \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003ekeyB\u003c/code\u003e always being at index \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/a\u003e static method behaves similarly to \u003ccode\u003eObject.keys()\u003c/code\u003e but, as you might expect, returns an array containing values rather than keys. Try this out in the REPL as well.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we identified what an \u003ccode\u003eObject\u003c/code\u003e is and how it gives us a better way to keep track of more complicated sets of related data. We also learned how to access values stored in an \u003ccode\u003eObject\u003c/code\u003e using dot notation and bracket notation, as well as when to use each. In the next lesson, we'll learn how to modify \u003ccode\u003eObject\u003c/code\u003es. We'll also explore the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eCreating and interacting with \u003ccode\u003eObject\u003c/code\u003es is an important skill in JavaScript programming. Before moving on, be sure to use \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e to practice creating \u003ccode\u003eObject\u003c/code\u003es (including nested \u003ccode\u003eObject\u003c/code\u003es) and accessing properties.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"review-objects"},{"id":178490,"title":"Review: Modifying Objects","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-modifying-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e property using dot or bracket notation\u003c/li\u003e \u003cli\u003eModify a property using dot or bracket notation\u003c/li\u003e \u003cli\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e nondestructively using the spread operator\u003c/li\u003e \u003cli\u003eUsing \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e nondestructively using \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove a property from an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIdentify the relationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we learned the basics of creating \u003ccode\u003eObject\u003c/code\u003es and accessing their properties. In this lesson we'll learn how to modify and remove properties, both destructively and nondestructively. Finally, we'll explore the relationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eAs always, don't forget to follow along in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e Property Using Dot or Bracket Notation\u003c/h2\u003e  \u003cp\u003eWe know how to initialize a variable by declaring it and assigning it a value using the assignment operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst city = \"New York\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe process of creating a property inside an existing object is similar; we specify the key and assign it a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst circle = {}; // Create `circle` and set it to an empty Object\u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; {}\u003cbr\u003e\u003cbr\u003ecircle.radius = 5; // Create the key inside `circle` and set its value to 5 \u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; { radius: 5 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can do this using either dot or bracket notation, and we can use any expression as the value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst circle = {};\u003cbr\u003e\u003cbr\u003ecircle.radius = 5;\u003cbr\u003e\u003cbr\u003ecircle['diameter'] = 10;\u003cbr\u003e\u003cbr\u003ecircle.circumference = circle.diameter * Math.PI;\u003cbr\u003e//=\u0026gt; 31.41592653589793\u003cbr\u003e\u003cbr\u003ecircle['area'] = Math.PI * circle.radius ** 2;\u003cbr\u003e//=\u0026gt; 78.53981633974483\u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; { radius: 5, diameter: 10, circumference: 31.41592653589793, area: 78.53981633974483 } \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eA Side Note\u003c/strong\u003e: Recall from the lesson on \u003ccode\u003eArray\u003c/code\u003es that we can add, modify or delete elements even if we use \u003ccode\u003econst\u003c/code\u003e to initialize the \u003ccode\u003eArray\u003c/code\u003e. The same thing applies here: we can add, modify or delete properties, but we can't reassign the variable itself.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Note that the process above gives us an alternative to typing out our \u003ccode\u003eObject\u003c/code\u003e using literal syntax: we can initialize an empty array and then use dot notation or bracket notation to create the properties programmatically. This approach is less error-prone than using literal syntax since JavaScript creates the correct \u003ccode\u003eObject\u003c/code\u003e syntax for us. Try it out in the REPL.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eModify a Property Using Dot or Bracket Notation\u003c/h3\u003e  \u003cp\u003eWe can update or overwrite existing properties simply by assigning a new value to an existing key:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mondayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Curly',\u003cbr\u003e  salad: 'Cobb'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emondayMenu.fries = 'Sweet potato';\u003cbr\u003e\u003cbr\u003emondayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Cobb\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that modifying an \u003ccode\u003eObject\u003c/code\u003e's properties in the way we did above is \u003cem\u003edestructive\u003c/em\u003e. This means that we're making changes directly to the original \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at an example. We'll start by creating a function to encapsulate this modification process:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction destructivelyUpdateObject (obj, key, value) {\u003cbr\u003e  obj[key] = value; //Why are we using bracket notation here?\u003cbr\u003e\u003cbr\u003e  return obj;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur function takes three arguments: the original menu \u003ccode\u003eObject\u003c/code\u003e, the \u003ccode\u003ekey\u003c/code\u003e identifying the property we want to update, and the \u003ccode\u003evalue\u003c/code\u003e we want to change its value to.\u003c/p\u003e  \u003cp\u003eAt our restaurant, we've finished serving for the day. It's time to update our \u003ccode\u003emondayMenu\u003c/code\u003e to the \u003ccode\u003etuesdayMenu\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mondayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Cobb'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst tuesdayMenu = destructivelyUpdateObject(mondayMenu, 'salad', 'Caesar');\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" }\u003cbr\u003e\u003cbr\u003etuesdayMenu.salad;\u003cbr\u003e//=\u0026gt; \"Caesar\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks like our \u003ccode\u003etuesdayMenu\u003c/code\u003e came out perfectly. But what about \u003ccode\u003emondayMenu\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emondayMenu.salad;\u003cbr\u003e//=\u0026gt; \"Caesar\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDang! We don't serve Caesar salad on Mondays. Instead of destructively updating the original menu, is there a way to nondestructively merge the change(s) into a new \u003ccode\u003eObject\u003c/code\u003e, leaving the original intact?\u003c/p\u003e  \u003ch2\u003eUpdate an Object Nondestructively Using the Spread Operator\u003c/h2\u003e  \u003cp\u003eLet's create a new method; it will take the same three arguments as the previous method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  // Code to return new, updated menu object\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRecall from the lessons on \u003ccode\u003eArray\u003c/code\u003es that we can use the \u003cem\u003espread operator\u003c/em\u003e to copy all the elements of an existing array into a new array. We can do the same thing with \u003ccode\u003eObject\u003c/code\u003es. Let's use the spread operator to copy all of the old menu \u003ccode\u003eObject\u003c/code\u003e's properties into a new \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  const newObj = { ...obj };\u003cbr\u003e\u003cbr\u003e  // Code to return new, updated menu object goes here\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a clone of the original object and save it into a new variable. We can then update the newly-created \u003ccode\u003enewObj\u003c/code\u003e with the desired change and return that updated menu, leaving the original menu \u003ccode\u003eObject\u003c/code\u003e unchanged:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  const newObj = { ...obj };\u003cbr\u003e\u003cbr\u003e  newObj[key] = value;\u003cbr\u003e\u003cbr\u003e  return newObj;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst sundayMenu = nondestructivelyUpdateObject(tuesdayMenu, 'fries', 'Shoestring');\u003cbr\u003e\u003cbr\u003etuesdayMenu.fries;\u003cbr\u003e//=\u0026gt; \"Sweet potato\"\u003cbr\u003e\u003cbr\u003esundayMenu.fries;\u003cbr\u003e//=\u0026gt; \"Shoestring\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo review, we are calling our \u003ccode\u003enondestructivelyUpdateObject()\u003c/code\u003e function, passing as our arguments the original menu (\u003ccode\u003etuesdayMenu\u003c/code\u003e) and the key and value representing the desired change. The function first makes a copy of \u003ccode\u003etuesdayMenu\u003c/code\u003e, then changes the value associated with the \u003ccode\u003efries\u003c/code\u003e key to \u003ccode\u003e\"Shoestring\"\u003c/code\u003e. Finally, it returns the updated menu, which is stored into the variable \u003ccode\u003esundayMenu\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhile this works, it's quite a bit to write, and it's not very extensible. If we want to modify more than a single property, we'll have to completely rewrite our function! Luckily, JavaScript has a much better solution for us.\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we took a look at a couple of JavaScript's static \u003ccode\u003eObject\u003c/code\u003e methods, \u003ccode\u003eObject.keys()\u003c/code\u003e and \u003ccode\u003eObject.values()\u003c/code\u003e. A third method, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e, will allow us to combine properties from multiple \u003ccode\u003eObject\u003c/code\u003es into a single \u003ccode\u003eObject\u003c/code\u003e. The method takes two or more \u003ccode\u003eObject\u003c/code\u003es as its arguments. The first argument passed to \u003ccode\u003eObject.assign()\u003c/code\u003e is the \u003ccode\u003eObject\u003c/code\u003e into which all of the properties will be merged. Every additional argument is an \u003ccode\u003eObject\u003c/code\u003e whose properties we want to merge into the first \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.assign(initialObject, additionalObject, additionalObject, ...); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe return value of \u003ccode\u003eObject.assign()\u003c/code\u003e is the initial \u003ccode\u003eObject\u003c/code\u003e after all of the additional \u003ccode\u003eObject\u003c/code\u003es' properties have been merged in:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.assign({ eggs: 3 }, { flour: '1 cup' });\u003cbr\u003e//=\u0026gt; { eggs: 3, flour: \"1 cup\" }\u003cbr\u003e\u003cbr\u003eObject.assign({ eggs: 3 }, { chocolateChips: '1 cup', flour: '2 cups' }, { flour: '1/2 cup' });\u003cbr\u003e// { eggs: 3, chocolateChips: \"1 cup\", flour: \"1/2 cup\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePay attention to the \u003ccode\u003eflour\u003c/code\u003e property in the above example. \u003cstrong\u003eIf multiple \u003ccode\u003eObject\u003c/code\u003es have a property with the same key, the last key to be defined wins out\u003c/strong\u003e. Essentially, the last call to \u003ccode\u003eObject.assign()\u003c/code\u003e in the above snippet is wrapping all of the following assignments into a single line of code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst recipe = { eggs: 3 };\u003cbr\u003e\u003cbr\u003erecipe.chocolateChips = '1 cup';\u003cbr\u003e\u003cbr\u003erecipe.flour = '2 cups';\u003cbr\u003e\u003cbr\u003erecipe.flour = '1/2 cup'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry both approaches out in REPL and verify that they yield the same results.\u003c/p\u003e  \u003cp\u003eNote that the \u003ccode\u003eObject\u003c/code\u003e being passed as the first argument — in this case, recipe — is modified and returned at the end. So simply using \u003ccode\u003eObject.assign()\u003c/code\u003e does not make our function nondestructive. So how do we solve that problem? Well, the first argument we pass \u003cstrong\u003edoes not need to be an existing \u003ccode\u003eObject\u003c/code\u003e\u003c/strong\u003e!\u003c/p\u003e  \u003ch2\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e Nondestructively Using \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eA common pattern for \u003ccode\u003eObject.assign()\u003c/code\u003e is to provide an empty \u003ccode\u003eObject\u003c/code\u003e as the first argument. That way we're composing an entirely new \u003ccode\u003eObject\u003c/code\u003e instead of modifying or overwriting the properties of an existing \u003ccode\u003eObject\u003c/code\u003e. This pattern allows us to rewrite the above \u003ccode\u003edestructivelyUpdateObject()\u003c/code\u003e function in a nondestructive way:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  return Object.assign({}, obj, { [key]: value });\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code above takes the first argument (an empty \u003ccode\u003eObject\u003c/code\u003e), adds all the properties in \u003ccode\u003eobj\u003c/code\u003e to it, then adds one final property consisting of the key and value that represent the change we want to make. If that key doesn't already exist in \u003ccode\u003eobj\u003c/code\u003e, it is added and its value is set to \u003ccode\u003evalue\u003c/code\u003e. If it does already exist, its old value is replaced by \u003ccode\u003evalue\u003c/code\u003e. Note that all the arguments to \u003ccode\u003eObject.assigne()\u003c/code\u003e must be objects, so we're representing the key-value pair as an \u003ccode\u003eObject\u003c/code\u003e using literal syntax here. Finally, the resulting new \u003ccode\u003eObject\u003c/code\u003e is returned.\u003c/p\u003e  \u003cp\u003eIn other languages (like Ruby), this behavior is called \"merging.\" You take an original base \u003ccode\u003eObject\u003c/code\u003e (maybe with some typical \"standard\" attribute / value pairs already set), and then you \"merge\" in additional Object(s).\u003c/p\u003e  \u003cp\u003eLet's take a look at it using our \u003ccode\u003erecipe\u003c/code\u003e example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  return Object.assign({}, obj, { [key]: value });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst recipe = { eggs: 3 };\u003cbr\u003e\u003cbr\u003econst newRecipe = nondestructivelyUpdateObject(recipe, 'chocolate', '1 cup');\u003cbr\u003e//=\u0026gt; { eggs: 3, chocolate: \"1 cup\" }\u003cbr\u003e\u003cbr\u003enewRecipe;\u003cbr\u003e//=\u0026gt; { eggs: 3, chocolate: \"1 cup\" }\u003cbr\u003e\u003cbr\u003erecipe;\u003cbr\u003e//=\u0026gt; { eggs: 3 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's important that we merge everything into a new, empty \u003ccode\u003eObject\u003c/code\u003e. Otherwise, we would be modifying the original \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSo now let's write a new function for our restaurant that uses this technique. We can also make one additional improvement: we can set up our function to take an \u003ccode\u003eObject\u003c/code\u003e containing the changes we want to make as an argument, rather than a single key and value. This enables us to make multiple changes with one call to the function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction createNewMenu (oldMenu, menuChanges) {\u003cbr\u003e  return Object.assign({}, oldMenu, menuChanges);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst tuesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Caesar'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst newOfferings = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst wednesdayMenu = createNewMenu(tuesdayMenu, newOfferings);\u003cbr\u003e\u003cbr\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\", salad: \"Southwestern\" }\u003cbr\u003e\u003cbr\u003etuesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the value for \u003ccode\u003efries\u003c/code\u003e remains the same because our \u003ccode\u003enewOfferings\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e did not contain a change for that property. \u003cstrong\u003eHowever, this does not work for \u003cem\u003enested\u003c/em\u003e \u003ccode\u003eObjects\u003c/code\u003e.\u003c/strong\u003e For example, if \u003ccode\u003enewOfferings\u003c/code\u003e did not have an updated value for \u003ccode\u003ehard\u003c/code\u003e cheese:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst newOfferings = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina'\u003cbr\u003e  },\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur updated menu would not include that property and would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\"}, fries: \"Sweet potato\", salad: \"Southwestern\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e... instead of the desired outcome of this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Manchego\"}, fries: \"Sweet potato\", salad: \"Southwestern\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou don't need to worry about this too much for now: just be aware that this method does not create a \u003cem\u003edeep clone\u003c/em\u003e. You will learn how to do that later in the course.\u003c/p\u003e  \u003cp\u003eBon appétit!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Doing nondestructive updates (i.e. \"creating new things and merging on top\") is a really important pattern. It turns out that, in many places, nondestructive updates are more performant. The main reason for this is when you add something to an existing \u003ccode\u003eObject\u003c/code\u003e, the computer has to make sure that the \u003ccode\u003eObject\u003c/code\u003e has enough room to add what you're saying to add. If it doesn't, the computer needs to do cleanup work, find some more space, copy the old thing over, add the new, thing, and then resume work. That \"accounting\" process is actually quite slow.\u003c/p\u003e  \u003cp\u003eFurthermore, in the cloud-based world of programming we're moving to more and more, we can't be sure that two computers will share the same memory. They might be servers separated by centimeters or kilometers. Using nondestructive updates ensures that our functions have \"all they need\" to run a function call independently, i.e., they have their own copy of the data they need and aren't sharing memory with other machines.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eRemove a Property from an Object\u003c/h2\u003e  \u003cp\u003eUh oh, we ran out of Southwestern dressing, so we have to take the salad off the menu. In JavaScript, that's as easy as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wednesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edelete wednesdayMenu.salad;\u003cbr\u003e//=\u0026gt; true\u003cbr\u003e\u003cbr\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe pass the property that we'd like to remove to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e operator, and JavaScript takes care of the rest. Poof! No more \u003ccode\u003esalad\u003c/code\u003e property on the \u003ccode\u003ewednesdayMenu\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify the Relationship Between Arrays and Objects\u003c/h2\u003e  \u003cp\u003eThink back to the early lesson on data types in JavaScript. We listed off seven types into which all data falls: numbers, strings, booleans, symbols, \u003ccode\u003eObject\u003c/code\u003es, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e. Notice anything missing? Arrays!\u003c/p\u003e  \u003cp\u003eWhy isn't an \u003ccode\u003eArray\u003c/code\u003e a fundamental data type in JavaScript? The answer is that \u003cstrong\u003eit's actually a special type of \u003ccode\u003eObject\u003c/code\u003e\u003c/strong\u003e. Yes, that's right: \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eArray\u003c/code\u003es are \u003ccode\u003eObject\u003c/code\u003es\u003c/em\u003e\u003c/strong\u003e. To underscore this point, check out what the \u003ccode\u003etypeof\u003c/code\u003e operator returns when we use it on an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof [];\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can set properties on an \u003ccode\u003eArray\u003c/code\u003e just like a regular \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [];\u003cbr\u003e\u003cbr\u003emyArray.summary = 'Empty array!';\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [summary: \"Empty array!\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can modify and access those properties, too:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray['summary'] = 'This array is totally empty.';\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [summary: \"This array is totally empty.\"]\u003cbr\u003e\u003cbr\u003emyArray.summary;\u003cbr\u003e//=\u0026gt; \"This array is totally empty.\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, \u003cem\u003eeverything\u003c/em\u003e we just learned how to do to \u003ccode\u003eObject\u003c/code\u003es can also be done to \u003ccode\u003eArray\u003c/code\u003es because \u003ccode\u003eArray\u003c/code\u003es \u003cstrong\u003eare\u003c/strong\u003e \u003ccode\u003eObject\u003c/code\u003es. Just special ones. To see the special stuff, let's \u003ccode\u003e.push()\u003c/code\u003e some values into our \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.push(2, 3, 5, 7);\u003cbr\u003e//=\u0026gt; 4\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, 3, 5, 7, summary: \"This array is totally empty.\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCool, looks like everything's still in there. What's your guess about the \u003ccode\u003eArray\u003c/code\u003e's \u003ccode\u003e.length\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHuh, that's interesting. Surely our \u003ccode\u003esummary\u003c/code\u003e must be the first element in the \u003ccode\u003eArray\u003c/code\u003e, no? After all, we did add it before we \u003ccode\u003e.push()\u003c/code\u003eed all those values in.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray[0];\u003cbr\u003e//=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHm, then maybe it's the last element?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray[myArray.length - 1];\u003cbr\u003e//=\u0026gt; 7 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat the heck? Where is it?\u003c/p\u003e  \u003cp\u003eYou see, one of the 'special' features of an \u003ccode\u003eArray\u003c/code\u003e is that \u003cstrong\u003eits \u003ccode\u003eArray\u003c/code\u003e-style elements are stored separately from its \u003ccode\u003eObject\u003c/code\u003e-style properties\u003c/strong\u003e. The \u003ccode\u003e.length\u003c/code\u003e property of an \u003ccode\u003eArray\u003c/code\u003e describes how many items exist in its special list of elements. Its \u003ccode\u003eObject\u003c/code\u003e-style properties are not included in that calculation.\u003c/p\u003e  \u003cp\u003eThis brings up an interesting question: if we add a new property to an \u003ccode\u003eArray\u003c/code\u003e that has a key of \u003ccode\u003e0\u003c/code\u003e, how does the JavaScript engine know whether it should be an \u003ccode\u003eObject\u003c/code\u003e-style property or an \u003ccode\u003eArray\u003c/code\u003e-style element?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [];\u003cbr\u003e\u003cbr\u003emyArray[0] = 'Will this be an `Object` property or an `Array` element?';\u003cbr\u003e//=\u0026gt; \"Will this be an `Object` property or an `Array` element?\"\u003cbr\u003e\u003cbr\u003e// Moment of truth...\u003cbr\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [\"Will this be an `Object` property or an `Array` element?\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo JavaScript used that assignment operation to add a new \u003ccode\u003eArray\u003c/code\u003e-style element. What happens if we enclose the integer in quotation marks, turning it into a string?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray['0'] = 'What about this one?';\u003cbr\u003e//=\u0026gt; \"What about this one?\"\u003cbr\u003e\u003cbr\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [\"What about this one?\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is hitting on a fundamental truth: \u003cstrong\u003eall keys in \u003ccode\u003eObject\u003c/code\u003es and all indexes in \u003ccode\u003eArray\u003c/code\u003es are actually strings\u003c/strong\u003e. In \u003ccode\u003emyArray[0]\u003c/code\u003e we're using the integer \u003ccode\u003e0\u003c/code\u003e, but under the hood the JavaScript engine automatically converts that to the string \u003ccode\u003e\"0\"\u003c/code\u003e. When we access elements or properties of an \u003ccode\u003eArray\u003c/code\u003e, the engine routes all integers and integers masquerading as strings (e.g., \u003ccode\u003e'14'\u003c/code\u003e, \u003ccode\u003e\"953\"\u003c/code\u003e, etc.) to the \u003ccode\u003eArray\u003c/code\u003e's special list of elements, and it treats everything else as a simple \u003ccode\u003eObject\u003c/code\u003e property. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003emyArray['1'] = 'Hi';\u003cbr\u003e//=\u0026gt; \"Hi\"\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, \"Hi\", 5, 7]\u003cbr\u003e\u003cbr\u003emyArray['01'] = 'Ho';\u003cbr\u003e//=\u0026gt; \"Ho\"\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, \"Hi\", 5, 7, 01: \"Ho\"]\u003cbr\u003e\u003cbr\u003emyArray[01];\u003cbr\u003e//=\u0026gt; \"Hi\"\u003cbr\u003e\u003cbr\u003emyArray['01'];\u003cbr\u003e//=\u0026gt; \"Ho\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter adding our weird \u003ccode\u003e'01'\u003c/code\u003e property, the \u003ccode\u003e.length\u003c/code\u003e property still returns \u003ccode\u003e4\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo it would stand to reason that \u003ccode\u003eObject.keys()\u003c/code\u003e would only return \u003ccode\u003e'01'\u003c/code\u003e, right?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.keys(myArray);\u003cbr\u003e//=\u0026gt; [\"0\", \"1\", \"2\", \"3\", \"01\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUnfortunately not. The reason why \u003ccode\u003eArray\u003c/code\u003es have this behavior would take us deep inside the JavaScript source code, and it's frankly not that important. Just remember these simple guidelines, and you'll be just fine:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eFor accessing elements in an \u003ccode\u003eArray\u003c/code\u003e, always use integers\u003c/strong\u003e.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eBe wary of setting \u003ccode\u003eObject\u003c/code\u003e-style properties on an \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e. There's rarely any reason to, and it's usually more trouble than it's worth.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eRemember that all \u003ccode\u003eObject\u003c/code\u003e keys, including \u003ccode\u003eArray\u003c/code\u003e indexes, are strings\u003c/strong\u003e. This will really come into play when we learn how to iterate over \u003ccode\u003eObject\u003c/code\u003es, so keep it in the back of your mind.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this and the previous lesson, we dug deep into \u003ccode\u003eObject\u003c/code\u003es in JavaScript. We identified what an \u003ccode\u003eObject\u003c/code\u003e is and how to access values stored in it. We also covered how to add and remove properties and how to use some of JavaScript's convenience methods (\u003ccode\u003eObject.keys()\u003c/code\u003e, \u003ccode\u003eObject.values()\u003c/code\u003e, and \u003ccode\u003eObject.assign()\u003c/code\u003e). We also explored the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"review-modifying-objects"},{"id":173455,"title":"Review: Objects Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ePerform operations on an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe covered the concepts of \u003ccode\u003eObject\u003c/code\u003es in JavaScript. Now it's time to put the concepts into practice.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eFollow the steps below, running \u003ccode\u003enpm test\u003c/code\u003e as you go to get additional information from the tests.\u003c/p\u003e  \u003cp\u003eLet's say we are working on a program that will keep track of a company's employees. We want to store each \u003ccode\u003eemployee\u003c/code\u003e as an \u003ccode\u003eObject\u003c/code\u003e. We're starting small, so to begin with we'll only keep track of the employee's name and street address.\u003c/p\u003e  \u003cp\u003eTo start, define a \u003ccode\u003eemployee\u003c/code\u003e variable and assign it to an \u003ccode\u003eObject\u003c/code\u003e containing \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003estreetAddress\u003c/code\u003e keys; you can use whatever values you like. Use literal syntax to create your \u003ccode\u003eObject\u003c/code\u003e. Various updates will be applied to this variable (destructively and non-destructively) in this lab.\u003c/p\u003e  \u003cp\u003eOnce you've initialized the \u003ccode\u003eemployee\u003c/code\u003e Object, you'll need to create the following four functions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should take in three arguments: a \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, a \u003ccode\u003ekey\u003c/code\u003e and a \u003ccode\u003evalue\u003c/code\u003e. This function should not mutate the \u003ccode\u003eemployee\u003c/code\u003e; it should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that has an updated \u003ccode\u003evalue\u003c/code\u003e for the \u003ccode\u003ekey\u003c/code\u003e passed in.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edestructivelyUpdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should work the same as \u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e passed in.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e: this function should take in a \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e and a \u003ccode\u003ekey\u003c/code\u003e. It should delete the property with that \u003ccode\u003ekey\u003c/code\u003e from the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e. This should not mutate the original \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e; it should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that doesn't include the identified key-value pair.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edestructivelyDeleteFromEmployeeByKey()\u003c/code\u003e: this function should work the same as \u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAs you work on your functions, be sure to think about when to use dot notation vs. bracket notation.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lab, we practiced creating an \u003ccode\u003eObject\u003c/code\u003e and performing operations on it.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"\u003eMDN: Object\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gaa5758efd3ee3087c6e1e42145c6dce3"},{"id":173456,"title":"Review: Debugging","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-basics-intro-to-debugging-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-intro-to-debugging-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-intro-to-debugging-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine \u003cem\u003etracing\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eUse the built-in \u003ccode\u003econsole\u003c/code\u003e object for debugging\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003econsole.log()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003econsole.error()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003econsole.warn()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003econsole.table()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs developers, one of the things that we spend about half of our time on is debugging. Debugging is the process of figuring out where our code is either breaking, or giving us an unexpected result. Debugging is absolutely normal, and a crucial part of the development process. With a little practice, you'll become an expert! In this lesson, we'll look at a few different ways to print data to the JavaScript console as a means of debugging our code.\u003c/p\u003e  \u003ch2\u003eDefine \u003cem\u003etracing\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eWe've already used \u003ccode\u003econsole.log()\u003c/code\u003e to print out data to the console, but we haven't really discussed why you'd want to do that. In short, it's one of the most basic, best tools in a JavaScript programmer's debugging toolkit.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eAs soon as we started programming, we found to our surprise that it wasn’t as easy to get programs right as we had thought. We had to discover debugging. I can remember the exact instant when I realized that a large part of my life from then on was going to be spent in finding mistakes in my own programs. — Maurice Wilkes, 1949\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003e\u003cem\u003eTracing\u003c/em\u003e is using output statements (like \u003ccode\u003econsole.log()\u003c/code\u003e) to provide feedback about \"what the machine is thinking.\" Oftentimes we request our code to behave like a machine, or like a process...\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/hangry.gif\" alt=\"WHERE'S MY MAC N' CHEESE?\"\u003e \u003c/p\u003e  \u003cp\u003e...and sometimes that process doesn't \u003cem\u003equite\u003c/em\u003e give us what we want. Tracing allows us to check some assumptions. Taking Liz Lemon in the picture as an example, she'd want to know:\u003c/p\u003e  \u003col\u003e \u003cli\u003eDid the person who places order get my Mac N' Cheese order?\u003c/li\u003e \u003cli\u003eDid the person who receives orders get my Mac N' Cheese order?\u003c/li\u003e \u003cli\u003eWas my Mac N' Cheese order on the receipt? If not, problem happened \u003cem\u003ebefore\u003c/em\u003e this point (investigate steps 1 and 2). If not, problem happened after.\u003c/li\u003e \u003cli\u003e(Judging by the fact that there are lunches on the table, clearly the order got here, was paid for, and was put on the table. No debugging needed)\u003c/li\u003e \u003cli\u003eWho opened up the box of lunch orders?\u003c/li\u003e \u003cli\u003eDid any of the writers see my order?\u003c/li\u003e \u003cli\u003eIf someone saw it, and it's not there, someone took it. If no one saw it, call restaurant to make sure they fulfilled the receipt.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWe can imagine that Liz could check these steps above with code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCheck the \u003ccode\u003eObject\u003c/code\u003e of \u003ccode\u003elunchOrdersForTheWriters\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCheck the value for \u003ccode\u003elunchOrdersForTheWriters[\"liz\"]\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCheck whether any \u003ccode\u003ewriters\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003e element responds \u003ccode\u003etruthy\u003c/code\u003e to \u003ccode\u003esawOrder(\"Mac N Cheese\")\u003c/code\u003e?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDebugging the order delivery process like this is \"tracing the program.\"\u003c/p\u003e  \u003ch2\u003eIdentify The Built-in \u003ccode\u003econsole\u003c/code\u003e Object For Debugging\u003c/h2\u003e  \u003cp\u003eThe \u003cstrong\u003ebrowser\u003c/strong\u003e, not \u003cstrong\u003ethe JavaScript language\u003c/strong\u003e provides an object called \u003ccode\u003econsole\u003c/code\u003e. When the first Developer tools were released, only Firefox had them. Firefox chose to call the console \u003ccode\u003econsole\u003c/code\u003e, but other browsers didn't have tooling at all! Over time browsers followed Firefox and rolled in tooling and \u003cem\u003ehave chosen\u003c/em\u003e to call the console \u003ccode\u003econsole\u003c/code\u003e, but they didn't have to.\u003c/p\u003e  \u003cp\u003eThis \u003ccode\u003econsole\u003c/code\u003e object has specific methods that send text to the DevTools logging area, which pretty much everyone calls \"the console.\"\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003econsole.log()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003econsole\u003c/code\u003e object's \u003ccode\u003elog()\u003c/code\u003e method logs general information to the console. It can take any number of arguments. If more than one argument is provided, the arguments will be printed out on the same line with a space in between:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('Hello,', 'world!');\u003cbr\u003e// LOG: Hello, world! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eImportantly, you can log not only simple things like \u003ccode\u003eString\u003c/code\u003es or \u003ccode\u003eNumber\u003c/code\u003es but also objects, and use disclosure triangles to \"expand out\" the contained values.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTypographical Note\u003c/strong\u003e: When we use \u003ccode\u003econsole.log()\u003c/code\u003e in code snippets, we'll preface the output statements with \u003ccode\u003eLOG:\u003c/code\u003e, such as in the above example. This is to differentiate messages logged out to the console from values \u003ccode\u003ereturn\u003c/code\u003eed by an expression, which are represented with \u003ccode\u003e=\u0026gt;\u003c/code\u003e, e.g.:\u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003efunction logReturner() {\u003cbr\u003e    console.log(false);\u003cbr\u003e\u003cbr\u003e    return true;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogReturner();\u003cbr\u003e// LOG: false\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs an example, here's some code. Where might we want to log information to debug this simple app?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst number = 10;\u003cbr\u003e\u003cbr\u003efunction addTwoNumbers(a, b) {\u003cbr\u003e    a + b;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction multiplyByTwo(n) {\u003cbr\u003e    number * 2;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCopy the code above into your console then run the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(multiplyByTwo(addTwoNumbers(1, 3))); //=\u0026gt; undefined(?!) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSome questions to consider in debugging the code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eIs what we passed in what the function got?\u003c/li\u003e \u003cli\u003eIs the thing the function did what we expected it to do?\u003c/li\u003e \u003cli\u003eDoes the operator work like we thought it did?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eTry adding some \u003ccode\u003econsole.log()\u003c/code\u003es to the code to answer these questions and figure out what the issue is.\u003c/p\u003e  \u003cp\u003eTo start, \u003ccode\u003econsole.log()\u003c/code\u003e will be our main \u003ccode\u003econsole\u003c/code\u003e debugging method. However, you'll also probably encounter the following two \u003ccode\u003econsole\u003c/code\u003e methods, \u003ccode\u003eerror()\u003c/code\u003e and \u003ccode\u003ewarn()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003econsole.error()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003econsole\u003c/code\u003e object's \u003ccode\u003eerror()\u003c/code\u003e method is for printing out an error to the console, and it can also take multiple arguments. Most browsers will style the error message differently from a regular message output with \u003ccode\u003elog()\u003c/code\u003e:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/console_error_log.png\" alt=\"`console.error()`\"\u003e\u003c/p\u003e  \u003cp\u003eYou might ask why we'd ever need to use this — isn't the goal of writing good code to \u003cstrong\u003eavoid\u003c/strong\u003e errors? Well, sure, but sometimes errors are out of our control: the network could go down, data could change, or a user could enter something invalid. In these cases, it's helpful to use the specialized \u003ccode\u003econsole.error()\u003c/code\u003e method. That way, you're letting future engineers (including yourself) know that this message is more important than the average logged message.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTYPOGRAPHICAL NOTE\u003c/strong\u003e: When we use \u003ccode\u003econsole.error()\u003c/code\u003e in code snippets, we'll preface the output statements with \u003ccode\u003eERROR:\u003c/code\u003e to differentiate them from other logged messages:\u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003econsole.error('Uh oh, you done goofed.');\u003cbr\u003e// ERROR: Uh oh, you done goofed. \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDemonstrate \u003ccode\u003econsole.warn()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eA step down in severity from \u003ccode\u003econsole.error()\u003c/code\u003e is \u003ccode\u003econsole.warn()\u003c/code\u003e. It provides a step between a regular \u003ccode\u003elog()\u003c/code\u003e message and a more dire \u003ccode\u003eerror()\u003c/code\u003e message.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/console_error_log_warn.png\" alt=\"`console.warn()`\"\u003e\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003econsole.table()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eA very handy method to help work with \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es is \u003ccode\u003econsole.table()\u003c/code\u003e. Given the following object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst family = {\u003cbr\u003e    mother: {\u003cbr\u003e        firstName: \"Susan\",\u003cbr\u003e        lastName: \"Doyle\",\u003cbr\u003e        age: 32\u003cbr\u003e    },\u003cbr\u003e    father: {\u003cbr\u003e        firstName: \"John\",\u003cbr\u003e        lastName: \"Doyle\",\u003cbr\u003e        age: 33\u003cbr\u003e    },\u003cbr\u003e    daughter: {\u003cbr\u003e        firstName: \"Lily\",\u003cbr\u003e        lastName: \"Doyle\",\u003cbr\u003e        age: 5\u003cbr\u003e    },\u003cbr\u003e    son: {\u003cbr\u003e        firstName: \"Mike\",\u003cbr\u003e        lastName: \"Doyle\",\u003cbr\u003e        age: 8\u003cbr\u003e    }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you call \u003ccode\u003econsole.table(family)\u003c/code\u003e, it prints a tables of entries:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://developers.google.com/web/tools/chrome-devtools/console/images/table-people-objects.png\" alt=\"Google Chrome documentation for console.table\"\u003e\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eOver the course of your programming career, you'll probably spend \u003cstrong\u003esignificantly\u003c/strong\u003e more time debugging than actually writing new code. Just as your coding skills will improve with practice, so too will your debugging skills.\u003c/p\u003e  \u003cp\u003eDebugging can sometimes make you feel sad. You'll fix one bug and ten new ones appear:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/bugs.gif\" alt=\"Bugs!\"\u003e\u003c/p\u003e  \u003cp\u003eIf it's any \u003ccode\u003econsole\u003c/code\u003e-ation, we \u003cstrong\u003eall\u003c/strong\u003e make mistakes. Treat debugging as a learning opportunity. Often, looking at your code critically and trying to figure out why something isn't working will afford you a much deeper understanding of how some feature of the language actually works.\u003c/p\u003e  \u003cp\u003eAlso, sometimes difficulty debugging might hint at a program that needs some help from a mentor, a pair, or a friend. Some of our best code edits have started by talking to a friend and saying \"This seems...really complicated and I can't debug it easily!\"\u003c/p\u003e  \u003cp\u003eWe'll continue to use the \u003ccode\u003econsole\u003c/code\u003e object and other tools throughout this course. By the end, you'll be on your way to being a debugging master!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\"\u003eMDN — Console\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Tracing_(software)\"\u003eWikipedia —\u0026nbsp;Tracing (software)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/nick_parlante_debugging_zen_1996.pdf\"\u003eNick Parlante (Stanford CS) —\u0026nbsp;Debugging Zen\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/console/\"\u003eGoogle Chrome — Console Overview\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"review-debugging"},{"id":173458,"title":"Review: Iterating Through Arrays","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-looping-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eBuild a \u003ccode\u003efor\u003c/code\u003e loop.\u003c/li\u003e \u003cli\u003eBuild a \u003ccode\u003ewhile\u003c/code\u003e loop.\u003c/li\u003e \u003cli\u003eExplain the purpose of a loop.\u003c/li\u003e \u003cli\u003eUnderstand when to use each type of loop.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn an earlier lesson, we learned about \u003cem\u003erepetition statements\u003c/em\u003e — statements that allow us to break out of the default sequence and repeat a section of code multiple times. We also learned about two of JavaScript's repetition constructs: the \u003cem\u003ewhile\u003c/em\u003e loop and the \u003cem\u003edo...while\u003c/em\u003e loop. In this lesson we will learn about a third: the \u003cem\u003efor\u003c/em\u003e loop.\u003c/p\u003e  \u003cp\u003eLet's say we have a bunch of gifts to wrap. They all happen to be the same size and shape, so for every gift, we need to cut a similarly sized piece of wrapping paper, fold it up over the edges of the gift, tape it together, and add a nice little card. Then we set the wrapped gift aside and move on to the next gift.\u003c/p\u003e  \u003cp\u003eIn programming terms, we can think of our \u003cstrong\u003ecollection\u003c/strong\u003e of gifts as an \u003cstrong\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e and the act of wrapping them as a function. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGift(gift) {\u003cbr\u003e  console.log(`Wrapped ${gift} and added a bow!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe could then call \u003ccode\u003ewrapGift()\u003c/code\u003e on each gift individually:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewrapGift(gifts[0]);\u003cbr\u003ewrapGift(gifts[1]);\u003cbr\u003ewrapGift(gifts[2]); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, this isn't very efficient or extensible. It's a lot of repetitive code to write out, and if we had more gifts we'd have to write a whole new line for each.\u003c/p\u003e  \u003cp\u003eThis is where loops come in handy! With a loop, we can just write the repeated action \u003cstrong\u003eonce\u003c/strong\u003e and perform the action on \u003cstrong\u003eevery item in the collection\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eThis is a code-along, so follow along with the instructions in each section. There are tests to make sure you're coding your solutions correctly. If you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eThe \u003ccode\u003efor\u003c/code\u003e loop\u003c/h2\u003e  \u003cp\u003eOf the loops in JavaScript, the \u003ccode\u003efor\u003c/code\u003e loop is the most common. The \u003ccode\u003efor\u003c/code\u003e loop is made up of four statements in the following structure:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor ([initialization]; [condition]; [iteration]) {\u003cbr\u003e  [loop body]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cul\u003e \u003cli\u003eInitialization  \u003cul\u003e \u003cli\u003eTypically used to initialize a \u003cstrong\u003ecounter\u003c/strong\u003e variable.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eCondition  \u003cul\u003e \u003cli\u003eAn expression evaluated before each pass through the loop. If this expression evaluates to \u003ccode\u003etrue\u003c/code\u003e, the statements in the loop body are executed. If the expression evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop exits.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eIteration  \u003cul\u003e \u003cli\u003eAn expression executed at the end of each iteration. Typically, this will involve incrementing or decrementing a counter, bringing the loop ever closer to completion.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eLoop body  \u003cul\u003e \u003cli\u003eCode that runs on each pass through the loop.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eUsage\u003c/em\u003e\u003c/strong\u003e: Use a \u003ccode\u003efor\u003c/code\u003e loop when you know how many times you want the loop to run (for example, when you're looping through elements in an array).\u003c/p\u003e  \u003ch4\u003eExamples\u003c/h4\u003e  \u003cp\u003eLet's take a look at an example and get some practice using the Node debugger. Enter the code below into the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can, of course, copy/paste the code rather than typing it in yourself, but we recommend typing it in for now. The act of typing code develops muscle memory and helps your brain understand and internalize the syntax.\u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003efor (let age = 30; age \u0026lt; 40; age++) {\u003cbr\u003e  console.log(`I'm ${age} years old. Happy birthday to me!`);\u003cbr\u003e  debugger;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the above code, \u003ccode\u003elet age = 30\u003c/code\u003e is the \u003cstrong\u003einitialization\u003c/strong\u003e: we're creating a variable, \u003ccode\u003eage\u003c/code\u003e, that we'll use in the next three phases of the loop. Notice that we use \u003ccode\u003elet\u003c/code\u003e instead of \u003ccode\u003econst\u003c/code\u003e because we need to increment the value of \u003ccode\u003eage\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003econdition\u003c/strong\u003e for the above loop is \u003ccode\u003eage \u0026lt; 40\u003c/code\u003e, or, in other words, \"Run the code in the loop body until \u003ccode\u003eage\u003c/code\u003e is NOT less than \u003ccode\u003e40\u003c/code\u003e.\" As long as the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e, the code in the loop body is executed, the value of \u003ccode\u003eage\u003c/code\u003e is incremented, and the condition is reevaluated. As soon as the condition evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop ends.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003eiteration\u003c/strong\u003e is \u003ccode\u003eage++\u003c/code\u003e, which increments the value of \u003ccode\u003eage\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e after every pass through the loop. We initialized \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e30\u003c/code\u003e, and it retains that value during the first pass through the loop. At the end of the first pass, we increment \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e31\u003c/code\u003e, check whether the condition still holds \u003ccode\u003etrue\u003c/code\u003e, and, since it does, run the loop body again with \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e31\u003c/code\u003e. After that second loop, we increment \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e32\u003c/code\u003e, and so on.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003eloop body\u003c/strong\u003e is the set of statements that we want to run when the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at what's happening in our loop using debugger. Run \u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to start the debugger. You should see the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_1.png\" alt=\"Debugger Output 1\"\u003e\u003c/p\u003e  \u003cp\u003eNow run \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start executing the loop and advance to the breakpoint. It should look like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_2.png\" alt=\"Debugger Output 2\"\u003e\u003c/p\u003e  \u003cp\u003eNote, in the first line, that the message has been logged and that \u003ccode\u003eage\u003c/code\u003e is equal to 30. To verify that, enter \u003ccode\u003erepl\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to open the REPL, then enter \u003ccode\u003eage\u003c/code\u003e. You should see \u003ccode\u003e30\u003c/code\u003e output. Now type \u003ccode\u003eCtrl-C\u003c/code\u003e to exit the repl, and enter \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the next iteration of the loop. You should see the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_3.png\" alt=\"Debugger Output 3\"\u003e\u003c/p\u003e  \u003cp\u003eNote that the logged output now shows that age is 31. You can continue to step through the iterations by running \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt. At any point you can verify the value of \u003ccode\u003eage\u003c/code\u003e by entering the REPL and typing \u003ccode\u003eage\u003c/code\u003e at the prompt, then exit the REPL to continue stepping through. When you're done, enter \u003ccode\u003e.exit\u003c/code\u003e or \u003ccode\u003eCtrl-C\u003c/code\u003e twice to exit the debugger.\u003c/p\u003e  \u003cp\u003eNow let's remove \u003ccode\u003edebugger;\u003c/code\u003e from our code and execute it by running \u003ccode\u003enode index.js\u003c/code\u003e. You should see the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/happy-birthday-to-me.png\" alt=\"Happy Birthday logged\"\u003e\u003c/p\u003e  \u003ch3\u003eUsing \u003ccode\u003efor\u003c/code\u003e with Arrays\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003efor\u003c/code\u003e loop is often used to iterate over every element in an array. Let's rewrite our gift-wrapping action above as a \u003ccode\u003efor\u003c/code\u003e loop. Enter the following code into \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGifts(gifts) {\u003cbr\u003e  for (let i = 0; i \u0026lt; gifts.length; i++) {\u003cbr\u003e    console.log(`Wrapped ${gifts[i]} and added a bow!`);\u003cbr\u003e    debugger;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return gifts;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ewrapGifts(gifts); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe started our counter, \u003ccode\u003ei\u003c/code\u003e, at \u003ccode\u003e0\u003c/code\u003e because arrays have zero-based indexes. Our condition states that we should run the code in the loop body while \u003ccode\u003ei\u003c/code\u003e is less than \u003ccode\u003egifts.length\u003c/code\u003e (\u003ccode\u003e3\u003c/code\u003e in the above example). Our iteration, \u003ccode\u003ei++\u003c/code\u003e, increments our counter by \u003ccode\u003e1\u003c/code\u003e at the end of each pass through the loop.\u003c/p\u003e  \u003cp\u003eRun \u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to enter the debugger, and \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the breakpoint. You should see \u003ccode\u003eWrapped teddy bear and added a bow!\u003c/code\u003e logged. In our loop body, we reference \u003ccode\u003egifts[i]\u003c/code\u003e. Since \u003ccode\u003ei\u003c/code\u003e starts out as \u003ccode\u003e0\u003c/code\u003e, during the first pass through the loop \u003ccode\u003egifts[i]\u003c/code\u003e is \u003ccode\u003egifts[0]\u003c/code\u003e, which is \u003ccode\u003e'teddy bear'\u003c/code\u003e. Continue stepping through the loop by entering \u003ccode\u003econt\u003c/code\u003e at the\u003ccode\u003edebug\u003c/code\u003e prompt and remember you can enter the REPL at any point to check the values of our variables, \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003egifts[i]\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhen you're done, remove the \u003ccode\u003edebugger\u003c/code\u003e and execute the code by running \u003ccode\u003enode index.js\u003c/code\u003e. You should see the following logged to the terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eWrapped teddy bear and added a bow!\u003cbr\u003eWrapped drone and added a bow!\u003cbr\u003eWrapped doll and added a bow! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eAssignment\u003c/h3\u003e  \u003cp\u003eIn the previous section, the \u003ccode\u003ewrapGift()\u003c/code\u003e function allowed us to take any array of gifts and loop over them, logging our own message. Let's practice that with a slightly different idea. To complement our gift wrapping function, your task is to create a thank you card creator.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003eindex.js\u003c/code\u003e, build a function named \u003ccode\u003ewriteCards()\u003c/code\u003e that accepts two arguments: an array of string names, and an event name. Create a \u003ccode\u003efor\u003c/code\u003e loop with a counter that starts at \u003ccode\u003e0\u003c/code\u003e and increments at the end of each loop. The condition should halt the \u003ccode\u003efor\u003c/code\u003e loop after the last name in the array is printed out in the loop body.\u003c/p\u003e  \u003cp\u003eInside the loop, create a custom message for each name from the provided array, thanking that person for their gift. Collect the messages in an array and return this array. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewriteCards([\"Ada\", \"Brendan\", \"Ali\"], \"birthday\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWould produce the following array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  \"Thank you, Ada, for the wonderful birthday gift!\",\u003cbr\u003e  \"Thank you, Brendan, for the wonderful birthday gift!\",\u003cbr\u003e  \"Thank you, Ali, for the wonderful birthday gift!\"\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: The debugger isn't just for debugging code — you can also use it to help you write your function! Try building the structure of the loop, putting the \u003ccode\u003edebugger\u003c/code\u003e inside the loop body. Even before you start writing the code, you can enter the debugger's REPL and try out code until you figure out how to create the message and add it to an array. Once it's working in the REPL, transfer the code to \u003ccode\u003eindex.js\u003c/code\u003e, exit the debugger, and run the tests.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eThe \u003ccode\u003ewhile\u003c/code\u003e loop\u003c/h2\u003e  \u003cp\u003eRecall from the earlier lesson that the \u003ccode\u003ewhile\u003c/code\u003e loop is similar to a \u003ccode\u003efor\u003c/code\u003e loop, repeating an action in a loop based on a condition. Both will continue to loop until that condition evaluates to \u003ccode\u003efalse\u003c/code\u003e. Unlike \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e only requires condition and loop statements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile ([condition]) {\u003cbr\u003e  [loop body]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe initialization and iteration statements of the \u003ccode\u003efor\u003c/code\u003e loop have not disappeared, though. In fact, we could rewrite our original \u003ccode\u003efor\u003c/code\u003e loop gift wrapping example using a \u003ccode\u003ewhile\u003c/code\u003e loop and achieve the exact same result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGifts(gifts) {\u003cbr\u003e  let i = 0; // the initialization moves OUTSIDE the body of the loop!\u003cbr\u003e  while (i \u0026lt; gifts.length) {\u003cbr\u003e    console.log(`Wrapped ${gifts[i]} and added a bow!`);\u003cbr\u003e    i++; // the iteration moves INSIDE the body of the loop!\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return gifts;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ewrapGifts(gifts);\u003cbr\u003e// LOG: Wrapped teddy bear and added a bow!\u003cbr\u003e// LOG: Wrapped drone and added a bow!\u003cbr\u003e// LOG: Wrapped doll and added a bow!\u003cbr\u003e// =\u0026gt; [\"teddy bear\", \"drone\", \"doll\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we've just moved the initialization and iteration statements — declaring the \u003ccode\u003ei\u003c/code\u003e variable \u003cem\u003eoutside\u003c/em\u003e the loop, and incrementing it \u003cem\u003einside\u003c/em\u003e the loop.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eCAUTION\u003c/strong\u003e: When using \u003ccode\u003ewhile\u003c/code\u003e loops, it is easy to forget to involve iteration. Leaving iteration out can result in a condition that \u003cem\u003ealways\u003c/em\u003e evaluates to \u003ccode\u003etrue\u003c/code\u003e, causing an infinite loop!\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eUsing a \u003ccode\u003ewhile\u003c/code\u003e loop enables us to check conditions that aren't based on a counter. Take a look at the following \u003cem\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Pseudocode\"\u003epseudocode\u003c/a\u003e\u003c/em\u003e for an example of how we could use \u003ccode\u003ewhile\u003c/code\u003e in a program for planting a garden:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction plantGarden() {\u003cbr\u003e  let keepWorking = true;\u003cbr\u003e  while (keepWorking) {\u003cbr\u003e    chooseSeedLocation();\u003cbr\u003e    plantSeed();\u003cbr\u003e    waterSeed();\u003cbr\u003e    keepWorking = checkForMoreSeeds();\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can imagine that \u003cem\u003ewhile\u003c/em\u003e we have seeds, we take the same steps over and over: choose a location for a seed; plant it; water it. Then, check if there are more seeds. If \u003cem\u003enot\u003c/em\u003e, do not keep working.\u003c/p\u003e  \u003ch2\u003eWhen to Use \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eJavaScript, like many programming languages, provides a variety of looping options. Loops like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e are actually just slight variations of the same process. By providing a variety, we as programmers have a larger vocabulary to work with.\u003c/p\u003e  \u003cp\u003eOften, you will see \u003ccode\u003ewhile\u003c/code\u003e loops simply being used as an alternative to \u003ccode\u003efor\u003c/code\u003e loops:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet countup = 0;\u003cbr\u003ewhile (countup \u0026lt; 10) {\u003cbr\u003e  console.log(countup++);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is perfectly fine as an alternative way to describe:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (let countup = 0; countup \u0026lt; 10; countup++) {\u003cbr\u003e  console.log(countup);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you're feeling a bit lost about when to use a \u003ccode\u003efor\u003c/code\u003e vs. a \u003ccode\u003ewhile\u003c/code\u003e loop, take a deep breath. Most of the time, a regular \u003ccode\u003efor\u003c/code\u003e loop will suffice. It's by far the most common looping construct in JavaScript. A general heuristic for choosing which loop to use is to first try a \u003ccode\u003efor\u003c/code\u003e loop. If that doesn't serve your purposes, then go ahead and try a \u003ccode\u003ewhile\u003c/code\u003e loop. Also, remember that you can always refer to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003edocumentation on these loops\u003c/a\u003e at any time.\u003c/p\u003e  \u003cp\u003eJust don't forget: with \u003ccode\u003ewhile\u003c/code\u003e, make sure you are updating the condition on each loop so that the loop eventually terminates!\u003c/p\u003e  \u003ch2\u003eAssignment\u003c/h2\u003e  \u003cp\u003eTo get more acquainted with \u003ccode\u003ewhile\u003c/code\u003e, your task is to write a function, \u003ccode\u003ecountDown\u003c/code\u003e, that takes in any positive integer and, starting from that number, counts down to zero using \u003ccode\u003econsole.log()\u003c/code\u003e. Note that this means that running \u003ccode\u003ecountdown(10);\u003c/code\u003e would actually log \u003cem\u003e11\u003c/em\u003e times:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e10\u003cbr\u003e9\u003cbr\u003e8\u003cbr\u003e7\u003cbr\u003e6\u003cbr\u003e5\u003cbr\u003e4\u003cbr\u003e3\u003cbr\u003e2\u003cbr\u003e1\u003cbr\u003e0 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAfter some time programming in JavaScript, writing a \u003ccode\u003efor\u003c/code\u003e loop will come as naturally to you as wrapping one gift after another. Just as you slowly become comfortable using different words and vocabulary to better express yourself, you will become more acquainted with concepts like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e until you are able to discern the nuanced differences in usage between them.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCodecademy  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#for-loops\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#while-loops\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003eLoops and iteration\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"g5fe8115f59287fd59b263fe685685a06"},{"id":173459,"title":"Review: Iterating Through Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-object-iteration\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain the difference between looping and iteration.\u003c/li\u003e \u003cli\u003eIterate over arrays with the \u003ccode\u003efor...of\u003c/code\u003e statement.\u003c/li\u003e \u003cli\u003eEnumerate an object's properties with the \u003ccode\u003efor...in\u003c/code\u003e statement.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhen we create a \u003ccode\u003efor\u003c/code\u003e loop to loop over an array, we base the loop's condition off of the \u003ccode\u003e.length\u003c/code\u003e of the array. This works, but it's a lot of syntactic cruft to remember:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (let i = 0; i \u0026lt; array.length; i++) {\u003cbr\u003e  // Loop body\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe problem is that we're using a \u003cem\u003elooping\u003c/em\u003e construct to perform \u003cem\u003eiteration\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eLooping vs. Iteration\u003c/h2\u003e  \u003cp\u003eThere's a pretty fine line separating the concepts of \u003cem\u003elooping\u003c/em\u003e and \u003cem\u003eiteration\u003c/em\u003e, and only the truly pedantic will call you out if you use one in place of the other.\u003c/p\u003e  \u003cp\u003eLooping is the process of executing a set of statements \u003cstrong\u003erepeatedly until a condition is met\u003c/strong\u003e. It's great for when we want to do something a specific number of times (\u003ccode\u003efor\u003c/code\u003e loop) or unlimited times until the condition is met (\u003ccode\u003ewhile\u003c/code\u003e or \u003ccode\u003edo while\u003c/code\u003e loop).\u003c/p\u003e  \u003cp\u003eIteration is the process of executing a set of statements \u003cstrong\u003eonce for each element in a collection\u003c/strong\u003e. We can accomplish this with a \u003ccode\u003efor\u003c/code\u003e loop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003efor (let i = 0; i \u0026lt; myArray.length; i++) {\u003cbr\u003e  console.log(myArray[i]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor with a \u003ccode\u003ewhile\u003c/code\u003e loop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003elet j = 0;\u003cbr\u003e\u003cbr\u003ewhile (j \u0026lt; myArray.length) {\u003cbr\u003e  console.log(myArray[j++]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ebut neither is very pretty. The \u003ccode\u003efor...of\u003c/code\u003e statement gives us a better to way.\u003c/p\u003e  \u003ch2\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eUsing \u003ccode\u003efor...of\u003c/code\u003e, the code above becomes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003efor (const element of myArray) {\u003cbr\u003e  console.log(element);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUsing a construct that is specifically meant for iteration results in much cleaner code: there's\u0026nbsp;no initialization of a counter, no condition, no incrementing the counter, and no bracket notation to access elements in the array (\u003ccode\u003emyArray[i]\u003c/code\u003e).\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003econst\u003c/code\u003e vs. \u003ccode\u003elet\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eAs you might've noticed, \u003ccode\u003efor...of\u003c/code\u003e allows us to use \u003ccode\u003econst\u003c/code\u003e instead of \u003ccode\u003elet\u003c/code\u003e. In \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e statements, \u003ccode\u003elet\u003c/code\u003e is required because we are incrementing a counter variable. The incrementing process involves taking the counter's current value, adding \u003ccode\u003e1\u003c/code\u003e to it, and then assigning that new value to the variable. That reassignment precludes us from using our beloved \u003ccode\u003econst\u003c/code\u003e, which cannot be reassigned.\u003c/p\u003e  \u003cp\u003eDelightfully, the \u003ccode\u003efor...of\u003c/code\u003e statement involves no such reassignment. On each trip into the loop body (which is a \u003cem\u003eblock\u003c/em\u003e — note the curly braces), we assign the next element in the collection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable. Upon reaching the end of the block, the block-scoped variable vanishes, and we return to the top. Then we repeat the process, assigning the next element in the collection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable.\u003c/p\u003e  \u003ch3\u003eIterating over... strings?\u003c/h3\u003e  \u003cp\u003eA string is effectively an ordered collection (like an array) of characters, which \u003ccode\u003efor...of\u003c/code\u003e is more than happy to iterate over:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (const char of 'Hello, world!') {\u003cbr\u003e  console.log(char);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: H\u003cbr\u003e// LOG: e\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: o\u003cbr\u003e// LOG: ,\u003cbr\u003e// LOG:\u003cbr\u003e// LOG: w\u003cbr\u003e// LOG: o\u003cbr\u003e// LOG: r\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: d\u003cbr\u003e// LOG: ! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsage\u003c/h3\u003e  \u003cp\u003eUse a \u003ccode\u003efor...of\u003c/code\u003e statement anytime you want to iterate over an array.\u003c/p\u003e  \u003ch2\u003eIterating over objects\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement is similar to \u003ccode\u003efor...of\u003c/code\u003e; it's generally used for iterating over the properties in an object. The statement follows this syntax:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (const [KEY] in [OBJECT]) {\u003cbr\u003e  // Code in the statement body\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the properties in an object, but it doesn't pass the entire property into the block. Instead, it only passes in the \u003cem\u003ekeys\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\";\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: street1\u003cbr\u003e// LOG: street2\u003cbr\u003e// LOG: city\u003cbr\u003e// LOG: state\u003cbr\u003e// LOG: zipCode \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAccessing the object's values is as simple as combining the passed-in key with the \u003cem\u003ebracket operator\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address[key]);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: 11 Broadway\u003cbr\u003e// LOG: 2nd Floor\u003cbr\u003e// LOG: New York\u003cbr\u003e// LOG: NY\u003cbr\u003e// LOG: 10004 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eBut... but I want to use the dot operator!\u003c/h3\u003e  \u003cp\u003eCan you think of why the bracket operator is required? Let's see what happens when we use the \u003cem\u003edot operator\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address.key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the five properties in \u003ccode\u003eaddress\u003c/code\u003e, successively passing in the object's keys. However, inside the statement body we're trying to access \u003ccode\u003eaddress.key\u003c/code\u003e. If you recall from the lesson on objects, variables don't work with the dot operator because it treats the variable name as a literal key —\u0026nbsp;that is, \u003ccode\u003eaddress.key\u003c/code\u003e is trying to access the property on \u003ccode\u003eaddress\u003c/code\u003e with a key of \u003ccode\u003ekey\u003c/code\u003e. Since there is no \u003ccode\u003ekey\u003c/code\u003e property in \u003ccode\u003eaddress\u003c/code\u003e, it returns \u003ccode\u003eundefined\u003c/code\u003e. To prove this, let's add a \u003ccode\u003ekey\u003c/code\u003e property to \u003ccode\u003eaddress\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.key = \"Let's have a 'key' key!\";\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address.key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsage\u003c/h3\u003e  \u003cp\u003eUse a \u003ccode\u003efor...in\u003c/code\u003e statement whenever you want to enumerate the properties of an object.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003efor...in\u003c/code\u003e and order\u003c/h3\u003e  \u003cp\u003eBecause \u003cstrong\u003earrays are objects\u003c/strong\u003e, \u003ccode\u003efor...in\u003c/code\u003e \u003cem\u003ewill work\u003c/em\u003e with arrays. In fact, because \u003ccode\u003efor...of\u003c/code\u003e was added to JavaScript later than \u003ccode\u003efor...in\u003c/code\u003e, you might see older code that uses \u003ccode\u003efor...in\u003c/code\u003e to iterate over arrays. However, as a general rule, \u003cstrong\u003edon't use \u003ccode\u003efor...in\u003c/code\u003e with arrays\u003c/strong\u003e. When iterating over an array, an \u003cstrong\u003eordered\u003c/strong\u003e collection, we would expect the elements in the array to be dealt with \u003cstrong\u003ein order\u003c/strong\u003e. However, because of how \u003ccode\u003efor...in\u003c/code\u003e works under the hood, there's no guarantee of order. From the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN documentation\u003c/a\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eA \u003ccode\u003efor...in\u003c/code\u003e loop iterates over the properties of an object in an \u003cstrong\u003earbitrary order\u003c/strong\u003e ... one cannot depend on the seeming orderliness of iteration, at least in a cross-browser setting).\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eWhat this means is that, with \u003ccode\u003efor....in\u003c/code\u003e, different browsers might iterate over the same object's properties in different orders. That's not cool! Cross-browser consistency is very important. A lot of progress has been made towards standardizing the behavior of \u003ccode\u003efor...in\u003c/code\u003e across all major browsers, but there's still no reason to use \u003ccode\u003efor...in\u003c/code\u003e with arrays when we have the wonderfully consistent \u003ccode\u003efor...of\u003c/code\u003e tailor-made for the job.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...in\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"review-iterating-through-objects"},{"id":173460,"title":"Review: Traversing Nested Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-traversing-nested-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRevisit why nested objects are useful\u003c/li\u003e \u003cli\u003eReview how to access inner properties\u003c/li\u003e \u003cli\u003eUse recursion to iterate over nested objects and arrays\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eYou've just been onboarded to the dev team working on Flatbook, the world's premier Flatiron School-based social network. Here at Flatbook, we have some pretty complex data-modeling needs. For instance, think about the breadth of information we might want to display on each user's profile page:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eFirst name\u003c/li\u003e \u003cli\u003eLast name\u003c/li\u003e \u003cli\u003eEmployer  \u003cul\u003e \u003cli\u003eCompany name\u003c/li\u003e \u003cli\u003eJob title\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eFriends  \u003cul\u003e \u003cli\u003eFirst name\u003c/li\u003e \u003cli\u003eLast name\u003c/li\u003e \u003cli\u003eEmployer\u003c/li\u003e \u003cli\u003eCompany name\u003c/li\u003e \u003cli\u003eJob title\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eProjects  \u003cul\u003e \u003cli\u003eTitle\u003c/li\u003e \u003cli\u003eDescription\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWe can already start to see some problems with trying to fit all of this into a \u003cem\u003eshallow\u003c/em\u003e (non-nested) JavaScript object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  companyName: 'Flatbook Labs',\u003cbr\u003e  jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend1firstName: 'Nancy',\u003cbr\u003e  friend1lastName: 'Burgess',\u003cbr\u003e  friend1companyName: 'Flatbook Labs',\u003cbr\u003e  friend1jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend2firstName: 'Corinna',\u003cbr\u003e  friend2lastName: 'Jackson',\u003cbr\u003e  friend2companyName: 'Flatbook Labs',\u003cbr\u003e  friend2jobTitle: 'Senior Developer',\u003cbr\u003e  project1title: 'Flatbook',\u003cbr\u003e  project1description: 'The premier Flatiron School-based social network in the world.',\u003cbr\u003e  project2title: 'Scuber',\u003cbr\u003e  project2description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGoodness, that's messy. It would be a nightmare to keep the object updated. If Avi un-friends Nancy, do we shift Corinna's info into the \u003ccode\u003efriend1...\u003c/code\u003e slots and delete the \u003ccode\u003efriend2...\u003c/code\u003e properties, or do we leave Corinna as \u003ccode\u003efriend2...\u003c/code\u003e and delete the \u003ccode\u003efriend1...\u003c/code\u003e properties? There are no good answers. Except...\u003c/p\u003e  \u003ch2\u003eObjects in Objects\u003c/h2\u003e  \u003cp\u003eRecall from the lesson on objects that the values in an object can be \u003cem\u003eanything\u003c/em\u003e, including another object. If we reorganize the above object a bit, it becomes significantly easier to read and update:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  company: {\u003cbr\u003e    name: 'Flatbook Labs',\u003cbr\u003e    jobTitle: 'Developer Apprentice'\u003cbr\u003e  },\u003cbr\u003e  friends: [{\u003cbr\u003e    firstName: 'Nancy',\u003cbr\u003e    lastName: 'Burgess',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Developer Apprentice'\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Corinna',\u003cbr\u003e    lastName: 'Jackson',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Lead Developer'\u003cbr\u003e    }\u003cbr\u003e  }],\u003cbr\u003e  projects: [{\u003cbr\u003e    title: 'Flatbook',\u003cbr\u003e    description: 'The premier Flatiron School-based social network in the world.'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    title: 'Scuber',\u003cbr\u003e    description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e  }]\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe've pared the sixteen messy properties in our first attempt down to a svelte five: \u003ccode\u003efirstName\u003c/code\u003e, \u003ccode\u003elastName\u003c/code\u003e, \u003ccode\u003ecompany\u003c/code\u003e, \u003ccode\u003efriends\u003c/code\u003e, and \u003ccode\u003eprojects\u003c/code\u003e. \u003ccode\u003ecompany\u003c/code\u003e points at another object, and both \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e point to arrays of objects. Let's practice accessing some of those beautifully nested data points. Copy \u003ccode\u003euserInfo\u003c/code\u003e into \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e and follow along.\u003c/p\u003e  \u003cp\u003eTo review, for a property at the top level of our object, we can grab a value using dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euserInfo.lastName;\u003cbr\u003e//=\u0026gt; \"Flombaum\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the property we're accessing is nested inside another object, we just append the additional key(s):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euserInfo.company.jobTitle;\u003cbr\u003e//=\u0026gt; \"Developer Apprentice\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the property is nested inside an array, we need to specify the index in the array for the object that we want. To get the first name of Avi's first friend and the title of his second project:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euserInfo.friends[0].firstName;\u003cbr\u003e//=\u0026gt; \"Nancy\"\u003cbr\u003e\u003cbr\u003euserInfo.projects[1].title;\u003cbr\u003e//=\u0026gt; \"Scuber\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's worth spending some time getting comfortable with nested data structures — you will see a lot of them as you proceed through the curriculum and in your career as a developer. Create your own in the REPL and practice accessing various pieces of data.\u003c/p\u003e  \u003ch2\u003eArrays in arrays\u003c/h2\u003e  \u003cp\u003eWorking with nested arrays isn't all that different from nested objects. Simply replace the named properties of nested objects with indexes of nested arrays. Let's review with an example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst letters = ['a', ['b', ['c', ['d', ['e']], 'f']]]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGiven the above nested array, how would we get the letter \u003ccode\u003e'e'\u003c/code\u003e? First, we'd need the second element in \u003ccode\u003eletters\u003c/code\u003e, \u003ccode\u003eletters[1]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1];\u003cbr\u003e//=\u0026gt; [\"b\", [\"c\", [\"d\", [\"e\"]], \"f\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen we'd need the second element of that element, so \u003ccode\u003eletters[1][1]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1][1];\u003cbr\u003e//=\u0026gt; [\"c\", [\"d\", [\"e\"]], \"f\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen the second element of \u003cstrong\u003ethat\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1][1][1];\u003cbr\u003e//=\u0026gt; [\"d\", [\"e\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd the second element of \u003cstrong\u003e\u003cem\u003ethat\u003c/em\u003e\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1][1]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1][1][1][1];\u003cbr\u003e//=\u0026gt; [\"e\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFinally, we want the first element in that final nested array, \u003ccode\u003eletters[1][1][1][1][0]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1][1][1][1][0];\u003cbr\u003e//=\u0026gt; \"e\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhew! That's a lot to keep track of. Just remember that each lookup (each set of square brackets) \"drills down\" into each successive nested array.\u003c/p\u003e  \u003ch2\u003eIterating over nested objects and arrays\u003c/h2\u003e  \u003cp\u003eOur initial shallow object had a lot of drawbacks, but one advantage of it is that it was very easy to iterate over all of the information:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  companyName: 'Flatbook Labs',\u003cbr\u003e  jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend1firstName: 'Nancy',\u003cbr\u003e  friend1lastName: 'Burgess',\u003cbr\u003e  friend1companyName: 'Flatbook Labs',\u003cbr\u003e  friend1jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend2firstName: 'Corinna',\u003cbr\u003e  friend2lastName: 'Jackson',\u003cbr\u003e  friend2companyName: 'Flatbook Labs',\u003cbr\u003e  friend2jobTitle: 'Senior Developer',\u003cbr\u003e  project1title: 'Flatbook',\u003cbr\u003e  project1description: 'The premier Flatiron School-based social network in the world.',\u003cbr\u003e  project2title: 'Scuber',\u003cbr\u003e  project2description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction shallowIterator(target) {\u003cbr\u003e  for (const key in target) {\u003cbr\u003e    console.log(target[key]);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eshallowIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Senior Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also use it with arrays:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7, 11];\u003cbr\u003e\u003cbr\u003eshallowIterator(primes);\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: 3\u003cbr\u003e// LOG: 5\u003cbr\u003e// LOG: 7\u003cbr\u003e// LOG: 11 \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: our \u003ccode\u003eshallowIterator()\u003c/code\u003e function uses \u003ccode\u003efor...in\u003c/code\u003e to iterate through the object that's passed to it. We learned in the previous lesson that \u003ccode\u003efor...in\u003c/code\u003e is not the best iterator to use with arrays. Because we're not currently working in the browser (and therefore cross-browser consistency isn't an issue), we can safely ignore that problem for the moment. Since this example is fairly complicated, we'll work through the process using \u003ccode\u003efor...in\u003c/code\u003e first then, once we've got that working, build a modification that will handle arrays appropriately.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eUnfortunately, as you may be able to guess from its name, our \u003ccode\u003eshallowIterator()\u003c/code\u003e function can't handle nested collections:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst numbers = [1, [2, [4, [5, [6]], 3]]];\u003cbr\u003e\u003cbr\u003eshallowIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: [2, [4, [5, [6]], 3]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's trained to iterate over the passed-in array's elements or object's properties, but our function has no concept of \u003cem\u003edepth\u003c/em\u003e. When it tries to iterate over the above nested \u003ccode\u003enumbers\u003c/code\u003e array, it sees only two elements at the top level of the array: the number \u003ccode\u003e1\u003c/code\u003e and \u003cstrong\u003eanother\u003c/strong\u003e array, \u003ccode\u003e[2, [4, [5, [6]], 3]]\u003c/code\u003e. It \u003ccode\u003econsole.log()\u003c/code\u003es out both of those elements and calls it a day, never realizing that we also want it to print out the elements inside the nested array.\u003c/p\u003e  \u003cp\u003eIt behaves similarly with objects. If we passed the nested version of \u003ccode\u003euserInfo\u003c/code\u003e to it, the values at the top level of the object (\"Avi\" and \"Flombaum\") would be logged correctly, but for the \u003ccode\u003ecompany\u003c/code\u003e key, the object it points to would be logged, and, for \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e, arrays of objects would be logged. Try it out for yourself in the REPL.\u003c/p\u003e  \u003cp\u003eLet's modify our function so that if it encounters a nested object or array, it will additionally print out all of the data contained therein. We can do this using an \u003ccode\u003eif\u003c/code\u003e condition and the \u003ccode\u003etypeof\u003c/code\u003e operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction shallowIterator(target) {\u003cbr\u003e  for (const key in target) {\u003cbr\u003e    if (typeof target[key] === 'object') {\u003cbr\u003e      for (const nestedKey in target[key]) {\u003cbr\u003e        console.log(target[key][nestedKey]);\u003cbr\u003e      }\u003cbr\u003e    } else {\u003cbr\u003e      console.log(target[key]);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eshallowIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: [4, [5, [6]], 3] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we've gone two levels deep, which gets us a bit closer to our goal. However, there are two pretty clear drawbacks to this strategy:\u003c/p\u003e  \u003col\u003e \u003cli\u003eWe'll have to add a new \u003ccode\u003efor...in\u003c/code\u003e statement for every level of nesting, quickly ballooning our function out to an unmanageable size.\u003c/li\u003e \u003cli\u003eSince we need to add a separate \u003ccode\u003efor...in\u003c/code\u003e statement for each additional level, we'll have to know exactly what the target structure looks like ahead of time and update our function accordingly. That's a lot of repetitive, error-prone work, and it results in a function that can only be used for data with that particular structure.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/traversing-nested-objects-readme/no_there_has_to_be_another_way.gif\" alt=\"No! There has to be another way.\"\u003e\u003c/p\u003e  \u003ch3\u003eRecursion\u003c/h3\u003e  \u003cp\u003eLucky for us, there \u003cstrong\u003eis\u003c/strong\u003e another way: recursion. It's one of the more powerful concepts in programming, but it's also pretty hard to grasp at first. \u003cstrong\u003eDon't sweat it if it doesn't click immediately\u003c/strong\u003e. We'll introduce the concept here but come back to it periodically throughout the rest of the JavaScript material. Essentially, \u003cstrong\u003ea recursive function is a function that calls itself\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at a better way to write our \u003ccode\u003eshallowIterator()\u003c/code\u003e to take advantage of recursion:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we invoke \u003ccode\u003edeepIterator()\u003c/code\u003e with an argument, the function first checks if the argument is an object (recall that the \u003ccode\u003etypeof\u003c/code\u003e operator returns \u003ccode\u003e\"object\"\u003c/code\u003e for arrays as well). If the argument \u003cstrong\u003eisn't\u003c/strong\u003e an object, \u003ccode\u003edeepIterator()\u003c/code\u003e simply \u003ccode\u003econsole.log()\u003c/code\u003es out the argument and exits. However, if the argument \u003cstrong\u003eis\u003c/strong\u003e an object, we iterate over the properties (or elements) in the object, passing each to \u003ccode\u003edeepIterator()\u003c/code\u003e and \u003cstrong\u003ere-invoking the function\u003c/strong\u003e. That's recursion!\u003c/p\u003e  \u003cp\u003eLet's see it in action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst numbers = [1, [2, [4, [5, [6]], 3]]];\u003cbr\u003e\u003cbr\u003edeepIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: 4\u003cbr\u003e// LOG: 5\u003cbr\u003e// LOG: 6\u003cbr\u003e// LOG: 3 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo help us see what's going on here let's use a REPL. Notice that, in the version of the function in the REPL, we've added a \u003ccode\u003econsole.log()\u003c/code\u003e at the top of the function that will log whatever argument was passed to our function. We've also added a label to the second \u003ccode\u003econsole.log()\u003c/code\u003e so you can see the values that are getting logged from the \u003ccode\u003eelse\u003c/code\u003e statement. If you press the \"Run\" button, you will see an \"Argument\" logged for each time the function is called. You will also see a \"Logged value\" for each time the code in the \u003ccode\u003eelse\u003c/code\u003e executes. Referring to the output of the \u003ccode\u003econsole.log()\u003c/code\u003es, step through the function for each element to trace what's happening.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UprightWiryCopyleft?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eOur function also works with combinations of nested objects and arrays:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  company: {\u003cbr\u003e    name: 'Flatbook Labs',\u003cbr\u003e    jobTitle: 'Developer Apprentice'\u003cbr\u003e  },\u003cbr\u003e  friends: [{\u003cbr\u003e    firstName: 'Nancy',\u003cbr\u003e    lastName: 'Burgess',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Developer Apprentice'\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Corinna',\u003cbr\u003e    lastName: 'Jackson',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Lead Developer'\u003cbr\u003e    }\u003cbr\u003e  }],\u003cbr\u003e  projects: [{\u003cbr\u003e    title: 'Flatbook',\u003cbr\u003e    description: 'The premier Flatiron School-based social network in the world.'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    title: 'Scuber',\u003cbr\u003e    description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e  }]\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo keep track of how many times our function is recursively invoking itself, it might be helpful to use a counter variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e\u003cbr\u003efunction deepIterator(target) {\u003cbr\u003e  counter++;\u003cbr\u003e\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003cbr\u003e\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; 26 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo we invoked \u003ccode\u003edeepIterator()\u003c/code\u003e once, and it invoked itself 25 additional times! If we look closely at our nested \u003ccode\u003euserInfo\u003c/code\u003e object, we can see that it contains two arrays, seven nested objects, and sixteen key-value pairs where the value is a string. Add those all up (2 + 7 + 16), and you get our 25 recursive invocations! (If you're following along in the REPL, you can check the value of \u003ccode\u003ecounter\u003c/code\u003e in the terminal after running the code.)\u003c/p\u003e  \u003ch2\u003eModifying our Program to Better Handle Arrays\u003c/h2\u003e  \u003cp\u003eIn our \u003ccode\u003edeepIterator()\u003c/code\u003e function, we're using an \u003ccode\u003eif\u003c/code\u003e statement to evaluate the argument that's passed in. We do one thing if \u003ccode\u003etarget\u003c/code\u003e is an object and something else if it's not. Now we want to modify our function to handle one more situation: when \u003ccode\u003etarget\u003c/code\u003e is an array. Doing this is a simple matter of adding an \u003ccode\u003eelse if\u003c/code\u003e to our \u003ccode\u003eif\u003c/code\u003e statement; its code block will execute \u003cstrong\u003eif\u003c/strong\u003e \u003ccode\u003etarget\u003c/code\u003e is an array.\u003c/p\u003e  \u003cp\u003eWe can determine whether a variable is an array using an \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#static_methods\"\u003eArray Static Method\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"\u003e\u003ccode\u003eArray.isArray()\u003c/code\u003e\u003c/a\u003e. Let's use that in our new condition. We'll also add a new \u003ccode\u003econsole.log()\u003c/code\u003e to verify that our code is correctly detecting the arrays (we've commented out the final \u003ccode\u003econsole.log()\u003c/code\u003e for now):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else if (Array.isArray(target)) {\u003cbr\u003e    console.log(\"We found an array\");\u003cbr\u003e    // iterate through the array\u003cbr\u003e  } else {\u003cbr\u003e    // console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if we run the code, we see ...nothing. For some reason, our code isn't detecting the arrays. Remember that \u003cstrong\u003earrays are objects\u003c/strong\u003e, so our \u003ccode\u003eif\u003c/code\u003e condition returns true for arrays as well as objects and the \u003ccode\u003eelse if\u003c/code\u003e never executes. We can fix this by reversing the order of our conditions. Let's also put the second \u003ccode\u003econsole.log()\u003c/code\u003e back in, and try running the code again.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (Array.isArray(target)) {\u003cbr\u003e    // iterate through the array\u003cbr\u003e    console.log(\"We found an array\");\u003cbr\u003e  } else if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: We found an array\u003cbr\u003e// LOG: We found an array \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMuch better! The logs are working for the primitive values and the non-array object, so now we just need to code the body of our new \u003ccode\u003eif\u003c/code\u003e statement, using \u003ccode\u003efor...of\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (Array.isArray(target)) {\u003cbr\u003e    for (const element of target) {\u003cbr\u003e      deepIterator(element);\u003cbr\u003e    }\u003cbr\u003e  } else if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhew!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThis is very advanced stuff, and you should absolutely not get discouraged if it doesn't click at first. Create some other nested data structures and traverse over them with \u003ccode\u003eshallowIterator()\u003c/code\u003e and \u003ccode\u003edeepIterator()\u003c/code\u003e, noting the limitations of the former. Use the debugging tools available to you to get a handle on what's happening at each step of the process.\u003c/p\u003e  \u003cp\u003eYou got this!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/scripting/javascript/advanced/recursion-javascript\"\u003eMDN: Recursion (JavaScript)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f\"\u003efreeCodeCamp: Recursion in JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://javascript.info/debugging-chrome\"\u003eJavaScript.info: Debugging in Chrome\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"review-traversing-nested-objects"},{"id":178757,"title":"Array Iterator Methods","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-iterator-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-iterator-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-iterator-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUnderstand how JavaScript's iterator methods help us\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've learned about \u003ccode\u003eArray\u003c/code\u003e methods that allow us to modify arrays by adding and removing elements (\u003ccode\u003epush()\u003c/code\u003e, \u003ccode\u003eslice()\u003c/code\u003e, etc). These methods operate on the array as a whole, but JavaScript also includes methods that assist us in iterating through an array and interacting with each individual element in some way. We will be learning about these methods in the next few lessons.\u003c/p\u003e  \u003ch2\u003eWhy Use JavaScript's Iterator Methods?\u003c/h2\u003e  \u003cp\u003eImagine that we have a collection of Flatbook user objects in an array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst users = [\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Niky',\u003cbr\u003e    lastName: 'Morgan',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Jaguar',\u003cbr\u003e    personalQuote: \"You're never too old to learn something new\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Tracy',\u003cbr\u003e    lastName: 'Lum',\u003cbr\u003e    favoriteColor: 'Yellow',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e    personalQuote: \"I just got lost in thought - it was unfamiliar territory\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Josh',\u003cbr\u003e    lastName: 'Rowley',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e    personalQuote: \"Always remember you’re unique, just like everyone else\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Kate',\u003cbr\u003e    lastName: 'Travers',\u003cbr\u003e    favoriteColor: 'Red',\u003cbr\u003e    favoriteAnimal: 'Jaguar'\u003cbr\u003e    personalQuote: \"Behind every great man is a woman rolling her eyes\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Avidor',\u003cbr\u003e    lastName: 'Turkewitz',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e    personalQuote: \"You don’t have to see the whole staircase, just take the first step\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Drew',\u003cbr\u003e    lastName: 'Price',\u003cbr\u003e    favoriteColor: 'Yellow',\u003cbr\u003e    favoriteAnimal: 'Elephant'\u003cbr\u003e    personalQuote: \"Failure is not the opposite of success: it’s part of success\"\u003cbr\u003e  }\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can iterate over that collection and print out everyone's first name as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction firstNamePrinter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    console.log(user.firstName);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirstNamePrinter(users);\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Tracy\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Kate\u003cbr\u003e// LOG: Avidor\u003cbr\u003e// LOG: Drew \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's also not too difficult to print out only users whose favorite color is blue:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction blueFilter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user.favoriteColor === 'Blue') {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eblueFilter(users);\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Avidor \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut what if we wanted to print out users whose favorite color is red instead? With the above approach, we'd need to create a whole new \u003ccode\u003eredFilter\u003c/code\u003e function.\u003c/p\u003e  \u003cp\u003eWe can improve matters by abstracting out the color into a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction colorFilter (collection, color) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user.favoriteColor === color) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ecolorFilter(users, 'Red');\u003cbr\u003e// LOG: Kate \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is definitely better: now we can print a list of users with any favorite color, but what if we want to print out users with a particular favorite animal instead? Or what if we want to do something other than simply print a list to the screen? For example, we might want to access each user's personal quote and add an exclamation point to the end. Or, using a different example, we might want to calculate the average amount of money spent by our customers in a given month.\u003c/p\u003e  \u003cp\u003eThere are any number of ways we might want to interact with the elements in our array, but all of them have some things in common: in all cases, we 1) pass in an array, 2) iterate through it using some sort of loop, and 3) write some code to interact with each element in the desired way.\u003c/p\u003e  \u003cp\u003eAccessing and interacting with the elements in an array is, in fact, a very common need in programming. So common that JavaScript has created a number of built in methods that reduce our need to write the common parts of the process over and over again. Below is a summary of some common use cases and the JavaScript method(s) we can use for each:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eUse Case\u003c/th\u003e     \u003cth\u003eMethod\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eFinding a single element that meets a condition\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003eindexOf()\u003c/code\u003e, \u003ccode\u003efind()\u003c/code\u003e\n\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eFinding and returning a list of elements that meet a condition\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003efilter()\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eModifying each element and returning the modified array\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003emap()\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e     \u003ctr\u003e     \u003ctd\u003eCreating a summary or aggregation of values in an array\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003ereduce()\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003cp\u003eWe will learn about each of the above methods in the upcoming lessons.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"array-iterator-methods"},{"id":173461,"title":"Finding Array Elements","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs_array_element_finding\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs_array_element_finding\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs_array_element_finding/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eFind elements using a simple condition with \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eFind elements using more complex conditions with \u003ccode\u003eArray.prototype.find()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs developers, one of the things we need to do on a regular basis is locate things in arrays. It's all well and good to be able to store data, but it's pretty useless unless we're able to get it back out again. In JavaScript, there are two different methods that we use to locate data in arrays. For simple conditions, we use \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e. For more complex calculations, we use \u003ccode\u003eArray.prototype.find()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eFind Elements Using a Simple Condition with \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e is called on an array and takes two arguments: the value you are looking for and an optional start position. It compares each element in turn to the value you're looking for using the strict equality operator (\u003ccode\u003e===\u003c/code\u003e) and returns the index of the first matching element. If the element isn't contained in the array, it returns -1.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003econst cards = ['queen of hearts', 'jack of clubs', 'ten of diamonds', 'ace of spades'];\u003cbr\u003e\u003cbr\u003ecards.indexOf('jack of clubs'); //=\u0026gt; 1\u003cbr\u003ecards.indexOf('jack of hearts'); //=\u0026gt; -1\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you pass in the optional second argument, \u003ccode\u003eindexOf()\u003c/code\u003e will begin the search at the specified position:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003ecards.indexOf('ace of spades', 2); //=\u0026gt; 3\u003cbr\u003ecards.indexOf('jack of clubs', 2); //=\u0026gt; -1 \u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e returns \u003ccode\u003e-1\u003c/code\u003e if either the value isn't found \u003cem\u003eor\u003c/em\u003e if the start position you pass in is after the element you're looking for.\u003c/p\u003e  \u003ch2\u003eFind Elements Using More Complex Conditions with \u003ccode\u003eArray.prototype.find()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.find()\u003c/code\u003e allows you to execute more complex searches by passing it a callback function. The method will automatically iterate through the array, call the callback on each value, and return the first element in the array that satisfies the condition defined by the function. If no matching element is found, \u003ccode\u003eundefined\u003c/code\u003e is returned.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.find()\u003c/code\u003e iterates through the array it's called on and, in each iteration, passes three arguments to the callback: the current element of the array, the index of the current element, and the array itself. These arguments can then be captured as parameters in the callback and used inside the function.\u003c/p\u003e  \u003cp\u003eSay we want to determine whether an array of numbers contains any odd values. We can write the following callback function to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction isOdd(element, index, array) {\u003cbr\u003e  return (element % 2 === 1);\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eArray.prototype.find()\u003c/code\u003e will iterate through the array, passing each element in  turn to \u003ccode\u003eisOdd()\u003c/code\u003e. If the element is not odd, the callback returns \u003ccode\u003efalse\u003c/code\u003e and the  iteration continues. If an odd element is encountered, the callback will return  true, and \u003ccode\u003eArray.prototype.find()\u003c/code\u003e will return that element.\u003c/p\u003e  \u003cp\u003eRemember that \u003ccode\u003eArray.prototype.find()\u003c/code\u003e \u003cem\u003eautomatically\u003c/em\u003e passes the three arguments to our function. By defining \u003ccode\u003eisOdd()\u003c/code\u003e with three parameters, we make those values available inside our function. In this example, we're only using the first one, the current element of the array, but all three are being passed in and are available inside our function if we want to use them.\u003c/p\u003e  \u003cp\u003eLet's call \u003ccode\u003e.find()\u003c/code\u003e on the array we want to search, and pass our function as an argument:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction isOdd(element, index, array) {\u003cbr\u003e  return (element % 2 === 1);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e[4, 6, 8, 10].find(isOdd); //=\u0026gt; undefined, not found\u003cbr\u003e[4, 5, 8, 10].find(isOdd); //=\u0026gt; 5\u003cbr\u003e[4, 5, 7, 8, 10].find(isOdd); //=\u0026gt; 5\u003cbr\u003e[4, 7, 5,  8, 10].find(isOdd); //=\u0026gt; 7\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that only the first argument — the current element in the array — is required for the callback function. If (as in our example above) your  callback doesn't use the other two arguments, you can define your  function with only one parameter. This will work as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction isOdd(element) {\u003cbr\u003e  return (element % 2 === 1);\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eBoth \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003eand \u003ccode\u003eArray.prototype.find()\u003c/code\u003e can be very useful in different situations. \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e is used when you want to check an array for a simple value; you call \u003ccode\u003eindexOf()\u003c/code\u003e on an array, passing the value you're looking for as the argument. \u003ccode\u003eArray.prototype.find()\u003c/code\u003e is also called on an array, but it takes a \u003cem\u003efunction\u003c/em\u003e as an argument. This enables you to define the condition the element should meet, allowing for more complex searches.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\"\u003eObject.prototype\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"\u003eArray.prototype.indexOf()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"\u003eArray.prototype.find()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"finding-array-elements"},{"id":173462,"title":"Using the Array Find Method","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-find-method-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-find-method-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-find-method-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice using \u003ccode\u003efind()\u003c/code\u003e to isolate a specific result\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe have learned that the \u003ccode\u003eindexOf()\u003c/code\u003e and \u003ccode\u003efind()\u003c/code\u003e methods can be used to locate an element in an array, and that they return the \u003cstrong\u003efirst\u003c/strong\u003e element for which the condition is met. (If you instead want a list of \u003cem\u003eall\u003c/em\u003e elements that meet a condition, you would use \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e instead. We'll learn about \u003ccode\u003efilter()\u003c/code\u003e in the next lesson.)\u003c/p\u003e  \u003cp\u003eWe've also learned that the \u003ccode\u003efind()\u003c/code\u003e method takes a \u003cem\u003ecallback function\u003c/em\u003e as its argument. This is a common pattern for the \u003ccode\u003eArray\u003c/code\u003e methods we'll be learning about in this section — in fact, \u003ccode\u003eindexOf()\u003c/code\u003e is the only one that \u003cem\u003edoesn't\u003c/em\u003e take a callback function as an argument. \u003ccode\u003efind()\u003c/code\u003e is one of two \u003ccode\u003eArray\u003c/code\u003e methods that expects the callback function to return either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e (\u003ccode\u003efilter()\u003c/code\u003e is the other one).\u003c/p\u003e  \u003cp\u003eIn this lab, we'll practice using the \u003ccode\u003efind()\u003c/code\u003e method.\u003c/p\u003e  \u003ch2\u003ePractice Using \u003ccode\u003efind()\u003c/code\u003e to Isolate a Specific Result\u003c/h2\u003e  \u003cp\u003eLet's create a function that uses the method \u003ccode\u003efind()\u003c/code\u003e to single out a specific result in game record data for the Kansas City Chiefs football team. We want to find out if, at \u003cem\u003eany\u003c/em\u003e point in the team's existence, they've had a win in the Superbowl. Our data looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst record = [\u003cbr\u003e  {year: \"2018\", result: \"L\"},\u003cbr\u003e  {year: \"2017\", result: \"W\"},\u003cbr\u003e  {year: \"2016\", result: \"N/A\"}\u003cbr\u003e  //...\u003cbr\u003e] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWrite a function called \u003ccode\u003esuperbowlWin()\u003c/code\u003e in \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe function should receive 1 argument, an \u003ccode\u003eArray\u003c/code\u003e of JavaScript \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003cli\u003eEach object has two properties: \u003ccode\u003eyear\u003c/code\u003e and \u003ccode\u003eresult\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIt should use \u003ccode\u003efind()\u003c/code\u003e to test each \u003ccode\u003eObject\u003c/code\u003e to see if the \u003ccode\u003eresult\u003c/code\u003e is \u003ccode\u003e\"W\"\u003c/code\u003e — a win!\u003c/li\u003e \u003cli\u003eIt should return the \u003ccode\u003eyear\u003c/code\u003e when the win occurred (if it occurred at all!)\u003c/li\u003e \u003cli\u003eIf no win is found, it should return, sadly, \u003ccode\u003eundefined\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.find()\u003c/code\u003e is a built-in function in JavaScript which is used to get the value of the first element in the array that satisfies the provided condition. With this, you can quickly check all the elements of the array and return the first match.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"\u003eMDN: Array.prototype.find()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g3342930edcf5f1e3f938753cf315dfb0"},{"id":173463,"title":"Filtering Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-filtering-arrays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-filtering-arrays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-filtering-arrays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain the concept of filtering an array\u003c/li\u003e \u003cli\u003eBuild our own version of JavaScript's \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e method\u003c/li\u003e \u003cli\u003eDefine what makes a function \u003cem\u003epure\u003c/em\u003e and explain why \u003cem\u003epure functions\u003c/em\u003e are often preferable to \u003cem\u003eimpure functions\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've seen the \u003ccode\u003eArray\u003c/code\u003e methods available in JavaScript to find a \u003cem\u003esingle\u003c/em\u003e element, but sometimes we want to return \u003cem\u003eall\u003c/em\u003e elements that match a certain condition. For example, we might want to search through an array and return values greater than one (\u003ccode\u003e[1, 2, 3]\u003c/code\u003e -\u0026gt; \u003ccode\u003e[2, 3]\u003c/code\u003e). In the JavaScript world, we refer to that search process as \u003cem\u003efiltering\u003c/em\u003e an array. In this lesson we're going to build our own \u003ccode\u003efilter()\u003c/code\u003e function.\u003c/p\u003e  \u003ch2\u003eFilter\u003c/h2\u003e  \u003cp\u003eLet's revisit our array of Flatbook user objects:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst users = [\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Niky',\u003cbr\u003e    lastName: 'Morgan',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Jaguar'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Tracy',\u003cbr\u003e    lastName: 'Lum',\u003cbr\u003e    favoriteColor: 'Yellow',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Josh',\u003cbr\u003e    lastName: 'Rowley',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Kate',\u003cbr\u003e    lastName: 'Travers',\u003cbr\u003e    favoriteColor: 'Red',\u003cbr\u003e    favoriteAnimal: 'Jaguar'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Avidor',\u003cbr\u003e    lastName: 'Turkewitz',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Drew',\u003cbr\u003e    lastName: 'Price',\u003cbr\u003e    favoriteColor: 'Yellow',\u003cbr\u003e    favoriteAnimal: 'Elephant'\u003cbr\u003e  }\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo review, we know we can iterate over that collection and print out everyone's first name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction firstNamePrinter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    console.log(user.firstName);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirstNamePrinter(users);\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Tracy\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Kate\u003cbr\u003e// LOG: Avidor\u003cbr\u003e// LOG: Drew \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe also know how to print out only users whose favorite color is blue:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction blueFilter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user.favoriteColor === 'Blue') {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eblueFilter(users);\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Avidor \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow what if we want to filter our collection of users for those whose favorite color is red? We could define an entirely new function, \u003ccode\u003eredFilter()\u003c/code\u003e, but that seems wasteful. Instead, let's just pass in the color that we want to filter for as an argument:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction colorFilter (collection, color) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user.favoriteColor === color) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ecolorFilter(users, 'Red');\u003cbr\u003e// LOG: Kate \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNice! We've extracted some of the hard-coded logic out of the function, making it more generic and reusable. However, now we want to filter our users based on whose favorite animal is a jaguar, and our \u003ccode\u003ecolorFilter()\u003c/code\u003e function won't work. Let's abstract the function a bit further:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction filter (collection, attribute, value) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user[attribute] === value) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilter(users, 'favoriteAnimal', 'Jaguar', );\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Kate\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo our function is definitely getting more abstract, but what if we wanted to filter by two attributes? We'd have to do something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction filter (collection, attribute1, value1, attribute2, value2) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user[attribute1] === value1 \u0026amp;\u0026amp; user[attribute2] === value2) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilter(users, 'favoriteAnimal', 'Jaguar', 'favoriteColor', 'Blue');\u003cbr\u003e// LOG: Niky\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is getting slightly ridiculous by this point. That is \u003cstrong\u003eway\u003c/strong\u003e too much logic to be putting on the shoulders of our poor little filter function. Plus, now our filter will only work if we're filtering by two attributes. To fix this, we can extract the comparison logic into a separate function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction filter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (likesElephants(user)) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction likesElephants (user) {\u003cbr\u003e  return user['favoriteAnimal'] === 'Elephant';\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilter(users);\u003cbr\u003e// LOG: Drew \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat separation of concerns feels nice. \u003ccode\u003efilter()\u003c/code\u003e doesn't remotely care what happens inside \u003ccode\u003elikesElephants()\u003c/code\u003e; it simply delegates the comparison and then trusts that \u003ccode\u003elikesElephants()\u003c/code\u003e correctly returns \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. We're almost at the finish line, but there's one final abstraction we can make: right now, our \u003ccode\u003efilter()\u003c/code\u003e function can only make comparisons using \u003ccode\u003elikesElephants()\u003c/code\u003e. If we want to use a different comparison function, we'd have to rewrite \u003ccode\u003efilter()\u003c/code\u003e. However, there is another way: we can use a callback function!\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/filter-readme/maybe_theres_another_way.gif\" alt=\"Maybe there's another way.\"\u003e \u003c/p\u003e  \u003cp\u003eLet's refactor our filter function to take a callback:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst users = [\u003cbr\u003e  { firstName: 'Niky',   lastName: 'Morgan',    favoriteColor: 'Blue',   favoriteAnimal: 'Jaguar' },\u003cbr\u003e  { firstName: 'Tracy',  lastName: 'Lum',       favoriteColor: 'Yellow', favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Josh',   lastName: 'Rowley',    favoriteColor: 'Blue',   favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Kate',   lastName: 'Travers',   favoriteColor: 'Red',    favoriteAnimal: 'Jaguar' },\u003cbr\u003e  { firstName: 'Avidor', lastName: 'Turkewitz', favoriteColor: 'Blue',   favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Drew',   lastName: 'Price',     favoriteColor: 'Yellow', favoriteAnimal: 'Elephant' }\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003efunction filter (collection, cb) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (cb(user)) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilter(users, function (user) { return user.favoriteColor === 'Blue' \u0026amp;\u0026amp; user.favoriteAnimal === 'Penguin'; });\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Avidor\u003cbr\u003e\u003cbr\u003efilter(users, function (user) { return user.favoriteColor === 'Yellow'; });\u003cbr\u003e// LOG: Tracy\u003cbr\u003e// LOG: Drew \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur \u003ccode\u003efilter()\u003c/code\u003e function doesn't know or care about any of the comparison logic encapsulated in the callback function. All it does is take in a collection and a callback and \u003ccode\u003econsole.log()\u003c/code\u003e out the \u003ccode\u003efirstName\u003c/code\u003e of every \u003ccode\u003euser\u003c/code\u003e object that makes the callback return \u003ccode\u003etrue\u003c/code\u003e. And because we've extracted the logic into a separate function, our \u003ccode\u003efilter\u003c/code\u003e now works regardless of how many conditions we want to filter on.\u003c/p\u003e  \u003ch3\u003ePure functions\u003c/h3\u003e  \u003cp\u003eOne final note about \u003ccode\u003efilter()\u003c/code\u003e and manipulating objects in JavaScript. We touched on this in the discussions of \u003cem\u003edestructive\u003c/em\u003e and \u003cem\u003enondestructive\u003c/em\u003e operations, but there's some function-specific terminology that's important to know. A function in JavaScript can be \u003cem\u003epure\u003c/em\u003e or \u003cem\u003eimpure\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIf a \u003cem\u003epure function\u003c/em\u003e is repeatedly invoked with the same set of arguments, the function will \u003cstrong\u003ealways return the same result\u003c/strong\u003e. Its behavior is predictable. Additionally, invoking the function has no external side-effects such as making a network or database call or altering any object(s) passed to it as an argument.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eImpure functions\u003c/em\u003e are the opposite: the return value is not predictable, and invoking the function might make network or database calls or alter any objects passed in as arguments.\u003c/p\u003e  \u003cp\u003eThis function is impure because the return value is not predictable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction randomMultiplyAndFloor () {\u003cbr\u003e  return Math.floor(Math.random() * 100);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erandomMultiplyAndFloor();\u003cbr\u003e// =\u0026gt; 53\u003cbr\u003erandomMultiplyAndFloor();\u003cbr\u003e// =\u0026gt; 66 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis one's impure because it alters the passed-in object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ada = {\u003cbr\u003e  name: 'Ada Lovelace',\u003cbr\u003e  age: 202\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction happyBirthday (person) {\u003cbr\u003e  console.log(`Happy birthday, ${person.name}! You're ${++person.age} years old!`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ehappyBirthday(ada);\u003cbr\u003e// LOG: Happy birthday, Ada Lovelace! You're 203 years old!\u003cbr\u003e\u003cbr\u003ehappyBirthday(ada);\u003cbr\u003e// LOG: Happy birthday, Ada Lovelace! You're 204 years old!\u003cbr\u003e\u003cbr\u003eada;\u003cbr\u003e// =\u0026gt; {name: \"Ada Lovelace\", age: 204} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen possible, it's generally good to avoid impure functions for the following two reasons:\u003c/p\u003e  \u003col\u003e \u003cli\u003ePredictable code is good. If you can be sure that a function will always return the same value when provided the same inputs, it makes writing tests for that function a cinch.\u003c/li\u003e \u003cli\u003eBecause pure functions don't have side effects, it makes debugging a lot easier. Imagine that our code errors out due to an array that doesn't contain the correct properties.  \u003cul\u003e \u003cli\u003eIf that array was returned from a pure function, our debugging process would be linear and well-scoped. We would first check what inputs were provided to the pure function. If the inputs are correct, that means the bug is inside our pure function. If the inputs aren't correct, then we figure out why they aren't correct. Case closed!\u003c/li\u003e \u003cli\u003eIf, however, the array is modified by impure functions, we'd have to follow the data around on a wild goose chase, combing through each impure function to see where and how the array is modified.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: The fewer places a particular object can be modified, the fewer places we have to look when debugging.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eHere's a pure take on our \u003ccode\u003erandomMultiplyAndFloor()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction multiplyAndFloor (num) {\u003cbr\u003e  return Math.floor(num * 100);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst randNum = Math.random();\u003cbr\u003e\u003cbr\u003erandNum;\u003cbr\u003e// =\u0026gt; 0.9123939589869237\u003cbr\u003e\u003cbr\u003emultiplyAndFloor(randNum);\u003cbr\u003e// =\u0026gt; 91\u003cbr\u003emultiplyAndFloor(randNum);\u003cbr\u003e// =\u0026gt; 91 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd one that returns a new object instead of mutating the passed-in object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst adaAge202 = {\u003cbr\u003e  name: 'Ada Lovelace',\u003cbr\u003e  age: 202\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction happyBirthday (person) {\u003cbr\u003e  const newPerson = Object.assign({}, person, { age: person.age + 1 });\u003cbr\u003e\u003cbr\u003e  console.log(`Happy birthday, ${newPerson.name}! You're ${newPerson.age} years old!`);\u003cbr\u003e\u003cbr\u003e  return newPerson;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst adaAge203 = happyBirthday(adaAge202);\u003cbr\u003e// LOG: Happy birthday, Ada Lovelace! You're 203 years old!\u003cbr\u003e\u003cbr\u003eadaAge202;\u003cbr\u003e// =\u0026gt; {name: \"Ada Lovelace\", age: 202}\u003cbr\u003e\u003cbr\u003eadaAge203;\u003cbr\u003e// =\u0026gt; {name: \"Ada Lovelace\", age: 203} \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eTying it all together\u003c/h2\u003e  \u003cp\u003eAs a final challenge, let's rewrite our \u003ccode\u003efilter()\u003c/code\u003e function as a pure function that returns a new array containing the filtered elements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst users = [\u003cbr\u003e  { firstName: 'Niky',   lastName: 'Morgan',    favoriteColor: 'Blue',   favoriteAnimal: 'Jaguar' },\u003cbr\u003e  { firstName: 'Tracy',  lastName: 'Lum',       favoriteColor: 'Yellow', favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Josh',   lastName: 'Rowley',    favoriteColor: 'Blue',   favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Kate',   lastName: 'Travers',   favoriteColor: 'Red',    favoriteAnimal: 'Jaguar' },\u003cbr\u003e  { firstName: 'Avidor', lastName: 'Turkewitz', favoriteColor: 'Blue',   favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Drew',   lastName: 'Price',     favoriteColor: 'Yellow', favoriteAnimal: 'Elephant' }\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003efunction filter (collection, cb) {\u003cbr\u003e  const newCollection = [];\u003cbr\u003e\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (cb(user)) {\u003cbr\u003e      newCollection.push(user);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return newCollection;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst bluePenguinUsers = filter(users, function (user) { return user.favoriteColor === 'Blue' \u0026amp;\u0026amp; user.favoriteAnimal === 'Penguin'; });\u003cbr\u003e\u003cbr\u003ebluePenguinUsers;\u003cbr\u003e// =\u0026gt; [{ firstName: \"Josh\", lastName: \"Rowley\", favoriteColor: \"Blue\", favoriteAnimal: \"Penguin\" }, { firstName: \"Avidor\", lastName: \"Turkewitz\", favoriteColor: \"Blue\", favoriteAnimal: \"Penguin\" }]\u003cbr\u003e\u003cbr\u003econst yellowUsers = filter(users, function (user) { return user.favoriteColor === 'Yellow'; });\u003cbr\u003e\u003cbr\u003eyellowUsers;\u003cbr\u003e// =\u0026gt; [{ firstName: \"Tracy\", lastName: \"Lum\", favoriteColor: \"Yellow\", favoriteAnimal: \"Penguin\" }, { firstName: \"Drew\", lastName: \"Price\", favoriteColor: \"Yellow\", favoriteAnimal: \"Elephant\" }]\u003cbr\u003e\u003cbr\u003eusers.length;\u003cbr\u003e// =\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWoohoo! We successfully built a clone of JavaScript's built-in \u003ccode\u003e.filter()\u003c/code\u003e array method!\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/filter-readme/no_shortcuts.gif\" alt=\"Our journey has never been one of shortcuts or settling for less.\"\u003e \u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eNow that we've built our own version of \u003ccode\u003efilter()\u003c/code\u003e, we have a better understanding of what JavaScript's built-in \u003ccode\u003efilter()\u003c/code\u003e method is doing for us and how it works under the hood. Here's an example of what a call to \u003ccode\u003efilter()\u003c/code\u003e might look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[1, 2, 3, 4, 5].filter(function (num) { return num \u0026gt; 3; });\u003cbr\u003e// =\u0026gt; [4, 5] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe method accepts one argument, a callback function that it will invoke with each element in the array. For each element passed to the callback, if the callback's return value is \u003ccode\u003etrue\u003c/code\u003e, that element is copied into a new array. If the callback's return value is \u003ccode\u003efalse\u003c/code\u003e, the element is filtered out. After iterating over every element in the collection, \u003ccode\u003e.filter()\u003c/code\u003e returns the new array.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs we've learned in this lesson, using JavaScript's built-in \u003ccode\u003efilter()\u003c/code\u003e method enables us to write more efficient, less repetitive code. Specifically:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe no longer need to create a \u003ccode\u003efor\u003c/code\u003e or \u003ccode\u003efor ... of\u003c/code\u003e loop.\u003c/li\u003e \u003cli\u003eIn each iteration through the array, the current element is stored in a variable for us. We no longer need to access elements using their index values.\u003c/li\u003e \u003cli\u003eA new array is automatically created and returned after the iterations are complete, so we no longer need to create an empty array and push elements into it.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFinally, \u003ccode\u003eArray\u003c/code\u003e methods like \u003ccode\u003efind()\u003c/code\u003e, \u003ccode\u003efilter()\u003c/code\u003e and the other methods we will learn about in this section are \u003cem\u003eexpressive\u003c/em\u003e. As soon as we (or other developers) see that \u003ccode\u003efilter()\u003c/code\u003e is being called, we know that the code is looking for elements in an array that meet a certain condition and returning a new array containing those elements. Or if we see that \u003ccode\u003emap()\u003c/code\u003e (which we'll learn about next) is being called, we immediately know that the code is modifying the elements in an array and returning an array containing the modifed values. This makes our code easier to read and understand than if we use a generic looping construct.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"\u003eMDN — \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://javascript.tutorialhorizon.com/2016/04/24/pure-vs-impure-functions/\"\u003eTutorial Horizon —\u0026nbsp;Pure vs. Impure Functions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"filtering-arrays"},{"id":173464,"title":"Using the Array Filter Method","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-filter-method-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-filter-method-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-filter-method-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice using \u003ccode\u003efilter()\u003c/code\u003e to return matching results\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've all probably had the experience of filtering a selection of choices online. When shopping for clothing, we might have selected a single size so that we can consider only the search results we need. Or when ordering food online, we could have customized our results to only show restaurants currently open or offering delivery in our neighborhoods. Since it's such a common need for a user, it's also a common function for a web programmer to run. Fortunately for us, JavaScript provides a built-in \u003ccode\u003efilter()\u003c/code\u003e method.\u003c/p\u003e  \u003ch2\u003eUse \u003ccode\u003efilter()\u003c/code\u003e to Return Matching Results\u003c/h2\u003e  \u003cp\u003eWe have an array of drivers with various information. We need to write functions using the \u003ccode\u003efilter()\u003c/code\u003e method so that PickMeUp Taxi service employees can easily query the data. Run the tests to see what conditions need to be met by each function \u003cem\u003ebefore\u003c/em\u003e you start writing JavaScript code.\u003c/p\u003e  \u003cp\u003eYou'll be writing three functions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003efindMatching\u003c/code\u003e- This function takes an array of drivers' names and a \u003ccode\u003estring\u003c/code\u003e as arguments, and returns the matching list of drivers. The function should be case insensitive.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003efuzzyMatch\u003c/code\u003e - This function takes an array of drivers' names and a \u003ccode\u003estring\u003c/code\u003e as arguments for querying the array, and returns all drivers whose names begin with the provided letters.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003ematchName\u003c/code\u003e - This function takes an array of \u003ccode\u003edriver\u003c/code\u003e objects and a \u003ccode\u003estring\u003c/code\u003e as arguments. Each \u003ccode\u003edriver\u003c/code\u003e object has two properties: \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ehometown\u003c/code\u003e. The function should return each element whose \u003ccode\u003ename\u003c/code\u003e property matches the provided \u003ccode\u003estring\u003c/code\u003e argument.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"\u003eMDN: Array.prototype.filter()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g8654391049ac342c336eda1adc7b273c"},{"id":173465,"title":"Mapping Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-looping-and-iteration-map-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-looping-and-iteration-map-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-looping-and-iteration-map-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eImplement a \u003ccode\u003emap()\u003c/code\u003e function from scratch\u003c/li\u003e \u003cli\u003eDemonstrate using \u003ccode\u003emap()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we learned about \u003ccode\u003e.filter()\u003c/code\u003e, a built-in array method that searches through a collection, passes each element to a provided callback function, and returns an entirely new array comprised of elements for which the callback returned a truthy value.\u003c/p\u003e  \u003cp\u003eAnother very common built-in array method is \u003ccode\u003e.map()\u003c/code\u003e, which transforms every element in an array to another value. For example, it can be used to square every value in an array of numbers: \u003ccode\u003e[1, 2, 3]\u003c/code\u003e -\u0026gt; \u003ccode\u003e[1, 4, 9]\u003c/code\u003e. Like \u003ccode\u003e.filter()\u003c/code\u003e, \u003ccode\u003e.map()\u003c/code\u003e accepts a callback function, and passes each element in turn to the callback:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[1, 2, 3].map(function(num) {\u003cbr\u003e  return num * num;\u003cbr\u003e});\u003cbr\u003e// =\u0026gt; [1, 4, 9] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile both \u003ccode\u003e.filter()\u003c/code\u003e and \u003ccode\u003e.map()\u003c/code\u003e return a new array, \u003ccode\u003e.filter()\u003c/code\u003e returns a subset of the original array (unless all elements meet the provided condition) in which the elements are unchanged. \u003ccode\u003e.map()\u003c/code\u003e, on the other hand, returns a new array that's the same length as the original array in which the elements have been modified.\u003c/p\u003e  \u003cp\u003eLet's quickly run through how we could create our own version of the \u003ccode\u003e.map()\u003c/code\u003e method.\u003c/p\u003e  \u003ch2\u003eImplementing \u003ccode\u003e.map()\u003c/code\u003e From Scratch\u003c/h2\u003e  \u003ch3\u003eAbstracting the iteration\u003c/h3\u003e  \u003cp\u003eRight off the bat, we know that our function needs to accept the array from which we'd like to \u003cem\u003emap\u003c/em\u003e values as an argument:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array) {\u003cbr\u003e  // Map magic to follow shortly\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInside the function, we need to iterate over each element in the passed-in array, so let's fall back on our trusty \u003ccode\u003efor...of\u003c/code\u003e statement:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array) {\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    // Do something to each element\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eCallback city\u003c/h3\u003e  \u003cp\u003eWe want to transform values from the array, but for code organization and reusability it's best to keep that logic decoupled from the \u003ccode\u003emap()\u003c/code\u003e function. \u003ccode\u003emap()\u003c/code\u003e should really only be concerned with iterating over the collection and passing each element to a callback that will handle the transformations. Let's accept that callback function as the second argument to \u003ccode\u003emap()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    // Do something to each element\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd inside our iteration, we'll want to invoke the callback, passing in the elements from \u003ccode\u003earray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    callback(element);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's make sure this is working so far:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emap([1, 2, 3], function(num) {\u003cbr\u003e  console.log(num * num);\u003cbr\u003e});\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 4\u003cbr\u003e// LOG: 9 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eReturning a brand new collection\u003c/h3\u003e  \u003cp\u003eLogging each squared number out to the console is fun, but \u003ccode\u003emap()\u003c/code\u003e should really be returning an entirely new array containing all of the squared values. Show off that new collection!\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/map-readme/nyfw.gif\" alt=\"NY Fashion Week\"\u003e \u003c/p\u003e  \u003cp\u003eFierce.\u003c/p\u003e  \u003cp\u003eFirst, let's create that new array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  const newArr = [];\u003cbr\u003e\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    callback(element);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInside the \u003ccode\u003efor...of\u003c/code\u003e statement, let's \u003ccode\u003e.push()\u003c/code\u003e the return value of each callback invocation into \u003ccode\u003enewArr\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  const newArr = [];\u003cbr\u003e\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    newArr.push(callback(element));\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd at the end of our \u003ccode\u003emap()\u003c/code\u003e function we're going to want to return the new array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  const newArr = [];\u003cbr\u003e\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    newArr.push(callback(element));\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return newArr;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's test it out!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst originalNumbers = [1, 2, 3, 4, 5];\u003cbr\u003e\u003cbr\u003econst squaredNumbers = map(originalNumbers, function(num) {\u003cbr\u003e  return num * num;\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eoriginalNumbers;\u003cbr\u003e// =\u0026gt; [1, 2, 3, 4, 5]\u003cbr\u003e\u003cbr\u003esquaredNumbers;\u003cbr\u003e// =\u0026gt; [1, 4, 9, 16, 25] \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDemonstrate Using \u003ccode\u003emap()\u003c/code\u003e on Flatbook's Expanding Engineering Team\u003c/h2\u003e  \u003cp\u003eLet's use our \u003ccode\u003emap()\u003c/code\u003e function on a trickier data structure —\u0026nbsp;a list of recently onboarded engineers. First off, we need to flip each new engineer's account from a normal user to an admin:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst oldAccounts = [\u003cbr\u003e  { userID: 15, title: 'Developer Apprentice', accessLevel: 'user' },\u003cbr\u003e  { userID: 63, title: 'Developer Apprentice', accessLevel: 'user' },\u003cbr\u003e  { userID: 97, title: 'Developer Apprentice', accessLevel: 'user' },\u003cbr\u003e  { userID: 12, title: 'Developer Apprentice', accessLevel: 'user' },\u003cbr\u003e  { userID: 44, title: 'Developer Apprentice', accessLevel: 'user' }\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003econst newEngineers = map(oldAccounts, function(account) {\u003cbr\u003e  return Object.assign({}, account, { accessLevel: 'admin' });\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eoldAccounts;\u003cbr\u003e// =\u0026gt; [\u003cbr\u003e//      { userID: 15, title: \"Developer Apprentice\", accessLevel: \"user\" },\u003cbr\u003e//      { userID: 63, title: \"Developer Apprentice\", accessLevel: \"user\" },\u003cbr\u003e//      { userID: 97, title: \"Developer Apprentice\", accessLevel: \"user\" },\u003cbr\u003e//      { userID: 12, title: \"Developer Apprentice\", accessLevel: \"user\" },\u003cbr\u003e//      { userID: 44, title: \"Developer Apprentice\", accessLevel: \"user\" }\u003cbr\u003e//    ]\u003cbr\u003e\u003cbr\u003enewEngineers;\u003cbr\u003e// =\u0026gt; [\u003cbr\u003e//      { userID: 15, title: \"Developer Apprentice\", accessLevel: \"admin\" },\u003cbr\u003e//      { userID: 63, title: \"Developer Apprentice\", accessLevel: \"admin\" },\u003cbr\u003e//      { userID: 97, title: \"Developer Apprentice\", accessLevel: \"admin\" },\u003cbr\u003e//      { userID: 12, title: \"Developer Apprentice\", accessLevel: \"admin\" },\u003cbr\u003e//      { userID: 44, title: \"Developer Apprentice\", accessLevel: \"admin\" }\u003cbr\u003e//    ] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we're using \u003ccode\u003eObject.assign()\u003c/code\u003e to create a \u003cstrong\u003enew\u003c/strong\u003e object with updated values instead of mutating the original object's \u003ccode\u003eaccessLevel\u003c/code\u003e property. Nondestructive updating is an important concept to practice — destructively modifying objects at multiple points within a code base is one of the biggest sources of bugs.\u003c/p\u003e  \u003cp\u003eNext, we just need a simple array of the new engineers' \u003ccode\u003euserID\u003c/code\u003es that we can shoot over to the system administrator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userIDs = map(newEngineers, function(eng) {\u003cbr\u003e  return eng.userID;\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003euserIDs;\u003cbr\u003e// =\u0026gt; [15, 63, 97, 12, 44] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFinally, we'll update our engineer objects to indicate that all the new engineers have been provided a new work laptop. This time, though, let's use JavaScript's built-in \u003ccode\u003eArray.prototype.map()\u003c/code\u003e method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst equippedEngineers = newEngineers.map(function(eng) {\u003cbr\u003e  return Object.assign({}, eng, { equipment: 'Laptop' });\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eequippedEngineers;\u003cbr\u003e// =\u0026gt; [\u003cbr\u003e//      { userID: 15, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" },\u003cbr\u003e//      { userID: 63, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" },\u003cbr\u003e//      { userID: 97, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" },\u003cbr\u003e//      { userID: 12, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" },\u003cbr\u003e//      { userID: 44, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" }\u003cbr\u003e//    ] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote how similar this method call is to the one using our version of \u003ccode\u003emap()\u003c/code\u003e: the only difference is that we call the built-in \u003ccode\u003e.map()\u003c/code\u003e method \u003cem\u003eon\u003c/em\u003e our array, rather than passing the array as an argument. There \u003cem\u003eis\u003c/em\u003e one big difference between the two, though: we didn't have to do all the work of building \u003ccode\u003eArray.prototype.map()\u003c/code\u003e!\u003c/p\u003e  \u003cp\u003eNow that we understand how the built-in \u003ccode\u003e.map()\u003c/code\u003e array method is implemented, we can stick to the native method and get rid of our copycat \u003ccode\u003emap()\u003c/code\u003e function.\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/map-readme/office_space.gif\" alt=\"Office Space\"\u003e \u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003eMDN — \u003ccode\u003eArray.prototype.map()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"mapping-arrays"},{"id":173466,"title":"Using the Array Map Method","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-map-method-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-map-method-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-map-method-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview how the \u003ccode\u003emap()\u003c/code\u003e method works\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003emap()\u003c/code\u003e with \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003emap()\u003c/code\u003e with complex data structures\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs developers, we find ourselves responsible for all sorts of common, but tedious, tasks, such as iterating over arrays. Although a \u003ccode\u003efor\u003c/code\u003e loop will work for these tasks, we can take advantage of a method like \u003ccode\u003emap()\u003c/code\u003e to save ourselves work and to organize and optimize our code, resulting in more readable and understandable functions.\u003c/p\u003e  \u003ch2\u003eReview How the \u003ccode\u003emap()\u003c/code\u003e Method Works\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.map()\u003c/code\u003e is a method that iterates over an array and applies a function to each element, modifying it in some way. The result is then returned as a \u003cem\u003enew\u003c/em\u003e array, leaving the original array the same. This is super helpful, because it saves us from having to build out the loop, or create a new array and copy stuff in there. It also leaves the elements in the original array unchanged, which helps protect our code from bugs.\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003emap()\u003c/code\u003e With \u003ccode\u003eArray\u003c/code\u003es\u003c/h2\u003e  \u003cp\u003eAs mentioned above, we use \u003ccode\u003emap()\u003c/code\u003e when we want to perform an action on each element in an \u003ccode\u003eArray\u003c/code\u003e, and \"gather\" the results into a new \u003ccode\u003eArray\u003c/code\u003e. We'll start by looking at how we would build the functionality ourselves, using a \u003ccode\u003efor...of\u003c/code\u003e loop, then show how \u003ccode\u003emap()\u003c/code\u003e can save us work and improve our code.\u003c/p\u003e  \u003cp\u003eWe'll also use this as a chance to demonstrate some of the power of functions in JavaScript. We'll write the code \u003cstrong\u003efour times\u003c/strong\u003e, making it increasingly efficient and \u003cem\u003eexpressive\u003c/em\u003e each time.\u003c/p\u003e  \u003ch3\u003eUsing \u003ccode\u003efor...of\u003c/code\u003e in Place of \u003ccode\u003e.map()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eIn this example, we are using a standard bit of iteration code. The code below recreates the functionality of the native \u003ccode\u003e.map()\u003c/code\u003e method using \u003ccode\u003efor...of\u003c/code\u003e. But because \u003ccode\u003efor...of\u003c/code\u003e (and \u003ccode\u003efor\u003c/code\u003e as well) is a \u003cem\u003egeneral\u003c/em\u003e function that can be used to do lots of things, another programmer would have to examine the loop's inner workings to determine exactly what the code is doing.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst students = [\"harry\", \"ron\", \"hermione\", \"ginevra\"];\u003cbr\u003econst rollCall = [];\u003cbr\u003e\u003cbr\u003efor (const student of students) {\u003cbr\u003e  rollCall.push( student + \" the wizard\" );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e//=\u0026gt; rollCall = [\"harry the wizard\", \"ron the wizard\", \"hermione the wizard\", \"ginevra the wizard\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we use the \u003ccode\u003e.map()\u003c/code\u003e method, on the other hand, we are saying to other programmers: \"Expect a new array to come out of this after each element is modified in some way!\"\u003c/p\u003e  \u003cp\u003eLet's look at a few different ways to implement the native \u003ccode\u003e.map()\u003c/code\u003e method.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003emap()\u003c/code\u003e With a Function Declaration\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003efunction studentRollCall(student) {\u003cbr\u003e  return student + \" the wizard\";\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst students = [\"harry\", \"ron\", \"hermione\", \"ginevra\"];\u003cbr\u003econst rollCall = students.map(studentRollCall);\u003cbr\u003e//=\u0026gt; rollCall = [\"harry the wizard\", \"ron the wizard\", \"hermione the wizard\", \"ginevra the wizard\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe use \u003ccode\u003emap()\u003c/code\u003e when we want to transform the elements in an array in some way. To do this, we pass a function \u003cem\u003eas an argument\u003c/em\u003e; that function (the callback) is what executes our desired transformation. In JavaScript, arguments can be primitive types like \u003ccode\u003eNumber\u003c/code\u003e or \u003ccode\u003eString\u003c/code\u003e, but they \u003cstrong\u003ecan also be work\u003c/strong\u003e. Very few other programming languages allow that!\u003c/p\u003e  \u003cp\u003eThe iterator function \u003ccode\u003emap()\u003c/code\u003e calls the callback for each element in turn, passing the element as an argument, and stores the return value in a new \u003ccode\u003eArray\u003c/code\u003e. When the iterations are complete, it returns that new array.\u003c/p\u003e  \u003cp\u003eThis code is more \u003cem\u003eexpressive\u003c/em\u003e than the version using \u003ccode\u003efor...of\u003c/code\u003e because as soon as a developer sees that \u003ccode\u003emap()\u003c/code\u003e is being used, they know a lot about what the code is doing.\u003c/p\u003e  \u003cp\u003eNote that this code is using a \u003cem\u003enamed\u003c/em\u003e function as the callback. This is perfectly valid, but the \u003ccode\u003estudentRollCall\u003c/code\u003e function isn't doing much work. We may want to streamline our code a bit more by using a function expression (\"anonymous function\") instead.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003emap()\u003c/code\u003e With a Function Expression\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst students = [\"harry\", \"ron\", \"hermione\", \"ginevra\"];\u003cbr\u003econst rollCall = students.map(function(student) {\u003cbr\u003e  return student + \" the wizard\";\u003cbr\u003e});\u003cbr\u003e//=\u0026gt; rollCall = [\"harry the wizard\", \"ron the wizard\", \"hermione the wizard\", \"ginevra the wizard\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy defining a function expression inline, we're able to tighten up our code without changing its functionality or making it less expressive.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003emap()\u003c/code\u003e With an Arrow Function\u003c/h3\u003e  \u003cp\u003eThanks to arrow functions, we can shorten up the function even more:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// When the parameter list is only one element, we can drop () !\u003cbr\u003econst students = [\"harry\", \"ron\", \"hermione\", \"ginevra\"];\u003cbr\u003econst rollCall = students.map(student =\u0026gt; student + \" the wizard\");\u003cbr\u003e//=\u0026gt; rollCall = [\"harry the wizard\", \"ron the wizard\", \"hermione the wizard\", \"ginevra the wizard\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code now fits on one line! We've pared down all that noisy JavaScript code in the \u003ccode\u003efor...of\u003c/code\u003e version by using \u003ccode\u003emap()\u003c/code\u003e along with more efficient JavaScript syntax. This makes our code even more expressive: that single line of code tells us everything we need to know about what the code is doing.\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003emap()\u003c/code\u003e With Complex Data Structures\u003c/h2\u003e  \u003cp\u003eLet's use the \u003ccode\u003emap()\u003c/code\u003e function on a trickier data structure — a list of objects. To start things off, we have an array of robots. We want to activate all of them. To activate a robot, we need to mark it as such using the \u003ccode\u003eisActivated\u003c/code\u003e boolean, and also double its number of modes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst robots = [\u003cbr\u003e  { name: 'Johnny 5', modes: 5, isActivated: false, },\u003cbr\u003e  { name: 'C3PO', modes: 3, isActivated: false, },\u003cbr\u003e  { name: 'Sonny', modes: 2.5, isActivated: false, },\u003cbr\u003e  { name: 'Baymax', modes: 1.5, isActivated: false, },\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003econst activatedRobots = robots.map( robot =\u0026gt; {\u003cbr\u003e  return Object.assign({}, robot, {\u003cbr\u003e    modes: robot.modes * 2,\u003cbr\u003e    isActivated: true,\u003cbr\u003e  });\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003econsole.log(activatedRobots);\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003e Result:\u003cbr\u003e [\u003cbr\u003e   { name: 'Johnny 5', modes: 10, isActivated: true },\u003cbr\u003e   { name: 'C3PO', modes: 6, isActivated: true },\u003cbr\u003e   { name: 'Sonny', modes: 5, isActivated: true },\u003cbr\u003e   { name: 'Baymax', modes: 3, isActivated: true }\u003cbr\u003e ]\u003cbr\u003e*/ \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe could, of course, accomplish the same thing using a \u003ccode\u003efor\u003c/code\u003e or \u003ccode\u003efor...of\u003c/code\u003e loop, but using the native \u003ccode\u003emap()\u003c/code\u003e function frees us from having to create an empty array, code the looping mechanism, push the modified values into the empty array, and return the modified array at the end. Instead of having to rewrite the iteration code every time we need to modify elements in an array, \u003ccode\u003emap()\u003c/code\u003e allows us to focus all our effort on building the actions we need in our callback function.\u003c/p\u003e  \u003ch2\u003eLab: Using \u003ccode\u003emap()\u003c/code\u003e to Generate a New Array\u003c/h2\u003e  \u003cp\u003eLet's put our newly acquired knowledge of \u003ccode\u003emap()\u003c/code\u003e to use! We just uploaded 10 coding tutorials online, but some of them have inconsistent casing. We want all the titles to be \"title case\", in other words, the first letter of each word should be capitalized. Create a new array containing the names of the tutorials with proper title case formatting. For example, \u003ccode\u003e'what does the this keyword mean?'\u003c/code\u003e should become \u003ccode\u003e'What Does The This Keyword Mean?'\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst tutorials = [\u003cbr\u003e  'what does the this keyword mean?',\u003cbr\u003e  'What is the Constructor OO pattern?',\u003cbr\u003e  'implementing Blockchain Web API',\u003cbr\u003e  'The Test Driven Development Workflow',\u003cbr\u003e  'What is NaN and how Can we Check for it',\u003cbr\u003e  'What is the difference between stopPropagation and preventDefault?',\u003cbr\u003e  'Immutable State and Pure Functions',\u003cbr\u003e  'what is the difference between == and ===?',\u003cbr\u003e  'what is the difference between event capturing and bubbling?',\u003cbr\u003e  'what is JSONP?'\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e This lab is challenging! You will need to iterate through the \u003ccode\u003etutorials\u003c/code\u003e array, modifying the name of each tutorial. To do this, you will \u003cstrong\u003ealso\u003c/strong\u003e need to access and modify each individual word.\u003c/p\u003e  \u003cp\u003eSome questions to consider:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow can we \"iterate\" through individual words in a string?\u003c/li\u003e \u003cli\u003eCan we execute an interation inside an iteration? How?\u003c/li\u003e \u003cli\u003eHow can we capitalize just the first letter in a word?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eA couple of hints:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eBreak the task into smaller chunks: using the console or a REPL, start by figuring out how to modify one individual element in the \u003ccode\u003etutorials\u003c/code\u003e array. Once you've got that working, then figure out how to update the array itself.\u003c/li\u003e \u003cli\u003eUse Google!!\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003emap()\u003c/code\u003e takes 2 arguments — a callback and the optional context. The callback is called for each value in the original array and the modified value is added to a new array. Its return value is a new array that is the same length as the original array. Using \u003ccode\u003emap()\u003c/code\u003e saves time while making the code simpler and more expressive.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003eMDN: Array.prototype.map()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"ga6ffe91f3776585a2d7551098a30f2a0"},{"id":173468,"title":"Using the Array Reduce Method","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-iterators-fndcl-fnexpr-reduce-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-iterators-fndcl-fnexpr-reduce-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-iterators-fndcl-fnexpr-reduce-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eLearn how the \u003ccode\u003ereduce()\u003c/code\u003e method works\u003c/li\u003e \u003cli\u003eDemonstrate using \u003ccode\u003ereduce()\u003c/code\u003e with a primitive return value\u003c/li\u003e \u003cli\u003eDemonstrate using \u003ccode\u003ereduce()\u003c/code\u003e with an object as the return value\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the world of programming, we often work with lists. Sometimes we want to find or transform elements in a list, but other times we might want to create a single summary value. In this lesson, we'll learn how to use the \u003ccode\u003ereduce()\u003c/code\u003e iterator method to \u003cstrong\u003eaggregate\u003c/strong\u003e a result, i.e., to \u003cem\u003ereduce\u003c/em\u003e a list to a single value. That value can be a string, a number, a boolean, etc.\u003c/p\u003e  \u003cp\u003eTo better understand how \u003ccode\u003ereduce()\u003c/code\u003e works, we'll start by building our own version.\u003c/p\u003e  \u003ch2\u003eLearn How the \u003ccode\u003ereduce()\u003c/code\u003e Method Works\u003c/h2\u003e  \u003cp\u003eLet's say we have a bunch of grocery items in our basket and we want to calculate the total price. Our basket data might look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst products = [\u003cbr\u003e  { name: 'Shampoo', price: 4.99 },\u003cbr\u003e  { name: 'Donuts', price: 7.99 },\u003cbr\u003e  { name: 'Cookies', price: 6.49 },\u003cbr\u003e  { name: 'Bath Gel', price: 13.99 }\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're going to \u003cem\u003ereduce\u003c/em\u003e the array of products to a \u003cem\u003esingle value\u003c/em\u003e: the total price. To do this, we'll create a \u003ccode\u003egetTotalAmountForProducts()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction getTotalAmountForProducts(products) {\u003cbr\u003e  let totalPrice = 0;\u003cbr\u003e\u003cbr\u003e  for (const product of products) {\u003cbr\u003e    totalPrice += product.price;\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  return totalPrice;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econsole.log(getTotalAmountForProducts(products)); // LOG: 33.46 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe first declare a \u003ccode\u003etotalPrice\u003c/code\u003e variable and set its initial value to 0. We then iterate through the products in the basket and add the price of each to the total. When the loop has finished, we return the \u003ccode\u003etotalPrice\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThis is a very basic way to manually add together the prices of the products we want to buy, but it only works for this very specific situation. We could make our solution more abstract by writing a generalized function that accepts two additional arguments: an initial value and a callback function that implements the reduce functionality we want.\u003c/p\u003e  \u003cp\u003eTo see what this might look like, let's count the number of coupons we have lying around the house:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst couponLocations = [\u003cbr\u003e  { room: 'Living room', amount: 5 },\u003cbr\u003e  { room: 'Kitchen', amount: 2 },\u003cbr\u003e  { room: 'Bathroom', amount: 1 },\u003cbr\u003e  { room: 'Master bedroom', amount: 7 }\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003efunction ourReduce(arr, reducer, init) {\u003cbr\u003e    let accum = init;\u003cbr\u003e    for (const element of arr) {\u003cbr\u003e        accum = reducer(accum, element);\u003cbr\u003e    };\u003cbr\u003e    return accum;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction couponCounter(totalAmount, location) {\u003cbr\u003e  return totalAmount + location.amount;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econsole.log(ourReduce(couponLocations, couponCounter, 0)); // LOG: 15 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eourReduce()\u003c/code\u003e accepts three arguments: the array we want to reduce, the callback function or \u003cem\u003ereducer\u003c/em\u003e, and the initial value for our \u003cem\u003eaccumulator\u003c/em\u003e variable. It then iterates over the array, calling the reducer function each time, which returns the updated value of the accumulator. The final value of the accumulator is returned at the end.\u003c/p\u003e  \u003cp\u003eNote that \u003ccode\u003eourReduce()\u003c/code\u003e is generalized: the specifics (the callback function and initial value) have been abstracted out, making our code more flexible. If, for example, we already have three coupons in our hand, we can easily account for that without having to change any code by adjusting the initial value when we call \u003ccode\u003eourReduce()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(ourReduce(couponLocations, couponCounter, 3)); // LOG: 18 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDemonstrate using \u003ccode\u003ereduce()\u003c/code\u003e with a Primitive Return Value\u003c/h2\u003e  \u003cp\u003eWith JavaScript’s native \u003ccode\u003ereduce()\u003c/code\u003e method, we don't need to write our own version. Just like \u003ccode\u003eourReduce\u003c/code\u003e, the \u003ccode\u003ereduce()\u003c/code\u003e method is used when we want to get some information from each element in the collection and gather that information into a final summary value. Let's take the native implementation for a spin with our previous example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(couponLocations.reduce(couponCounter, 0)); // also logs 15! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnother simple numerical example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst doubledAndSummed = [1, 2, 3].reduce(function(accumulator, element){ return element * 2 + accumulator}, 0)\u003cbr\u003e// =\u0026gt; 12 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, as in the previous example, we are calling \u003ccode\u003e.reduce()\u003c/code\u003e on our input array and passing it two arguments: the callback function, and an optional start value for the accumulator (0 in this example). \u003ccode\u003e.reduce()\u003c/code\u003e executes the callback for each element in turn, passing in the current value of the accumulator and the current element each time. The callback updates the value of the accumulator in each iteration, and that updated value is then passed as the first argument to the callback in the next iteration. When there's nothing left to iterate, the final value of the accumulator (the total) is returned.\u003c/p\u003e  \u003cp\u003eThe initialization value is optional, but leaving it out might lead to a real surprise. If no initial value is supplied, the \u003cem\u003efirst element in the array\u003c/em\u003e is used as the starting value. \u003ccode\u003ereduce()\u003c/code\u003e then executes the callback function, passing this starting value and the \u003cem\u003esecond\u003c/em\u003e element of the array as the two arguments. In other words, the code inside the callback \u003cstrong\u003eis never executed\u003c/strong\u003e for the first element in the array. This can lead to unexpected results:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst doubledAndSummed = [1, 2, 3].reduce(function(accumulator, element){ return element * 2 + accumulator})\u003cbr\u003e// =\u0026gt; 11 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn some cases, it won't matter (e.g., if our reducer is simply summing the elements of the input array). However, to be safe, it is best to always pass a start value when calling \u003ccode\u003ereduce()\u003c/code\u003e. Of course, that initial value can be anything we like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst doubledAndSummedFromTen = [1, 2, 3].reduce(function(accumulator, element){ return element * 2 + accumulator}, 10)\u003cbr\u003e// =\u0026gt; 22 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDemonstrate using \u003ccode\u003ereduce()\u003c/code\u003e with an Object as the Return Value\u003c/h2\u003e  \u003cp\u003eThe output of the \u003ccode\u003ereduce()\u003c/code\u003e method does not need to be a primitive value like a \u003ccode\u003eNumber\u003c/code\u003e or \u003ccode\u003eString\u003c/code\u003e. Let's consider an example that accumulates array values into an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSay we want to create a roster of student wizards assigned to each Hogwarts house. Our start value might look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003econst hogwartsHouses = {\u003cbr\u003e  \"Slytherin\": [],\u003cbr\u003e  \"Gryffindor\": [],\u003cbr\u003e  \"Hufflepuff\": [],\u003cbr\u003e  \"Ravenclaw\": []\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eImagine we also have a \u003ccode\u003esortingHat\u003c/code\u003e object that includes an \u003ccode\u003eassign()\u003c/code\u003e method. That method takes the name of a student as its argument and returns the name of the house the student should be assigned to. We could call this method directly:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esortingHat.assign(studentName); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut that just returns the name of the assigned house for that one student; it doesn't update our \u003ccode\u003ehogwartsHouses\u003c/code\u003e object.\u003c/p\u003e  \u003cp\u003eTo do that, we can call reduce on our input array (which contains the names of all incoming students), passing a callback function and the start value of \u003ccode\u003ehogwartsHouses\u003c/code\u003e as the arguments. The callback is where we'll push each student name into the appropriate house:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eincomingStudents.reduce(function(houses, student) { houses[sortingHat.assign(student)].push(student)}, hogwartsHouses) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's break this down: \u003ccode\u003e.reduce()\u003c/code\u003e executes the callback for each student name in turn. Inside the callback, the \u003ccode\u003esortingHat.assign()\u003c/code\u003e method is called with the current student name as its argument. \u003ccode\u003eassign()\u003c/code\u003e returns the name of a Hogwarts house, which is then used as the key to access the correct array in the \u003ccode\u003ehogwartsHouses\u003c/code\u003e object and push the student's name into it. The iteration then continues to the next element in the array, passing the next student name and the updated value of \u003ccode\u003ehogwartsHouses\u003c/code\u003e as the arguments. Once \u003ccode\u003ereduce()\u003c/code\u003e has iterated through all the students in \u003ccode\u003eincomingStudents\u003c/code\u003e, it returns the final value of \u003ccode\u003ehogwartsHouses\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThen we can then access the list of students in any Hogwarts house:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ehogwartsHouses[\"Gryffindor\"] //=\u0026gt; [hermioneGranger, ronWeasley, harryPotter] \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eLab: Use \u003ccode\u003ereduce()\u003c/code\u003e to Create a Single Aggregate of All Items in a List\u003c/h2\u003e  \u003cp\u003eLet's say we are hard at work in the battery factory. We've assembled several batches of batteries today. Let's count how many assembled batteries we ended up with.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreate a new variable called \u003ccode\u003etotalBatteries\u003c/code\u003e, which holds the sum of all of the battery amounts in the \u003ccode\u003ebatteryBatches\u003c/code\u003e array. (Note that the \u003ccode\u003ebatteryBatches\u003c/code\u003e variable has been provided for you in \u003ccode\u003eindex.js\u003c/code\u003e.) Naturally, you should use \u003ccode\u003ereduce()\u003c/code\u003e for this!\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith \u003ccode\u003ereduce()\u003c/code\u003e, we are able to quickly get a single summary value from the elements in an array. \u003ccode\u003ereduce()\u003c/code\u003e — like the other iterator methods we've learned about in this section — can greatly cut down the amount of time spent recreating common functionality. It can also make our code more efficient and expressive.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\"\u003eMDN: Array.prototype.reduce()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g213eed366c3e6c2e11f8cf5727339239"},{"id":173467,"title":"forEach: The Unexpressive Iterator","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-foreach-method\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-foreach-method\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-foreach-method/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse \u003ccode\u003eforEach()\u003c/code\u003e to work with an array\u003c/li\u003e \u003cli\u003eExplain why \u003ccode\u003eforEach()\u003c/code\u003e is the iterator method we should use least\u003c/li\u003e \u003cli\u003eIdentify use cases for \u003ccode\u003eforEach()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn previous lessons, we've learned about JavaScript's built-in \u003ccode\u003eArray\u003c/code\u003e methods and how they help us save work and write more efficient, readable code. In this lesson, we'll talk about one more: \u003ccode\u003eforEach()\u003c/code\u003e. We'll also discuss why it's the one you should use least.\u003c/p\u003e  \u003ch2\u003eUse \u003ccode\u003eforEach\u003c/code\u003e to Work with an Array\u003c/h2\u003e  \u003cp\u003eIf you look at the MDN page for the \u003ccode\u003eforEach()\u003c/code\u003e method, you'll see the following description:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eThe forEach() method executes a provided function once for each array element.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eUnlike the other methods we've looked at in this section, \u003ccode\u003eforEach()\u003c/code\u003e doesn't have a built-in return value. As a result, \u003ccode\u003eforEach()\u003c/code\u003e is quite generic — the callback we pass to it can contain whatever functionality we like.\u003c/p\u003e  \u003cp\u003eTo use \u003ccode\u003eforEach()\u003c/code\u003e, we simply call it on an array and pass our callback:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eoppressedWorkers = [\u003cbr\u003e  \"Dopey\",\u003cbr\u003e  \"Sneezy\",\u003cbr\u003e  \"Happy\",\u003cbr\u003e  \"Angry\",\u003cbr\u003e  \"Doc\",\u003cbr\u003e  \"Lemonjello\",\u003cbr\u003e  \"Sleepy\"\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003eoppressedWorkers.forEach(function(oppressedWorker) {\u003cbr\u003e  console.log(`${oppressedWorker} wants to form a union!`);\u003cbr\u003e}); //=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e/* Output\u003cbr\u003eDopey wants to form a union!\u003cbr\u003eSneezy wants to form a union!\u003cbr\u003eHappy wants to form a union!\u003cbr\u003eAngry wants to form a union!\u003cbr\u003eDoc wants to form a union!\u003cbr\u003eLemonjello wants to form a union!\u003cbr\u003eSleepy wants to form a union!\u003cbr\u003e*/ \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile this flexibility may seem like a good thing at first glance, the fact that it's generic makes it the least expressive of the iterators.\u003c/p\u003e  \u003ch2\u003eExplain Why \u003ccode\u003eforEach\u003c/code\u003e is the Iterator Method We Should Use Least\u003c/h2\u003e  \u003cp\u003eBy now you recognize that \u003ccode\u003emap\u003c/code\u003e means: \"create a new \u003ccode\u003eArray\u003c/code\u003e after transforming each element.\" You recognize that \u003ccode\u003ereduce\u003c/code\u003e means: \"distill a single summary value from a set of elements.\" These methods are \u003cem\u003eexpressive\u003c/em\u003e; their presence in your code tells other programmers (and your future self) what you intended to happen.\u003c/p\u003e  \u003cp\u003eBut what does \u003ccode\u003eforEach\u003c/code\u003e mean? Programmers recognize that \u003ccode\u003emap()\u003c/code\u003e has a specific use, \u003ccode\u003ereduce()\u003c/code\u003e has a specific use, \u003ccode\u003efind()\u003c/code\u003e has a specific use. But \u003ccode\u003eforEach()\u003c/code\u003e is generic. Are we just printing things, or are we trying to distill to a value, or are we trying to produce a transformed \u003ccode\u003eArray\u003c/code\u003e?\u003c/p\u003e  \u003cp\u003eWhen we use \u003ccode\u003eforEach()\u003c/code\u003e to do \u003ccode\u003emap\u003c/code\u003e-things or \u003ccode\u003ereduce\u003c/code\u003e-things we're not \u003cem\u003edocumenting\u003c/em\u003e what our intention was with regard to the collection. This makes for code that's harder to understand and debug. Here's some code that uses \u003ccode\u003eforEach()\u003c/code\u003e instead of \u003ccode\u003ereduce()\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sumArray(numberArray) {\u003cbr\u003e  let total = 0;\u003cbr\u003e  numberArray.forEach(function(i) {\u003cbr\u003e    total = total + i;\u003cbr\u003e  });\u003cbr\u003e  return total;\u003cbr\u003e}\u003cbr\u003esumArray([1, 2, 3]); //=\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSure, it works, but it doesn't \u003cem\u003ecommunicate\u003c/em\u003e. We should always strive to have code that works \u003cstrong\u003e\u003cem\u003eand\u003c/em\u003e\u003c/strong\u003e communicates.\u003c/p\u003e  \u003ch2\u003eIdentify Use Cases for \u003ccode\u003eforEach\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe best time to use \u003ccode\u003eforEach()\u003c/code\u003e is when you need to enumerate a collection to cause some sort of \"side-effect\". A good example of this is when you want to iterate through an array to log values. \u003ccode\u003econsole.log()\u003c/code\u003e doesn't return anything back, so using something like \u003ccode\u003emap()\u003c/code\u003e here would unnecessarily create a new array. It would also mislead any developers who look at your code about what its purpose is. We're using \u003ccode\u003eforEach\u003c/code\u003e strictly to do something that is handy for us (the developer) as a \u003cem\u003eside-effect\u003c/em\u003e; in this case, printing content to the screen.\u003c/p\u003e  \u003cp\u003eThis is pretty common in debugging:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  empCollection.forEach(function(e){\u003cbr\u003e    console.log(\"DEBUG: WHAT ARE YOU?!?\" + e)\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe other time we want to use \u003ccode\u003eforEach\u003c/code\u003e is if we need to directly change (or \"mutate\") the elements we're iterating through.\u003c/p\u003e  \u003cp\u003eAs an example, consider:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction addFullNameToEmployees(empCollection){\u003cbr\u003e  empCollection.forEach(function(e){\u003cbr\u003e    e.fullName = `${e.firstName} ${e.familyName}`\u003cbr\u003e  })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eaddFullNameToEmployees([\u003cbr\u003e  {firstName: \"Byron\", familyName: \"Karbitii\"},\u003cbr\u003e  {firstName: \"Luca\", familyName: \"Tuexedensis\"}\u003cbr\u003e]) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, we're directly updating employees in the original object, rather than creating a new object with the modifications. The employee, \u003ccode\u003ee\u003c/code\u003e, is updated as a \u003cem\u003eside-effect\u003c/em\u003e of running \u003ccode\u003eforEach\u003c/code\u003e. The only clue that helps us guess what \u003ccode\u003eforEach\u003c/code\u003e is doing here is that the programmer \"wrapped\" it inside of a helpfully-named function.\u003c/p\u003e  \u003cp\u003eRecall, however, that directly mutating objects is something that should be avoided in most cases. This is another good reason to use \u003ccode\u003eforEach\u003c/code\u003e sparingly.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've introduced \u003ccode\u003eArray.prototype.forEach()\u003c/code\u003e. It is flexible and straightforward to use, which can make it an attractive option when you aren't sure which iterator is the best one for your needs. However, in the majority of cases, one of the other iterator methods will be a better choice. You should only use \u003ccode\u003eforEach()\u003c/code\u003e under the specific circumstances outlined above.\u003c/p\u003e  \u003cp\u003eAs you continue learning JavaScript, you should take advantage of the \u003cem\u003eexpressive\u003c/em\u003e iterator methods we've learned about in this section as much as possible. Under most circumstances, using \u003ccode\u003efind()\u003c/code\u003e, \u003ccode\u003efilter()\u003c/code\u003e, \u003ccode\u003emap()\u003c/code\u003e, or \u003ccode\u003ereduce()\u003c/code\u003e in place of more generic options, \u003ccode\u003eforEach\u003c/code\u003e, \u003ccode\u003efor...of\u003c/code\u003e, and \u003ccode\u003efor\u003c/code\u003e, will save you work in the long run and make your code more efficient and expressive.\u003c/p\u003e","exportId":"foreach-the-unexpressive-iterator"},{"id":179299,"title":"Arrays and Objects - What is Really Going On?","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-arrays-objects-what-is-really-going-on\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-arrays-objects-what-is-really-going-on\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-arrays-objects-what-is-really-going-on/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize Arrays are Objects\u003c/li\u003e \u003cli\u003eRecognize that many other things in JavaScript are Objects\u003c/li\u003e \u003cli\u003eTake a deeper look at Objects\u003c/li\u003e \u003cli\u003eIntroduce \u003ccode\u003ethis\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIntroduce Prototypal Inheritance\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSo far, we've seen that both Arrays and Objects can store things inside them, including \u003cem\u003eother\u003c/em\u003e Arrays and Objects. We think this is pretty cool! You can use data to represent all sorts of things using nested data structures.\u003c/p\u003e  \u003cp\u003eWe'll soon see, however, that there is more going on. In this lesson, we're going to briefly explore what's really going on with Arrays and Objects behind the scenes.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Before we dive in too deep — some of the topics we will touch on in this lesson will be covered in more depth later on in this course. Do not feel that you need to fully understand concepts like context and prototypes. As you've already proven, data structures can be useful to us, even if we haven't fully understood them.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eArrays are... Objects in JavaScript?\u003c/h2\u003e  \u003cp\u003eIf you recall from the previous lessons on functions, in JavaScript, functions are considered \u003cem\u003efirst-class\u003c/em\u003e. This means that, like data values, they can be used as arguments in other functions and assigned to variables. It also means you can store functions \u003cem\u003ein\u003c/em\u003e Arrays and Objects. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst phrases = {\u003cbr\u003e  greeting: \"Hello there!\",\u003cbr\u003e  time: () =\u0026gt; {\u003cbr\u003e    const currentTime = new Date();\u003cbr\u003e    return `The time is ${currentTime.getHours()}:${currentTime.getMinutes()}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ephrases.greeting;\u003cbr\u003e// =\u0026gt; \"Hello there!\"\u003cbr\u003ephrases.time();\u003cbr\u003e// =\u0026gt; \"The time is 16:51\" (or whatever time it is currently on a 24-hour clock) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we've stored a function in an Object, and then called that function with \u003ccode\u003ephrases.time()\u003c/code\u003e. Let's break that down — we first call the \u003ccode\u003ephrases\u003c/code\u003e object. This is followed by a dot, \u003ccode\u003e.\u003c/code\u003e, then the key \u003ccode\u003etime\u003c/code\u003e. This key points to a value — a function expression. Adding parentheses, \u003ccode\u003e()\u003c/code\u003e, executes that function expression.\u003c/p\u003e  \u003cp\u003eNow, hold on a moment — we've seen this dot syntax before, but with Arrays:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst listOfGoodDogs = [\"Peach\", \"Harpo\", \"Emma\"];\u003cbr\u003e\u003cbr\u003elistOfGoodDogs.map((dog) =\u0026gt; console.log(dog));\u003cbr\u003e// LOG: Peach\u003cbr\u003e// LOG: Harpo\u003cbr\u003e// LOG: Emma \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we've called \u003ccode\u003emap\u003c/code\u003e on our array, \u003ccode\u003elistOfGoodDogs\u003c/code\u003e, and passed in a callback function to log each element in the Array. As with \u003ccode\u003etime\u003c/code\u003e in the previous example, \u003ccode\u003emap\u003c/code\u003e is acting like an Object key pointing to a function expression.\u003c/p\u003e  \u003cp\u003eWhy does this work? Well... it is because Arrays \u003cem\u003eare\u003c/em\u003e Objects in JavaScript. Lots of things are Objects, actually. Notice in the two previous examples, we used the dot syntax for other things. In the first code snippet, we assigned a \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003ecurrentTime\u003c/code\u003e, to \u003ccode\u003enew Date()\u003c/code\u003e, then called \u003ccode\u003egetHours()\u003c/code\u003e and \u003ccode\u003egetMinutes()\u003c/code\u003e on it. In the second code snippet, we called \u003ccode\u003elog()\u003c/code\u003e as part of \u003ccode\u003econsole\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThese are all JavaScript Objects — \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArrays\u003c/a\u003e and other things like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e are Objects... even \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"\u003e\u003cem\u003eStrings\u003c/em\u003e\u003c/a\u003e are Objects, which is why we can do things like \u003ccode\u003e\"hello\".slice(1)\u003c/code\u003e. Functions... are also Objects in JavaScript if things weren't confusing enough already.\u003c/p\u003e  \u003cp\u003eAs it turns out, Objects are a bit more complex than we originally presented!\u003c/p\u003e  \u003ch2\u003eA Deeper Look at Objects\u003c/h2\u003e  \u003cp\u003eBefore we continue, we want to be clear in the language we use going forward — so far we've talked about key/value pairs in general, but they're actually referred to as different things depending on what they store. Key/value pairs like \u003ccode\u003egreeting\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e are also referred to as \u003cem\u003eproperties\u003c/em\u003e of an Object. Properties that store a function expression as a value, like \u003ccode\u003etime\u003c/code\u003e, are referred to as \u003cem\u003emethods\u003c/em\u003e of the object. The \u003ccode\u003ephrases\u003c/code\u003e object we've defined, then, has two properties, one of which is a method.\u003c/p\u003e  \u003cp\u003eWe've gotten used to creating objects using the object literal notation, using curly braces to wrap comma separated properties:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst phrases = {\u003cbr\u003e  greeting: \"Hello there!\",\u003cbr\u003e  time: () =\u0026gt; {\u003cbr\u003e    const currentTime = new Date();\u003cbr\u003e    return `The time is ${currentTime.getHours()}:${currentTime.getMinutes()}`;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis way of creating Objects is often preferred due to its simplicity, but there are other ways we can create Objects. Say, for example, that we want to be able to create multiple Objects that all share some properties. Rather than type out all the properties each time, we can use a \u003cem\u003eConstructor function\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eCreating an Object Using the Constructor Function\u003c/h3\u003e  \u003cp\u003eWe mentioned earlier that functions are Objects. The easiest way to demonstrate this is to create an object using a function. We can recreate our \u003ccode\u003ephrases\u003c/code\u003e object using what is called a 'Constructor' function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction PhraseObjectConstructor(name) {\u003cbr\u003e  this.greeting = `Hello there ${name}!`;\u003cbr\u003e  this.time = () =\u0026gt; {\u003cbr\u003e    const currentTime = new Date();\u003cbr\u003e    return `The time is ${currentTime.getHours()}:${currentTime.getMinutes()}`;\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst phrases = new PhraseObjectConstructor(\"Harold\");\u003cbr\u003e\u003cbr\u003e\u003cbr\u003ephrases.greeting;\u003cbr\u003e// =\u0026gt; \"Hello there Harold!\"\u003cbr\u003ephrases.time();\u003cbr\u003e// =\u0026gt; \"The time is 17:30\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can see here that the code above results in a \u003ccode\u003ephrases\u003c/code\u003e object that behaves like the previous examples, with \u003ccode\u003egreeting\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e properties. You probably notice some things that are unfamiliar, though.\u003c/p\u003e  \u003cp\u003eNote that instead of using key/value pairs to set properties, we've used something else — \u003ccode\u003ethis\u003c/code\u003e followed by the dot notation we've seen. We will go into greater depth on \u003ccode\u003ethis\u003c/code\u003e and context later. For now, take note that in our example, \u003ccode\u003ethis\u003c/code\u003e seems to be written like it is an Object itself; the properties we're assigning, \u003ccode\u003egreeting\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e, are part of \u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAnother noticeable difference is that \u003ccode\u003ePhraseObjectConstructor()\u003c/code\u003e does not \u003cem\u003ereturn\u003c/em\u003e anything explicitly (the only \u003ccode\u003ereturn\u003c/code\u003e is inside the \u003ccode\u003etime\u003c/code\u003e method). However, when we run \u003ccode\u003enew PhraseObjectConstructor(\"Harold\")\u003c/code\u003e, we do assign \u003cem\u003esomething\u003c/em\u003e to the \u003ccode\u003ephrases\u003c/code\u003e variable — \u003cem\u003ean Object\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eThe essential bit in this puzzle is \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e\u003c/a\u003e. Adding \u003ccode\u003enew\u003c/code\u003e before \u003ccode\u003ePhraseObjectConstructor(\"Harold\")\u003c/code\u003e tells JavaScript to do a couple of things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eIt creates a basic Object (which gets assigned to the \u003ccode\u003ephrases\u003c/code\u003e variable).\u003c/li\u003e \u003cli\u003eIt binds \u003ccode\u003ethis\u003c/code\u003e to the newly created Object. The properties defined in the function now belong to \u003cem\u003ethis\u003c/em\u003e new Object.\u003c/li\u003e \u003cli\u003eIt adds a new property, \u003ccode\u003e__proto__\u003c/code\u003e to the Object.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe first action is something we're familiar with, less so the other two. We'll discuss both then check out an example of why this behavior is useful.\u003c/p\u003e  \u003ch2\u003eA Brief Intro to \u003ccode\u003ethis\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003e\u003ccode\u003ethis\u003c/code\u003e\u003c/a\u003e is a reserved word in JavaScript that returns the \u003cem\u003econtext\u003c/em\u003e it is in. The value of \u003ccode\u003ethis\u003c/code\u003e depends on where and how it is used. Consider the following plain object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst example = {\u003cbr\u003e  name: \"Henry\",\u003cbr\u003e  test: function() {\u003cbr\u003e    return this;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexample.test();\u003cbr\u003e// =\u0026gt; {name: \"Henry\", test: ƒ} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you paste the above into your browser console and run \u003ccode\u003eexample.test()\u003c/code\u003e, you will get the \u003ccode\u003eexample\u003c/code\u003e object in return!\u003c/p\u003e  \u003cp\u003eYou may notice we're not using an arrow function here. If you replace \u003ccode\u003etest\u003c/code\u003e with an arrow function, you'll get a different value for \u003ccode\u003ethis\u003c/code\u003e. The reason is beyond the scope of this lesson and is related to how context is determined in arrow functions.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ethis\u003c/code\u003e can be very useful since we can use it to reference objects from inside themselves.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst example = {\u003cbr\u003e  name: \"Henry\",\u003cbr\u003e  sayName: function() {\u003cbr\u003e    return `My name is ${this.name}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexample.sayName();\u003cbr\u003e// =\u0026gt; \"My name is Henry\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGoing back to \u003ccode\u003enew\u003c/code\u003e, when we call \u003ccode\u003enew PhraseObjectConstructor(\"Harold\")\u003c/code\u003e, \u003ccode\u003ethis\u003c/code\u003e gets bound to the newly created object, turning \u003ccode\u003ethis.greeting\u003c/code\u003e and \u003ccode\u003ethis.time\u003c/code\u003e into properties for that object.\u003c/p\u003e  \u003ch2\u003eA Brief Intro to Prototypal Inheritance\u003c/h2\u003e  \u003cp\u003eWe mentioned that when using \u003ccode\u003enew\u003c/code\u003e, a property \u003ccode\u003e__proto__\u003c/code\u003e is added to the newly created object. \u003ccode\u003e__proto__\u003c/code\u003e refers to an Object's \u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\"\u003eprototype\u003c/a\u003e. Every JavaScript Object has a prototype property, though it isn't typically displayed when logging.\u003c/p\u003e  \u003cp\u003eThe prototype contains \u003cem\u003einherited\u003c/em\u003e properties, often methods. When we use a constructor function to create objects, the created object will inherit prototype properties from the constructor function (remember that it too is an Object). The constructor function has a prototype that \u003cem\u003eit\u003c/em\u003e inherited, as well. In this way, some shared properties are able to be 'passed down' from Object to Object. This is known as a prototype \u003cem\u003echain\u003c/em\u003e. Properties of an Object that are in the prototype can be accessed using the \u003ccode\u003e__proto__\u003c/code\u003e property of an individual object.\u003c/p\u003e  \u003cp\u003eRemember when we mentioned that Arrays are a \u003cem\u003etype\u003c/em\u003e of Object and that there are many Objects in JavaScript? Once we create an array, we can access methods on that array to do things.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst exampleArray = [1, 2, 3];\u003cbr\u003e\u003cbr\u003eexampleArray.pop();\u003cbr\u003e// =\u0026gt; 3\u003cbr\u003eexampleArray;\u003cbr\u003e// =\u0026gt; [1, 2] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMethods like \u003ccode\u003epop()\u003c/code\u003e (and \u003ccode\u003epush()\u003c/code\u003e, \u003ccode\u003eshift()\u003c/code\u003e, \u003ccode\u003eunshift()\u003c/code\u003e, etc...) are available on every Array we create because \u003cstrong\u003ethese methods exist in the prototype shared by all Arrays\u003c/strong\u003e. We can actually see them if we use \u003ccode\u003eexampleArray.__proto__\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexampleArray.__proto__\u003cbr\u003e// =\u0026gt; {\u003cbr\u003e// concat: ƒ,\u003cbr\u003e// constructor: ƒ,\u003cbr\u003e// ...\u003cbr\u003e// ...\u003cbr\u003e// pop: ƒ,\u003cbr\u003e// push: ƒ,\u003cbr\u003e// ...\u003cbr\u003e// ...\u003cbr\u003e// } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we call \u003ccode\u003enew PhraseObjectConstructor()\u003c/code\u003e, a \u003ccode\u003ePhraseObjectConstructor\u003c/code\u003e prototype is passed to every object created. This prototype contains its own \u003ccode\u003e__proto__\u003c/code\u003e property, which points to the basic Object prototype that the \u003ccode\u003ePhraseObjectConstructor\u003c/code\u003e function inherited from.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject -\u0026gt; PhraseObjectConstructor -\u0026gt; individual object \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Remember, do not be discouraged if you find these concepts confusing. They are most definitely confusing and will remain that way for a bit, but that is okay. As you progress through the JavaScript content, you'll see more examples of \u003ccode\u003ethis\u003c/code\u003e and prototypes.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion — The Power of Objects\u003c/h2\u003e  \u003cp\u003eLet's review what we've found out so far about Objects.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe know they can contain properties\u003c/li\u003e \u003cli\u003eWe know \u003ccode\u003ethis\u003c/code\u003e can be used in an object to reference itself\u003c/li\u003e \u003cli\u003eWe know Objects inherit shared properties from other Objects via the prototype chain\u003c/li\u003e \u003cli\u003eWe know many things in JavaScript are actually Objects\u003c/li\u003e \u003cli\u003eThere are multiple ways to create Objects\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou may occasionally find programmers debating online as to whether or not JavaScript is an object-oriented language. Some resources will refer to JavaScript as having 'object-oriented capabilities' but not as 'object-oriented.' This is technically true, as JavaScript doesn't strictly adhere to some specific design principles related to object-orientation. However, we'll soon see that you can absolutely use JavaScript as you would use other object-oriented languages.\u003c/p\u003e  \u003cp\u003eOne core concept of object-orientation is the ability to create object 'classes.' A class can be though of as a template; a blueprint we can use to create something from. In object-orientation, the things we create are typically referred to as 'instances.' Instances are individual copies of a class that can each carry unique information, but contain shared properties that were defined on the class.\u003c/p\u003e  \u003cp\u003eDoes this seem familiar? Sounds very similar to what we've discussed regarding constructor functions and prototypal inheritance. When we create a constructor function, we are essentially creating a template that can be used to generate new, individual objects.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction PhraseObjectConstructor(name) {\u003cbr\u003e  this.greeting = `Hello there ${name}!`;\u003cbr\u003e  this.time = () =\u0026gt; {\u003cbr\u003e    const currentTime = new Date();\u003cbr\u003e    return `The time is ${currentTime.getHours()}:${currentTime.getMinutes()}`;\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst phrases1 = new PhraseObjectConstructor(\"Harold\");\u003cbr\u003econst phrases2 = new PhraseObjectConstructor(\"Hank\");\u003cbr\u003e\u003cbr\u003ephrases1.greeting;\u003cbr\u003e// =\u0026gt; \"Hello there Harold!\"\u003cbr\u003ephrases2.greeting;\u003cbr\u003e// =\u0026gt; \"Hello there Hank!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThese objects can store unique information in their properties, but share a similar structure and have both inherited the constructor function's prototype.\u003c/p\u003e  \u003cp\u003eWith this knowledge, we encourage you take a look back at some of the JavaScript you've used so far. Did you know you can create new Arrays with \u003ccode\u003enew Array()\u003c/code\u003e? Can you guess what is happening when this command is run? What about other examples we've seen? \u003ccode\u003enew Date()\u003c/code\u003e is an interesting example — it \u003cem\u003ereturns a string\u003c/em\u003e when used, but it \u003cstrong\u003ealso\u003c/strong\u003e can be used to create a \u003ccode\u003eDate\u003c/code\u003e object with unique properties like \u003ccode\u003egetHours\u003c/code\u003e and \u003ccode\u003egetMinutes\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThings may still seem mysterious, but keep these ideas in mind as you move through the remaining content. You'll see these concepts appear again, but they will hopefully not be so unfamiliar!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\"\u003eObject Prototypes\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003e\u003ccode\u003ethis\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"arrays-and-objects-what-is-really-going-on"}]},{"id":19313,"name":"JavaScript Advanced Syntax","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g880525e2d0e56054f7baa0793b586f84","items":[]},{"id":18924,"name":"Introducing Flatiron's Three Pillars of JavaScript","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ge719d4e5db512a3b06226d13e2c14ff2","items":[{"id":173469,"title":"Defining Front-End Web Programming","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-defining-frontend-web-programming\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-defining-frontend-web-programming\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-defining-frontend-web-programming/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine web programming\u003c/li\u003e \u003cli\u003eContrast web pages versus web applications\u003c/li\u003e \u003cli\u003eIdentify a reference example: \"Liking on social media\"\u003c/li\u003e \u003cli\u003eIdentify the \"Three Pillars of Web Programming\"\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe phrase \"Front-End Web Programming\" is used in different ways by different people. In this lesson, we're going to choose a definition of \"web programming\" and show an example that demonstrates Flatiron's \"three pillars\" of web programming. We will explore each of those pillars in detail in upcoming lessons.\u003c/p\u003e  \u003ch2\u003eWhat Exactly Does \"Web Programming\" Mean Anyway?\u003c/h2\u003e  \u003cp\u003eWeb programming, at its heart, is:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreating documents with HTML and styling/positioning the documents' content with CSS\u003c/li\u003e \u003cli\u003eUsing JavaScript to provide interactivity\u003c/li\u003e \u003cli\u003eUsing JavaScript to notify remote servers\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eWeb Page vs. Web Application\u003c/h2\u003e  \u003cp\u003eWhen a web page has a lot of JavaScript code, the page feels closer to a computer application, so some people may call it a \"\u003cstrong\u003eweb application\u003c/strong\u003e.\"  However, it's worth noting that there is \u003cem\u003e\u003cstrong\u003eno clear distinction\u003c/strong\u003e\u003c/em\u003e between a  \"web page\" and a \"web application.\" For instance, there's no rule like \"When  there are three or more actions it's a web application!\" Different people draw the boundary differently. More or less, we call a web page an \"application\" when it feels \"rich.\"\u003c/p\u003e  \u003ch2\u003eIdentify a Reference Example: Liking on Social Media\u003c/h2\u003e  \u003cp\u003eAs we move through the rest of this material, we're going to use \u003cem\u003eone, tiny\u003c/em\u003e interaction as our shared or \"reference\" example.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eWeb Programming Example\u003c/strong\u003e: \"Favoriting\" a social media post.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eRegardless of the social media site (Instagram, Pinterest, Facebook, LinkedIn, Twitter), the interaction goes something like this:\u003c/p\u003e  \u003cp\u003eStep 1: The site renders some HTML content that is styled using CSS\u003c/p\u003e  \u003cp\u003eStep 2: You see the content and decide to show your approval of it\u003c/p\u003e  \u003cp\u003eStep 3: You \u003cem\u003eclick\u003c/em\u003e some visual element meant to show approval (heart,    thumbs-up, +1, etc.). For example:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/defining-fewp/Image_30_SocMediaCropped.png\" alt=\"heart\"\u003e\u003c/p\u003e  \u003cp\u003eStep 4: The visual element \u003cem\u003eupdates\u003c/em\u003e (animates, goes from empty to full, jiggles,    etc) like:  \u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/defining-fewp/Image_30_SocMediaCropped1.png\" alt=\"full heart\"\u003e\u003c/p\u003e  \u003cp\u003eStep 5: Behind the scenes, the application \u003cem\u003etells the provider\u003c/em\u003e that this    post has gained your approval so that the central provider can store    this information and use it later (for example, to notify the post     author that you liked their post).\u003c/p\u003e  \u003cp\u003eIf all goes as it should, the entire interaction only takes a second or two. But even this small interaction demonstrates all the concepts of front-end web programming.\u003c/p\u003e  \u003ch2\u003eFlatiron's \"Three Pillars of Web Programming\"\u003c/h2\u003e  \u003cp\u003eTo help us learn web programming in three distinct phases, this curriculum is broken down into three essential \"pillars\":\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/defining-fewp/Image_31_ThreePillarsConcept.png\" alt=\"three pillars\"\u003e\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cstrong\u003eRecognize Events\u003c/strong\u003e\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eManipulate the DOM\u003c/strong\u003e\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eCommunicate with the Server\u003c/strong\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eLet's take another look at steps 3 through 5 of our Favoriting a Social Media Post example. Note that we \u003cem\u003eitalicized\u003c/em\u003e a verb in each step. Those words exemplify the activity of one of the \"pillars\" we must learn in order to make web applications.\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eStep 3 showed \u003cstrong\u003eRecognizing JS events\u003c/strong\u003e: Your \u003cem\u003eclick\u003c/em\u003e action on the empty heart tells JavaScript to do work\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eStep 4 showed \u003cstrong\u003eManipulating the DOM\u003c/strong\u003e: the work JavaScript was told to do was to \u003cem\u003eupdate\u003c/em\u003e the screen to make the heart \"look clicked\"\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eStep 5 showed \u003cstrong\u003eCommunicating with the server\u003c/strong\u003e: the work JavaScript was told to do was to \u003cem\u003etell the social media company\u003c/em\u003e that you approved of this content\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTHINKING ABOUT LEARNING:\u003c/strong\u003e These \"pillars\" are not something professional developers outside Flatiron School recognize. You won't go into a tech interview and be asked: \"Name the three pillars of web programming.\" These abstractions are a way to help learners (you!) recognize how what you're learning fits into three major activity areas. That said, if an interviewer asked you how to debug a web program and you said your strategy would be based on ensuring three \"critical areas\" were working, we think your interview answer would be off to a good start!\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eNow you know what's going on when you click that heart! The next lessons will focus on explaining each of these \"pillars\" in more detail. After you've worked your way through them, your new \"web programmer\" eyes will have you looking at your favorite sites very differently.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWeb Programming consists of creating documents with HTML, styling/positioning the documents' content with CSS, and using JavaScript to respond to events. We can break down the JavaScript part of web programming into three \"pillars\": recognizing events, updating the DOM, and informing the server. Now that we've seen how these pillars are connected in the abstract, we are ready to dive into seeing how they work together in detail.\u003c/p\u003e","exportId":"defining-front-end-web-programming"},{"id":173470,"title":"Stitching Together the Three Pillars","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-stitching-together-the-three-pillars\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-stitching-together-the-three-pillars\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-stitching-together-the-three-pillars/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the three essential pillars of front-end web programming\u003c/li\u003e \u003cli\u003eCause a change to given code so that DOM updating effect is seen\u003c/li\u003e \u003cli\u003eCause a change to given code so that server-side behavior is stubbed in\u003c/li\u003e \u003cli\u003eCause a change to given code so that event listening has an effect\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eKnowing what web programming is and how its elements work together conceptually is an essential first step, but in order to help orient our upcoming lessons, let's see it in action. In this lesson we've provided you a simple social media application called \"Simple Liker.\" You'll see several posts which can be \"liked\" by clicking on the heart...well, they \u003cem\u003ecould\u003c/em\u003e be if the critical code hadn't been commented out. This lesson will guide you in uncommenting the critical code so that you restore the \"like\" functionality. In subsequent lessons, you'll learn the skills needed to create the pieces that you'll stitch together in this lesson.\u003c/p\u003e  \u003cp\u003eAlthough this code-along is structured as a lab, you don't need to do anything to get the tests passing. In fact, if you run the one test, you should see that it's already passing. Instead, you just need to follow along with the instructions and pay attention to how the different parts of the code are working together to create the desired functionality.\u003c/p\u003e  \u003ch3\u003eIdentify the Three Essential Pillars of Front-End Web Programming\u003c/h3\u003e  \u003cp\u003eWe've introduced our three essential pillars of front-end web programming:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eManipulating the Document Object Model (DOM)\u003c/li\u003e \u003cli\u003eRecognizing JS events\u003c/li\u003e \u003cli\u003eCommunicating with the server\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWe also described the interaction that we want to make: \"favoriting\" an item on social media to turn an empty heart to red. Now, let's pull it all together and see how it works by walking through some code.\u003c/p\u003e  \u003ch3\u003eCause a Change to Given Code So That DOM Updating Effect Is Seen\u003c/h3\u003e  \u003cp\u003eMeet our app, Simple Liker! It demos the favoriting action we've talked about and alerts you to what is happening at each step of the process. When all is working as it should, the action looks like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e  \u003cp\u003eGo ahead and open up \u003ccode\u003eindex.html\u003c/code\u003e in your browser. To do this, first go to your terminal and make sure you're in the directory where this README lives. If you're on a Mac, run \u003ccode\u003eopen index.html\u003c/code\u003e and if you're using Windows, run \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e. If that doesn't work, you can open the file directly from Chrome. Choose \u003ccode\u003eOpen file...\u003c/code\u003e from the \u003ccode\u003eFile\u003c/code\u003e menu, navigate to the directory where this README is located, and open the file.\u003c/p\u003e  \u003cp\u003eIf you try clicking one of the \"Like\" buttons on the page, your experience will look something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-01.gif\" alt=\"non-working example of favoriting a post\"\u003e\u003c/p\u003e  \u003cp\u003e... which is, nothing happens. That's because we haven't switched on the working code yet. We're going to go through, step by step, find the code that makes each step work, and demo it to see how it looks in the browser.\u003c/p\u003e  \u003cp\u003eOpen up your \u003ccode\u003edemo.js\u003c/code\u003e file and take a look at everything there. Find the comments that begin with \"Step 1.\" Follow the instructions there to un-comment the code that locates the page element we want — in this case, the heart.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/stitching-together-the-three-pillars/step1.gif\" alt=\"demonstration of un-commenting step one\"\u003e\u003c/p\u003e  \u003cp\u003eOnce you uncomment the line of code and refresh the page, you can use the console to verify that the articleHearts variable contains a nodeList with five elements.\u003c/p\u003e  \u003ch3\u003eCause a Change to Given Code So That Server-Side Behavior Is Stubbed in\u003c/h3\u003e  \u003cp\u003eNext, in your \u003ccode\u003edemo.js\u003c/code\u003e file, find the comments describing Step 2, which sets up the mock server communication (our third pillar):\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/stitching-together-the-three-pillars/step2.gif\" alt=\"demonstration of un-commenting step two\"\u003e\u003c/p\u003e  \u003cp\u003eOnce you've uncommented out the code and refreshed the page, try clicking one of the \"Like\" buttons again. You'll see that it's still not working. That's because we've uncommented the code that mocks our communication with the server, but we haven't yet told JavaScript to listen for the \"click\" event.\u003c/p\u003e  \u003ch3\u003eCause a Change to Given Code So That Event Listening Has an Effect\u003c/h3\u003e  \u003cp\u003eFind Step 3 in the commented code. It's time to bring in the second pillar, events:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/stitching-together-the-three-pillars/step3.gif\" alt=\"demonstration of un-commenting step three\"\u003e\u003c/p\u003e  \u003cp\u003eWe've activated all the parts of our code that stitch together the three pillars of front-end web programming. Let's go back to your browser and see what Simple Liker looks like in action. You should now be able to like and unlike each post.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe're starting to see how the pieces work together now! Which means we're ready to dive into the individual pillars and learn more about how each one functions. We'll start by reviewing how to manipulate the DOM.\u003c/p\u003e","exportId":"gb185ec7cb1f375b36ccf6feb29a8bf3c"}]},{"id":18925,"name":"JS and the DOM","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g41b4f76180ace9ca8eb6cc46ac4d0397","items":[{"id":173471,"title":"Review: Introduction to the DOM","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the Document Object Model (DOM)\u003c/li\u003e \u003cli\u003eExplain how the DOM is created\u003c/li\u003e \u003cli\u003eIdentify the DOM as accessed by JavaScript objects\u003c/li\u003e \u003cli\u003eIntroduce the Console and Chrome DevTools\u003c/li\u003e \u003cli\u003eLearn how to open HTML files in the browser\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe have learned how to write HTML and style it with CSS. We have also built our JavaScript programming skills. With this knowledge, we're now ready to learn \u003cstrong\u003eDocument_Object Model (DOM) programming\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eDOM programming consists of using JavaScript to:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAsk the DOM to find or select an HTML element or elements in the rendered page\u003c/li\u003e \u003cli\u003eRemove and/or insert one or more elements\u003c/li\u003e \u003cli\u003eAdjust a property of selected element(s)\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn other words, we can use DOM programming to create and modify content that users see in their browsers and add interactivity to our web pages.\u003c/p\u003e  \u003ch2\u003eIdentify the Document Object Model\u003c/h2\u003e  \u003cp\u003eLet's start with a biology metaphor. Your DNA represents a code-based version of \u003cem\u003eyou\u003c/em\u003e. The DOM represents a code-based version of \u003cem\u003ea web page\u003c/em\u003e. If something edits your DNA, changes will be made in your body (perhaps giving you mutant powers). Similarly, when you change something in the DOM, you change what's displayed in the browser.\u003c/p\u003e  \u003cp\u003eBut what exactly \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e the DOM? You can think of it as a \"middle layer\" between the user and the underlying HTML, CSS, and JavaScript that makes up the page. What the user is actually seeing on the page is the DOM. When the page initially loads, the DOM represents the underlying HTML, CSS and JavaScript. When we use JavaScript and DOM programming to modify the DOM and change what the user sees, the underlying code is not modified: if we refresh the page, it goes back to its original state.\u003c/p\u003e  \u003ch3\u003eExplain How the DOM Is Created\u003c/h3\u003e  \u003cp\u003eThe DOM is created when the page loads from the HTML/CSS/JavaScript that the web server provides to the browser. Let's examine this process step-by-step:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: To ensure that instructions and screenshots match up with your experience, be sure to use the \u003ca href=\"https://www.google.com/chrome/browser/desktop/index.html\"\u003eGoogle Chrome\u003c/a\u003e browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003col\u003e \u003cli\u003eIn Google Chrome, open a tab and navigate to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e.\u003c/li\u003e \u003cli\u003eTo see the HTML of this page, add \u003ccode\u003eview-source:\u003c/code\u003e to the front of the URL in the URL bar. Using the \u003ccode\u003eview-source\u003c/code\u003e URL prefix will display all the page's source HTML. It will look something like this: \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-the-dom/html-source.png\" alt=\"html-source\"\u003e\n\u003c/li\u003e \u003cli\u003eThe browser reads this HTML, along with CSS and JavaScript defined in \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tags, to create the DOM inside the browser. At this point, nothing is displayed on the screen. This time when nothing is displayed is very brief so our human eyes never really catch it.\u003c/li\u003e \u003cli\u003eThe browser then uses the DOM object to create the rendered page. While we often learn that browsers \"display HTML,\" that's not exactly accurate. Browsers use the HTML to create a \"middleman\" that they, in turn, use to display the structured and styled content.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eIdentify the DOM as Accessed by JavaScript Objects\u003c/h3\u003e  \u003cp\u003eWe can access the DOM, using JavaScript and DOM programming, through two \u003cem\u003evariables\u003c/em\u003e: \u003ccode\u003ewindow\u003c/code\u003e and \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003ewindow\u003c/code\u003e variable points to an \u003cem\u003eobject\u003c/em\u003e that represents Chrome's information about the browser, well, \"window.\" It has many functions, but the main one is \"it's a place where everything is.\" Not to be Zen here, but a browser without a \u003ccode\u003ewindow\u003c/code\u003e is like the universe before the Big Bang; there's just... \u003cem\u003enothing\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eLike all objects, the \u003ccode\u003ewindow\u003c/code\u003e has properties and methods. For example, we can access operating system browser information like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewindow.innerHeight;\u003cbr\u003e// returns the inner height of the browser window. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFor the most part, we won't interact with \u003ccode\u003ewindow\u003c/code\u003e: we don't want to mess with the container of everything or with operating system stuff. We want, rather, to change content. To do that, we'll focus on an object called \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e has \u003cem\u003eproperties\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.URL; //=\u0026gt; https://en.wikipedia.org/wiki/Ada_Lovelace \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e also has \u003cem\u003emethods\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.querySelector(\"h1\"); //=\u0026gt; Returns the element on the page with an id attribute equal to \"firstHeading\"  \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003emethods\u003c/em\u003e and \u003cem\u003eproperties\u003c/em\u003e that the DOM provides via its objects is called the DOM's \"Application Programming Interface,\" or \"API.\" It's just a programming word that you're likely to see online. But it just means \"the things that these objects know how to do.\"\u003c/p\u003e  \u003ch2\u003eThe Browser Console and Chrome Developer Tools\u003c/h2\u003e  \u003cp\u003eEvery major browser comes with a built-in set of developer tools that you can use to inspect, modify, and debug the content of a web page. To \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/console/#open_as_panel\"\u003eopen the dev tools in Chrome\u003c/a\u003e, press \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e (Windows / Linux) or \u003ccode\u003eCmd+Opt+J\u003c/code\u003e (Mac). Chrome ships with a whole suite of useful developer tools, but the only one we care about for now is the JavaScript console.\u003c/p\u003e  \u003cp\u003eThe console is an environment in the browser where we can type and run JavaScript code in the context of the current browser window. The console is \u003cem\u003esandboxed\u003c/em\u003e, meaning the only resources it has access to are those loaded on the current page. Once we start declaring variables and functions in separate JavaScript files, we'll be able to access and play around with them in the console. The console is the single best tool for debugging JavaScript in the browser, so start familiarizing yourself with it now.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e / \u003ccode\u003eCmd+Opt+J\u003c/code\u003e command should open up straight into the console. If for whatever reason, it doesn't, you can always click on \u003ccode\u003eConsole\u003c/code\u003e in the dropdown (when the DevTools are collapsed) or in the list of tabs:\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/opening_the_console.gif\" alt=\"Opening the console\"\u003e \u003c/p\u003e  \u003cp\u003eIf at any point the console becomes cluttered with errors, warnings, or anything else, click the \u003ccode\u003eClear console\u003c/code\u003e button:\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/clearing_the_console.gif\" alt=\"Clearing the console\"\u003e \u003c/p\u003e  \u003cp\u003eOkay, okay, enough background and setup. Let's write some code!\u003c/p\u003e  \u003ch3\u003eCoding in the Console\u003c/h3\u003e  \u003cp\u003eYou can write and test out JavaScript code in the console. We'll start off with some simple math. In the console, type \u003ccode\u003e1 + 1\u003c/code\u003e and press enter. You should see the number \u003ccode\u003e2\u003c/code\u003e appear.\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/math_in_console.gif\" alt=\"Math in the console\"\u003e \u003c/p\u003e  \u003cp\u003eTry out some other mathematical expressions and see what they return.\u003c/p\u003e  \u003cp\u003eNext up, let's write some text. To make sure the JavaScript engine knows that we're trying to write some literal text, we need to wrap it in quotation marks, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"This is some literal text in JavaScript!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGo ahead and type that classic phrase, \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e, into the console and press enter. It returned \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e right back to us. Try typing some more literal text into the console, such as your name. Don't forget the quotation marks!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/text_in_console_300.gif\" alt=\"Text in the console\"\u003e\u003c/p\u003e  \u003cp\u003eWe can go far beyond simple literal expressions: we can create variables, loops, or if statements in the console. We can even define and run functions!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It's impossible to overstate how important practice is when you're learning a new programming language. As you continue moving through the JavaScript curriculum, you should almost always have a browser console open. Code along with every example. Get used to the syntax and familiarize yourself with the errors that arise when you mistype something. Clear the console or simply refresh the page whenever you need a clean slate. Code, code, code, \u003cstrong\u003ecode\u003c/strong\u003e, \u003cstrong\u003e\u003cem\u003ecode\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eOpening Files in the Browser\u003c/h2\u003e  \u003cp\u003eIn this section, you will begin working with HTML files (most often, \u003ccode\u003eindex.html\u003c/code\u003e). In order to view the results of the coding you'll be doing, you'll need to open the file in the browser. Instructions for each programming environment are as follows:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eLocal environment on Mac\u003c/strong\u003e: Run \u003ccode\u003eopen index.html\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eLocal environment using WSL/Ubuntu\u003c/strong\u003e: Run \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eAWS IDE\u003c/strong\u003e: right-click on the \u003ccode\u003eindex.html\u003c/code\u003e file in the file tree and select \"Preview.\" There will be a button in the upper right corner that will \"pop\" the page into a new tab in the browser.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eKeep these instructions handy — you will be doing this often.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In order for these instructions to work, you will need to have Google Chrome set as your default browser. You can find \u003ca href=\"https://support.google.com/chrome/answer/95417?hl=en\u0026amp;co=GENIE.Platform=Desktop\"\u003einstructions for Mac and Windows here\u003c/a\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we learned about the DOM, which is a \"middle layer\" that presents the HTML, CSS and JavaScript loaded by the browser when we visit a page. We normally interact with it through the \u003ccode\u003edocument\u003c/code\u003e object. Because it is the \"source of truth\" for what browsers display, changes to the DOM create changes in the browser screen. We also learned how to access the Chrome Developer Tools and use the Console to try out code as we're building our programs.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://css-tricks.com/dom/\"\u003eCSS Tricks - What is the DOM?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\"\u003eMDN - The DOM\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"review-introduction-to-the-dom"},{"id":173472,"title":"Review: DOM Editing","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-editing-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify that DOM nodes are written as HTML\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've started looking at the DOM and how it's created. Now it's time to see its structure.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eIdentify That DOM Nodes Are Written As HTML\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we learned that, when we load a web page in a browser, the content we see in the DOM is a representation of the underlying HTML, CSS and JavaScript. If we were to view the DOM in Chrome Dev Tools (we'll learn how to do that shortly), we would see HTML that is a clone of the HTML found in the source HTML file. As we learned earlier in the course, that HTML consists of \u003cem\u003eelements\u003c/em\u003e that in turn consist of HTML \u003cem\u003etags\u003c/em\u003e and their content.\u003c/p\u003e  \u003cp\u003eWhen we're working in the DOM, the structure is the same. We can access objects in the DOM (called \u003cem\u003enodes\u003c/em\u003e) that consist of tags, just like the HTML elements that make up the base HTML. Nodes and elements are not the same thing — all elements in the DOM are nodes but not all nodes are HTML elements. However, when we're working in the DOM, the nodes we access and modify are virtually always HTML elements.\u003c/p\u003e  \u003ch3\u003eThe Structure of DOM Content\u003c/h3\u003e  \u003cp\u003eWe'll start by going over how content in the DOM is structured using nodes. The information below should be familiar from what you've learned about HTML elements.\u003c/p\u003e  \u003cp\u003eDOM nodes most often have a starting tag and an ending tag. Examples include a paragraph:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;I am a paragraph.\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor a \u003ccode\u003emain\u003c/code\u003e section:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;main\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBecause they have both starting and ending tags, we can nest other nodes inside them. The inner node is called a child node, and the outer node is called a parent node. To nest items, we simply add the child node and its content between its parent's starting and ending tags:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;main\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;I am a nested paragraph, inside the main element, inside the body!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSome nodes only have a starting tag. Those are called \u003cem\u003eself-closing elements\u003c/em\u003e or \u003cem\u003evoid elements\u003c/em\u003e. Void elements do not have any content nested inside of them and cannot be parent nodes.\u003c/p\u003e  \u003cp\u003eAn example of a self-closing tag is an image:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\" alt=\"A policeman\" /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn self-closing tags, the trailing \u003ccode\u003e/\u003c/code\u003e is optional. This is valid too:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\" alt=\"A policeman\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEnough review, let's write some HTML!\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eStart by running the tests and taking a look through the errors. You'll see that the tests are looking for certain content to be present in the HTML file.\u003c/p\u003e  \u003cp\u003eNext, open the \u003ccode\u003eindex.html\u003c/code\u003e file in the browser using the instructions in the previous lesson for your development environment.\u003c/p\u003e  \u003cp\u003eJust to speed things up a bit, paste the following code into \u003ccode\u003eindex.html\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;meta charset=\"UTF-8\"\u0026gt;\u003cbr\u003e    \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u0026gt;\u003cbr\u003e    \u0026lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Introduction to the DOM Lab\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;!--All our work for this lesson will go here--\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRefresh the browser page to see the changes.\u003c/p\u003e  \u003cp\u003eOpen the Google Developer Tools by clicking on the \"View\" menu and selecting Developer -\u0026gt; Developer Tools. The Elements tab should be selected but, if it isn't, click on it. Here we have the DOM representation of the HTML source loaded by the browser. You should see the \u003ccode\u003ehead\u003c/code\u003e and \u003ccode\u003ebody\u003c/code\u003e elements nested inside the \u003ccode\u003ehtml\u003c/code\u003e element. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the disclosure triangle to expand it. You should see that the \u003ccode\u003ebody\u003c/code\u003e element is, temporarily, child-less. Let's go ahead and start adding some content in \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: the \u003cem\u003edisclosure triangle\u003c/em\u003e is the triangle to the left of the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e tag. When you first open the Elements tab, the nodes are generally collapsed, hiding their contents. You can click the triangle to expand the node and see its contents. Disclosure triangles are standard for hiding information throughout Chrome DevTools. If you want to see more, feel free to click on the triangle! You're not going to break anything.\u003c/p\u003e  \u003cp\u003eFirst, let's add a title to our page:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;My HTML adventure\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRefresh the page to see the changes displayed in the browser. If you view the Elements tab again, you should see that a new child node is nested inside the \u003ccode\u003ebody\u003c/code\u003e. Finally, run the tests again; the first test should now be passing.\u003c/p\u003e  \u003cp\u003eNext, we'll add a paragraph below the title. We'll also add some highlighted bits of text to the paragraph to make it stand out a little.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003cbr\u003e  We're writing HTML markup to display in our \u0026lt;strong\u0026gt;browser\u0026lt;/strong\u0026gt;.\u003cbr\u003e  We're basically telling computers what to do. \u0026lt;em\u0026gt;Neat!\u0026lt;/em\u0026gt;\u003cbr\u003e\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSave the file and check out the page in the 'Elements' tab.  What's happening above is that we added some inline elements, \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e to our paragraph to style things a little. The \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e tag makes any text within look \u003cstrong\u003eimportant\u003c/strong\u003e. It's usually bold in browsers by default. The \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e tag allows us to \u003cem\u003eemphasize\u003c/em\u003e certain text. This text is typically rendered as italic in browsers.\u003c/p\u003e  \u003cp\u003eRun the tests again; you should now have all but two of the tests passing.\u003c/p\u003e  \u003cp\u003eLet's add a link to MDN to define HTML. We'll use the\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag for this. Add this to our existing \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eWe're writing \u0026lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\"\u0026gt;HTML\u0026lt;/a\u0026gt; markup to display in our \u0026lt;strong\u0026gt;browser\u0026lt;/strong\u0026gt;. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that HTML attributes (in this case, the \u003ccode\u003ehref\u003c/code\u003e attribute) are shown alongside their opening tag.\u003c/p\u003e  \u003cp\u003eLastly, we'll add a table below the paragraph to recap some of the stuff in this lesson:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;thead\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;th\u0026gt;Element name\u0026lt;/th\u0026gt;\u003cbr\u003e      \u0026lt;th\u0026gt;Display value\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;/thead\u0026gt;\u003cbr\u003e  \u0026lt;tbody\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;h1\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;block\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;p\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;block\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;strong\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;inline\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;em\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;inline\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;/tbody\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWoah. That's a \u003cstrong\u003elot\u003c/strong\u003e of markup! If you take a look at the result, though, you'll see that it's a fairly complex visual — it's a table! Our table consists of a header and a body. The header allows us to give the columns a name, and the table body contains the rows of content. Both \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e tags contains rows, which are represented as \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e (table row). These rows then contain cells which form the table's columns. In the \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e row, cells are represented as \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e, while cells in \u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e have their content in \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e  \u003cp\u003eThat's a \u003cem\u003elot\u003c/em\u003e of nesting.\u003c/p\u003e  \u003cp\u003eLook again at the Elements tab. Expand out all the children of the \u003ccode\u003etable\u003c/code\u003e. This is the DOM tree!\u003c/p\u003e  \u003cp\u003eWhen you're done, go ahead and run the tests. They should now all be passing.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","exportId":"ga46189681936f767318b3f6e74072d68"},{"id":173473,"title":"Review: Changing the DOM with DevTools","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-dev-tools\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDemonstrate viewing the DOM through Chrome DevTools\u003c/li\u003e \u003cli\u003eSelect an element with Chrome DevTools\u003c/li\u003e \u003cli\u003eDelete an element with Chrome DevTools\u003c/li\u003e \u003cli\u003eDemonstrate that the source is not changed when the DOM is\u003c/li\u003e \u003cli\u003eDemonstrate opening the DevTools' JavaScript console\u003c/li\u003e \u003cli\u003eSelect an element with JavaScript\u003c/li\u003e \u003cli\u003eDelete an element with JavaScript\u003c/li\u003e \u003cli\u003eStoring node references in variables\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've read that updating the DOM will update the browser's rendered page. Let's try this out. We're going to change the DOM in two ways. First, we'll use Chrome's Developer Tools (\"DevTools\") and our mouse to remove an element from the DOM. Then we'll use the DevTools' JavaScript console to run JavaScript that does the same thing.\u003c/p\u003e  \u003ch2\u003eDemonstrate Viewing the DOM Through Chrome DevTools\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/ada-wiki.png\" alt=\"ada-wiki\"\u003e\u003c/p\u003e  \u003cp\u003eLet's head back to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e. From this web page, look at the Chrome menu bar at the top of the page. Click on \"View\", then select \"Developer\", then \"Developer Tools.\" This will open the Google Developer Tools. Click on the \"Elements\" tab. Here we see the DOM representation of the HTML source that was loaded into the browser.\u003c/p\u003e  \u003ch3\u003eSelect an Element With Chrome DevTools\u003c/h3\u003e  \u003cp\u003eScroll through the Elements panel. You will see some HTML: \u003ccode\u003ehead\u003c/code\u003e tags, \u003ccode\u003ebody\u003c/code\u003e tags, \u003ccode\u003ediv\u003c/code\u003es, etc. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the disclosure triangle to expand it. Notice that you can mouse over different elements in the Elements panel and see them highlighted in the browser window. Locate the \u003ccode\u003ediv\u003c/code\u003e nested inside \u003ccode\u003ebody\u003c/code\u003e that has an \u003ccode\u003eid\u003c/code\u003e attribute of \"content\" and expand that as well.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/content-element.png\" alt=\"content-element\"\u003e\u003c/p\u003e  \u003cp\u003eNext, locate the \u003ccode\u003eh1\u003c/code\u003e element nested inside the \"content\" div. It should look something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/h1-element.png\" alt=\"h1-element\"\u003e\u003c/p\u003e  \u003cp\u003eClick on the \u003ccode\u003eh1\u003c/code\u003e element; you'll see that it's highlighted in the Elements panel. You've now selected an element with the DevTools.\u003c/p\u003e  \u003ch3\u003eDelete an Element With Chrome DevTools\u003c/h3\u003e  \u003cp\u003ePress the delete button on your keyboard. The element will vanish from the browser's rendered page.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/deleted-header.png\" alt=\"deleted-header\"\u003e\u003c/p\u003e  \u003ch3\u003eDemonstrate That the Source is Not Changed When the DOM Is\u003c/h3\u003e  \u003cp\u003eView the page source. In the Chrome menu bar, click on \"View\", then select \"Developer\", then \"View Source.\" You will see that the HTML is just as it always was, with the deleted element still present.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/html-source.png\" alt=\"html-source\"\u003e\u003c/p\u003e  \u003cp\u003eThe changes in the DOM do not affect the HTML file on the server. When you think about it, that makes sense. If that were true then anyone could be changing carefully-written HTML. (Of course, in the case of Wikipedia, people \u003cem\u003ecan\u003c/em\u003e edit the content using Wikipedia's editor, but they aren't directly accessing the underlying HTML.)\u003c/p\u003e  \u003cp\u003eThe HTML, which lives on the server, \u003cstrong\u003eis unchanged\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eRefresh the page by going to \"View\" and choosing \"Reload this Page.\" You will be reloading the DOM \u003cem\u003efrom the source\u003c/em\u003e. The page content will come back.\u003c/p\u003e  \u003ch3\u003eDemonstrate Opening the DevTools' JavaScript Console\u003c/h3\u003e  \u003cp\u003eAbove, we deleted an element by selecting it in the DevTools and pressing the delete key. We can accomplish the same thing using JavaScript.\u003c/p\u003e  \u003cp\u003eIn DevTools, click the \u003cstrong\u003eConsole\u003c/strong\u003e tab. At the prompt, type the word \u003ccode\u003edocument\u003c/code\u003e and press \"Enter.\" You'll get a \u003ccode\u003e#document\u003c/code\u003e returned. If you hover your mouse over the element, you'll see the entire page highlighted in the browser window. If you expand it, you'll see that it's the exact HTML that you saw in the \u003cstrong\u003eElements\u003c/strong\u003e tab.\u003c/p\u003e  \u003cp\u003eRecall that \u003ccode\u003edocument\u003c/code\u003e is an \u003ccode\u003eobject\u003c/code\u003e; as such, it has properties and \u003ccode\u003emethods,\u003c/code\u003e including a number of different methods that can be used to return elements. Let's find or \u003ccode\u003eselect\u003c/code\u003e an element by speaking JavaScript with the DOM.\u003c/p\u003e  \u003ch3\u003eSelect an Element With JavaScript\u003c/h3\u003e  \u003cp\u003eIn the \u003cstrong\u003eConsole\u003c/strong\u003e type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  document.querySelector('h1'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will return something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\"\u0026gt;...\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGo ahead and click on that disclosure triangle to see more.\u003c/p\u003e  \u003cp\u003eThe return value of \u003ccode\u003edocument.querySelector('h1');\u003c/code\u003e is the DOM node, which is also a JavaScript \u003ccode\u003eobject\u003c/code\u003e. This means that it, in turn, can have methods called on it! This is called \u003cem\u003emethod chaining\u003c/em\u003e. Let's use \u003cem\u003emethod chaining\u003c/em\u003e to remove our node from the DOM.\u003c/p\u003e  \u003ch3\u003eDelete an Element with JavaScript\u003c/h3\u003e  \u003cp\u003eNow type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  document.querySelector('h1').remove(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe heading is gone! We called \u003ccode\u003edocument.querySelector('h1')\u003c/code\u003e to get the node; we then used \u003cem\u003emethod chaining\u003c/em\u003e to call the \u003ccode\u003eremove()\u003c/code\u003e method on the node object. We use dot notation to \u003cem\u003echain\u003c/em\u003e the calls.\u003c/p\u003e  \u003cp\u003eFollow the same process we used earlier to verify that the source has not changed. To restore it, simply refresh the page (i.e. reload the DOM).\u003c/p\u003e  \u003ch3\u003eStoring Node References in Variables\u003c/h3\u003e  \u003cp\u003eQuery methods like \u003ccode\u003equerySelector()\u003c/code\u003e and the other methods we'll be learning about are expressions: they return a value (specifically, a DOM node). As such, we can save the results of the query into a variable. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst header = document.querySelector('h1'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe now have a reference to that node with a meaningful name; we can simply use \u003ccode\u003eheader\u003c/code\u003e any time we need to refer to our node, rather than always having to look it up with \u003ccode\u003edocument.querySelector()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eYou can perhaps imagine how, if we have a program that selects, creates, modifies, or removes a large number of nodes, using this approach will result in code that's easier to read, debug and maintain.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAsk the DOM to find or \u003ccode\u003eselect\u003c/code\u003e an HTML element or elements in the rendered page\u003c/li\u003e \u003cli\u003eRemove the selected elements and/or insert a new element\u003c/li\u003e \u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn this lesson you just did all that stuff! Learning to duplicate what you can do in DevTools with JavaScript \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e DOM programming. The next lessons are going to give you more methods for selecting elements and changing them, but you just changed the DOM. High fives are in order.\u003c/p\u003e","exportId":"review-changing-the-dom-with-devtools"},{"id":173474,"title":"Review: The DOM is a Tree","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-is-a-tree\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDescribe how the DOM works as a tree\u003c/li\u003e\n\u003cli\u003eDefine the computer science version of \"Tree\"\u003c/li\u003e\n\u003cli\u003eAsk the DOM to find or \"select\" an HTML element or elements in the rendered page\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAsk the DOM to find an HTML element or elements in the rendered page\u003c/li\u003e\n\u003cli\u003eRemove the selected element(s) or add a new element next to the selected element\u003c/li\u003e\n\u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn previous lessons we were given the command to find the HTML element we wanted:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.querySelector(selector) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003cem\u003eselector\u003c/em\u003e is like a query string that lets us find things within an HTML page. What is the syntax of this \u003cem\u003eselector\u003c/em\u003e? How does the \u003cem\u003eselector\u003c/em\u003e navigate through our document to find the DOM nodes that we want to work with (update, move, even delete!)?\u003c/p\u003e\n\u003cp\u003eTo understand those queries or \u003cem\u003eselectors\u003c/em\u003e, we first need to talk about how the DOM tree (i.e. what we see in the 'Elements' panel of our DevTools) is used to help the DOM's \u003ccode\u003emethods\u003c/code\u003e find the right nodes.\u003c/p\u003e\n\u003ch3\u003eDefine the Computer Science Version of \"Tree\"\u003c/h3\u003e\n\u003cp\u003eWhat do we mean when we say that the DOM is a tree? Trees make a good metaphor for the DOM because almost everyone has seen a tree. Starting at the bottom, you can climb up the tree and out to the farthest — and smallest — branches. The thicker a branch is, the stronger its connections are and the more it holds within it. Likewise, the thinner a branch is, the less it holds inside.\u003c/p\u003e\n\u003cp\u003eThe DOM works basically the same way, except we usually talk about the root as being at the top of the DOM and the leaves being the most deeply nested HTML elements. So basically, we can imagine a tree upside down.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-the-dom-tree/Image_6_DomTree.png\" alt=\"DOM Tree Graphic\"\u003e\u003c/p\u003e\n\u003cp\u003eThe HTML for this \"tree\" would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE HTML\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;My Title\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;A heading\u0026lt;/h1\u0026gt;\u0026lt;a href=\"http://example.com\"\u0026gt;Link text\u0026lt;/a\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eDescribe How the DOM Works as a Tree\u003c/h3\u003e\n\u003cp\u003eEvery tree can contain subtrees, which we can treat independently of their parent trees. They repeat the pattern and appearance of the full tree, despite being a smaller part of a tree, like branches. Every child has experienced this sense of wonder when they take a fallen branch and stick it in the ground and think that they've planted their own tree.\u003c/p\u003e\n\u003cp\u003ePractically speaking, the DOM begins at \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e, but for now we should avoid changing what's between the \u003ccode\u003e\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;\u003c/code\u003e tags. Most of the time, we will look at the DOM subtree with its root at \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e and only change things that will be visible on the page. We might also deal with subtrees. For example, if we have\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hi!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Bye!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur tree looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        body\u003cbr\u003e        /  \\\u003cbr\u003e      div   div\u003cbr\u003e      /      \\\u003cbr\u003e     p        p\u003cbr\u003e    /          \\\u003cbr\u003e \"Hi!\"        \"Bye!\" \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly, if we had a DOM subtree that looked like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;h5\u0026gt;Sup?\u0026lt;/h5\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe tree would look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e         div\u003cbr\u003e        /  \\\u003cbr\u003e      div   div\u003cbr\u003e      /      \\\u003cbr\u003e    h1        h5\u003cbr\u003e    /          \\\u003cbr\u003e \"Hello!\"     \"Sup?\" \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAsk the DOM to Find or \"select\" an HTML Element or Elements in the Rendered Page\u003c/h3\u003e\n\u003cp\u003eIn creating the HTML for a page, including \u003cem\u003emetadata\u003c/em\u003e for a node (e.g., a \u003ccode\u003eclass\u003c/code\u003e or \u003ccode\u003eid\u003c/code\u003e attribute) will not only provide useful information about that node, but will also make it and its children easier to find. The more specific the metadata is, the more helpful it is for finding the desired element.\u003c/p\u003e\n\u003cp\u003eFor the following exercises, you can experiment with any web page you like. It's fun to change \u003cem\u003eThe New York Times\u003c/em\u003e or Facebook.\u003c/p\u003e\n\u003ch4\u003eFinding a Node\u003c/h4\u003e\n\u003cp\u003eJavaScript exposes a few ways of finding DOM nodes, either directly or in stages, courtesy of the \u003ccode\u003edocument\u003c/code\u003e object. We will introduce three here, in order from most to least specific: \u003ccode\u003egetElementByID()\u003c/code\u003e, \u003ccode\u003egetElementsByClassName()\u003c/code\u003e, and \u003ccode\u003egetElementsByTagName()\u003c/code\u003e.\u003c/p\u003e\n\u003ch5\u003e\u003ccode\u003edocument.getElementById()\u003c/code\u003e\u003c/h5\u003e\n\u003cp\u003eThis method provides the quickest access to a node, but it requires that we know a very specific piece of information — its \u003ccode\u003eid\u003c/code\u003e. This method can only return one element, since CSS \u003ccode\u003eid\u003c/code\u003es are expected to be unique.\u003c/p\u003e\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;h5 id=\"greeting\"\u0026gt;Hello!\u0026lt;/h5\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could find the \u003ccode\u003eh5\u003c/code\u003e element with \u003ccode\u003edocument.getElementById('greeting')\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNotice how the \u003ccode\u003eid\u003c/code\u003e that we pass to \u003ccode\u003egetElementById\u003c/code\u003e is identical to the \u003ccode\u003eid\u003c/code\u003e in \u003ccode\u003e\u0026lt;h5 id=\"greeting\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can use either single(\u003ccode\u003e''\u003c/code\u003e) or double(\u003ccode\u003e\"\"\u003c/code\u003e) quotes around the \u003ccode\u003eid\u003c/code\u003e within the parentheses in \u003ccode\u003edocument.getElementById('yourIDGoesHere')\u003c/code\u003e, as long as you use the same kind to open and close them!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOpen up your DevTools and find an element on the page that has an \u003ccode\u003eid\u003c/code\u003e attribute. Then open up your console, type \u003ccode\u003edocument.getElementById('theIdOfTheElement')\u003c/code\u003e, and check out your handy-dandy DOM node.\u003c/p\u003e\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis one is also very commonly used in DOM programming.\u003c/p\u003e\n\u003cp\u003eThis method finds elements by their \u003ccode\u003eclassName\u003c/code\u003e. Unlike the previous method, class names do not need to be unique, so this method returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e of all the elements with the given class. An \u003ccode\u003eHTMLCollection\u003c/code\u003e is an array-like structure containing a list of elements. You can iterate over an \u003ccode\u003eHTMLCollection\u003c/code\u003e with a simple \u003ccode\u003efor\u003c/code\u003e loop.\u003c/p\u003e\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- the `className` attribute is called `class` in HTML  --\u0026gt;\u003cbr\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Sup?\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h5\u0026gt;Tinier heading\u0026lt;/h5\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could find all of the elements with the class name \"banner\" by calling \u003ccode\u003edocument.getElementsByClassName('banner')\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eInspect your web page again, this time making note of a \u003ccode\u003eclass\u003c/code\u003e. Get all elements with that \u003ccode\u003eclass\u003c/code\u003e and give 'em a look. On the returned object you can use the \u003ccode\u003e.length\u003c/code\u003e property to find out how many came back.\u003c/p\u003e\n\u003cp\u003eIf you recall the \u003ccode\u003efor\u003c/code\u003e loop syntax you might try to write a loop which prints out the \u003ccode\u003einnerHTML\u003c/code\u003e property of every element in the collection. You might find doing so much easier if you save the results of \u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e to a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst elements = document.getElementsByClassName('yourClassNameHere'); \u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByTagName()\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eYou can use this method if you \u003cem\u003edon't\u003c/em\u003e know an element's \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e, but you \u003cem\u003edo\u003c/em\u003e know its tag name (the tag name is the thing between the \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, e.g., \u003ccode\u003e'div'\u003c/code\u003e, \u003ccode\u003e'h1'\u003c/code\u003e, \u003ccode\u003eheader\u003c/code\u003e, \u003ccode\u003earticle\u003c/code\u003e etc.). Since tag names aren't unique, this method also returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eExplore the DOM in the console by typing \u003ccode\u003edocument.getElementsByTagName('div')\u003c/code\u003e. You can iterate through these elements using a simple \u003ccode\u003efor\u003c/code\u003e loop as well.\u003c/p\u003e\n\u003ch4\u003eFinding a Node Without Knowing Anything About It\u003c/h4\u003e\n\u003cp\u003eWhat if we don't have an \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclassName\u003c/code\u003e to help us find a particular element? This is where our knowledge of trees comes in handy!\u003c/p\u003e\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;main\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow would we go about changing only the second \"Hello!\" to \"Goodbye!\"?\u003c/p\u003e\n\u003cp\u003eHere we're going to use a mix of different \u003ccode\u003emethods\u003c/code\u003e to accomplish the goal.\u003c/p\u003e\n\u003cp\u003eLet's start by getting the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e element\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst main = document.getElementsByTagName('main')[0]; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can get the children of \u003ccode\u003emain\u003c/code\u003e using \u003ccode\u003emain.children\u003c/code\u003e. This returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e, so we can get the second child with \u003ccode\u003emain.children[1]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst secondChild = main.children[1]; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we can get our \u003ccode\u003ep\u003c/code\u003e element. To constrain the search to just the children of the second child, we can call \u003ccode\u003egetElementsByTagName()\u003c/code\u003e \u003cstrong\u003edirectly on \u003ccode\u003esecondChild\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst p = secondChild.getElementsByTagName('p')[0]; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd lastly we can change an attribute on the \u003ccode\u003ep\u003c/code\u003e node:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep.textContent = \"Goodbye!\" \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eObviously, this way of accessing that text isn't very efficient and won't work on all pages but it does a good job of demonstrating the basic tools available to us for finding and manipulating HTML elements.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eUnderstanding the tree structure of the DOM helps us navigate all kinds of trees. In subtrees and branches we can find the nodes we need by IDs, class names or tag names, or by using element attributes like \u003ccode\u003echildren\u003c/code\u003e. Once we've selected our elements, we can use JavaScript to manipulate them. By using these techniques, we can start to build a richer user experience.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\"\u003eMDN - Document Object Model\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"review-the-dom-is-a-tree"},{"id":173475,"title":"Review: Query Selector Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-query-selector-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e to find nested nodes\u003c/li\u003e\n\u003cli\u003eModify attributes of DOM nodes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eOne of the most essential skills in our web development toolbox is finding elements in the DOM.\u003c/p\u003e\n\u003cp\u003eWhile \u003ccode\u003edocument.getElementById()\u003c/code\u003e and \u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e are good, we can improve our search when we use document structure (tag, \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003eclass\u003c/code\u003e) \u003cstrong\u003ealong with\u003c/strong\u003e the tree structure of the DOM. It turns out CSS is a \u003cem\u003egreat\u003c/em\u003e language for expressing those relationships! With the \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e methods, we provide one or more CSS selectors as an argument and we get back the matching element or elements. Because they can take a string containing multiple selectors, they allow us to create very specific, complex queries.\u003c/p\u003e\n\u003ch2\u003eUse \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e to Find Nested Nodes\u003c/h2\u003e\n\u003cp\u003eIf you would like to follow along in the console, fork and clone this lesson, open the files in your text editor, and open \u003ccode\u003eindex.html\u003c/code\u003e in Google Chrome. As you go, copy each HTML example into \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003equerySelector()\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003equerySelector()\u003c/code\u003e method takes one argument, a string of one or more CSS-compatible \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e, and returns the \u003cem\u003efirst\u003c/em\u003e element that matches.\u003c/p\u003e\n\u003cp\u003eGiven a document like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Hello!\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Goodbye!\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we called \u003ccode\u003edocument.querySelector('div')\u003c/code\u003e, the method would return the first \u003ccode\u003ediv\u003c/code\u003e. If we check its \u003ccode\u003einnerHTML\u003c/code\u003e, we should see \u003ccode\u003eHello!\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSelectors aren't limited to one tag name, though. Otherwise, why not just use \u003ccode\u003edocument.getElementsByTagName('div')[0]\u003c/code\u003e? We can get very specific.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u003cbr\u003e        \u0026lt;div\u0026gt;\u003cbr\u003e          \u0026lt;ul\u0026gt;\u003cbr\u003e            \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e          \u0026lt;/ul\u0026gt;\u003cbr\u003e        \u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;3\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"unranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;6\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u003cbr\u003e        \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst li2 = document.querySelector('ul.ranked-list li ul li');\u003cbr\u003eli2;\u003cbr\u003e//=\u0026gt; \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e\u003cbr\u003econst div4 = document.querySelector('ul.unranked-list li div');\u003cbr\u003ediv4;\u003cbr\u003e//=\u0026gt; \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above example, the first query says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e (the object we've called \u003ccode\u003equerySelector()\u003c/code\u003e on), find a \u003ccode\u003eul\u003c/code\u003e with a \u003ccode\u003eclassName\u003c/code\u003e of \u003ccode\u003eranked-list\u003c/code\u003e (recall from CSS that the \u003ccode\u003e.\u003c/code\u003e indicates that \u003ccode\u003eranked-list\u003c/code\u003e is a \u003ccode\u003eclassName\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThen find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that \u003ccode\u003eul\u003c/code\u003e. Next find a \u003ccode\u003eul\u003c/code\u003e that is a descendant (but not necessarily a direct child) of that \u003ccode\u003eli\u003c/code\u003e. Finally, find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that (second) \u003ccode\u003eul\u003c/code\u003e.\"\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The HTML property \u003ccode\u003eclass\u003c/code\u003e is referred to as \u003ccode\u003eclassName\u003c/code\u003e in JavaScript.\u003c/p\u003e\n\u003cp\u003eWhat does the second call to \u003ccode\u003equerySelector()\u003c/code\u003e say? Think about it for a minute, and then read on.\u003c/p\u003e\n\u003cp\u003eWait for it...\u003c/p\u003e\n\u003cp\u003eThe second call says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e, find a \u003ccode\u003eul\u003c/code\u003e with a \u003ccode\u003eclassName\u003c/code\u003e of \u003ccode\u003eunranked-list\u003c/code\u003e. Then find an \u003ccode\u003eli\u003c/code\u003e descended from \u003ccode\u003eul.unranked-list\u003c/code\u003e and a \u003ccode\u003ediv\u003c/code\u003e descended from that \u003ccode\u003eli\u003c/code\u003e.\"\u003c/p\u003e\n\u003ch4\u003eCSS Selectors\u003c/h4\u003e\n\u003cp\u003eIf using CSS to target elements isn't feeling natural, now might be a good time to brush up on \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e. Play around on the MDN page, then come back when you're ready.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003equerySelectorAll()\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003equerySelectorAll\u003c/code\u003e works a lot like \u003ccode\u003equerySelector()\u003c/code\u003e — it accepts a string containing one or more selectors as its argument, and it searches starting from the object that it's called on (either \u003ccode\u003edocument\u003c/code\u003e or an element). However, instead of returning the first match, it returns a \u003ccode\u003eNodeList\u003c/code\u003e collection of all matching elements. A \u003ccode\u003eNodeList\u003c/code\u003e is similar to an \u003ccode\u003eHTMLCollection\u003c/code\u003e: it is an array-like structure containing, in this case, a list of DOM nodes.\u003c/p\u003e\n\u003cp\u003eGiven a document like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;main id=\"app\"\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;10\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;11\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we called\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.getElementById('app').querySelectorAll('ul.ranked-list li'); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'd get back a list of nodes corresponding to: \u003ccode\u003e\u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;10\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;11\u0026lt;/li\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThe DOM selection methods \u003ccode\u003edocument.querySelector()\u003c/code\u003e and \u003ccode\u003edocument.querySelectorAll()\u003c/code\u003e are powerful tools for finding the elements we need to update and change. They use the familiar CSS selector syntax and allow us to create very specific queries that give us access to elements in complex DOM trees.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\"\u003edocument.querySelector()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\"\u003edocument.querySelectorAll()\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"review-query-selector-methods"},{"id":173476,"title":"Review: Creating and Inserting DOM Nodes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-modifying-elements-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate DOM elements programmatically\u003c/li\u003e \u003cli\u003eAdd elements to the DOM\u003c/li\u003e \u003cli\u003eUpdate elements using \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eChange properties on DOM nodes\u003c/li\u003e \u003cli\u003eRemove elements from the DOM\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNow that you have an understanding of the DOM and powerful tools for selecting the right elements, it's time to learn how to:\u003c/p\u003e  \u003col\u003e \u003cli\u003ecreate new nodes,\u003c/li\u003e \u003cli\u003edelete nodes, and\u003c/li\u003e \u003cli\u003eupdate nodes' properties\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eCreate DOM Elements Programmatically\u003c/h2\u003e  \u003ch3\u003e\u003ccode\u003edocument.createElement()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eCreating an element in JavaScript is an easy process. You simply call \u003ccode\u003edocument.createElement('tagName')\u003c/code\u003e, where \u003ccode\u003etagName\u003c/code\u003e is the name of any valid HTML tag (\u003ccode\u003e'p'\u003c/code\u003e, \u003ccode\u003e'div'\u003c/code\u003e, \u003ccode\u003e'span'\u003c/code\u003e, etc.).\u003c/p\u003e  \u003cp\u003eOpen the \u003ccode\u003eindex.html\u003c/code\u003e file in your browser and open up the browser's console. In the console, enter:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst element = document.createElement('div'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ethen take a look at the Elements tab. The element doesn't show up on the page. Why not?\u003c/p\u003e  \u003ch2\u003eAdd Elements to the DOM\u003c/h2\u003e  \u003cp\u003eTo get an element to appear in the DOM, we have to \u003ccode\u003eappend\u003c/code\u003e it to an existing DOM node. To go back to our tree metaphor, we have to glue our new leaf onto a branch that's already there. We can start as high up on the tree as \u003ccode\u003edocument.body\u003c/code\u003e, or we can find a more specific element using any of the methods we've learned for traversing the DOM.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eappendChild()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eLet's append \u003ccode\u003eelement\u003c/code\u003e to \u003ccode\u003ebody\u003c/code\u003e to start:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.body.appendChild(element); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you look at the Elements tab, you'll see our new (empty) \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e nested inside the \u003ccode\u003ebody\u003c/code\u003e element. Let's give it some content:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ul = document.createElement('ul');\u003cbr\u003e\u003cbr\u003efor (let i = 0; i \u0026lt; 3; i++) {\u003cbr\u003e  const li = document.createElement('li');\u003cbr\u003e  li.innerHTML = (i + 1).toString();\u003cbr\u003e  ul.appendChild(li);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eelement.appendChild(ul); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, each time we create a new element, we create a variable and save a reference to it. That makes it quite easy to make additional updates and to add it to the DOM using \u003ccode\u003eappendChild\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eRefresh the browser; you should now see the unordered list rendered on the page, and see the new elements in the \"Elements\" tab.\u003c/p\u003e  \u003ch2\u003eAdd Elements to the DOM via \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eCreating elements and then appending them into the DOM is a multi-step process. It's also the \u003cstrong\u003e\u003cem\u003esafest and most reliable way\u003c/em\u003e\u003c/strong\u003e to add content to the DOM. Most repeated code can be removed by using variables, functions and loops. It's The Right Way.\u003c/p\u003e  \u003cp\u003eThat said, however, there's another process that will also work, using \u003ccode\u003eElement.innerHTML\u003c/code\u003e. Inside our loop above, we create an \u003ccode\u003eli\u003c/code\u003e element and set its \u003ccode\u003einnerHTML\u003c/code\u003e property to a simple number (expressed as a string) that represents the current iteration through the loop. Once we append the \u003ccode\u003eli\u003c/code\u003e to the \u003ccode\u003eul\u003c/code\u003e and the \u003ccode\u003eul\u003c/code\u003e to the document \u003ccode\u003ebody\u003c/code\u003e, we see our unordered list in the browser window. This is a perfectly valid way to use \u003ccode\u003einnerHTML\u003c/code\u003e to add content to the DOM. Imagine, however, that we want to add content that's more complicated.\u003c/p\u003e  \u003cp\u003eAssume our HTML includes a \u003ccode\u003ediv\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"header.\" We can grab that element and set its \u003ccode\u003einnerHTML\u003c/code\u003e attribute to any HTML we like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst header = document.getElementById('header');\u003cbr\u003eheader.innerHTML = \"\u0026lt;h1\u0026gt;Poodles!\u0026lt;/h1\u0026gt;\u0026lt;h3\u0026gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective\u0026lt;/h3\u0026gt;\u0026lt;p\u0026gt;\u0026lt;em\u0026gt;By: Byron Q. Poodle, Esq., BA.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we are using one big, long string, complete with multiple HTML tags, to create the following HTML in the DOM:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"header\"\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;Poodles!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;h3\u0026gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;By: Byron Q. Poodle, Esq., BA.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis process works but it is \u003cstrong\u003enot\u003c/strong\u003e recommended for several reasons. First, it's more error-prone, and the errors can be difficult to find. Second, it can negatively impact site performance. Finally, if you're inserting user-derived data (e.g., comments) into the DOM using \u003ccode\u003einnerHTML\u003c/code\u003e, you can expose your site to the risk of users \u003ca href=\"https://www.reddit.com/r/learnjavascript/comments/9502x5/is_innerhtml_still_considered_bad/e3p31go/?utm_source=share\u0026amp;utm_medium=web2x\u0026amp;context=3\"\u003einjecting malicious code\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eProgrammatically creating and appending elements is safer and more efficient, and it results in code that's easier to read, easier to debug, and easier to maintain.\u003c/p\u003e  \u003ch2\u003eChange Properties on DOM Nodes\u003c/h2\u003e  \u003cp\u003eWe can change the appearance of a DOM node using its \u003ccode\u003estyle\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.style.backgroundColor = '#27647B'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou've changed what's on the screen!\u003c/p\u003e  \u003cp\u003eFeel free to set as many properties as you'd like — this is a good chance to look around and explore different properties of DOM elements.\u003c/p\u003e  \u003cp\u003eLet's adjust the display:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.style.fontSize = '24px';\u003cbr\u003eelement.style.marginLeft = '30px';\u003cbr\u003eelement.style.lineHeight = 2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePerhaps the most common way to change how things appear in the DOM is by changing an element's \u003ccode\u003eclass\u003c/code\u003e attribute. As you know from CSS, we often change the way a bit of rendered HTML appears by adding or removing a class.\u003c/p\u003e  \u003cp\u003eFor example, we could create an \u003ccode\u003ealert\u003c/code\u003e class that turns the text red (using the CSS \u003ccode\u003ecolor\u003c/code\u003e attribute) and makes it big (using the CSS \u003ccode\u003efont-size\u003c/code\u003e attribute). We can then use JavaScript to first grab the element and then add the class by updating the element's \u003ccode\u003eclassName\u003c/code\u003e property. This has the same effect as setting the \u003ccode\u003eclass\u003c/code\u003e property in the HTML. The \u003ccode\u003eclassName\u003c/code\u003e property expects a \u003ccode\u003eString\u003c/code\u003e with one or more class names, separated by spaces:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.className = \"dog\";\u003cbr\u003eelement.className = \"pet-listing dog\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnother way to accomplish the same thing is by using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003e\u003ccode\u003eElement.classList\u003c/code\u003e property\u003c/a\u003e. This property has \u003ccode\u003e.add()\u003c/code\u003e and \u003ccode\u003e.remove()\u003c/code\u003e methods that can be used as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.classList.remove(\"unneeded-class\");\u003cbr\u003eelement.classList.add(\"pet-listing\", \"dog\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis approach allows you to easily add and remove classes programmatically, without having to create a long string of class names.\u003c/p\u003e  \u003ch3\u003eSeparation of Concerns\u003c/h3\u003e  \u003cp\u003eAn important thing to bear in mind is that we only want to use JavaScript to change the appearance of an element when we need to make a change dynamically, i.e., in response to user actions. This goes back to a fundamental programming concept about separating concerns between technologies:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHTML defines the structure of the website (not appearance or functionality)\u003c/li\u003e \u003cli\u003eJavaScript defines functionality of the website (not structure or styling)\u003c/li\u003e \u003cli\u003eCSS defines the visualization and style of the website (not structure or functionality)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDefining the base CSS should still happen in the CSS files that are loaded into the DOM when the page is opened.\u003c/p\u003e  \u003ch2\u003eRemove Elements from the DOM\u003c/h2\u003e  \u003cp\u003eWe know how to add elements and change their attributes. What if we want to remove an element from a page?\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eremoveChild()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe use \u003ccode\u003eremoveChild()\u003c/code\u003e, as you might guess, to remove a particular child of an element:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esomeElement.removeChild(someChildElement); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take a look at a more complex example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ul = document.getElementsbyTagName('ul')[0];\u003cbr\u003eul.removeChild(ul.querySelector('li:nth-child(2)')); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere you can see the power of \u003ccode\u003equerySelector()\u003c/code\u003e: we can use it to find the second \u003ccode\u003eli\u003c/code\u003e element of \u003ccode\u003eul\u003c/code\u003e. We then pass that element as the argument to our \u003ccode\u003eremoveChild\u003c/code\u003e method, which removes the element from our \u003ccode\u003eul\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhat if we want to remove the whole unordered list (\u003ccode\u003eul\u003c/code\u003e)?\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eelement.remove()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe can just call \u003ccode\u003eremove()\u003c/code\u003e on the element itself:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eul.remove(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd it's gone!\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eFrom this point forward, many of the labs will work a little differently from ones you've done before. Specifically, the tests will mock the process of 1) running JavaScript code in the browser and 2) seeing the results of that code represented in the DOM. Take a look at \u003ccode\u003etest/indexTest.js\u003c/code\u003e to see the tests' descriptions of the changes your code should be making to the DOM elements.\u003c/p\u003e  \u003cp\u003eNote that you do not need to create functions for this lab. Just create the line or lines of JavaScript necessary to pass each test. As usual, you will write your code in the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\"\u003edocument.createElement()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild\"\u003eappendChild()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild\"\u003eremoveChild()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\"\u003eelement.remove()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003eclassList Property\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"gb7290094f81a48c6ce1a172b8962243d"},{"id":173477,"title":"You're a DOM Manipulation Expert, Now!","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-youre-a-dom-manipulation-expert\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-a-dom-manipulation-expert\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-a-dom-manipulation-expert/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eReflect\u003c/h2\u003e\n\u003cp\u003eRemember our \"Simple Liker\" program. In it we saw that front end web programming is using three \"pillars\" working together:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e☑ Manipulating the DOM\u003c/li\u003e\n\u003cli\u003eRecognizing JavaScript events\u003c/li\u003e\n\u003cli\u003eCommunicate with the server\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis whole unit has been about gaining the skills required to \u003cstrong\u003eManipulate the DOM\u003c/strong\u003e. Since you can now update web pages using JavaScript, you can communicate things to users like \"You've liked this message\" by changing the appearance of the web page they're looking at.\u003c/p\u003e\n\u003ch2\u003eNext Step\u003c/h2\u003e\n\u003cp\u003eBut...obviously most people don't interact with web pages by opening up the Chrome DevTools console and writing JavaScript commands. If we could tell the web page to do that work when some event happens (clicking an image, double clicking inside a square, etc.) we'd be closer to the web experiences that we're already familiar with.\u003c/p\u003e\n\u003cp\u003eThe important part is that you've mastered the first pillar. Two more down and you're going to be building the rich web applications of your dreams!\u003c/p\u003e","exportId":"youre-a-dom-manipulation-expert-now"}]},{"id":18926,"name":"JavaScript Events","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g04a77892e324f6ddc472f0385e52a44f","items":[{"id":173478,"title":"Review: JavaScript Events","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine a JavaScript event\u003c/li\u003e \u003cli\u003eIdentify different types of user events\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've experimented with selecting and manipulating nodes in the DOM using JavaScript: deleting nodes, editing nodes, etc. But most web applications are \u003cem\u003enot\u003c/em\u003e used by people opening up the console and editing the DOM using Chrome's DevTools. Instead, people \u003cem\u003edo something\u003c/em\u003e and then \u003cem\u003ework happens\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e\"Doing work\" in response to \"something happening\" is known as \u003cem\u003eevent handling\u003c/em\u003e. \u003cem\u003eEvents\u003c/em\u003e are the \"something the user does\" and the \"\u003cem\u003ecallback function\u003c/em\u003e\" is the work that will happen in response to the event being triggered.\u003c/p\u003e  \u003cp\u003eIn this lesson we'll go over some of the most commonly-used JavaScript events. In the following lessons, we'll learn how to use \u003cem\u003eevent listeners\u003c/em\u003e to tell JavaScript which event or events we want it to listen for. We'll also learn how to implement \u003cem\u003ecallback functions\u003c/em\u003e to handle the \u003cem\u003ework happens\u003c/em\u003e part of event handling.\u003c/p\u003e  \u003ch2\u003eDefine a JavaScript Event\u003c/h2\u003e  \u003cp\u003eJavaScript has the ability to \"listen\" for things that happen inside the browser. It can listen for events like whether the browser is resized, or whether someone clicked on a specific image on the screen. The event you're probably most familiar with is \"click.\"\u003c/p\u003e  \u003cp\u003eWe'll go over a few of the more common types of events in this lesson.\u003c/p\u003e  \u003ch2\u003eIdentify Different Types of User Events\u003c/h2\u003e  \u003ch3\u003eMouse Click\u003c/h3\u003e  \u003cp\u003eMouse or trackpad events are some of the most common ones you'll be handling using JavaScript eventing. For example, JavaScript can recognize a single click on an element in the page and change the styling of the element to highlight it. Or it can recognize a double-click on an element and open a zoomed-in view of that element.\u003c/p\u003e  \u003cp\u003eThere are many other mouse events you can use; take a look at the list of JavaScript's \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#Mouse_events\"\u003emouse events here\u003c/a\u003e.\u003c/p\u003e  \u003ch3\u003eKey Press\u003c/h3\u003e  \u003cp\u003eWhile click events will likely make up the majority of events you'll use, the keyboard is another important source of events. JavaScript currently includes two \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#Keyboard_events\"\u003ekeyboard events\u003c/a\u003e: \u003ccode\u003ekeydown\u003c/code\u003e and \u003ccode\u003ekeyup\u003c/code\u003e. (A third, \u003ccode\u003ekeypress\u003c/code\u003e, has been deprecated.) When a key is pressed, these events provide a code to indicate which key it was. For example, a game program might listen for \u003ccode\u003ekeydown\u003c/code\u003e events and, if the space bar was pressed, make the character jump over the hole.\u003c/p\u003e  \u003ch3\u003eForm Submission\u003c/h3\u003e  \u003cp\u003eHTML pages often use a submit button to submit a form to a server. When a user submits a form, the \u003ccode\u003esubmit\u003c/code\u003e event is fired. An event handler here might pop up a thank you overlay or log in the user and take them to their home page.\u003c/p\u003e  \u003ch3\u003eOther Events\u003c/h3\u003e  \u003cp\u003eAs you seek to build more complicated applications, you'll need to handle and trigger work on many more events than the few we've discussed in this lesson. Some other common events you are likely to encounter are \u003ccode\u003escroll\u003c/code\u003e, \u003ccode\u003emouseenter\u003c/code\u003e and \u003ccode\u003emouseleave\u003c/code\u003e, \u003ccode\u003efocus\u003c/code\u003e, \u003ccode\u003eblur\u003c/code\u003e,  and \u003ccode\u003eonchange\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eOne important thing to keep in mind is that not all JavaScript events are supported by all browsers. This \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of browser events\u003c/a\u003e includes the ones that can be used in most browsers.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eJavaScript allows us to trigger work when it detects events. You set up an event handler and, when JavaScript recognizes that event, it will execute the event handler's work, which is stored in a \u003cem\u003ecallback function\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eTake a few minutes to look through the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of common events\u003c/a\u003e to familiarize yourself with the many many ways you can use event handling to enhance your users' experience.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"review-javascript-events"},{"id":173479,"title":"Review: JavaScript Event Listeners Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-event-listening-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate event listeners on DOM nodes using \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lab we will learn how to teach nodes to \"listen\" for an event using \u003ccode\u003eaddEventListener()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eCreate Event Listeners on DOM Nodes with \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn order for JavaScript to handle an event, we first need to tell it to listen for that event. We do this by calling the \u003ccode\u003eaddEventListener()\u003c/code\u003e method on the element we want to add the listener to, and passing it two arguments:\u003c/p\u003e  \u003col\u003e \u003cli\u003ethe name of the event to listen for, and\u003c/li\u003e \u003cli\u003ea \u003cem\u003ecallback function\u003c/em\u003e to \"handle\" the event\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eOpen up \u003ccode\u003eindex.html\u003c/code\u003e in the browser. When you click in the \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e area, nothing happens. Let's set up some \u003cem\u003eevent handling\u003c/em\u003e. Specifically, let's add an event listener for the \u003ccode\u003eclick\u003c/code\u003e event on the \u003ccode\u003einput#input\u003c/code\u003e element in \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTry out the following in the Chrome DevTools console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst input = document.getElementById('input');\u003cbr\u003einput.addEventListener('click', function() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when you click inside of \u003ccode\u003einput#input\u003c/code\u003e, you will get an alert box.\u003c/p\u003e  \u003cp\u003eLet's review what's happening in this code.\u003c/p\u003e  \u003cp\u003eFirst, we grab the element that we want to add the event listener to and save a reference to it in the \u003ccode\u003einput\u003c/code\u003e variable.\u003c/p\u003e  \u003cp\u003eNext, we call \u003ccode\u003eaddEventListener()\u003c/code\u003e on that element to tell JavaScript to listen for the event. We pass two arguments to \u003ccode\u003eaddEventListener()\u003c/code\u003e: the name of the event to listen for (in this case, \u003ccode\u003eclick\u003c/code\u003e) and a \u003cem\u003ecallback function\u003c/em\u003e that will be executed when the event is \"heard.\"\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\"\u003eAccording to MDN\u003c/a\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eA callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThat's exactly what's happening here: we're passing a callback function as the second argument to the \u003ccode\u003eaddEventListener()\u003c/code\u003e function; the callback will be invoked as soon as the event occurs.\u003c/p\u003e  \u003cp\u003eLet's pull out that second argument and take a look at it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis function has all the components of functions we've seen before (the \u003ccode\u003efunction\u003c/code\u003e keyword, a pair of parentheses, and the body of the function enclosed in curly braces) \u003cem\u003eexcept one\u003c/em\u003e: it doesn't have a name assigned to it. This is what's called an \u003cem\u003eanonymous\u003c/em\u003e function. Because it doesn't have a name, it can't be invoked directly. But the event listener knows to execute whatever function is passed as the second argument when it detects the event, so it doesn't need to be named.\u003c/p\u003e  \u003cp\u003eIf we are only calling our callback function in that one place, using an anonymous function makes sense. However, what if we wanted to use that same alert message on the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e containing the number \u003ccode\u003e5\u003c/code\u003e? In that case, it would make more sense to create a separate, named function that could be called by both event listeners. With this approach, we would pass the \u003cem\u003efunction name\u003c/em\u003e as the second argument to \u003ccode\u003eaddEventListener()\u003c/code\u003e rather than the function itself:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst input = document.getElementById('input');\u003cbr\u003e\u003cbr\u003efunction clickAlert() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003einput.addEventListener('click', clickAlert); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo hook up our other div, we would use our CSS selector skills to grab the element and save it to a variable, then add an event listener to that element. Give it a try!\u003c/p\u003e  \u003cp\u003eWith this approach, if we decide later that we want to change the text of the alert to \"Hee hee, that tickles!\" instead, we would only need to make that change in one place.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: we pass \u003ccode\u003eclickAlert\u003c/code\u003e as the argument, not \u003ccode\u003eclickAlert()\u003c/code\u003e. This is because we don't want to \u003cem\u003einvoke\u003c/em\u003e the function in this line of code. Instead, we want to pass a \u003cem\u003ereference\u003c/em\u003e to the function to \u003ccode\u003eaddEventListener()\u003c/code\u003e so \u003cem\u003eit\u003c/em\u003e can call the function when the time comes.\u003c/p\u003e  \u003cp\u003eRefresh your browser and try out the latest version of the code in the console to verify that it works. Also try passing \u003ccode\u003eclickAlert()\u003c/code\u003e as the second argument rather than \u003ccode\u003eclickAlert\u003c/code\u003e and see what happens.\u003c/p\u003e  \u003ch2\u003ePassing the Tests\u003c/h2\u003e  \u003cp\u003eNow let's set up \u003ccode\u003eindex.js\u003c/code\u003e to do the same thing so we can get our test passing. To do that, simply copy the code into the \u003ccode\u003eindex.js\u003c/code\u003e file's \u003ccode\u003eaddingEventListener()\u003c/code\u003e function and run the test. Either version should pass the test — try them both and find out!\u003c/p\u003e  \u003ch4\u003eChecking the Code in the Browser\u003c/h4\u003e  \u003cp\u003eWe know that the code works in the console and passes the test, but we should also check our changes to \u003ccode\u003eindex.js\u003c/code\u003e in the browser. Because you've added the \u003ccode\u003eaddEventListener()\u003c/code\u003e function \u003cem\u003einside\u003c/em\u003e the \u003ccode\u003eaddingEventListener()\u003c/code\u003e function, recall that you will need to call the outer function in \u003ccode\u003eindex.js\u003c/code\u003e to execute \u003ccode\u003eaddEventListener()\u003c/code\u003e and activate the event listener. Be sure to refresh the page to load the new code in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g69bdcc57c8551adb8506b9d0eeab270c"},{"id":173480,"title":"Review: Acting on Events","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-acting-on-events-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice moving elements on the page\u003c/li\u003e \u003cli\u003eDemonstrate how to move an element in response to a browser event\u003c/li\u003e \u003cli\u003eDemonstrate how to update an element's position on the page conditionally\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThink back to the first video game you played.\u003c/p\u003e  \u003cp\u003eThink about the mechanics of that game. When you \u003cem\u003etilted\u003c/em\u003e a joystick or \u003cem\u003epressed\u003c/em\u003e a button it responded to your whims. It pulled you into its story by giving you a window into its world and a way of interacting with — shaping, even — that world. When you performed an \u003cstrong\u003e\u003cem\u003eevent\u003c/em\u003e\u003c/strong\u003e, the computer made the world respond: the little plumber from Brooklyn jumped (\u003cem\u003eSuper Mario Franchise\u003c/em\u003e), the undead warrior slashed at an evil foe (\u003cem\u003eDark Souls\u003c/em\u003e), or the banana-yellow guy ate the power pellet (\u003cem\u003ePac-Man\u003c/em\u003e).\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-acting-on-events/Image_36_VideoGame.png\" alt=\"Controlling classic video game characters Mario and Pacman\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cem\u003eProgramming means that you can create such a world for other people.\u003c/em\u003e Sure, it'll be a while before you're ready to build something like one of the classic games above, but we can start with the essential steps. In this lab we'll learn how to move an element on a page in response to an \u003cem\u003eevent\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003cp\u003eGo ahead and run the tests. You'll see that you need to create two functions to get the tests passing: \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e and \u003ccode\u003emoveDodgerRight()\u003c/code\u003e. We'll write \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e together, then you'll create \u003ccode\u003emoveDodgerRight()\u003c/code\u003e on your own.\u003c/p\u003e  \u003ch2\u003ePractice Moving Elements on the Page\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/rock-dodger.png\" alt=\"Rock Dodger!\"\u003e\u003c/p\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in the browser. You'll see a black square which represents the game field and a white rectangle at the bottom of that field which is our game piece, the dodger. Now open DevTools and click on the Elements tab. You'll see that the game field is a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"game.\" Expand that \u003ccode\u003ediv\u003c/code\u003e and you'll see that the game piece is a second, nested \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"dodger.\"\u003c/p\u003e  \u003cp\u003eClick on the game \u003ccode\u003ediv\u003c/code\u003e and take a look at its CSS in the styles tab. You'll see that the game field has a height and width of 400px. Now click on the dodger and note that it has a height of 20px and a width of 40px. Finally, take a look at the inline style on the dodger \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e: the \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties define the dodger's starting position \u003cem\u003erelative to its parent element, the game field\u003c/em\u003e. In other words, the lower left corner of the game field corresponds to\u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003ebottom\u003c/code\u003e positions of 0px. The starting values of the dodger's \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties are what places it at the bottom center of the game field when our game launches.\u003c/p\u003e  \u003cp\u003eBefore we can use JavaScript to move the dodger, we first need to grab it and save a reference to it in a variable. Enter the following in the console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst dodger = document.getElementById(\"dodger\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAwesome. Now let's change its color:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.backgroundColor = \"#000000\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhoa, where'd it go? Well, we changed the color to \u003ccode\u003e#000000\u003c/code\u003e, another way of expressing \"black.\" So it just blends in with the background.\u003c/p\u003e  \u003cp\u003eLet's change it to something more visible.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.backgroundColor = \"#FF69B4\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMuch better!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger.png\" alt=\"pink dodger\"\u003e\u003c/p\u003e  \u003cp\u003eAccessing the \u003ccode\u003estyle\u003c/code\u003e property of the \u003ccode\u003edodger\u003c/code\u003e element allows us to change things like the \u003ccode\u003ebackgroundColor\u003c/code\u003e, \u003ccode\u003eheight\u003c/code\u003e, \u003ccode\u003ewidth\u003c/code\u003e, etc. We can also use it to change an element's position on the page.\u003c/p\u003e  \u003cp\u003eLet's start by moving the element up:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.bottom = \"100px\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger_bottom_100.png\" alt=\"up 100px\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Even though we're talking about \u003cem\u003enumeric\u003c/em\u003e coordinates, note that we need to move the dodger by assigning a new \u003cem\u003estring value\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eWe can verify our dodger's current position by simply typing \u003ccode\u003edodger.style.left\u003c/code\u003e or \u003ccode\u003edodger.style.bottom\u003c/code\u003e into the console.\u003c/p\u003e  \u003cp\u003eLet's return it to where it started by resetting the \u003ccode\u003ebottom\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.bottom = \"0px\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's visually verify that the dodger's position is determined relative to the game field by changing its \u003ccode\u003eleft\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.left = \"0px\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see the dodger nestled up against the bottom left corner of the game field.\u003c/p\u003e  \u003ch2\u003eDemonstrate How to Move an Element in Response to a Browser Event\u003c/h2\u003e  \u003cp\u003eNow that we know how to write the code to move the dodger, let's figure out how to tie that action to an event.\u003c/p\u003e  \u003cp\u003eLet's say we want the user to be able to move the dodger to the left using the left arrow key. We learned in an earlier lesson that, when a key is pressed, the \u003ccode\u003ekeydown\u003c/code\u003e event provides a code to indicate which key it was. So the first thing we have to do is figure out what code is used to identify the left arrow key. We could look it up, but we're programmers — let's explore!\u003c/p\u003e  \u003cp\u003eSo what do we mean when we say that an event provides a code? Any time an event listener is in place and the event it's listening for is triggered, a JavaScript object containing a bunch of information about the event is \u003cstrong\u003eautomatically\u003c/strong\u003e passed as an argument to the callback function. We can access that object and the information it contains by defining a parameter for the callback. It looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(event) {\u003cbr\u003e  console.log(event);\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy defining the \u003ccode\u003eevent\u003c/code\u003e parameter in the parentheses, we've given the body of the callback access to that event object, which is what allows us to log it to the console. Note that, as with any JavaScript parameter (and, in fact, any JavaScript variable), we can give it any valid JavaScript variable name we like. By convention, and in keeping with programming best practice of using meaningful variable names, the name JavaScript programmers use for this parameter is usually either \u003ccode\u003eevent\u003c/code\u003e or \u003ccode\u003ee\u003c/code\u003e. You will see these in a lot of JavaScript code, and we recommend you use them as well.\u003c/p\u003e  \u003cp\u003eThis pattern, when you first encounter it, is tricky to wrap your head around. Don't worry if it doesn't make total sense yet — it will become clearer as you continue through the curriculum. You might also want to read the excellent accepted answer in \u003ca href=\"https://stackoverflow.com/questions/35936365/what-exactly-is-the-parameter-e-event-and-why-pass-it-to-javascript-functions\"\u003ethis Stack Overflow thread\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at what that event object looks like. Enter the code above into the console then click in the browser window (where the game field and dodger are rendered). Now, if you press the left arrow key, you should see a \u003ccode\u003eKeyboardEvent\u003c/code\u003e logged in the console. Expand the event and you'll see its properties listed; the one we're interested in is the \u003ccode\u003ekey\u003c/code\u003e property. Try pressing some other keys as well and check out their \u003ccode\u003ekey\u003c/code\u003e properties.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/keyboard-event.png\" alt=\"Keyboard Event\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e You can explore other event types as well: just change the name of the event in the code above.\u003c/p\u003e  \u003cp\u003eNow that we know the code the event uses to identify the left arrow key, we can write the JavaScript code to move the dodger left when the key is pressed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(event) {\u003cbr\u003e  if (event.key === \"ArrowLeft\") {\u003cbr\u003e    const leftNumbers = dodger.style.left.replace(\"px\", \"\");\u003cbr\u003e    const left = parseInt(leftNumbers, 10);\u003cbr\u003e\u003cbr\u003e    dodger.style.left = `${left - 1}px`;\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo what are we doing here? Well, when our event listener detects a \u003ccode\u003ekeydown\u003c/code\u003e event, we first check to see whether the \u003ccode\u003ekey\u003c/code\u003e property of the event object has the value \"ArrowLeft.\" If it does, we get the current value of the dodger's \u003ccode\u003estyle.left\u003c/code\u003e property and use the \u003ca href=\"https://www.w3schools.com/jsref/jsref_replace.asp\"\u003eString \u003ccode\u003ereplace()\u003c/code\u003e method\u003c/a\u003e to strip out the \"px\", then store the result in \u003ccode\u003eleftNumbers\u003c/code\u003e.  Next, we parse \u003ccode\u003eleftNumbers\u003c/code\u003e as an integer and store that result in \u003ccode\u003eleft\u003c/code\u003e. Finally, we update the dodger's \u003ccode\u003estyle.left\u003c/code\u003e property using string interpolation, injecting the current value minus 1. If the key that's pressed is \u003cem\u003enot\u003c/em\u003e the left arrow key, we do zilch. Try it out in the browser yourself!! (Be sure to refresh the page first.)\u003c/p\u003e  \u003cp\u003eWe do still have a problem, though. Even though we're only going one pixel at a time, eventually our dodger will zoom (well, relatively speaking) right out of view.\u003c/p\u003e  \u003cp\u003eHow can we prevent this? We need to check where the left edge of the dodger is and only move it if it hasn't yet reached the left edge of the game field.\u003c/p\u003e  \u003ch2\u003eUpdate an Element's Position on the Page Conditionally\u003c/h2\u003e  \u003cp\u003eOur callback function is starting to get pretty complex. This is probably a good time to break the dodger's movement out into a separate function. We want to move the dodger left if our \u003ccode\u003eif\u003c/code\u003e statement returns true, so let's pull out the body of that \u003ccode\u003eif\u003c/code\u003e statement into a function called \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eRefresh the page so we're starting with a blank slate, then grab the dodger again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst dodger = document.getElementById(\"dodger\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we'll build our \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e function, adding a check on the current position of the dodger:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction moveDodgerLeft() {\u003cbr\u003e  const leftNumbers = dodger.style.left.replace(\"px\", \"\");\u003cbr\u003e  const left = parseInt(leftNumbers, 10);\u003cbr\u003e\u003cbr\u003e  if (left \u0026gt; 0) {\u003cbr\u003e    dodger.style.left = `${left - 1}px`;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're doing essentially the same thing, but we first ensure that the dodger's left edge has not reached the left edge of its container.\u003c/p\u003e  \u003cp\u003eNow let's wire this up to our event listener:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(e) {\u003cbr\u003e  if (e.key === \"ArrowLeft\") {\u003cbr\u003e    moveDodgerLeft();\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow try moving the dodger past the left edge. No can do!\u003c/p\u003e  \u003cp\u003eCopy the final code into \u003ccode\u003eindex.js\u003c/code\u003e and run the tests. You should now have the first one passing.\u003c/p\u003e  \u003ch2\u003eLab\u003c/h2\u003e  \u003cp\u003eNow it's your turn. With the code implemented from the code-along, think about what needs to change to make a \u003ccode\u003emoveDodgerRight()\u003c/code\u003e function. You'll need to add another condition to your event listener's callback function to call \u003ccode\u003emoveDodgerRight()\u003c/code\u003e. Then, inside the function, instead of moving the dodger \u003ccode\u003e${left - 1}px\u003c/code\u003e, you'll be moving it \u003ccode\u003e${left + 1}px\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It may seem logical that you would use the dodger's \u003ccode\u003estyle.right\u003c/code\u003e property to move the dodger right, but that won't work. The reason is that changing the \u003ccode\u003estyle.right\u003c/code\u003e property \u003cem\u003edoesn't change\u003c/em\u003e the \u003ccode\u003estyle.left\u003c/code\u003e property, which means we'd have conflicting information about where the dodger should be on the screen. JavaScript solves this problem by giving precedence to \u003ccode\u003estyle.left\u003c/code\u003e. In other words, once the user presses the left arrow key for the first time and the value of \u003ccode\u003estyle.left\u003c/code\u003e is changed, any subsequent changes to \u003ccode\u003estyle.right\u003c/code\u003e will be ignored.\u003c/p\u003e  \u003cp\u003eFinally, implement the code needed to prevent the dodger from escaping off the right-hand side. How can we check whether the \u003cem\u003eright\u003c/em\u003e edge of the dodger has reached the \u003cem\u003eright\u003c/em\u003e edge of the game field? (Keep in mind that the dodger is 40px wide.)\u003c/p\u003e  \u003cp\u003eOnce you've completed the work to get the tests to pass, the last step is to \"try out\" your application. Make sure it works the way you expect in the browser. In professional applications, tests can't cover 100% of the use of the application. It's important to realize that \"passing all the tests\" \u003cem\u003eis not the same\u003c/em\u003e as \"building a working application.\"\u003c/p\u003e  \u003cp\u003eBe sure to do a human-level manual \"play through\" with your dodger to make sure your working code \u003cem\u003ereally works\u003c/em\u003e!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/vvLWidwZNYH5e/200w_d.gif\" alt=\"Passing the Tests is only part of the job\"\u003e\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eEvents and event handling are vital to web programming. JavaScript allows for dynamic page rendering, so users can interact with the contents of the page in real time. Knowledge of the basic techniques we've learned so far sets you on the road toward being able to create complex interactions like those in video games you may have played before!\u003c/p\u003e","exportId":"gfa305b482885eb09f0f1c78c0eb83044"},{"id":173481,"title":"The JavaScript DOMContentLoaded Event","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-domcontentloaded\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-domcontentloaded/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-domcontentloaded\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-domcontentloaded/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUnderstand why \u003ccode\u003eDOMContentLoaded\u003c/code\u003e is important\u003c/li\u003e\n\u003cli\u003eSet up an event on \u003ccode\u003eDOMContentLoaded\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eAn important part of working with JavaScript is ensuring that your code runs at the right time. Every now and then, you may have to add some extra code to ensure your code doesn't run before the page is ready. Many factors go into determining the \"right time,\" but there are two events that represent two particularly important milestones in terms of page load:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event fires when your page's DOM is fully parsed from the underlying html\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eload\u003c/code\u003e event fires when a resource and all its dependent resources (including CSS and JavaScript) have finished loading\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn this lesson, we'll be focusing on \u003ccode\u003eDOMContentLoaded\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eWhy is DOMContentLoaded Important?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event is the browser's built-in way to indicate when a page's html is loaded into the DOM. It isn't possible to manipulate HTML elements that haven't rendered yet, so trying to manipulate the DOM before the page fully loads can potentially lead to problems.\u003c/p\u003e\n\u003cp\u003eWe need to make sure to wait until \u003cem\u003eafter\u003c/em\u003e the \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event is triggered to safely execute our code. By creating an event listener, we can keep our code from immediately firing when \u003ccode\u003eindex.js\u003c/code\u003e is loaded.\u003c/p\u003e\n\u003ch2\u003eSet Up an Event Listener for DOMContentLoaded\u003c/h2\u003e\n\u003cp\u003eAs always, \u003ccode\u003eaddEventListener\u003c/code\u003e takes a \u003ccode\u003eString\u003c/code\u003e with the name of the event and a \u003cem\u003ecallback function\u003c/em\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"DOMContentLoaded\", function() {\u003cbr\u003e  console.log(\"The DOM has loaded\");\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you put the above code in \u003ccode\u003eindex.js\u003c/code\u003e, 'The DOM has loaded' will not be logged immediately. In fact, you can confirm this yourself by putting a second \u003ccode\u003econsole.log()\u003c/code\u003e \u003cem\u003eoutside\u003c/em\u003e of the event listener callback:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"DOMContentLoaded\", function() {\u003cbr\u003e  console.log(\"The DOM has loaded\");\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003econsole.log(\u003cbr\u003e  \"This console.log() fires when index.js loads - before DOMContentLoaded is triggered\"\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eCode your solution in \u003ccode\u003eindex.js\u003c/code\u003e. First, set up a \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event listener to detect when the HTML page has loaded and the document is ready to be manipulated. Use the event's callback function to target the paragraph element with \u003ccode\u003eid=\"text\"\u003c/code\u003e and replace the text with \"This is really cool!\"\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote:\u003c/em\u003e Using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText\"\u003e\u003ccode\u003einnerText\u003c/code\u003e\u003c/a\u003e property to modify DOM element content will not work for this lab. Use \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\"\u003e\u003ccode\u003etextContent\u003c/code\u003e\u003c/a\u003e or \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\"\u003e\u003ccode\u003einnerHTML\u003c/code\u003e\u003c/a\u003e instead.\u003c/p\u003e\n\u003cp\u003eTest your event in the browser to confirm that it is working.\u003c/p\u003e\n\u003ch2\u003eDOMContentLoaded Does Not Wait For Stylesheets and Images to Load\u003c/h2\u003e\n\u003cp\u003eIt is important to note that the \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event fires once the initial HTML document finishes loading, but does not wait for CSS stylesheets or images to load. In situations where you need \u003cem\u003eeverything\u003c/em\u003e to completely load, use the \u003ccode\u003eload\u003c/code\u003e event instead.\u003c/p\u003e\n\u003cp\u003eWhile both will work, it is often the case that we only need the HTML content to fully load in order to execute our JavaScript. Since images can take some time to load, using the \u003ccode\u003eload\u003c/code\u003e event means visitors of a webpage may see your webpage in its original state for a couple of seconds before any JavaScript fires and updates the DOM.\u003c/p\u003e\n\u003cp\u003eFor a comparison of the difference between \u003ccode\u003eDOMContentLoaded\u003c/code\u003e and \u003ccode\u003eload\u003c/code\u003eed events, \u003ca href=\"http://web.archive.org/web/20150405114023/http://ie.microsoft.com/testdrive/HTML5/DOMContentLoaded/Default.html\"\u003echeck out this example\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eJavaScript provides us the powerful ability to update webpage content without refreshing. We can, for instance, have a page with some basic HTML structure and use JavaScript to fill in the content, enabling the possibility of dynamic webpages.\u003c/p\u003e\n\u003cp\u003eThis sort of action, however, will only work if the HTML content is loaded on the page before the JavaScript is executed. The \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event ensures that our JavaScript code is being executed immediately after the HTML is finished loading.\u003c/p\u003e\n\u003ch2\u003eAddendum\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event is now a widely accepted standard. Modern web development, however, provides us with additional choices for setting up when we want our JavaScript to execute. For example, HTML5 now has a \u003ca href=\"https://www.w3schools.com/tags/att_script_defer.asp\"\u003e\u003ccode\u003edefer\u003c/code\u003e\u003c/a\u003e attribute for use in \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tags:\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003escript\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003esrc\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eindex.js\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003edefer\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003escript\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThis functions in a similar way to \u003ccode\u003eDOMContentLoaded\u003c/code\u003e: the JavaScript code stored in \u003ccode\u003eindex.js\u003c/code\u003e will be loaded up but won't execute until the HTML page completely loads.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded\"\u003eDOMContentLoaded\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.kirupa.com/html5/running_your_code_at_the_right_time.htm\"\u003eRunning Your Code at the Right Time\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gd797de7ff47f18263fa1046ea48850ab"},{"id":173482,"title":"Challenge: TaskLister Mini-Project","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-tasklister-mini-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-tasklister-mini-project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-tasklister-mini-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-tasklister-mini-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a functioning to-do list application\u003c/li\u003e\n\u003cli\u003eSuppress a default action with \u003ccode\u003eevent.preventDefault()\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be creating a simple to-do list application that uses\nJavaScript to manipulate the DOM.\u003c/p\u003e\n\n\u003cp\u003eCheck out the \u003ca href=\"https://learn-co-curriculum.github.io/js-task-lister-lite/\"\u003eworking demo\u003c/a\u003e!\u003c/p\u003e\n\n\u003ch2\u003eLab: Build a Functioning To-Do List Application\u003c/h2\u003e\n\n\u003cp\u003eInstead of relying on tests, this lab is \u003cem\u003edeliverable driven\u003c/em\u003e. You will be\nresponsible for ensuring that your solution works as intended by testing the\nbehavior in the browser.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this repository\u003c/li\u003e\n\u003cli\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in Chrome\u003c/li\u003e\n\u003cli\u003ePut your JavaScript knowledge to the test and work your way through the\ndeliverables\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eStructuring Your Code\u003c/h3\u003e\n\n\u003cp\u003eYou've been provided with a basic HTML file, as well as an \u003ccode\u003eindex.js\u003c/code\u003e file where\nyou can implement your solution. Note that the \u003ccode\u003eindex.js\u003c/code\u003e file is contained\nwithin a \u003ccode\u003esrc\u003c/code\u003e folder — this is a common pattern that you will see in many labs\nmoving forward. If you take a look at the \u003ccode\u003eindex.html\u003c/code\u003e file, you'll see that the\n\u003ccode\u003escript\u003c/code\u003e tag that loads the code file includes the \u003ccode\u003esrc\u003c/code\u003e directory in its path:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;script src=\"./src/index.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eDeliverables\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eAs a user, I should be able to type a task into the input field.\u003c/li\u003e\n\u003cli\u003eAs a user, I should be able to click some form of a submit button.\u003c/li\u003e\n\u003cli\u003eAs a user, I expect to see the task string that I provided appear in the DOM\nafter the submit button has been activated.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026gt; \u003cstrong\u003eNote:\u003c/strong\u003e \u003ca href=\"https://learn-co-curriculum.github.io/js-task-lister-lite/\"\u003eWhile the example\u003c/a\u003e shows one possible working\n\u0026gt; implementation of the TaskLister app, yours can (and is encouraged to!) look\n\u0026gt; however you like!\u003c/p\u003e\n\n\u003ch3\u003eHTML Forms\u003c/h3\u003e\n\n\u003cp\u003eFor this lab, we are going to be using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form\"\u003eHTML \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element\u003c/a\u003e to\ncapture the tasks the user enters. HTML forms can be quite complex and\nsophisticated but, at their most basic, consist of opening and closing \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e\ntags that enclose one or more \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e elements where users can enter\ninformation, and a way to submit the form. There are many types of \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input\"\u003einput\nfields\u003c/a\u003e to choose from; we use the \u003ccode\u003etype\u003c/code\u003e attribute to specify the one we\nwant. For this lab, we are using two: a text field (\u003ccode\u003etype=\"text\"\u003c/code\u003e) and a submit\nbutton (\u003ccode\u003etype=\"submit\"\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eIf you look in the \u003ccode\u003eindex.html\u003c/code\u003e file, you will see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    \u0026lt;form id=\"create-task-form\" action=\"#\" method=\"POST\"\u0026gt;\u003cbr\u003e      \u0026lt;label for=\"new-task-description\"\u0026gt;Task description:\u0026lt;/label\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" id=\"new-task-description\" name=\"new-task-description\" placeholder=\"description\"\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"submit\" value=\"Create New Task\"\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow take a look at the page in your browser. The rendered form looks like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/javascript-events/task_lister.png\" alt=\"TaskLister input form\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can see each of the components that are in our form's HTML:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ethe label for our input field (\"Task description:\")\u003c/li\u003e\n\u003cli\u003ethe input box, with the placeholder content \"description\", and\u003c/li\u003e\n\u003cli\u003ethe button that's created by the \u003ccode\u003esubmit\u003c/code\u003e input tag\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eLet's take a closer look at the opening \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e tag. You'll see it includes an\n(optional) \u003ccode\u003eid\u003c/code\u003e attribute and two other attributes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;form id=\"create-task-form\" action=\"#\" method=\"POST\"\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause HTML forms were designed to be handled by backend programming languages\nsuch as PHP, the \u003ccode\u003eaction\u003c/code\u003e attribute would normally contain a path to the backend\ncode that processes the data captured from the user. Because we will be handling\nthe form using JavaScript, we don't need to provide a path. By convention, we\nset that attribute to \u003ccode\u003e\"#\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003emethod\u003c/code\u003e attribute specifies the \u003cem\u003etype\u003c/em\u003e of action we're executing when the\nform is submitted. The \u003ccode\u003emethod\u003c/code\u003e attribute's value (in this case, \"POST\") is an\n\u003cem\u003eHTTP Verb\u003c/em\u003e. (Although it is not required, you will often see HTTP verbs in all\ncaps.) We will learn more about HTTP Verbs in the next section. For now, just\nknow that the \u003ccode\u003ePOST\u003c/code\u003e method is used when we want to capture the data submitted\nby our form and use it in some way.\u003c/p\u003e\n\n\u003cp\u003eBy default, the HTML \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element submits the form and redirects the browser\nto a new url when the \u003ccode\u003e\u0026lt;submit\u0026gt;\u003c/code\u003e button is clicked. This default behavior makes\nsense when form submission is being handled by a back-end programming language.\nHowever, this \u003cem\u003eis not\u003c/em\u003e the experience we want to build in this lab. We instead\nwant to handle the submission of the form using JavaScript and update the DOM\nwithout reloading the page. Therefore, we need to prevent that event from\nperforming its default behavior.\u003c/p\u003e\n\n\u003ch3\u003eSuppress a Default Action with \u003ccode\u003eEvent.preventDefault()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe deliverables for this lab require you to use JavaScript to handle the\nclicking of the submit button. To do this, you'll need to listen for a \u003ccode\u003esubmit\u003c/code\u003e\nevent on the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element. In order to \u003cem\u003eprevent\u003c/em\u003e the \u003cem\u003edefault\u003c/em\u003e behavior of\nthe \u003ccode\u003esubmit\u003c/code\u003e event, when our event listener \"sees\" the event, it needs to invoke\nthe \u003ccode\u003epreventDefault()\u003c/code\u003e method on it.\u003c/p\u003e\n\n\u003cp\u003eTake a look at the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault\"\u003eMDN Documentation on \u003ccode\u003eEvent.preventDefault()\u003c/code\u003e\u003c/a\u003e.\nYou'll see how JavaScript is used to prevent a form element (checkbox) from\ndoing its \u003cem\u003edefault\u003c/em\u003e behavior (appearing checked upon click). You'll want to\nprevent \u003ccode\u003esubmit\u003c/code\u003e from doing its default behavior in a similar fashion.\u003c/p\u003e\n\n\u003ch3\u003eStretch Deliverables\u003c/h3\u003e\n\n\u003cp\u003eOnce you've got the required deliverables working, you may want to try to\nimplement one or more of the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA delete function that will remove tasks from your list\u003c/li\u003e\n\u003cli\u003eA priority value selected from a \u003ca href=\"https://www.w3docs.com/learn-html/html-select-tag.html\"\u003edropdown\u003c/a\u003e that is used to determine the color\nof the text in the list (e.g. red for high priority, yellow for medium, green\nfor low)\n\n\u003cul\u003e\n\u003cli\u003eAs an additional challenge, implement a sorting functionality that displays\nthe tasks in ascending or descending order based on priority\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eAn additional input field (e.g. user, duration, date due)\u003c/li\u003e\n\u003cli\u003eAbility to edit tasks\u003c/li\u003e\n\u003cli\u003eSomething of your choice! The main objective is to add a feature that allows\nthe user's input to affect the DOM\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gcf84d113e6c3beaa5c209f65b23729b0"},{"id":173483,"title":"Challenge: Interacting with the DOM using Events","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-challenge-interacting-with-the-dom\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-interacting-with-the-dom/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-interacting-with-the-dom\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-interacting-with-the-dom/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIf you open up index.html in the browser, you'll find a small application. It has a few features:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA Counter that increases by 1 each second\u003c/li\u003e\n\u003cli\u003ePlus and Minus buttons that increment or decrement the counter\u003c/li\u003e\n\u003cli\u003eA 'like' button (❤️) that adds a 'like' for the number that is currently\ndisplayed by the timer\u003c/li\u003e\n\u003cli\u003eA comment box that adds comments when submitted\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFirst, take a few minutes to explore and test out the behavior of the page.\nThink about how each of the features must work. What must be happening\nunderneath each of these features?\u003c/p\u003e\n\n\u003cp\u003eThe challenge is to reverse engineer these features and build them yourself,\nusing what you've learned about JavaScript and DOM Manipulation.\u003c/p\u003e\n\n\u003ch2\u003eRewriting the functionality\u003c/h2\u003e\n\n\u003cp\u003eTo begin, comment out the script tag linking to \u003ccode\u003ejs/index.min.js\u003c/code\u003e in the html\nfile. This will \"shut off\" the existing behaviors so you can begin recreating\nthem, using the \u003ccode\u003ejs/challenge.js\u003c/code\u003e file to write your code. You can see the\n\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag that loads this file just after the one for \u003ccode\u003eindex.min.js\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAdd the following features one by one, refreshing the page to see your\nfunctionality working as you build.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote: These deliverables are written in the form of \u003cem\u003eUser Stories\u003c/em\u003e. They\ndescribe the features from the perspective of a user when they visit the page.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003eAs a user, I should see the timer increment every second once the page has\nloaded.\u003c/li\u003e\n\u003cli\u003eAs a user, I can manually increment and decrement the counter using the plus\nand minus buttons.\u003c/li\u003e\n\u003cli\u003eAs a user, I can 'like' an individual number of the counter. I should see the\ncount of the number of 'likes' associated with that number displayed.\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAs a user, I can pause the counter, which should:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003epause the counter\u003c/li\u003e\n\u003cli\u003edisable all buttons except the pause button\u003c/li\u003e\n\u003cli\u003eswitch the label on the button from \"pause\" to \"resume\"\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAs a user, I should be able to click the \"restart\" button to restart the\ncounter and re-enable the buttons.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAs a user, I can leave comments on my gameplay, such as: \"Wow, what a fun\ngame this is.\"\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eHint for the timer\u003c/h2\u003e\n\n\u003cp\u003eIf you're not sure how to create or pause a timer, look into:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\"\u003e\u003ccode\u003esetTimeout\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\"\u003e\u003ccode\u003esetInterval\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval\"\u003e\u003ccode\u003eclearinterval\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g96fe2270b38a9a7a6638e72c3b124696"},{"id":173484,"title":"You're an Eventing Expert Now!","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-youre-an-eventing-expert\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-an-eventing-expert/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-an-eventing-expert\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-an-eventing-expert/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eReflect\u003c/h2\u003e\n\u003cp\u003eRemember our \"Simple Liker\" program? In it we saw that front-end web programming is using three \"pillars\" working together:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e☑ Manipulating the DOM\u003c/li\u003e\n\u003cli\u003e☑ Recognizing JavaScript events\u003c/li\u003e\n\u003cli\u003eCommunicating with the server\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow that you've conquered this section, you've learned all the fundamentals of the second pillar, recognizing JavaScript events. You used JavaScript events to invoke actions, created JavaScript functions and implemented event listeners.\u003c/p\u003e\n\u003ch2\u003eNext Step\u003c/h2\u003e\n\u003cp\u003eTwo pillars down, one to go. You're more than halfway to being able to make your own web applications. Next let's take what we've learned about the DOM and eventing and put it together with server communciation.\u003c/p\u003e","exportId":"youre-an-eventing-expert-now"}]},{"id":18927,"name":"Communicating with the Server","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g691a7b4148284c541f1935ae45a6c0f8","items":[{"id":173485,"title":"Introduction to Communicating with the Server","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-intro-to-communicating-with-the-server\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-intro-to-communicating-with-the-server/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-intro-to-communicating-with-the-server\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-intro-to-communicating-with-the-server/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecall our Three Pillars of Web Programming\u003c/li\u003e\n\u003cli\u003eDescribe the process of communicating with the server\u003c/li\u003e\n\u003cli\u003eDefine AJAX\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe're two-thirds of the way through our exploration of using JavaScript with the\nDOM. We know how to navigate and change the DOM and we know how to make and\nrecognize events. Along the way, we picked up necessary bits of JavaScript. Now\nwe're getting ready to pull it all together.\u003c/p\u003e\n\n\u003ch2\u003eRecall Our Three Pillars of Web Programming\u003c/h2\u003e\n\n\u003cp\u003eRemember our pillars? By this point, they should feel familiar, but it's\nworthwhile to refer back to them as we move along to keep our journey in\nperspective. So, in that spirit, our three pillars of web programming are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eManipulating the DOM\u003c/li\u003e\n\u003cli\u003eCreating events\u003c/li\u003e\n\u003cli\u003eCommunicating with the server\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe last piece, how we send and retrieve information from the server, is what we\nneed to complete our \"favoriting\" app.\u003c/p\u003e\n\n\u003ch2\u003eDescribe the Process of Communicating With the Server\u003c/h2\u003e\n\n\u003cp\u003eIn our Simple Liker app, “favoriting” is a click event on a heart icon that\nupdates the user’s DOM to show a full heart.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe click event kicks off a sequence of actions to notify the server that the\npost has received a like. The server updates the post in the backend then passes\na message back to the browser indicating that the update was made successfully.\nWhen that success message is received, we then update the DOM to reflect the\nchange.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e The update to the DOM is not \u003cem\u003enecessarily\u003c/em\u003e dependent on a success\nmessage from the server. We could just update the DOM in response to the click\nevent itself. However, this is \u003cstrong\u003e\u003cem\u003enot\u003c/em\u003e\u003c/strong\u003e the proper procedure. We only want to\nupdate the DOM once we know that the server successfully \u003cem\u003epersisted\u003c/em\u003e the\nchange in the backend.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe user doesn't see this entire process happening. Ideally, the process moves\nquickly enough that the user barely even notices that it took place. All they\nknow is that the little heart icon is now reflecting their clicked appreciation.\nTo keep the user experience fast and smooth, we use something called the \u003cem\u003eAJAX\ntechnique\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDefine AJAX\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003eAJAX\u003c/em\u003e is short for \"asynchronous JavaScript and XML,\" and it's the process used\nto make requests to the server and update the DOM without reloading the web\npage. There are a few different ways to implement this; a bit later in this\nsection we'll take a look at one of the most efficient ways: \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe name \"asynchronous JavaScript and XML\" arises from the fact that, in the\npast, the data sent back to the browser from the server was encoded as XML. Now,\nhowever, it's most often sent back in a format known as JSON (\"Jay-Sawn\").\nJavaScript Object Notation (JSON) is a \u003ccode\u003eString\u003c/code\u003e that JavaScript knows how to\nturn into an \u003ccode\u003eObject\u003c/code\u003e. Using JavaScript, we can access the JSON returned by the\nserver and use it to update the DOM.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe last skill we need to be effective JavaScript web programmers is\ncommunication with the server. Once we've mastered this final step, we will be\nable to listen for an event, persist the change to the backend, and manipulate\nthe DOM to reflect the updated information. With the AJAX technique, we'll learn\nhow to send and receive data quickly so that we keep our users' experience a\npositive one.\u003c/p\u003e","exportId":"introduction-to-communicating-with-the-server"},{"id":173486,"title":"How The Web Works","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-how-the-web-works\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-how-the-web-works/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-how-the-web-works\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-how-the-web-works/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a client and server\u003c/li\u003e\n\u003cli\u003eExplain what an HTTP request is\u003c/li\u003e\n\u003cli\u003eExplain the nature of request and response\u003c/li\u003e\n\u003cli\u003eDefine a static site vs. dynamic site\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHow many times a day do you use the internet? How many times do you load a\ndifferent web page? Think about how many times you do this in a year! As a user,\nall you really need to know is the URL to navigate to. You don't need to concern\nyourself with what's going on behind the scenes. But if you want to be a web\ndeveloper, it's important to have some understanding of how the web works. From\nhere on out, you are no longer just a user of the internet. You are a creator of\nthe web.\u003c/p\u003e\n\n\u003ch2\u003eClient and Server\u003c/h2\u003e\n\n\u003cp\u003eSo seriously, how does this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttps://www.youtube.com/user/AdeleVEVO\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTurn into this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/request-intro.png\" alt=\"AdeleVEVO\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe internet operates based on conversations between the client (more familiarly\nknown as the browser) and the server (the code running the web site you're\ntrying to load). By typing in that URL into your browser, you (the client) are\n\u003cem\u003erequesting\u003c/em\u003e a web page. The server then receives the request, processes it, and\nsends a \u003cem\u003eresponse\u003c/em\u003e. Your browser receives that response and shows it to you.\nThese are the fundamentals of the web. Browsers send requests, and servers send\nresponses. Until today you have always been a client. Moving forward you will be\nbuilding the server. This means processing requests, creating responses, and\nsending them back to the client.\u003c/p\u003e\n\n\u003cp\u003eServers can be written using a number of different backend programming languages\n(e.g., Ruby) or frameworks (e.g., Ruby on Rails). You browser doesn't know, nor\ndoes it care, what server it talks to. How does that work? How can a server that\nwas written 15 years ago still work with a browser written 15 months or days\nago?\u003c/p\u003e\n\n\u003cp\u003eIn addition, you can use multiple clients! You can use Chrome, Safari, Internet\nExplorer, Opera, and many others. All of those browsers are able to talk to the\nsame server. Let's take a closer look at how this occurs.\u003c/p\u003e\n\n\u003ch2\u003eHTTP Overview\u003c/h2\u003e\n\n\u003cp\u003eBeing able to switch out both the server and the client happens because the way\nbrowsers and servers talk is controlled by a contract or \u003cem\u003eprotocol\u003c/em\u003e.\nSpecifically it is a protocol created by Tim Berners-Lee called the \u003cstrong\u003eH\u003c/strong\u003eyper\n\u003cstrong\u003eT\u003c/strong\u003eext \u003cstrong\u003eT\u003c/strong\u003eransfer \u003cstrong\u003eP\u003c/strong\u003erotocol or HTTP. Your server will receive requests\nfrom the browser that follow HTTP. It then responds with an HTTP response that\nall browsers are able to parse.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eHTTP\u003c/code\u003e is the language browsers speak. Every time you load a web page, you are\nmaking an \u003ccode\u003eHTTP\u003c/code\u003e request to the site's server, and the server sends back an\n\u003ccode\u003eHTTP\u003c/code\u003e response.\u003c/p\u003e\n\n\u003cp\u003eIn the example above, the client is making an \u003ccode\u003eHTTP GET request\u003c/code\u003e to YouTube's\nserver. YouTube's server then sends back a response and the client renders the\npage in the browser.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/how-the-web-works/Image_17_ComputerServer.png\" alt=\"computer server\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRequests\u003c/h2\u003e\n\n\u003ch3\u003eURI\u003c/h3\u003e\n\n\u003cp\u003eWhen you make a request on the web, how do you know where to send it?  This is\ndone through \u003cstrong\u003eU\u003c/strong\u003eniform \u003cstrong\u003eR\u003c/strong\u003eesource \u003cstrong\u003eI\u003c/strong\u003edentifiers or URIs. You've probably\nalso heard these referred to as URLs. Both are fine. Let's look at the URI we\nused up top.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://www.youtube.com/user/adelevevo\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis URI is broken into three parts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ehttp\u003c/code\u003e - the protocol\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eyoutube.com\u003c/code\u003e - the domain\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e/user/adelevevo\u003c/code\u003e - the resource\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe \u003ccode\u003eprotocol\u003c/code\u003e is the way we're sending our request. There are several different\ntypes of internet protocols (SMTP for emails, HTTPS for secure requests, FTP for\nfile transfers). To load a website, we use HTTP.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edomain name\u003c/code\u003e is a string of characters that identifies the unique location\nof the web server that hosts that particular website. This will be things like\n\u003ccode\u003eyoutube.com\u003c/code\u003e and \u003ccode\u003egoogle.com\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eresource\u003c/code\u003e is the particular part of the website we want to load. YouTube\nhas millions and millions of channels and videos, so we need to identify the\nspecific resource we want: \u003ccode\u003e/user/adelevevo\u003c/code\u003e (because we can't get Hello out of\nour heads).\u003c/p\u003e\n\n\u003cp\u003eAn analogy that works well is an apartment building. The domain is the entire\nbuilding. Within that building, though, there are hundreds of apartments. We use\nthe specific resource (also called a path) to indicate that we care about\napartment 4E. The numbering/lettering system is different for every apartment\nbuilding, just as the resources are laid out a bit differently for every\nwebsite. For example, if we search for \"URI\" using Google, the path looks like\nthis: \u003ccode\u003ehttps://www.google.com/search?q=URI\u003c/code\u003e. If we use Facebook to execute the\nsame search, it looks like this: \u003ccode\u003ehttps://www.facebook.com/search/top/?q=uri\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eHTTP Verbs\u003c/h3\u003e\n\n\u003cp\u003eWhen making a web request, in addition to the path, you also need to specify the\naction you would like the server to perform. We do this using \u003cem\u003eHTTP Verbs\u003c/em\u003e. We\ncan use the same resource for multiple actions, so it is the \u003cstrong\u003ecombination\u003c/strong\u003e of\nthe path and the HTTP verb that fully describes the request.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eGET\u003c/code\u003e requests are the most common browser requests. This just means \"hey\nserver, please GET me this resource\", i.e., load this web page. Other verbs are\nused if we want to send some data from the user to the server, or modify or\ndelete existing data. Below is a list of the available HTTP Verbs and what each\nis used for. We will learn about them a bit later:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\n\u003ctr\u003e\n    \u003cth\u003eVerb\u003c/th\u003e\n    \u003cth\u003eDescription\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eHEAD\u003c/td\u003e\n    \u003ctd\u003eAsks for a response like a GET but without the body\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eGET\u003c/td\u003e\n    \u003ctd\u003eRetrieves a representation of a resource\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ePOST\u003c/td\u003e\n    \u003ctd\u003eSubmits data to be processed in the body of the request\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ePUT\u003c/td\u003e\n    \u003ctd\u003eUploads a representation of a resource in the body of the request\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDELETE\u003c/td\u003e\n    \u003ctd\u003eDeletes a specific resource\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eTRACE\u003c/td\u003e\n    \u003ctd\u003eEchoes back the received request\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eOPTIONS\u003c/td\u003e\n    \u003ctd\u003eReturns the HTTP methods the server supports\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eCONNECT\u003c/td\u003e\n    \u003ctd\u003eConverts the request to a TCP/IP tunnel (generally for SSL)\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ePATCH\u003c/td\u003e\n    \u003ctd\u003eApply a partial modification of a resource\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3\u003eRequest Format\u003c/h3\u003e\n\n\u003cp\u003eOur client so far has made a request to YouTube's server. In this case, a\nrequest to \u003ccode\u003e/user/adelevevo\u003c/code\u003e. The server then responds with all the code\nassociated with that resource (everything between \u003ccode\u003e\u0026lt;!doctype html\u0026gt;\u003c/code\u003e and\n\u003ccode\u003e\u0026lt;/html\u0026gt;\u003c/code\u003e), including all images, CSS files, JavaScript files, videos, music,\netc.\u003c/p\u003e\n\n\u003cp\u003eWhen the client makes a request, it includes other items besides just the URL in\nthe \"headers.\" The request header contains all the information the server needs\nin order to fulfill the request: the type of request, the resource (path), and\nthe domain, as well as some other metadata. The request header would look\nsomething like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/request-header.png\" alt=\"request header\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eResponses\u003c/h2\u003e\n\n\u003cp\u003eOnce your server receives the request, it will do some processing (run code you\nwrote!) and then send a response back. The server's response is separated into\ntwo sections: the headers and the body.\u003c/p\u003e\n\n\u003cp\u003eThe server's response headers look something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/response-headers.png\" alt=\"response header\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe headers contain all of the metadata about the response. This includes things\nlike content-length (how big is my response) and what type of content it is. The\nheaders also include the status code of the response.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003ebody\u003c/em\u003e of the response is what you see rendered on the page. It is all of\nthat HTML/CSS that you see! Most of the data of a response is in the body, not\nin the headers.\u003c/p\u003e\n\n\u003ch3\u003eStatus Codes\u003c/h3\u003e\n\n\u003cp\u003eThe primary way that a human user knows that a web request was successful is\nthat the page loads without any errors. However, you can also tell a request was\nsuccessful if you see that the response header's status code is \u003ccode\u003e200\u003c/code\u003e. That code\ntells the \u003cem\u003ebrowser\u003c/em\u003e that the request was successfully received. You've probably\nseen another common status code, \u003ccode\u003e404\u003c/code\u003e. This means \"file not found.\"\u003c/p\u003e\n\n\u003cp\u003eThe HTTP protocol has an agreed upon contract for different \"status codes\" that\nare used to let the browser know the status of a request. A status code is a\n3-digit integer where the first digit represents the class of the response, and\nthe remaining two digits represent a specific status.\u003c/p\u003e\n\n\u003cp\u003eThere are 5 primary values that the first digit can take:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e1xx: Informational (request received and continuing process)\u003c/li\u003e\n\u003cli\u003e2xx: Success (request successfully received, understood, and accepted)\u003c/li\u003e\n\u003cli\u003e3xx: Redirection (further action must be taken to complete request)\u003c/li\u003e\n\u003cli\u003e4xx: Client Error (request contains bad syntax and can't be completed)\u003c/li\u003e\n\u003cli\u003e5xx: Server Error (server couldn't complete request)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere are a number of other status codes within each category and it's good to\nget familiar with them. You can see a full \u003ca href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\"\u003elist of status codes on\nWikipedia\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eStatic vs. Dynamic Websites\u003c/h2\u003e\n\n\u003cp\u003eIt's important to note that there are two different types of websites: static\nand dynamic. A \u003ccode\u003estatic\u003c/code\u003e website is one that doesn't change unless a developer\nopens up an HTML file and modifies the content of that file. \u003ccode\u003eDynamic\u003c/code\u003e websites\nare sites where the content changes based on user input (e.g. Facebook, Twitter,\nYelp, etc.). Every time you visit the site, the content you see is most likely\ndifferent than the last time you visited because someone else gave a review of\nthat restaurant, or sent out a new tweet, or commented on that image you liked.\u003c/p\u003e\n\n\u003cp\u003eIt can be helpful to think of static sites as \"websites\" and dynamic sites as\n\"web apps\", although there is no official definition of either term or the\ndifference between them. The terms provide a convenient way to distinguish in a\nnon-technical way between sites with static vs. dynamic content.\u003c/p\u003e\n\n\u003cp\u003eThe flow of request and response is slightly different for a static website than\nfor a dynamic web app. When the client wants to load a static site, the client\nmakes a request, and the server finds the file on a disk and sends it back. Done\nand Done.\u003c/p\u003e\n\n\u003cp\u003eIt gets a little bit more complex with a web app. The client makes a request,\nthe server runs application code (backend code written using something like\nRuby), and returns a dynamically generated response.\u003c/p\u003e\n\n\u003ch2\u003eVideo Review\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=gI9wqEDPiY0\"\u003eHow the Web Works, Part 1\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"how-the-web-works"},{"id":173488,"title":"Using JSON Server and Postman to Mock Client/Server Communication","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-using-json-server-and-postman\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-json-server-and-postman/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-json-server-and-postman\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-json-server-and-postman/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSet up JSON Server as a mock backend\u003c/li\u003e\n\u003cli\u003eUse Postman to mimic frontend responses\u003c/li\u003e\n\u003cli\u003ePractice the client/server request/response cycle\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn typical full-stack applications, a frontend (the client) and a backend (the\nserver) work together. The frontend initiates communication, often\neither asking for data or sending some data to be stored. The backend is\nactively listening for these requests, and when one is received, it will do some\nwork for us and send a response back. This response may include requested data,\nor it could include a confirmation that data was stored. This request/response\ncycle is a critical piece of web development and the backbone of most modern\nwebsites.\u003c/p\u003e\n\n\u003cp\u003eIn the next lessons, we'll start to explore the first half of this\nrequest/response cycle — initiating requests from the frontend. Before we start\npracticing in JavaScript, though, it would be helpful if we could explore how\nthis cycle works. Luckily, we have some tools that can mimic both frontend\nrequests and backend responses. For the frontend, we have \u003ca href=\"https://www.postman.com/downloads/\"\u003ePostman\u003c/a\u003e, an\napp that can be used to build requests without writing code. For the backend, we\nhave \u003ca href=\"https://www.npmjs.com/package/json-server\"\u003eJSON Server\u003c/a\u003e, a Node application that mimics the behavior of\na full backend server.\u003c/p\u003e\n\n\u003cp\u003eCombined, we can practice sending requests from Postman to the JSON server and see\nhow the server responds.\u003c/p\u003e\n\n\u003ch2\u003eReview: What is JSON Again?\u003c/h2\u003e\n\n\u003cp\u003eJSON, JavaScript Object Notation, is a \u003cem\u003edata interchange format\u003c/em\u003e. We use JSON to\nsend structured data between frontends and backends. There are a few formats\navailable to handle this task, but JSON has some specific advantages that make\nit a great choice for our purposes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIt is human-readable. JSON data is stored as a \u003ccode\u003eString\u003c/code\u003e, but structured in a\nway that looks very similar to a JavaScript object.\u003c/li\u003e\n\u003cli\u003eIt is easy to convert into a JavaScript object. JavaScript has built-in\nmethods for turning objects into JSON and vice versa. Very handy!\u003c/li\u003e\n\u003cli\u003eDespite having JavaScript in the name, the format is compatible with many\nprogramming languages. Languages like Ruby and Python have their own methods\nfor handling JSON and converting it into object-like data structures.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBelow is an example of what a piece of JSON looks like when sent from client to\nserver (or vice versa):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e'{\"name\": \"Tesla\", \"occupation\": \"Inventor\"}'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe data above is a \u003ccode\u003eString\u003c/code\u003e, but you can see that it contains what looks like\nkey/value pairs. Notice that the keys and values are both wrapped in quotes\nwhile other characters, \u003ccode\u003e{\u003c/code\u003e, \u003ccode\u003e}\u003c/code\u003e, and \u003ccode\u003e:\u003c/code\u003e, are not. This is required syntax for\nJSON. All text-based data, even keys, must be wrapped in quotes within the\nlarger \u003ccode\u003eString\u003c/code\u003e. Numbers are the only exception to this.\u003c/p\u003e\n\n\u003cp\u003eWhen working with JSON, the outside quotes are not always shown. Instead of a\nsingle line like above, we may see JSON like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"name\": \"Tesla\",\u003cbr\u003e  \"occupation\": \"Inventor\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you are curious about JSON syntax, there are many JSON validators online like\n\u003ca href=\"https://jsonlint.com/\"\u003ethis one\u003c/a\u003e that will confirm if your JSON is formatted\ncorrectly.\u003c/p\u003e\n\n\u003ch2\u003eWhat is JSON Server?\u003c/h2\u003e\n\n\u003cp\u003eJSON Server is a freely available Node package that can turn a JSON file on your\ncomputer into mock data storage. When JSON Server is running, we can send\nrequests to get data from storage or add data to it, as though we were talking\nto a server with a database.\u003c/p\u003e\n\n\u003cp\u003eA huge benefit of JSON Server is that we don't have to spend much time setting\nthe mock server up, allowing us to focus on developing the frontend of an\napplication first.\u003c/p\u003e\n\n\u003ch2\u003eSetting up JSON Server\u003c/h2\u003e\n\n\u003cp\u003eTo start using JSON Server, we need to install it, then provide a basic set of\ndata to practice with.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll install JSON Server globally on your machine:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install -g json-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the command above, you should now be able to spin up a mock server from any\ndirectory on your computer. Alternatively, if you remove the \u003ccode\u003e-g\u003c/code\u003e option from\nthis command but are in a folder with a \u003ccode\u003epackage.json\u003c/code\u003e file, \u003ccode\u003ejson-server\u003c/code\u003e will\nbe added as a dependency in the file.\u003c/p\u003e\n\n\u003cp\u003eNext, we'll need to create a file that will act as our data storage.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etouch db.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOpen this file in your text editor and paste in the following content:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"articles\": [\u003cbr\u003e    {\u003cbr\u003e      \"id\": 1,\u003cbr\u003e      \"title\": \"Example Article\",\u003cbr\u003e      \"content\": \"This is an example.\"\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": 2,\u003cbr\u003e      \"title\": \"Second Article\",\u003cbr\u003e      \"content\": \"This is also an example.\"\u003cbr\u003e    }\u003cbr\u003e  ]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've created one top-level key, \u003ccode\u003e\"articles\"\u003c/code\u003e, in our JSON, which points\nto an array. This array contains two elements, both objects with three keys:\n\u003ccode\u003e\"id\"\u003c/code\u003e, \u003ccode\u003e\"title\"\u003c/code\u003e, and \u003ccode\u003e\"content\"\u003c/code\u003e. Our first goal will be to access this data.\u003c/p\u003e\n\n\u003ch2\u003eStart the Server\u003c/h2\u003e\n\n\u003cp\u003eTo start JSON Server, run the following command from the same directory that\n\u003ccode\u003edb.json\u003c/code\u003e is in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejson-server --watch db.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen run, you'll see some messaging about how to access our JSON data. By\ndefault, JSON Server will start up on port \u003ccode\u003e3000\u003c/code\u003e. You should see a notice\nthat you can access the server at \u003ccode\u003ehttp://localhost:3000\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOpen your browser and paste this URL in. If the server is running correctly, you\nshould be presented with a page of information provided by JSON Server. On this\npage, you'll see a \u003cstrong\u003eResources\u003c/strong\u003e section that lists one resource: \u003ccode\u003e/articles\u003c/code\u003e. The\nserver has read the \u003ccode\u003edb.json\u003c/code\u003e file and found our \u003ccode\u003earticles\u003c/code\u003e key, turning it into a\nresource. Click \u003ccode\u003e/articles\u003c/code\u003e and you will be navigated to a new page,\n\u003ccode\u003ehttp://localhost:3000/articles\u003c/code\u003e. Instead of a page of info, you'll see the value\nassociated with \u003ccode\u003earticles\u003c/code\u003e in our data, an array containing two objects:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {\u003cbr\u003e    \"id\": 1,\u003cbr\u003e    \"title\": \"Example Article\",\u003cbr\u003e    \"content\": \"This is an example.\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"title\": \"Second Article\",\u003cbr\u003e    \"content\": \"This is also an example.\"\u003cbr\u003e  }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can go even further — notice the \u003ccode\u003e\"id\"\u003c/code\u003e key that is listed. Instead of just\ngoing to \u003ccode\u003e/articles\u003c/code\u003e, we can append the value of \u003ccode\u003e\"id\"\u003c/code\u003e to the end of the URL:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttp://localhost:3000/articles/1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, instead of an array, we get the object inside of it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 1,\u003cbr\u003e  \"title\": \"Example Article\",\u003cbr\u003e  \"content\": \"This is an example.\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNeat! So what is happening? We won't go into too much detail, but JSON server is\nfollowing \u003ca href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\"\u003eRESTful conventions\u003c/a\u003e. By providing \u003ccode\u003e/articles\u003c/code\u003e followed by \u003ccode\u003e/1\u003c/code\u003e\nin our URL, JSON Server knows we're asking for a resource called \u003ccode\u003earticles\u003c/code\u003e, and\nwithin that resource, we're asking for whatever data has an ID of \u003ccode\u003e1\u003c/code\u003e. The\n\u003ccode\u003earticles\u003c/code\u003e content we store in our JSON file could be in any order. JSON Server\nwill look through and match the request to an ID and return \u003cem\u003ethat\u003c/em\u003e content. If\nwe change to \u003ccode\u003e2\u003c/code\u003e, we'll get the other data we stored in \u003ccode\u003earticles\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLeave JSON server running and we'll move on to the next tool, Postman.\u003c/p\u003e\n\n\u003ch2\u003eWhat is Postman?\u003c/h2\u003e\n\n\u003cp\u003eAs we mentioned, Postman is an application that allows us to mock up frontend\nrequests without writing any JavaScript. With Postman, we can practice sending\nrequests to our JSON Server.\u003c/p\u003e\n\n\u003ch2\u003eSetting up Postman\u003c/h2\u003e\n\n\u003cp\u003eTo get the Postman app, head over to\n\u003ca href=\"https://www.postman.com/downloads/\"\u003ehttps://www.postman.com/downloads/\u003c/a\u003e and click \u003cstrong\u003eDownload the App\u003c/strong\u003e.\nThere is a web version of Postman, but this will not work with our \u003ccode\u003elocalhost\u003c/code\u003e\nserver.\u003c/p\u003e\n\n\u003cp\u003eOnce it's downloaded and installed, open the app. You should see a screen\ninviting you to create an account or sign in. At the bottom of that screen,\nclick the \"Skip and go to the app\" link. On the next screen, you should see a\n\"Get Started\" section on the right side; click the first option: \"Create a\nrequest\". You should then see an input field starting with \u003cstrong\u003eGET\u003c/strong\u003e and\ncontaining the placeholder text \u003cem\u003eEnter request URL\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/get-request-bar.png\" alt=\"Get request bar\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe're now ready to send requests to our server.\u003c/p\u003e\n\n\u003ch2\u003eRetrieving Data from our JSON Server using Postman\u003c/h2\u003e\n\n\u003cp\u003eHere, we'll write in the URL we previously used to get our JSON server data,\n\u003ccode\u003ehttp://localhost:3000/articles/1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/postman-request.png\" alt=\"localhost entered\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce entered, hit the \u003cstrong\u003eSend\u003c/strong\u003e button. If everything is working, you should see\nthe same article data from earlier, an object with three keys: \u003ccode\u003e\"id\"\u003c/code\u003e, \u003ccode\u003e\"title\"\u003c/code\u003e,\nand \u003ccode\u003e\"content\"\u003c/code\u003e. You're now performing the full request/response cycle using our\ntools! Let's explore what is happening.\u003c/p\u003e\n\n\u003cp\u003eWhen you click \u003cstrong\u003eSend\u003c/strong\u003e on Postman, you send a request to the URL you provided.\nThis is a \u003cstrong\u003eGET\u003c/strong\u003e request — a request for data from a resource. Our JSON server\nis actively listening for these requests. If you look at your terminal where\nJSON server is running, you will see that the server has recognized your GET\nrequest, displaying something similar to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGET /articles/1 200 25.666 ms\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eJSON Server sees that this is a GET request. It also notes that the request is\nspecifically for \u003ccode\u003e/articles/1\u003c/code\u003e. \u003ccode\u003e200\u003c/code\u003e is a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eHTTP status code\u003c/a\u003e that\nindicates the request was received, accepted and responded to successfully.\n\u003ccode\u003e25.666 ms\u003c/code\u003e is the amount of time it took to complete the request, in\nmilliseconds. Back in Postman, we can see the response from our server in the\nlower panel and confirm we received what we expected.\u003c/p\u003e\n\n\u003cp\u003eDepending on what we need, we can change out the details of our request. Imagine\nwe are building a local news site containing many articles. Instead of\nrequesting just the article with an ID of \u003ccode\u003e1\u003c/code\u003e, we might just send a request for\n\u003ccode\u003e/articles\u003c/code\u003e and get everything available from the server. In complex webpages,\nwe may send requests to both depending on what page is being accessed — we\nmight have an index page of all article titles, and when a title is clicked,\nwe'd send a request for a single article.\u003c/p\u003e\n\n\u003ch2\u003eSending Data to our JSON Server from Postman\u003c/h2\u003e\n\n\u003cp\u003eWe've now seen how a GET HTTP request works, so let's move on to a POST request.\nPOST requests are used when we want to \u003cem\u003esend data to\u003c/em\u003e a server.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e There are a couple of other HTTP request options for sending data —\nPUT and PATCH — but for simplicity, we'll just focus on POST requests for now.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eContinuing our news site example, let's say we've written a new article and\nwant to add it to the site. A POST request allows us to send the contents of\nthis new article, along with any other details we want to include, like the\ntitle. As long as we've structured the request correctly, JSON Server will\nreceive the request, recognize it as a POST request and attempt to store the\narticle information in the 'database.'\u003c/p\u003e\n\n\u003cp\u003eTo send data to our server, first, we need to switch our Postman request from GET\nto POST. Click on GET beside the URL bar to display a drop-down menu of HTTP\nrequest options and switch over to POST.\u003c/p\u003e\n\n\u003cp\u003eSecond, we need to adjust the URL we're using. In this particular case, we're\nsending content that should become a \u003cem\u003enew\u003c/em\u003e article. Because of this, we don't\nwant to use a specific ID value in the URL. Instead, we'll send a request to\n\u003ccode\u003e/articles\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttp://localhost:3000/articles\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen JSON Server receives the request, it'll recognize it as a POST request and\nautomatically add it to the appropriate resource. It'll also assign an ID for\nus, so we don't need to worry about including one.\u003c/p\u003e\n\n\u003cp\u003eFinally, before we can send our request, we need to provide the data we want to\nsend. In Postman, just below the URL bar, click the \u003cstrong\u003eBody\u003c/strong\u003e tab, then choose\nthe \u003cstrong\u003eraw\u003c/strong\u003e option, and select \u003cstrong\u003eJSON\u003c/strong\u003e from the drop-down menu.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/postman-post.png\" alt=\"postman post\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the code box just below these options, write in the following JSON:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"title\": \"Third Article\",\u003cbr\u003e  \"content\": \"Another example!\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that we don't need to wrap the contents in quotes and left out the ID\nkey/value. Postman will handle these for us.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/postman-post-body.png\" alt=\"postman post example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen ready, click \u003cstrong\u003eSend\u003c/strong\u003e. In the terminal, we should see JSON Server\nrecognizing the request. In Postman, we'll see the server's response in the lower panel:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"title\": \"Third Article\",\u003cbr\u003e  \"content\": \"Another example!\",\u003cbr\u003e  \"id\": 3\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTypically, after a successful POST request, the server will send back the new\ndata as a response. In this case, it sent back what we sent \u003cem\u003eand\u003c/em\u003e included the\nnewly assigned ID.\u003c/p\u003e\n\n\u003cp\u003eAs one final confirmation, navigate to your \u003ccode\u003edb.json\u003c/code\u003e file and open it up. You\nshould see that the file has changed to include your newly submitted content!\nCongratulations, you've persisted data to \u003ccode\u003edb.json\u003c/code\u003e!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAlthough we haven't learned how to build our own backends yet, JSON server can\nact as a placeholder, enabling us to learn the first half of the\nrequest/response cycle without having to worry about a backend. Also,\nbecause JSON Server follows RESTful conventions that are widely used throughout\nthe internet, we'll start to become familiar with how server resources\n\u003cem\u003eshould\u003c/em\u003e be structured long before we create our own.\u003c/p\u003e\n\n\u003cp\u003eWe encourage you to try creating your own resources in \u003ccode\u003edb.json\u003c/code\u003e. A few quick\nnotes about setting resources up:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAny top-level key/value pair (like \u003ccode\u003earticles\u003c/code\u003e in our example) will be\nautomatically treated as a resource we can retrieve and send data to.\u003c/li\u003e\n\u003cli\u003eThe value should be either an array or an object. Try both to see how they\ndiffer!\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith JSON Server, you'll now be able to design frontends that persist data!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.npmjs.com/package/json-server\"\u003eJSON Server\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.postman.com/downloads/\"\u003ePostman\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eHTTP Status Codes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\"\u003eRepresentational State Transfer (REST)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"ge42dd3778e54c04ace1908b6ed2d5406"},{"id":173489,"title":"Using fetch()","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-using-fetch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-fetch/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-fetch\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-fetch/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain how to fetch data with \u003ccode\u003efetch()\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWorking around backwards compatibility issues\u003c/li\u003e\n\u003cli\u003eIdentify examples of the AJAX technique on popular websites\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen it comes to making engaging web sites, we often find ourselves needing to\nsend a lot of data (text, images, media, etc.) so that the page is exciting.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBut\u003c/strong\u003e browsers won't show anything until they've processed all the of that\ndata. As a result, they show nothing. The screen stays blank and users\nexperience \"waiting.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/tXL4FHPSnVJ0A/giphy.gif\" alt=\"Spanky waits\"\u003e\u003c/p\u003e\n\n\u003cp\u003eToo much waiting means visitors will click away and never come back. Web users\nexpect sites to load quickly \u003cstrong\u003eand\u003c/strong\u003e to stay updated. Research shows that 40\npercent of visitors to a website will leave if the site takes more than 3\nseconds to load. Mobile users are even \u003cem\u003eless\u003c/em\u003e patient.\u003c/p\u003e\n\n\u003cp\u003eTo solve this problem and help provide lots of other really great features, we\ndeveloped a technique called \u003cstrong\u003e\u003cem\u003eAJAX\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn AJAX we:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDeliver an initial, engaging page using HTML and CSS which browsers render\n\u003cem\u003equickly\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eThen\u003c/em\u003e we use JavaScript to add more to the DOM, behind the scenes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAJAX relies on several technologies:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThings called \u003ccode\u003ePromise\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eThings called \u003ccode\u003eXMLHttpRequestObject\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Serialization\"\u003eserialization format\u003c/a\u003e called JSON for \"JavaScript Object Notation\"\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing\"\u003easynchronous Input / Output\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\"\u003ethe event loop\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePart of what makes AJAX complicated to learn is that to understand it\n\u003cem\u003ethoroughly\u003c/em\u003e, you need to understand \u003cem\u003eall\u003c/em\u003e these components. For the moment,\nhowever, we're going to gloss over all these pieces in this lesson. It just so\nhappens that modern browsers have \u003cem\u003eabstracted\u003c/em\u003e all those components into a\nsingle function called \u003ccode\u003efetch()\u003c/code\u003e. While someone interviewing to be a front-end\ndeveloper will be expected to be able to explain all those components above\n(which we \u003cem\u003ewill\u003c/em\u003e cover later), while we're getting the hang of things, we're\ngoing to simplify our task by using \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's learn to use \u003ccode\u003efetch()\u003c/code\u003e to apply the AJAX technique: a way to load\nadditional data \u003cem\u003eafter\u003c/em\u003e information is presented to the user.\u003c/p\u003e\n\n\u003ch2\u003eExplain How to Fetch Data with \u003ccode\u003efetch()\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003efetch()\u003c/code\u003e function retrieves data. It's a global \u003cem\u003emethod\u003c/em\u003e on the \u003ccode\u003ewindow\u003c/code\u003e\nobject. That means you can use it simply by calling \u003ccode\u003efetch()\u003c/code\u003e and passing in a\npath to a resource as an argument. To use the data that is returned by the\n\u003ccode\u003efetch()\u003c/code\u003e, we need to chain on the \u003ccode\u003ethen()\u003c/code\u003e method. We can see what this looks\nlike below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(\"string representing a URL to a data source\")\n.then(function(response) {\u003cbr\u003e  return response.json();\u003cbr\u003e})\n.then(function(json){\u003cbr\u003e  // Use the data inside of `json` to do DOM manipulation\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's add some multi-line (\u003ccode\u003e/*...*/\u003c/code\u003e) comments (which JavaScript will\nignore) to describe what's happening:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(\"string representing a URL to a data source\")\u003cbr\u003e  /*\u003cbr\u003e    Here we are calling `fetch()` and passing a URL to a data source as the\u003cbr\u003e    argument. The function call returns an object that represents what the data\u003cbr\u003e    source sent back. It does *not* return the actual content. (More about this\u003cbr\u003e    later.)\u003cbr\u003e  */\u003cbr\u003e\u003cbr\u003e  .then(function(response) {\u003cbr\u003e    return response.json();\u003cbr\u003e  })\u003cbr\u003e\u003cbr\u003e  /*\u003cbr\u003e    Next, we call the then() method on the object that comes back from the\u003cbr\u003e    `fetch()`. We capture the object into the `response` parameter so it can be\u003cbr\u003e    passed as an argument into a callback function.\u003cbr\u003e\u003cbr\u003e    Inside the callback function, we do whatever processing we need on the\u003cbr\u003e    object, in this case, converting it into JSON using the built-in `json()`\u003cbr\u003e    method. (Another commonly-used method is `text()`, which will convert the\u003cbr\u003e    response into plain text.) Finally, we return the JSON-ified response. \u003cbr\u003e\u003cbr\u003e    Note that we *have to return* the content that we've gotten out of the\u003cbr\u003e    response and converted to JSON in order to use the data in the next then()\u003cbr\u003e    method call.\u003cbr\u003e\u003cbr\u003e    This first callback function is usually only one line: returning the \u003cbr\u003e    content from the response after converting it into the format me need.\u003cbr\u003e  */\u003cbr\u003e\u003cbr\u003e  .then(function(json){\u003cbr\u003e    // Use the data inside of `json` to do DOM manipulation\u003cbr\u003e  })\u003cbr\u003e  /*\u003cbr\u003e    This time, the `then()` method is receiving the object that we returned\u003cbr\u003e    from the first call to `then()` (our JSON-ified object, in this case). We\u003cbr\u003e    capture the object in the parameter `json` and pass it into a second\u003cbr\u003e    callback function, where we will write code to do DOM manipulation using\u003cbr\u003e    the data from the fetch\u003cbr\u003e  */\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e As always, we can name the parameters being used in our callback\nfunctions anything we like, but you will often see \u003ccode\u003eresponse\u003c/code\u003e (or \u003ccode\u003eresp\u003c/code\u003e) and\n\u003ccode\u003ejson\u003c/code\u003e used.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eFilling Out the Example\u003c/h3\u003e\n\n\u003cp\u003eLet's fill out our base skeleton.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll provide a \u003ccode\u003eString\u003c/code\u003e argument to \u003ccode\u003efetch()\u003c/code\u003e.  As it happens,\n\u003ccode\u003ehttp://api.open-notify.org/astros.json\u003c/code\u003e will provide a list of the humans in\nspace. You can paste this URL into a browser tab and see that the data uses a\nJSON structure.\u003c/p\u003e\n\n\u003cp\u003eJSON is a way to send a collection of data in the internet, formatted as a\n\u003ccode\u003eString\u003c/code\u003e. It just so happens that this string is written in a way that would be\nvalid JavaScript syntax for an \u003ccode\u003eObject\u003c/code\u003e instance. Thus the name \"JavaScript\nObject Notation\", or JSON (\"jay-sawn\"). Programmers find it very easy to think\nabout JavaScript \u003ccode\u003eObject\u003c/code\u003es, so they often send \"stringified\" versions of\n\u003ccode\u003eObject\u003c/code\u003es as responses.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ethen()\u003c/code\u003e takes a function. Here is where you tell JavaScript to ask the\nnetwork response to be turned into JSON.  When you first start using \u003ccode\u003efetch()\u003c/code\u003e,\nmost of your first \u003ccode\u003ethen()\u003c/code\u003es are going have a callback function that looks like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction(response) {\u003cbr\u003e  return response.json();\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe final \u003ccode\u003ethen()\u003c/code\u003e is when you actually get some JSON (the return from the first\n\u003ccode\u003ethen()\u003c/code\u003e) passed in. You can then do something with that JSON. The easiest\noptions are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ealert()\u003c/code\u003e the JSON\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003econsole.log()\u003c/code\u003e the JSON\u003c/li\u003e\n\u003cli\u003ehand the JSON off to another function.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe'll go for the \u003ccode\u003econsole.log()\u003c/code\u003e approach:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction(json) {\u003cbr\u003e  console.log(json)\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSTRETCH:\u003c/strong\u003e But you \u003cem\u003eshould\u003c/em\u003e be able to imagine that you could do some DOM\nmanipulation instead.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eHere's a completed example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://api.open-notify.org/astros.json')\n.then(function(response) {\u003cbr\u003e  console.log(response);\u003cbr\u003e  return response.json();\u003cbr\u003e})\n.then(function(json) {\u003cbr\u003e  console.log(json);\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"http://i.giphy.com/3osxYwZm9WZwnt1Zja.gif\" alt=\"kimmy wow\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's perform a demonstration. Navigate to \u003ca href=\"http://open-notify.org\"\u003ehttp://open-notify.org\u003c/a\u003e in an\n\u003cstrong\u003eincognito\u003c/strong\u003e tab. We need to go incognito to make sure that none of your\nbrowsing history interferes with this experiment.\u003c/p\u003e\n\n\u003cp\u003eOpen up DevTools and paste the following into the console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://api.open-notify.org/astros.json')\n.then(function(response) {\u003cbr\u003e  return response.json();\u003cbr\u003e}).then(function(json) {\u003cbr\u003e  console.log(json);\u003cbr\u003e  console.log(`Holy cow! There are ${json[\"number\"]} humans in space.`);\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/js-async-fetch-readme/simple_fetch_incog_window.png\" alt=\"Simple fetch()\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou might notice in the DevTools console that this chained method call returned\na \u003ccode\u003ePromise\u003c/code\u003e. We'll cover that later.\u003c/p\u003e\n\n\u003ch2\u003eWorking Around Backwards Compatibility Issues\u003c/h2\u003e\n\n\u003cp\u003eAs you can see, \u003ccode\u003efetch()\u003c/code\u003e provides us with a short way to fetch and work with\nresources. However, \u003ccode\u003efetch()\u003c/code\u003e has only recently arrived in browsers. In older\ncode you might see \u003ccode\u003ejquery.ajax\u003c/code\u003e or \u003ccode\u003e$.ajax\u003c/code\u003e or an object called an\n\u003ccode\u003eXMLHttpRequestObject\u003c/code\u003e. These are distractions at this point in your education.\nAfter working with \u003ccode\u003efetch()\u003c/code\u003e you'll be able to more easily integrate these\nspecial topics.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Examples of the AJAX Technique on Popular Websites\u003c/h2\u003e\n\n\u003cp\u003eThe AJAX technique opens up a lot of uses!\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIt allows us to pull in dynamic content. The same \"framing\" HTML page remains\non screen for a cooking website. The recipe on display updates \u003cem\u003ewithout\u003c/em\u003e page\nload. This approach was pioneered by GMail whose nav area is swapped for mail\ncontent swiftly — thanks to AJAX.\u003c/li\u003e\n\u003cli\u003eIt allows us to get data from multiple sources. We could make a website that\ndisplays the current weather forecast and the current price of bitcoin side by\nside! This approach is used by most sites to render ads. Your content loads\nwhile JavaScript gets the ad to show and injects it into your page (sometimes\nAJAX can be used in a way that we don't \u003cem\u003eentirely\u003c/em\u003e like).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eMany pages use AJAX to provide users fast and engaging sites. It's certainly not\nrequired in all sites. In fact, using it could be a step backward if simple HTML\nwould suffice. However, as sites have more and more material, the AJAX technique\nis a great tool to have.\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003efetch()\u003c/code\u003e, we can include requests for data wherever we need to in our\ncode. We can \u003ccode\u003efetch()\u003c/code\u003e data on the click of a button or the expansion of an\naccordion display. There are many older methods for fetching data, but \u003ccode\u003efetch()\u003c/code\u003e\nis the future.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\"\u003eMDN Fetch API\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"using-fetch"},{"id":173490,"title":"Fetch Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-fetch-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-fetch-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-fetch-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-fetch-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to programmatically make a web request\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be using \u003ccode\u003efetch()\u003c/code\u003e to send web requests to the \u003ca href=\"https://anapioficeandfire.com/\"\u003eGame of\nThrones\u003c/a\u003e API. We'll make a web request to the API, and in return we will\nreceive a collection of data, structured like a nested JavaScript \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-fetch-lab/got-comeatme.gif\" alt=\"Game of Thrones Come at Me Gif\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eWhat's an API?\u003c/h3\u003e\n\n\u003cp\u003eAn \u003cstrong\u003eAPI\u003c/strong\u003e, or application programming interface, is a manner in which companies\nand organizations, like Twitter or the New York City government, or the super\nfans behind the Game of Thrones API, expose their data and/or functionality to\nthe public (i.e. talented programmers like yourself) for use. APIs allow us to\nadd important data and functionality to the applications we build. You can think\nof an API as one way in which data is exposed to us developers for use in our\nown programs.\u003c/p\u003e\n\n\u003cp\u003eJust like we can use JavaScript to send a web request for a web page that is\nwritten in HTML, and receive a response that is full of HTML, we can use\nJavaScript to send a web request to an API and receive a collection of JSON in\nreturn.\u003c/p\u003e\n\n\u003ch3\u003eWhat's JSON?\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eJSON\u003c/strong\u003e is a language-agnostic way of formatting data. If we send a web request\nto the Game of Thrones API, it will return to us a JSON collection of data. With\njust one easy line of code, we can tell JavaScript to treat that JSON collection\nas a nested \u003ccode\u003eObject\u003c/code\u003e. In this way, large and complicated amounts of data can be\nshared across platforms.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGo ahead and navigate to the \u003ca href=\"https://anapioficeandfire.com/\"\u003eGame of Thrones\u003c/a\u003e API in a separate browser\ntab and open DevTools. Copy the following code into the console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch('https://anapioficeandfire.com/api/books')\u003cbr\u003e  .then(resp =\u0026gt; resp.json())\u003cbr\u003e  .then(json =\u0026gt; console.log(json));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first line of code fetches the requested data from the API. In the second\nline, we use the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Body/json\"\u003e\u003ccode\u003ejson()\u003c/code\u003e method\u003c/a\u003e of the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Body\"\u003e\u003ccode\u003eBody\u003c/code\u003e mixin\u003c/a\u003e\nto render the API's response as plain old JavaScript object (POJO).\nBecause we're using arrow syntax, the object is returned and passed to the\n\u003cem\u003enext\u003c/em\u003e \u003ccode\u003ethen()\u003c/code\u003e. Finally, in the second \u003ccode\u003ethen()\u003c/code\u003e, the \u003ccode\u003econsole.log()\u003c/code\u003e prints\nthe JavaScript object to our console.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-fetch-lab/Image_26_FullAsynchronousJavaScript.png\" alt=\"Convert JSON into object\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe response from the API contains all ten books currently existing in the Game\nof Thrones series, in a JSON format.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/ajax/fetch_lab_promises_response.png\" alt=\"Fetch Response from Game of Thrones API\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSince we asked for all the books by making a query to the \u003ccode\u003e/books\u003c/code\u003e path, it gave\nus all the books.  APIs have many different variations and can be as\ncustomizable as the developer wants them to be. If you're really lucky, there\nwill be robust documentation to go along with the API that gives you a road map\nto help you figure out how to format your request for information. For now we'll\nfocus on just getting different kinds of information out of the API's \u003ccode\u003e/books\u003c/code\u003e\npath.\u003c/p\u003e\n\n\u003cp\u003ePlay around with the logged response. See if you can design a strategy to use\nthe logged object and find the following answers.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe 5th book in the series\u003c/li\u003e\n\u003cli\u003eThe 1031st character in the series\u003c/li\u003e\n\u003cli\u003eThe total number of pages of all the books\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNote that you do not need to encode these strategies to pass the lab. It's not\nuncommon for developers who are integrating with third-party APIs to have to do\nsome exploration of the returned data to find the thing they're looking for.\nThis is an opportunity for you to practice.\u003c/p\u003e\n\n\u003ch2\u003eDeliverables\u003c/h2\u003e\n\n\u003cp\u003eIn \u003ccode\u003eindex.js\u003c/code\u003e, there is an empty function, \u003ccode\u003efetchBooks()\u003c/code\u003e, that is called when\n\u003ccode\u003eindex.html\u003c/code\u003e is loaded. To pass this lab, this function should include a fetch\nrequest to the Game of Thrones API ('\u003ca href=\"https://anapioficeandfire.com/api/books'\"\u003ehttps://anapioficeandfire.com/api/books'\u003c/a\u003e).\nThe returned response should be converted to JSON. Then, it should call the\nsecond function, \u003ccode\u003erenderBooks()\u003c/code\u003e, passing in the JSON-ified data as the\nargument. To check if you have done this correctly, open up the index.html page\nof this lab; you should see a list of Game Of Thrones titles on your webpage.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: The tests in this lab need to access the \u003ccode\u003efetch()\u003c/code\u003e request you will\ncreate inside \u003ccode\u003efetchBooks()\u003c/code\u003e. In order to give them access, write your\nsolution so that \u003ccode\u003efetchBooks()\u003c/code\u003e \u003cem\u003ereturns\u003c/em\u003e the \u003ccode\u003efetch()\u003c/code\u003e. This will not change\nthe behavior of your \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAPIs are powerful tools that can help you leverage the power of the available\ndata on the web. Once you feel comfortable using the tools that access the data,\nthe world is your oyster!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-fetch-lab/got-dancing.gif\" alt=\"Dancing\"\u003e\u003c/p\u003e","exportId":"g89da3256de76e131fb0ba4305cf5c1e2"},{"id":179508,"title":"Fetch on Demand with Forms","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-js-fetch-on-demand-with-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-js-fetch-on-demand-with-forms/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-js-fetch-on-demand-with-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-js-fetch-on-demand-with-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice using forms to trigger \u003ccode\u003efetch\u003c/code\u003e requests\u003c/li\u003e\n\u003cli\u003eAdd content to the DOM based on user input\u003c/li\u003e\n\u003cli\u003eOverride default form behavior using JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lab, we accessed a remote API on page load and populated some\ncontent. This is a common practice in modern web development — when you visit a\nwebsite, that site may fetch data from a variety of places right as the page\nloads. Sites often retrieve data from a backend (like your account info) while\nalso retrieving data from other sources like APIs. From a user's perspective, it\nall just loads when they visit the site.\u003c/p\u003e\n\n\u003cp\u003eNow, we're going to look at a slightly different scenario — retrieving data based\non user input.\u003c/p\u003e\n\n\u003cp\u003eThe underlying code isn't much different than what we've seen. We'll pass a\nfunction into an event listener that, when called, sends a \u003ccode\u003efetch\u003c/code\u003e request, then\ndoes something with the retrieved data.\u003c/p\u003e\n\n\u003cp\u003eFor this code-along, we'll use JSON server as a mock API and build out a form to\nget specific data from our API.\u003c/p\u003e\n\n\u003ch2\u003eScenario\u003c/h2\u003e\n\n\u003cp\u003eImagine you've been hired to help build the frontend for a movie database\ncompany specializing in kids' movies. Some initial work has already been done\nfor you — we have an API with some starter data and some initial HTML, but very\nlittle JavaScript.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFirst, let's get the JSON server up and running in the background. From inside\nthis assignment's local directory, run \u003ccode\u003enpm install\u003c/code\u003e. When NPM finishes\ninstalling the necessary packages, run \u003ccode\u003ejson-server --watch db.json\u003c/code\u003e to start\nthe JSON server. In your browser, you can verify the server is running by\nnavigating to \u003ccode\u003ehttp://localhost:3000/movies\u003c/code\u003e to see the API data.\u003c/p\u003e\n\n\u003cp\u003eLeave the server running for now. Open a second terminal window and navigate to\nthis assignment again. We'll use this second window to open files in your\nbrowser or text editor while the server is running.\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your text editor and in the browser (\u003ccode\u003eopen index.html\u003c/code\u003e for\nMac, \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e for WSL). With everything set up, we can take a\nlook at the HTML we currently have.\u003c/p\u003e\n\n\u003ch2\u003eExisting HTML\u003c/h2\u003e\n\n\u003cp\u003eIn \u003ccode\u003eindex.html\u003c/code\u003e, the movies from our database are currently hard-coded along\nwith their IDs for our convenience. Below these is a form.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  \u0026lt;h2\u0026gt;Movies Database\u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u003cbr\u003e      \u0026lt;h3\u0026gt;The Brave Little Toaster\u0026lt;/h3\u0026gt;\u003cbr\u003e      \u0026lt;div\u0026gt;ID: 1\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u003cbr\u003e      \u0026lt;h3\u0026gt;The Princess Bride\u0026lt;/h3\u0026gt;\u003cbr\u003e      \u0026lt;div\u0026gt;ID: 2\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u003cbr\u003e      \u0026lt;h3\u0026gt;Spirited Away\u0026lt;/h3\u0026gt;\u003cbr\u003e      \u0026lt;div\u0026gt;ID: 3\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;/ul\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;section\u0026gt;\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;label for=\"searchByID\"\u0026gt;Search By ID\u0026lt;/label\u0026gt;\u003cbr\u003e      \u0026lt;input id=\"searchByID\" type=\"text\" placeholder=\"Enter ID here\"/\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  \u0026lt;/section\u0026gt;\u003cbr\u003e  \u0026lt;section id=\"movieDetails\"\u0026gt;\u003cbr\u003e    \u0026lt;h4\u0026gt;Title\u0026lt;/h4\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Summary\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/section\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis form doesn't do much at the moment. In the browser, if we type something\nin and try to submit, our input just disappears.\u003c/p\u003e\n\n\u003cp\u003eYour primary task will be to get this form working. When a user inputs a valid\nID, the movie information should appear on the page.\u003c/p\u003e\n\n\u003cp\u003eDoing this will involve a few steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd event listeners to capture form data and override a form's default behavior\u003c/li\u003e\n\u003cli\u003eFetch data based on what the user types into that form\u003c/li\u003e\n\u003cli\u003eDisplay that data on the page\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAdd Event Listeners to Capture Form Data and Override the Form's Behavior\u003c/h2\u003e\n\n\u003cp\u003eBy default, HTML form elements will refresh when a \u003cstrong\u003eSubmit\u003c/strong\u003e input is clicked.\nBefore we can run the code for fetching data, we need to override this behavior.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003e./src/index.js\u003c/code\u003e, we can do this by adding an event listener. Note that it\nalready contains one event listener and a callback function, \u003ccode\u003einit\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst init = () =\u0026gt; {\u003cbr\u003e\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edocument.addEventListener('DOMContentLoaded', init);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe want to make sure the JavaScript we write executes when the DOM is fully\nloaded. Any code related to DOM manipulation should either go in \u003ccode\u003einit\u003c/code\u003e or in a\nfunction called within \u003ccode\u003einit\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn our case, we want to add an event listener to the \u003ccode\u003eform\u003c/code\u003e element. We would first\ntarget the DOM element we want:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst inputForm = document.querySelector('form');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we'll need to add an event listener to the form, currently represented by\n\u003ccode\u003einputForm\u003c/code\u003e in our code.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"eventlisteners\"\u003eEvent listeners\u003c/a\u003e require two arguments: the \u003cem\u003etype\u003c/em\u003e of event, a\nstring, and the \u003cem\u003elistener\u003c/em\u003e, a callback function. In our case, we'll want to pass\nin \u003ccode\u003e'submit'\u003c/code\u003e as the type. For the listener, we need to provide a callback\nfunction that will be called to 'handle' the event.\u003c/p\u003e\n\n\u003cp\u003eWhen the event is triggered, the callback function we've provided will execute\nand an object representing the event will be passed in as an argument. We can\nexpect this to happen and can write a parameter in our code to store the event\nobject in a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt this point, the form will still refresh automatically, as we haven't done\nanything to override that yet. The \u003ccode\u003eevent\u003c/code\u003e object that gets passed in to our\ncallback contains a particular method we need in order to override our form's\nbehavior — \u003ccode\u003epreventDefault()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst init = () =\u0026gt; {\u003cbr\u003e  const inputForm = document.querySelector('form');\u003cbr\u003e\u003cbr\u003e  inputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e\u003cbr\u003e  });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edocument.addEventListener('DOMContentLoaded', init);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCalling this inside our callback will stop the page from refreshing and allow us\nto do something else instead. We can confirm everything is working by adding a\n\u003ccode\u003econsole.log\u003c/code\u003e in our callback:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    console.log(event);\u003cbr\u003e  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith dev tools open in the browser, if you enter some text and submit the form,\nyou should see the \u003ccode\u003eevent\u003c/code\u003e logged.\u003c/p\u003e\n\n\u003cp\u003eThere is quite a lot stored on this \u003ccode\u003eevent\u003c/code\u003e object, but we only need one thing:\nif we're fetching data based off a user input, we need to get the value of\nwhatever the user entered; whatever you just entered into the form.\u003c/p\u003e\n\n\u003cp\u003eThere are two ways we can get this value:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eevent\u003c/code\u003e object actually contains the value we need\u003c/li\u003e\n\u003cli\u003eWe can select the specific DOM element and get its value\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eAccess Input Value from an Event Object\u003c/h3\u003e\n\n\u003cp\u003eTo get the value from our \u003ccode\u003eevent\u003c/code\u003e object, we first want to access\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\"\u003e\u003ccode\u003eevent.target\u003c/code\u003e\u003c/a\u003e. \u003ccode\u003eevent.target\u003c/code\u003e returns the DOM element targeted\nby our event, a \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e in our case.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevent.target\u003cbr\u003e// =\u0026gt; \u0026lt;form\u0026gt;..\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eevent.target\u003c/code\u003e has a property, \u003ccode\u003echildren\u003c/code\u003e, that returns an\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection\"\u003e\u003ccode\u003eHTMLCollection\u003c/code\u003e\u003c/a\u003e containing all the nested elements of the\n\u003ccode\u003eevent.target\u003c/code\u003e element.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevent.target.children\u003cbr\u003e// =\u0026gt; HTMLCollection(3)\u0026nbsp;[label, input#searchByID, input, searchByID: input#searchByID]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooking at the form, we can see we want to access the \u003cem\u003esecond\u003c/em\u003e element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;form\u0026gt;\u003cbr\u003e  \u0026lt;label for=\"searchByID\"\u0026gt;Search By ID\u0026lt;/label\u0026gt;\u003cbr\u003e  \u0026lt;input id=\"searchByID\" type=\"text\" placeholder=\"Enter ID here\"/\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo we access this element via its index:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevent.target.children[1]\u003cbr\u003e// =\u0026gt; \u0026lt;input id=\"searchByID\" type=\"text\" placeholder=\"Enter ID here\"\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd to get the input value, we use the \u003ccode\u003evalue\u003c/code\u003e attribute\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevent.target.children[1].value\u003cbr\u003e// =\u0026gt; whatever you typed into the input\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAccess Input Value Directly\u003c/h3\u003e\n\n\u003cp\u003eWe will always need to use \u003ccode\u003eevent.preventDefault()\u003c/code\u003e to stop the page from\nrefreshing. However, we don't necessarily need to use the \u003ccode\u003eevent\u003c/code\u003e to get the\nvalue we need. We can also choose to access the \u003ccode\u003einput\u003c/code\u003e element directly.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  const input = document.querySelector('input#searchByID');\u003cbr\u003e\u003cbr\u003e  console.log(input.value);\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBoth options work for getting the value we need. For now, we'll use the code\nabove.\u003c/p\u003e\n\n\u003cp\u003eWith this data, and the default form behavior overridden, we can set up a \u003ccode\u003efetch\u003c/code\u003e\nrequest.\u003c/p\u003e\n\n\u003ch2\u003eFetch Data Based on User Input\u003c/h2\u003e\n\n\u003cp\u003eLet's first set up the basic shell of our \u003ccode\u003efetch\u003c/code\u003e request. To make sure everything\nis working and we can connect to the JSON server, we'll send a basic request to\n\u003ccode\u003e'http://localhost:3000/movies'\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst init = () =\u0026gt; {\u003cbr\u003e  const inputForm = document.querySelector('form');\u003cbr\u003e\u003cbr\u003e  inputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    const input = document.querySelector('input#searchByID');\u003cbr\u003e\u003cbr\u003e    console.log(input.value);\u003cbr\u003e\u003cbr\u003e    fetch('http://localhost:3000/movies')\u003cbr\u003e    .then(response =\u0026gt; response.json())\u003cbr\u003e    .then(data =\u0026gt; {\u003cbr\u003e      console.log(data);\u003cbr\u003e      // LOG: (3)\u0026nbsp;[{…}, {…}, {…}]\u003cbr\u003e    });\u003cbr\u003e  });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edocument.addEventListener('DOMContentLoaded', init);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf everything is working, you should see an array of three objects logged in the\nconsole using the code above.\u003c/p\u003e\n\n\u003cp\u003eThese three objects represent the three 'records' available from the movies API.\nIn our example, this is enough for us to move on — we have our user input\naccessible in \u003ccode\u003einput.value\u003c/code\u003e, and each object in \u003ccode\u003edata\u003c/code\u003e has an \u003ccode\u003eid\u003c/code\u003e property. We\ncould now iterate over \u003ccode\u003edata\u003c/code\u003e and find a match between \u003ccode\u003einput.value\u003c/code\u003e and \u003ccode\u003eid\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHowever, it isn't usually the case that we want to get \u003cem\u003eall\u003c/em\u003e records from an API\nor server. It would be helpful if we could have \u003cem\u003ethe 'server'\u003c/em\u003e do that work for\nus.\u003c/p\u003e\n\n\u003cp\u003eJSON Server follows RESTful conventions. As a result of these conventions, we\ncan expect to be able to access specific records directly by providing the\nappropriate parameter in our request URL.\u003c/p\u003e\n\n\u003cp\u003eIf you open a new tab in your browser and visit\n\u003ccode\u003ehttp://localhost:3000/movies/1\u003c/code\u003e, instead of seeing all three movie objects,\nyou'll be presented with the object with \u003ccode\u003e1\u003c/code\u003e as its \u003ccode\u003eid\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 1,\u003cbr\u003e  \"title\": \"The Brave Little Toaster\",\u003cbr\u003e  \"summary\": \"A group of appliances set off on a journey\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly, if we pass this URL into our \u003ccode\u003efetch\u003c/code\u003e request, we'll get this single\nobject in return.\u003c/p\u003e\n\n\u003cp\u003eWe need to modify the URL we pass to our \u003ccode\u003efetch\u003c/code\u003e function based on the input\ntyped into the HTML form. Using interpolation, we can adapt our existing code\nto do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  const input = document.querySelector('input#searchByID');\u003cbr\u003e\u003cbr\u003e  fetch(`http://localhost:3000/movies/${input.value}`)\u003cbr\u003e  .then(response =\u0026gt; response.json())\u003cbr\u003e  .then(data =\u0026gt; {\u003cbr\u003e    console.log(data);\u003cbr\u003e  });\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if you type a valid ID into the form, a specific movie object will be\nlogged!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e What happens when you enter an \u003cem\u003einvalid\u003c/em\u003e ID? In the console, you\nshould see a \u003ccode\u003e404\u003c/code\u003e error. Something to think about as you continue to learn —\nwhat are some ways you might \u003cem\u003ehandle\u003c/em\u003e an invalid request?\u003c/p\u003e\n\n\u003ch2\u003eDisplay Fetched Data on the Page\u003c/h2\u003e\n\n\u003cp\u003eWe've captured some user input and used it to customize a fetch request to our\nJSON server. The final step in our code-along is to display some of the\nretrieved data on the page. In the HTML, we have a \u003ccode\u003esection\u003c/code\u003e element with an id,\n\u003ccode\u003e\"movieDetails\"\u003c/code\u003e, that contains some filler content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;section id=\"movieDetails\"\u0026gt;\u003cbr\u003e  \u0026lt;h4\u0026gt;Title\u0026lt;/h4\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Summary\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/section\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's replace \u003ccode\u003eTitle\u003c/code\u003e and \u003ccode\u003eSummary\u003c/code\u003e with data we retrieved from our server. To do this,\nwe'll work inside the second \u003ccode\u003ethen\u003c/code\u003e of our \u003ccode\u003efetch\u003c/code\u003e request. First, we'll access the DOM\nand store the two elements in JavaScript\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(`http://localhost:3000/movies/${input.value}`)\u003cbr\u003e  .then(response =\u0026gt; response.json())\u003cbr\u003e  .then(data =\u0026gt; {\u003cbr\u003e    const title = document.querySelector('section#movieDetails h4');\u003cbr\u003e    const summary = document.querySelector('section#movieDetails p');\u003cbr\u003e  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere again, we could access these elements in many ways, this is just one way to\napproach it. We could add \u003ccode\u003eid\u003c/code\u003e attributes to the \u003ccode\u003eh4\u003c/code\u003e and \u003ccode\u003ep\u003c/code\u003e tags directly.\u003c/p\u003e\n\n\u003cp\u003eNext, we want to change the contents of our \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003esummary\u003c/code\u003e elements based\non the retrieved data. We can do this by setting their \u003ccode\u003einnerText\u003c/code\u003e values to the\nappropriate values in our data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(`http://localhost:3000/movies/${input.value}`)\u003cbr\u003e  .then(response =\u0026gt; response.json())\u003cbr\u003e  .then(data =\u0026gt; {\u003cbr\u003e    const title = document.querySelector('section#movieDetails h4');\u003cbr\u003e    const summary = document.querySelector('section#movieDetails p');\u003cbr\u003e\u003cbr\u003e    title.innerText = data.title;\u003cbr\u003e    summary.innerText = data.summary;\u003cbr\u003e  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll together, our code looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst init = () =\u0026gt; {\u003cbr\u003e  const inputForm = document.querySelector('form')\u003cbr\u003e\u003cbr\u003e  inputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    const input = document.querySelector('input#searchByID');\u003cbr\u003e\u003cbr\u003e    fetch(`http://localhost:3000/movies/${input.value}`)\u003cbr\u003e    .then(response =\u0026gt; response.json())\u003cbr\u003e    .then(data =\u0026gt; {\u003cbr\u003e      const title = document.querySelector('section#movieDetails h4');\u003cbr\u003e      const summary = document.querySelector('section#movieDetails p');\u003cbr\u003e\u003cbr\u003e      title.innerText = data.title;\u003cbr\u003e      summary.innerText = data.summary;\u003cbr\u003e    });\u003cbr\u003e  });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edocument.addEventListener('DOMContentLoaded', init);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the browser, if we type \u003ccode\u003e1\u003c/code\u003e into the form, we should see info on the \u003cstrong\u003eBrave\nLittle Toaster\u003c/strong\u003e. Type \u003ccode\u003e2\u003c/code\u003e, and we get \u003cstrong\u003eThe Princess Bride\u003c/strong\u003e. We're\nsuccessfully fetching data \u003cem\u003eon demand!\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eA core aspect of the modern JavaScript-based web is that web pages can\ndynamically update their content as a user interacts with it. When a user adds a\ncomment, adds an emoji response, etc., refreshing the page isn't a great\nexperience.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we've gone through the basic mechanisms for providing a better\nexperience. By capturing user input via event listeners, using \u003ccode\u003efetch\u003c/code\u003e requests,\nand DOM manipulation, we can update page content as a user requests it. Although\nthis won't be the case for all events, we also overrode HTML's default behavior.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\"\u003e\u003ccode\u003eaddEventListener()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\"\u003e\u003ccode\u003eevent.target\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection\"\u003e\u003ccode\u003eHTMLCollection\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g9debbb349d4a864eb39706882d4462a2"},{"id":173491,"title":"Fetch Dog CEO Challenge","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-challenge-dog-ceo\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-dog-ceo/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-dog-ceo\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-dog-ceo/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice accessing information from APIs and using it to update the DOM\u003c/li\u003e \u003cli\u003ePractice listening for user events and updating the DOM in response\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lab, you will write JavaScript to get images of dogs and a list of dog breeds from API's and render them to the DOM. You will also add some click behavior to the list elements and implement a filter.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: this lab does not contain tests. You will be working from the requirements described below and verifying that your code is working correctly in the browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eChallenge 1\u003c/h2\u003e  \u003cp\u003eThis repository includes an \u003ccode\u003eindex.html\u003c/code\u003e file that loads an \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst imgUrl = \"https://dog.ceo/api/breeds/image/random/4\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAdd JavaScript that:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eon page load, fetches the images using the url above ⬆️\u003c/li\u003e \u003cli\u003eparses the response as \u003ccode\u003eJSON\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eadds image elements to the DOM \u003cstrong\u003efor each\u003c/strong\u003e 🤔 image in the array\u003c/li\u003e \u003c/ul\u003e  \u003chr\u003e  \u003ch2\u003eChallenge 2\u003c/h2\u003e \u003cpre\u003e\u003ccode\u003econst breedUrl = 'https://dog.ceo/api/breeds/list/all' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter the first challenge is completed, add JavaScript that:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eon page load, fetches all the dog breeds using the url above ⬆️\u003c/li\u003e \u003cli\u003eadds the breeds to the page in the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e provided in \u003ccode\u003eindex.html\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003chr\u003e  \u003ch2\u003eChallenge 3\u003c/h2\u003e  \u003cp\u003eOnce all of the breeds are rendered in the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, add JavaScript so that, when the user clicks on any one of the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003es, the font color of that \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e changes. This can be a color of your choosing.\u003c/p\u003e  \u003chr\u003e  \u003ch2\u003eChallenge 4\u003c/h2\u003e  \u003cp\u003eOnce we are able to load \u003cem\u003eall\u003c/em\u003e of the dog breeds onto the page, add JavaScript so that the user can filter breeds that start with a particular letter using a \u003ca href=\"https://www.w3docs.com/learn-html/html-select-tag.html\"\u003edropdown\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eFor example, if the user selects 'a' in the dropdown, only show the breeds with names that start with the letter a. For simplicity, the dropdown only includes the letters a-d. However, we can imagine expanding this to include the entire alphabet.\u003c/p\u003e  \u003chr\u003e  \u003cp\u003e\u003cimg src=\"https://dog.ceo/img/dog.jpg\" alt=\"dog ceo\"\u003e\u003c/p\u003e","exportId":"g2a4554cb40d4ff190c7f2a8b944eec58"},{"id":173492,"title":"Asynchronous JavaScript","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-asynchronous-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-asynchronous-javascript/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-asynchronous-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-asynchronous-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eEstablish a metaphor for synchronous versus asynchronous work\u003c/li\u003e \u003cli\u003eDescribe a synchronous code block\u003c/li\u003e \u003cli\u003eDescribe an asynchronous code block\u003c/li\u003e \u003cli\u003eIdentify a synchronous code block\u003c/li\u003e \u003cli\u003eIdentify an asynchronous code block\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eBrowsers have to manage a lot. They're animating a \u003ccode\u003egif\u003c/code\u003e, they're displaying text, they're listening for clicks and scrolls, they're streaming a SoundCloud demo in a background tab, and they're running JavaScript programs.\u003c/p\u003e  \u003cp\u003eTo do all that work efficiently, browsers use an \u003cem\u003easynchronous\u003c/em\u003e execution model. That's a fancy way of saying \"they do little bits of lots of tasks until the tasks are done.\"\u003c/p\u003e  \u003cp\u003eIn this lesson we'll build a foundation of understanding around the asynchronous execution model of JavaScript.\u003c/p\u003e  \u003ch2\u003eEstablish a Metaphor for Synchronous Versus Asynchronous Work\u003c/h2\u003e  \u003cp\u003eLet's imagine a chef in a kitchen preparing a big meal. There's only one chef in this kitchen. The chef could prepare a turkey, then prepare some potatoes, then prepare some bread, then prepare green beans, and then serve it.\u003c/p\u003e  \u003cp\u003eOur diners would be treated to cold turkey, cold bread, cold green beans, and cold potatoes! This is not the goal. This meal was prepared in a \u003cem\u003esynchronous\u003c/em\u003e model: one-thing-after-the-other. Whatever happened \"blocked\" the rest of things that were waiting for work.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eInstead\u003c/em\u003e, our chef should move between each of these tasks quickly. The chef should use the \u003cem\u003easynchronous\u003c/em\u003e execution model browsers use. They should stuff the Turkey, they should measure the ingredients for the bread, they should peel the potatoes, etc. in a loop, \u003cem\u003eas fast as possible\u003c/em\u003e so that all the tasks \u003cem\u003eseem\u003c/em\u003e to be advancing at the same time. If the chef were to adopt this \u003cem\u003easynchronous\u003c/em\u003e model of work, the diners would be treated to piping-hot turkey, steaming potatoes, soft warm bread, and fresh warm green beans.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-asynchrony/Image_42_AsynchronyIllustrations.png\" alt=\"synch/asynch diagram\"\u003e\u003c/p\u003e  \u003ch2\u003eDescribe a Synchronous Code Block\u003c/h2\u003e  \u003cp\u003eSo far in JavaScript, we've mostly written \u003cem\u003esynchronous\u003c/em\u003e code where the execution model didn't matter.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst sum = 1 + 1; // Line 1\u003cbr\u003econst lis = document.querySelectorAll(\"li\"); // Line 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, when we hit the definition of \u003ccode\u003esum\u003c/code\u003e, this work doesn't rely on any \"unknowably long\" process. As soon as the work of \u003ccode\u003eLine 1\u003c/code\u003e is done, JavaScript will then go to work finding elements and assigning them to \u003ccode\u003elis\u003c/code\u003e in Line 2.\u003c/p\u003e  \u003cp\u003eBut let's consider a \"blocking\" operation. Imagine we had a synchronous function called \u003ccode\u003esynchronousFetch(\"URL STRING\")\u003c/code\u003e that fetches data from the network.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst tooMuchData = synchronousFetch(\"http://genome.example.com/...\"); // Line 1\u003cbr\u003econst lis = document.querySelectorAll(\"li\"); // Line 2\u003cbr\u003econsole.log(tooMuchData); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat work in Line 1 could take a long time (e.g. slow network), or might fail (e.g. failed login), or might retrieve a \u003cstrong\u003e\u003cem\u003ehuge\u003c/em\u003e\u003c/strong\u003e amount of data (e.g. The Human Genome).\u003c/p\u003e  \u003cp\u003eWith this synchronous approach, JavaScript won't continue to the next line of code until \u003ccode\u003esynchronousFetch\u003c/code\u003e has finished executing, so it's possible that the \u003ccode\u003econst lis\u003c/code\u003e in Line 2 \u003cem\u003ewill never execute\u003c/em\u003e! Furthermore, while JavaScript is executing \u003ccode\u003esynchronousFetch\u003c/code\u003e it will not be able to animate gifs, you won't be able to open a new tab, it will stop streaming SoundCloud, it will appear \"locked up.\" Recall our chef metaphor: while the chef prepares the potatoes, the green beans grow cold and the turkey congeals. Gross.\u003c/p\u003e  \u003ch2\u003eDescribe an Asynchronous Code Block\u003c/h2\u003e  \u003cp\u003eAsynchronous code in JavaScript looks a lot like event handlers. And if we think about it, that makes sense. You tell JavaScript:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eHey, do this thing. While you're waiting for that to finish, go do whatever maintenance you need: animate that gif, play some audio from SoundCloud, whatever. But when that first thing has an \"I'm done\" event, go \u003cstrong\u003eback\u003c/strong\u003e to it and \u003cem\u003ethen\u003c/em\u003e do some work that I defined in a function when I called it.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eLet's imagine a function called \u003ccode\u003easynchronousFetch\u003c/code\u003e that takes two arguments:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eA URL String\u003c/li\u003e \u003cli\u003eA callback function that will have the fetched data passed into it as its first argument when the \u003ccode\u003easynchronousFetch\u003c/code\u003e work is done\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003easynchronousFetch(\"http://genome.example.com/...\", tonOfGeneticData =\u0026gt; sequenceClone(tonOfGeneticData)); // Line 1\u003cbr\u003econst lis = document.querySelectorAll(\"li\"); // Line 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, JavaScript \u003cem\u003estarts\u003c/em\u003e the \u003ccode\u003easynchronousFetch\u003c/code\u003e in Line 1, and then sets \u003ccode\u003elis\u003c/code\u003e in Line 2.  Some time later (who knows how long?), the fetch of data finishes and \u003cem\u003ethat\u003c/em\u003e data is passed into the \"callback\" function as \u003ccode\u003etonOfGeneticData\u003c/code\u003e — back on Line 1.\u003c/p\u003e  \u003cp\u003eMost asynchronous functions in JavaScript have this quality of \"being passed a callback function.\" It's a helpful tool for spotting asynchronous code \"in the wild.\"\u003c/p\u003e  \u003cp\u003eLet's try seeing how synchronous versus asynchronous works in real JavaScript code.\u003c/p\u003e  \u003ch2\u003eIdentify a Synchronous Code Block\u003c/h2\u003e  \u003cp\u003eAs we have experienced in JavaScript, our code executes top-to-bottom, left-to-right.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction getData(){\u003cbr\u003e  console.log(\"2. Returning instantly available data.\");\u003cbr\u003e  return [{name: \"Dobby the House-Elf\"}, {name: \"Nagini\"}];\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction main(){\u003cbr\u003e  console.log(\"1. Starting Script\");\u003cbr\u003e  const data = getData();\u003cbr\u003e  console.log(`3. Data is currently ${JSON.stringify(data)}`);\u003cbr\u003e  console.log(\"4. Script Ended\");\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emain(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can copy and paste this into a DevTools console to see the result. It matches our default model of \"how code runs.\"\u003c/p\u003e  \u003ch2\u003eIdentify an Asynchronous Code Block\u003c/h2\u003e  \u003cp\u003eThe easiest asynchronous wrapper function is \u003ca href=\"https://www.w3schools.com/jsref/met_win_settimeout.asp\"\u003e\u003ccode\u003ewindow.setTimeout()\u003c/code\u003e\u003c/a\u003e. It takes as arguments:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea \u003ccode\u003eFunction\u003c/code\u003e (the \"callback\" function)\u003c/li\u003e \u003cli\u003ea \u003ccode\u003eNumber\u003c/code\u003e representing milliseconds\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003esetTimeout()\u003c/code\u003e will wait the specified number of milliseconds and then execute the callback.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esetTimeout(() =\u0026gt; console.log('Hello World!'), 2000); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis says \"Hello World!\"... in 2 seconds. Try it out in the DevTools console!\u003c/p\u003e  \u003cp\u003eSince this code is in an \u003cem\u003easynchronous\u003c/em\u003e container, JavaScript can do other work and \u003cem\u003ecome back\u003c/em\u003e when the work \"on the back-burner\" is done. If JavaScript \u003cem\u003edidn't\u003c/em\u003e have an asynchronous model, while you waited those 2 seconds, no gifs would animate and streaming audio might stall. Asynchronous execution makes browsers the exceedingly useful tools they are.\u003c/p\u003e  \u003cp\u003eWhat do you think the output will be here?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esetTimeout(() =\u0026gt; console.log('Hello World!'), 2000);\u003cbr\u003econsole.log(\"No, me first\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSure enough:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNo, me first\u003cbr\u003eHello World! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJavaScript is so committed to trying to squeeze in work when it gets a chance that this has the exact same output!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esetTimeout(() =\u0026gt; console.log('Hello World!'), 0); // 0 Milliseconds!!\u003cbr\u003econsole.log(\"No, me first\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere the browser has \u0026lt; 0 milliseconds (i.e. nanoseconds) to see if it can find any work to do — and it still does!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eJavaScript in the browser has an asynchronous execution model. This fact has little impact when you're writing simple code, but when you start doing work that might block the browser you'll need to leverage asynchronous functions. Remember, these functions can be surprising and nearly every JavaScript developer sooner or later forgets to reckon with asynchrony.\u003c/p\u003e  \u003cp\u003eWhile working asynchronously can be a bit of a headache for developers, it allows JavaScript to do other work whenever it has an opportunity. Important methods which require us to think asynchronously are \u003ccode\u003esetTimeout()\u003c/code\u003e and \u003ccode\u003efetch()\u003c/code\u003e, among others.\u003c/p\u003e","exportId":"asynchronous-javascript"},{"id":173493,"title":"Sending Data with Fetch","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-sending-data-with-fetch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-sending-data-with-fetch/fork\" target=\"_blank\"\u003e \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-sending-data-with-fetch\" target=\"_blank\"\u003e \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-sending-data-with-fetch/issues/new\" target=\"_blank\"\u003e \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e \u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to send data to a remote host\u003c/li\u003e\n\u003cli\u003eHandle the response from a successful request\u003c/li\u003e\n\u003cli\u003eHandle errors from an unsuccessful request\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIf you think about it, \u003ccode\u003efetch()\u003c/code\u003e is a little browser in your browser. You tell \u003ccode\u003efetch()\u003c/code\u003e to go to a URL by passing it an argument, e.g. \u003ccode\u003efetch(\"https://flatironschool.com\")\u003c/code\u003e, and it makes a network request. You chain calls to \u003ccode\u003efetch()\u003c/code\u003e with \u003ccode\u003ethen()\u003c/code\u003e. Each \u003ccode\u003ethen()\u003c/code\u003e call takes a callback function as its argument. Based on actions in the callback function, we can display or update content in the DOM.\u003c/p\u003e\n\u003cp\u003eThis is a lot like browsing the web: you change the URL in the URL bar, or you follow a link, and those actions tell the browser to go somewhere else and get the data. A technical way to describe that is: \"The browser implements an HTTP \u003ccode\u003eGET\u003c/code\u003e to retrieve the content at a URL.\" It's also 100% technically correct to say \"\u003ccode\u003efetch()\u003c/code\u003e uses an HTTP \u003ccode\u003eGET\u003c/code\u003e to retrieve the content specified by a URL.\"\u003c/p\u003e\n\u003cp\u003eThe browser also provides a helpful model for understanding what \u003cem\u003esending\u003c/em\u003e data from the browser looks like. We know this as an HTML \u003cem\u003eform\u003c/em\u003e. Technically speaking, HTML forms \"use an HTTP \u003ccode\u003ePOST\u003c/code\u003e to send content gathered in \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e elements to a specified URL.\" It's also 100% technically correct to say \"\u003ccode\u003efetch()\u003c/code\u003e uses an HTTP \u003ccode\u003ePOST\u003c/code\u003e to send content gathered in a JavaScript \u003ccode\u003eObject\u003c/code\u003e.\"\u003c/p\u003e\n\u003cp\u003eHTML forms are still widely used, but with \u003ccode\u003efetch()\u003c/code\u003e, we have more detailed control of the request. Using \u003ccode\u003efetch()\u003c/code\u003e, we can actually \u003cem\u003eoverride\u003c/em\u003e the normal behavior of an HTML form, capture any user input, package it up with the appropriate request information and send it out.\u003c/p\u003e\n\u003cp\u003eOur focus in this lesson will be learning how to send data using \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eUsing JSON Server to Mimic a Backend Database\u003c/h2\u003e\n\u003cp\u003eGo ahead and start up JSON Server by running \u003ccode\u003ejson-server --watch db.json\u003c/code\u003e in your terminal.\u003c/p\u003e\n\u003cp\u003eOnce the server is running, you'll see a list of available resource paths in the terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eResources\u003cbr\u003e  http://localhost:3000/dogs\u003cbr\u003e  http://localhost:3000/cats\u003cbr\u003e  http://localhost:3000/users\u003cbr\u003e  http://localhost:3000/robots \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese endpoints each provide different sets of data. Since it is mimicking a RESTful API, sending a request to '\u003ca href=\"http://localhost:3000/dogs\"\u003ehttp://localhost:3000/dogs\u003c/a\u003e' will return all records in the database for dogs, while '\u003ca href=\"http://localhost:3000/dogs/1\"\u003ehttp://localhost:3000/dogs/1\u003c/a\u003e' will return the dog with the id of 1.\u003c/p\u003e\n\u003cp\u003eSome example data is already present, stored in \u003ccode\u003edb.json\u003c/code\u003e. If the JSON server is running, you can also visit any of the above resources in a browser to see the data.\u003c/p\u003e\n\u003cp\u003eThe tests in this lab do not need JSON Server to be running, but if you would like to run tests while also running the server, open a second tab in your terminal.\u003c/p\u003e\n\u003ch2\u003eAnalyze Data Sent in an HTML Form\u003c/h2\u003e\n\u003cp\u003eLet's take a look at an HTML \u003ccode\u003eform\u003c/code\u003e (\u003cem\u003esee `sample_form.html` in this repo\u003c/em\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eaction\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ehttp://localhost:3000/dogs\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003emethod\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ePOST\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e Dog Name: \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edogName\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edogName\u003c/span\u003e\" /\u0026gt;\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e /\u0026gt;\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e Dog Breed: \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edogBreed\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edogBreed\u003c/span\u003e\" /\u0026gt;\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e /\u0026gt;\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eSubmit\u003c/span\u003e\" /\u0026gt;\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we use the element's default POST behavior in combination with a backend server, the key components for sending the submitted data to the server are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe destination URL as defined in the \u003ccode\u003eaction\u003c/code\u003e attribute of the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eThe HTTP verb to use as defined in the \u003ccode\u003emethod\u003c/code\u003e attribute of the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eThe key / value data obtained from the inputs in the fields \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe should expect that our \"mini-browser,\" \u003ccode\u003efetch()\u003c/code\u003e, will need those same bits of information in order to send a Post request to the server.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: with JSON Server and our HTML form, we already have what we need to submit our form the conventional way, without using JavaScript. To try this out, make sure the JSON server is running and open \u003ccode\u003esample_form.html\u003c/code\u003e in the browser. If you enter a dog name and breed in the input fields and click \"Submit,\" your information should successfully POST to the JSON server database, \u003ccode\u003edb.json\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eConstruct a POST Request Using \u003ccode\u003efetch()\u003c/code\u003e\n\u003c/h2\u003e\n\u003cp\u003eSending a POST request with \u003ccode\u003efetch()\u003c/code\u003e is more complicated than what we've seen up to this point. It still takes a \u003ccode\u003eString\u003c/code\u003e representing the destination URL as the first argument, as always. But as we will see below, \u003ccode\u003efetch()\u003c/code\u003e can also take a JavaScript \u003ccode\u003eObject\u003c/code\u003e as the \u003cem\u003esecond\u003c/em\u003e argument. This \u003ccode\u003eObject\u003c/code\u003e can be given certain \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters\"\u003eproperties\u003c/a\u003e that can be used to change \u003ccode\u003efetch()\u003c/code\u003e's default behavior.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(destinationURL, configurationObject); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003econfigurationObject\u003c/code\u003e contains three core components that are needed for standard POST requests: the HTTP verb, the headers, and the body.\u003c/p\u003e\n\u003ch3\u003eAdd the HTTP Verb\u003c/h3\u003e\n\u003cp\u003eSo far, comparing to an HTML form, we've only got the destination URL ('\u003ca href=\"http://localhost:3000/dogs\"\u003ehttp://localhost:3000/dogs\u003c/a\u003e' in this case). The next thing we need to include is the HTTP verb. By default, the verb is GET, which is why we can send simple GET requests with \u003cem\u003eonly\u003c/em\u003e a destination URL. To tell \u003ccode\u003efetch()\u003c/code\u003e that this is a POST request, we need to add a \u003ccode\u003emethod\u003c/code\u003e property to our \u003ccode\u003econfigurationObject\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\"\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAdd Headers\u003c/h3\u003e\n\u003cp\u003eThe second piece we need to include is some \u003cem\u003emetadata\u003c/em\u003e about the actual data we want to send. This metadata is in the form of \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\"\u003e\u003cem\u003eheaders\u003c/em\u003e\u003c/a\u003e. Headers are sent just ahead of the actual data payload of our POST request. They contain information about the data being sent.\u003c/p\u003e\n\u003cp\u003eOne very common header is \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\"\u003e\u003ccode\u003e\"Content-Type\"\u003c/code\u003e\u003c/a\u003e. \u003ccode\u003e\"Content-Type\"\u003c/code\u003e is used to indicate what format the data being sent is in. With JavaScript's \u003ccode\u003efetch()\u003c/code\u003e, \u003ca href=\"https://www.json.org/\"\u003eJSON\u003c/a\u003e is the most common format we will be using. We want to make sure that the destination of our POST request knows this. To do this, we'll include the \u003ccode\u003e\"Content-Type\"\u003c/code\u003e header:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\"\u003cbr\u003e  }\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach individual header is stored as a key/value pair inside an object. This object is assigned as the value of the \u003ccode\u003eheaders\u003c/code\u003e property as seen above.\u003c/p\u003e\n\u003cp\u003eWhen sending data, the server at the destination URL will send back a response, often including data that the sender of the \u003ccode\u003efetch()\u003c/code\u003e request might find useful. Just like \u003ccode\u003e\"Content-Type\"\u003c/code\u003e tells the destination server what type of data we're sending, it is also good practice to tell the server what data format we \u003cem\u003eaccept\u003c/em\u003e in return.\u003c/p\u003e\n\u003cp\u003eTo do this, we add a second header, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept\"\u003e\u003ccode\u003e\"Accept\"\u003c/code\u003e\u003c/a\u003e, and assign it to \u003ccode\u003e\"application/json\"\u003c/code\u003e as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  }\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are many other \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\"\u003eheaders\u003c/a\u003e available for particular uses. Some are used to send credentials or user authentication keys. Others are used to send cookies containing user info. \u003ccode\u003e\"Content-Type\"\u003c/code\u003e and \u003ccode\u003e\"Accept\"\u003c/code\u003e are two that we'll see the most throughout the remainder of this course.\u003c/p\u003e\n\u003cp\u003eServers may reject requests without the specific headers the server is configured to expect.\u003c/p\u003e\n\u003ch3\u003eAdd Data\u003c/h3\u003e\n\u003cp\u003eWe now have the destination URL, our HTTP verb, and headers that include information about the data we're sending. The last thing to add is the \u003cem\u003edata\u003c/em\u003e itself.\u003c/p\u003e\n\u003cp\u003eData being sent in \u003ccode\u003efetch()\u003c/code\u003e must be stored in the \u003ccode\u003ebody\u003c/code\u003e of the \u003ccode\u003econfigurationObject\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: /* Your data goes here */\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere is a catch here to be aware of — when data is exchanged between a client (your browser, for instance), and a server, the data is sent as \u003cem\u003etext\u003c/em\u003e. Whatever data we're assigning to the \u003ccode\u003ebody\u003c/code\u003e of our request needs to be a string.\u003c/p\u003e\n\u003ch4\u003eUse \u003ccode\u003eJSON.stringify()\u003c/code\u003e to Convert Objects to Strings\u003c/h4\u003e\n\u003cp\u003eWhen sending data using \u003ccode\u003efetch()\u003c/code\u003e, we often send multiple pieces of information in one request. In our code, we often organize this information using objects. Consider the following object, for instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  dogName: \"Byron\",\u003cbr\u003e  dogBreed: \"Poodle\"\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis object contains two related pieces of information, a dog's name and breed. Let's say we want to send the data in this object to a server. We can't simply assign it to \u003ccode\u003ebody\u003c/code\u003e, as it isn't a string. Instead, we convert it to JSON. The object above, converted to JSON would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"{\"dogName\":\"Byron\",\"dogBreed\":\"Poodle\"}\" \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, using JSON has enabled us to preserve the key/value pairs of our object within the string. When sent to a server, the server will be able to take this string and convert it back into key/value pairs in whatever language the server is written in.\u003c/p\u003e\n\u003cp\u003eFortunately, JavaScript comes with a built in method for converting objects to strings, \u003ccode\u003eJSON.stringify()\u003c/code\u003e. By passing an object in, \u003ccode\u003eJSON.stringify()\u003c/code\u003e will return a string, formatted and ready to send in our request:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify({\u003cbr\u003e    dogName: \"Byron\",\u003cbr\u003e    dogBreed: \"Poodle\"\u003cbr\u003e  })\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSend the POST Request\u003c/h2\u003e\n\u003cp\u003eWe've got all the pieces we need. Putting it all together, we get:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify({\u003cbr\u003e    dogName: \"Byron\",\u003cbr\u003e    dogBreed: \"Poodle\"\u003cbr\u003e  })\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efetch(\"http://localhost:3000/dogs\", configurationObject); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the JSON server running, if you open up \u003ccode\u003esample_form.html\u003c/code\u003e or \u003ccode\u003eindex.html\u003c/code\u003e, you can test out the code above in the console. Try it and take a look in \u003ccode\u003edb.json\u003c/code\u003e: you should see that Byron the Poodle has been successfully persisted to our database.\u003c/p\u003e\n\u003cp\u003eWe can make our code a bit more general by splitting out the body of our request into a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst formData = {\u003cbr\u003e  dogName: \"Byron\",\u003cbr\u003e  dogBreed: \"Poodle\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify(formData)\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efetch(\"http://localhost:3000/dogs\", configurationObject); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing the \u003ccode\u003eformData\u003c/code\u003e and \u003ccode\u003econfigurationObject\u003c/code\u003e variables helps make our code more readable and flexible, but, of course, we could instead just pass an anonymous object as the second argument to \u003ccode\u003efetch()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(\"http://localhost:3000/dogs\", {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify({\u003cbr\u003e    dogName: \"Byron\",\u003cbr\u003e    dogBreed: \"Poodle\"\u003cbr\u003e  })\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll three approaches yield the same results!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: As a security precaution, most modern websites block the ability to use \u003ccode\u003efetch()\u003c/code\u003e in console while on their website, so if you are testing out code in the browser, make sure to be on a page like \u003ccode\u003eindex.html\u003c/code\u003e or \u003ccode\u003esample_form.html\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHandling What Happens After\u003c/h2\u003e\n\u003cp\u003eJust like when we use \u003ccode\u003efetch()\u003c/code\u003e to send GET requests, we have to handle responses to \u003ccode\u003efetch()\u003c/code\u003e. As mentioned before, servers will send a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\"\u003eResponse\u003c/a\u003e that might include useful information. To access this information, we use a series of calls to \u003ccode\u003ethen()\u003c/code\u003e which are given function \u003cem\u003ecallbacks\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eBuilding on the previous implementation we might write the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst formData = {\u003cbr\u003e  dogName: \"Byron\",\u003cbr\u003e  dogBreed: \"Poodle\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify(formData)\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efetch(\"http://localhost:3000/dogs\", configurationObject)\u003cbr\u003e  .then(function(response) {\u003cbr\u003e    return response.json();\u003cbr\u003e  })\u003cbr\u003e  .then(function(object) {\u003cbr\u003e    console.log(object);\u003cbr\u003e  }); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the first \u003ccode\u003ethen()\u003c/code\u003e is passed a callback function that takes in \u003ccode\u003eresponse\u003c/code\u003e as an argument. This is a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\"\u003e\u003ccode\u003eResponse\u003c/code\u003e\u003c/a\u003e object, representing what the destination server sent back to us. This object has a built in method, \u003ccode\u003ejson()\u003c/code\u003e, that converts the \u003cem\u003ebody\u003c/em\u003e of the response from JSON to a plain old JavaScript object. The result of \u003ccode\u003ejson()\u003c/code\u003e is returned and made available in the \u003cem\u003esecond\u003c/em\u003e \u003ccode\u003ethen()\u003c/code\u003e. In this example, whatever \u003ccode\u003eresponse.json()\u003c/code\u003e returns will be logged in \u003ccode\u003econsole.log(object)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLet's go ahead and send the example above to our JSON server in the console; once the request is successfully resolved, you should see the following log:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{dogName: \"Byron\", dogBreed: \"Poodle\", id: 6} // Your ID value may be different \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe JSON server is sending back the data we sent, along with a new piece of data, an \u003ccode\u003eid\u003c/code\u003e, created by the server.\u003c/p\u003e\n\u003ch3\u003eWhen Things Go Wrong: Using \u003ccode\u003ecatch()\u003c/code\u003e\n\u003c/h3\u003e\n\u003cp\u003eWhen something goes wrong in a \u003ccode\u003efetch()\u003c/code\u003e request, JavaScript will look down the chain of \u003ccode\u003e.then()\u003c/code\u003e calls for something very similar to a \u003ccode\u003ethen()\u003c/code\u003e called a \u003ccode\u003ecatch()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen something goes wrong in a \u003ccode\u003efetch()\u003c/code\u003e, \u003ccode\u003ecatch()\u003c/code\u003e will be called; this allows us to write code to \"handle\" the error. Say for instance, we forgot to add the HTTP verb to our POST request, and the \u003ccode\u003efetch()\u003c/code\u003e defaults to GET. By including a \u003ccode\u003ecatch()\u003c/code\u003e statement, JavaScript doesn't fail silently:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet formData = {\u003cbr\u003e  dogName: \"Byron\",\u003cbr\u003e  dogBreed: \"Poodle\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// method: \"POST\" is missing from the object below\u003cbr\u003elet configObj = {\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify(formData)\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efetch(\"http://localhost:3000/dogs\", configObj)\u003cbr\u003e  .then(function(response) {\u003cbr\u003e    return response.json();\u003cbr\u003e  })\u003cbr\u003e  .then(function(object) {\u003cbr\u003e    console.log(object);\u003cbr\u003e  })\u003cbr\u003e  .catch(function(error) {\u003cbr\u003e    alert(\"Bad things! Ragnarők!\");\u003cbr\u003e    console.log(error.message);\u003cbr\u003e  }); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you try the code above in the console from \u003ccode\u003eindex.html\u003c/code\u003e or \u003ccode\u003esample_form.html\u003c/code\u003e, you should receive an alert window pop-up and a logged message:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailed to execute 'fetch' on 'Window': Request with GET/HEAD method cannot have body. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile \u003ccode\u003ecatch()\u003c/code\u003e may not stop \u003cem\u003eall\u003c/em\u003e silent errors, it is useful to have as a way to gracefully handle unexpected results. We can use it, for instance, to display a message in the DOM for a user, rather than leave them with nothing.\u003c/p\u003e\n\u003ch2\u003eChallenge\u003c/h2\u003e\n\u003cp\u003eIt's time to practice writing your own POST request using \u003ccode\u003efetch()\u003c/code\u003e. In \u003ccode\u003eindex.js\u003c/code\u003e, write a function, \u003ccode\u003esubmitData\u003c/code\u003e, that takes two strings as arguments, one representing a user's name and the other representing a user's email.\u003c/p\u003e\n\u003cp\u003eThe first two tests mirror the behavior of the JSON server. As you write your solution, keep the server running to test your code. Open \u003ccode\u003eindex.html\u003c/code\u003e in a browser to gain access to your \u003ccode\u003esubmitData\u003c/code\u003e function in console.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The tests in this lab need access to the \u003ccode\u003efetch()\u003c/code\u003e request inside \u003ccode\u003esubmitData\u003c/code\u003e. In order to give them access, write your solution so that \u003ccode\u003esubmitData\u003c/code\u003e \u003cem\u003ereturns\u003c/em\u003e the \u003ccode\u003efetch()\u003c/code\u003e. This will not change the behavior of your \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eTest 1 - Send Data\u003c/h3\u003e\n\u003cp\u003eIn \u003ccode\u003esubmitData\u003c/code\u003e, write a valid POST request to \u003ccode\u003ehttp://localhost:3000/users\u003c/code\u003e using \u003ccode\u003efetch()\u003c/code\u003e. This request should include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe destination URL\u003c/li\u003e\n\u003cli\u003eHeaders for 'Content-Type' and 'Accept', both set to 'application/json'\u003c/li\u003e\n\u003cli\u003eA body with the name and email passed in as arguments to \u003ccode\u003esubmitData\u003c/code\u003e. These should be assigned to \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eemail\u003c/code\u003e keys within an object. This object should then be stringified.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eTest 2 - Handle the Response\u003c/h3\u003e\n\u003cp\u003eOn a successful POST request, expect the server to respond with a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\"\u003e\u003ccode\u003eResponse\u003c/code\u003e\u003c/a\u003e object. Just like we saw earlier in the dog example, the \u003ccode\u003ebody\u003c/code\u003e property of this response will contain the data from the POST request along with a newly assigned \u003cem\u003eid\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eUse a \u003ccode\u003ethen()\u003c/code\u003e call to access the \u003ccode\u003eResponse\u003c/code\u003e object and use its built-in \u003ccode\u003ejson()\u003c/code\u003e method to parse the contents of the \u003ccode\u003ebody\u003c/code\u003e property. Use a \u003cem\u003esecond\u003c/em\u003e \u003ccode\u003ethen()\u003c/code\u003e to access this newly converted object. From this object, find the new id and append this value to the DOM.\u003c/p\u003e\n\u003cp\u003eIf JSON Server is running and \u003ccode\u003eindex.html\u003c/code\u003e is open in the browser, you can test your code in the console: calling \u003ccode\u003esubmitData()\u003c/code\u003e in the console should cause an id number to appear on the page.\u003c/p\u003e\n\u003ch3\u003eTest 3 - Handle Errors\u003c/h3\u003e\n\u003cp\u003eFor this final test, after the two \u003ccode\u003ethen()\u003c/code\u003e calls on your \u003ccode\u003efetch()\u003c/code\u003e request, add a \u003ccode\u003ecatch()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen writing the callback function for your \u003ccode\u003ecatch()\u003c/code\u003e, expect to receive an object on error with a property, \u003ccode\u003emessage\u003c/code\u003e, containing info about what went wrong. Write code to append this message to the DOM when \u003ccode\u003ecatch()\u003c/code\u003e is called.\u003c/p\u003e\n\u003ch3\u003eTest 4 - Return the Fetch Chain\u003c/h3\u003e\n\u003cp\u003eAn amazing feature of \u003ccode\u003efetch()\u003c/code\u003e is that if you \u003cem\u003ereturn\u003c/em\u003e it, \u003cem\u003eother\u003c/em\u003e functions can tack on \u003cem\u003etheir own\u003c/em\u003e \u003ccode\u003ethen()\u003c/code\u003e and \u003ccode\u003ecatch()\u003c/code\u003e calls. For this lab, you will need to return the \u003ccode\u003efetch()\u003c/code\u003e chain from your \u003ccode\u003esubmitData\u003c/code\u003e function to ensure that the tests run correctly.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this lab, we learned how to use \u003ccode\u003efetch\u003c/code\u003e requests to post data to a server. This allows us to override the default behavior of an HTML \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element and have greater control over the behavior of our form when it is submitted. It also enables to improve our users' experience by rendering content without reloading the page.\u003c/p\u003e\n\u003cp\u003eSpecifically, we learned:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIn order to submit a \u003ccode\u003ePOST\u003c/code\u003e request, we call \u003ccode\u003efetch()\u003c/code\u003e and pass it two arguments: the URL we're submitting the request to, and an object containing details about the request.\u003c/li\u003e\n\u003cli\u003eThis 'configuration' object needs to contain three properties: the \u003ccode\u003emethod\u003c/code\u003e (\"POST\" in this case), \u003ccode\u003eheaders\u003c/code\u003e that provide some information about our request, and the \u003ccode\u003ebody\u003c/code\u003e of the request (i.e., the content we want to post).\u003c/li\u003e\n\u003cli\u003eThe body must be \"stringified\" before it can be passed in the request.\u003c/li\u003e\n\u003cli\u003eJust as with a \u003ccode\u003eGET\u003c/code\u003e request, the \u003ccode\u003ePOST\u003c/code\u003e request returns a \u003ccode\u003eResponse\u003c/code\u003e object that can be accessed and used to update the DOM using chained \u003ccode\u003ethen\u003c/code\u003e calls.\u003c/li\u003e\n\u003cli\u003eIn addition to the \u003ccode\u003ethen\u003c/code\u003es, you can also chain a \u003ccode\u003ecatch()\u003c/code\u003e function that will \"handle\" unsuccessful requests.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith this information, you can now use \u003ccode\u003efetch()\u003c/code\u003e — the browser inside your browser's JavaScript environment — to send both \u003ccode\u003eGET\u003c/code\u003e and \u003ccode\u003ePOST\u003c/code\u003e requests! With this knowledge we're ready to stitch together server updates (reads \u003cstrong\u003eand\u003c/strong\u003e updates) with DOM updating and event handling. We're almost ready to build the \"Simple Liker\" from scratch!\u003c/p\u003e","exportId":"g23cc858759a2ef5fa544bfe6f83ba68d"}]},{"id":18928,"name":"Combining the Three Pillars","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gab116405e6a7a5fe35a2a8542d311a77","items":[{"id":173495,"title":"Pulling It All Together","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-pulling-it-all-together\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-pulling-it-all-together/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-pulling-it-all-together\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-pulling-it-all-together/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview the Three Pillars\u003c/li\u003e \u003cli\u003ePrepare to code the example\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've come a long way since we first took a look at Simple Liker. Remember our social media app that lets us \"favorite\" a post?\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e  \u003cp\u003eWe took a close look at all of the components that make an action like that possible on the web. Now, it's time to review them and get ready to build our own.\u003c/p\u003e  \u003ch2\u003eReview the Three Pillars\u003c/h2\u003e  \u003cp\u003eWe broke down the web programming concepts we're working with into Three Pillars. We've returned to those throughout our journey, so by now they're probably pretty familiar:\u003c/p\u003e  \u003col\u003e \u003cli\u003eManipulating the DOM\u003c/li\u003e \u003cli\u003eRecognizing JavaScript events\u003c/li\u003e \u003cli\u003eCommunicating with the server\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWe practiced each step and dug into the JavaScript basics necessary to program each. With this experience, we can now pull the concepts and the practice together.\u003c/p\u003e  \u003ch2\u003ePrepare to Code the Example\u003c/h2\u003e  \u003cp\u003eIn the next lab, you'll have the opportunity to create your own Simple Liker from scratch. As you work through it, remember to take a step back whenever necessary to keep perspective on the whole process and each pillar's place within it.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith a solid grasp of all Three Pillars of web programming and how to implement them, we're prepared to code our own working web apps.\u003c/p\u003e","exportId":"pulling-it-all-together"},{"id":173496,"title":"Building the Simple Liker App","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-building-simple-liker\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-building-simple-liker/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-building-simple-liker\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-building-simple-liker/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eSet up an event listener to respond to a user action\u003c/li\u003e \u003cli\u003eSubmit a request to a mocked-up server\u003c/li\u003e \u003cli\u003eUpdate the DOM based on the mock server's response\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eRemember when we started this exploration of the \"Simple Liker\" application? You might not have been sure that you would make it to this point, but you have. Right now you should have the information needed to create a basic web application!\u003c/p\u003e  \u003cp\u003eYour goal is to implement the \"liking\" functionality of \"Simple Liker.\" As a reminder, the final product should look something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-build-the-example/finished_product_ss.png\" alt=\"Screenshot Final\"\u003e\u003c/p\u003e  \u003cp\u003eThe focus of this lab is the JavaScript code. You should only need to make one change to the HTML, and no changes to the CSS file.\u003c/p\u003e  \u003cp\u003eYou might be tempted to look back at previous code, but don't. Use your knowledge and documentation from the internet (if needed), to build the application.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eYou will be doing your coding in \u003ccode\u003emain.js\u003c/code\u003e. If you take a look at the file, you will see that a function, \u003ccode\u003emimicServerCall()\u003c/code\u003e, is being provided for you. This function will \"mock\" the behavior of a backend server. You will invoke \u003ccode\u003emimicServerCall()\u003c/code\u003e in response to a user action, and the function will randomly return either a \"success\" or \"fail\" response. Your code will then need to handle the response appropriately: updating the appearance of the heart if it returns a \"successful\" response, and displaying an error in the DOM otherwise.\u003c/p\u003e  \u003cp\u003eNote that the content of the \"successful\" response from the server is not important here — we only care that it's successful. This means you will not need to call \u003ccode\u003e.json()\u003c/code\u003e on the response so you only need a single \u003ccode\u003ethen()\u003c/code\u003e call.\u003c/p\u003e  \u003cp\u003eHere's the specification:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAdd the \u003ccode\u003e.hidden\u003c/code\u003e class to the error modal in the HTML so it does not appear when the page first loads\u003c/li\u003e \u003cli\u003eWhen a user clicks on an empty heart:  \u003cul\u003e \u003cli\u003eInvoke \u003ccode\u003emimicServerCall\u003c/code\u003e to simulate making a server request\u003c/li\u003e \u003cli\u003eWhen the \"server\" returns a failure status:\u003c/li\u003e \u003cli\u003eRespond to the error using a \u003ccode\u003e.catch(() =\u0026gt; {})\u003c/code\u003e block after your \u003ccode\u003e.then(() =\u0026gt; {})\u003c/code\u003e block.\u003c/li\u003e \u003cli\u003eDisplay the error modal by removing the \u003ccode\u003e.hidden\u003c/code\u003e class\u003c/li\u003e \u003cli\u003eDisplay the server error message in the modal\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003esetTimeout\u003c/code\u003e to hide the modal after 3 seconds (add the \u003ccode\u003e.hidden\u003c/code\u003e class)\u003c/li\u003e \u003cli\u003eWhen the \"server\" returns a success status:\u003c/li\u003e \u003cli\u003eChange the heart to a full heart\u003c/li\u003e \u003cli\u003eAdd the \u003ccode\u003e.activated-heart\u003c/code\u003e class to make the heart appear red\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eWhen a user clicks on a full heart:  \u003cul\u003e \u003cli\u003eChange the heart back to an empty heart\u003c/li\u003e \u003cli\u003eRemove the \u003ccode\u003e.activated-heart\u003c/code\u003e class\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eKeep all your styling rules entirely in \u003ccode\u003estyle.css\u003c/code\u003e. Do not manipulate any \u003ccode\u003e.style\u003c/code\u003e properties.\u003c/li\u003e \u003cli\u003eOnly manipulate the DOM once the server request responds. Do not make the heart full until you're inside a successful \u003ccode\u003e.then\u003c/code\u003e block.\u003c/li\u003e \u003c/ul\u003e  \u003cblockquote\u003e \u003cp\u003eNote: The tests will only check for the first part of the specification (adding the \u003ccode\u003ehidden\u003c/code\u003e class). You should verify the rest of the behavior yourself, by checking the page in the browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThat's it! Congratulations. You're now a real-deal front-end developer! You can use HTML, CSS, and JavaScript to create living, breathing applications. Every web application front-end you see or have seen is built using these three pillars, which you're now skilled with! Give yourself a well-deserved pat on the back!\u003c/p\u003e","exportId":"g631f487030315313fc191d954404333d"},{"id":188596,"title":"Challenge: Toy Tale","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-challenge-toy-tale\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-toy-tale/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-toy-tale\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-toy-tale/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eSet up event listeners to respond to user events\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to make a \"GET\" request, then render the returned toys to the DOM\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to make a \"POST\" request to create a new toy, then add it to the DOM\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to make a \"PATCH\" request that updates an existing toy, then render the updated information to the DOM\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eYou've got a friend in need! Your friend Andy recently misplaced all their toys! Let's write an app that helps Andy keep track of them. For this lab, you will need to pull together everything you've learned about manipulating the DOM, responding to events, and communicating with the server. Specifically, you will need to:\u003c/p\u003e  \u003cp\u003e1) Access the list of toys from an API (mocked using JSON Server) and render    each of them in a \"card\" on the page 2) Hook up a form that enables users to add new toys. Create an event listener    so that, when the form is submitted, the new toy is persisted to the database    and a new card showing the toy is added to the DOM 3) Create an event listener that gives users the ability to click a button to    \"like\" a toy. When the button is clicked, the number of likes should be    updated in the database and the updated information should be rendered to the    DOM\u003c/p\u003e  \u003cp\u003eThe final product should look like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/toy_tale.gif\" alt=\"Toy Tale working app\"\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: this lab does not contain tests. You will be working from the requirements described below and verifying that your code is working correctly in the browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eStart Up the Server\u003c/h2\u003e  \u003cp\u003eAll of the toy data is stored in the \u003ccode\u003edb.json\u003c/code\u003e file. You'll want to access this data using a JSON server. Run \u003ccode\u003ejson-server --watch db.json\u003c/code\u003e to start the server.\u003c/p\u003e  \u003cp\u003eThis will create a server storing all of our lost toy data with restful routes at \u003ccode\u003ehttp://localhost:3000/toys\u003c/code\u003e. You can also check out the information for each individual toy at \u003ccode\u003ehttp://localhost:3000/toys/:id\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e we are using \u003ccode\u003e:id\u003c/code\u003e here as a variable value that indicates the path to a specific toy. To navigate (or send a request) to that path, the \u003ccode\u003eid\u003c/code\u003e number will be inserted into the URL in place of \u003ccode\u003e:id\u003c/code\u003e, e.g., \u003ccode\u003ehttp://localhost:3000/toys/1\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eOpen a second tab in the terminal then open \u003ccode\u003eindex.html\u003c/code\u003e in the browser and take a look at the page. The CSS has all been provided for you so that, when you create the cards to display each toy, you just need to add a CSS class to style them.\u003c/p\u003e  \u003cp\u003eIf you click on the \"Add a new toy!\" button, you'll see that it exposes a form where the user can submit information for a new toy. To re-hide the form, click the button a second time. If you take a look inside \u003ccode\u003eindex.js\u003c/code\u003e, you'll see that the code implementing that functionality has been provided for you. You will be writing the code to wire up the \"Create Toy\" button.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003ch3\u003eFetch Andy's Toys\u003c/h3\u003e  \u003cp\u003eOn the \u003ccode\u003eindex.html\u003c/code\u003e page, there is a \u003ccode\u003ediv\u003c/code\u003e with the \u003ccode\u003eid\u003c/code\u003e \"toy-collection.\"\u003c/p\u003e  \u003cp\u003eWhen the page loads, make a 'GET' request to fetch all the toy objects. With the response data, make a \u003ccode\u003e\u0026lt;div class=\"card\"\u0026gt;\u003c/code\u003e for each toy and add it to the toy-collection \u003ccode\u003ediv\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eAdd Toy Info to the Card\u003c/h3\u003e  \u003cp\u003eEach card should have the following child elements:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eh2\u003c/code\u003e tag with the toy's name\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eimg\u003c/code\u003e tag with the \u003ccode\u003esrc\u003c/code\u003e of the toy's image attribute and the class name \"toy-avatar\"\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ep\u003c/code\u003e tag with how many likes that toy has\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ebutton\u003c/code\u003e tag with a class \"like-btn\" and an id attribute set to the toy's id number\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAfter all of that, the toy card should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \u0026lt;div class=\"card\"\u0026gt;\u003cbr\u003e    \u0026lt;h2\u0026gt;Woody\u0026lt;/h2\u0026gt;\u003cbr\u003e    \u0026lt;img src=\"[toy_image_url]\" class=\"toy-avatar\" /\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;4 Likes \u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;button class=\"like-btn\" id=\"[toy_id]\"\u0026gt;Like \u0026lt;3\u0026lt;/button\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eAdd a New Toy\u003c/h3\u003e  \u003cp\u003eWhen a user submits the toy form, two things should happen:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eA \u003ccode\u003ePOST\u003c/code\u003e request should be sent to \u003ccode\u003ehttp://localhost:3000/toys\u003c/code\u003e and the new toy added to Andy's Toy Collection.\u003c/li\u003e \u003cli\u003eIf the post is successful, the toy should be added to the DOM without reloading the page.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIn order to send a POST request via \u003ccode\u003efetch()\u003c/code\u003e, give the \u003ccode\u003efetch()\u003c/code\u003e a second argument of an object. This object should specify the method as \u003ccode\u003ePOST\u003c/code\u003e and also provide the appropriate headers and the JSON-ified data for the request. The headers and body should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eheaders: \u003cbr\u003e{\u003cbr\u003e  \"Content-Type\": \"application/json\",\u003cbr\u003e  Accept: \"application/json\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ebody: JSON.stringify({\u003cbr\u003e  \"name\": \"Jessie\",\u003cbr\u003e  \"image\": \"https://vignette.wikia.nocookie.net/p__/images/8/88/Jessie_Toy_Story_3.png/revision/latest?cb=20161023024601\u0026amp;path-prefix=protagonist\",\u003cbr\u003e  \"likes\": 0\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFor examples, refer to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e  \u003ch3\u003eIncrease a Toy's Likes\u003c/h3\u003e  \u003cp\u003eWhen a user clicks on a toy's like button, two things should happen:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eA \u003ccode\u003epatch\u003c/code\u003e request (i.e., \u003ccode\u003emethod: \"PATCH\"\u003c/code\u003e) should be sent to the server at \u003ccode\u003ehttp://localhost:3000/toys/:id\u003c/code\u003e, updating the number of likes that the specific toy has\u003c/li\u003e \u003cli\u003eIf the patch is successful, the toy's like count should be updated in the DOM without reloading the page\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003epatch\u003c/code\u003e request enables us to \u003cstrong\u003eupdate\u003c/strong\u003e an existing toy. The request will look very similar to our \"POST\" request \u003cstrong\u003eexcept\u003c/strong\u003e that we need to include the \u003ccode\u003eid\u003c/code\u003e of the toy we're updating in the path.\u003c/p\u003e  \u003cp\u003eTo get this working, you will need to add an event listener to each toy's \"Like\" button. When the button is clicked for a toy, your code should:\u003c/p\u003e  \u003cp\u003e1) capture that toy's id, 2) calculate the new number of likes, 3) submit the \u003ccode\u003epatch\u003c/code\u003e request, and 4) update the toy's card in the DOM based on the \u003ccode\u003eResponse\u003c/code\u003e returned by the    fetch request.\u003c/p\u003e  \u003cp\u003eThe headers and body should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eheaders: \u003cbr\u003e{\u003cbr\u003e  \"Content-Type\": \"application/json\",\u003cbr\u003e  Accept: \"application/json\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ebody: JSON.stringify({\u003cbr\u003e  \"likes\": \u0026lt;new number\u0026gt;\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003epatch\u003c/code\u003e method updates the property or properties included in the body of a \u003ccode\u003efetch\u003c/code\u003e request but leaves the remaining properties as they are. For our example, the \u003ccode\u003elikes\u003c/code\u003e property will be updated by our \u003ccode\u003epatch\u003c/code\u003e request but the \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e, and \u003ccode\u003eimage\u003c/code\u003e properties will remain unchanged.\u003c/p\u003e  \u003cp\u003eIf your request isn't working, make sure your headers and keys match the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eHINT\u003c/strong\u003e: You will be creating two event listeners for this lab. The first one will be on the \"Create Toy\" button, which is provided in the app's \u003ccode\u003eindex.html\u003c/code\u003e file. The second one, however, will be on the \"Likes\" button on each individual toy card. Given that the toy cards will be rendered to the DOM dynamically from the \u003ccode\u003eResponse\u003c/code\u003e returned by the \u003ccode\u003efetch\u003c/code\u003e \"GET\" request, think about \u003cstrong\u003ewhen\u003c/strong\u003e it makes sense to add the event listener to each toy's \"Like\" button.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eOnce you get everything working, take a moment to appreciate how far you've come. You now have the skills needed to respond to user events, persist changes to a database, and manipulate the DOM in response. You have created your first fully-functioning web app that combines all three of the pillars.\u003c/p\u003e  \u003cp\u003eCongratulations!\u003c/p\u003e","exportId":"ge337ba3246beee04f17dbeb0adf56176"}]},{"id":18929,"name":"Context in JavaScript","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g6de40f458cead672313e4dc65a1f998c","items":[{"id":173497,"title":"Introduction to Context","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-introduction-to-context-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-introduction-to-context-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-introduction-to-context-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-introduction-to-context-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the term \"record\"\u003c/li\u003e\n\u003cli\u003eDefine the term \"record-oriented programming\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's take a moment to appreciate where we are. We've reviewed the basic use\nand creation of functions. We've applied these skills in the context of\ncollection-processing methods like \u003ccode\u003emap\u003c/code\u003e, \u003ccode\u003ereduce\u003c/code\u003e, and \u003ccode\u003eforEach\u003c/code\u003e. We're now\nready to face one of the (infamously) most-challenging parts of JavaScript:\nworking with execution context. We're going to start this sequence of lessons\noff by defining five key terms. Each will be addressed in depth elsewhere, but\nwe want to give you a survey first so you can say \"Oh, this is important\" when\nyou see the terms.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDefinitions\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExecution Context: When JavaScript functions run, they have an associated\nJavaScript \u003ccode\u003eObject\u003c/code\u003e that goes along with them which they can access by the\nkeyword \u003ccode\u003ethis\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ethis\u003c/code\u003e: Inside a function, \u003ccode\u003ethis\u003c/code\u003e is the \u003ccode\u003eObject\u003c/code\u003e that represents the\nfunction's execution context\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecall\u003c/code\u003e: This is a method \u003cem\u003eon a function\u003c/em\u003e that calls the function, just like\n\u003ccode\u003e()\u003c/code\u003e. You provide a new execution context as the first argument,\ntraditionally called \u003ccode\u003ethisArg\u003c/code\u003e, and the arguments you want to send to the\nfunction after the \u003ccode\u003ethisArg\u003c/code\u003e. An invocation of \u003ccode\u003ecall\u003c/code\u003e looks like:\n\u003ccode\u003eCalculator.sum.call(multilingualMessages, 1, 2)\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eapply\u003c/code\u003e: This is a method \u003cem\u003eon a function\u003c/em\u003e that calls the function, just like\n\u003ccode\u003e()\u003c/code\u003e. You provide a new execution context as the first argument,\ntraditionally called \u003ccode\u003ethisArg\u003c/code\u003e, and the arguments you want to send to the\nfunction \u003cstrong\u003e\u003cem\u003eas an \u003ccode\u003eArray\u003c/code\u003e\u003c/em\u003e\u003c/strong\u003e after the \u003ccode\u003ethisArg\u003c/code\u003e. An invocation of \u003ccode\u003eapply\u003c/code\u003e\nlooks like: \u003ccode\u003eCalculator.sum.apply(multilingualMessages, [1, 2])\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebind\u003c/code\u003e: This method returns \u003cem\u003ea copy\u003c/em\u003e of the function but with the execution\ncontext \"set\" to the argument that's passed to \u003ccode\u003ebind\u003c/code\u003e. It looks like this:\n\u003ccode\u003esayHello.bind(greenFrog)(\"Hello\") //=\u0026gt; \"Mr. GreenFrog says *Hello* to you all.\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003ePrinting up these definitions is what \u003cem\u003emost\u003c/em\u003e JavaScript documentation does.\nPeople accept these as truth and shrug and muddle their way through living in a\nstate of fear when they write in JavaScript — but that won't be you!\u003c/p\u003e\n\n\u003cp\u003eIn this lab, we're going to practice what we've already learned about\nJavaScript to build a time-card application, guided by tests. This application\nis an example of a \"record-oriented\" application, a term we'll explain below.\nOnce we have a working application, we'll show how execution context, \u003ccode\u003ethis\u003c/code\u003e,\n\u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003eapply\u003c/code\u003e and \u003ccode\u003ebind\u003c/code\u003e can DRY up our code.\u003c/p\u003e\n\n\u003cp\u003eWith these capabilities, we hope you'll learn to love functions even more\n— maybe even as much as JavaScript does!\u003c/p\u003e\n\n\u003ch2\u003eDefine the Term \"Record\"\u003c/h2\u003e\n\n\u003cp\u003eBack in the old days (the 1960s and earlier) computers didn't have much memory.\nRecords were stored on, if you can even believe this, small paper cards called\npunch-cards. They looked like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Used_Punchcard_%285151286161%29.jpg/800px-Used_Punchcard_%285151286161%29.jpg\" alt=\"Image of a punched card, used in early computers\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThese cards, or \"records,\" often had information on them in \"fields.\" In the\n\u003ccode\u003efirst_name\u003c/code\u003e field, you'd find a first name, etc... So when a business needed to\nfigure out how much to pay each person for a week's work, something like the\nfollowing would happen:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLoad up all the employees' cards into a tray\u003c/li\u003e\n\u003cli\u003eFeed the tray of cards into the computer\u003c/li\u003e\n\u003cli\u003eThe computer would read in each card and calculate the hours worked for the week per card\u003c/li\u003e\n\u003cli\u003eThe computer would emit a new card with all the old data but this card would have a new field \nadded called something like \u003ccode\u003ewagesPaidInWeek33OfYear: 550\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThe computer would also print out a table of the employee name and the amount owed\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026gt; \u003cstrong\u003eASIDE\u003c/strong\u003e: Come to think of it, iterating over a collection, performing a\n\u0026gt; transformation and emitting a new collection where every element has been\n\u0026gt; transformed sounds an \u003cem\u003eawful\u003c/em\u003e lot like \u003ccode\u003emap\u003c/code\u003e to us.\u003c/p\u003e\n\n\u003cp\u003eThen, the emitted pay ledger could be taken to the payroll department and the\nappropriate person could write (Write! With their hands! Using a pen and ink!)\nout paychecks to the employees.\u003c/p\u003e\n\n\u003cp\u003eHere's another use. If the executive team needed to know how much payroll cost\nthe company in a given week, they'd (you guessed it!) load up all those punch\ncards in a tray and run them through a different program that calculated a\ntotal.\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; \u003cstrong\u003eASIDE\u003c/strong\u003e: Come to think of it, iterating over a collection, performing an\n\u0026gt; evaluation on each element and emitting a new value based on those elements\n\u0026gt; sounds an \u003cem\u003eawful\u003c/em\u003e lot like \u003ccode\u003ereduce\u003c/code\u003e to us.\u003c/p\u003e\n\n\u003cp\u003eUltimately, the \"punch card\" was an intermediate step between paper records and\ndigital records. But it was during the punch-card era that computing really got\nbig, so a \u003cem\u003elot\u003c/em\u003e of our ways of thinking about programming started by thinking\nabout \"records.\"\u003c/p\u003e\n\n\u003ch2\u003eDefine the Term \"Record-Oriented Programming\"\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Record_(computer_science)\"\u003eRecord-oriented programming\u003c/a\u003e is a style of programming based on finding\nrecords and processing them so that they're updated (\u003ccode\u003emap\u003c/code\u003e-like) or so that\ntheir information is aggregated (\u003ccode\u003ereduce\u003c/code\u003e-like). \"Record-oriented\" isn't a\nbuzzword that we hear used very much, but for these next few lessons, we'll use\nit. Ask any programmer who's worked in large scale billing (phone companies,\ninsurers, etc.) or at a university (50,000 grade point averages), and you can\nbet they'll understand what the term means, though.\u003c/p\u003e\n\n\u003cp\u003eThe amazing thing is that in the 21st century this style of programming is back\nin vogue! We're not using punch cards, but the ability to spin up hundreds of\nlittle computers in a cloud, hand them each a bundle of records, and get\nanswers back and process the answers are records is \u003cem\u003ecutting-edge!\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIn fact, a program to do \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003ereduce\u003c/code\u003e operations at scale on a cloud was\nstandardized in the 2000s. Guess what it's called? \u003ca href=\"https://en.wikipedia.org/wiki/MapReduce\"\u003e\u003ccode\u003emapReduce\u003c/code\u003e\u003c/a\u003e\n— and you should know why. It was pioneered and advanced as part of the\nsecret sauce that made a small little company from Mountain View, California\ncalled Google become the giant it is today. Today you can use it under the\nname of \u003ca href=\"https://en.wikipedia.org/wiki/Apache_Hadoop\"\u003eApache Hadoop\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \"Go\" programming language is built around building and processing records\nat scale. Record-Oriented Programming is not likely to go away any time soon.\nMaybe it'll be the hot job posting buzzword any minute now!\u003c/p\u003e\n\n\u003ch2\u003eLab\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to build a time-card and payroll application using the\nrecord-oriented approach.\u003c/p\u003e\n\n\u003cp\u003eThe tests guide you to implementing a time card system: when someone enters the\ncompany's state of the art technical office, the employee has to insert their\ncard in a time-clock which will record the time they came in. When it's time to\nleave, the employee will \"punch out.\"\u003c/p\u003e\n\n\u003cp\u003eFor simplicity's sake, we'll make these assumptions:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAssume that employees always check-in \u003cstrong\u003eand\u003c/strong\u003e check-out.\u003c/li\u003e\n\u003cli\u003eAssume employees always check-in and out on the hour\u003c/li\u003e\n\u003cli\u003eThe time is represented on a 24-hour clock (1300 is 1:00 pm); this keeps the\nmath easier and is the standard in most of the world\u003c/li\u003e\n\u003cli\u003eWhen timestamps are needed, they will be provided as \u003ccode\u003eString\u003c/code\u003es in the form:\n\u003ccode\u003e\"YYYY-MM-DD 800\"\u003c/code\u003e or \u003ccode\u003e\"YYYY-MM-DD 1800\"\u003c/code\u003e e.g. \u003ccode\u003e\"2018-01-01 2300\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eEmployees will never work across days i.e. in at \u003ccode\u003e2200\u003c/code\u003e and out at \u003ccode\u003e0400\u003c/code\u003e the\nnext day.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe lab tests will guide you toward a solution. Keep in mind, the goal is to\nunderstand how to \"grow\" an application in \"record-oriented\" fashion in\nJavaScript, \u003cem\u003eas well\u003c/em\u003e as pass the lab. Make sure you're learning about this app\ndesign while you pass the solutions. When you encounter a failing test, look at\nhow the test is calling the function that's missing or failing: how did it call\nthe function, what arguments did it pass? What kind of thing did it expect\nback?\u003c/p\u003e\n\n\u003cp\u003eTake advantage of your collection-processing strengths that you trained up over\nthe last few lessons.\u003c/p\u003e\n\n\u003ch2\u003eExtending the Challenge\u003c/h2\u003e\n\n\u003cp\u003eIf you have the time, you can learn more about JavaScript and remove the\nsimplifying assumptions we wrote above. You can expand your learning by:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRaise an exception if a \u003ccode\u003etimeIn\u003c/code\u003e is found without a matching \u003ccode\u003etimeOut\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eException Handling in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eFigure out how to turn a time stamp into a construct that allows for you to\nhandle across day and non-o'clock times\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003eDate Class Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRaise errors if the time stamp is in an invalid format\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhile the bar set by the tests is at one level, you can turn this into a robust\napplication, if you so desire!\u003c/p\u003e\n\n\u003cp\u003ePut your code in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhile you will want to be guided by the tests, you will implement the following\nfunctions. To make the tests easier to read, we've provided the \u003cem\u003esignatures\u003c/em\u003e of\nthe functions.\u003c/p\u003e\n\n\u003cp\u003eA function \u003cem\u003esignature\u003c/em\u003e is the function name, the arguments it expects, and what\nthe function returns.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateEmployeeRecord\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA 4-element Array of a \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, and \u003ccode\u003eNumber\u003c/code\u003e\ncorresponding to a first name, family name, title, and pay rate per hour\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eJavaScript \u003ccode\u003eObject\u003c/code\u003e with keys:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efirstName\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efamilyName\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epayPerHour\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeInEvents\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeOutEvents\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eLoads \u003ccode\u003eArray\u003c/code\u003e elements into corresponding \u003ccode\u003eObject\u003c/code\u003e properties.\n\u003cem\u003eAdditionally\u003c/em\u003e, initialize empty \u003ccode\u003eArray\u003c/code\u003es on the properties \u003ccode\u003etimeInEvents\u003c/code\u003e\nand \u003ccode\u003etimeOutEvents\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateEmployeeRecords\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eConverts each nested \u003ccode\u003eArray\u003c/code\u003e into an employee record using\n\u003ccode\u003ecreateEmployeeRecord\u003c/code\u003e and accumulates it to a new \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateTimeInEvent\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA date stamp (\u003ccode\u003e\"YYYY-MM-DD HHMM\"\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe employee record\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e with keys to the \u003ccode\u003etimeInEvents\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003e on the record\n\u003ccode\u003eObject\u003c/code\u003e:\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e: Set to \u003ccode\u003e\"TimeIn\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehour\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edate\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateTimeOutEvent\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA date stamp (\u003ccode\u003e\"YYYY-MM-DD HHMM\"\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe employee record\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e with keys to the \u003ccode\u003etimeOutEvents\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003e on the record\n\u003ccode\u003eObject\u003c/code\u003e:\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e: Set to \u003ccode\u003e\"TimeOut\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehour\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edate\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ehoursWorkedOnDate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA date of the form \u003ccode\u003e\"YYYY-MM-DD\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eHours worked, an \u003ccode\u003eInteger\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eGiven a date, find the number of hours elapsed between that date's\ntimeInEvent and timeOutEvent\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA date of the form \u003ccode\u003e\"YYYY-MM-DD\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003ePay owed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ehoursWorkedOnDate\u003c/code\u003e, multiply the hours by the record's\npayRate to determine amount owed. Amount should be returned as a number.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003eallWagesFor\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003ePay owed for all dates\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e, accumulate the value of all dates worked by the\nemployee in the record used as context. Amount should be returned as a\nnumber. \u003cstrong\u003eHINT\u003c/strong\u003e: You will need to find the available dates somehow...\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003efindEmployeeByFirstName\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003esrcArray\u003c/code\u003e: Array of employee records\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003efirstName\u003c/code\u003e: String representing a first name held in an employee record\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eMatching record or \u003ccode\u003eundefined\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eTest the \u003ccode\u003efirstName\u003c/code\u003e field for a match with the \u003ccode\u003efirstName\u003c/code\u003e argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecalculatePayroll\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of employee records\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eSum of pay owed to all employees for all dates, as a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e, accumulate the value of all dates worked by the\nemployee in the record used as context. Amount should be returned as a\nnumber.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations! At the end of this lab, you should have built several\nincredibly simple functions that leveraged \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003ereduce\u003c/code\u003e to transform and\naggregate data. Take a look at your code and see where you might be repeating\nyourself. Finding these repetitions will be where we can bring in the\ninnovation of execution context. We'll learn how this can DRY up our code using\nexecution contexts in the next lesson.\u003c/p\u003e\n\n\u003cp\u003eIt's also worth your time to take a look at the tests in \u003ccode\u003etest/indexTest.js\u003c/code\u003e.\nBecause of this application's design, it's incredibly easy to test the\nfunctions which drive the application. Some programmers consider this style of\nprogramming to be optimal for the ease of testing and simplicity of code.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Record_(computer_science)\"\u003eRecord / Record-Oriented Programming\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eJavaScript Error Class\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003eJavaScript Date Class\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gdde2652d6a777218fcf0e57a6bdaa6c8"},{"id":173498,"title":"Context and Implicit Setting","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-context-and-implicit-setting\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-implicit-setting/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-implicit-setting\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-implicit-setting/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine execution context\u003c/li\u003e\n\u003cli\u003eDefine \u003ccode\u003ethis\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eAccess implicitly-set context in an Object-contained function expression\u003c/li\u003e\n\u003cli\u003eAccess implicitly-set context global Object in a function expression\u003c/li\u003e\n\u003cli\u003ePrevent implicitly setting context in function calls with \u003ccode\u003euse strict\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eUse available JavaScript runtimes to validate understanding\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson we provided definitions of:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\"Execution Context\"\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ethis\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eapply\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebind\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ebut then built an application that didn't use them. However, with a\nrecord-oriented application built, we will have a shared context to understand\nthese challenging concepts in JavaScript.\u003c/p\u003e\n\n\u003ch2\u003eDefine Execution Context\u003c/h2\u003e\n\n\u003cp\u003eWhen a function in JavaScript \u003cstrong\u003e\u003cem\u003eis called\u003c/em\u003e\u003c/strong\u003e, it is provided an \u003cem\u003eexecution\ncontext\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003eexecution context\u003c/em\u003e is a JavaScript \u003ccode\u003eObject\u003c/code\u003e that is either implicitly or\nexplicitly passed at the time of the function's call.\u003c/p\u003e\n\n\u003cp\u003eThe implicit way of passing a context with a function is something we have to\nmemorize and accept as part of the nature of JavaScript.\u003c/p\u003e\n\n\u003cp\u003eThe tools for explicitly passing a context at function call-time are the\nmethods \u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003eapply\u003c/code\u003e, and \u003ccode\u003ebind.\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003ethis\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe JavaScript keyword \u003ccode\u003ethis\u003c/code\u003e returns the current \u003cem\u003eexecution context\u003c/em\u003e while the\nfunction is being run.  Whether that context was passed explicitly or\nimplicitly, \u003ccode\u003ethis\u003c/code\u003e returns it.\u003c/p\u003e\n\n\u003cp\u003eSome people think that \u003ccode\u003ethis\u003c/code\u003e is a strange thing to call such an important\nconcept. But pronouns like \"this,\" \"he,\" or \"here\" all refer to a \u003cem\u003econtext\u003c/em\u003e. At\na concert, if I say (scream) \"It's noisy here,\" you don't think \"Here in the\nMilky Way galaxy? I disagree.  Space has little oxygen as a sound medium and is\ntherefore quite quiet.\" Instead, you recognize the most-relevant context is at\nthis significant and unusual event with giant speakers and guitar players and\ntherefore infer that \"here\" refers to \"this concert.\" JavaScript thought the\nbest pronoun to use was \u003ccode\u003ethis\u003c/code\u003e, and it seems sensible to us.\u003c/p\u003e\n\n\u003ch2\u003eAccess Implicitly-Set Context in an Object-Contained Function Expression\u003c/h2\u003e\n\n\u003cp\u003eWhen a function is called, it gets an execution context passed in. That context\nwill be whatever the function was 'called on' - the object to the left of the\n\u003ccode\u003e.\u003c/code\u003e  where it's called. In the below example, \u003ccode\u003ebyronPoodle\u003c/code\u003e is to the\nleft of the \u003ccode\u003e.\u003c/code\u003e. In \u003ccode\u003ebyronPoodle.warn()\u003c/code\u003e, \u003ccode\u003ewarn\u003c/code\u003e gets \u003ccode\u003ebyronPoodle\u003c/code\u003e as its\ncontext.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet byronPoodle = {\u003cbr\u003e  name: \"Byron\",\u003cbr\u003e  sonicAttack: \"ear-rupturing atomic bark\",\u003cbr\u003e  mostHatedThing: \"noises in the apartment hallway\",\u003cbr\u003e  warn: function() {\u003cbr\u003e    console.log(`${this.name} issues an ${this.sonicAttack} when he hears ${this.mostHatedThing}`)\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003ebyronPoodle.warn()\u003cbr\u003e// LOG: Byron issues an ear-rupturing atomic bark when he hears noises in the apartment hallway\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, \u003ccode\u003ethis\u003c/code\u003e was set to \u003ccode\u003ebyronPoodle\u003c/code\u003e. So, \u003ccode\u003ethis.name\u003c/code\u003e was \u003ccode\u003ebyronPoodle.name\u003c/code\u003e (\u003ccode\u003e\"Byron\"\u003c/code\u003e), \u003ccode\u003ethis.sonicAttack\u003c/code\u003e was \u003ccode\u003ebyronPoodle.sonicAttack\u003c/code\u003e (\u003ccode\u003e\"ear-rupturing atomic bark\"\u003c/code\u003e) and \u003ccode\u003ethis.mostHatedThing\u003c/code\u003e was \u003ccode\u003ebyronPoodle.mostHatedThing\u003c/code\u003e (\u003ccode\u003e\"noises in the apartment hallway\"\u003c/code\u003e)\u003c/p\u003e\n\n\u003cp\u003eA simple way of saying it: when you call \u003ccode\u003esomeObject.someFunction()\u003c/code\u003e, the\ncontext inside of \u003ccode\u003esomeFunction\u003c/code\u003e will be the thing to the left of the \u003ccode\u003e.\u003c/code\u003e:\n\u003ccode\u003esomeObject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere's another interesting example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet speak = function() { return `It ain't easy being ${this.name}`}\u003cbr\u003elet frog = { name: \"Kermit\" }\u003cbr\u003elet pig = { name: \"Miss Piggy\" }\u003cbr\u003efrog.speak = speak\u003cbr\u003epig.speak = speak\u003cbr\u003efrog.speak === pig.speak //=\u0026gt; true\u003cbr\u003efrog.speak()  //=\u0026gt; \"It ain't easy being Kermit\"\u003cbr\u003epig.speak()  //=\u0026gt; \"It ain't easy being Miss Piggy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAgain, the crucial realization is that the context used \u003cem\u003einside\u003c/em\u003e the function\n\u003ccode\u003espeak\u003c/code\u003e is defined by what's \"left of the dot.\"\u003c/p\u003e\n\n\u003cp\u003eThis is the general behavior for understanding context-setting in JavaScript.\nWe'll now cover some special cases of this general behavior.\u003c/p\u003e\n\n\u003ch2\u003eAccess Implicitly-Set Global Object in a Function Expression\u003c/h2\u003e\n\n\u003cp\u003eWhat happens if we invoke a function and it's \u003cstrong\u003enot\u003c/strong\u003e defined inside an\n\u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet contextReturner = function() {\u003cbr\u003e  return this\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econtextReturner() //=\u0026gt; window\u003cbr\u003econtextReturner() === window //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen no object is to the left of the function, JavaScript invisibly adds \u003cstrong\u003ethe\nglobal object\u003c/strong\u003e. Thus \u003ccode\u003econtextReturner\u003c/code\u003e is, from JavaScript's point of view,\nthe same as \u003ccode\u003ewindow.contextReturner\u003c/code\u003e. You can check for yourself in the console: \u003ccode\u003ewindow.contextReturner === contextReturner //=\u0026gt; true\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA simple way of saying it: when you call \u003ccode\u003esomeFunction()\u003c/code\u003e, the context inside\nof \u003ccode\u003esomeFunction\u003c/code\u003e will be the thing to the left of the \u003ccode\u003e.\u003c/code\u003e.  Since there's\nnothing there, JavaScript swaps in the global object.\u003c/p\u003e\n\n\u003cp\u003eIn browser-based JavaScript environment (or \"JavaScript runtime\"), the global\nobject is called \u003ccode\u003ewindow\u003c/code\u003e. In NodeJS, it's called \u003ccode\u003eglobal\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThus, in Chrome:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet locationReturner = function() {\u003cbr\u003e  return this.location.host\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elocationReturner() //=\u0026gt; URL host serving this page e.g. developer.mozilla.org\u003cbr\u003e// Implicitly: window.locationReturner(); this will be `window` in the function\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's worth noting that even in a function inside of another function, the inner\nfunction's default context is still the global object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction a() {\u003cbr\u003e  return function b() {\u003cbr\u003e    return this;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ea()() === window //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePrevent Implicitly Setting a Global Object In Function Calls With \u003ccode\u003euse strict\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eWe wish we could say that the default context was \u003cstrong\u003ealways\u003c/strong\u003e the global object.\nIt'd make things simple.\u003c/p\u003e\n\n\u003cp\u003eHowever, in JavaScript, if the engine sees the \u003ccode\u003eString\u003c/code\u003e \"use strict\" inside a\nfunction, it will \u003cem\u003estop\u003c/em\u003e passing the implicit \u003cem\u003eexecution context\u003c/em\u003e of the global\nobject.  If JavaScript sees \u003ccode\u003e\"use strict\"\u003c/code\u003e at the top of a JavaScript code\nfile, it will apply this rule (and other strict behaviors) to \u003cem\u003eall functions\u003c/em\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction looseyGoosey() {\u003cbr\u003e  return this\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction noInferringAllowed() {\u003cbr\u003e  \"use strict\"\u003cbr\u003e  return this\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elooseyGoosey() === window; //=\u0026gt; true\u003cbr\u003enoInferringAllowed() === undefined //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are really no guidelines as to which you'll see more. Some programmers\nthink \u003ccode\u003estrict\u003c/code\u003e prevents confusing bugs (seems wise!); others think it's an\nobvious rule of the language and squelching it is against the language's love\nof functions (a decent argument!). Generally, we advise you to think of the\n\"default mode\" as the one that permits an \u003cem\u003eimplicit\u003c/em\u003e presumption of context.\nFor more on strict-mode, see the Resources.\u003c/p\u003e\n\n\u003ch3\u003eAccess Implicitly-Set New Object in Object-Oriented Programming Constructor\u003c/h3\u003e\n\n\u003cp\u003eThis lesson covers how \u003ccode\u003ethis\u003c/code\u003e is implicitly set. An important place where\n\u003ccode\u003ethis\u003c/code\u003e is implicitly set is when new instances of classes are created. Class\ndefinition and instance creation are hallmarks of object-oriented (\"OO\")\nprogramming, a style you might not be familiar with in JavaScript. Rather than\nignore this important case until later, we're going to cover it now, even\nthough you might not be familiar with OO programming.  If you're not familiar\nwith OO in JavaScript (or anywhere for that matter!), that's OK, just remember\nthis rule for later.  When you see \u003ccode\u003ethis\u003c/code\u003e inside of a class definition in\nJavaScript, come back and make sure you understand this rule.\u003c/p\u003e\n\n\u003cp\u003eIt's for convenience and feels \"natural\" from a linguistic point of view: \"The\nthing we're setting up should be the default context for work during its\nconstruction in its own function that's called \u003ccode\u003econstructor\u003c/code\u003e.\"\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Poodle{\u003cbr\u003e  constructor(name, pronoun){\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.pronoun = pronoun\u003cbr\u003e    this.sonicAttack = \"ear-rupturing atomic bark\"\u003cbr\u003e    this.mostHatedThing = \"noises in the apartment hallway\"\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  warn() {\u003cbr\u003e    console.log(`${this.name} issues an ${this.sonicAttack} when ${this.pronoun} hears ${this.mostHatedThing}`)\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003elet b = new Poodle(\"Byron\", \"he\")\u003cbr\u003eb.warn() //=\u0026gt; Byron issues an ear-rupturing atomic bark when he hears noises in the apartment hallway\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUse Available JavaScript Runtimes to Validate Understanding\u003c/h2\u003e\n\n\u003cp\u003eThere are two main JavaScript environments you'll encounter as you get started\nwith JavaScript.  Those environments are also called runtimes. They are:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ein the browser\u003c/li\u003e\n\u003cli\u003ein the \"shell\" when running the NodeJS program\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFor the remainder of this module, it's very important that you not only\n\u003cstrong\u003e\u003cem\u003eread\u003c/em\u003e\u003c/strong\u003e these lessons but that you practice, adjust, test, and explore the\nmaterial within one (or both!) of those JavaScript runtimes.\u003c/p\u003e\n\n\u003cp\u003eTake the initiative to own your own learning and try out these samples (with\nsome variation!) in a runtime of your choice.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo sum up the discussion thus far:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExecution context is set at function call-time, implicitly or explicitly.\u003c/li\u003e\n\u003cli\u003eIn \"bare\" function calls, the context is automatically set to the global object unless prevented by \u003ccode\u003e\"use strict\"\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIn \"non-bare\" function calls, the context is automatically set to the \"object to the left of the dot.\"\u003c/li\u003e\n\u003cli\u003e(For Object-Oriented JavaScript) Execution context defaults to the new thing being created in a \u003ccode\u003eclass\u003c/code\u003e's \u003ccode\u003econstructor\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis covers the \u003cem\u003eimplicit\u003c/em\u003e context-setting rules. We'll now learn about the\n\u003cem\u003eexplicit\u003c/em\u003e context-setting rules.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003estrict\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"context-and-implicit-setting"},{"id":173499,"title":"Context and Explicit Setting","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-context-and-explicit-setting\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-explicit-setting/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-explicit-setting\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-explicit-setting/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplicitly override context with \u003ccode\u003ecall\u003c/code\u003e and \u003ccode\u003eapply\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eExplicitly lock context for a function with \u003ccode\u003ebind\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we learned that when we invoke functions JavaScript\nwill make a context available inside the function. That context will be set to\n\"whatever's to the left of the dot\" or, when there's nothing to the left of the dot, the global object.\u003c/p\u003e\n\n\u003cp\u003eJavaScript provides other means for specifying what \u003cem\u003ewe\u003c/em\u003e want the context to\nbe. These are the \u003cem\u003eexplicit\u003c/em\u003e methods of setting execution context: \u003ccode\u003ecall\u003c/code\u003e,\n\u003ccode\u003eapply\u003c/code\u003e, and \u003ccode\u003ebind\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eExplicitly Override Context with \u003ccode\u003ecall\u003c/code\u003e and \u003ccode\u003eapply\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe methods on functions called \u003ccode\u003ecall\u003c/code\u003e and \u003ccode\u003eapply\u003c/code\u003e allow us to override the\n\u003cem\u003eexecution context\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's think back to a previous lesson and recall working with records. We'll\ninvoke the functions in a familiar way, but also show how we could achieve the\nequivalent behavior using \u003ccode\u003ecall\u003c/code\u003e or \u003ccode\u003eapply\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet asgardianBrothers = [\u003cbr\u003e  {\u003cbr\u003e    firstName: \"Thor\",\u003cbr\u003e    familyName: \"Odinsson\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: \"Loki\",\u003cbr\u003e    familyName: \"Laufeysson-Odinsson\"\u003cbr\u003e  }\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003efunction intro(person, line) {\u003cbr\u003e  return `${person.firstName} ${person.familyName} says: ${line}`\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction introWithContext(line){\u003cbr\u003e  return `${this.firstName} ${this.familyName} says: ${line}`\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet phrase = \"I like this brown drink very much, bring me another!\"\u003cbr\u003eintro(asgardianBrothers[0], phrase) //=\u0026gt; Thor Odinsson says: I like this brown drink very much, bring me another!\u003cbr\u003eintro(asgardianBrothers[0], phrase) === introWithContext.call(asgardianBrothers[0], phrase) //=\u0026gt; true\u003cbr\u003eintro(asgardianBrothers[0], phrase) === introWithContext.apply(asgardianBrothers[0], [phrase]) //=\u0026gt; true\u003cbr\u003e\u003cbr\u003elet complaint = \"I was falling for thirty minutes!\"\u003cbr\u003eintro(asgardianBrothers[1], complaint) === introWithContext.call(asgardianBrothers[1], complaint) //=\u0026gt; true\u003cbr\u003eintro(asgardianBrothers[1], complaint) === introWithContext.apply(asgardianBrothers[1], [complaint]) //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we first wrote a record-oriented program, we wrote functions in the style\nof \u003ccode\u003eintro\u003c/code\u003e. They took the record \u003cem\u003eas an argument\u003c/em\u003e. In fact, if we look at the\n\u003ccode\u003esolution\u003c/code\u003e branch for the previous lesson, we'll see that multiple functions\nhave the same first parameter: \u003ccode\u003eemployee\u003c/code\u003e, the record. Your solution probably\nhas a similar repetition.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createTimeInEvent(employee, dateStamp){ /* */ }\u003cbr\u003efunction createTimeOutEvent(employee, dateStamp){ /* */ }\u003cbr\u003efunction hoursWorkedOnDate(employee, soughtDate){ /* */ }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we told JavaScript that instead of the record being a \u003cem\u003eparameter\u003c/em\u003e (in\naddition to a phrase), it could be assumed as a \u003cem\u003econtext\u003c/em\u003e and thus accessible\nvia \u003ccode\u003ethis\u003c/code\u003e. That's what we're doing with the function \u003ccode\u003eintroWithContext\u003c/code\u003e as\ninvoked with either \u003ccode\u003ecall\u003c/code\u003e or \u003ccode\u003eapply\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eintroWithContext\u003c/code\u003e function expects only a catchphrase as an argument. Both \u003ccode\u003ecall\u003c/code\u003e and\n\u003ccode\u003eapply\u003c/code\u003e take a \u003ccode\u003ethisArg\u003c/code\u003e argument as their first argument (see their\ndocumentation for further clarification): that argument becomes the \u003ccode\u003ethis\u003c/code\u003e\n\u003cem\u003einside\u003c/em\u003e the function.  In the case of \u003ccode\u003ecall\u003c/code\u003e, anything after the \u003ccode\u003ethisArg\u003c/code\u003e\ngets passed to the function like arguments inside of a \u003ccode\u003e()\u003c/code\u003e. In the case of\n\u003ccode\u003eapply\u003c/code\u003e, the contents in the \u003ccode\u003eArray\u003c/code\u003e get destructured and passed to the\nfunction like arguments inside of a \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eES6 ALERT\u003c/strong\u003e: Some might wonder: if we have destructuring of \u003ccode\u003eArray\u003c/code\u003es, why\ndo we need both \u003ccode\u003ecall\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003eapply\u003c/code\u003e since a destructured \u003ccode\u003eArray\u003c/code\u003e, as\nrequired by \u003ccode\u003eapply\u003c/code\u003e could simply be destructured and fed to \u003ccode\u003ecall\u003c/code\u003e.\nDestructuring is a relatively new arrival to JavaScript, so before then\nJavaScript had two separate methods.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eExplicitly Lock Context For a Function With \u003ccode\u003ebind\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eLet's suppose that we wanted to create the \u003ccode\u003eintroWithContext\u003c/code\u003e function, but\nhave it permanently bound to \u003ccode\u003easgardianBrothers[0]\u003c/code\u003e. As the adjective \"bound\"\nsuggests, we use \u003ccode\u003ebind\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet asgardianBrothers = [\u003cbr\u003e  {\u003cbr\u003e    firstName: \"Thor\",\u003cbr\u003e    familyName: \"Odinsson\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: \"Loki\",\u003cbr\u003e    familyName: \"Laufeysson-Odinsson\"\u003cbr\u003e  }\u003cbr\u003e]\u003cbr\u003efunction introWithContext(line){\u003cbr\u003e  return `${this.firstName} ${this.familyName} says: ${line}`\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet thorIntro = introWithContext.bind(asgardianBrothers[0])\u003cbr\u003ethorIntro(\"Hi, Jane\") //=\u0026gt; Thor Odinsson says: Hi, Jane\u003cbr\u003ethorIntro(\"I love snakes\") //=\u0026gt; Thor Odinsson says: I love snakes\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ebind\u003c/code\u003e method \u003cstrong\u003e\u003cem\u003ereturns a function that needs to be called\u003c/em\u003e\u003c/strong\u003e, but\nwherever the function that \u003ccode\u003ebind\u003c/code\u003e was called on had a \u003ccode\u003ethis\u003c/code\u003e reference, the\n\u003ccode\u003ethis\u003c/code\u003e is \"hard set\" to what was passed into \u003ccode\u003ebind\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo sum up the explicit overrides:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExecution context is set in a function by invoking \u003ccode\u003ecall\u003c/code\u003e on the function\nand passing, as the first argument, a \u003ccode\u003ethisArg\u003c/code\u003e which is accessed via \u003ccode\u003ethis\u003c/code\u003e\nin the function. Additional parameters to the function are listed after \u003ccode\u003e,\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eExecution context is set in a function by invoking \u003ccode\u003eapply\u003c/code\u003e on the function\nand passing, as first argument, a \u003ccode\u003ethisArg\u003c/code\u003e which is accessed via \u003ccode\u003ethis\u003c/code\u003e in\nthe function. Additional parameters to the function are stored in the\nsecond argument: an \u003ccode\u003eArray\u003c/code\u003e containing arguments to the function.\u003c/li\u003e\n\u003cli\u003eExecution context can be locked in a function by invoking \u003ccode\u003ebind\u003c/code\u003e on it and\npassing it a \u003ccode\u003ethisArg\u003c/code\u003e. The \u003ccode\u003ebind\u003c/code\u003e function makes a copy of the\nfunctionality of its function but with all the \u003ccode\u003ethis\u003c/code\u003e stuff locked in place\nand returns that function. That \u003cem\u003enew\u003c/em\u003e function can have arguments passed to it\nduring its call with \u003ccode\u003e()\u003c/code\u003e as usual.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/apply\"\u003e\u003ccode\u003eapply\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"\u003e\u003ccode\u003ebind\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"context-and-explicit-setting"},{"id":173500,"title":"Context Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-context-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplicitly override context with \u003ccode\u003ecall\u003c/code\u003e and \u003ccode\u003eapply\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eExplicitly lock context for a function with bind\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to build the time-card and payroll application using\nthe record-oriented approach again. This lab will feature the same topic and\narea of work as the previous lab; \u003cem\u003ehowever\u003c/em\u003e, \u003cem\u003ehow\u003c/em\u003e we call and use functions\nwill change with our new knowledge. While the code will stay \u003cem\u003emostly\u003c/em\u003e the same,\nyou're going to need to use \u003ccode\u003ethis\u003c/code\u003e a lot more.\u003c/p\u003e\n\n\u003cp\u003eThe tests guide you to implementing a time card system: when someone enters the\ncompany's state of the art technical office, the employee has to insert their\ncard in a time-clock which will record the time they came in. When it's time to\nleave, the employee will \"punch out.\"\u003c/p\u003e\n\n\u003cp\u003eFor simplicity's sake, we'll make these assumptions:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAssume that employees always check in and check out\u003c/li\u003e\n\u003cli\u003eAssume employees always check in and out on the hour\u003c/li\u003e\n\u003cli\u003eThe time is represented on a 24-hour clock (1300 is 1:00 pm); this keeps the\nmath easier and is the standard in most of the world\u003c/li\u003e\n\u003cli\u003eWhen timestamps are needed, they will be provided as Strings in the form:\n\"YYYY-MM-DD 800\" or \"YYYY-MM-DD 1800\" e.g. \"2018-01-01 2300\"\u003c/li\u003e\n\u003cli\u003eEmployees will never work across days i.e. in at 2200 and out at 0400 the\nnext day.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe lab tests will guide you toward a solution. Keep in mind, the goal is to\nunderstand how to \"grow\" an application in \"record-oriented\" fashion in\nJavaScript, as well as pass the lab. Make sure you're learning about this app\ndesign while you pass the solutions.\u003c/p\u003e\n\n\u003cp\u003eAs before, if you find yourself having extra time, use the guidance in the\nprevious lab to make your application more robust.\u003c/p\u003e\n\n\u003cp\u003eTake advantage of your collection-processing strengths that you trained up over\nthe last few lessons.\u003c/p\u003e\n\n\u003cp\u003ePut your code in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhile you will want to be guided by the tests, you will implement the following\nfunctions. To make the tests easier to read, we've provided the \u003cem\u003esignatures\u003c/em\u003e of\nthe functions.\u003c/p\u003e\n\n\u003cp\u003eA function \u003cem\u003esignature\u003c/em\u003e is the function name, the arguments it expects, and what\nthe function returns.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateEmployeeRecord\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA 4-element Array of a \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, and \u003ccode\u003eNumber\u003c/code\u003e\ncorresponding to a first name, family name, title, and pay rate per hour\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eJavaScript \u003ccode\u003eObject\u003c/code\u003e with keys:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efirstName\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efamilyName\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epayPerHour\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeInEvents\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeOutEvents\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eLoads \u003ccode\u003eArray\u003c/code\u003e elements into corresponding \u003ccode\u003eObject\u003c/code\u003e properties.\n\u003cem\u003eAdditionally\u003c/em\u003e, initialize empty \u003ccode\u003eArray\u003c/code\u003es on the properties \u003ccode\u003etimeInEvents\u003c/code\u003e\nand \u003ccode\u003etimeOutEvents\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateEmployeeRecords\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eConverts each nested \u003ccode\u003eArray\u003c/code\u003e into an employee record using\n\u003ccode\u003ecreateEmployeeRecord\u003c/code\u003e and accumulates it to a new \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateTimeInEvent\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA date stamp (\u003ccode\u003e\"YYYY-MM-DD HHMM\"\u003c/code\u003e), where time is expressed in \u003ca href=\"https://en.wikipedia.org/wiki/24-hour_clock\"\u003e24-hour standard\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe record that was just updated\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e with keys:\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e: Set to \u003ccode\u003e\"TimeIn\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehour\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edate\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateTimeOutEvent\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA date stamp (\u003ccode\u003e\"YYYY-MM-DD HHMM\"\u003c/code\u003e), where time is expressed in \u003ca href=\"https://en.wikipedia.org/wiki/24-hour_clock\"\u003e24-hour standard\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe record that was just updated\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e with keys:\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e: Set to \u003ccode\u003e\"TimeOut\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehour\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edate\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ehoursWorkedOnDate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA date of the form \u003ccode\u003e\"YYYY-MM-DD\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eHours worked, an \u003ccode\u003eInteger\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eGiven a date, find the number of hours elapsed between that date's\ntimeInEvent and timeOutEvent\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA date of the form \u003ccode\u003e\"YYYY-MM-DD\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003ePay owed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ehoursWorkedOnDate\u003c/code\u003e, multiply the hours by the record's\npayRate to determine amount owed. Amount should be returned as a number.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003eallWagesFor\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eNone\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eSum of pay owed to all employees for all dates, as a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e, accumulate the value of all dates worked by the\nemployee in the record used as context. Amount should be returned as a\nnumber. \u003cstrong\u003eHINT\u003c/strong\u003e: You will need to find the available dates somehow....\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003efindEmployeeByFirstName\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003esrcArray\u003c/code\u003e: Array of employee records\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003efirstName\u003c/code\u003e: String representing a first name held in an employee record\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eMatching record or \u003ccode\u003eundefined\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eTest the \u003ccode\u003efirstName\u003c/code\u003e field for a match with the \u003ccode\u003efirstName\u003c/code\u003e argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecalculatePayroll\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of employee records\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003ePay owed for all dates\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e, accumulate the value of all dates worked by the\nemployee in the record used as context. Amount should be returned as a\nnumber.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eA Mystery on the Horizon\u003c/h2\u003e\n\n\u003cp\u003eYou'll notice that in this lab we give you the implementation of \u003ccode\u003eallWagesFor\u003c/code\u003e.\nAs part of writing this challenge, we ran right smack into one of the most\nfamous bugs in JavaScript land: \"the lost context bug.\" Because we've not\ntaught you to deal with it, we've \"given\" you this function. We think you can\nsolve the other tests with this little piece having been given to you.\u003c/p\u003e\n\n\u003cp\u003eIf you find yourself having extra time, try researching this topic on your own.\nWe'll tell you all about it in our next lesson, though.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThis is one of the hardest topics in JavaScript. But you have hands-on\nexperience with the why and motivations of it! You're so much better off than\nmost JavaScript hackers who \u003cem\u003enever\u003c/em\u003e quite get the hang of it. It's been a lot\nof growth, but this hard-won knowledge is going to help you do staggeringly\ncool things\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"\u003e\u003ccode\u003ebind\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/apply\"\u003e\u003ccode\u003eapply\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gfeb8632963cf8573600f430c7e758190"},{"id":173501,"title":"The Lost Context Bug Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-the-lost-context-bug\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-the-lost-context-bug/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-the-lost-context-bug\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-the-lost-context-bug/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eState the cause of the lost context bug\u003c/li\u003e\n\u003cli\u003eUse a \u003ccode\u003ethisArg\u003c/code\u003e to avoid the lost context bug\u003c/li\u003e\n\u003cli\u003eUse a closure to regain access to the lost context\u003c/li\u003e\n\u003cli\u003eUse an arrow function expression to create a function without its own\ncontext\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lessons we've learned about record-oriented programming and\nhow, by using methods like \u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003eapply\u003c/code\u003e, and \u003ccode\u003ebind\u003c/code\u003e, we can change the\ndefault context of a function from the global context (\u003ccode\u003ewindow\u003c/code\u003e in the\nbrowser, \u003ccode\u003eglobal\u003c/code\u003e in NodeJS) as we see fit. That's an awesome power.\u003c/p\u003e\n\n\u003cp\u003eHowever, sometimes the rules of function execution interact in a way that leads\nto \u003cstrong\u003e\u003cem\u003eone particularly surprising bug\u003c/em\u003e\u003c/strong\u003e: \"the lost context bug.\" It's\nimpossible to list \u003cem\u003eall\u003c/em\u003e the places where this bug could be triggered, but if\nyou encounter something \"strange\" like what we describe below, you'll know how\nto proceed.\u003c/p\u003e\n\n\u003ch2\u003eScenario\u003c/h2\u003e\n\n\u003cp\u003eIt's the All-Father Odin's birthday. His sons, Thor and Loki, would like to\nprint him a birthday greeting using JavaScript. They know how to define\n\u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003efunction\u003c/code\u003es, so they've written a simple function that takes an\nconfiguration \u003ccode\u003eObject\u003c/code\u003e as the \u003cem\u003eexecution context\u003c/em\u003e and prints a JavaScript\ngreeting card.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eObject\u003c/code\u003e looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo display this, they wrote the following function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e\u003cbr\u003e    this.signatories.forEach(function(signatory){\u003cbr\u003e        let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis doesn't work as planned. They get an error like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003e/Users/heimdall/git_checkouts/fi/jscontext/unnamed/card.js:20\u003cbr\u003e        let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e                                     ^\u003cbr\u003e\u003cbr\u003eTypeError: Cannot read property 'Thor' of undefined\u003cbr\u003e    at /Users/heimdall/git_checkouts/fi/jscontext/unnamed/card.js:20:38\u003cbr\u003e    at Array.forEach ()\u003cbr\u003e    at Object.printCard (/Users/heimdall/git_checkouts/fi/jscontext/unnamed/card.js:19:22)\u003cbr\u003e    at Object. (/Users/heimdall/git_checkouts/fi/jscontext/unnamed/card.js:25:11)\u003cbr\u003e    at Module._compile (internal/modules/cjs/loader.js:799:30)\u003cbr\u003e    at Object.Module._extensions..js (internal/modules/cjs/loader.js:810:10)\u003cbr\u003e    at Module.load (internal/modules/cjs/loader.js:666:32)\u003cbr\u003e    at tryModuleLoad (internal/modules/cjs/loader.js:606:12)\u003cbr\u003e    at Function.Module._load (internal/modules/cjs/loader.js:598:3)\u003cbr\u003e    at Function.Module.runMain (internal/modules/cjs/loader.js:862:12)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat is going on here?\" A quick debug shows that there \u003cstrong\u003every much\u003c/strong\u003e is a\nproperty called \u003ccode\u003e\"Thor\"\u003c/code\u003e in \u003ccode\u003econfiguration.closing\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econsole.log(configuration.closing.Thor) //=\u0026gt; \"Admiration, respect, and love\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere is one of the most boggling problems in JavaScript: a bug created in the\nshadow of the all-too-easy-to-forget fact that function expressions and\ndeclarations \u003cstrong\u003e\u003cem\u003einside\u003c/em\u003e\u003c/strong\u003e of other functions \u003cstrong\u003e\u003cem\u003edo not automatically\u003c/em\u003e\u003c/strong\u003e use the\nsame context as the outer function. Think about the rules of implicit context\nassignment before reading on.\u003c/p\u003e\n\n\u003ch2\u003eDebugging: Discovering the Nature of the Lost Context Bug\u003c/h2\u003e\n\n\u003cp\u003eAs a first step in getting this code working, let's add some \u003ccode\u003econsole.log()\u003c/code\u003e\ncalls so we can see what \u003ccode\u003ethis\u003c/code\u003e is.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e\u003cbr\u003e    console.log(\"Debug Before forEach: \" + this)\u003cbr\u003e    this.signatories.forEach(function(signatory){\u003cbr\u003e        console.log(\"Debug Inside: \" + this)\u003cbr\u003e        // let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eProduces:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003eDebug Before forEach: [object Object]\u003cbr\u003eDebug Inside: [object Window]\u003cbr\u003eDebug Inside: [object Window]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003econsole.log()\u003c/code\u003e statements reveal the bug. \u003cem\u003eInside\u003c/em\u003e the \u003ccode\u003eforEach\u003c/code\u003e, the\nexecution context \u003cstrong\u003eis not\u003c/strong\u003e the \u003ccode\u003econfiguration\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e we used as a \u003ccode\u003ethis\u003c/code\u003e\nargument when calling the function \u003ccode\u003eprintCard\u003c/code\u003e. Instead, the \u003ccode\u003ethis\u003c/code\u003e \u003cem\u003einside\u003c/em\u003e\nthe function expression passed to \u003ccode\u003eforEach\u003c/code\u003e is the global object (\u003ccode\u003ewindow\u003c/code\u003e or\n\u003ccode\u003eglobal\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eRemember the rules of function invocation. A function defaults to getting the\nglobal scope as \u003cem\u003eexecution context\u003c/em\u003e when it is called without \"anything to the\nleft of a dot.\". It \u003cstrong\u003edoes not\u003c/strong\u003e get its parent function's \u003cem\u003eexecution context\u003c/em\u003e\nautomatically. There are many ways for programmers to solve this problem. The\nthree most common are:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ePass a \u003ccode\u003ethisArg\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eUse a closure\u003c/li\u003e\n\u003cli\u003eUse (something new) the arrow function expression\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eSolution 1:  Use a \u003ccode\u003ethisArg\u003c/code\u003e to avoid the lost context bug\u003c/h2\u003e\n\n\u003cp\u003ePer the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"\u003eforEach documentation\u003c/a\u003e, we could pass a \u003ccode\u003ethisArg\u003c/code\u003e argument to\n\u003ccode\u003eforEach\u003c/code\u003e as its second argument, after the function expression. This\nexplicitly provides a context for the function used inside \u003ccode\u003eforEach\u003c/code\u003e. Doing so\nfixes our bug.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: This pattern works for \u003ccode\u003eforEach\u003c/code\u003e as well as \u003ccode\u003emap\u003c/code\u003e and\nother collection-processing methods. Consult their documentation to\nsee where a \u003ccode\u003ethisArg\u003c/code\u003e is expected.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e\u003cbr\u003e    this.signatories.forEach(function(signatory){\u003cbr\u003e        let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    }, this)\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\u003cbr\u003e\u003cbr\u003e# Prints out:\u003cbr\u003e# Happy Birthday, Odin One-Eye!\u003cbr\u003e# From Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e#\u003cbr\u003e# Love,\u003cbr\u003e# Admiration, respect, and love, Thor\u003cbr\u003e# Your son, Loki\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the call to \u003ccode\u003eforEach\u003c/code\u003e, we tell it to use (for its own context) the context\nthat \u003ccode\u003eprintCard\u003c/code\u003e has as \u003ccode\u003eprintCard\u003c/code\u003e's \u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA slight variation on this idea would be to invoke \u003ccode\u003ebind\u003c/code\u003e on the function\nexpression in the \u003ccode\u003eforEach\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e    let contextBoundForEachExpr = function(signatory){\u003cbr\u003e        let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    }.bind(this)\u003cbr\u003e\u003cbr\u003e    this.signatories.forEach(contextBoundForEachExpr)\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\u003cbr\u003e/*\u003cbr\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003eAdmiration, respect, and love, Thor\u003cbr\u003eYour son, Loki\u003cbr\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the \"Context Lab\" we used this approach to make sure that the reduce\nfunction in \u003ccode\u003eallWagesFor\u003c/code\u003e worked. Take a look at the implementation and see how\n\u003ccode\u003ebind\u003c/code\u003e-ing \u003ccode\u003ereduce\u003c/code\u003e saved you from falling into this bug \u003cem\u003eand\u003c/em\u003e let you use the\npowerful \u003ccode\u003ereduce\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch2\u003eSolution 2: Use a Closure to Regain Access to the Lost Context\u003c/h2\u003e\n\n\u003cp\u003eIn the previous section, we noted that we were going to take the \u003ccode\u003ethis\u003c/code\u003e that\n\u003ccode\u003eprintCard\u003c/code\u003e has access to and re-pass it either as a \u003ccode\u003ethisArg\u003c/code\u003e to \u003ccode\u003eforEach\u003c/code\u003e\n\u003cstrong\u003eor\u003c/strong\u003e provide it as the context for \u003ccode\u003ebind\u003c/code\u003e. Since we have an ability to \"point\nto\" that context, we could assign that value to a variable and leverage\nfunction-level scope and \u003cem\u003eclosures\u003c/em\u003e to regain access to the outer context.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e\u003cbr\u003e    let outerContext = this\u003cbr\u003e\u003cbr\u003e    this.signatories.forEach(function(signatory){\u003cbr\u003e        let message = `${outerContext.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\u003cbr\u003e/*\u003cbr\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003eAdmiration, respect, and love, Thor\u003cbr\u003eYour son, Loki\u003cbr\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMany JavaScript developers define the variable we called \u003ccode\u003eouterContext\u003c/code\u003e by the\nname \u003ccode\u003eself\u003c/code\u003e which sure is confusing for Ruby programmers!  In any case, by\nusing an assignment with \u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003evar\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e, we put the original context\nwithin the function-level scope that the inner function encloses as a closure.\nThis means inside the inner function, we can get \"back\" to the outer function's\ncontext. That's solution number two.\u003c/p\u003e\n\n\u003cp\u003eWhat we would \u003cem\u003ereally\u003c/em\u003e like is for there to be a way to tell the \u003ccode\u003efunction\u003c/code\u003e\ninside of \u003ccode\u003eforEach\u003c/code\u003e to\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cem\u003eNot\u003c/em\u003e declare its own context \u003cstrong\u003ebut also\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eNot\u003c/em\u003e require us to do some extra work with using \u003ccode\u003ebind\u003c/code\u003e or a \u003ccode\u003ethisArg\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn ES6, JavaScript gave us an answer: the \"arrow function expression.\" This is\nour third and most-preferred option. Nevertheless, you will see all the other\napproaches used in framework code (e.g. React) and in other codebases.\u003c/p\u003e\n\n\u003ch2\u003eSolution 3: Use an Arrow Function Expression to Create a Function Without Its Own Context\u003c/h2\u003e\n\n\u003cp\u003eThe arrow function expression (often simply called an \"arrow function\") is yet\nanother way of writing a function expression. They look different from \"old\nstyle\" function expressions, but the \u003cstrong\u003e\u003cem\u003emost important difference\u003c/em\u003e\u003c/strong\u003e is that\nthe arrow function is \u003cstrong\u003e\u003cem\u003eautomatically bound\u003c/em\u003e\u003c/strong\u003e to its parent's context and\ndoes not create a context of its own.\u003c/p\u003e\n\n\u003cp\u003eMany programmers think arrow functions are much more predictable since they\ndo not create their own \u003ccode\u003ethis\u003c/code\u003e during execution and instead \"absorb\" the\ncontext of their enclosing environment.\u003c/p\u003e\n\n\u003cp\u003eSince \u003cem\u003ethe whole point\u003c/em\u003e of an arrow function is to \u003cstrong\u003e\u003cem\u003enot have its own\nexecution context\u003c/em\u003e\u003c/strong\u003e, we should not use \u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003ebind\u003c/code\u003e, or \u003ccode\u003eapply\u003c/code\u003e when\nexecuting them. Most of the time, you'll see them used like anonymous functions\npassed as first-class data into another function See the \u003ccode\u003ereduce\u003c/code\u003e example\nbelow. It's typical.\u003c/p\u003e\n\n\u003cp\u003eAn arrow function looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// The let greeter is merely the assignment, the expression begins at `(`\u003cbr\u003elet greeter = (nameToGreet) =\u0026gt; {\u003cbr\u003e    let message = `Good morning ${nameToGreet}`\u003cbr\u003e    console.log(message)\u003cbr\u003e    return \"Greeted: \" + nameToGreet\u003cbr\u003e}\u003cbr\u003elet result = greeter(\"Max\") //=\u0026gt; \"Greeted: Max\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich, excluding context-switching differences, is the exact same as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet greeter = function(nameToGreet) {\u003cbr\u003e    let message = `Good morning ${nameToGreet}`\u003cbr\u003e    console.log(message)\u003cbr\u003e    return \"Greeted: \" + nameToGreet\u003cbr\u003e}.bind(this)\u003cbr\u003elet result = greeter(\"Max Again\") //=\u0026gt; \"Greeted: Max Again\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause arrow functions are \u003cem\u003eso often used\u003c/em\u003e to take a value, do a single\noperation with it, and return the result, they have two shortcuts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you pass only one argument, you don't have to wrap the single parameter in \u003ccode\u003e()\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIf there is only one expression, you don't need to wrap it in \u003ccode\u003e{}\u003c/code\u003e and the result of that expression is automatically returned.\u003c/li\u003e\n\u003cli\u003eAnti-Shortcut: If you \u003cem\u003eDO\u003c/em\u003e use \u003ccode\u003e{}\u003c/code\u003e, you must explicitly \u003ccode\u003ereturn\u003c/code\u003e the return value\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThus Thor and Loki can fix their problem and wish their father a happy birthday\nmost elegantly with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e    // Wow! Elegant! And notice the arrow function's `this` is the same\u003cbr\u003e    // this that printCard has by virtue of configuration being passed\u003cbr\u003e    // in as a thisArg\u003cbr\u003e    this.signatories.forEach(s =\u0026gt; console.log(`${this.closing[s]}, ${s}`)\u003cbr\u003e    )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\u003cbr\u003e/* OUTPUT:\u003cbr\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003eAdmiration, respect, and love, Thor\u003cbr\u003eYour son, Loki\u003cbr\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eYou've now learned how to both spot and how to counteract the lost context bug\nusing some very interesting tools. We think of this as a way to help protect\nyou as you start to build your own applications.\u003c/p\u003e\n\n\u003cp\u003eThe arrow function expression that we introduced here is a very important piece\nof syntax. While it lets us type less, and \u003cem\u003eyes\u003c/em\u003e that is a very good thing, its\nmost important feature is that \u003cstrong\u003e\u003cem\u003eit carries its parent's context as its\nown\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith this knowledge, we think you've learned all the skills you're going to\nneed in order to build your own JavaScript library. Enjoy the challenge!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"\u003eforeach\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"\u003eArrow Function\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#No_separate_this\"\u003eMDN On Why Arrow Functions Help Us leverage \u003ccode\u003ethis\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g10967eb85f40d10bafcbf4713c87d586"},{"id":173502,"title":"JavaScript Functional Library Project","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-functional-library-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-functional-library-project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-functional-library-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-functional-library-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\"Functional programming (FP)\" is a style of programming like record-oriented or\nobject-oriented programming. It's very popular in languages that \u003cstrong\u003e\u003cem\u003eLOVE\u003c/em\u003e\u003c/strong\u003e\nfunctions, like JavaScript.\u003c/p\u003e\n\n\u003cp\u003eDon't get spooked though, we've been guiding you and coaching you all along to\nthink in the \"FP\" mindset.\u003c/p\u003e\n\n\u003cp\u003eDevelopers learn new paradigms all the time. Today we're going to practice\nlearning a new style of programming and implementing it.\u003c/p\u003e\n\n\u003cp\u003eFirst, read up on \u003ca href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0\"\u003eFP\u003c/a\u003e, and then come back.\u003c/p\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine an IIFE: Instantly-Invoked Function Expression\u003c/li\u003e\n\u003cli\u003ePass data between functions and callbacks\u003c/li\u003e\n\u003cli\u003eCall a callback from within a function\u003c/li\u003e\n\u003cli\u003ePass a callback to a function\u003c/li\u003e\n\u003cli\u003eIdentify JavaScript's non-enforcement of arity\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYour functions should conform to the following guidelines:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite pure functions (see article)\u003c/li\u003e\n\u003cli\u003eAvoid sharing or mutating state (see article)\u003c/li\u003e\n\u003cli\u003eAvoid side effects (see article)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eGiven the same input your functions should always return the same value.\u003c/p\u003e\n\n\u003cp\u003eBelow you will find a list of function descriptions detailing what their name,\nparameters and return value should be. Your job is to develop the code to\nimplement these functions.\u003c/p\u003e\n\n\u003cp\u003eThe entire \u003ccode\u003efi\u003c/code\u003e library should be wrapped in an \u003ca href=\"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\"\u003eImmediately Invoked Function\nExpression\u003c/a\u003e (IIFE), like the example below.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi = (function() {\u003cbr\u003e  return {\u003cbr\u003e    libraryMethod: function() {\u003cbr\u003e      return \"Start by reading the article!\";\u003cbr\u003e    },\u003cbr\u003e\u003cbr\u003e    each: function() {\u003cbr\u003e      /*TODO*/\u003cbr\u003e    }\u003cbr\u003e  };\u003cbr\u003e})();\u003cbr\u003e\u003cbr\u003efi.libraryMethod();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWrapping a library in code is sometimes called \"\u003ca href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript\"\u003eThe Module Pattern\u003c/a\u003e\"\u003c/p\u003e\n\n\u003cp\u003eThe point of this exercise is to build \u003cstrong\u003e\u003cem\u003eyour own implementation\u003c/em\u003e\u003c/strong\u003e of the\ncollection-processing methods. Don't simply re-use the built-in methods!\nLeverage all you know about callbacks, passing data, etc. to prove that you\ncould build your own collection-processing framework whenever \u003cstrong\u003e\u003cem\u003eyou\u003c/em\u003e\u003c/strong\u003e want.\u003c/p\u003e\n\n\u003ch2\u003eCollection Functions (Arrays or Objects)\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003efi.each\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.each(collection, callback)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIterates over a \u003cstrong\u003ecollection\u003c/strong\u003e of elements, passing each element in turn to a\n\u003cstrong\u003ecallback\u003c/strong\u003e function. Each invocation of \u003cstrong\u003ecallback\u003c/strong\u003e is called with three\narguments: (element, index, collection). If \u003cstrong\u003ecollection\u003c/strong\u003e is a JavaScript\nobject, \u003cstrong\u003ecallback\u003c/strong\u003e's arguments will be (value, key, collection). \u003cstrong\u003eReturns\nthe original collection for chaining.\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.each([1, 2, 3], alert);\u003cbr\u003e=\u0026gt; alerts each number in turn and returns the original collection\u003cbr\u003efi.each({one: 1, two: 2, three: 3}, alert);\u003cbr\u003e=\u0026gt; alerts each number value in turn and returns the original collection\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.map\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.map(collection, callback)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eProduces a new array of values by mapping each value in \u003cstrong\u003ecollection\u003c/strong\u003e through\na transformation function (\u003cstrong\u003ecallback\u003c/strong\u003e). The callback is passed three\narguments: the value, then the index (or key) of the iteration, and finally a\nreference to the entire collection. \u003cstrong\u003eReturns a new collection for chaining\nwithout modifying the original.\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.map([1, 2, 3], function(num){ return num * 3; });\u003cbr\u003e=\u0026gt; [3, 6, 9]\u003cbr\u003efi.map({one: 1, two: 2, three: 3}, function(num, key){ return num * 3; });\u003cbr\u003e=\u0026gt; [3, 6, 9]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.reduce\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.reduce(collection, callback, acc)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReduce boils down a \u003cstrong\u003ecollection\u003c/strong\u003e of values into a single value. \u003cstrong\u003eAcc\u003c/strong\u003e\n(short for accumulator) starts as the initial state of the reduction, and with\neach successive step it should be accumulate the return value of \u003cstrong\u003ecallback\u003c/strong\u003e.\nThe callback is passed three arguments: the acc, the current value in our\niteration (the element in the array), and finally a reference to the entire\ncollection.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar sum = fi.reduce([1, 2, 3], function(acc, val, collection) { return acc + val; }, 0);\u003cbr\u003e=\u0026gt; 6\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.find\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.find(collection, predicate)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eLooks through each value in the \u003cstrong\u003ecollection\u003c/strong\u003e, returning the first one that\npasses a truth test (\u003cstrong\u003epredicate\u003c/strong\u003e), or undefined if no value passes the test.\nThe function returns as soon as it finds an acceptable element, and doesn't\ntraverse the entire collection.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar even = fi.find([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\u003cbr\u003e=\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.filter\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.filter(collection, predicate)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eLooks through each value in the \u003cstrong\u003ecollection\u003c/strong\u003e, returning an array of all the\nvalues that pass a truth test (\u003cstrong\u003epredicate\u003c/strong\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar evens = fi.filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\u003cbr\u003e=\u0026gt; [2, 4, 6]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.size\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.size(collection)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturn the number of values in the \u003cstrong\u003ecollection\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.size({one: 1, two: 2, three: 3});\u003cbr\u003e=\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eArray Functions\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003efi.first\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.first(array, [n])\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns the first element of an \u003cstrong\u003earray\u003c/strong\u003e. Passing \u003cstrong\u003en\u003c/strong\u003e will return the first \u003cstrong\u003en\u003c/strong\u003e elements of the array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.first([5, 4, 3, 2, 1]);\u003cbr\u003e=\u0026gt; 5\u003cbr\u003e\u003cbr\u003efi.first([5, 4, 3, 2, 1], 3);\u003cbr\u003e=\u0026gt; [5, 4, 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.last\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.last(array, [n])\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns the last element of an \u003cstrong\u003earray\u003c/strong\u003e. Passing \u003cstrong\u003en\u003c/strong\u003e will return the last \u003cstrong\u003en\u003c/strong\u003e elements of the array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.last([5, 4, 3, 2, 1]);\u003cbr\u003e=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.compact\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.compact(array)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns a copy of the \u003cstrong\u003earray\u003c/strong\u003e with all falsy values removed. In JavaScript,\n\u003cem\u003efalse\u003c/em\u003e, \u003cem\u003enull\u003c/em\u003e, \u003cem\u003e0\u003c/em\u003e, \u003cem\u003e\"\"\u003c/em\u003e, \u003cem\u003eundefined\u003c/em\u003e and \u003cem\u003eNaN\u003c/em\u003e are all falsy.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.compact([0, 1, false, 2, '', 3]);\u003cbr\u003e=\u0026gt; [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.sortBy\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.sortBy(array, callback)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns a sorted copy of \u003cstrong\u003earray\u003c/strong\u003e, ranked in ascending order by the results of\nrunning each value through \u003cstrong\u003ecallback\u003c/strong\u003e. The values from the original array\nshould be retained within the sorted copy, just in ascending order.  \u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eThe point of this exercise is not to write your own sorting algorithm and you are free to use the native \u003ca href=\"https://www.w3schools.com/js/js_array_sort.asp\"\u003eJS sort\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eIf you would like to go deeper and try to construct your own sorting algorithm\nthis is a great extension.\n\u003ca href=\"http://blog.benoitvallon.com/sorting-algorithms-in-javascript/sorting-algorithms-in-javascript-all-the-code/\"\u003eHere\u003c/a\u003e\nis a list of sorting algorithms implemented in JS with additional resources\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.sortBy([1, 2, 3, 4, 5, 6], function(num){ return Math.sin(num) });\u003cbr\u003e=\u0026gt; [5, 4, 6, 3, 1, 2];\u003cbr\u003e\u003cbr\u003e\u003cbr\u003evar stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];\u003cbr\u003efi.sortBy(stooges, function(stooge){ return stooge.name });\u003cbr\u003e=\u0026gt; [{name: 'curly', age: 60}, {name: 'larry', age: 50}, {name: 'moe', age: 40}];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.flatten (bonus function)\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.flatten(array, [shallow])\u003c/code\u003e\nFlattens a nested \u003cstrong\u003earray\u003c/strong\u003e (the nesting can be to any depth).\u003c/p\u003e\n\n\u003cp\u003eIf you pass \u003cstrong\u003etrue\u003c/strong\u003e for the second argument, the array will only be flattened a single level.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.flatten([1, [2], [3, [[4]]]]);\u003cbr\u003e=\u0026gt; [1, 2, 3, 4];\u003cbr\u003e\u003cbr\u003efi.flatten([1, [2], [3, [[4]]]], true);\u003cbr\u003e=\u0026gt; [1, 2, 3, [[4]]];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.uniq\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.uniq(array, [isSorted], [callback])\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eProduces a duplicate-free version of the \u003cstrong\u003earray\u003c/strong\u003e, using \u003cem\u003e===\u003c/em\u003e to test object equality. In particular only the first occurrence of each value is kept.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.uniq([1, 2, 1, 4, 1, 3]);\u003cbr\u003e=\u0026gt; [1, 2, 4, 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you know in advance that the \u003cstrong\u003earray\u003c/strong\u003e is sorted, passing \u003cem\u003etrue\u003c/em\u003e for \u003cstrong\u003eisSorted\u003c/strong\u003e will run a much faster algorithm. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.uniq(['a', 'a', 'b', 'c', 'e', 'e', 'e', 'e'], true)\u003cbr\u003e=\u0026gt; ['a', 'b', 'c', 'e'] // faster than unsorted\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you want to compute unique items based on a transformation, pass a \u003cstrong\u003ecallback\u003c/strong\u003e function.\u003c/p\u003e\n\n\u003cp\u003eSpecifically, if the callback function returns the same value that a previous execution of the callback also returned, we don't include that item in the return array - even if the original array's elements are different. The output array will be made up of a subset of the values of the original array - not the transformed values.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.uniq([1, 2, 3, 6], false, (x =\u0026gt; x % 3));\u003cbr\u003e=\u0026gt; [1, 2, 3]\u003cbr\u003efi.uniq([4,8,6,5,7], false, (x =\u0026gt; x % 3));\u003cbr\u003e=\u0026gt; [4,8,6]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eFunction\u003c/h2\u003e\n\n\u003ch2\u003eObject Functions\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003efi.keys\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.keys(object)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eRetrieve all the names of the \u003cstrong\u003eobject\u003c/strong\u003e's own enumerable properties.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.keys({one: 1, two: 2, three: 3});\u003cbr\u003e=\u0026gt; [\"one\", \"two\", \"three\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.values\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.values(object)\u003c/code\u003e\nReturn all of the values of the \u003cstrong\u003eobject\u003c/strong\u003e's own properties.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.values({one: 1, two: 2, three: 3});\u003cbr\u003e=\u0026gt; [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.functions\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.functions(object)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns a sorted collection of the names of every function in an object — that is to say, the name of every property whose value is a function.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.functions(fi);\u003cbr\u003e=\u0026gt; [\"compact\", \"each\", \"filter\", \"find\", \"first\", \"functions\", \"last\", \"map\", \"reduce\", \"size\", \"sortBy\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBuilding a functional library is a great experience for learning to see how\nmany functions can build off of each other. This lab asked you to take on some\nof the basic tasks that you would face when writing a functional library.\u003c/p\u003e\n\n\u003cp\u003eExpand your vocabulary by visiting a library like \u003ca href=\"https://lodash.com\"\u003elodash\u003c/a\u003e or \u003ca href=\"https://ramdajs.com/docs/\"\u003eramda\u003c/a\u003e. Look\nat methods like Ramda's \u003ca href=\"https://ramdajs.com/docs/#filter\"\u003efilter\u003c/a\u003e or \u003ca href=\"https://ramdajs.com/docs/#flip\"\u003eflip\u003c/a\u003e. Can you imagine how to write\nthat? These libraries are providing the functionality just like you did too!\u003c/p\u003e\n\n\u003cp\u003eYou've pushed your skills to a whole new level. Congratulations!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lodash.com\"\u003elodash\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ramdajs.com/docs/\"\u003eramda\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g8cc656c6525c0c190737742e3bf98cca"}]},{"id":18930,"name":"Object-Oriented JavaScript","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gda77227541e18ad514a1dc29e4869690","items":[{"id":173503,"title":"Object-Orientation in JavaScript","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-object-orientation-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-object-orientation-in-javascript/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-object-orientation-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-object-orientation-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e“Every application is a collection of code; the code’s arrangement is the\ndesign.\" - Sandi Metz\u003c/p\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eReview the meaning of Object Orientation\u003c/li\u003e\n\u003cli\u003eReview the benefits of Object Orientation\u003c/li\u003e\n\u003cli\u003eIntroduce how JavaScript can be written using Object Orientation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far in JavaScript, we've discussed the \"Three Pillars of Web Programming\",\n\u003cstrong\u003eRecognizing JS events\u003c/strong\u003e, \u003cstrong\u003eManipulating the DOM\u003c/strong\u003e, and \u003cstrong\u003eCommunicate with the\nserver\u003c/strong\u003e, and we saw how these pillars are incorporated into web applications.\u003c/p\u003e\n\n\u003cp\u003eThe process we've learned so far has been:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e An HTML page renders on the screen\u003c/li\u003e\n\u003cli\u003e JavaScript is executed when the page loads\u003c/li\u003e\n\u003cli\u003e In the JavaScript, event listeners are created pointing to 'free-standing'\nfunctions, listed out in the JavaScript file.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn that process, we have three primary takeaways:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSome of these functions handle DOM manipulation\u003c/li\u003e\n\u003cli\u003eSome functions handle server communication\u003c/li\u003e\n\u003cli\u003eStill other functions may serve as 'helper' functions to others\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese functions can be invoked in whatever order we set, or from within each\nother. This set up works great when just getting off the ground; with a handful\nof functions, we can get an interactive website up and running. What happens,\nthough, when we want to go beyond a small website?\u003c/p\u003e\n\n\u003cp\u003eLet's go back and take a look at the first app we discussed, \u003ca href=\"https://github.com/learn-co-curriculum/fewpjs-stitching-together-the-three-pillars\"\u003eSimple Liker\u003c/a\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e\n\n\u003cp\u003eImagine we want to add a feature to this - we want to display the number of\nusers who have liked this message. Let's say we can get this info from the\nserver, so we write a function that fetches the data and updates the DOM to\ndisplay it. This function could be called when the page loads as well as\nwhenever anyone clicks the 'like' button.\u003c/p\u003e\n\n\u003cp\u003eGreat, but what happens when we start to expand further? Right now we only have\nthe one message from Byron. What if we could have multiple messages to like?\nMore functions would be needed. We'd probably have to modify the code that we\nhave, as well, making it a more complicated.\u003c/p\u003e\n\n\u003cp\u003eContinuing to expand our app, what about displaying a list of names of people\nwho liked this post? More code is needed. How about being able to post our \u003cem\u003eown\u003c/em\u003e\nmessages for other users to like? Even more code. What about adding the option\nto add message comments? A lot more code.\u003c/p\u003e\n\n\u003cp\u003eAt this point, our Simple Liker would no longer be simple, and pretty soon, the\ncode needed to keep all our features working has grown quite long. What's worse,\nall of the different things that happen on our website are starting to get\njumbled together in a heap of functions. You may be able to get everything\nworking for every feature added but the functions have become intertwined and dependent on each other. Coding this way comes at a cost:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe more complicated our code gets, the harder it is to understand and\nchange it.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn larger applications, we might be dealing with hundreds of functions, DOM\nelements, and events, all tied together, forming a web of\nrelationships. It becomes increasingly difficult to follow the flow of actions\nin your code as more and more functions are introduced. Changes to one function\nmay have unforeseen affects on functions \u003cem\u003e'downstream'\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis web of dependent, free-standing functions can be improved with\norganization. We do things like group functions together, arrange code in a\nreadable way. Our options, however, are still limited - it's still a big web.\u003c/p\u003e\n\n\u003cp\u003eIn this and the following lessons, we're going to take a look at an alternative\nway to structure our code, Object Orientation. By understanding and using OO, we\ncan \u003cem\u003edesign\u003c/em\u003e our code to be easier to read, understand and change.\u003c/p\u003e\n\n\u003ch2\u003eDefine Object Orientation\u003c/h2\u003e\n\n\u003cp\u003eWith Object Orientation, instead of a web, we can think of our code as a\ncollection of \u003cem\u003ecells\u003c/em\u003e. These cells are separated from each other, can contain\n\u003cem\u003einformation\u003c/em\u003e, bits of data like variables, as well as \u003cem\u003ebehaviors\u003c/em\u003e, functions\ndirectly related to that data.\u003c/p\u003e\n\n\u003cp\u003eConsider the lessons so far: any sort of data we had to store and manipulate\nhas been either stored in variables or passed to functions as arguments. Code\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet name = 'Evan';\u003cbr\u003elet age = 34;\u003cbr\u003e\u003cbr\u003efunction sayHello(nameOfPerson) {\u003cbr\u003e  console.log(`Hello, my name is ${nameOfPerson}.`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction sayAge(age) {\u003cbr\u003e  console.log(`I am ${age} years old.`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction haveBirthday(age) {\u003cbr\u003e  return age + 1;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003esayHello(name);\u003cbr\u003e// =\u0026gt; Hello, my name is Evan.\u003cbr\u003esayAge(age);\u003cbr\u003e// =\u0026gt; I am 34 years old.\u003cbr\u003eage = haveBirthday(age);\u003cbr\u003esayAge(age);\u003cbr\u003e// =\u0026gt; I am 35 years old.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've got some data, a \u003ccode\u003eString\u003c/code\u003e and an \u003ccode\u003eInteger\u003c/code\u003e assigned to variables,\nand a few functions for using and reading that data. The functions and data are\nclosely related. Combined, they convey information about a \u003cem\u003eperson\u003c/em\u003e. While we,\nas human beings, might be able to interpret the above code as all related, as\nfar as code structure, \u003cstrong\u003ethere isn't anything structurally that actually\n\u003cem\u003eencodes\u003c/em\u003e those relationships\u003c/strong\u003e. The \u003cem\u003enames\u003c/em\u003e of our functions\nand variables are the only indicators that they are related.\u003c/p\u003e\n\n\u003cp\u003eObject Orientation grants us the ability to write code that \u003cstrong\u003estructurally\u003c/strong\u003e\nestablishes the relationships between data and functions. If we rewrite our\nfirst code snippet applying Object Orientation, we could write something like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person {\u003cbr\u003e  constructor(name, age) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.age = age;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  sayHello() {\u003cbr\u003e    console.log(`Hello, my name is ${this.name}.`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  sayAge() {\u003cbr\u003e    console.log(`I am ${this.age} years old.`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  haveBirthday(age) {\u003cbr\u003e    console.log(`It's my birthday!`);\u003cbr\u003e    this.age += 1;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet evan = new Person('Evan', 34);\u003cbr\u003e\u003cbr\u003eevan.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Evan.\u003cbr\u003eevan.sayAge();\u003cbr\u003e// =\u0026gt; I am 34 years old.\u003cbr\u003eevan.haveBirthday();\u003cbr\u003e// =\u0026gt; It's my birthday.\u003cbr\u003eevan.sayAge();\u003cbr\u003e// =\u0026gt; I am 35 years old.\u003cbr\u003eevan;\u003cbr\u003e// =\u0026gt; Person { name: 'Evan', age: 35 }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYou can try out the code above. Type \u003ccode\u003enode\u003c/code\u003e in your terminal, then\ncopy and paste the above code into the Node environment to play around\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eDo not be alarmed if some of this looks unfamiliar. We will go into greater\ndetail later about specific syntax. For now, though, take a moment to notice\nwhat changed. Where did our variables go? Now we just have one: \u003ccode\u003eevan\u003c/code\u003e.\nInstead of being assigned to a data type like a \u003ccode\u003eString\u003c/code\u003e or an \u003ccode\u003eInteger\u003c/code\u003e,\n\u003ccode\u003eevan\u003c/code\u003e assigned to a \u003ccode\u003ePerson\u003c/code\u003e object that \u003cem\u003econtains\u003c/em\u003e our data.\u003c/p\u003e\n\n\u003cp\u003eThis \u003ccode\u003ePerson\u003c/code\u003e object is a \u003ccode\u003eclass\u003c/code\u003e, the fundamental structure underlying all\nObject Oriented code in JavaScript. The line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet evan = new Person('Evan', 34);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...initializes a copy, a single \u003cstrong\u003e\u003cem\u003einstance\u003c/em\u003e\u003c/strong\u003e of the \u003ccode\u003ePerson\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e (more on\nthis later). Two arguments are passed in, \u003ccode\u003e'Evan'\u003c/code\u003e and \u003ccode\u003e34\u003c/code\u003e, and the resulting\ninstance is assigned to a variable.\u003c/p\u003e\n\n\u003cp\u003eThe instance we just created contains the functions that were previously\nfree-standing, \u003ccode\u003esayHello\u003c/code\u003e, \u003ccode\u003esayAge\u003c/code\u003e, and \u003ccode\u003ehaveBirthday\u003c/code\u003e. Notice here that we're\nno longer passing data as arguments to these functions when we call them.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eFor clarity, in these lessons, functions that are contained within a \u003ccode\u003eclass\u003c/code\u003e\nor \u003ccode\u003eclass\u003c/code\u003e instance will be referred to as 'methods'.\nThe word \u003cem\u003e'function'\u003c/em\u003e will be used when referring to functions outside of any \u003ccode\u003eclass\u003c/code\u003e\nobject.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eInstead of receiving arguments, our \u003cem\u003emethods\u003c/em\u003e have access to the data as\n\u003ccode\u003ethis.name\u003c/code\u003e and \u003ccode\u003ethis.age\u003c/code\u003e! These are referred to as \u003cem\u003eproperties\u003c/em\u003e, and are\nboth assigned when a new instance of the \u003ccode\u003ePerson\u003c/code\u003e class is created.\u003c/p\u003e\n\n\u003cp\u003eWith our data and \u003cem\u003emethods\u003c/em\u003e captured in the \u003ccode\u003ePerson\u003c/code\u003e instance, we've\n\u003cstrong\u003e\u003cem\u003eencapsulated\u003c/em\u003e\u003c/strong\u003e all the information and behaviors that represent a \u003cem\u003eperson\u003c/em\u003e in\nour code!\u003c/p\u003e\n\n\u003ch2\u003eThe Benefits of Object Orientation\u003c/h2\u003e\n\n\u003cp\u003eThe end result of our code example hasn't changed - we are still able to perform\nthe same actions with minor modifications. However, by designing and creating\n\u003ccode\u003eclass\u003c/code\u003ees like this, we can gain some important benefits:\u003c/p\u003e\n\n\u003ch3\u003eEasier to Change\u003c/h3\u003e\n\n\u003cp\u003eIf we want to add more code related to a \u003cem\u003eperson\u003c/em\u003e, instead of just adding it in\nto a long list of functions, we now have a clear, logical place\nto put it. This makes it easier to extend code, and encourages good organization\nin the future.\u003c/p\u003e\n\n\u003ch3\u003eOffers Better Data Control\u003c/h3\u003e\n\n\u003cp\u003eBy encapsulating our data in a \u003ccode\u003eclass\u003c/code\u003e, we can protect that data from unexpected\nchanges. When using local variables like \u003ccode\u003elet name = \"Evan\"\u003c/code\u003e, the variable is\nvulnerable to change from any function. Functions, meanwhile, will do what they\nare programmed to do, regardless of the data they are given. They are oblivious.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction sayHello(nameOfPerson) {\u003cbr\u003e  console.log(`Hello, my name is ${nameOfPerson}.`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003esayHello([23, 'Golden Apple']);\u003cbr\u003e// =\u0026gt; Hello, my name is 23,Golden Apple.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn a \u003ccode\u003eclass\u003c/code\u003e, however, we can design our code so that methods with a specific\npurpose only interact with and change the data they are supposed to. We don't\nneed a stand alone \u003ccode\u003esayHello\u003c/code\u003e function that takes in any argument and tries to\nlog it, we just need it for saying a particular person's name.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet sarah = new Person('Sarah', 31);\u003cbr\u003esarah.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Sarah.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEqually, using a \u003ccode\u003eclass\u003c/code\u003e to encapsulate our data allows us to be specific in how\nthat data is used. The \u003ccode\u003esarah\u003c/code\u003e variable in the code snippet above points to an\nentire \u003cem\u003einstance\u003c/em\u003e of the \u003ccode\u003ePerson\u003c/code\u003e class. Wherever \u003ccode\u003esarah\u003c/code\u003e goes, \u003ccode\u003esarah\u003c/code\u003e will\nalways carry its properties and methods with it. If we need to access\ndata stored on the instance, we can get property values directly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esarah.name;\u003cbr\u003e// =\u0026gt; 'Sarah'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr use the built in methods \u003cem\u003ewe've\u003c/em\u003e defined to access the information however we choose:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esarah.sayAge();\u003cbr\u003e// =\u0026gt; I am 31 years old.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eEasy to Replicate\u003c/h3\u003e\n\n\u003cp\u003eEvery time we initialize a new instance of the \u003ccode\u003ePerson\u003c/code\u003e class, we create a\nunique object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet sarah = new Person('Sarah', 31);\u003cbr\u003elet evan = new Person('Evan', 34);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince each instance of \u003ccode\u003ePerson\u003c/code\u003e has unique data, our instance methods will\nbehave accordingly and only use \u003cem\u003etheir\u003c/em\u003e data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevan.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Evan.\u003cbr\u003esarah.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Sarah.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis turns out to be a fantastic help when dealing with many collections of\nsimilar data. For example, comments on a blog post - while\nthe data is unique to each, comments should always 'behave' the same way - they\nall display the same on the page. With Object Orientation, we can write a\n\u003ccode\u003eComment\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e and create an 'instance' for each unique comment.\u003c/p\u003e\n\n\u003cp\u003eOnce we establish the data and methods for a \u003ccode\u003eclass\u003c/code\u003e, we can create as many\ncopies as we need.\u003c/p\u003e\n\n\u003ch3\u003eImproves Understanding by Adding Meaning\u003c/h3\u003e\n\n\u003cp\u003eBy encapsulating related information and behavior, we have organized our code in\na more meaningful way. It \u003cem\u003emakes sense\u003c/em\u003e to us as humans to group related things\nlike this. Object Orientation works well for representing real world systems\nand relationships in code, which makes it easier to comprehend.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet sarah = new Person('Sarah', 31);\u003cbr\u003elet evan = new Person('Evan', 34);\u003cbr\u003elet restaurant = new Restaurant('La Villa', '261 5th Ave, Brooklyn, NY');\u003cbr\u003e\u003cbr\u003eevan.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Evan.\u003cbr\u003esarah.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Sarah.\u003cbr\u003e\u003cbr\u003erestaurant.addGuest(evan);\u003cbr\u003erestaurant.addGuest(sarah);\u003cbr\u003erestaurant.serveGuest(evan, new Drink('Water'));\u003cbr\u003erestaurant.serveGuest(sarah, new Drink('Water'));\u003cbr\u003e\u003cbr\u003eevan.saySmallTalk();\u003cbr\u003e// =\u0026gt; How about this weather?\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll \u003ccode\u003eclass\u003c/code\u003ees are structured in a consistent way, so even though we don't\nknow the details of the \u003ccode\u003eRestaurant\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e, we can still infer how the\n\u003ccode\u003eRestaurant\u003c/code\u003e, \u003ccode\u003ePerson\u003c/code\u003e and \u003ccode\u003eDrink\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003ees might interact.\u003c/p\u003e\n\n\u003cp\u003eMany systems of inter-related things can be represented as objects interacting\nwith one another, and being able to visualize these relationships helps when\ndesigning complex applications. Even the more abstract concepts of web\nprogramming can be easier to understand using Object Orientation, though it\ntakes some practice to think in the OO mindset.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere is a lot involved in writing Object Oriented code. In the upcoming\nlessons, we will build \u003ccode\u003eclass\u003c/code\u003ees from scratch and talk about the different ways\nwe can design them. Later on, we will introduce \u003ccode\u003eclass\u003c/code\u003e interactions and how\nmany instances of different \u003ccode\u003eclass\u003c/code\u003ees can work together. Object Orientation\ncan fundamentally change the way we design our code, but as we explore, we will\nsee how proper design encourages code that is easier to use, understand, change\nand maintain.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS\"\u003eMDN - Object Oriented JavaScript for Beginners\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"object-orientation-in-javascript"},{"id":173504,"title":"Classes and Instances","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-classes-and-instances\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-classes-and-instances/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-classes-and-instances\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-classes-and-instances/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the creation of \u003ccode\u003eclass\u003c/code\u003e instances using \u003ccode\u003econstructor\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eState the definition of instance properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn Object Orientated JavaScript, objects share a similar structure, the \u003ccode\u003eclass\u003c/code\u003e.\nEach \u003ccode\u003eclass\u003c/code\u003e has the ability to generate copies of itself, referred to as\n\u003cem\u003einstances\u003c/em\u003e. Each of these \u003ccode\u003eclass\u003c/code\u003e instances can contain unique data, often\nset when the instance is created.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we are going to take a closer look at \u003ccode\u003eclass\u003c/code\u003e syntax, instance\ncreation and how to use the \u003ccode\u003econstructor\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eA Basic \u003ccode\u003eclass\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eclass\u003c/code\u003e syntax was introduced in \u003ca href=\"https://www.w3schools.com/js/js_es6.asp\"\u003eECMAScript 2015\u003c/a\u003e and it's important\nto note that the \u003ccode\u003eclass\u003c/code\u003e keyword is just syntactic sugar, or a nice abstraction,\nover JavaScript's existing prototypal object structure.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eReminder: All JavaScript objects inherit properties and methods from a\n\u003ccode\u003eprototype\u003c/code\u003e. This includes standard objects like functions and data types.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA basic, empty class can be written on one line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Fish {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith only a name and brackets, we can now create instances of the 'Fish' \u003ccode\u003eclass\u003c/code\u003e\nby using \u003ccode\u003enew\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet oneFish = new Fish();\u003cbr\u003elet twoFish = new Fish();\u003cbr\u003e\u003cbr\u003eoneFish; // =\u0026gt; Fish {}\u003cbr\u003etwoFish; // =\u0026gt; Fish {}\u003cbr\u003e\u003cbr\u003eoneFish == twoFish; // =\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese two fish are unique \u003ccode\u003eclass\u003c/code\u003e instances, even though they have no\ninformation encapsulated within them.\u003c/p\u003e\n\n\u003ch2\u003eUsing the \u003ccode\u003econstructor\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eTypically, when we create an instance of a \u003ccode\u003eclass\u003c/code\u003e, we want it to contain some\nbit of unique information from the beginning. To do this, we use a special\nmethod called \u003ccode\u003econstructor\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Fish {\u003cbr\u003e  constructor(name, age) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.age = age;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003econstructor\u003c/code\u003e method allows us pass arguments in when we use the \u003ccode\u003enew\u003c/code\u003e\nsyntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet redFish = new Fish('Red', 3);\u003cbr\u003elet blueFish = new Fish('Blue', 1);\u003cbr\u003e\u003cbr\u003eredFish; // =\u0026gt; Fish { name: 'Red', age: 3 }\u003cbr\u003eblueFish; // =\u0026gt; Fish { name: 'Blue', age: 1 }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our instances are each carrying unique data. It is possible to add and\nchange data using other means \u003cem\u003eafter\u003c/em\u003e an instance is created using custom\nmethods, but the \u003ccode\u003econstructor\u003c/code\u003e is where any initial data is defined.\u003c/p\u003e\n\n\u003ch2\u003eAssigning Instance Properties\u003c/h2\u003e\n\n\u003cp\u003eWe see that our fish have data, but what is happening exactly inside the\n\u003ccode\u003econstructor\u003c/code\u003e?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econstructor(name, age) {\u003cbr\u003e  this.name = name;\u003cbr\u003e  this.age = age\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTwo arguments, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eage\u003c/code\u003e are passed in and then assigned to something\nnew: \u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor now, think of \u003ccode\u003ethis\u003c/code\u003e as a reference to the object it is inside. Since we're\ncalling \u003ccode\u003econstructor\u003c/code\u003e when we create a new instance (\u003ccode\u003enew Fish('Red', 3)\u003c/code\u003e),\n\u003ccode\u003ethis\u003c/code\u003e is referring to the \u003cem\u003einstance we've created\u003c/em\u003e. \u003cem\u003eThis\u003c/em\u003e fish.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn \u003ccode\u003eclass\u003c/code\u003e methods, \u003ccode\u003ethis\u003c/code\u003e acts similar to Ruby's \u003ccode\u003eself\u003c/code\u003e keyword. \u003ccode\u003ethis\u003c/code\u003e can\nbe used to refer to properties of an instance, like \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eage\u003c/code\u003e, or methods\nof an instance (\u003ccode\u003ethis.sayName()\u003c/code\u003e). There is more to \u003ccode\u003ethis\u003c/code\u003e than meets\nthe eye, however, and we will go into more detail later on.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eAccessing Instance Properties\u003c/h2\u003e\n\n\u003cp\u003eIf we've assigned an instance to a variable, we can access properties\nusing the variable object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet oldFish = new Fish('George', 19);\u003cbr\u003elet newFish = new Fish('Clyde', 1);\u003cbr\u003e\u003cbr\u003eoldFish.name; //=\u0026gt; 'George'\u003cbr\u003eoldFish.age; //=\u0026gt; 19\u003cbr\u003enewFish.name; //=\u0026gt; 'Clyde'\u003cbr\u003enewFish.age; //=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy using \u003ccode\u003ethis.name\u003c/code\u003e and \u003ccode\u003ethis.age\u003c/code\u003e to define properties in our \u003ccode\u003econstructor\u003c/code\u003e,\nwe can also refer to these properties within other methods of our \u003ccode\u003eclass\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Fish {\u003cbr\u003e    constructor(name, age) {\u003cbr\u003e        this.name = name;\u003cbr\u003e        this.age = age;\u003cbr\u003e    }\u003cbr\u003e\u003cbr\u003e    sayName() {\u003cbr\u003e        return `Hi my name is ${this.name}`;\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis allows us to return dynamic information based on the unique properties\nwe assigned back when an instance was created. Another example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet square = new Square(5);\u003cbr\u003esquare; // =\u0026gt; Square { sideLength: 5 }\u003cbr\u003esquare.sideLength; // =\u0026gt; 5\u003cbr\u003esquare.area(); // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003ePrivate Properties\u003c/h4\u003e\n\n\u003cp\u003eAll properties are accessible from outside an instance, as we see with\n\u003ccode\u003esquare.sideLength\u003c/code\u003e, as well as from within \u003ccode\u003eclass\u003c/code\u003e methods (\u003ccode\u003ethis.sideLength\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThis is not always desirable - sometimes, we want to protect the data from being\nmodified after being set, or we want to use methods to control the exact ways\nour data should be changed. Say, for instance, we had a \u003ccode\u003eTransaction\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e\nthat we are using to represent individual bank transactions. When a new\n\u003ccode\u003eTransaction\u003c/code\u003e instance is created, it has \u003ccode\u003eamount\u003c/code\u003e, \u003ccode\u003edate\u003c/code\u003e and \u003ccode\u003ememo\u003c/code\u003e\nproperties.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Transaction {\u003cbr\u003e  constructor(amount, date, memo) {\u003cbr\u003e    this.amount = amount;\u003cbr\u003e    this.date = date;\u003cbr\u003e    this.memo = memo;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003edate\u003c/code\u003e, \u003ccode\u003eamount\u003c/code\u003e and \u003ccode\u003ememo\u003c/code\u003e properties represent fixed values for each\ninstance when a \u003ccode\u003eTransaction\u003c/code\u003e instance is created and probably shouldn't be\naltered. However, it is still possible to change these properties after they are\nassigned:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet transaction = new Transaction(100.24, '03/04/2018', 'Grocery Shopping');\u003cbr\u003etransaction.amount; // =\u0026gt; 100.24\u003cbr\u003etransaction.amount = 1000000000000.24;\u003cbr\u003etransaction.amount; // =\u0026gt; 1000000000000.24\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCurrently, there is no official way to make a property private - all \u003ccode\u003eclass\u003c/code\u003e and\nobject properties are exposed as we see above. One common convention, however,\nis to include an underscore at the beginning of the property name to indicate\nthose properties are not intended to be accessed from outside the \u003ccode\u003eclass\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Transaction {\u003cbr\u003e  constructor(amount, date, memo) {\u003cbr\u003e    this._amount = amount;\u003cbr\u003e    this._date = date;\u003cbr\u003e    this._memo = memo;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, it is \u003cem\u003estill\u003c/em\u003e possible to modify these properties, the \u003ccode\u003eamount\u003c/code\u003e property\nname just changed to \u003ccode\u003e_amount\u003c/code\u003e. The above \u003ccode\u003eclass\u003c/code\u003e, setup, however, \u003cem\u003esuggests\u003c/em\u003e\nthat these properties should only be accessed or changed through \u003ccode\u003eclass\u003c/code\u003e\nmethods, not directly.\u003c/p\u003e\n\n\u003cp\u003eImplementing private properties is planned in\n\u003ca href=\"https://www.sitepoint.com/javascript-private-class-fields/\"\u003efuture versions of JavaScript\u003c/a\u003e, and will use a \u003ccode\u003e#\u003c/code\u003e symbol to indicate a\nproperty is private.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSo, to recap, we can define a \u003ccode\u003eclass\u003c/code\u003e simply by writing \u003ccode\u003eclass\u003c/code\u003e, a name, and a\nset of curly brackets. We can then use this \u003ccode\u003eclass\u003c/code\u003e to create unique instances.\nThese instances can contain their own data, which we typically set using\n\u003ccode\u003econstructor\u003c/code\u003e, passing in arguments and assigning them to properties we've\ndefined. With these properties, \u003ccode\u003eclass\u003c/code\u003e instances can carry data around with\nthem wherever they go. While there are no private properties (yet), it is\npossible to set up \u003ccode\u003eclass\u003c/code\u003ees to emphasize using methods over directly changing\nproperties.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\u003eClasses\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"classes-and-instances"},{"id":173505,"title":"Initializing Instances","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-initializing-instances\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-initializing-instances/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-initializing-instances\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-initializing-instances/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a class in JavaScript using the class keyword\u003c/li\u003e\n\u003cli\u003eProvide a JavaScript class's constructor instantiation data for an instance\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we are going to practice creating Object Oriented classes and instances using JavaScript's \u003ccode\u003eclass\u003c/code\u003e keyword. We are also going to use JavaScript's class \u003ccode\u003econstructor\u003c/code\u003e to instantiate data into a class. In other words, we're going to create a class, and then put some data in it.\u003c/p\u003e\n\n\u003ch2\u003eCreate a class in JavaScript using the class keyword\u003c/h2\u003e\n\n\u003cp\u003eRemember, when we want to create a class in JavaScript, we want to create it using the \u003ccode\u003eclass\u003c/code\u003e keyword:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eProvide a JavaScript class's \u003ccode\u003econstructor\u003c/code\u003e instantiation data for an instance\u003c/h2\u003e\n\n\u003cp\u003eWithin our class, JavaScript class's \u003ccode\u003econstructor\u003c/code\u003e allows us to pass data to our new class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog {\u003cbr\u003e  constructor(name, breed) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.breed = breed;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou could then create data for the class above by doing something like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet bigFluffyDog1 = new Dog(\"Buzz\", \"greatPyrenees\");\u003cbr\u003elet bigFluffyDog2 = new Dog(\"Woody\", \"labrador\");\u003cbr\u003e\u003cbr\u003ebigFluffyDog1; // =\u0026gt; Dog { name: 'Buzz', breed: 'greatPyrenees' }\u003cbr\u003ebigFluffyDog2; // =\u0026gt; Dog { name: 'Woody', breed: 'labrador' }\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eTo practice OOP concepts, let's create 3 classes that use constructor methods. These constructors will assign properties based on initial parameters.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a class for \u003ccode\u003eBreakfast\u003c/code\u003e. \u003ccode\u003eBreakfast\u003c/code\u003e will have a constructor with a food and a drink.\u003c/li\u003e\n\u003cli\u003eCreate a class for \u003ccode\u003eLunch\u003c/code\u003e. \u003ccode\u003eLunch\u003c/code\u003e will have a constructor with a salad, a soup, and a drink.\u003c/li\u003e\n\u003cli\u003eCreate a class for \u003ccode\u003eDinner\u003c/code\u003e. Since dinner is a little bit fancier, \u003ccode\u003eDinner\u003c/code\u003e will have a constructor with salad, soup, entree, and dessert. Indicate that dessert is intended to be a private property by including an underscore (\u003ccode\u003e_\u003c/code\u003e) at the beginning.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBy effectively creating classes and instances, you have mastered the beginning of Object Oriented JavaScript. Feel free to play around with your newly created classes to create more instances!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\u003eClasses\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g8210a89a3135f8476f489715fddbf746"},{"id":173506,"title":"Adding Behavior with Methods","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-adding-behavior-with-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-adding-behavior-with-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-adding-behavior-with-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-adding-behavior-with-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite methods that use instance data and parameter data\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn review, with \u003cem\u003eObject-Oriented programming (OOP)\u003c/em\u003e, we can use classes to\nrepresent concepts such as students, books, comments, posts, or even animals.\u003c/p\u003e\n\n\u003cp\u003eWe should only have to define the properties and methods of a class once.\nDifferent \u003cem\u003einstances\u003c/em\u003e of this class will all have the same properties and\nmethods. Specific values for those properties will be different between\ninstances. Mickey and Minnie are both \u003ccode\u003eMouse\u003c/code\u003e instances that have a property\ncalled \u003ccode\u003ename\u003c/code\u003e, but the value of that property for each is different.\u003c/p\u003e\n\n\u003cp\u003eWith knowledge of \u003ccode\u003econstructors\u003c/code\u003e, we can use JavaScript's \u003ccode\u003eclass\u003c/code\u003ees as a\ntemplate for \u003cem\u003einstances\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWrite a Method That Uses Instance Data and Parameter Data\u003c/h3\u003e\n\n\u003cp\u003eTo practice \u003cem\u003eOOP\u003c/em\u003e concepts, let's create 3 \u003ccode\u003eclass\u003c/code\u003ees that use \u003ccode\u003econstructor\u003c/code\u003e\nmethods. These \u003ccode\u003econstructor\u003c/code\u003es will assign properties based on initial parameters.\nWe'll also write methods that leverage these properties.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Create \u003ccode\u003eclass\u003c/code\u003ees \u003ccode\u003eCat\u003c/code\u003e, \u003ccode\u003eDog\u003c/code\u003e, and \u003ccode\u003eBird\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e Each of these \u003ccode\u003eclass\u003c/code\u003ees will accept the \u003cem\u003eparameters\u003c/em\u003e \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003esex\u003c/code\u003e and\nwill store those values as \u003cem\u003eproperties\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003eclass Cat {\u003cbr\u003e  //...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Dog {\u003cbr\u003e  //...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Bird {\u003cbr\u003e  //...\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor each \u003ccode\u003eclass\u003c/code\u003e, create the method \u003ccode\u003espeak\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFor an \u003cem\u003einstance\u003c/em\u003e of \u003ccode\u003eCat\u003c/code\u003e, speak returns \"\u003ccode\u003ename\u003c/code\u003e says meow!\",\u003c/li\u003e\n\u003cli\u003eFor an \u003cem\u003einstance\u003c/em\u003e of \u003ccode\u003eDog\u003c/code\u003e, speak returns \"\u003ccode\u003ename\u003c/code\u003e says woof!\"\u003c/li\u003e\n\u003cli\u003eFor an \u003cem\u003einstance\u003c/em\u003e of \u003ccode\u003eBird\u003c/code\u003e, speak returns conditional output. If the\n\u003cem\u003einstance\u003c/em\u003e of \u003ccode\u003eBird\u003c/code\u003e is \u003ccode\u003emale\u003c/code\u003e, speak returns \"It's me! \u003ccode\u003ename\u003c/code\u003e, the parrot!\". If\nit is not \u003ccode\u003emale\u003c/code\u003e, speak returns \"\u003ccode\u003ename\u003c/code\u003e says squawk!\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe've learned to instantiate class instances, or \"objects\" in JavaScript. The\nconstructor function allows us to easily define and standardize the instances we\ncreate. Good work!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003eMozilla Developer Network\u003c/a\u003e - \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003ethis\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://codeburst.io/various-ways-to-create-javascript-object-9563c6887a47\"\u003eJavaScript — Multiple Ways to Create Objects\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g1b614488b68f6b26ffd466d8b625159f"},{"id":173507,"title":"Method Types","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-method-types\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-method-types/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-method-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-method-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize the syntactic differences between regular, static, getter and setter\nmethods\u003c/li\u003e\n\u003cli\u003eRecognize the different uses of each method type\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've seen some examples of \u003ccode\u003eclass\u003c/code\u003ees that have their own custom\nmethods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt turns out, however, there are four different types of methods we can write in\na \u003ccode\u003eclass\u003c/code\u003e: the standard 'instance' method we've seen already, \u003cem\u003estatic\u003c/em\u003e, getter\nand setter methods. Each of these behaves differently, and this variety provides\nus with flexibility in how we design the behaviors of our \u003ccode\u003eclass\u003c/code\u003ees.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we're going to briefly look at each type of method and consider\nsome use cases for each.\u003c/p\u003e\n\n\u003ch2\u003eStandard Methods\u003c/h2\u003e\n\n\u003cp\u003eMost \u003ccode\u003eclass\u003c/code\u003e methods you will see use the following, standard syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earea() {\u003cbr\u003e  return this.sideLength * this.sideLength;\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese methods are available to any instance of the \u003ccode\u003eclass\u003c/code\u003e they belong to,\nas we've seen:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet square = new Square(5);\u003cbr\u003esquare.area(); // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMethods can be called from inside other methods just like properties:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  areaMessage() {\u003cbr\u003e    return `The area of this square is ${this.area()}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003esquare.area(); // =\u0026gt; 25\u003cbr\u003esquare.areaMessage(); // =\u0026gt; LOG: The area of this square is 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the \u003ccode\u003eclass\u003c/code\u003e above, we can access \u003ccode\u003earea()\u003c/code\u003e directly, or use it to provide\ndynamic content for other methods. These methods are the most common - they act\nas the 'behaviors' of a \u003ccode\u003eclass\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003ch2\u003eStatic Methods\u003c/h2\u003e\n\n\u003cp\u003eStatic methods are \u003ccode\u003eclass\u003c/code\u003e level methods - they are not callable on instances of\na \u003ccode\u003eclass\u003c/code\u003e, only the \u003ccode\u003eclass\u003c/code\u003e itself. These are often used in 'utility' \u003ccode\u003eclass\u003c/code\u003ees -\n\u003ccode\u003eclass\u003c/code\u003ees that encapsulate a set of related methods but don't need to be\nmade into instances. For example, we could write a \u003ccode\u003eCommonMath\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e that\nstores a series of math related methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CommonMath {\u003cbr\u003e  static triple(number) {\u003cbr\u003e    return number * number * number;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  static findHypotenuse(a, b) {\u003cbr\u003e    return Math.sqrt(a * a + b * b);\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo access, these static methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet num = CommonMath.triple(3);\u003cbr\u003enum; // =\u0026gt; 27\u003cbr\u003elet c = CommonMath.findHypotenuse(3, 4);\u003cbr\u003ec; // =\u0026gt; 5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sort of \u003ccode\u003eclass\u003c/code\u003e might be useful in many different situations, but we don't\never need an \u003cem\u003einstance\u003c/em\u003e of it.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eget\u003c/code\u003e Keyword in JavaScript Class Context\u003c/h2\u003e\n\n\u003cp\u003eOften, when writing methods for a \u003ccode\u003eclass\u003c/code\u003e, we want to return information derived\nfrom that instance's properties. In the Square \u003ccode\u003eclass\u003c/code\u003e example earlier, \u003ccode\u003earea()\u003c/code\u003e\nreturns a calculation based on \u003ccode\u003ethis.sideLength\u003c/code\u003e, and \u003ccode\u003eareaMessage()\u003c/code\u003e returns a\n\u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn modern JavaScript, new syntax, \u003ccode\u003eget\u003c/code\u003e, has been introduced. The \u003ccode\u003eget\u003c/code\u003e keyword\nis used in \u003ccode\u003eclass\u003c/code\u003ees for methods which serve the specific purpose of\nretrieving data from an instance.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eget\u003c/code\u003e keyword turns a method into a 'pseudo-property', that is - it allows\nus to write a method that interacts like a property. To use \u003ccode\u003eget\u003c/code\u003e, write a\n\u003ccode\u003eclass\u003c/code\u003e method like normal, preceded by \u003ccode\u003eget\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs a result of this, \u003ccode\u003earea\u003c/code\u003e will now be available as though it is a\nproperty just like \u003ccode\u003esideLength\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet square = new Square(5);\u003cbr\u003esquare.sideLength; // =\u0026gt; 5\u003cbr\u003esquare.area; // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you try to use \u003ccode\u003ethis.area()\u003c/code\u003e, you'll receive a TypeError - \u003ccode\u003earea\u003c/code\u003e is no\nlonger considered a function!\u003c/p\u003e\n\n\u003cp\u003eThis may seem strange - you could also just write the following and achieve the\nsame result:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e    this.area = sideLength * sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is valid code, but what we've done is load our \u003ccode\u003econstructor\u003c/code\u003e with more\ncalculations.\u003c/p\u003e\n\n\u003cp\u003eThe main benefit to using \u003ccode\u003eget\u003c/code\u003e is that your \u003ccode\u003earea\u003c/code\u003e calculation isn't actually\nrun until it is accessed. The 'cost' of calculating is offset, and may not be\ncalled at all. While our computers can make short work of this example, there\nare times when we need to perform calculations that are CPU intensive, sometimes\nreferred to as a 'costly' or 'expensive' processes.\u003c/p\u003e\n\n\u003cp\u003eIf included in the \u003ccode\u003econstructor\u003c/code\u003e, an expensive process will be called every\ntime a new instance of a \u003ccode\u003eclass\u003c/code\u003e is created. When dealing with many instances,\nthis can result in decreased performance.\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003eget\u003c/code\u003e, an expensive process can be delayed - only run when we need it,\ndistributing the workload more evenly.\u003c/p\u003e\n\n\u003cp\u003eEven if your process is not expensive, using \u003ccode\u003eget\u003c/code\u003e is useful in general when\nderiving or calculating data from properties. Since properties can change,\nany values dependent on them should be calculated based on the current property\nvalues, otherwise we will run in to issues like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e    this.area = sideLength * sideLength;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003elet square = new Square(5);\u003cbr\u003esquare.area; // =\u0026gt; 25\u003cbr\u003esquare.sideLength = 10;\u003cbr\u003esquare.area; // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf \u003ccode\u003earea\u003c/code\u003e is only calculated in the beginning and \u003ccode\u003esideLength\u003c/code\u003e is then modified,\n\u003ccode\u003earea\u003c/code\u003e will no longer be accurate.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eset\u003c/code\u003e Keyword in JavaScript Class Context\u003c/h2\u003e\n\n\u003cp\u003eUsing \u003ccode\u003eget\u003c/code\u003e to create a pseudo-property is only half the story, since it is\nonly used for retrieving data from an instance. To change data, we have \u003ccode\u003eset\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eset\u003c/code\u003e keyword allows us to write a method that interacts like a property\nbeing assigned a value. By adding it in conjunction with a \u003ccode\u003eget\u003c/code\u003e, we can\ncreate a 'reassignable' pseudo-property.\u003c/p\u003e\n\n\u003cp\u003eFor example, in the previous section we used \u003ccode\u003eget\u003c/code\u003e in the \u003ccode\u003eSquare\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis allowed us to retrieve the area of a Square instance like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet square = new Square(5);\u003cbr\u003esquare.sideLength; // =\u0026gt; 5\u003cbr\u003esquare.area; // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we change \u003ccode\u003esquare.sideLength\u003c/code\u003e, \u003ccode\u003esquare.area\u003c/code\u003e will update accordingly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esquare.sideLength = 10;\u003cbr\u003esquare.area; // =\u0026gt; 100\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, we can't \u003cem\u003eassign\u003c/em\u003e \u003ccode\u003earea\u003c/code\u003e a new value. To make \u003ccode\u003earea\u003c/code\u003e fully act like a\nreal property, we create both \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e methods for it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set area(newArea) {\u003cbr\u003e    this.sideLength = Math.sqrt(newArea);\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can now 'set' the pseudo-property, \u003ccode\u003earea\u003c/code\u003e, and modify \u003ccode\u003ethis.sideLength\u003c/code\u003e based\non a reverse of the calculation we used in \u003ccode\u003eget\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet square = new Square(5);\u003cbr\u003esquare.sideLength; // =\u0026gt; 5\u003cbr\u003esquare.area; // =\u0026gt; 25\u003cbr\u003esquare.area = 64;\u003cbr\u003esquare.sideLength; // =\u0026gt; 8\u003cbr\u003esquare.area; // =\u0026gt; 64\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can now interact with \u003ccode\u003earea\u003c/code\u003e as though it is a modifiable property, even\nthough \u003ccode\u003earea\u003c/code\u003e is derived.\u003c/p\u003e\n\n\u003cp\u003eFrom the outside, it looks like a property is being set, but behind the scenes,\nwe can define what we want to happen, including applying conditional statements:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eset area(newArea) {\u003cbr\u003e  if (newArea \u0026gt; 0) {\u003cbr\u003e    this.sideLength = Math.sqrt(newArea)\u003cbr\u003e  } else {\u003cbr\u003e    console.warn(\"Area cannot be less than 0\");\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCreating pseudo-properties this way enables us to finely tune how data can be\nboth accessed and modified. In using \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e, we are designing the\ninterface for our \u003ccode\u003eclass\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eUsing \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e with 'Private' Properties\u003c/h4\u003e\n\n\u003cp\u003eYou may remember, though that in JavaScript, properties are exposed. That is,\nany property can be reassigned from outside. Here is where \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e\nreally shine. Although there is no official 'private' property yet,\nan underscore at the beginning of a property is commonly used to indicate that\nmethod should not be directly modified. With \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e, we can define\nthe 'public' facing methods for updating a 'private' property:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this._sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get sideLength() {\u003cbr\u003e    this._sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set sideLength(sideLength) {\u003cbr\u003e    this._sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA square's side can't have negative length. Now with our pseudo-property in\nplace, we write code to make sure that \u003ccode\u003e_sideLength\u003c/code\u003e is always valid, both\nwhen an instance property is created and when it is modified:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    if (sideLength \u0026gt; 0) {\u003cbr\u003e      this._sideLength = sideLength;\u003cbr\u003e    } else {\u003cbr\u003e      throw new Error('A Square cannot have negative side length');\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get sideLength() {\u003cbr\u003e    this._sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set sideLength(sideLength) {\u003cbr\u003e    if (sideLength \u0026gt; 0) {\u003cbr\u003e      this._sideLength = sideLength;\u003cbr\u003e    } else {\u003cbr\u003e      throw new Error('A Square cannot have negative side length');\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could always extract that duplicate code into a helper method, but the take\naway here is the design. We've designed our \u003ccode\u003eSquare\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003ees to be a little\nmore resistant to unwanted changes that might introduce bugs.\u003c/p\u003e\n\n\u003cp\u003eStepping away from \u003ccode\u003eSquares\u003c/code\u003e for a moment, let's consider an example with\n\u003ccode\u003eString\u003c/code\u003e properties. Imagine we want to build a \u003ccode\u003eStudent\u003c/code\u003e class. The class\ntakes in a students' first and last name. We are tasked with making sure\nnames do not have any non-alphanumeric characters except for those that appear\nin names. This is sometimes referred to as \u003cem\u003esanitizing\u003c/em\u003e text.\u003c/p\u003e\n\n\u003cp\u003eWith \u003ccode\u003eset\u003c/code\u003e, we can make sure that we sanitize input text both when an instance\nis created as well as later, if the property needs to change:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Student {\u003cbr\u003e  constructor(firstName, lastName) {\u003cbr\u003e    this._firstName = this.sanitize(firstName);\u003cbr\u003e    this._lastName = this.sanitize(lastName);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get firstName() {\u003cbr\u003e    return this.capitalize(this._firstName);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set firstName(firstName) {\u003cbr\u003e    this._firstName = this.sanitize(firstName);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  capitalize(string) {\u003cbr\u003e    // capitalizes first letter\u003cbr\u003e    return string.charAt(0).toUpperCase() + string.slice(1);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  sanitize(string) {\u003cbr\u003e    // removes any non alpha-numeric characters except dash and single quotes (apostrophes)\u003cbr\u003e    return string.replace(/[^A-Za-z0-9-']+/g, '');\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet student = new Student('Carr@ol-Ann', ')Freel*ing');\u003cbr\u003estudent; // =\u0026gt; Student { _firstName: 'Carrol-Ann', _lastName: 'Freeling' }\u003cbr\u003e\u003cbr\u003estudent.firstName = 'Hea@)@(!$)ther';\u003cbr\u003estudent.firstName; // =\u0026gt; 'Heather'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this \u003ccode\u003eStudent\u003c/code\u003e class, we've set up a pseudo-property, \u003ccode\u003efirstName\u003c/code\u003e, which\nrefers to a 'private' property \u003ccode\u003e_firstName\u003c/code\u003e. We've also included a \u003ccode\u003esanitize()\u003c/code\u003e\nmethod that removes any non alpha-numeric characters except \u003ccode\u003e-\u003c/code\u003e and \u003ccode\u003e'\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBecause we are using \u003ccode\u003eset\u003c/code\u003e and a 'private' property, we can call \u003ccode\u003esanitize()\u003c/code\u003e\nwhen a \u003ccode\u003eStudent\u003c/code\u003e instance is constructed, \u003cem\u003eor\u003c/em\u003e when we try to modify\n\u003ccode\u003e_firstName\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eWhen to Use Methods Over \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAlthough \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e change the way in which we interact with a \u003ccode\u003eclass\u003c/code\u003e, \nnormal instance methods can do everything that \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e can do. So, \nwhich should we use and when? JavaScript itself is indifferent.\u003c/p\u003e\n\n\u003cp\u003eWith \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e, while we don't gain any sort of extra functionality,\nwe gain the ability to \u003cem\u003edifferentiate\u003c/em\u003e between behaviors. \u003cstrong\u003eWe can use \u003ccode\u003eget\u003c/code\u003e\nand \u003ccode\u003eset\u003c/code\u003e whenever we are handling input or output of a \u003ccode\u003eclass\u003c/code\u003e\u003c/strong\u003e. We are, \nin essence, creating the \u003cem\u003epublic interface\u003c/em\u003e of the \u003ccode\u003eclass\u003c/code\u003e. We can treat this \ninterface as a menu of sorts.. \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e methods are the ways in which \n\u003cem\u003eother\u003c/em\u003e classes and code \u003cem\u003eshould\u003c/em\u003e utilize this \u003ccode\u003eclass\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eUsing this design, all remaining methods can be considered \u003cem\u003eprivate\u003c/em\u003e. They \ndon't deal with input and output; they are only used internally as helper \nmethods.\u003c/p\u003e\n\n\u003cp\u003eIt is important to note that in JavaScript currently, we can \u003cem\u003ealways\u003c/em\u003e order \noff the menu. All \u003ccode\u003eclass\u003c/code\u003e methods and properties are exposed for use \n'publicly'. Using \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e in this way is purely design. In designing\nthis way, however, we produce better organized, easier to understand \u003ccode\u003eclass\u003c/code\u003ees.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn the Object Oriented JavaScript world, we have a variety of ways to build our\n\u003ccode\u003eclass\u003c/code\u003ees. As we continue to learn about OO JS, we will see that this\nflexibility is important - it allows us to design many \u003ccode\u003eclass\u003c/code\u003ees that work\ntogether, each serving their own specific purpose that we have defined.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\"\u003e\u003ccode\u003eget\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\"\u003estatic methods\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"method-types"},{"id":173508,"title":"Getter and Setter Methods","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-getter-and-setter-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-getter-and-setter-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-getter-and-setter-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-getter-and-setter-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuilds getter and setter methods to calculate computed properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've seen so far that we can write methods inside our \u003ccode\u003eclass\u003c/code\u003ees that allow us\nto access and change properties. These methods work fine in some cases. However,\nwe know about additional JS syntax that we can use: \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e. With \u003ccode\u003eget\u003c/code\u003e,\nwe can return calculated or dynamic data based an object properties, and with\n\u003ccode\u003eset\u003c/code\u003e we can change a property in a controlled way. In this lab, we will be\nbuilding pseudo-properties to illustrate these these concepts.\u003c/p\u003e\n\n\u003ch2\u003eBuilds Getter and Setter Method to Calculate Computed Properties\u003c/h2\u003e\n\n\u003cp\u003eLet's look at a quick example for review:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bird {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set phrase(phrase) {\u003cbr\u003e    this._phrase = phrase;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get speak() {\u003cbr\u003e    return `${this.name} says ${this._phrase || 'squawk'}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet daffy = new Bird('Daffy');\u003cbr\u003edaffy.speak; // =\u0026gt; 'Daffy says squawk'\u003cbr\u003edaffy.phrase = \"it's rabbit season!\";\u003cbr\u003edaffy.speak; // =\u0026gt; 'Daffy says it's rabbit season!'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur \u003ccode\u003eBird\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e accepts the parameter of \u003ccode\u003ename\u003c/code\u003e, which is set each time a\nnew instance of \u003ccode\u003eBird\u003c/code\u003e is created. When \u003ccode\u003ephrase\u003c/code\u003e is set, our new \u003ccode\u003eBird\u003c/code\u003e instance\ncan speak a phrase. If it is not set, it will squawk.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet buddy = Bird.new('Buddy');\u003cbr\u003e\u003cbr\u003ebuddy.phrase = \"What'cha doin'?\";\u003cbr\u003ebuddy.speak; // returns 'Buddy says What'cha doin'?'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBuilding on this concept, we're going to build our own shape calculator!\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst, let's create a \u003ccode\u003eclass\u003c/code\u003e of \u003ccode\u003eCircle\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eCircle\u003c/code\u003e will accept 1 parameter, \u003ccode\u003eradius\u003c/code\u003e, and use \u003ccode\u003ethis.radius\u003c/code\u003e to store the\nvalue\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eMath.PI\u003c/code\u003e to get an accurate measurement of \u003ca href=\"https://en.wikipedia.org/wiki/Pi\"\u003epi\u003c/a\u003e (π)\u003c/li\u003e\n\u003cli\u003eDefine getter methods for \u003ccode\u003ediameter\u003c/code\u003e, \u003ccode\u003ecircumference\u003c/code\u003e, and \u003ccode\u003earea\u003c/code\u003e which\nwill calculate each value using \u003ccode\u003ethis.radius\u003c/code\u003e and pi\u003c/li\u003e\n\u003cli\u003eDefine setter methods for \u003ccode\u003ediameter\u003c/code\u003e, \u003ccode\u003ecircumference\u003c/code\u003e, and \u003ccode\u003earea\u003c/code\u003e which\nwill accept values for each calculation, calculate the \u003cem\u003eradius\u003c/em\u003e based on the\ninput value and \u003cem\u003eset\u003c/em\u003e \u003ccode\u003ethis.radius\u003c/code\u003e accordingly\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor reference, here are the formulas for calculating diameter, circumference and\narea:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDiameter = radius • 2\u003c/li\u003e\n\u003cli\u003eCircumference = π • diameter\u003c/li\u003e\n\u003cli\u003eArea = π • radius\u003csup\u003e2\u003c/sup\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDon't forget about \u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003ePEMDAS\u003c/a\u003e!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAll instances of \u003ccode\u003eCircle\u003c/code\u003e should be able to calculate the \u003ccode\u003ediameter\u003c/code\u003e,\n\u003ccode\u003ecircumference\u003c/code\u003e, and \u003ccode\u003earea\u003c/code\u003e based on the given \u003ccode\u003eradius\u003c/code\u003e. All instances should\nalso be able to set \u003ccode\u003ethis.radius\u003c/code\u003e by setting a value to \u003ccode\u003ediameter\u003c/code\u003e,\n\u003ccode\u003ecircumference\u003c/code\u003e, or \u003ccode\u003earea\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eGetter and setter methods are very useful for doing things behind-the-scenes in\nJavaScript. Using a setter, you can call a function each time the value of a\npseudo-property is changed, making sure all data on an \u003ccode\u003eclass\u003c/code\u003e instance is\nconsistent. Using a getter, you can return a computed value as though it is a\nproperty! Just as you can set and retrieve basic information from properties,\nyou can also perform a number of functions that will \"automagically\" spit out\nthe output you want.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://javascript.info/property-accessors\"\u003eProperty getters and setters\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"ge35cdcf837660d4f13d83e8e5142ddd6"},{"id":173509,"title":"Static Methods Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-static-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-static-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-static-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-static-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite JavaScript \u003ccode\u003estatic\u003c/code\u003e methods\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we are going to practice writing \u003ccode\u003estatic\u003c/code\u003e methods. In JavaScript,\n\u003cem\u003estatic methods\u003c/em\u003e aren't called on on instances of a class, but are called\ndirectly on a class itself.\u003c/p\u003e\n\n\u003ch3\u003eDeclaring a Static Method\u003c/h3\u003e\n\n\u003cp\u003eTo declare a \u003ccode\u003estatic\u003c/code\u003e method, we write the word \u003ccode\u003estatic\u003c/code\u003e inside the class\ndeclaration directly before a method's name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass StaticMethod {\u003cbr\u003e    static methodName() {\u003cbr\u003e        console.log('My method is static!');\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause \u003ccode\u003estatic\u003c/code\u003e methods are called directly on the classes themselves, \u003ccode\u003estatic\u003c/code\u003e\nmethods have no access to data stored in specific objects.\u003c/p\u003e\n\n\u003ch3\u003eCalling a \u003ccode\u003eStatic\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eAs the \u003ccode\u003estatic\u003c/code\u003e method is operating on the class, you call the \u003ccode\u003estatic\u003c/code\u003e method\ndirectly on the class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eClassName.methodName();\u003cbr\u003e// Calls the method explicitly on the class name itself and returns the `static` value\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor \u003ccode\u003estatic\u003c/code\u003e methods, \u003ccode\u003ethis\u003c/code\u003e references the class. This means that you can call\na \u003ccode\u003estatic\u003c/code\u003e method from within another \u003ccode\u003estatic\u003c/code\u003e method of the same class using\n\u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou are going to write three \u003ccode\u003estatic\u003c/code\u003e methods in the \u003ccode\u003eFormatter\u003c/code\u003e class. Write\nyour code in the \u003ccode\u003eindex.js\u003c/code\u003e file. Let the tests guide you through the process.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Write a method \u003ccode\u003estatic capitalize\u003c/code\u003e that takes in a string and capitalizes the\nfirst letter.\u003c/li\u003e\n\u003cli\u003e Write a method \u003ccode\u003estatic sanitize\u003c/code\u003e that takes in a string and removes all\nnon-alphanumeric characters except for dashes, single quotes and spaces.\u003c/li\u003e\n\u003cli\u003e Write a method \u003ccode\u003estatic titleize\u003c/code\u003e that takes in a string and capitalizes all\nwords in a sentence except the, a, an, but, of, and, for, at, by, and from; and\nalways capitalizes the first word.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eStatic\u003c/code\u003e methods are useful ways to create utility methods for your data. If you\nhave operation that you need do perform on a batch of data (say, capitalize all\nof the headlines on your website, as above), \u003ccode\u003estatic\u003c/code\u003e methods are your go-to\ntool. Since they are called on the class but don't have access to individual\nobjects, they are somewhat limited in their scope, but can be very powerful in\nthe correct application.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Static_methods\"\u003eStatic Methods\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g3b88a6ccca7d7eba70d432d3fa2b763e"},{"id":173510,"title":"Class Extension and Inheritance","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-class-extension-and-inheritance-extends\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-extends/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-extends\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-extends/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the \u003ccode\u003eextends\u003c/code\u003e keyword\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn JavaScript, as in other Object Oriented languages, we've learned\nthat we can create classes and build methods that can perform\nactions on instance data, or specific to the class. What if you have\nclasses that exhibit many of the same behaviors, such as \u003ccode\u003eCat\u003c/code\u003e, \u003ccode\u003eDog\u003c/code\u003e,\nand \u003ccode\u003eBird\u003c/code\u003e, which all have a method for \u003ccode\u003espeak\u003c/code\u003e?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  speak() {\u003cbr\u003e    return `${this.name} says woof!`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Cat {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  speak() {\u003cbr\u003e    return `${this.name} says meow!`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Bird {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  speak() {\u003cbr\u003e      return `${this.name} says squawk!`\u003cbr\u003e    }\u003cbr\u003e  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this code snippet, \u003ccode\u003eDog\u003c/code\u003e, \u003ccode\u003eCat\u003c/code\u003e, and \u003ccode\u003eBird\u003c/code\u003e all accept \u003ccode\u003ename\u003c/code\u003e and\nhave a method called \u003ccode\u003espeak()\u003c/code\u003e, thus repeating code. In JavaScript,\nwe can create \"child\" object classes that inherit methods and properties\nfrom their \"parent\" classes, allowing us to reuse some class methods while\nbuilding in additional functionality.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we'll discuss 1 way of \u003cem\u003eextending\u003c/em\u003e functionality to\nother classes.\u003c/p\u003e\n\n\u003ch2\u003eUse the \u003ccode\u003eextends\u003c/code\u003e Keyword\u003c/h2\u003e\n\n\u003cp\u003eTo get started with inheriting class functionality, we utilize the \u003ccode\u003eextends\u003c/code\u003e\nkeyword. \u003ccode\u003eextends\u003c/code\u003e is used in class declarations to create a class which\nis a \u003cem\u003echild\u003c/em\u003e of another class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Pet {\u003cbr\u003e  constructor(name, sound) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.sound = sound;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  speak() {\u003cbr\u003e    return `${this.name} says ${this.sound}!`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Dog extends Pet {\u003cbr\u003e  // inherits constructor from Pet\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Cat extends Pet {\u003cbr\u003e  // inherits constructor from Pet\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Bird extends Pet  {\u003cbr\u003e  // inherits constructor from Pet\u003cbr\u003e  fly() {\u003cbr\u003e    return `${this.name} flies away!`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet dog = new Dog(\"Shadow\", \"woof\");\u003cbr\u003elet cat = new Cat(\"Missy\", \"meow\");\u003cbr\u003elet bird = new Bird(\"Tiki\", \"squawk\");\u003cbr\u003e\u003cbr\u003edog.speak(); // Shadow says woof!\u003cbr\u003ecat.speak(); // Missy says meow!\u003cbr\u003ebird.speak(); // Tiki says squawk!\u003cbr\u003ebird.fly(); // Tiki flies away!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn addition to \u003cem\u003einheriting\u003c/em\u003e the functionality of the \u003ccode\u003ePet\u003c/code\u003e class, each \"child\"\nclass extending the functionality of the parent. For example, \u003ccode\u003eBird\u003c/code\u003e has an\nadditional method called \u003ccode\u003efly\u003c/code\u003e that is unique to it, and not present on \u003ccode\u003ePet\u003c/code\u003e.\n\u003ccode\u003eBird\u003c/code\u003e can still call \u003ccode\u003espeak()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we learned about more functionality in JavaScript that allows\nus to leverage Object Orientation concepts: class extensions and inheritance.\nWith \u003ccode\u003eextends\u003c/code\u003e we can create new classes that are capable utilizing of all the\nsame methods as its parent. Leveraging inheritance and \u003ccode\u003eextends\u003c/code\u003e is vital in\nObject Oriented programming. It keep code bases maintainable by sharing and\nreusing code in a beneficial manner.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance\"\u003eInheritance in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends\"\u003eExtends\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420\"\u003e“Super” and “Extends” In JavaScript ES6 - Understanding The Tough Parts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"class-extension-and-inheritance"},{"id":173511,"title":"Class Extension Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-class-extensions-extends-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-extends-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-extends-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-extends-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice writing JavaScript classes that inherit from other classes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we're going to create a geometry application that allows us to\ncalculate different properties of multiple shapes. We'll be using JavaScript's\n\u003ccode\u003eclass\u003c/code\u003e keyword to build objects that inherit from its base object.\u003c/p\u003e\n\n\u003ch2\u003ePractice Writing JavaScript classes That Inherit From Other Classes\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a \u003ccode\u003ePolygon\u003c/code\u003e class. \u003ccode\u003ePolygon\u003c/code\u003e will accept an \u003ccode\u003eArray\u003c/code\u003e of integers as a\nparameter, which will represent each \u003cem\u003eside\u003c/em\u003e of a shape. \u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003ecountSides\u003c/code\u003e that counts the number of sides (each index in the array).\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003eperimeter\u003c/code\u003e that calculates the sum of each side (each index in the array) of the polygon.\nThis method will become accessible to its child classes.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDefine a \u003ccode\u003eTriangle\u003c/code\u003e class that inherits from \u003ccode\u003ePolygon\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt will automatically have access to \u003ccode\u003ecount\u003c/code\u003e and \u003ccode\u003eperimeter\u003c/code\u003e inherited from \u003ccode\u003ePolygon\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003eisValid\u003c/code\u003e that checks if the given 3 sides for a triangle is valid.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe sum of the lengths of any two sides of a triangle is greater than the length of\nthe third side. If you take the three sides of a triangle and add them in pairs, the sum\nis greater than (not equal to) the third side. If that is not true, then it is not possible\nto construct a triangle with the given side lengths.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a \u003ccode\u003eSquare\u003c/code\u003e class that inherits from \u003ccode\u003ePolygon\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIt will automatically have access to \u003ccode\u003ecount\u003c/code\u003e and \u003ccode\u003eperimeter\u003c/code\u003e inherited from \u003ccode\u003ePolygon\u003c/code\u003e. \u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003eisValid\u003c/code\u003e that checks if the given 4 sides for a square is\nvalid. A square is valid when the lengths of all sides are equal. \u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003earea\u003c/code\u003e that calculates the area of the square.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\"\u003eUnderstanding Getters\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g069e9dc5b5e33e1d87f72e98db3792c1"},{"id":173512,"title":"Super","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-class-extension-and-inheritance-super\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-super/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-super\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-super/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize how to use the \u003ccode\u003esuper\u003c/code\u003e method\u003c/li\u003e\n\u003cli\u003eRecognize how to use the \u003ccode\u003esuper\u003c/code\u003e object\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn addition to simply extending classes, JavaScript provides an additional\nkeyword, \u003ccode\u003esuper\u003c/code\u003e, for directly working with a parent class constructor and\ninherited methods.\u003c/p\u003e\n\n\u003ch2\u003eRecognize How to Use the \u003ccode\u003esuper\u003c/code\u003e Method\u003c/h2\u003e\n\n\u003cp\u003eIn the code below, we have 2 JavaScript classes: \u003ccode\u003ePet\u003c/code\u003e and \u003ccode\u003eDog\u003c/code\u003e. The \u003ccode\u003eDog\u003c/code\u003e\nclass is a \u003cem\u003echild\u003c/em\u003e class of \u003ccode\u003ePet\u003c/code\u003e and it uses the \u003ccode\u003eextends\u003c/code\u003e keyword to inherit\nmethods from the parent class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Pet {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this._name = name;\u003cbr\u003e    this._owner = null;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get name() {\u003cbr\u003e    return this._name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get owner() {\u003cbr\u003e    return this._owner;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set owner(owner) {\u003cbr\u003e    this._owner = owner;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get speak() {\u003cbr\u003e    return `${this.name} speaks.`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// Inherits from Pet\u003cbr\u003eclass Dog extends Pet {\u003cbr\u003e  constructor(name, breed) {\u003cbr\u003e    super(name); /* new */\u003cbr\u003e    this.breed = breed;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet creature = new Pet('The Thing');\u003cbr\u003elet dog = new Dog('Spot', 'Foxhound');\u003cbr\u003e\u003cbr\u003edog;\u003cbr\u003e// =\u0026gt; Dog { _name: 'Spot', _owner: null, breed: 'Foxhound' }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, there is something new. The \u003ccode\u003ePet\u003c/code\u003e class takes in a name parameter,\nassigns it to the \u003ccode\u003ename\u003c/code\u003e property, and also creates an \u003ccode\u003e_owner\u003c/code\u003e property,\nsetting it to \u003ccode\u003enull\u003c/code\u003e. The \u003ccode\u003eDog\u003c/code\u003e class takes in \u003cstrong\u003ename and breed\u003c/strong\u003e properties,\ncalls \u003ccode\u003esuper\u003c/code\u003e, passing in the name, then sets \u003ccode\u003ethis.breed\u003c/code\u003e to the provided\nbreed.\u003c/p\u003e\n\n\u003cp\u003eWhat is happening? In our \u003ccode\u003eDog\u003c/code\u003e constructor, we are able to use \u003ccode\u003esuper\u003c/code\u003e to call\nthe \u003ccode\u003ePet\u003c/code\u003e constructor. Doing this will set up the \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eowner\u003c/code\u003e\nproperties. Then, once complete, the \u003ccode\u003eDog\u003c/code\u003e constructor continues to execute,\nsetting \u003ccode\u003ebreed\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn a child class constructor, \u003ccode\u003esuper\u003c/code\u003e is used as a \u003ccode\u003emethod\u003c/code\u003e and calls the parent\nclass constructor before continuing with the child. This lets us extend a\nparent's constructor inside a child. If we need to define custom behavior in a\nchild constructor, we can do so without having to override or ignore the parent.\u003c/p\u003e\n\n\u003ch2\u003eRecognize How to Use the \u003ccode\u003esuper\u003c/code\u003e Object\u003c/h2\u003e\n\n\u003cp\u003eOutside of the constructor, the \u003ccode\u003esuper\u003c/code\u003e keyword is also used, but this time, as\nan \u003ccode\u003eobject\u003c/code\u003e. When used, it refers to parent class' properties or methods.\u003c/p\u003e\n\n\u003cp\u003eWe could, for instance, use \u003ccode\u003esuper.owner\u003c/code\u003e in our \u003ccode\u003eDog\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Inherits from Pet\u003cbr\u003eclass Dog extends Pet {\u003cbr\u003e  constructor(name, breed) {\u003cbr\u003e    super(name); /* new */\u003cbr\u003e    this._breed = breed;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get breed() {\u003cbr\u003e    return this._breed;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get info() {\u003cbr\u003e    if (super.owner) {\u003cbr\u003e      return `${this.name} is a ${this.breed} owned by ${super.owner}`;\u003cbr\u003e    }\u003cbr\u003e    return `${this.name} is a ${this.breed}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet charlie = new Dog('Charlie B. Barkin', 'Mutt');\u003cbr\u003e\u003cbr\u003edog.info;\u003cbr\u003e// =\u0026gt; 'Charlie B. Barkin is a Mutt'\u003cbr\u003e\u003cbr\u003elet lady = new Dog('Lady', 'Cocker Spaniel');\u003cbr\u003elady.owner = 'Darling Dear';\u003cbr\u003e\u003cbr\u003elady.info;\u003cbr\u003e// =\u0026gt; 'Lady is a Cocker Spaniel owned by Darling Dear'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above code, we've added an \u003ccode\u003einfo\u003c/code\u003e getter that uses \u003ccode\u003esuper.owner\u003c/code\u003e in\na conditional statement. This accesses the \u003ccode\u003eowner\u003c/code\u003e getter from the parent.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHowever\u003c/strong\u003e, since instance methods and properties are \u003cem\u003ealready\u003c/em\u003e inherited, this\n\u003cem\u003ewill be the same as using\u003c/em\u003e \u003ccode\u003ethis.owner\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003esuper\u003c/code\u003e as an object is useful in situations where a parent class contains\na static method that we want to expand on in a child class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Pet {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this._owner = null;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get owner() {\u003cbr\u003e    return this._owner;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set owner(owner) {\u003cbr\u003e    this._owner = owner;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  static definition() {\u003cbr\u003e    return `A pet is an animal kept primarily for a person's company.`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// Inherits from Pet\u003cbr\u003eclass Dog extends Pet {\u003cbr\u003e  constructor(name, breed) {\u003cbr\u003e    super(name);\u003cbr\u003e    this.breed = breed;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  static definition() {\u003cbr\u003e    return (\u003cbr\u003e      super.definition() + ' Dogs are one of the most common types of pets.'\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet creature = new Pet('The Thing');\u003cbr\u003elet dog = new Dog('Spot', 'foxhound');\u003cbr\u003e\u003cbr\u003ePet.definition();\u003cbr\u003eDog.definition();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the \u003ccode\u003ePet\u003c/code\u003e class above, we've included a static method, \u003ccode\u003edefinition()\u003c/code\u003e, for\nwhat a pet is. In \u003ccode\u003eDog\u003c/code\u003e, we are able to use \u003ccode\u003esuper.definition()\u003c/code\u003e to access that\nstatic method, then \u003cem\u003eadd\u003c/em\u003e to it, in this case, extending the definition to\nspecifically reference dogs.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we dove deeper into class extensions and inheritance in\nJavaScript. In combination with \u003ccode\u003eextends\u003c/code\u003e, \u003ccode\u003esuper\u003c/code\u003e allows a child class to\naccess a parent's constructor from within a child's constructor. It also allows\na child class to access methods and properties from a parent class, but as most\nof these are already inherited, this is only useful when modifying static\nmethods from the parent class.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance\"\u003eInheritance in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420\"\u003e“Super” and “Extends” In JavaScript ES6 - Understanding The Tough Parts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://javascript.info/class-inheritance\"\u003eClass inheritance, super\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"super"},{"id":173513,"title":"Super Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-class-extensions-super-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-super-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-super-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-super-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice using \u003ccode\u003esuper\u003c/code\u003e to extend child class functionality\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we're going to practice the two most common usages of the \u003ccode\u003esuper\u003c/code\u003e\nkeyword.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Define a \u003ccode\u003eTree\u003c/code\u003e class that will act as our parent.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e- A \u003ccode\u003eTree\u003c/code\u003e instance should take in one parameter when created, \u003ccode\u003especies\u003c/code\u003e,\n      and assign this to a property named \u003ccode\u003especies\u003c/code\u003e.\n    - A \u003ccode\u003eTree\u003c/code\u003e should have a static method, \u003ccode\u003edefinition()\u003c/code\u003e, that returns a short\n      definition of all trees.\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; A tree is a perennial plant with an elongated stem, or trunk, supporting\n    \u0026gt; branches and leaves.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Define a \u003ccode\u003eDeciduous\u003c/code\u003e class that extends \u003ccode\u003eTree\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e- A \u003ccode\u003eDeciduous\u003c/code\u003e instance takes two parameters, \u003ccode\u003especies\u003c/code\u003e and \u003ccode\u003ename\u003c/code\u003e. Use\n      \u003ccode\u003esuper()\u003c/code\u003e in the constructor to use the parent class constructor to assign\n      \u003ccode\u003especies\u003c/code\u003e. After \u003ccode\u003esuper()\u003c/code\u003e, assign the \u003ccode\u003ename\u003c/code\u003e parameter to the a \u003ccode\u003ename\u003c/code\u003e\n      property in the \u003ccode\u003eDeciduous\u003c/code\u003e constructor\n    - Create a static method, \u003ccode\u003edefinition()\u003c/code\u003e, that uses \u003ccode\u003esuper\u003c/code\u003e to access\n      \u003ccode\u003edefinition()\u003c/code\u003e from \u003ccode\u003eTree\u003c/code\u003e and add the following to the provide a specific\n      definition for \u003ccode\u003eDeciduous\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; Deciduous trees shed their leaves annually.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Define a \u003ccode\u003eEvergreen\u003c/code\u003e class that extends \u003ccode\u003eTree\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e- An \u003ccode\u003eEvergreen\u003c/code\u003e instance takes two parameters, \u003ccode\u003especies\u003c/code\u003e and \u003ccode\u003ename\u003c/code\u003e. Use\n      \u003ccode\u003esuper()\u003c/code\u003e in the constructor to use the parent class constructor to assign\n      \u003ccode\u003especies\u003c/code\u003e, then assign \u003ccode\u003ename\u003c/code\u003e to a property in the \u003ccode\u003eEvergreen\u003c/code\u003e\n      constructor\n    - Create a static method, \u003ccode\u003edefinition()\u003c/code\u003e, that uses \u003ccode\u003esuper\u003c/code\u003e to access\n      \u003ccode\u003edefinition()\u003c/code\u003e from \u003ccode\u003eTree\u003c/code\u003e and add the following to the provide a specific\n      definition for \u003ccode\u003eEvergreen\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; Evergreens keep their leaves all year round.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static#Examples\"\u003eStatic Methods\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420\"\u003e“Super” and “Extends” In JavaScript ES6 - Understanding The Tough Parts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"ge98ccb36e9aff9c59b41fca644cf67fa"},{"id":173514,"title":"Liskov's Substitution Principle","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-liskovs-substitution-principle\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-liskovs-substitution-principle/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-liskovs-substitution-principle\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-liskovs-substitution-principle/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eRecognize the meaning of strong behavioral subtyping\u003c/li\u003e\n\u003cli\u003eRecognize the benefits of upholding Liskov's substitution principle\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMuch work has been done in the field of Object Oriented programming, and over\nthe last few decades, engineers have developed design patterns and principles\nthat are meant to help keep Object Oriented code easier to understand and\nmaintain. One principle in particular applies to inheritence and extension:\nLiskov's substitution principle.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we're going to briefly look at what Liskov's substitution\nprinciple is, how to adhere to it and why.\u003c/p\u003e\n\n\u003ch2\u003eRecognize the Meaning of Strong Behavioral Subtyping\u003c/h2\u003e\n\n\u003cp\u003eLiskov's substitution principle, also known as strong behavioral subtyping,\nis the 'L' in \u003ca href=\"https://en.wikipedia.org/wiki/SOLID\"\u003eSOLID\u003c/a\u003e a popular set of Object Oriented design principles.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLiskov's substitution principle:\u003c/strong\u003e Objects in a program should be replaceable\nwith instances of their subtypes without altering the correctness of that\nprogram.\u003c/p\u003e\n\n\u003cp\u003eIn terms to JavaScript inheritance, \u003cstrong\u003ean instance of a parent class should be\nreplaceable with an instance of a child class.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIf we follow this principle, the consequence is that properties and methods that\nexist on the parent will never be modified in any child. Child classes can\n\u003cem\u003eexpand\u003c/em\u003e upon what they inherited, adding methods or extra properties, do not\nmodify what they inherited.\u003c/p\u003e\n\n\u003cp\u003eIf you need to modify a child's inherited properties or methods, why are we\ninheriting them in the first place?\u003c/p\u003e\n\n\u003cp\u003eBelow are two examples, one that violates Liskov's principle, and one that\nupholds it:\u003c/p\u003e\n\n\u003ch4\u003eViolates Substitution Principle:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eclass Reptile {\u003cbr\u003e    constructor(name) {\u003cbr\u003e        this.name = name;\u003cbr\u003e    }\u003cbr\u003e    get move() {\u003cbr\u003e        return `${this.name} crawls away`;\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// Lizard inherits `move` because it crawls\u003cbr\u003eclass Lizard extends Reptile {}\u003cbr\u003e\u003cbr\u003e//  Snake overrides `move` because it cannot crawl\u003cbr\u003eclass Snake extends Reptile {\u003cbr\u003e    get move() {\u003cbr\u003e        return `${this.name} slithers away`;\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eSnake\u003c/code\u003e class is a subtype of class \u003ccode\u003eReptile\u003c/code\u003e, but overrides the \u003ccode\u003emove\u003c/code\u003e\ngetter because the original doesn't apply. If we created an instance of\n\u003ccode\u003eReptile\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet tricky = new Reptile('Tricky');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand an instance of \u003ccode\u003eSnake\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet basilisk = new Snake('Basilisk');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe see that \u003ccode\u003etricky\u003c/code\u003e cannot be replaced with \u003ccode\u003ebasilisk\u003c/code\u003e without changing\nbehavior:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etricky.move; // =\u0026gt; \"Tricky crawls away\"\u003cbr\u003ebasilisk.move; // =\u0026gt; \"Basilisk slithers away\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eUpholds Substitution Principle:\u003c/h4\u003e\n\n\u003cp\u003eSo how do we stop violating Liskov's principle? We can either choose to not\ninherit from the same parent, \u003cem\u003eor\u003c/em\u003e we can create a grandparent \u003ccode\u003eReptile\u003c/code\u003e class.\nThis grandparent class can still contain all shared data and behavior for all\nparent and child classes. Since the definition of \u003ccode\u003emove\u003c/code\u003e is \u003cem\u003enot\u003c/em\u003e shared by all,\nwe can move these definitions down a level, defining them in two new parent\nclasses:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// all reptiles have a name\u003cbr\u003eclass Reptile {\u003cbr\u003e    constructor(name) {\u003cbr\u003e        this.name = name;\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// legless reptiles slither\u003cbr\u003eclass LeglessReptile extends Reptile {\u003cbr\u003e    move() {\u003cbr\u003e        return `${this.name} slithers away`;\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// legged reptiles crawl\u003cbr\u003eclass LeggedReptile extends Reptile {\u003cbr\u003e    move() {\u003cbr\u003e        return `${this.name} crawls away`;\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Lizard extends LeggedReptile {}\u003cbr\u003eclass Snake extends LeglessReptile {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we've got two levels of inheritance. \u003ccode\u003eReptile\u003c/code\u003e sets up the \u003ccode\u003econstructor\u003c/code\u003e\nthat all children and grandchildren inherit. Because \u003ccode\u003emove\u003c/code\u003e needs to behave\ndifferently for legged and legless reptiles, it is defined differently in both\n\u003ccode\u003eLeglessReptile\u003c/code\u003e and \u003ccode\u003eLeggedReptile\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith this structure, if an instance of \u003ccode\u003eLizard\u003c/code\u003e replaced an instance of\n\u003ccode\u003eLeggedReptile\u003c/code\u003e \u003cem\u003eor\u003c/em\u003e \u003ccode\u003eReptile\u003c/code\u003e, it will work correctly. The same goes for an\ninstance of \u003ccode\u003eSnake\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhy does this work? We've removed some of behavior of \u003ccode\u003eReptile\u003c/code\u003e. An instance\nof \u003ccode\u003eReptile\u003c/code\u003e will never be required to utilize a method it hasn't defined or\ninherited.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eRecognize the Benefits of Upholding Liskov's Substitution Principle\u003c/h2\u003e\n\n\u003cp\u003eBoth of the above examples \u003cem\u003ework\u003c/em\u003e. There is no syntax error if you choose to\nignore Liskov's substitution principle. This is considered a purely \u003cem\u003esemantic\u003c/em\u003e\ndesign choice.\u003c/p\u003e\n\n\u003cp\u003eThe benefit of following this principle is that no matter how complicated\ninheritance gets, you can always assume that whatever a parent class has, a\nchild class will have too. Looking at a parent class should give us some insight\ninto the functionality of any children, grandchildren, great grandchildren,\netc...\u003c/p\u003e\n\n\u003cp\u003eIf we have chains of inheritance where children fundamentally change the data\nand behaviors they inherit, we can potentially introduce bugs. More importantly,\nthis can also make your code much more complicated than it needs to be, which\nwill make it harder to change and understand.\u003c/p\u003e\n\n\u003cp\u003eAs per LSP, a child class may include \u003cem\u003emore\u003c/em\u003e properties or use the data\n\u003cem\u003edifferently\u003c/em\u003e. If you do find that a child class needs to overwrite a method or\nproperty it inherited from its parent, consider other options - perhaps don't\ninherit at all.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In general, when dealing with inheritance, the fewer levels of\ninheritance, the better. If you've got great grandparent, grandparent, parent\nand child classes, it can be difficult to figure out which class contributes\nwhat to a child. It also makes our code more difficult to change. You may not be\nable to modify code on a grandparent class without fundamentally changing how a\nparent or child class functions. Too much inheritance can make our code\ninflexible.\u003c/p\u003e\n\n\u003cp\u003eUpholding Liskov's substitution principle limits what we can do with inheritance,\ndiscouraging larger chains of inherited classes. As a side effect, our code is\neasier to understand and change later on.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eLiskov's substitution principle ensures that all subtypes may replace their\ntypes without altering the behavior of the program. An instance of a parent\nclass should be replaceable by an instance of any of its child classes and still\nwork as expected. The result of this pattern is a clearer, consistent\ninheritance pattern that leads to more organized, easier to change code.\u003c/p\u003e","exportId":"liskovs-substitution-principle"}]},{"id":18931,"name":"JavaScript Inheritance","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g0ff72a43f851848a48f5a4e3703a45fb","items":[{"id":173515,"title":"Prototypal Inheritance","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-intro-to-prototypal-inheritance\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-intro-to-prototypal-inheritance/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-intro-to-prototypal-inheritance\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-intro-to-prototypal-inheritance/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine \"syntactic sugar\"\u003c/li\u003e\n\u003cli\u003eRecognize that the inheritance model of JavaScript is prototypal\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen you learned object-oriented JavaScript you were exposed to the syntax\nthat came into existence around 2014. This syntax uses the \u003ccode\u003eclass\u003c/code\u003e keyword, and\nmethods called \u003ccode\u003econstructor()\u003c/code\u003es to initialize new instances of the class. We'll\ncall this the \"ES2015 standard.\" ES2015's syntax is similar to Ruby, Python,\nand Java and feels to many developers learning JavaScript as a second language\nto be \"the way OO should be done.\"\u003c/p\u003e\n\n\u003ch2\u003eDefine \"syntactic sugar\"\u003c/h2\u003e\n\n\u003cp\u003eHowever, from JavaScript's perspective, ES2015 syntax is \"syntactic sugar.\" This\nis a term that developers use to communicate \"we made the thing easier to type\nand to read, but underneath, it's still doing something a lot more complicated.\"\nThe object-oriented model that ES2015 simplifies is the \"prototypal object\noriented\" model that JavaScript \u003cem\u003eactually\u003c/em\u003e works in.\u003c/p\u003e\n\n\u003ch2\u003eRecognize that the Inheritance Model of JavaScript is Prototypal\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eIMPORTANT\u003c/strong\u003e: This is a common interview question used to weed-out front end\ndevelopers. When asked what kind of inheritance model JavaScript has, boldly\nand proudly say \"Prototypal!\" To demonstrate mastery of this vocabulary word,\nyou'll need to do the rest of the work in this section, though. :)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe difference between Prototypal and Class-based OO goes all the way back to\nPlato and Aristotle. No kidding!  As we think about how humans categorize and\ntry to teach it to computers, we often find ourselves bumping up against those\nphilosophers who sought to explain those \u003cem\u003esame\u003c/em\u003e ideas \u003cem\u003eto humans\u003c/em\u003e millennia ago.\u003c/p\u003e\n\n\u003cp\u003eIn Plato's Theory of Forms he suggests that when we say \"tree\", our minds build\na foggy rough idea of what all trees are like. Philosophy students call this\n\"the form of a Tree\" or \"Tree-ness.\" It's the thing that makes all trees kinda\nthe same. My conception of \"Tree-ness\" has something to do with bark, and\nleaves, and green, and pine trees, and oak trees. Yours is probably similar.\nThere are also forms for Dogs and Cats. Dogs all share \"bark\" and Cats all\nshare \"meow\" and Politicians all share \"be\u003cem\u003eshady.\" When we find or create a\nspecific _instance\u003c/em\u003e that \"participates in\" or \"references\" a form it stops\nbeing a cloudy murky idea and becomes a real thing. Not just Dog-ness, but my Poodle,\nByron.\u003c/p\u003e\n\n\u003cp\u003eThis should remind you of the object-oriented world of Ruby, Java, Python, and\nES2015 standard JavaScript. Forms are \u003ccode\u003eclass\u003c/code\u003ees and instances are the \u003ccode\u003enew\u003c/code\u003e\nembodiments of those \u003ccode\u003eclass\u003c/code\u003ees with some unique, specific, real data bonded to\nthem (via a constructor).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: Programming, for many, is an exercise in applied philosophy.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAristotle, the biologically-minded student of Plato's, said that his teacher\nwas talking about make-believe nonsense like dragons and unicorns when he\ntalked about \"forms.\"\u003c/p\u003e\n\n\u003cp\u003eNo one has ever seen a Tree-ness or a Dog-ness.\u003c/p\u003e\n\n\u003cp\u003eEverything that \u003cem\u003eis\u003c/em\u003e, Aristotle argued, is like a\nsomething else with more specification added. Everything new is based off of a\npre-existing pattern, a first of its kind, the proto(first) - typos(kind), or\n\u003cem\u003eprototype\u003c/em\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn Poodle is based off the Water-Dog breed...\u003c/li\u003e\n\u003cli\u003e...and a Water-Dogs are breeds based off of Dogs...\u003c/li\u003e\n\u003cli\u003e...and Dogs are domesticated Wolves...\u003c/li\u003e\n\u003cli\u003e...and a wolf is a carnivorous mammal...\u003c/li\u003e\n\u003cli\u003e...which means it's a chordate and all chordates are animals (not plants).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis probably reminds you of basic biology and the \u003ca href=\"https://www.acronymfinder.com/King-Philip-Came-Over-For-Good-Spaghetti-(mnemonic-for-taxonomy-order%3A-Kingdom%2C-Phylum%2C-Class%2C-Order%2C-Family%2C-Genus%2C-Species)-(KPCOFGS).html\"\u003eKPCOFGS\u003c/a\u003e way of naming\nthe things living on this planet.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eKingdom \u0026gt; Phylum \u0026gt; Class \u0026gt; Order \u0026gt; Family \u0026gt; Genus \u0026gt; Species\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eAnimalia \u0026gt; Chordata \u0026gt; Mammalia \u0026gt; Carnivora \u0026gt; Canidae \u0026gt; Canis \u0026gt; lupus\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eGiven this view of the world, it's no\nsurprise Aristotle was a huge fan of making trees (another computer science\nidea that started in philosophy) of these relationships (or, \"taxonomies,\"\nanother computer science idea that started in philosophy). Languages that allow you\nto \"extend what's already there\"; that is, Prototypal\nobject systems are languages like C, Lisp, Self, and JavaScript (natively).\u003c/p\u003e\n\n\u003cp\u003eUltimately, both class-based (or, \"form-based\") and prototype-based models are\nways of describing how to create instances from a common ancestor. Neither is\n\"better\" than the other. They're just different ways of seeing objects (no pun\nintended) in the world.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this section we'll put aside the syntactic sugar of the ES2015 standard.\nWe'll go back to writing classes and objects the way we did from 1997-2014. The\nES2015 standard is fast becoming \u003cem\u003ethe\u003c/em\u003e standard, but it's common to see\nPrototypal patterns in legacy code and in job interview questions.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson you were introduced to the inheritance model of JavaScript,\nprototypal inheritance. You were also shown a common pattern in later versions\nof JavaScript: wrapping ugly or clumsy syntax in cleaner syntax (\"syntactic\nsugar\"). In the remainder of this section we're going to show\nyou how to create prototypal classes and instances in JavaScript.\u003c/p\u003e","exportId":"prototypal-inheritance"},{"id":173516,"title":"Constructor Functions","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-constructor-functions-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-constructor-functions-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-constructor-functions-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-constructor-functions-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a constructor function\u003c/li\u003e\n\u003cli\u003eUse a constructor function to create an object\u003c/li\u003e\n\u003cli\u003eExplain what a constructor function is and how it works\u003c/li\u003e\n\u003cli\u003eExplain what \u003ccode\u003enew\u003c/code\u003e is and how it works with the constructor function\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eJavaScript is sometimes a bit confusing. It has a native type \u003ccode\u003eObject\u003c/code\u003e. How does\nthat relate to Object-Orientation? And how does the desire to avoid repeating\nourselves relate to them both? In this lesson we'll work with plain old\nJavaScript \u003ccode\u003eObject\u003c/code\u003es, and slowly transition to one of the key elements of OO, the\nconstructor function and its partner, \u003ccode\u003enew\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCreate a Constructor Function\u003c/h2\u003e\n\n\u003cp\u003eIt's sometime handy to represent data with objects, which gives us key/value\npairs. For example, we may represent a user as the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst bobby = {name: 'bobby', age: 20, hometown: 'Philadelphia'}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow imagine that we had a couple of users:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst bobby = {\u003cbr\u003e  name: 'bobby',\u003cbr\u003e  age: 20,\u003cbr\u003e  hometown: 'Philadelphia'\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst susan = {\u003cbr\u003e  name: 'susan',\u003cbr\u003e  age: 28,\u003cbr\u003e  hometown: 'Boston'\u003cbr\u003e}\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat. Two nice users.\u003c/p\u003e\n\n\u003cp\u003eNote, that with both objects sharing exactly the same keys, and only the values\ndiffering, we are \u003cem\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\"\u003erepeating ourselves\u003c/a\u003e\u003c/em\u003e.  We would like a mechanism to\nconstruct objects with the same attributes (that is, keys), while assigning\ndifferent values to those keys. The name for what kind of function does this\nvaries across many popular programming languages, but we'll call it \u003cstrong\u003ea factory\nfunction\u003c/strong\u003e because it spits out new instances.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, age, hometown) {\u003cbr\u003e    return {\u003cbr\u003e    name, // don't forget ES6 power-tools, this is the same as `name: name`\u003cbr\u003e    age,\u003cbr\u003e    hometown,\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet byronPoodle = User(\"Karbit's Byron By the Bay\", 5, \"Manhattan\")\u003cbr\u003ebyronPoodle.age // =\u0026gt; 5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInterestingly \u003ccode\u003etypeof\u003c/code\u003e confirms \u003ccode\u003ebyronPoodle\u003c/code\u003e is an \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; typeof byronPoodle\u003cbr\u003e'object'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, something's not quite as clear as we might like it to be. If we ask\n\u003ccode\u003ebyronPoodle\u003c/code\u003e what made it, the answer is...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; byronPoodle.constructor\u003cbr\u003e[Function: Object]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003ebyronPoodle\u003c/code\u003e is certainly an \u003ccode\u003eObject\u003c/code\u003e but it's more specific than\nthat: it's a \u003ccode\u003eUser\u003c/code\u003e. We'd really like for this special kind of object to be\nreflected when we ask it what it is. We'd like for a mystical process to come\nalong and say you are not merely an \u003ccode\u003eObject\u003c/code\u003e, you are a \u003ccode\u003eUser\u003c/code\u003e or a \u003ccode\u003eDog\u003c/code\u003e.\nWe tell JavaScript to bless the thing created by the constructor function\ninto being something more specific than \u003ccode\u003eObject\u003c/code\u003e by using the keyword \u003ccode\u003enew\u003c/code\u003e.\nUsing \u003ccode\u003enew\u003c/code\u003e requires that we evolve our \u003cem\u003efactory function\u003c/em\u003e into a \u003cem\u003econstructor\nfunction\u003c/em\u003e. It's the same idea, but with a few subtle additions.\u003c/p\u003e\n\n\u003ch2\u003eExplain What \u003ccode\u003enew\u003c/code\u003e Is and How It Works With the Constructor Function\u003c/h2\u003e\n\n\u003cp\u003eLets create a \u003cem\u003econstructor function\u003c/em\u003e.  Constructor functions must be paired with the \u003ccode\u003enew\u003c/code\u003e\nkeyword (which we'll cover in a moment).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.email = email;\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat's \u003ccode\u003ethis\u003c/code\u003e here? It refers to the function's context. Since functions in\nJavaScript are also \u003ccode\u003eObject\u003c/code\u003es, a function can say \"on me, set a property.\" As\nwe read this function we might think \"OK, so you're going to run a function\nthat will set properties on itself. That's not doing anything useful.\"\u003c/p\u003e\n\n\u003cp\u003eWe would be right.\u003c/p\u003e\n\n\u003cp\u003eWhat we really want to say is something like \"Hey, constructor function, when\nyou run, create a new copy of yourself, leaving the original unchanged and on\nthat \u003cem\u003eparticular\u003c/em\u003e copy, set the properties based on the arguments passed into\nthe function. The keyword \u003ccode\u003enew\u003c/code\u003e tells the constructor function to do exactly\nthat.\u003c/p\u003e\n\n\u003cp\u003ePut the two together like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.email = email;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet lauren = new User(\"Lauren\", \"lauren@example.com\");\u003cbr\u003elauren.name //=\u0026gt; \"Lauren\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eRemember you can and should try these out for yourself in the JavaScript\nconsole or in the \u003ccode\u003enode\u003c/code\u003e REPL\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat's happening here hinges on the \u003ccode\u003enew\u003c/code\u003e keyword. When we invoke the function\nwith \u003ccode\u003enew\u003c/code\u003e before it, you can imagine an imaginary JavaScript \u003ccode\u003eObject\u003c/code\u003e being\ncopied for use in the \u003ccode\u003eUser\u003c/code\u003e function. The constructor function \u003cstrong\u003eis not\nchanged\u003c/strong\u003e; the freshly-created, new context \u003cstrong\u003eis\u003c/strong\u003e changed.\u003c/p\u003e\n\n\u003cp\u003eHere's the code sample above, but with some more comments. Follow the\n[numbers] 1-6.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e    this.name = name;   // [2] Set my context's property name to what\u003cbr\u003e                      //     came in in the first argument (name)\u003cbr\u003e    this.email = email; // [3] Set my context's property email to what\u003cbr\u003e                      //     came in in the second argument (email)\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// [1] Create a new \"context\", that's what `new` does\u003cbr\u003e// Use _that_ new context inside of the execution of the `User` function\u003cbr\u003e// also pass two parameters, \"Lauren\" and \"lauren@example.com\"\u003cbr\u003e\u003cbr\u003e// [4]: Assign the new context thing with its this properties set to the\u003cbr\u003e// variable `lauren`\u003cbr\u003elet lauren = new User(\"Lauren\", \"lauren@example.com\");\u003cbr\u003e\u003cbr\u003e// [5]: Ask the new context for what's in its `.name` property\u003cbr\u003elauren.name //=\u0026gt; [6] \"Lauren\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can ask interesting questions about the \u003ccode\u003elauren\u003c/code\u003e variable. Building on the\nprevious code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; typeof lauren\u003cbr\u003e'object'\u003cbr\u003e\u0026gt; lauren.constructor\u003cbr\u003e[Function: User]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sorta makes sense, the function that constructed \u003ccode\u003elauren\u003c/code\u003e, or the\n\u003ccode\u003econstructor\u003c/code\u003e is \u003ccode\u003eUser\u003c/code\u003e. The instance \u003ccode\u003elauren\u003c/code\u003e is an \u003ccode\u003eobject\u003c/code\u003e. Given what we\nknow about the types available in JavaScript, \u003ccode\u003eobject\u003c/code\u003e makes good sense (not a\n\u003ccode\u003eNumber\u003c/code\u003e or a \u003ccode\u003eString\u003c/code\u003e, that's for sure!)\u003c/p\u003e\n\n\u003cp\u003eSince we know one OO pattern, we might be wondering how to add methods to the\n\u003ccode\u003eUser\u003c/code\u003e instances. It should be obvious that if we can set a property to point to\na value like \u003ccode\u003e\"Lauren\"\u003c/code\u003e or \u003ccode\u003e\"lauren@example.com\"\u003c/code\u003e, we should be able to set an\nanonymous function to a property. That function would have access to the\n\u003ccode\u003ethis\u003c/code\u003e context created when the instance was \u003ccode\u003enew\u003c/code\u003e'd into existence.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.email = email;\u003cbr\u003e    this.sayHello = function() {\u003cbr\u003e        console.log(`Hello everybody, my name is ${this.name} whom you've been\u003cbr\u003emailing at ${this.email}!`);\u003cbr\u003e    };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet lauren = new User('lauren', 'lauren@example.com');\u003cbr\u003elauren.sayHello(); //=\u0026gt; Hello everybody, my name is lauren whom you've been mailing at lauren@example.com!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFeel free to try it with other names and emails to prove to yourself that you\ncan create instances from this constructor function.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson you've seen the constructor function and the \u003ccode\u003enew\u003c/code\u003e keyword work\nto create new instances with instance data and instance methods. We've pretty\nmuch got an object oriented language at our fingers! Not bad!\u003c/p\u003e\n\n\u003cp\u003eThere's one problem with this design. It's incredibly memory inefficient. Take\na look at the code and imagine what that inefficiency could be. We'll explore\nit together in the next lesson!\u003c/p\u003e","exportId":"constructor-functions"},{"id":173517,"title":"Constructor Functions Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-object-oriented-constructor-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-object-oriented-constructor-functions-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-object-oriented-constructor-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-object-oriented-constructor-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild constructor functions\u003c/li\u003e\n\u003cli\u003eBuild objects with properties from a constructor function\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntro\u003c/h2\u003e\n\n\u003cp\u003eScuber needs you to develop a fast way to create \u003ccode\u003eScooter\u003c/code\u003es, \u003ccode\u003eDriver\u003c/code\u003es, and \u003ccode\u003ePickupLocation\u003c/code\u003es as new business keeps rolling in.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eCreate a constructor function for each of the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eScooter with \u003ccode\u003eyear\u003c/code\u003e, \u003ccode\u003ecolor\u003c/code\u003e, and \u003ccode\u003emodel\u003c/code\u003e properties\u003c/li\u003e\n\u003cli\u003eDriver with \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eage\u003c/code\u003e, and \u003ccode\u003eexperience\u003c/code\u003e properties\u003c/li\u003e\n\u003cli\u003ePickupLocation with \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003ecity\u003c/code\u003e properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMake sure you run the tests to make sure your solutions work as expected.\u003c/p\u003e","exportId":"g62e2b7f0179c81b97888348fb18db34c"},{"id":173518,"title":"Using Prototypes","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-using-prototypes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-using-prototypes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-using-prototypes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-using-prototypes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify inefficiency in constructor function object orientation\u003c/li\u003e\n\u003cli\u003eRecognize the prototype as a means for reducing inefficiency\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e  this.name = name;\u003cbr\u003e  this.email = email;\u003cbr\u003e  this.sayHello = function() {\u003cbr\u003e    console.log(`Hello everybody, my name is ${this.name} whom you've been\u003cbr\u003emailing at ${this.email}!`);\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet lauren = new User('lauren', 'lauren@gmail.com');\u003cbr\u003elauren.sayHello(); //=\u0026gt; Hello everybody, my name is lauren whom you've been mailing at lauren@gmail.com!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's assume the following. Let's assume that the \u003ccode\u003ename\u003c/code\u003e property costs 32 bytes\nof space. Let's also assume that the \u003ccode\u003eemail\u003c/code\u003e property costs 32 bytes of space.\nLet's lastly assume that a function costs 64 bytes of space.\u003c/p\u003e\n\n\u003cp\u003eSo to create our \u003ccode\u003elauren\u003c/code\u003e instance we pay a cost of \u003ccode\u003e32 + 32 + 64 = 128\u003c/code\u003e bytes.\nBut now let's assume that we want to create many more \u003ccode\u003eUser\u003c/code\u003es - Facebook\nnumbers of users. Lets suppose a paltry 1 million users. That would be:\n128 million bytes of space. While memory and disk are getting bigger and\ncheaper all the time, we'd like to be efficient whenever possible.\u003c/p\u003e\n\n\u003cp\u003eThe key to gaining efficiency is the \u003cem\u003eprototype\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Inefficiency In Constructor Function Object Orientation\u003c/h2\u003e\n\n\u003cp\u003eIn our example the \u003ccode\u003ename\u003c/code\u003es vary, so we can't economize there. The \u003ccode\u003eemail\u003c/code\u003es\nvary, so we can't economize there either. But the method, \u003ccode\u003esayHello\u003c/code\u003e is the\nsame in every instance: \"in my current context return a template string with\nthis current context's values.\"\u003c/p\u003e\n\n\u003cp\u003eWe would like to tell all instances of \u003ccode\u003eUser\u003c/code\u003e that they have a shared place to\nfind methods. That place is called the \"prototype.\"\u003c/p\u003e\n\n\u003ch2\u003eRecognize the Prototype as a Means for Reducing Inefficiency\u003c/h2\u003e\n\n\u003cp\u003eWe access the prototype of a constructor function by typing the constructor\nfunction's name, and adding the attribute \u003ccode\u003e.prototype\u003c/code\u003e. So for \u003ccode\u003eUser\u003c/code\u003e it's\n\u003ccode\u003eUser.prototype\u003c/code\u003e. Attributes that point to functions in this JavaScript\n\u003ccode\u003eObject\u003c/code\u003e will be shared to all instances made by that constructor function.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e  this.name = name;\u003cbr\u003e  this.email = email;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eUser.prototype.sayHello = function() {\u003cbr\u003e  console.log(`Hello everybody, my name is ${this.name}`);\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet sarah = new User('sarah', 'sarah@example.com');\u003cbr\u003elet lauren = new User('Lauren', 'lauren@example.com');\u003cbr\u003e\u003cbr\u003esarah.sayHello(); //=\u0026gt; // \"Hello everybody, my name is sarah!\"\u003cbr\u003elauren.sayHello(); //=\u0026gt; // \"Hello everybody, my name is Lauren!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe prototype is just a JavaScript \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUser.prototype;\u003cbr\u003e// {sayHello: ƒ, constructor: ƒ}\u003cbr\u003etypeof User.prototype;\u003cbr\u003e// object\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo prove the efficiency of sharing methods via prototype:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elauren.sayHello === sarah.sayHello; //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson you've seen the constructor' prototype and seen how it can be\nused to share functionality between instances.\u003c/p\u003e\n\n\u003cp\u003eYour pattern for writing OO in JavaScript (Prototype-based) is the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e  this.name = name;\u003cbr\u003e  this.email = email;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eUser.prototype.sayHello = function() {\u003cbr\u003e  console.log(`Hello everybody, my name is ${this.name}`);\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet sarah = new User('sarah', 'sarah@example.com');\n\u003c/code\u003e\u003c/pre\u003e","exportId":"using-prototypes"},{"id":173519,"title":"Object-Oriented Methods Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-object-oriented-object-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-object-oriented-object-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-object-oriented-object-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-object-oriented-object-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate constructor functions\u003c/li\u003e\n\u003cli\u003eAdd methods to a constructor function\u003c/li\u003e\n\u003cli\u003eCreate objects from a constructor function\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eScuber, in an effort to gain much needed local influence, has begun adding some powerful board members to its organization.  It expects to add more (similar) board members in the future, so it needs you to declare a constructor function so that it can crank them out.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003eindex.js\u003c/code\u003e, write a constructor function called \u003ccode\u003eBoardMember\u003c/code\u003e that sets the following properties: \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ehomeState\u003c/code\u003e, and \u003ccode\u003etraining\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAdd following methods to the class:\n- \u003ccode\u003eveto\u003c/code\u003e — returns \u003ccode\u003eNo, I must disagree\u003c/code\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eapprove\u003c/code\u003e — returns \u003ccode\u003eYou can do that!\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003edoCharity\u003c/code\u003e — returns \u003ccode\u003eI like to help people.\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ereleasePressStatement\u003c/code\u003e — returns \u003ccode\u003eYou will see great things from Scuber.\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003esayHi\u003c/code\u003e — returns \u003ccode\u003e\"Hi, my name is \u0026lt;name\u0026gt;. I am from \u0026lt;homestate\u0026gt;, and I was trained in \u0026lt;training\u0026gt;.\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g0e69d594967cb7460471db8b1752f2be"},{"id":173520,"title":"Prototypal Inheritance Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-summary\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-summary/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-summary\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-summary/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eYou've now learned about the Prototypal model of Object-Orientation used by\nJavaScript, \u003cem\u003enatively\u003c/em\u003e. These days, most OO JS will be written using \u003ccode\u003eclass\u003c/code\u003e\nand the ES2016 standard, but you will likely encounter and might well be\ninterviewed on questions around the Prototypal model.\u003c/p\u003e\n\n\u003cp\u003eWhile the syntax changes, Object-Orientation \u003cem\u003edoes not\u003c/em\u003e. We still use\nconstructors to pass instance data, we still write methods that have access to\nthe instance data, we still use objects to help us maintain intelligible code.\n\u003cstrong\u003e\u003cem\u003eThe only difference\u003c/em\u003e\u003c/strong\u003e is how you write the class and how you instantiate\nthe instance.\u003c/p\u003e","exportId":"prototypal-inheritance-conclusion"}]},{"id":18932,"name":"Additional Practice: JS Projects","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ga14be5d58702c9a8d021a70b06bfefb4","items":[{"id":173521,"title":"Project: GitHub Search App","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-github-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-github-project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-github-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-github-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eGitHub API\u003c/h2\u003e\n\n\u003cp\u003eYou will be using the GitHub API for this project. You can view documentation\nfor this API \u003ca href=\"https://developer.github.com/v3/\"\u003ehere\u003c/a\u003e. This is an open API: no\nAPI key or authentication is required for the endpoints we will be using.\u003c/p\u003e\n\n\u003cp\u003eNotice the GitHub API documentation includes the following excerpt. They require\nyou to add a custom header to your requests.\u003c/p\u003e\n\n\u003cblockquote\u003e\nBy default, all requests to https://api.github.com receive the v3 version of the REST API. We encourage you to explicitly request this version via the Accept header.\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003eAccept: application/vnd.github.v3+json\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ca href=\"https://developer.github.com/v3/search/#search-users\"\u003eUser Search Endpoint\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eYou can search for users matching a certain name. For example, if we wanted to\nfind all users name \u003ccode\u003eoctocat\u003c/code\u003e, we would make a \u003ccode\u003eGET\u003c/code\u003e request to\n\u003ccode\u003ehttps://api.github.com/search/users?q=octocat\u003c/code\u003e. To view the response, you can\ncopy and paste that URL into your browser.\u003c/p\u003e\n\n\u003cp\u003eThis endpoint is rate limited. This means the API will stop returning data if\nyou make more than\n\u003ca href=\"https://developer.github.com/v3/search/#rate-limit\"\u003e10 requests per minute\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ca href=\"https://developer.github.com/v3/repos/#list-user-repositories\"\u003eUser Repos Endpoint\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eYou can find all the public repositories for a user using this endpoint. For\nexample if we wanted to find all the repositories for a user with GitHub\nusername \u003ccode\u003eoctocat\u003c/code\u003e, we would make a \u003ccode\u003eGET\u003c/code\u003e request to\n\u003ccode\u003ehttps://api.github.com/users/octocat/repos\u003c/code\u003e. To view the response, you can copy\nand paste that URL into your browser.\u003c/p\u003e\n\n\u003cp\u003eThis endpoint is rate limited. This endpoint will stop returning data if you\nmake more than\n\u003ca href=\"https://developer.github.com/v3/#rate-limiting\"\u003e60 requests in an hour\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDeliverables\u003c/h2\u003e\n\n\u003cp\u003eYou are going to build a JavaScript application which searches GitHub for users\nby name and displays the results on the screen. Clicking on a specific user will\nshow all the repositories for that user.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe \u003ccode\u003eindex.html\u003c/code\u003e file has a form with a search input. When the form is\nsubmitted, it should take the value of the input and search GitHub for user\nmatches using the \u003ca href=\"#user-search-endpoint\"\u003eUser Search Endpoint\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eUsing the results of the search, display information about the users to the\npage. (You might include showing their username, avatar and a link to their\nprofile.)\u003c/li\u003e\n\u003cli\u003eClicking on one of these users should send a request to the\n\u003ca href=\"#user-repos-endpoint\"\u003eUser Repos Endpoint\u003c/a\u003e and return data about all the\nrepositories for that user.\u003c/li\u003e\n\u003cli\u003eUsing the response from the Users Repos Endpoint, display all the\nrepositories for that user on the page.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBonus\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eToggle the search bar between searching for users by keyword and searching for\nrepos by keyword by adding an extra button. Hint: you can use the same search\nbar for this, but you may need to create a variable which stores what the\ncurrent search type is (user or repo). The endpoint to search repositories by\nkeyword is\n\u003ca href=\"https://developer.github.com/v3/search/#search-repositories\"\u003ehere\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gcfcf0e383585485a8cc1e51313165ad9"},{"id":173522,"title":"Project: Monsters","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-fetch-monster-practice-challenge\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-fetch-monster-practice-challenge/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-fetch-monster-practice-challenge\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-fetch-monster-practice-challenge/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFor this practice code challenge, your objective is to build a frontend for our\nmonsters data. Currently, the index.html page has a script tag to \u003ccode\u003ejs/demo.js\u003c/code\u003e\nso that you can see a demo of the finished app. Comment out the script tag to\n\u003ccode\u003ejs/demo.js\u003c/code\u003e and uncomment out the script tag to \u003ccode\u003ejs/index.js\u003c/code\u003e where you will\ncode your solution\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eIf you haven't yet, install json-server\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install -g json-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen run the server with\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejson-server monsters.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhen the page loads, show the first 50 monsters. Each monster's name, age, and\ndescription should be shown.\u003c/li\u003e\n\u003cli\u003eAbove your list of monsters, you should have a form to create a new monster.\nYou should have fields for name, age, and description, and a 'Create Monster\nButton'. When you click the button, the monster should be added to the list\nand saved in the API.\u003c/li\u003e\n\u003cli\u003eAt the end of the list of monsters, show a button. When clicked, the button\nshould load the next 50 monsters and show them.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAPI methods\u003c/h2\u003e\n\n\u003cp\u003eGet the list of monsters\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGET http://localhost:3000/monsters\u003cbr\u003e\u003cbr\u003eoptional parameters:\u003cbr\u003e\u003cbr\u003e_limit=[number] - limit the number of monsters returned\u003cbr\u003e_page=[number] - offset your request for monsters to some page (must specify a limit)\u003cbr\u003e\u003cbr\u003eexample:\u003cbr\u003e\u003cbr\u003eGET http://localhost:3000/monsters/?_limit=20\u0026amp;_page=3\u003cbr\u003e\u003cbr\u003esample response:\u003cbr\u003e[\u003cbr\u003e  {\u003cbr\u003e    \"name\": \"Chronos\",\u003cbr\u003e    \"age\": 4005.302453418598,\u003cbr\u003e    \"description\": \"Effulgence eldritch shunned foetid. Ululate gibbering tenebrous foetid iridescence daemoniac. Stench nameless gambrel. Amorphous furtive iridescence noisome. Foetid mortal nameless.\",\u003cbr\u003e    \"id\": 1\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"name\": \"Tartarus\",\u003cbr\u003e    \"age\": 1874.4913565609456,\u003cbr\u003e    \"description\": \"Cyclopean swarthy amorphous singular accursed furtive non-euclidean stygian. Swarthy gibbering charnel eldritch daemoniac gibbous. Cyclopean lurk hideous tentacles squamous immemorial tenebrous mortal. Madness tentacles furtive mortal foetid decadent. Foetid immemorial comprehension.\",\u003cbr\u003e    \"id\": 2\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"name\": \"Hemera\",\u003cbr\u003e    \"age\": 4094.8375978925988,\u003cbr\u003e    \"description\": \"Dank immemorial abnormal gambrel. Cat lurk unutterable. Abnormal tenebrous ululate. Nameless swarthy manuscript eldritch indescribable accursed antediluvian decadent.\",\u003cbr\u003e    \"id\": 3\u003cbr\u003e  }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCreate a monster\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePOST http://localhost:3000/monsters\u003cbr\u003eheaders: \u003cbr\u003e{\u003cbr\u003e  \"Content-Type\": \"application/json\",\u003cbr\u003e  Accept: \"application/json\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edata:\u003cbr\u003e{ name: string, age: number, description: string }\n\u003c/code\u003e\u003c/pre\u003e","exportId":"g11dcca5dcb879e651c4ba4ac232cd841"},{"id":173523,"title":"Project: Woof Woof Welcome to Doggo App","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"woof-woof-js-practice\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/woof-woof-js-practice/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/woof-woof-js-practice\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/woof-woof-js-practice/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eTHIS GOOD APPLICATION FOR LOOKING AT DOGS BOW WOW.\u003c/p\u003e\n\n\u003cp\u003eWHEN LOOKING AT PUP PUPS USER SHOULD BE ABLE TO:\n - CLICK ON DOGS IN THE DOG BAR TO SEE MORE INFO ABOUT THE GOOD PUPPER;\n   - MORE INFO INCLUDES A DOG PIC, A DOG NAME, AND A DOG BUTTON THAT INDICATES\n     WHETHER IT IS A GOOD DOG OR A BAD DOG;\n - CLICK ON GOOD DOG/BAD DOG BUTTON IN ORDER TO TOGGLE PUP GOODNESS;\n - CLICK ON \"FILTER GOOD DOGS\" BUTTON IN ORDER TO JUST SEE GOOD DOGS OR SEE\n   ALL DOGS IN DOG BAR.\u003c/p\u003e\n\n\u003ch2\u003eEXAMPLE:\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"woof-woof-demo.gif\" alt=\"Showcasing the full functionality\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eSTEP 1: VIEW THE DATA\u003c/h3\u003e\n\n\u003cp\u003eAll of the dog data is stored in the \u003ccode\u003edb.json\u003c/code\u003e file. You'll want to access this data\nusing a json server. In order to do this, run \u003ccode\u003e$ npm install -g json-server\u003c/code\u003e and\nthen \u003ccode\u003e$ json-server --watch db.json\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis will setup the data on a server using restful routes at \u003ca href=\"http://localhost:3000/pups\"\u003ehttp://localhost:3000/pups\u003c/a\u003e.\nGo ahead and head to that url in your browser to view the data.\nFamiliarize yourself with the attributes for each pup. Try going to \u003ccode\u003e/pups/:id\u003c/code\u003e to see an individual pup as well.\u003c/p\u003e\n\n\u003ch3\u003eSTEP 2: ADD PUPS TO DOG BAR\u003c/h3\u003e\n\n\u003cp\u003eOn the page, there is a \u003ccode\u003ediv\u003c/code\u003e with the id of \u003ccode\u003e\"dog-bar\"\u003c/code\u003e. On page load, make a fetch\nto get all of the pup objects. When you have this information, you'll need to add\na \u003ccode\u003espan\u003c/code\u003e with the pup's name to the dog bar (ex: \u003ccode\u003e\u0026lt;span\u0026gt;Mr. Bonkers\u0026lt;/span\u0026gt;\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch3\u003eSTEP 3: SHOW MORE INFO ABOUT EACH PUP\u003c/h3\u003e\n\n\u003cp\u003eWhen a user clicks on a pup's \u003ccode\u003espan\u003c/code\u003e in the dog bar, that pup's info (\u003ccode\u003eimage\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e, and \u003ccode\u003eisGoodDog\u003c/code\u003e status) should show up in the \u003ccode\u003ediv\u003c/code\u003e with the id of \u003ccode\u003e\"dog-info\"\u003c/code\u003e.\nWhen you have the pup's information, the dog info \u003ccode\u003ediv\u003c/code\u003e should have the following children:\n - an \u003ccode\u003eimg\u003c/code\u003e tag with the pup's image url\n - an \u003ccode\u003eh2\u003c/code\u003e with the pup's name\n - a \u003ccode\u003ebutton\u003c/code\u003e that says \u003ccode\u003e\"Good Dog!\"\u003c/code\u003e or \u003ccode\u003e\"Bad Dog!\"\u003c/code\u003e based on whether \u003ccode\u003eisGoodDog\u003c/code\u003e is true or false.\n Ex:\n \u003ccode\u003e\n  \u0026lt;img src=dog_image_url\u0026gt;\n  \u0026lt;h2\u0026gt;Mr. Bonkers\u0026lt;/h2\u0026gt;\n  \u0026lt;button\u0026gt;Good Dog!\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eSTEP 4: TOGGLE GOOD DOG\u003c/h3\u003e\n\n\u003cp\u003eWhen a user clicks the Good Dog/Bad Dog button, two things should happen:\n  - The button's text should change from Good to Bad or Bad to Good\n  - The corresponding pup object in the database should be updated to reflect the new isGoodDog value\n    - Please note, you can update a dog by making a PATCH request to \u003ccode\u003e/pups/:id\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eBONUS! STEP 5: FILTER GOOD DOGS\u003c/h3\u003e\n\n\u003cp\u003eWhen a user clicks on the Filter Good Dogs button, two things should happen:\n - The button's text should change from \"Filter good dogs: OFF\" to \"Filter good dogs: ON\", or vice versa.\n - If the button now says \"ON\" (meaning the filter is on), then the Dog Bar should only show pups whose isGoodDog attribute is true. If the filter is off, the Dog Bar should show all pups (like normal).\u003c/p\u003e","exportId":"gb78d1c12f8f9845b9b59c2b4ca32d44c"},{"id":173524,"title":"Project: Dog Show Challenge","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dog-show-challenge\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/dog-show-challenge/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dog-show-challenge\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dog-show-challenge/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eYou are responsible for managing the website for the Westminster Kennel Club Dog Show. These dog owners are \u003cem\u003every\u003c/em\u003e competitive. We need to make sure that they can view all the competition (the other dogs) and edit their dog's information.\u003c/p\u003e\n\n\u003ch3\u003eGetting Started\u003c/h3\u003e\n\n\u003cp\u003eYou will be using the \u003ca href=\"https://github.com/typicode/json-server\"\u003ejson-server\u003c/a\u003e package to mock an external API. You can make the same RESTful requests to this server that you would to any API. If you haven't yet, install json-server.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install -g json-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen run the server with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejson-server --watch db.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will serve your code on \u003ca href=\"http://localhost:3000\"\u003ehttp://localhost:3000\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003eDeliverables\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eOn page load, render a list of already registered dogs in the table. You can fetch these dogs from \u003ca href=\"http://localhost:3000/dogs\"\u003ehttp://localhost:3000/dogs\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe dog should be put on the table as a table row. The HTML might look something like this \u003ccode\u003e\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Dog *Name*\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;*Dog Breed*\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;*Dog Sex*\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;Edit\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eMake a dog editable. Clicking on the edit button next to a dog should populate the top form with that dog's current information.\u003c/li\u003e\n\u003cli\u003eOn submit of the form, a PATCH request should be made to \u003ca href=\"http://localhost:3000/dogs/:id\"\u003ehttp://localhost:3000/dogs/:id\u003c/a\u003e to update the dog information (including name, breed and sex attributes).\u003c/li\u003e\n\u003cli\u003eOnce the form is submitted, the table should reflect the updated dog information. There are many ways to do this. You could search for the table fields you need to edit and update each of them in turn, but we suggest making a new get request for all dogs and rerendering all of them in the table. Make sure this GET happens after the PATCH so you can get the most up-to-date dog information.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eExample\u003c/h3\u003e\n\n\u003cp\u003eThe below gif demonstrates the working functionality of the app.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"assets/app.gif\" alt=\"app\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"assets/dog-show.jpg\" alt=\"dog\"\u003e\u003c/p\u003e","exportId":"gdb0095acf78e553718d3e2b1c6d2e1a7"},{"id":173525,"title":"Project: Bookliker","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"bookliker-practice-challenge\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/bookliker-practice-challenge/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/bookliker-practice-challenge\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/bookliker-practice-challenge/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWelcome to BookLiker, where you can look at books and like them! (Hey, not all startups are brilliant ideas.)\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eYou will be using the \u003ca href=\"https://github.com/typicode/json-server\"\u003ejson-server\u003c/a\u003e package to mock an external API. You can make the same RESTful requests to this server that you would to any API. If you haven't yet, install json-server.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install -g json-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen run the server with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejson-server db.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will serve your code on \u003ccode\u003ehttp://localhost:3000\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eBuild the following application in Vanilla JS\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://curriculum-content.s3.amazonaws.com/module-3/bookliker-example.gif\" alt=\"example GIF\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou will be using the following backend to get the list of books. The expectation here is that you will include the following features\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eGet a list of books \u0026amp; render them\n\u003ccode\u003ehttp://localhost:3000/books\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eBe able to click on a book, you should see the book's thumbnail and description and a list of users who have liked the book.\u003c/li\u003e\n\u003cli\u003eYou can like a book by clicking on a button. You are user 1 \u003ccode\u003e{\"id\":1, \"username\":\"pouros\"}\u003c/code\u003e, so to like a book send a \u003ccode\u003ePATCH\u003c/code\u003e request to \u003ccode\u003ehttp://localhost:3000/books/:id\u003c/code\u003e with an array of users who like the book. This array should be equal to the existing array of users that like the book, plus your user. For example, if the previous array was \u003ccode\u003e\"[{\"id\":2, \"username\":\"auer\"}, {\"id\":8, \"username\":\"maverick\"}]\u003c/code\u003e, you should send as the body of your PATCH request:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"users\": [\u003cbr\u003e    {\"id\":2, \"username\":\"auer\"},\u003cbr\u003e    {\"id\":8, \"username\":\"maverick\"},\u003cbr\u003e    {\"id\":1, \"username\":\"pouros\"}\u003cbr\u003e  ]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThis route will respond with the updated book json including the list of users who have liked the book.\u003c/li\u003e\n\u003cli\u003eBONUS: Can you make it so a second patch request to the same book removes your user from the list of users? Can you toggle likes on and off?\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gaf2bef96caaede740b1b022324d3193a"},{"id":173526,"title":"Project: Quotes App","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-quotes-practice\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-quotes-practice/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-quotes-practice\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-quotes-practice/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse \u003ccode\u003ejson-server\u003c/code\u003e to provide a basic RESTful data store\u003c/li\u003e\n\u003cli\u003eBuild a simple, event-driven, JavaScript DOM-modifying application\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHello, let's build a simple app that allows us to keep track of our favorite quotes and who said them.\u003c/p\u003e\n\n\u003ch2\u003eUse \u003ccode\u003ejson-server\u003c/code\u003e to Provide a Basic RESTful Data Store\u003c/h2\u003e\n\n\u003cp\u003eIf you don't have \u003ccode\u003ejson-server\u003c/code\u003e installed, run \u003ccode\u003e$ npm i -g json-server\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf you already have it installed, run the server by: \u003ccode\u003e$ json-server --watch db.json\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eBuild a simple, Event-driven, JavaScript DOM-modifying application\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003ePopulate page with quotes with a \u003ccode\u003eGET\u003c/code\u003e request to\n\u003ccode\u003ehttp://localhost:3000/quotes?_embed=likes\u003c/code\u003e. The query string in this URL tells \n\u003ccode\u003ejson-server\u003c/code\u003e to include the likes for a quote in the JSON of the response. You\nshould not use this query string when creating or deleting a quote.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eEach quote should have the following structure:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e    \u003cli class=\"quote-card\"\u003e\n\u003cbr\u003e      \u003cblockquote class=\"blockquote\"\u003e\n\u003cbr\u003e        \u003cp class=\"mb-0\"\u003eLorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.\u003c/p\u003e\n\u003cbr\u003e        \u003cfooter class=\"blockquote-footer\"\u003eSomeone famous\u003c/footer\u003e\u003cbr\u003e        \u003cbr\u003e\u003cbr\u003e        Likes: \u003cspan\u003e0\u003c/span\u003e\u003cbr\u003e        Delete\u003cbr\u003e      \u003c/blockquote\u003e\n\u003cbr\u003e    \u003c/li\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eSubmitting the form creates a new quote and adds it to the list of quotes\nwithout having to refresh the page. Pessimistic rendering is reccommended.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eClicking the delete button should delete the respective quote from the\nAPI and remove it from the page without having to refresh.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClicking the like button will create a like for this particular quote in the\nAPI and update the number of likes displayed on the page without having to\nrefresh.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse a \u003ccode\u003ePOST\u003c/code\u003e request to \u003ccode\u003ehttp://localhost:3000/likes\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThe body of the request should be a JSON object containing a key of\n\u003ccode\u003equoteId\u003c/code\u003e, with an \u003cem\u003einteger\u003c/em\u003e value. Use the ID of the quote you're creating the like for — e.g. \u003ccode\u003e{ quoteId: 5 }\u003c/code\u003e to create a like for quote 5. \u003c/li\u003e\n\u003cli\u003eIMPORTANT: if the \u003ccode\u003equoteID\u003c/code\u003e is a string for some reason (for example, if you've pulled the ID from a dataset)\u0026nbsp;the index page will not include the like you create on \u003cem\u003eany\u003c/em\u003e quote.\u003c/li\u003e\n\u003cli\u003eBonus (not required): add a \u003ccode\u003ecreatedAt\u003c/code\u003e key to your object to track when\nthe like was created. Use \u003ca href=\"https://en.wikipedia.org/wiki/Unix_time\"\u003eUNIX time\u003c/a\u003e (the number of seconds since\nJanuary 1, 1970). The  \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003edocumentation\u003c/a\u003e for the JS \u003ccode\u003eDate\u003c/code\u003e class may be\nhelpful here!\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eExtend Your Learning\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an edit button to each quote-card that will allow the editing of a quote. \u003cem\u003e(Hint: there is no 'correct' way to do this. You can try creating a hidden form that will only show up when hitting the edit button.)\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003eCurrently, the number of likes of each post does not persist on the frontend after we refresh, as we set the beginning value to 0. Include an additional fetch to always have an updated number of likes for each post. You will send a GET request to \u003ccode\u003ehttp://localhost:3000/likes?quoteId=\u003c/code\u003e and interpolate the id of a given post.\u003c/li\u003e\n\u003cli\u003eAdd a sort button that can be toggled on or off. When off the list of quotes will appear sorted by the ID. When the sort is active, it will display the quotes by author's name, alphabetically.\n\n\u003cul\u003e\n\u003cli\u003eOne way of doing this is to sort the quotes in JS after you've retrieved them from the API. Try this way first.\u003c/li\u003e\n\u003cli\u003eAnother way of doing this is to make a fetch to \u003ccode\u003ehttp://localhost:3000/quotes?_sort=author\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWhat are the pros and cons in doing the sorting on the client vs. the server? Discuss with a partner.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBuilding an application like this is a typical interview exercise. It's not\nuncommon to be set in front of a foreign computer (or asked to bring your own)\nand to receive a specification like this.\u003c/p\u003e","exportId":"ga4ecbe13efaed258cd78c56e02662c16"}]},{"id":18933,"name":"Code Challenges","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g9dbcf1a29c70cea0f4ebc1d513ca0ba1","items":[{"id":179379,"title":"Module Assessments and Instructions","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a file upload","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"code-challenge-instructions-and-example\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"instructure_file_link\" title=\"example-code-challenge-2021-02-24.zip\" href=\"viewer/files/Uploaded%20Media/example-code-challenge-2021-02-24.zip?canvas_=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\"\u003eexample-code-challenge-2021-02-24.zip\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eTowards the end of each phase of this course, you'll receive an assessment in the form of a code challenge. This assessment a chance for you to show off how much you've learned, see where you are in terms of grasping the material, and get feedback from us on ways to improve or areas to work on further.\u003c/p\u003e\n\u003cp\u003eThe first assessment will cover your knowledge of JavaScript and frontend development. Topics will include DOM manipulation, event handling, and communicating with a server.\u003c/p\u003e\n\u003cp\u003eFor the first assessment, you'll receive a repo with instructions and deliverables. For example, one deliverable might be \"As a user, I should be able to add a comment to a blog post\". It's an open-book, totally Googleable assessment. As opposed to standard labs, there will not be tests. Instead, we will be reading, running, and grading your code based on how you fulfill the requirements and your use of coding best practices. We will give you constructive feedback based on your submission.\u003c/p\u003e\n\u003cp\u003eYou can expect feedback after we grade your assessment. We'll set aside time for each of you over the subsequent week to review if you don't pass the assessment.\u003c/p\u003e\n\u003cp\u003eFuture assessments will follow a similar format, but of course, the topics will be different. You can expect any of the topics we cover in class to be touched on in some way. The best way to prepare will be to consistently complete labs, review your lecture notes, and build your own projects.\u003c/p\u003e\n\u003cp\u003ePlease don't think of passing the assessments as the goal of your learning —— doing well on them should be a side effect, a by-product of you learning how to be an amazing developer. By all means, get more practice in any areas where you know you need it, but don't cram for a code challenge, and definitely don't sacrifice keeping up with the labs to prepare for it.\u003c/p\u003e\n\u003cp\u003eBelow, we've provided instructions for how to work on and submit your future assessments. This lesson is structured like an code challenge, so feel free to practice here.\u003c/p\u003e\n\u003ch2\u003eInstructions for Working on and Submitting Code Challenge\u003c/h2\u003e\n\u003cp\u003eBefore you can start working on a code challenge, you must follow the steps below:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOnce your code challenge is published, it will be available in the Code Challenges module of this course.\u003c/li\u003e\n\u003cli\u003eFind and open the code challenge assignment and download the linked ZIP file\u003c/li\u003e\n\u003cli\u003eUnzip the file on your computer\u003c/li\u003e\n\u003cli\u003eIn your terminal, change directory (\u003ccode\u003ecd\u003c/code\u003e) into the unzipped challenge directory\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003els\u003c/code\u003e; you should see a \u003ccode\u003ebin/\u003c/code\u003e directory and a \u003ccode\u003ecode-challenge.bundle\u003c/code\u003e file)\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003eruby bin/start \u0026lt;your-name\u0026gt;\u003c/code\u003e from the directory; this will create a new directory called \u003ccode\u003ecode-challenge/\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the new \u003ccode\u003ecode-challenge/\u003c/code\u003e directory and open in your code editor\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo work on your code challenge:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEnsure that you're in the \u003ccode\u003ecode-challenge/\u003c/code\u003e directory\u003c/li\u003e\n\u003cli\u003eFollow the instructions in the \u003ccode\u003eREADME.md\u003c/code\u003e file\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003egit add .\u003c/code\u003e and \u003ccode\u003egit commit\u003c/code\u003e inside of the \u003ccode\u003ecode-challenge/\u003c/code\u003e directory often as you're working\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo submit the code challenge:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNavigate to the \u003cstrong\u003eparent directory\u003c/strong\u003e of \u003ccode\u003ecode-challenge/\u003c/code\u003e in your terminal.\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003eruby bin/end\u003c/code\u003e, which will create a new file, \u003ccode\u003e\u0026lt;your-name\u0026gt;.bundle\u003c/code\u003e in that directory (for example, \u003ccode\u003ealicia.bundle\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eNavigate back to the code challenge assignment in Canvas\u003c/li\u003e\n\u003cli\u003eUpload \u003ccode\u003e\u0026lt;your-name\u0026gt;.bundle\u003c/code\u003e to the assignment and submit\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eReach out to your instructors immediately\u003c/strong\u003e if you run into issues downloading, working on, or uploading your code challenge.\u003c/p\u003e\n\u003cp\u003eBelow is a video walkthrough of starting and submitting a code challenge using the steps above. Note that the initial location of the code challenge in Canvas has changed, but the other steps are still the same.\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube-nocookie.com/embed/3AM3qXUtnQY\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e","exportId":"ge1a04af88e90d283aa96bbe19e83358e"},{"id":173527,"title":"Phase 1 Rubric","type":"Assignment","indent":0,"locked":false,"submissionTypes":null,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_view","completed":true,"content":"\u003cp\u003e\u003cspan\u003eRead the rubric attached below.\u003c/span\u003e\u003c/p\u003e","exportId":"gc8e0401a1424dbe0c8308223d8ada261"},{"id":173531,"title":"Phase 1 Code Challenge: Flatagram","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a file upload","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"Phase-1-Code-Challenge-Flatagram-2021-02-2.zip\" href=\"viewer/files/Uploaded%20Media/Phase-1-Code-Challenge-Flatagram-2021-02-2.zip?canvas_=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\"\u003ePhase-1-Code-Challenge-Flatagram-2021-02-2.zip\u003c/a\u003e \u0026nbsp;\u003cbr\u003e\u003cbr\u003eDownload the file above and unzip it to get started. Refer to the previous code challenge instructions for the process of starting and submitting this challenge.\u003c/p\u003e","exportId":"g2bfaff8af5eece1291c1b86aa01dd36e"}]},{"id":18934,"name":"Milestones","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g96290ca31080b10da700e0daf3d9b586","items":[{"id":173533,"title":"JavaScript Project Mode","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-javascript-project-mode\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-project-mode/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-project-mode\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-project-mode/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDesign and architect features across a frontend\u003c/li\u003e \u003cli\u003eCommunicate and collaborate in a technical environment\u003c/li\u003e \u003cli\u003eIntegrate JavaScript and an external API\u003c/li\u003e \u003cli\u003eDebug issues in small- to medium-sized projects\u003c/li\u003e \u003cli\u003eBuild and iterate on a project MVP\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWelcome to JavaScript Project Mode!\u003c/p\u003e  \u003cp\u003eYou’ve worked so hard to get here and have learned a ton. Now it's time to bring it all together!\u003c/p\u003e  \u003cp\u003eFor this project, you're going build a Single Page Application (\u003cstrong\u003eSPA\u003c/strong\u003e). Building this application will be challenging because it will integrate everything you've learned up to this point. Your frontend will be built with HTML, CSS, and JavaScript and will communicate with a public API.\u003c/p\u003e  \u003ch3\u003eProject Requirements\u003c/h3\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eYour app must be a HTML/CSS/JS frontend that accesses data from a public API. All interactions between the client and the API should be handled asynchronously and use JSON as the communication format.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eYour entire app must run on a single page. There should be NO redirects. In other words, your project will contain a single HTML file.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eSome interactivity is required. This interactivity needs to incorporate at least 3 separate event listeners. This could be as simple as adding a \"like\" button or adding comments. These interactions do not need to persist after reloading the page.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eStretch Goals\u003c/h3\u003e  \u003col\u003e \u003cli\u003eSet up a JSON server in your project to persist your app's interactivity.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eStrategy, Timeline, and Tips\u003c/h2\u003e  \u003ch3\u003ePlanning\u003c/h3\u003e  \u003cul\u003e \u003cli\u003ePlan out your features\u003c/li\u003e \u003cli\u003eDevelop user stories  \u003cul\u003e \u003cli\u003e“As [ a user ], I want [ to perform this action ] so that [ I can accomplish this goal ].”\u003c/li\u003e \u003cli\u003eFeatures should not need you there to explain them to users\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003ePlan out the structure of your JSON requests\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eProject Pitches\u003c/h3\u003e  \u003cp\u003eBefore you start working on your project, you'll pitch your project idea to your instructors for approval and feedback. \u003c/p\u003e  \u003cp\u003eFor your project pitch, you should include:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe basic story of your application\u003c/li\u003e \u003cli\u003eThe core features of your MVP\u003c/li\u003e \u003cli\u003eThe API data you'll be using and how you'll use it\u003c/li\u003e \u003cli\u003eChallenges you expect to face\u003c/li\u003e \u003cli\u003eHow you are meeting the requirements of the project\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFeel free to send this pitch to your instructor via slack asynchronously. \u003c/p\u003e  \u003ch3\u003eMVP ASAP\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eBuild a Minimum Viable Product (MVP) as quickly as possible.  \u003cul\u003e \u003cli\u003ePick an API and explore it early on to ensure it will work for your need\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eInstructor Guidance\u003c/h3\u003e  \u003cp\u003eYou should strive to solve problems independently, but you also shouldn't waste your time stuck on a problem. A good guideline for a small bug is the rule of 10s:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e10 minutes debugging the code\u003c/li\u003e \u003cli\u003e10 minutes using Google and StackOverflow to try to find an answer\u003c/li\u003e \u003cli\u003e10 minutes asking your fellow students for help\u003c/li\u003e \u003cli\u003eAsking an instructor\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIf you seek out instructor guidance on your design from the start, they might help steer you into design and architectural decisions that will help you down the road. That will also give the instructors context for what your app is supposed to do, so you won't need to explain everything to them when asking for help debugging.\u003c/p\u003e  \u003ch3\u003eGuidelines for Staying Organized\u003c/h3\u003e  \u003cp\u003e\u003cstrong\u003eWrite down\u003c/strong\u003e the decisions you make about your project. This will not only help you think more clearly, it will also help you communicate your project to instructors when asking for help. In addition to writing everything down, we also recommend the following to help stay organized and on track:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDescribe/sketch your ideas (use diagrams!).\u003c/li\u003e \u003cli\u003eStart by creating a frontend directory with the basic files you'll need\u003c/li\u003e \u003cli\u003eNext, build enough code to get some API data to work with. Don't worry about building all of your async code yet, just get to the point where you can access one endpoint on an API, then start working on getting that data displayed.\u003c/li\u003e \u003cli\u003eThen, continue to build additional async code and frontend features.\u003c/li\u003e \u003cli\u003eContinue building features one by one.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eCheck in with your instructors to make sure your scope and timeline are manageable.\u003c/p\u003e","exportId":"g3a9730bd8fb591efd7c033777012420c"}]},{"id":19358,"name":"Exit Tickets","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g6e1bb5ba84cb362ac8f0b3dda68e4eb4","items":[{"id":179301,"title":"Exit Ticket - Data Structures in JS","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gfd6b9385d3f517a771a598f89714bc1c","questionCount":1,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"","exportId":"g5f45f4c12d55d3d0af490d144bbfd125"},{"id":179383,"title":"Exit Ticket - DOM and Events","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gda6decb9d8c0d21b44b1e3c6eb0d25c1","questionCount":2,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":2.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"","exportId":"g4df7c6a5fe142b73c956f50422017107"},{"id":179462,"title":"Exit Ticket - request-response","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"g368ab4f750471b7e93d8280d9140aa19","questionCount":1,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"","exportId":"gedf70eef7197db060ac6612ccae89a1f"},{"id":181083,"title":"Exit Ticket - Communicating with the Server I","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"g69843234f20af58212540c12d338de37","questionCount":1,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"","exportId":"ge598ddcc6b2aa4b36c1a15769dd06e14"},{"id":181918,"title":"Exit Ticket - Communicating with the Server II","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"g5a23ce0614a19f4c6295810be5db8ebc","questionCount":1,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"","exportId":"g3ef7a7521c3043b900604b1865194cd9"}]},{"id":19402,"name":"Additional Practice: HTML Forms and Modern Elements","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gda29778a376747ed511875c10eb705d1","items":[{"id":179487,"title":"HTML Forms","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewds-html-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewds-html-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewds-html-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\u003cp\u003eUp to this point, all of the HTML elements we've seen are used to display data \u003cem\u003eto\u003c/em\u003e users. This is great, but what happens when we want to get information \u003cem\u003efrom\u003c/em\u003e our users? In order to get user information we need to write HTML forms. We will learn to write them in this lesson.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eState the purpose of a form\u003c/li\u003e\n\u003cli\u003eWrite an HTML \u003ccode\u003eform\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eDefine the \u003ccode\u003eGET\u003c/code\u003e vs \u003ccode\u003ePOST\u003c/code\u003e HTTP methods\u003c/li\u003e\n\u003cli\u003eWrite HTML \u003ccode\u003eform\u003c/code\u003e data elements\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eState The Purpose Of a Form\u003c/h2\u003e\n\u003cp\u003eForms gather user information. They're just like surveys you might fill out at a supermarket or a questionnaire you'd fill out at the doctor's office.\u003c/p\u003e\n\u003cp\u003eLet's suppose that you're the owner of a dog walking business that needs a way to gather information from clients. You would use an HTML form to collect information like:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eowner's name\u003c/li\u003e\n\u003cli\u003eowner's address\u003c/li\u003e\n\u003cli\u003edog's name\u003c/li\u003e\n\u003cli\u003edog's age\u003c/li\u003e\n\u003cli\u003ewalking frequency\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou collect this information in HTML tags called \u003ccode\u003einput\u003c/code\u003es located within the \u003ccode\u003eform\u003c/code\u003e tag. You will also code a \"Submit\" button so the client can say \"OK! I'm done!\" We'll discuss \u003ccode\u003einput\u003c/code\u003es in more detail below.\u003c/p\u003e\n\u003cp\u003eWhen the owner fills out the form's inputs and clicks \"Submit,\" a record of their responses will be sent to a server where the information can be stored. Once the server has the information stored, software can be written to use the server's information to create newsletters, login accounts, or invitations to client-appreciation parties.\u003c/p\u003e\n\u003cp\u003eTo store the information, we need a language like Ruby, PHP, or Java. We won't be covering storage and usage in this lesson. Writing code to handle things like that is \"\u003cem\u003eback-end engineering\u003c/em\u003e.\" Luckily, all those languages are designed to receive the information sent by an HTML \u003ccode\u003eform\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLet's write an HTML form. We'll use the \u003ccode\u003eform\u003c/code\u003e tag.\u003c/p\u003e\n\u003ch2\u003eWrite An HTML Form Tag\u003c/h2\u003e\n\u003cp\u003eThe starting element in an HTML form is the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e tag. The \u003ccode\u003eform\u003c/code\u003e element wraps all the \u003ccode\u003einput\u003c/code\u003e elements that will collect our users' information inside of them. We will cover \u003ccode\u003einput\u003c/code\u003e elements in great detail after finishing discussing the attributes within a \u003ccode\u003eform\u003c/code\u003e tag.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eform\u003c/code\u003e tag's first attribute, \u003ccode\u003eaction\u003c/code\u003e, decides where the user information is sent. This is typically the URL of a server. This server will run the Ruby, PHP, or Java (or other!) code required to store the information the \u003ccode\u003eform\u003c/code\u003e sends.\u003c/p\u003e\n\u003cp\u003eThe second attribute, \u003ccode\u003emethod\u003c/code\u003e, sets the \u003cem\u003eHTTP method\u003c/em\u003e the browser will use to send the user information to the server. You can think of \"\u003cem\u003eHTTP method\u003c/em\u003e\" as being like an envelope type. Some envelopes are good for documents, others are good for confidential letters, and yet others are good for overseas mail. The \u003cem\u003eHTTP methods\u003c/em\u003e used in forms are \u003ccode\u003eGET\u003c/code\u003e and \u003ccode\u003ePOST\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhile you won't write the \"back-end\" code here, we'll describe what you see as a user when an HTML author chooses \u003ccode\u003eGET\u003c/code\u003e versus \u003ccode\u003ePOST\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eDefine The \u003ccode\u003eGET\u003c/code\u003e vs. \u003ccode\u003ePOST\u003c/code\u003e HTTP Methods\u003c/h2\u003e\n\u003ch3\u003eGET\u003c/h3\u003e\n\u003cp\u003eBelow we see the \u003ccode\u003eform\u003c/code\u003e example code for making a \u003ccode\u003eGET\u003c/code\u003e request.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eaction\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ehttp://example.com/process-user.php\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003emethod\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eGET\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eowner-name\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edog-name\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003efavorite-toy\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eWhen the user clicks the submit button, their responses in the \u003ccode\u003einput\u003c/code\u003e fields are captured and labeled using the \u003ccode\u003ename\u003c/code\u003e attributes from each element. The browser stores this information behind the scenes like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eowner-name=Bob+Barkley\u0026amp;dog-name=SirBarksALot\u0026amp;favorite-toy=ball\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis is known as the \u003cem\u003eQuery String\u003c/em\u003e. The browser \u003cem\u003ethen\u003c/em\u003e attaches the \u003cem\u003eQuery String\u003c/em\u003e onto the location listed in the \u003ccode\u003eform\u003c/code\u003e's \u003ccode\u003eaction\u003c/code\u003e attribute after a \u003ccode\u003e?\u003c/code\u003e to create a URL that looks like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ehttp://example.com/process-user.php?owner-name=Bob+Barkley\u0026amp;dog-name=SirBarksALot\u0026amp;favorite-toy=ball\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe browser then goes to this new URL. The server then uses \u003cem\u003eback-end programming\u003c/em\u003e to use the information in the \u003cem\u003eQuery String\u003c/em\u003e to change what it will show.\u003c/p\u003e\n\u003cp\u003eWhen a \u003cem\u003eQuery String\u003c/em\u003e is added to a URL, it's a \u003cstrong\u003egreat\u003c/strong\u003e solution for filtering the information that comes back. Forms are a nice way for users to add those filters without typing them in by hand. You've probably seen this on the internet.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/html-forms/amazon_get_request.png\" alt=\"Amazon Using a Form with GET\"\u003e\u003c/p\u003e\n\u003cp\u003eHere, Amazon uses a \u003ccode\u003eform\u003c/code\u003e tag with \u003ccode\u003emethod\u003c/code\u003e of \u003ccode\u003eGET\u003c/code\u003e to filter their \u003cem\u003ehuge\u003c/em\u003e store. They filter based on matches of the \u003ccode\u003e\u0026lt;input type=\"text\" name=\"field-keywords\"\u0026gt;\u003c/code\u003e. We typed in \"dog toys\" into that text field input.\u003c/p\u003e\n\u003cp\u003eWhile this is a great method for things like search, this is bad for passwords, obviously! A \u003cem\u003eQuery String\u003c/em\u003e with \u003ccode\u003epassword=ByronBestPoodle\u003c/code\u003e will stand out! When you need to send your response in a way that doesn't leak information, you want your form to use the \u003ccode\u003ePOST\u003c/code\u003e \u003cem\u003eHTTP method\u003c/em\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eADVANCED\u003c/strong\u003e: An advanced concept is that a \u003ccode\u003eGET\u003c/code\u003e request is \"idempotent.\" That means the browser can run it repeatedly without changing information on the back-end. We can ask for a filtered list of dog toys again and again and again by hitting Refresh again and again and again. Nothing changes on the server if we do that.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3\u003ePOST\u003c/h3\u003e\n\u003cp\u003eBelow we see the same form example code for making a POST request.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eaction\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ehttp://example.com/process-user.php\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003emethod\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ePOST\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eowner-name\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edog-name\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003efavorite-toy\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eIt's the same form you would write for a \u003ccode\u003eGET\u003c/code\u003e-method \u003ccode\u003eform\u003c/code\u003e, but with the \u003ccode\u003emethod\u003c/code\u003e attribute changed.\u003c/p\u003e\n\u003cp\u003eWhen the user clicks the submit button, their responses in the \u003ccode\u003einput\u003c/code\u003e fields are captured and labeled using the \u003ccode\u003ename\u003c/code\u003e attributes from each element. The browser stores this information like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eowner-name=Bob+Barkley\u0026amp;dog-name=SirBarksALot\u0026amp;favorite-toy=ball\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003ePOST\u003c/code\u003e is like a secure envelope. We can't see the information being sent. That's why \u003ccode\u003ePOST\u003c/code\u003e is the right call when sending sensitive information like passwords or national IDs. The user's browser \u003cstrong\u003eis not redirected\u003c/strong\u003e in this case. We can't show you a screenshot of what this looks like because, well, there's nothing to show. Usually after a successful POST, the web site will send you to a page that says \"Thanks for your purchase\" or \"Thanks for joining our site.\"\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eADVANCED\u003c/strong\u003e: An advanced concept is that a \u003ccode\u003ePOST\u003c/code\u003e request is \u003cstrong\u003enot\u003c/strong\u003e \"idempotent.\" If the browser runs it repeatedly, it \u003cstrong\u003ewill\u003c/strong\u003e change data on the back end. Submitting payment for a credit card is \u003cstrong\u003enot\u003c/strong\u003e idempotent. Each refresh will take money out of your bank account! That's why many finance sites say \"Don't refresh this page while we process your request.\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eNow that we know how to write a \u003ccode\u003eform\u003c/code\u003e tag and we understand the HTTP action that goes in its \u003ccode\u003eaction\u003c/code\u003e attribute, let's talk about different ways we can ask for information within our \u003ccode\u003eform\u003c/code\u003e by choosing the right \u003ccode\u003einput\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eWrite HTML Form Data Elements\u003c/h2\u003e\n\u003cp\u003eWhat \u003cem\u003eis\u003c/em\u003e an \u003ccode\u003einput\u003c/code\u003e?\u003c/p\u003e\n\u003cp\u003eThink about a doctor's questionnaire: sometimes they ask you to fill-in-the-blank, sometimes they ask you to mark checkboxes next to symptoms, and other times they ask you to write a short answer. They ask all these different \u003cem\u003etypes\u003c/em\u003e of questions within the same questionnaire or \u003cem\u003eform\u003c/em\u003e. All of those types of questionnaire prompts have a cousin in an HTML \u003ccode\u003einput\u003c/code\u003e. A fill-in-the-blank is an \u003ccode\u003e\u0026lt;input type=\"text\"\u0026gt;\u003c/code\u003e. A short essay's twin is \u003ccode\u003e\u0026lt;input type=\"textarea\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe rest of this lesson will be spent introducing you to the \u003ccode\u003einput\u003c/code\u003e elements.\u003c/p\u003e\n\u003ch3\u003eText Field Input\u003c/h3\u003e\n\u003cp\u003eCreating an \u003ccode\u003einput\u003c/code\u003e tag with \u003ccode\u003etype=\"text\"\u003c/code\u003e gives our users a place to type in a single line of text. It looks like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;input type=\"text\" name=\"owner-name\" placeholder=\"Full Name\"\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eplaceholder\u003c/code\u003e attribute puts some dummy text into the element. That text will be replaced when the user starts filling it in. The \u003ccode\u003ename\u003c/code\u003e attribute gives our input a name.\u003c/p\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/textfield_input.png\" alt=\"Image of textfield input\"\u003e\u003c/p\u003e\n\u003cp\u003eGenerally, HTML form attributes should not contain spaces. Common exceptions to this rule are \u003ccode\u003eplaceholder\u003c/code\u003e and \u003ccode\u003eclass\u003c/code\u003e. If you're not sure whether or not your attribute can contain a space, check out \u003ca href=\"https://www.htmlgoodies.com/primers/html/article.php/3881421\"\u003ethis article\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eA Note on Labels\u003c/h3\u003e\n\u003cp\u003eYou might have noticed we sneaked an extra tag in, the \u003ccode\u003elabel\u003c/code\u003e tag. When writing forms, we don't want to describe what goes in the form by using \u003ccode\u003ep\u003c/code\u003e tags. We can more meaningfully \"tie\" descriptive text (that is, a label) to an input field using the \u003ccode\u003elabel\u003c/code\u003e tag. The \u003ccode\u003eid\u003c/code\u003e attribute of the \u003ccode\u003einput\u003c/code\u003e is provided to the \u003ccode\u003elabel\u003c/code\u003e's \u003ccode\u003efor\u003c/code\u003e attribute and the browser knows to put them close to each other.\u003c/p\u003e\n\u003cp\u003eLabels are not strictly necessary on HTML forms. \u003cstrong\u003eBut\u003c/strong\u003e they make our site better for those using assistive devices. It's the Right Thing to Do.\u003c/p\u003e\n\u003cp\u003eWhy do we put \u003cem\u003eboth\u003c/em\u003e labels \u003cem\u003eand\u003c/em\u003e placeholders? First, not all browsers and assistive devices support placeholder attributes. Labels help assistive devices help users who need them more easily enter data. Again, it's part of our desire to create an inclusive and accessible web.\u003c/p\u003e\n\u003ch3\u003ePassword Inputs\u003c/h3\u003e\n\u003cp\u003eCreating an \u003ccode\u003einput\u003c/code\u003e tag with \u003ccode\u003etype=\"password\"\u003c/code\u003e gives our users a place to type information that will \u003cem\u003enot\u003c/em\u003e be displayed by the browser. Most of the time browsers put \u003ccode\u003e*\u003c/code\u003e or dots instead of the character. This is useful when private information is entered, so your password isn't displayed for others to see.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003efor\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003epassword\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eWhat's the password?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003epassword\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003epassword\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003epassword\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eplaceholder\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eEnter your password here\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/password_input.png\" alt=\"Image of password input\"\u003e\u003c/p\u003e\n\u003ch3\u003eTelephone Inputs\u003c/h3\u003e\n\u003cp\u003eCreating an \u003ccode\u003einput\u003c/code\u003e tag with \u003ccode\u003etype=\"tel\"\u003c/code\u003e behaves like a text field, but will bring up the numeric keypad on supported mobile devices.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003efor\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etel\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eWhere should E.T. \u0026amp;trade; Phone Home?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etel\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etel\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ephone\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eplaceholder\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ePhone Number\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/tel_input.png\" alt=\"Image of tel input\"\u003e\u003c/p\u003e\n\u003ch3\u003eSubmit Inputs\u003c/h3\u003e\n\u003cp\u003eCreating an \u003ccode\u003einput\u003c/code\u003e tag with \u003ccode\u003etype=\"submit\"\u003c/code\u003e creates a submit button that, when clicked, will do something with a user's \u003ccode\u003eform\u003c/code\u003e data. The \u003ccode\u003evalue\u003c/code\u003e attribute holds the text that will appear on the button.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eLet me walk your dog!\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/submit_input.png\" alt=\"Image of submit input\"\u003e\u003c/p\u003e\n\u003ch3\u003eRadio Inputs\u003c/h3\u003e\n\u003cp\u003eRadio inputs show users many options. But radio buttons allow users to select only one. You will set different \u003ccode\u003evalue\u003c/code\u003e attributes for each radio button, but they \u003cem\u003emust\u003c/em\u003e have the same \u003ccode\u003ename\u003c/code\u003e attribute.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-html-basic\"\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eDoes your dog get along with other dogs?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eradio\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eplays-well-with-others\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ehigh\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e The more dogs, the better!\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eradio\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eplays-well-with-others\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003emedium\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e It depends on the dog, but generally they are ok\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eradio\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eplays-well-with-others\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003elow\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e My dog prefers their walkies solo\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/radio_input.png\" alt=\"Image of radio input\"\u003e\u003c/p\u003e\n\u003ch3\u003eCheckboxes\u003c/h3\u003e\n\u003cp\u003eCheckboxes are like radio buttons...but you can choose more than one.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eWhat are your dogs favorite toys?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-1\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ekong\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e Kong \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-2\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003estuffed-animals\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eStuffed Animals\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-3\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003erope-toys\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eRope Toys\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-4\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esqueaky-toys\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eSqueaky Toys\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-5\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eballs\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eBalls, Frisbees, anything a dog can fetch!\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/checkbox_input.png\" alt=\"Image of the checkbox input\"\u003e\u003c/p\u003e\n\u003ch3\u003eSelect Menus\u003c/h3\u003e\n\u003cp\u003eThis is pretty advanced!\u003c/p\u003e\n\u003cp\u003eSelect menus create a drop-down menu. Inside the \u003ccode\u003eselect\u003c/code\u003e tag you use \u003ccode\u003eoption\u003c/code\u003e tags to create a menu. Inside the \u003ccode\u003eoption\u003c/code\u003e tag you say what will be shown in the menu. In the \u003ccode\u003evalue\u003c/code\u003e option you say what will be sent as part of the \u003cem\u003eQuery String\u003c/em\u003e. For the example below the \u003cem\u003eQuery String\u003c/em\u003e would contain \u003ccode\u003esize=\"small\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eWhat size is your dog?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eselect\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esize\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esmall\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eselected\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eSmall(0-25 pounds)\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003emedium\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eMedium (26-50 pounds)\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003elarge\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eLarge (51-75 pounds)\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ex-large\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eExtra Large (over 75 pounds)\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eselect\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/select_input.png\" alt=\"Image of select input\"\u003e\u003c/p\u003e\n\u003ch3\u003eTextarea\u003c/h3\u003e\n\u003cp\u003eTextarea elements are useful if we want our users to be able to be able to write multiple lines of text. For example, if we wish to allow our clients to write special notes for their dogs, we can let them write as much or as little as they like.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eAny other things we should know about your dog?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etextarea\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003emessage\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etextarea\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/textarea_input.png\" alt=\"Image of textarea input\"\u003e\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eWe use HTML \u003ccode\u003eform\u003c/code\u003es to collect data from users. Start with a form element. Give it an \u003ccode\u003eaction\u003c/code\u003e and \u003ccode\u003emethod\u003c/code\u003e, probably \u003ccode\u003ePOST\u003c/code\u003e. Inside the \u003ccode\u003eform\u003c/code\u003e add several \u003ccode\u003einput\u003c/code\u003e elements. Use the best \u003ccode\u003einput\u003c/code\u003e for the data you're requesting. Make sure that your \u003ccode\u003einput\u003c/code\u003es are clearly labeled. If you follow these guidelines you'll soon be getting all the user data you can handle!\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/embed/eiCtXc2YMKc?rel=0\"\u003eHTML Forms and Iframes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/115ECvsMyDnFBcc-Rvb4Jn876JhOycXxKVN6sv7OiJ1Y/edit?usp=sharing\"\u003ePresentation Slides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\"\u003eMDN - HTML - Form\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\"\u003eMDN - HTML - Button\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.htmlgoodies.com/primers/html/article.php/3881421\"\u003eHTML Goodies - Form Basics\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.phpform.org/\"\u003eHTML Form Generator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"html-forms"},{"id":179488,"title":"HTML Forms Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-forms-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-forms-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-forms-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-forms-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eBusiness of all types and sizes want to provide multiple ways for their potential\ncustomers to contact them.  One of the most common ways to do this is on a website is to provide\na \u003cem\u003econtact form\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn this lab, we will practice what we've learned about HTML forms by creating a\ncontact form similar to those we see on business websites.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eApply what we know of HTML forms to build a functional a contact form\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eReinforcing Our Understanding of HTML Forms\u003c/h2\u003e\n\n\u003cp\u003eTo see and test your form in action, run \u003ccode\u003ehttpserver\u003c/code\u003e or open \u003ccode\u003eindex.html\u003c/code\u003e in a\nnew browser tab. To test your work, run \u003ccode\u003elearn\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSome basic HTML has been provided for this lab, along with HTML comments on what\nis needed.  Follow the provided comments and test messages to see what is needed\nwhen creating the form.  At completion, your form should have:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA \u003cem\u003erequired\u003c/em\u003e text input for a full name with a placeholder, \"Enter Name\"\u003c/li\u003e\n\u003cli\u003eA \u003cem\u003erequired\u003c/em\u003e email type input for an email address with a placeholder, \"Enter Email\"\u003c/li\u003e\n\u003cli\u003eA \u003cem\u003etel\u003c/em\u003e type input for a telephone number with a placeholder, \"Enter Telephone (optional)\"\u003c/li\u003e\n\u003cli\u003eA text area for a user to include a message with a placeholder, \"Enter Message\"\u003c/li\u003e\n\u003cli\u003eLabels for each text input\u003c/li\u003e\n\u003cli\u003eA checkbox with text of your choosing\u003c/li\u003e\n\u003cli\u003eA submit button\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eThe \u003ccode\u003erequired\u003c/code\u003e Attribute\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003erequired\u003c/code\u003e attribute prevents the browser from submitting a form.  All\nrequired inputs must be filled in properly, preventing an unneeded page reload.\nThis functionality is baked into HTML5 for us automatically. All that is\nneeded is to include the word \u003ccode\u003erequired\u003c/code\u003e as an attribute, without setting it to\nany value.\u003c/p\u003e\n\n\u003cp\u003eWhen an input is required, the \u003ccode\u003etype\u003c/code\u003e attribute (e.g., \u003ccode\u003etext\u003c/code\u003e vs \u003ccode\u003eemail\u003c/code\u003e) will\ndetermine what the browser checks. In the case of an email, for instance, the input must\nmatch the format of an email address, including the \"@\".\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eForms are an essential way for users to submit data to a website. Some forms,\nlike search bars, only contain a single input field, but we can make them as\ncomplex as we need.\u003c/p\u003e\n\n\u003cp\u003eWe are only focused on building out the front end side of this form.  When a\nform is submitted, it is up to the \u003cem\u003ebackend\u003c/em\u003e of a website to decide how to\nhandle and store form data when submitted.\u003c/p\u003e","exportId":"gfa2dc680c3bc4a92f63a325a95b30100"},{"id":179489,"title":"HTML IFrames","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-iframes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-iframes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-iframes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-iframes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eSome sites let us use \u003cem\u003etheir\u003c/em\u003e creations in \u003cem\u003eour\u003c/em\u003e HTML documents. We're sure\nyou've noticed how many pages have Google maps built into them. The HTML tag\nthat lets us put someone else's web page \u003cem\u003einside\u003c/em\u003e our page is the \u003ccode\u003eiframe\u003c/code\u003e tag.\nWe'll explore it in this lesson.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe how \u003ccode\u003eiframe\u003c/code\u003e elements work\u003c/li\u003e\n\u003cli\u003eState the \u003ccode\u003eiframe\u003c/code\u003e attributes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eDescribe How \u003ccode\u003eiframe\u003c/code\u003e Elements Work\u003c/h2\u003e\n\n\u003cp\u003eWe can display HTML from other pages by using an \u003ccode\u003eiframe\u003c/code\u003e tag. The \u003ccode\u003eiframe\u003c/code\u003e\ncreates a window inside the page where this \"shared\" information appears.\u003c/p\u003e\n\n\u003cp\u003eAn \u003ccode\u003eiframe\u003c/code\u003e's \u003ccode\u003esrc\u003c/code\u003e attribute points to the location of the shared material.\nExamples are a custom search bar or YouTube video.\u003c/p\u003e\n\n\u003cp\u003eHere's an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003ciframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d335994.89219194185!2d2.0673752159642937!3d48.8589713267984!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x47e66e1f06e2b70f%3A0x40b82c3688c9460!2sParis%2C+France!5e0!3m2!1sen!2sus!4v1457911182825\" width=\"600\" height=\"450\" frameborder=\"0\" style=\"border: 0;\" allowfullscreen=\"\"\u003e\n\u003c/iframe\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d335994.89219194185!2d2.0673752159642937!3d48.8589713267984!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x47e66e1f06e2b70f%3A0x40b82c3688c9460!2sParis%2C+France!5e0!3m2!1sen!2sus!4v1457911182825\" width=\"600\" height=\"450\" frameborder=\"0\" style=\"border: 0;\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003ch2\u003eSome Important Iframe Attributes\u003c/h2\u003e\n\n\u003ch3\u003e\u003ccode\u003esrc\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eiframe\u003c/code\u003e element has one required attribute: \u003ccode\u003esrc\u003c/code\u003e. The \u003ccode\u003esrc\u003c/code\u003e attribute takes a\nURL (\u003ccode\u003ehttp://example.com/....\u003c/code\u003e) and displays the page requested.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e allow us to control the size of the \u003ccode\u003eiframe\u003c/code\u003e that we'd\nlike to display. Depending on the website that you are using in your \u003ccode\u003eiframe\u003c/code\u003e,\nit might have a size built in, but to be safe you always want to specify a\nsize. It's worth noting that if you know CSS, you can control height and width\nthere as well.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eframeborder\u003c/code\u003e and \u003ccode\u003estyle\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eIn earlier HTML versions, \u003ccode\u003eiframe\u003c/code\u003es were put inside of borders by default.\nMany people found that ugly. The \u003ccode\u003eframeborder\u003c/code\u003e allowed us to turn the border\noff.  \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eframeborder\u003c/code\u003e attribute is considered \u003cem\u003edeprecated\u003c/em\u003e, meaning \"likely to be\nremoved from the standard.\" In modern browsers, we can control borders  using\nCSS, as with our example, \u003ccode\u003estyle=\"border:0\"\u003c/code\u003e. You might not be familiar with CSS\nyet. For the time being, feel free to simply add this attribute.\u003c/p\u003e\n\n\u003cp\u003eGoogle and sites like YouTube still provide a \u003ccode\u003eframeborder\u003c/code\u003e attribute in their\nembedded map examples. We see this appear often in \u003ccode\u003eiframe\u003c/code\u003e links as providers\ntry to support \u003cem\u003eas many browsers as possible\u003c/em\u003e. It's important to understand what\nit means, but you probably won't need to write it much.  If you do, you'll want\nto set both \u003ccode\u003eframeborder=\"0\"\u003c/code\u003e AND \u003ccode\u003estyle=\"border:0\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eallowfullscreen\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eLike the \u003ccode\u003erequired\u003c/code\u003e attribute for HTML form elements, \u003ccode\u003eallowfullscreen\u003c/code\u003e is built\ninto HTML5. The \u003ccode\u003eallowfullscreen\u003c/code\u003e attribute uses a JavaScript method called\n\u003ccode\u003erequestFullScreen()\u003c/code\u003e to send the \u003ccode\u003eiframe\u003c/code\u003e to full screen. If \u003ccode\u003eallowfullscreen\u003c/code\u003e\nisn't included, the element can't be placed into full screen mode. It's\nimportant to be able to understand this attribute and realize that you can't get\naround any restrictions unless the \u003cem\u003eprovider\u003c/em\u003e wants you to. For more details\nvisit \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\"\u003eMDN\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIframes are powerful tools that allow us to show content from one website\nwithin a different site. You can put any website you'd like in an \u003ccode\u003eiframe\u003c/code\u003e, but\ncertain sites make more sense than others. Search or mapping sites in \u003ccode\u003eiframe\u003c/code\u003es\nare the most frequently used. However, we've seen many inventive uses of\n\u003ccode\u003eiframe\u003c/code\u003es!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/embed/eiCtXc2YMKc?rel=0\"\u003eHTML Forms and Iframes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/115ECvsMyDnFBcc-Rvb4Jn876JhOycXxKVN6sv7OiJ1Y/edit?usp=sharing\"\u003ePresentation Slides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\"\u003eMDN - HTML - Iframe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developers.google.com/maps/documentation/embed/guide\"\u003eGoogle Maps iframe documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"html-iframes"},{"id":179490,"title":"HTML IFrames Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-iframes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-iframes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-iframes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-iframes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eiframe\u003c/code\u003e element displays an entire HTML file inside itself, allowing one\nHTML page to be contained within another. Before JavaScript became widely used\nin websites, \u003cem\u003eanytime\u003c/em\u003e a user clicked on a link, the entire page would refresh.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eiframe\u003c/code\u003e tag can be used to reload specific parts of a page without changing\nothers, providing a better user experience. For example, when a navigation link\nwas clicked, the whole page would not reload: instead only the iframe portion.\u003c/p\u003e\n\n\u003cp\u003eWith JavaScript, HTML content can be added and removed programmatically without\nneeding a refresh. This replaced the need for the \u003ccode\u003eiframe\u003c/code\u003e tag in many websites.\u003c/p\u003e\n\n\u003cp\u003eStill, there are some specific uses where \u003ccode\u003eiframe\u003c/code\u003e remains valuable. One\nexample: embedded maps. Embedded maps are a simple option for websites that need\na custom map (i.e. contact pages for businesses). An \u003ccode\u003eiframe\u003c/code\u003e is used to contain\nthe entire interactive map page within a websites. While using an \u003ccode\u003eiframe\u003c/code\u003e, we\ndo not need to write our own JavaScript and we can incorporate all that\npre-built functionality neatly.\u003c/p\u003e\n\n\u003cp\u003eIn this lab, we will add an iframe to our existing HTML contact form for\nWalkies, Inc. To do this, we will be incorporating an embedded map similar to\nthose we see on business websites.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIncorporate an embedded Google map from scratch\u003c/li\u003e\n\u003cli\u003eReinforce our understanding of iframes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIncorporate an Embedded Google Map from Scratch\u003c/h2\u003e\n\n\u003cp\u003eBefore we can get to writing HTML, we need to get a map to embed within an\niframe.\u003c/p\u003e\n\n\u003cp\u003eIn your browser, head to\n\u003ca href=\"https://www.google.com/maps\"\u003ehttps://www.google.com/maps\u003c/a\u003e and search for a\ngeneral location. For instance, a great place to walk dogs in New York City is\n\u003ccode\u003eCentral Park, New York, NY\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow, click the menu icon located at the top left of the screen and select\n\u003cstrong\u003eShare or embed map\u003c/strong\u003e. \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-iframes/share-or-embed-map.png\" alt=\"Share or Embed Map\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThen click the \u003cstrong\u003eEmbed map\u003c/strong\u003e tab.\u003c/p\u003e\n\n\u003cp\u003eGoogle provides the entire iframe tag, but we will add some additional\nattributes manually. Highlight the iframe embed code and copy it to your\nclipboard. In \u003ccode\u003eindex.html\u003c/code\u003e paste the code snippet.\u003c/p\u003e\n\n\u003ch2\u003eReinforce Our Understanding of Iframes\u003c/h2\u003e\n\n\u003cp\u003eWe've already got a basic \u003ccode\u003eiframe\u003c/code\u003e from Google. To pass all the tests, we'll\nneed to add the following attributes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eEdit/Add a \u003ccode\u003ewidth\u003c/code\u003e attribute set to \"100%\"\u003c/li\u003e\n\u003cli\u003eEdit/Add a \u003ccode\u003eheight\u003c/code\u003e attribute set to \"400px\"\u003c/li\u003e\n\u003cli\u003eChange the \u003ccode\u003eframeborder\u003c/code\u003e attribute to \"1\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e to test your work and \u003ccode\u003elearn submit\u003c/code\u003e once you've passed all the\ntests.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eiframe\u003c/code\u003e element allows us to load another HTML page inside our own HTML\npage. It is like looking through a window from \u003cem\u003eour\u003c/em\u003e page into another page\ndisplaying a Google Map.\u003c/p\u003e\n\n\u003cp\u003eWhile many uses of \u003ccode\u003eiframe\u003c/code\u003e tags were replaced with JavaScript, they still\nprove valuable in specific cases.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developers.google.com/maps/documentation/embed/guide\"\u003eGoogle Maps developer documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gb829ea7bf8b9ca32d31662bf641fdd66"},{"id":179491,"title":"HTML5 Media","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"HTML5-Media\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Media/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Media\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Media/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eThe internet is a highly interactive environment. As HTML authors, we might be\ngiven a media file and be told to put it on the internet. How can we display\nmedia inside of a web page \u003cem\u003eand\u003c/em\u003e make sure that it's viewable to the most\npeople possible on the most devices? That will be the focus of this lesson.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the history of media on the web\u003c/li\u003e\n\u003cli\u003eDemonstrate how to embed audio elements in HTML5\u003c/li\u003e\n\u003cli\u003eDemonstrate how to embed video elements in HTML5\u003c/li\u003e\n\u003cli\u003eLink to audio and video converters\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eExplain The History Of Media On The Web\u003c/h2\u003e\n\n\u003cp\u003eIn the early days of HTML, media elements were more difficult to use. They\nwould often require the user to download and install a plugin. Media plugins\nyou might recall were Macromedia Flash, Adobe Shockwave, and Java. This\ncommercial plugin approach brings about a number of problems.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIt is \u003cem\u003eseriously\u003c/em\u003e annoying to have to download all these plugins\u003c/li\u003e\n\u003cli\u003eThe site is unusable while you wait for a plugin to load\u003c/li\u003e\n\u003cli\u003eThe site is unusable without the plugin\u003c/li\u003e\n\u003cli\u003eThe site is unusable for those using assistive devices\u003c/li\u003e\n\u003cli\u003eBad guys could market a viral site which required the installation of a\nplugin. Plugin installation gives access to the operating system where they\ncould install malware\u003c/li\u003e\n\u003cli\u003eIf a company's plugin became dominant, there would be a splitting of the web\ninto a commercial thing versus the non-commercial thing (\"The Internet,\npowered by Adobe Flash\")\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor these reasons and others, the W3C added media support in HTML5.\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate How to Embed Audio Elements in HTML5\u003c/h2\u003e\n\n\u003cp\u003eTo include audio in a website, use the \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e element. Inside the element,\nwe provide \u003ccode\u003e\u0026lt;source\u0026gt;\u003c/code\u003e elements whose \u003ccode\u003esrc\u003c/code\u003e attributes point to a file on the\nserver and whose \u003ccode\u003etype\u003c/code\u003e attributes specify what type of media it is.\u003c/p\u003e\n\n\u003cp\u003eLet's take a deeper look at \u003ccode\u003etype\u003c/code\u003e. The \u003ccode\u003etype\u003c/code\u003e name is the \"MIME standard\" for\nthe filetype. MDN provides a long list of \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\"\u003eMIME types\u003c/a\u003e. A few\nexamples are \u003ccode\u003etext/html\u003c/code\u003e, \u003ccode\u003etext/css\u003c/code\u003e, \u003ccode\u003eimages/jpeg\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou might recall that files fit into two big buckets: binary and text.\nSometimes we need to be more specific within those groups. We want to say this\nis a text file, but also HTML (\u003ccode\u003etext/html\u003c/code\u003e). Or we want to say this is a binary\nfile, but also an MPEG movie (\u003ccode\u003evideo/mpeg\u003c/code\u003e). A MIME type is a way to note, for\nthe computer, \u003cem\u003eexactly\u003c/em\u003e what type of file is present. It will help the\ncomputer find the right player. It's also a bit more precise than a simple file\nextension (\u003ccode\u003e.docx\u003c/code\u003e or \u003ccode\u003e.img\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eTo pull it all together, the \u003ccode\u003etype\u003c/code\u003e attribute should be set to the \"MIME type\"\nfor the media pointed to by the \u003ccode\u003esrc\u003c/code\u003e attribute for each \u003ccode\u003e\u0026lt;source\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\n\u003cp\u003eLet's look at an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;audio controls\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"purrr.mp3\" type=\"audio/mp3\"\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"purrr.ogg\" type=\"audio/ogg\"\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Sorry your browser doesn't support HTML5 Audio! Please \u0026lt;a href=\"http://browsehappy.com/?locale=en\"\u0026gt;upgrade your browser\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/audio\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn the first line we open the \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e tag with the \u003ccode\u003econtrols\u003c/code\u003e attribute\npresent. This is required to display the audio controls to start and pause\nplayback, adjust the recording's volume, etc.  The presence of the \u003ccode\u003econtrols\u003c/code\u003e\nattribute name itself is sufficient, no other properties are needed. There are\noptional attributes you can provide such as \u003ccode\u003eautoplay\u003c/code\u003e and \u003ccode\u003eloop\u003c/code\u003e. These start\nthe audio on page load and repeat the audio after it ends. The\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"\u003edocumentation\u003c/a\u003e lists all available options.\u003c/p\u003e\n\n\u003cp\u003eIn lines two and three, we provide two different source files for playback. If\nthe browser does not recognize the first file type, it will ignore it and move\non to the next. If neither of the formats are supported it will instead display\nthe paragraph on line four. If the browser is able to play one of the source\nfiles it will ignore any other code below until it reaches the closing\n\u003ccode\u003e\u0026lt;/audio\u0026gt;\u003c/code\u003e tag.\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate How To Embed Video Elements in HTML5\u003c/h2\u003e\n\n\u003cp\u003eEmbedding a video is very similar to embedding audio. This can be done by\nincluding the \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e tag. Inside the video tag are source tags that point to\nthe location of various video file formats and specify their MIME types.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;video controls\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"real-estate.mp4\" type=\"video/mp4\"\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"real-estate.ogv\" type=\"video/ogg\"\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Sorry your browser doesn't support HTML5 Video! Please \u0026lt;a href=\"http://browsehappy.com/?locale=en\"\u0026gt;upgrade your browser\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/video\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLike \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e, we will open the \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e tag with the controls attribute.\nFor the full list of accepted attributes, you can check the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\"\u003eMDN documentation\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eOn lines two and three we provide two different source files for playback. If\nthe browser does not recognize the first filetype it will ignore it and move on\nto the next just the same as it does for the audio element. If neither of the\nformats are supported it will display the paragraph instead on line four. If\nthe browser is able to play one of the source files, it will. The others\nsources within the \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e tag will be ignored.\u003c/p\u003e\n\n\u003ch2\u003eLink to Audio and Video Converters\u003c/h2\u003e\n\n\u003cp\u003eThere are a number of free tools that will convert audio files when needed.\n\u003ca href=\"http://www.mediahuman.com/audio-converter/\"\u003eMediaHuman - Free Audio Converter\u003c/a\u003e\nand \u003ca href=\"https://sourceforge.net/projects/audacity/\"\u003eAudacity - Free Audio Editor/Converter\u003c/a\u003e are two we recommend. For a comparison of support levels for various players, see \n\u003ca href=\"https://praegnanz.de/html5video/\"\u003eJavaScript HTML5 Video Player Comparison\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith \u003ccode\u003eaudio\u003c/code\u003e and \u003ccode\u003evideo\u003c/code\u003e tags, the W3C gives us an open way to ensure that\nmedia remain accessible and open to all platforms.\u003c/p\u003e","exportId":"html5-media"},{"id":179492,"title":"HTML5 Embedded Videos Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html5-video-embed-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/html5-video-embed-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html5-video-embed-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html5-video-embed-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\u003cp\u003eAdding images to HTML content is a great way to make websites more appealing and engaging for your users. Sometimes, though, we want \u003cem\u003ejust a little more pizzazz\u003c/em\u003e and we need to add glamorous \u003cstrong\u003evideo content\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eIn the past, adding video to HTML was only possible using the \u003ccode\u003eiframe\u003c/code\u003e tag. This method is still implemented, and sites like \u003ca href=\"youtube.com\"\u003eYoutube\u003c/a\u003e still provide iframe code as a default option. However, with HTML5, a \u003cem\u003enew\u003c/em\u003e tag was introduced: \u003ccode\u003evideo\u003c/code\u003e. The \u003ccode\u003evideo\u003c/code\u003e tag provides a more \u003cem\u003esemantic\u003c/em\u003e method for including video. It also allows for some customization of videos that iframe does not. Namely, with the \u003ccode\u003evideo\u003c/code\u003e tag, we can provide \u003cem\u003emultiple\u003c/em\u003e video source links.\u003c/p\u003e\n\u003cp\u003eIn this lesson, we will be exploring the HTML \u003ccode\u003evideo\u003c/code\u003e tag then applying what we've learned in a brief lab.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIntroduce the HTML \u003ccode\u003evideo\u003c/code\u003e tag and its attributes\u003c/li\u003e\n\u003cli\u003ePractice using the \u003ccode\u003evideo\u003c/code\u003e tag by creating our own\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroducing Embedded Videos\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003evideo\u003c/code\u003e tag, similar to \u003ccode\u003eimg\u003c/code\u003e, can display videos from files stored locally (i.e. saved on your computer or in the same directory as your \u003ccode\u003ehtml\u003c/code\u003e file) or videos from somewhere else on the internet.\u003c/p\u003e\n\u003cp\u003eIn a basic implementation, like \u003ccode\u003eimg\u003c/code\u003e tags, \u003ccode\u003evideo\u003c/code\u003e tags contain a \u003ccode\u003esrc\u003c/code\u003e attribute pointing to the file we want to play:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;video src=\"videofile.ogg\" autoplay poster=\"posterimage.jpg\"\u0026gt;\u0026lt;/video\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile you will certainly see this style on the internet, we recommend the following approach because it ensures the greatest amount of compatibility.\u003c/p\u003e\n\u003cp\u003eWe can \u003cem\u003ewrap\u003c/em\u003e the \u003ccode\u003evideo\u003c/code\u003e tag around multiple, separate \u003ccode\u003esource\u003c/code\u003e tags. A basic \u003ccode\u003evideo\u003c/code\u003e element, complete with multiple video sources may look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;video\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"https://s3.amazonaws.com/ironboard-learn/cat_video.mp4\" type=\"video/mp4\"\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"https://s3.amazonaws.com/ironboard-learn/cat_video.ogg\" type=\"video/ogg\"\u0026gt;\u003cbr\u003e\u0026lt;/video\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhy two sources? Compatibility! When HTML is rendered, the browser will try to load the first source. If it fails, it will \u003cem\u003efall back\u003c/em\u003e to the second source.\u003c/p\u003e\n\u003cp\u003eAll modern browsers support MP4 files. If we had the above video on a website, its likely that more than 99% of visitors will see the MP4 version. However, if a site visitor is still using an older version of a browser like Firefox, the MP4 file will fail to load. At this point, the OGG file will load instead. It is still useful to have an alternate video format for this reason.\u003c/p\u003e\n\u003cp\u003eIn addition to multiple sources, we can provide a fall back message. This message will appear to users in the event that they are using a browser that is \u003cem\u003eso\u003c/em\u003e out of date, it doesn't support HTML5. For this, we add something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;video\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"https://s3.amazonaws.com/ironboard-learn/cat_video.mp4\" type=\"video/mp4\"\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"https://s3.amazonaws.com/ironboard-learn/cat_video.ogg\" type=\"video/ogg\"\u0026gt;\u003cbr\u003e  Your browser does not support HTML5 video  \u0026lt;a href=\"https://browsehappy.com/\" target=\"_blank\"\u0026gt;Please upgrade your browser\u0026lt;/a\u0026gt;\u003cbr\u003e\u0026lt;/video\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf a user was still hanging on to Internet Explorer 8 (they are out there), they won't see the video content. Instead, they will see the message \"Your browser does not support HTML5 video\", followed by a link to \u003ca href=\"browsehappy.com\"\u003ebrowsehappy.com\u003c/a\u003e, where they can download an up-to-date browser.\u003c/p\u003e\n\u003ch4\u003eVideo Tag Attributes\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003evideo\u003c/code\u003e tag has some important attributes worth noting:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003econtrols\u003c/code\u003e - the embedded video will always show video controls\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eautoplay\u003c/code\u003e - the video will play on page load, rather than waiting for a user to click play\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e attributes are also important. These set the size of the video, just as with other HTML tags. However, it is good practice to set these to specific values. Without them, the video element may flicker while the page is loading.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003esource\u003c/code\u003e tag is only ever used for multiple media resources, as we have in our example. The \u003ccode\u003esrc\u003c/code\u003e attribute of \u003ccode\u003esource\u003c/code\u003e is always required, as it is the path to the file we want to play. The \u003ccode\u003etype\u003c/code\u003e tag is helpful in defining what format the media is in.\u003c/p\u003e\n\u003ch2\u003eBuilding a Video Element\u003c/h2\u003e\n\u003cp\u003eIts time to apply what we've just learned! In \u003ccode\u003eindex.html\u003c/code\u003e, some basic code is provided. Your task is to create a video element complete with \u003cem\u003etwo\u003c/em\u003e video sources and the attributes we've discussed. For this portion of the lesson, we will be using a video stored elsewhere on the internet...a \u003cem\u003edramatic\u003c/em\u003e real estate video! There are two video formats, MP4 and OGG:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCaution: The music in these videos may be loud\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMP4 video: \u003ca href=\"https://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/real-estate-lab-assets/real-estate.mp4\"\u003ehttps://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/real-estate-lab-assets/real-estate.mp4\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eOGG video: \u003ca href=\"https://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/real-estate-lab-assets/real-estate.ogg\"\u003ehttps://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/real-estate-lab-assets/real-estate.ogg\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo complete this lab:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate a \u003ccode\u003evideo\u003c/code\u003e tag with the attributes \u003ccode\u003econtrols\u003c/code\u003e and \u003ccode\u003eautoplay\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eSet the width of \u003ccode\u003evideo\u003c/code\u003e to '600px', and the height to '400px'\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003esource\u003c/code\u003e tag for the MP4 video URL above that has appropriate \u003ccode\u003esrc\u003c/code\u003e and \u003ccode\u003etype\u003c/code\u003e attributes\u003c/li\u003e\n\u003cli\u003eCreate a fall back \u003ccode\u003esource\u003c/code\u003e tag for the OGG video URL above that has appropriate \u003ccode\u003esrc\u003c/code\u003e and \u003ccode\u003etype\u003c/code\u003e attributes\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e and follow the test messages as you go. You can also run \u003ccode\u003ehttpserver\u003c/code\u003e or open \u003ccode\u003eindex.html\u003c/code\u003e in a browser tab to see your work as you build it. Run \u003ccode\u003elearn submit\u003c/code\u003e once you've passed all the tests.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWith the \u003ccode\u003evideo\u003c/code\u003e tag, we can spice up our plain old text websites, whether it is a demo reel for a company product or a personal vlog.\u003c/p\u003e\n\u003cp\u003eWe can customize the size of the video on our page and make sure our video is viewable by every site visitor. This way, we're not just catering to those with the most up-to-date browsers.\u003c/p\u003e\n\u003cp\u003eIn addition to \u003ccode\u003evideo\u003c/code\u003e, there is also an \u003ccode\u003eaudio\u003c/code\u003e tag that plays MP3, OGG, and WAV files. The \u003ccode\u003eaudio\u003c/code\u003e tag works the same way as \u003ccode\u003evideo\u003c/code\u003e! It has the same \u003ccode\u003econtrols\u003c/code\u003e and \u003ccode\u003eautoplay\u003c/code\u003e attributes, and also uses the nested \u003ccode\u003esource\u003c/code\u003e tag! You've actually learned two useful HTML5 elements in one!\u003c/p\u003e","exportId":"g2feb1a4d6a50abbe11aa694944dd7ce5"},{"id":179493,"title":"HTML5 Semantic Elements","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"HTML5-Semantic-Elements\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Semantic-Elements/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Semantic-Elements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Semantic-Elements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\u003cp\u003eWe have \u003ccode\u003ediv\u003c/code\u003e elements to organize and label sections of HTML. But too many \u003ccode\u003ediv\u003c/code\u003e tags makes our HTML document look cluttered and confusing. Even when we identify or classify them with specific names, it's a lot to keep track of. It would be clearer for both developers and browsers if we could use more descriptive HTML elements to arrange our content. That's where semantic elements come in. They allow us to say, \"this isn't \u003cem\u003ejust\u003c/em\u003e a division of text, it's a \u003cem\u003eheader\u003c/em\u003e.\" We'll learn more about these \u003cem\u003esemantic\u003c/em\u003e elements in this lesson.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eExplain the historical reasoning behind semantic elements\u003c/li\u003e\n\u003cli\u003eDemonstrate HTML5 semantic element use\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eExplain the Historical Reasoning Behind Semantic Elements\u003c/h2\u003e\n\u003cp\u003eWhen developers first began defining containers to structure HTML, they had only one generic element available to them: the \u003ccode\u003ediv\u003c/code\u003e. Creating complex page layouts then required dozens of \u003ccode\u003ediv\u003c/code\u003e elements that were often difficult to organize or locate within the code. HTML authors needed a way to distinguish one \u003ccode\u003ediv\u003c/code\u003e from another, which led to \u003ccode\u003eid\u003c/code\u003e and \u003ccode\u003eclass\u003c/code\u003e attributes on elements being misused in an attempt to communicate what the \u003ccode\u003ediv\u003c/code\u003e was doing. For example, a document usually has only one header, so it seemed sensible to write \u003ccode\u003ediv id=\"header\"\u003c/code\u003e as a way to say something stronger than, \"this is a text division.\" Developers wanted to say, \"this is a special division of introduction,\" but lacked the specific language to express it. They wanted those sections to have a \u003cem\u003esemantic meaning\u003c/em\u003e (more on that later). But the HTML language simply didn't have the ability to meet this need.\u003c/p\u003e\n\u003cp\u003eNevertheless, many HTML authors thought that this was a good idea and an informal standard sprang up around adding \u003ccode\u003eid\u003c/code\u003e attributes on elements to express their \"semantic meaning.\"\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"header\"\u0026gt;\u003cbr\u003e  \u0026lt;div class=\"wrapper\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen the W3C (the organization that oversees the specifications for HTML and CSS) started writing the specification for HTML5 they wanted to create new elements that would eliminate the need to label so many \u003ccode\u003ediv\u003c/code\u003e elements. The goals were to make the code more readable for developers and more descriptive for browsers. It turned out that many developers were already using the same names to label their elements, such as \u003ccode\u003eid=\"header\"\u003c/code\u003e, \u003ccode\u003eid=\"footer\"\u003c/code\u003e, \u003ccode\u003eid=\"nav\"\u003c/code\u003e, \u003ccode\u003eclass=\"article\"\u003c/code\u003e, etc. So HTML5 provided semantic elements that explicitly described those functions for developers to use instead.\u003c/p\u003e\n\u003cp\u003eWe once used to have to identify a \u003ccode\u003ediv\u003c/code\u003e as our header section.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"header\"\u0026gt;...\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we use the \u003ccode\u003eheader\u003c/code\u003e element.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;header\u0026gt;\u0026lt;/header\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhy do we call these \u003cem\u003esemantic\u003c/em\u003e elements? Semantic elements are elements that we use when the content within the element all has the same related \u003cem\u003emeaning\u003c/em\u003e. In our \u003ccode\u003eheader\u003c/code\u003e example above, all the content we would put within the \u003ccode\u003eheader\u003c/code\u003e element would relate to introductory content, such as titles or navigation.\u003c/p\u003e\n\u003ch2\u003eDemonstrate HTML5 Semantic Element Use\u003c/h2\u003e\n\u003cp\u003eLet's take a layout that uses \u003ccode\u003ediv\u003c/code\u003e elements and convert it to use semantic elements instead. This is the markup we begin with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"wrapper\"\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"header\"\u0026gt;\u003cbr\u003e     \u0026lt;div id=\"nav\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"main\"\u0026gt;\u003cbr\u003e    \u0026lt;div id=\"music\"\u0026gt;\u003cbr\u003e      \u0026lt;div id=\"rock\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;div id=\"jazz\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"aside\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"footer\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we'll replace each instance of a \u003ccode\u003ediv\u003c/code\u003e with a semantic element that matches the type of content we want it to contain.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"wrapper\"\u0026gt;\u003cbr\u003e  \u0026lt;header\u0026gt;\u003cbr\u003e     \u0026lt;nav\u0026gt;...\u0026lt;/nav\u0026gt;\u003cbr\u003e  \u0026lt;/header\u0026gt;\u003cbr\u003e  \u0026lt;main\u0026gt;\u003cbr\u003e    \u0026lt;section id=\"music\"\u0026gt;\u003cbr\u003e      \u0026lt;article id=\"rock\"\u0026gt;...\u0026lt;/article\u0026gt;\u003cbr\u003e      \u0026lt;article id=\"jazz\"\u0026gt;...\u0026lt;/article\u0026gt;\u003cbr\u003e    \u0026lt;/section\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e  \u0026lt;aside\u0026gt;...\u0026lt;/aside\u0026gt;\u003cbr\u003e  \u0026lt;footer\u0026gt;...\u0026lt;/footer\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that in cases where the content within the element is not semantically related or we have the need to create a generic box such as the \u003ccode\u003ewrapper\u003c/code\u003e, we can still use \u003ccode\u003ediv\u003c/code\u003e elements as we please. As a developer, keep in mind that while these elements are intended for certain content, there are no hard rules about how to configure them. You should feel comfortable configuring them in any way that makes the most sense to you and best suits your layout needs.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIf the content within an element is all semantically related, it is best practice to use the appropriate HTML5 semantic element if one applies. This cleans up our code and makes it more readable for developers and more descriptive to browsers. There are a variety of semantic elements you can use to structure your content, and you can also still use \u003ccode\u003ediv\u003c/code\u003e elements to create generic boxes or grouping elements as needed.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/1tl0aB0EUOhLMi1Xr19UCAUTCY20FRqEDv-oDGg2cTkg/edit?usp=sharing\"\u003ePresentation Slides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/embed/V28xLFEYaSQ\"\u003eHTML5 Semantic Elements Lecture Video\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://diveintohtml5.info/semantics.html#new-elements\"\u003eDive into HTML5 - Semantic Elements\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003eMDN - HTML - Element Reference\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"html5-semantic-elements"},{"id":179494,"title":"HTML5 Containers Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html5-semantic-containers-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/html5-semantic-containers-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html5-semantic-containers-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html5-semantic-containers-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\u003cp\u003eIn HTML5, there are many new tags that help us describe \u003cem\u003ewhat kind of content\u003c/em\u003e exists within a specific tag. These are referred to as \u003cem\u003esemantic\u003c/em\u003e elements. In this lesson, we will be introducing some of the most useful tags.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIntroduce common semantic tags in HTML\u003c/li\u003e\n\u003cli\u003eExplore their use by applying them to existing content\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eNon-Semantic Elements\u003c/h2\u003e\n\u003cp\u003eBefore we dive into semantic elements, lets see some examples of \u003cem\u003enon-semantic\u003c/em\u003e elements. Two of the most commonly used HTML tags are \u003ccode\u003espan\u003c/code\u003e and \u003ccode\u003ediv\u003c/code\u003e. Neither tag has automatic styling. The only difference between them: content wrapped with the \u003ccode\u003espan\u003c/code\u003e tag will display without line breaks, whereas content wrapped with \u003ccode\u003ediv\u003c/code\u003e \u003cem\u003ewill\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;span\u0026gt;This content will share the same line...\u0026lt;/span\u0026gt;\u0026lt;span\u0026gt;...as this content\u0026lt;/span\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  This message will appear on a new line\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese tags certainly have their uses, and developers can sometimes favor them \u003cem\u003ebecause\u003c/em\u003e of the lack of styling. However, they don't give any indication as to what type of content they're wrapping. They are just \u003cem\u003edividers\u003c/em\u003e of the content.\u003c/p\u003e\n\u003ch2\u003eSemantic Elements\u003c/h2\u003e\n\u003cp\u003eMany semantic elements also lack automatic styling, and act very similar to the \u003ccode\u003ediv\u003c/code\u003e tag. What they provide, instead, is an explanation of what they wrap.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;header\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;footer\u0026gt;\u003c/code\u003e Tags\u003c/h4\u003e\n\u003cp\u003eThe first two semantic tags to discuss are the \u003ccode\u003eheader\u003c/code\u003e and \u003ccode\u003efooter\u003c/code\u003e tags. The purpose of these may seem obvious to those who have used document editors like Microsoft Word. The \u003ccode\u003eheader\u003c/code\u003e tag is used to wrap all content we would want to contain within the top, (header), portion of a page. The \u003ccode\u003efooter\u003c/code\u003e is for everything at the foot, (bottom), of a page:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;header\u0026gt;\u003cbr\u003e  \u0026lt;!-- Headers often contain company logos --\u0026gt;\u003cbr\u003e\u0026lt;/header\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!-- All the main content of a web page goes in between --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;footer\u0026gt;\u003cbr\u003e  \u0026lt;!-- Footers often contain resources, privacy policy links, and copyright information --\u0026gt;\u003cbr\u003e\u0026lt;/footer\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCommonly, a website with many different pages will have the same header and footer content on each page...the only content that changes is what is in between.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;nav\u0026gt;\u003c/code\u003e Tags\u003c/h4\u003e\n\u003cp\u003eTypically, inside or just below the header section of a page are navigation links to help users access different parts of a website. For this block of links, we can use the \u003ccode\u003enav\u003c/code\u003e tag. Wrapping \u003ccode\u003enav\u003c/code\u003e around links helps describe those links as the page navigation itself:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;nav\u0026gt;\u003cbr\u003e  \u0026lt;a href=\"about.html\"\u0026gt;About\u0026lt;/a\u0026gt;\u003cbr\u003e  \u0026lt;a href=\"contact.html\"\u0026gt;Contact\u0026lt;/a\u0026gt;\u003cbr\u003e\u0026lt;/nav\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA reader glancing over an HTML page can quickly see what these links are meant for. The \u003ccode\u003enav\u003c/code\u003e tag is not meant for all links, just those typically used for site navigation.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e Tag\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003emain\u003c/code\u003e tag specifies the \u003cem\u003emain\u003c/em\u003e content of a web page. This would typically be everything in between the \u003ccode\u003eheader\u003c/code\u003e and \u003ccode\u003efooter\u003c/code\u003e areas, and may contain many nested tags:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;header\u0026gt;\u0026lt;/header\u0026gt;\u003cbr\u003e\u0026lt;nav\u0026gt;\u0026lt;/nav\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;main\u0026gt;\u003cbr\u003e  \u0026lt;!-- All the main content of a web page goes here --\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith these few tags, common content within a web page can be separated in a way that is easy to understand.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;section\u0026gt;\u003c/code\u003e Tag\u003c/h4\u003e\n\u003cp\u003eWithin the \u003ccode\u003emain\u003c/code\u003e tag, we can continue to breakdown content into specific, meaningful sections. One way we can do this is to use the...well...\u003ccode\u003esection\u003c/code\u003e tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;section\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet...\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet...\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/section\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003esection\u003c/code\u003e tag can be used to define specific portions of a web page. A page may have multiple boxes of content within a larger container like \u003ccode\u003emain\u003c/code\u003e. For each box, we can use a \u003ccode\u003esection\u003c/code\u003e tag to separate the content.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;article\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;aside\u0026gt;\u003c/code\u003e Tags\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003esection\u003c/code\u003e tag is more informative than the \u003ccode\u003ediv\u003c/code\u003e tag, but it still may not be as specific as we need. For particular parts of a web page, we have semantic options like \u003ccode\u003earticle\u003c/code\u003e and \u003ccode\u003easide\u003c/code\u003e. The \u003ccode\u003earticle\u003c/code\u003e tag is for containing written content such as a news story or blog post. The \u003ccode\u003easide\u003c/code\u003e tag is for containing content that may be related to other content, but is better kept separated.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;article\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;First Human Digitizes Brain\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;In 2018, Chrome Boi became the first human to digitize their brain. They now live in the Internet.\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/article\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;aside\u0026gt;\u003cbr\u003e  \u0026lt;h4\u0026gt;Once human, now digital\u0026lt;/h4\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;A quick visit to https://en.wikipedia.org/wiki/Draft:Chrome_Boi will show you the ascended individual\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/aside\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;figcaption\u0026gt;\u003c/code\u003e Tags\u003c/h4\u003e\n\u003cp\u003eAlong with \u003ccode\u003esection\u003c/code\u003e, \u003ccode\u003earticle\u003c/code\u003e, and \u003ccode\u003easide\u003c/code\u003e, we also have some tags specific for containing image and media content. The \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e tag wraps self-contained media content. For instance, a blog post could have an accompanying image to support the content.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003efigure\u003c/code\u003e tag also comes with a companion for providing captions, the \u003ccode\u003efigcaption\u003c/code\u003e tag. Since \u003ccode\u003efigure\u003c/code\u003e is used for media, the \u003ccode\u003efigcaption\u003c/code\u003e tag can be used to add an additional message about that media or its source.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;section\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;article\u0026gt;\u003cbr\u003e    Lorem ipsum dolor sit amet...\u003cbr\u003e  \u0026lt;/article\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;figure\u0026gt;\u003cbr\u003e    \u0026lt;img src=\"images/intro-pic.jpg\"  alt=\"An exceptional living room.\" title=\"Welcome to Exceptional Living Rooms\"\u0026gt;\u003cbr\u003e    \u0026lt;figcaption\u0026gt;\"An Exceptional Living Room\" by Leonardo DaVinci, photograph\u0026lt;/figcaption\u0026gt;\u003cbr\u003e  \u0026lt;/figure\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/section\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've wrapped an image in the \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e tag, and included a \u003ccode\u003e\u0026lt;figcaption\u0026gt;\u003c/code\u003e providing the title and creator of the image.\u003c/p\u003e\n\u003ch2\u003ePractice with Semantic Elements\u003c/h2\u003e\n\u003cp\u003eLet's practice what we've discussed. In \u003ccode\u003eindex.html\u003c/code\u003e, we have a web page with some example content for a real estate agency. However, most of the HTML tags within the \u003ccode\u003ebody\u003c/code\u003e are non-semantic \u003ccode\u003ediv\u003c/code\u003e and \u003ccode\u003espan\u003c/code\u003e tags.\u003c/p\u003e\n\u003cp\u003eYour task is to read through the provided comments and add in the appropriate semantic tags. Run \u003ccode\u003elearn\u003c/code\u003e to test your work and use the provided error messaging to work through the tests. When finished, run \u003ccode\u003elearn submit\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e there are a \u003cem\u003efew\u003c/em\u003e semantic tags in \u003ccode\u003eindex.html\u003c/code\u003e not explicitly discussed in this readme. Use the comments to figure out what tag you will have to use.\u003c/p\u003e\n\u003cp\u003eMake sure that for every \u003ccode\u003ediv\u003c/code\u003e and \u003ccode\u003espan\u003c/code\u003e you replace, that you also replace the corresponding \u003cem\u003eclosing\u003c/em\u003e tag!\u003c/p\u003e\n\u003cp\u003eYou can view \u003ccode\u003eindex.html\u003c/code\u003e in the browser by running \u003ccode\u003ehttpserver\u003c/code\u003e or opening the file in a separate browser tab. It is worth noting, though, that the layout of the page won't change as you add semantic tags. We are not changing the styling or structure, but the description of the content contained on the page.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eUsing semantic tags serves multiple functions. They provide a greater \u003cem\u003ereadability\u003c/em\u003e for yourself or anyone else who may edit an HTML document in the future. They also make it easier to \u003cem\u003estyle\u003c/em\u003e your pages. As a bonus, they help search engines identify and categorize content on websites.\u003c/p\u003e\n\u003cp\u003eWhen using Cascading Style Sheets, we can easily set up styling for \u003cem\u003ejust\u003c/em\u003e the specific semantic elements. These tags are more natural to write and faster to understand than \u003ccode\u003ediv\u003c/code\u003e and \u003ccode\u003espan\u003c/code\u003e tags.\u003c/p\u003e\n\u003cp\u003eThere are more semantic tags to explore, some of which you've already used! Tags such as \u003ccode\u003eform\u003c/code\u003e and \u003ccode\u003etable\u003c/code\u003e are semantic as well, as they describe the contents within.\u003c/p\u003e","exportId":"g237dfd9e54e6efc54e117cbe1a496442"}]}],"pages":[{"exportId":"html-forms","title":"HTML Forms","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewds-html-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewds-html-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewds-html-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\u003cp\u003eUp to this point, all of the HTML elements we've seen are used to display data \u003cem\u003eto\u003c/em\u003e users. This is great, but what happens when we want to get information \u003cem\u003efrom\u003c/em\u003e our users? In order to get user information we need to write HTML forms. We will learn to write them in this lesson.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eState the purpose of a form\u003c/li\u003e\n\u003cli\u003eWrite an HTML \u003ccode\u003eform\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eDefine the \u003ccode\u003eGET\u003c/code\u003e vs \u003ccode\u003ePOST\u003c/code\u003e HTTP methods\u003c/li\u003e\n\u003cli\u003eWrite HTML \u003ccode\u003eform\u003c/code\u003e data elements\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eState The Purpose Of a Form\u003c/h2\u003e\n\u003cp\u003eForms gather user information. They're just like surveys you might fill out at a supermarket or a questionnaire you'd fill out at the doctor's office.\u003c/p\u003e\n\u003cp\u003eLet's suppose that you're the owner of a dog walking business that needs a way to gather information from clients. You would use an HTML form to collect information like:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eowner's name\u003c/li\u003e\n\u003cli\u003eowner's address\u003c/li\u003e\n\u003cli\u003edog's name\u003c/li\u003e\n\u003cli\u003edog's age\u003c/li\u003e\n\u003cli\u003ewalking frequency\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou collect this information in HTML tags called \u003ccode\u003einput\u003c/code\u003es located within the \u003ccode\u003eform\u003c/code\u003e tag. You will also code a \"Submit\" button so the client can say \"OK! I'm done!\" We'll discuss \u003ccode\u003einput\u003c/code\u003es in more detail below.\u003c/p\u003e\n\u003cp\u003eWhen the owner fills out the form's inputs and clicks \"Submit,\" a record of their responses will be sent to a server where the information can be stored. Once the server has the information stored, software can be written to use the server's information to create newsletters, login accounts, or invitations to client-appreciation parties.\u003c/p\u003e\n\u003cp\u003eTo store the information, we need a language like Ruby, PHP, or Java. We won't be covering storage and usage in this lesson. Writing code to handle things like that is \"\u003cem\u003eback-end engineering\u003c/em\u003e.\" Luckily, all those languages are designed to receive the information sent by an HTML \u003ccode\u003eform\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLet's write an HTML form. We'll use the \u003ccode\u003eform\u003c/code\u003e tag.\u003c/p\u003e\n\u003ch2\u003eWrite An HTML Form Tag\u003c/h2\u003e\n\u003cp\u003eThe starting element in an HTML form is the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e tag. The \u003ccode\u003eform\u003c/code\u003e element wraps all the \u003ccode\u003einput\u003c/code\u003e elements that will collect our users' information inside of them. We will cover \u003ccode\u003einput\u003c/code\u003e elements in great detail after finishing discussing the attributes within a \u003ccode\u003eform\u003c/code\u003e tag.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eform\u003c/code\u003e tag's first attribute, \u003ccode\u003eaction\u003c/code\u003e, decides where the user information is sent. This is typically the URL of a server. This server will run the Ruby, PHP, or Java (or other!) code required to store the information the \u003ccode\u003eform\u003c/code\u003e sends.\u003c/p\u003e\n\u003cp\u003eThe second attribute, \u003ccode\u003emethod\u003c/code\u003e, sets the \u003cem\u003eHTTP method\u003c/em\u003e the browser will use to send the user information to the server. You can think of \"\u003cem\u003eHTTP method\u003c/em\u003e\" as being like an envelope type. Some envelopes are good for documents, others are good for confidential letters, and yet others are good for overseas mail. The \u003cem\u003eHTTP methods\u003c/em\u003e used in forms are \u003ccode\u003eGET\u003c/code\u003e and \u003ccode\u003ePOST\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhile you won't write the \"back-end\" code here, we'll describe what you see as a user when an HTML author chooses \u003ccode\u003eGET\u003c/code\u003e versus \u003ccode\u003ePOST\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eDefine The \u003ccode\u003eGET\u003c/code\u003e vs. \u003ccode\u003ePOST\u003c/code\u003e HTTP Methods\u003c/h2\u003e\n\u003ch3\u003eGET\u003c/h3\u003e\n\u003cp\u003eBelow we see the \u003ccode\u003eform\u003c/code\u003e example code for making a \u003ccode\u003eGET\u003c/code\u003e request.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eaction\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ehttp://example.com/process-user.php\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003emethod\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eGET\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eowner-name\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edog-name\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003efavorite-toy\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eWhen the user clicks the submit button, their responses in the \u003ccode\u003einput\u003c/code\u003e fields are captured and labeled using the \u003ccode\u003ename\u003c/code\u003e attributes from each element. The browser stores this information behind the scenes like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eowner-name=Bob+Barkley\u0026amp;dog-name=SirBarksALot\u0026amp;favorite-toy=ball\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis is known as the \u003cem\u003eQuery String\u003c/em\u003e. The browser \u003cem\u003ethen\u003c/em\u003e attaches the \u003cem\u003eQuery String\u003c/em\u003e onto the location listed in the \u003ccode\u003eform\u003c/code\u003e's \u003ccode\u003eaction\u003c/code\u003e attribute after a \u003ccode\u003e?\u003c/code\u003e to create a URL that looks like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ehttp://example.com/process-user.php?owner-name=Bob+Barkley\u0026amp;dog-name=SirBarksALot\u0026amp;favorite-toy=ball\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe browser then goes to this new URL. The server then uses \u003cem\u003eback-end programming\u003c/em\u003e to use the information in the \u003cem\u003eQuery String\u003c/em\u003e to change what it will show.\u003c/p\u003e\n\u003cp\u003eWhen a \u003cem\u003eQuery String\u003c/em\u003e is added to a URL, it's a \u003cstrong\u003egreat\u003c/strong\u003e solution for filtering the information that comes back. Forms are a nice way for users to add those filters without typing them in by hand. You've probably seen this on the internet.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/html-forms/amazon_get_request.png\" alt=\"Amazon Using a Form with GET\"\u003e\u003c/p\u003e\n\u003cp\u003eHere, Amazon uses a \u003ccode\u003eform\u003c/code\u003e tag with \u003ccode\u003emethod\u003c/code\u003e of \u003ccode\u003eGET\u003c/code\u003e to filter their \u003cem\u003ehuge\u003c/em\u003e store. They filter based on matches of the \u003ccode\u003e\u0026lt;input type=\"text\" name=\"field-keywords\"\u0026gt;\u003c/code\u003e. We typed in \"dog toys\" into that text field input.\u003c/p\u003e\n\u003cp\u003eWhile this is a great method for things like search, this is bad for passwords, obviously! A \u003cem\u003eQuery String\u003c/em\u003e with \u003ccode\u003epassword=ByronBestPoodle\u003c/code\u003e will stand out! When you need to send your response in a way that doesn't leak information, you want your form to use the \u003ccode\u003ePOST\u003c/code\u003e \u003cem\u003eHTTP method\u003c/em\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eADVANCED\u003c/strong\u003e: An advanced concept is that a \u003ccode\u003eGET\u003c/code\u003e request is \"idempotent.\" That means the browser can run it repeatedly without changing information on the back-end. We can ask for a filtered list of dog toys again and again and again by hitting Refresh again and again and again. Nothing changes on the server if we do that.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3\u003ePOST\u003c/h3\u003e\n\u003cp\u003eBelow we see the same form example code for making a POST request.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eaction\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ehttp://example.com/process-user.php\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003emethod\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ePOST\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eowner-name\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edog-name\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003efavorite-toy\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eIt's the same form you would write for a \u003ccode\u003eGET\u003c/code\u003e-method \u003ccode\u003eform\u003c/code\u003e, but with the \u003ccode\u003emethod\u003c/code\u003e attribute changed.\u003c/p\u003e\n\u003cp\u003eWhen the user clicks the submit button, their responses in the \u003ccode\u003einput\u003c/code\u003e fields are captured and labeled using the \u003ccode\u003ename\u003c/code\u003e attributes from each element. The browser stores this information like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eowner-name=Bob+Barkley\u0026amp;dog-name=SirBarksALot\u0026amp;favorite-toy=ball\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003ePOST\u003c/code\u003e is like a secure envelope. We can't see the information being sent. That's why \u003ccode\u003ePOST\u003c/code\u003e is the right call when sending sensitive information like passwords or national IDs. The user's browser \u003cstrong\u003eis not redirected\u003c/strong\u003e in this case. We can't show you a screenshot of what this looks like because, well, there's nothing to show. Usually after a successful POST, the web site will send you to a page that says \"Thanks for your purchase\" or \"Thanks for joining our site.\"\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eADVANCED\u003c/strong\u003e: An advanced concept is that a \u003ccode\u003ePOST\u003c/code\u003e request is \u003cstrong\u003enot\u003c/strong\u003e \"idempotent.\" If the browser runs it repeatedly, it \u003cstrong\u003ewill\u003c/strong\u003e change data on the back end. Submitting payment for a credit card is \u003cstrong\u003enot\u003c/strong\u003e idempotent. Each refresh will take money out of your bank account! That's why many finance sites say \"Don't refresh this page while we process your request.\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eNow that we know how to write a \u003ccode\u003eform\u003c/code\u003e tag and we understand the HTTP action that goes in its \u003ccode\u003eaction\u003c/code\u003e attribute, let's talk about different ways we can ask for information within our \u003ccode\u003eform\u003c/code\u003e by choosing the right \u003ccode\u003einput\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eWrite HTML Form Data Elements\u003c/h2\u003e\n\u003cp\u003eWhat \u003cem\u003eis\u003c/em\u003e an \u003ccode\u003einput\u003c/code\u003e?\u003c/p\u003e\n\u003cp\u003eThink about a doctor's questionnaire: sometimes they ask you to fill-in-the-blank, sometimes they ask you to mark checkboxes next to symptoms, and other times they ask you to write a short answer. They ask all these different \u003cem\u003etypes\u003c/em\u003e of questions within the same questionnaire or \u003cem\u003eform\u003c/em\u003e. All of those types of questionnaire prompts have a cousin in an HTML \u003ccode\u003einput\u003c/code\u003e. A fill-in-the-blank is an \u003ccode\u003e\u0026lt;input type=\"text\"\u0026gt;\u003c/code\u003e. A short essay's twin is \u003ccode\u003e\u0026lt;input type=\"textarea\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe rest of this lesson will be spent introducing you to the \u003ccode\u003einput\u003c/code\u003e elements.\u003c/p\u003e\n\u003ch3\u003eText Field Input\u003c/h3\u003e\n\u003cp\u003eCreating an \u003ccode\u003einput\u003c/code\u003e tag with \u003ccode\u003etype=\"text\"\u003c/code\u003e gives our users a place to type in a single line of text. It looks like this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;input type=\"text\" name=\"owner-name\" placeholder=\"Full Name\"\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eplaceholder\u003c/code\u003e attribute puts some dummy text into the element. That text will be replaced when the user starts filling it in. The \u003ccode\u003ename\u003c/code\u003e attribute gives our input a name.\u003c/p\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/textfield_input.png\" alt=\"Image of textfield input\"\u003e\u003c/p\u003e\n\u003cp\u003eGenerally, HTML form attributes should not contain spaces. Common exceptions to this rule are \u003ccode\u003eplaceholder\u003c/code\u003e and \u003ccode\u003eclass\u003c/code\u003e. If you're not sure whether or not your attribute can contain a space, check out \u003ca href=\"https://www.htmlgoodies.com/primers/html/article.php/3881421\"\u003ethis article\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eA Note on Labels\u003c/h3\u003e\n\u003cp\u003eYou might have noticed we sneaked an extra tag in, the \u003ccode\u003elabel\u003c/code\u003e tag. When writing forms, we don't want to describe what goes in the form by using \u003ccode\u003ep\u003c/code\u003e tags. We can more meaningfully \"tie\" descriptive text (that is, a label) to an input field using the \u003ccode\u003elabel\u003c/code\u003e tag. The \u003ccode\u003eid\u003c/code\u003e attribute of the \u003ccode\u003einput\u003c/code\u003e is provided to the \u003ccode\u003elabel\u003c/code\u003e's \u003ccode\u003efor\u003c/code\u003e attribute and the browser knows to put them close to each other.\u003c/p\u003e\n\u003cp\u003eLabels are not strictly necessary on HTML forms. \u003cstrong\u003eBut\u003c/strong\u003e they make our site better for those using assistive devices. It's the Right Thing to Do.\u003c/p\u003e\n\u003cp\u003eWhy do we put \u003cem\u003eboth\u003c/em\u003e labels \u003cem\u003eand\u003c/em\u003e placeholders? First, not all browsers and assistive devices support placeholder attributes. Labels help assistive devices help users who need them more easily enter data. Again, it's part of our desire to create an inclusive and accessible web.\u003c/p\u003e\n\u003ch3\u003ePassword Inputs\u003c/h3\u003e\n\u003cp\u003eCreating an \u003ccode\u003einput\u003c/code\u003e tag with \u003ccode\u003etype=\"password\"\u003c/code\u003e gives our users a place to type information that will \u003cem\u003enot\u003c/em\u003e be displayed by the browser. Most of the time browsers put \u003ccode\u003e*\u003c/code\u003e or dots instead of the character. This is useful when private information is entered, so your password isn't displayed for others to see.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003efor\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003epassword\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eWhat's the password?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003epassword\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003epassword\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003epassword\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eplaceholder\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eEnter your password here\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/password_input.png\" alt=\"Image of password input\"\u003e\u003c/p\u003e\n\u003ch3\u003eTelephone Inputs\u003c/h3\u003e\n\u003cp\u003eCreating an \u003ccode\u003einput\u003c/code\u003e tag with \u003ccode\u003etype=\"tel\"\u003c/code\u003e behaves like a text field, but will bring up the numeric keypad on supported mobile devices.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003efor\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etel\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eWhere should E.T. \u0026amp;trade; Phone Home?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etel\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etel\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ephone\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eplaceholder\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ePhone Number\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/tel_input.png\" alt=\"Image of tel input\"\u003e\u003c/p\u003e\n\u003ch3\u003eSubmit Inputs\u003c/h3\u003e\n\u003cp\u003eCreating an \u003ccode\u003einput\u003c/code\u003e tag with \u003ccode\u003etype=\"submit\"\u003c/code\u003e creates a submit button that, when clicked, will do something with a user's \u003ccode\u003eform\u003c/code\u003e data. The \u003ccode\u003evalue\u003c/code\u003e attribute holds the text that will appear on the button.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eLet me walk your dog!\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/submit_input.png\" alt=\"Image of submit input\"\u003e\u003c/p\u003e\n\u003ch3\u003eRadio Inputs\u003c/h3\u003e\n\u003cp\u003eRadio inputs show users many options. But radio buttons allow users to select only one. You will set different \u003ccode\u003evalue\u003c/code\u003e attributes for each radio button, but they \u003cem\u003emust\u003c/em\u003e have the same \u003ccode\u003ename\u003c/code\u003e attribute.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-html-basic\"\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eDoes your dog get along with other dogs?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eradio\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eplays-well-with-others\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ehigh\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e The more dogs, the better!\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eradio\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eplays-well-with-others\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003emedium\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e It depends on the dog, but generally they are ok\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eradio\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eplays-well-with-others\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003elow\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e My dog prefers their walkies solo\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/radio_input.png\" alt=\"Image of radio input\"\u003e\u003c/p\u003e\n\u003ch3\u003eCheckboxes\u003c/h3\u003e\n\u003cp\u003eCheckboxes are like radio buttons...but you can choose more than one.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eWhat are your dogs favorite toys?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-1\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ekong\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e Kong \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-2\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003estuffed-animals\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eStuffed Animals\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-3\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003erope-toys\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eRope Toys\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-4\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esqueaky-toys\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eSqueaky Toys\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003echeckbox\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etoy-5\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eballs\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eBalls, Frisbees, anything a dog can fetch!\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/checkbox_input.png\" alt=\"Image of the checkbox input\"\u003e\u003c/p\u003e\n\u003ch3\u003eSelect Menus\u003c/h3\u003e\n\u003cp\u003eThis is pretty advanced!\u003c/p\u003e\n\u003cp\u003eSelect menus create a drop-down menu. Inside the \u003ccode\u003eselect\u003c/code\u003e tag you use \u003ccode\u003eoption\u003c/code\u003e tags to create a menu. Inside the \u003ccode\u003eoption\u003c/code\u003e tag you say what will be shown in the menu. In the \u003ccode\u003evalue\u003c/code\u003e option you say what will be sent as part of the \u003cem\u003eQuery String\u003c/em\u003e. For the example below the \u003cem\u003eQuery String\u003c/em\u003e would contain \u003ccode\u003esize=\"small\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eWhat size is your dog?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eselect\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esize\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esmall\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eselected\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eSmall(0-25 pounds)\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003emedium\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eMedium (26-50 pounds)\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003elarge\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eLarge (51-75 pounds)\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ex-large\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eExtra Large (over 75 pounds)\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eoption\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eselect\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/select_input.png\" alt=\"Image of select input\"\u003e\u003c/p\u003e\n\u003ch3\u003eTextarea\u003c/h3\u003e\n\u003cp\u003eTextarea elements are useful if we want our users to be able to be able to write multiple lines of text. For example, if we wish to allow our clients to write special notes for their dogs, we can let them write as much or as little as they like.\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eAny other things we should know about your dog?\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eh3\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etextarea\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003emessage\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etextarea\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eHere's a screenshot:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/fewds-html-forms/textarea_input.png\" alt=\"Image of textarea input\"\u003e\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eWe use HTML \u003ccode\u003eform\u003c/code\u003es to collect data from users. Start with a form element. Give it an \u003ccode\u003eaction\u003c/code\u003e and \u003ccode\u003emethod\u003c/code\u003e, probably \u003ccode\u003ePOST\u003c/code\u003e. Inside the \u003ccode\u003eform\u003c/code\u003e add several \u003ccode\u003einput\u003c/code\u003e elements. Use the best \u003ccode\u003einput\u003c/code\u003e for the data you're requesting. Make sure that your \u003ccode\u003einput\u003c/code\u003es are clearly labeled. If you follow these guidelines you'll soon be getting all the user data you can handle!\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/embed/eiCtXc2YMKc?rel=0\"\u003eHTML Forms and Iframes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/115ECvsMyDnFBcc-Rvb4Jn876JhOycXxKVN6sv7OiJ1Y/edit?usp=sharing\"\u003ePresentation Slides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\"\u003eMDN - HTML - Form\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\"\u003eMDN - HTML - Button\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.htmlgoodies.com/primers/html/article.php/3881421\"\u003eHTML Goodies - Form Basics\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.phpform.org/\"\u003eHTML Form Generator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"review-iterating-through-objects","title":"Review: Iterating Through Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-object-iteration\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain the difference between looping and iteration.\u003c/li\u003e \u003cli\u003eIterate over arrays with the \u003ccode\u003efor...of\u003c/code\u003e statement.\u003c/li\u003e \u003cli\u003eEnumerate an object's properties with the \u003ccode\u003efor...in\u003c/code\u003e statement.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhen we create a \u003ccode\u003efor\u003c/code\u003e loop to loop over an array, we base the loop's condition off of the \u003ccode\u003e.length\u003c/code\u003e of the array. This works, but it's a lot of syntactic cruft to remember:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (let i = 0; i \u0026lt; array.length; i++) {\u003cbr\u003e  // Loop body\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe problem is that we're using a \u003cem\u003elooping\u003c/em\u003e construct to perform \u003cem\u003eiteration\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eLooping vs. Iteration\u003c/h2\u003e  \u003cp\u003eThere's a pretty fine line separating the concepts of \u003cem\u003elooping\u003c/em\u003e and \u003cem\u003eiteration\u003c/em\u003e, and only the truly pedantic will call you out if you use one in place of the other.\u003c/p\u003e  \u003cp\u003eLooping is the process of executing a set of statements \u003cstrong\u003erepeatedly until a condition is met\u003c/strong\u003e. It's great for when we want to do something a specific number of times (\u003ccode\u003efor\u003c/code\u003e loop) or unlimited times until the condition is met (\u003ccode\u003ewhile\u003c/code\u003e or \u003ccode\u003edo while\u003c/code\u003e loop).\u003c/p\u003e  \u003cp\u003eIteration is the process of executing a set of statements \u003cstrong\u003eonce for each element in a collection\u003c/strong\u003e. We can accomplish this with a \u003ccode\u003efor\u003c/code\u003e loop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003efor (let i = 0; i \u0026lt; myArray.length; i++) {\u003cbr\u003e  console.log(myArray[i]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor with a \u003ccode\u003ewhile\u003c/code\u003e loop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003elet j = 0;\u003cbr\u003e\u003cbr\u003ewhile (j \u0026lt; myArray.length) {\u003cbr\u003e  console.log(myArray[j++]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ebut neither is very pretty. The \u003ccode\u003efor...of\u003c/code\u003e statement gives us a better to way.\u003c/p\u003e  \u003ch2\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eUsing \u003ccode\u003efor...of\u003c/code\u003e, the code above becomes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003efor (const element of myArray) {\u003cbr\u003e  console.log(element);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUsing a construct that is specifically meant for iteration results in much cleaner code: there's\u0026nbsp;no initialization of a counter, no condition, no incrementing the counter, and no bracket notation to access elements in the array (\u003ccode\u003emyArray[i]\u003c/code\u003e).\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003econst\u003c/code\u003e vs. \u003ccode\u003elet\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eAs you might've noticed, \u003ccode\u003efor...of\u003c/code\u003e allows us to use \u003ccode\u003econst\u003c/code\u003e instead of \u003ccode\u003elet\u003c/code\u003e. In \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e statements, \u003ccode\u003elet\u003c/code\u003e is required because we are incrementing a counter variable. The incrementing process involves taking the counter's current value, adding \u003ccode\u003e1\u003c/code\u003e to it, and then assigning that new value to the variable. That reassignment precludes us from using our beloved \u003ccode\u003econst\u003c/code\u003e, which cannot be reassigned.\u003c/p\u003e  \u003cp\u003eDelightfully, the \u003ccode\u003efor...of\u003c/code\u003e statement involves no such reassignment. On each trip into the loop body (which is a \u003cem\u003eblock\u003c/em\u003e — note the curly braces), we assign the next element in the collection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable. Upon reaching the end of the block, the block-scoped variable vanishes, and we return to the top. Then we repeat the process, assigning the next element in the collection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable.\u003c/p\u003e  \u003ch3\u003eIterating over... strings?\u003c/h3\u003e  \u003cp\u003eA string is effectively an ordered collection (like an array) of characters, which \u003ccode\u003efor...of\u003c/code\u003e is more than happy to iterate over:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (const char of 'Hello, world!') {\u003cbr\u003e  console.log(char);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: H\u003cbr\u003e// LOG: e\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: o\u003cbr\u003e// LOG: ,\u003cbr\u003e// LOG:\u003cbr\u003e// LOG: w\u003cbr\u003e// LOG: o\u003cbr\u003e// LOG: r\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: d\u003cbr\u003e// LOG: ! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsage\u003c/h3\u003e  \u003cp\u003eUse a \u003ccode\u003efor...of\u003c/code\u003e statement anytime you want to iterate over an array.\u003c/p\u003e  \u003ch2\u003eIterating over objects\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement is similar to \u003ccode\u003efor...of\u003c/code\u003e; it's generally used for iterating over the properties in an object. The statement follows this syntax:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (const [KEY] in [OBJECT]) {\u003cbr\u003e  // Code in the statement body\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the properties in an object, but it doesn't pass the entire property into the block. Instead, it only passes in the \u003cem\u003ekeys\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\";\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: street1\u003cbr\u003e// LOG: street2\u003cbr\u003e// LOG: city\u003cbr\u003e// LOG: state\u003cbr\u003e// LOG: zipCode \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAccessing the object's values is as simple as combining the passed-in key with the \u003cem\u003ebracket operator\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address[key]);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: 11 Broadway\u003cbr\u003e// LOG: 2nd Floor\u003cbr\u003e// LOG: New York\u003cbr\u003e// LOG: NY\u003cbr\u003e// LOG: 10004 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eBut... but I want to use the dot operator!\u003c/h3\u003e  \u003cp\u003eCan you think of why the bracket operator is required? Let's see what happens when we use the \u003cem\u003edot operator\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address.key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the five properties in \u003ccode\u003eaddress\u003c/code\u003e, successively passing in the object's keys. However, inside the statement body we're trying to access \u003ccode\u003eaddress.key\u003c/code\u003e. If you recall from the lesson on objects, variables don't work with the dot operator because it treats the variable name as a literal key —\u0026nbsp;that is, \u003ccode\u003eaddress.key\u003c/code\u003e is trying to access the property on \u003ccode\u003eaddress\u003c/code\u003e with a key of \u003ccode\u003ekey\u003c/code\u003e. Since there is no \u003ccode\u003ekey\u003c/code\u003e property in \u003ccode\u003eaddress\u003c/code\u003e, it returns \u003ccode\u003eundefined\u003c/code\u003e. To prove this, let's add a \u003ccode\u003ekey\u003c/code\u003e property to \u003ccode\u003eaddress\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.key = \"Let's have a 'key' key!\";\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address.key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsage\u003c/h3\u003e  \u003cp\u003eUse a \u003ccode\u003efor...in\u003c/code\u003e statement whenever you want to enumerate the properties of an object.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003efor...in\u003c/code\u003e and order\u003c/h3\u003e  \u003cp\u003eBecause \u003cstrong\u003earrays are objects\u003c/strong\u003e, \u003ccode\u003efor...in\u003c/code\u003e \u003cem\u003ewill work\u003c/em\u003e with arrays. In fact, because \u003ccode\u003efor...of\u003c/code\u003e was added to JavaScript later than \u003ccode\u003efor...in\u003c/code\u003e, you might see older code that uses \u003ccode\u003efor...in\u003c/code\u003e to iterate over arrays. However, as a general rule, \u003cstrong\u003edon't use \u003ccode\u003efor...in\u003c/code\u003e with arrays\u003c/strong\u003e. When iterating over an array, an \u003cstrong\u003eordered\u003c/strong\u003e collection, we would expect the elements in the array to be dealt with \u003cstrong\u003ein order\u003c/strong\u003e. However, because of how \u003ccode\u003efor...in\u003c/code\u003e works under the hood, there's no guarantee of order. From the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN documentation\u003c/a\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eA \u003ccode\u003efor...in\u003c/code\u003e loop iterates over the properties of an object in an \u003cstrong\u003earbitrary order\u003c/strong\u003e ... one cannot depend on the seeming orderliness of iteration, at least in a cross-browser setting).\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eWhat this means is that, with \u003ccode\u003efor....in\u003c/code\u003e, different browsers might iterate over the same object's properties in different orders. That's not cool! Cross-browser consistency is very important. A lot of progress has been made towards standardizing the behavior of \u003ccode\u003efor...in\u003c/code\u003e across all major browsers, but there's still no reason to use \u003ccode\u003efor...in\u003c/code\u003e with arrays when we have the wonderfully consistent \u003ccode\u003efor...of\u003c/code\u003e tailor-made for the job.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...in\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"cli-project-planning","title":"CLI Project Planning","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-project-planning\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-project-planning\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-project-planning/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe upcoming CLI project is a great chance for you to show off everything you’ve learned about Ruby so far and for many of us, make the first app that's all your own! This lesson is provided to help you tackle your first portfolio project. Tips on all aspects of the  project are included here, so make sure to have a look through!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Keep in mind that the Ask a Question team is not permitted to help while you are building your projects. Use the internet and the resources provided in this document if you get stuck!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eHow to Get Started On a Successful Project Build\u003c/h2\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eThe next lesson includes the project requirements for this project. Read through the  requirements carefully before getting started. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eCome up with a project idea of your own, and devote some time to a planning session. Think about the following:\u003c/p\u003e  \u003cp\u003ea. What will your app do? What is the user experience? b. Where will get your data from? (This might be a website that you will scrape or if you prefer, an API.) c. What will you need to do with the data once you have got it? d. What classes will you be using? e. How will you display data one level deep to the user?\u003c/p\u003e\n\u003c/li\u003e \u003cli\u003e\u003cp\u003eCreate a skeleton app and repository on Github. For more insight on how to plan out and get your project idea off the ground, you can watch \u003ca href=\"https://www.youtube.com/watch?v=KwBMwZ89Hj8\u0026amp;list=PLc6AmvC5Zybybc-NjUUwQwTtUEXH4iB2s\u0026amp;index=2\u0026amp;t=0s\"\u003ethis live build\u003c/a\u003e, which also shows how to use our \u003ca href=\"https://repl.it/@TheGingertonic/ScraperChecker\"\u003eScraper Checker tool\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003ePlan your schedule. Note that it takes most full time (40+ hrs/week) students between 3-7 days to complete, and can take up to 5 business days to schedule your project review after that.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eJoin the Slack channel #cli-data-gem-project to connect with others who are working on their projects as well. Students often set up a peer review in advance of their project review as a way to practice talking through your code.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWe are here to help!  Each week, there are Open Office Hour \u003ca href=\"https://learn.co/study-groups\"\u003estudy groups\u003c/a\u003e specifically designed to help with CLI project questions. Keep an eye out also for our OO Ruby \u003ca href=\"https://learn.co/study-groups\"\u003estudy groups\u003c/a\u003e, What To Expect In Your First Project Review and the Live Coding Club.\u003c/p\u003e  \u003ch3\u003eMaking a User Story\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eWho is your User?\u003c/li\u003e \u003cli\u003eWhat is their pain point?\u003c/li\u003e \u003cli\u003eHow do they use our solution to overcome this problem?\u003c/li\u003e \u003c/ul\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e Gemma has dietary requirements which means that she can’t eat gluten or dairy. Her friends have invited her to dinner at the most excellent pizzeria Zozo. Her WiFi connection is a bit patchy and the graphic-heavy Zozo website is not loading - all she wants is to know what allergens are in the dishes! Now she can use the Zozo Menu CLI App:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eShe starts the app and is greeted with a list of dishes on the Zozo menu\u003c/li\u003e \u003cli\u003eShe chooses a dish and is shown the allergens in that dish\u003c/li\u003e \u003cli\u003eShe can then either go back to the list and choose another dish or exit the app\u003c/li\u003e \u003c/ul\u003e \u003c/blockquote\u003e  \u003ch3\u003eChoosing Your Classes\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eIf this was a human-run business, what roles would I be hiring?\u003c/li\u003e \u003cli\u003eWhat responsibilities would they have?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eLet’s take the Zozo Menu CLI App we’re building for Gemma. If this was a human-run service we may need:\u003c/p\u003e  \u003cp\u003eA customer service specialist:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eResponsible for asking Gemma questions and delivering her the answers.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAn in-house expert on each of the MenuItems\u003c/p\u003e  \u003cul\u003e \u003cli\u003eResponsible for holding the information the runner has gone out to get. Our runner will complain if we ask them to go and get info they already retrieved!\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eA ‘runner’:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eResponsible for going out into the world and getting data from the Zozo website when our in-house expert needs to know.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIn the Zozo app, these might be called CLI, MenuItem, Scraper.\u003c/p\u003e  \u003ch3\u003eMaking an app flow diagram\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eHow is data passed around your app?\u003c/li\u003e \u003cli\u003eWhat classes are used? What are their responsibilities?\u003c/li\u003e \u003cli\u003eHow can I avoid unnecessary duplication of actions?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWe recommend using \u003ca href=\"https://www.draw.io/\"\u003edraw.io\u003c/a\u003e to put together a flow diagram. It doesn’t need to be over-complicated  - just a visual idea of your app’s structure.\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://drive.google.com/file/d/1YMbNfo91rfVzsdi3kbMMbyDct2hYwlKy/view?usp=sharing\"\u003eHere is an example\u003c/a\u003e of a flow for our Zozo Menu CLI App:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/project-planning/draw%20io%20example%20flowchart.png\" alt=\"draw.io example flowchart\"\u003e\u003c/p\u003e  \u003cp\u003eIf your data requires two steps to get all the details, your chart could look more \u003ca href=\"https://www.google.com/url?q=https://drive.google.com/file/d/1rdwPBxVaSUuXsLE-zGjyYOHc4lNvX3h3/view?usp%3Dsharing\u0026amp;sa=D\u0026amp;ust=1578950690616000\"\u003elike this\u003c/a\u003e:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/project-planning/draw%20io%20example%20flowchart%20two.png\" alt=\"draw.io example flowchart 2\"\u003e\u003c/p\u003e  \u003cp\u003eYou don’t have to use software for this - a photo of a (legible) hand-drawn sketch on a napkin also works! The symbols used in the examples above follow basic flowchart conventions. If you’re interested in learning more, here is a great \u003ca href=\"https://www.gliffy.com/blog/how-to-flowchart-basic-symbols-part-1-of-3\"\u003eoverview\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003ePlease make sure the image or file you share with us is accessible. This gif shows how to make a shareable link on draw.io:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/project-planning/shareable%20link.gif\" alt=\"make shareable draw.io gif\"\u003e\u003c/p\u003e  \u003ch3\u003eHandy Tools\u003c/h3\u003e  \u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/cli-data-gem-assessment\"\u003eRequirements Checklist\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://repl.it/@TheGingertonic/ScraperChecker\"\u003eScraper Checker\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://www.draw.io/\"\u003edraw.io\u003c/a\u003e\u003c/p\u003e  \u003ch3\u003eDemo Projects\u003c/h3\u003e  \u003cp\u003e\u003ca href=\"https://www.google.com/url?q=https://github.com/Gingertonic/eden_events\u0026amp;sa=D\u0026amp;ust=1578950690621000\"\u003eEden Events\u003c/a\u003e - CLI app with object relationships. Uses Nokogiri for scraping data.\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://www.google.com/url?q=https://github.com/Gingertonic/london-spas-cli\u0026amp;sa=D\u0026amp;ust=1578950690622000\"\u003eLondon Spas\u003c/a\u003e - CLI app, no object relationships. Uses HTTParty for API calls.\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://www.google.com/url?q=https://github.com/Gingertonic/movie-js-site-scraper-demo\u0026amp;sa=D\u0026amp;ust=1578950690622000\"\u003eCurrent Movies\u003c/a\u003e - CLI app, no object relationships. Uses Watir for scraping JS-loading data.\u003c/p\u003e  \u003cul\u003e \u003cli\u003e(Watir will NOT work in the Learn IDE - only use this if you are working in a local environment and are ready for some potential setup headaches!)\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eVideos\u003c/h3\u003e  \u003cp\u003eBuilding a CLI to show What's On at the Eden Project:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.google.com/url?q=https://www.youtube.com/watch?v%3DKwBMwZ89Hj8%26list%3DPLc6AmvC5Zybybc-NjUUwQwTtUEXH4iB2s%26index%3D2%26t%3D0s\u0026amp;sa=D\u0026amp;ust=1578950690624000\"\u003eEden Project Part 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=TaRZ9Z8dK2s\u0026amp;list=PLc6AmvC5Zybybc-NjUUwQwTtUEXH4iB2s\u0026amp;index=4\"\u003eEden Project Part 2\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=VMAW3VjPUPw\u0026amp;list=PLc6AmvC5Zybybc-NjUUwQwTtUEXH4iB2s\u0026amp;index=5\"\u003eEden Project Part 3\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"building-a-cli-gem-walkthrough","title":"Building a CLI Gem Walkthrough","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oo-cli-data-gem-walkthrough\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-cli-data-gem-walkthrough\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-cli-data-gem-walkthrough/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eThis video walks through the process of planning and building a CLI gem. There will be more videos on the process of building a more complex gem as well as on refactoring and improving a CLI gem.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003ePlanning your application\u003c/li\u003e \u003cli\u003eGenerating and setting up a basic gem\u003c/li\u003e \u003cli\u003eBasic CLI User interface\u003c/li\u003e \u003cli\u003eSetting up your Objects\u003c/li\u003e \u003cli\u003eSetting up your Scraper\u003c/li\u003e \u003cli\u003eBring it all together!\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eVideo\u003c/h2\u003e  \u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/_lDExWIhYKI?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePlanning the gem.\u003c/li\u003e \u003cli\u003eBeginning the building process.  \u003cul\u003e \u003cli\u003eSetting up or generating the basic structure of the gem.\u003c/li\u003e \u003cli\u003eCreating and stubbing out the executable file.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003erequiring files with \u003ccode\u003erequire\u003c/code\u003e and \u003ccode\u003erequire_relative\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eCoding the \u003ccode\u003eCLI\u003c/code\u003e class — our controller.  \u003cul\u003e \u003cli\u003eStubbing out the \u003ccode\u003eCLI\u003c/code\u003e class with hard-coded return data.\u003c/li\u003e \u003cli\u003eCreating the menu.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eSetting up our \u003ccode\u003eDeal\u003c/code\u003e class.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003e#today\u003c/code\u003e method to return today's deals.\u003c/li\u003e \u003cli\u003eStubbing out our first \u003ccode\u003eDeal\u003c/code\u003e instances with hard-coded data.\u003c/li\u003e \u003cli\u003eSetting up the \u003ccode\u003eDeal\u003c/code\u003e class attributes.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTesting our data in the console.\u003c/li\u003e \u003cli\u003eWire up our menu with conditional logic to work with our array of deals.  \u003cul\u003e \u003cli\u003eIterate over and display deals.\u003c/li\u003e \u003cli\u003eFix spelling on \u003ccode\u003e#availability\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eSetting up our scraper class — should we use a Deal class method or a standalone class?  \u003cul\u003e \u003cli\u003eSet up \u003ccode\u003eDeals#scrape_deals\u003c/code\u003e method.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eAdding gem dependencies to the app.  \u003cul\u003e \u003cli\u003eAdd dependencies to gemspec.\u003c/li\u003e \u003cli\u003eDevelopment dependencies or runtime dependencies?\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eCode individual scrape methods for each site.  \u003cul\u003e \u003cli\u003eUse CSS selectors to scrape desired information.\u003c/li\u003e \u003cli\u003eCreate new \u003ccode\u003eDeal\u003c/code\u003e objects and set the attributes based on the scraped info.\u003c/li\u003e \u003cli\u003eUpdate logic for \u003ccode\u003e#availability\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eFinal thoughts and tips on the building process.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eCode\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/daily_deal\"\u003eDaily Deals Gem repository\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"defining-front-end-web-programming","title":"Defining Front-End Web Programming","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-defining-frontend-web-programming\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-defining-frontend-web-programming\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-defining-frontend-web-programming/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine web programming\u003c/li\u003e \u003cli\u003eContrast web pages versus web applications\u003c/li\u003e \u003cli\u003eIdentify a reference example: \"Liking on social media\"\u003c/li\u003e \u003cli\u003eIdentify the \"Three Pillars of Web Programming\"\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe phrase \"Front-End Web Programming\" is used in different ways by different people. In this lesson, we're going to choose a definition of \"web programming\" and show an example that demonstrates Flatiron's \"three pillars\" of web programming. We will explore each of those pillars in detail in upcoming lessons.\u003c/p\u003e  \u003ch2\u003eWhat Exactly Does \"Web Programming\" Mean Anyway?\u003c/h2\u003e  \u003cp\u003eWeb programming, at its heart, is:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreating documents with HTML and styling/positioning the documents' content with CSS\u003c/li\u003e \u003cli\u003eUsing JavaScript to provide interactivity\u003c/li\u003e \u003cli\u003eUsing JavaScript to notify remote servers\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eWeb Page vs. Web Application\u003c/h2\u003e  \u003cp\u003eWhen a web page has a lot of JavaScript code, the page feels closer to a computer application, so some people may call it a \"\u003cstrong\u003eweb application\u003c/strong\u003e.\"  However, it's worth noting that there is \u003cem\u003e\u003cstrong\u003eno clear distinction\u003c/strong\u003e\u003c/em\u003e between a  \"web page\" and a \"web application.\" For instance, there's no rule like \"When  there are three or more actions it's a web application!\" Different people draw the boundary differently. More or less, we call a web page an \"application\" when it feels \"rich.\"\u003c/p\u003e  \u003ch2\u003eIdentify a Reference Example: Liking on Social Media\u003c/h2\u003e  \u003cp\u003eAs we move through the rest of this material, we're going to use \u003cem\u003eone, tiny\u003c/em\u003e interaction as our shared or \"reference\" example.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eWeb Programming Example\u003c/strong\u003e: \"Favoriting\" a social media post.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eRegardless of the social media site (Instagram, Pinterest, Facebook, LinkedIn, Twitter), the interaction goes something like this:\u003c/p\u003e  \u003cp\u003eStep 1: The site renders some HTML content that is styled using CSS\u003c/p\u003e  \u003cp\u003eStep 2: You see the content and decide to show your approval of it\u003c/p\u003e  \u003cp\u003eStep 3: You \u003cem\u003eclick\u003c/em\u003e some visual element meant to show approval (heart,    thumbs-up, +1, etc.). For example:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/defining-fewp/Image_30_SocMediaCropped.png\" alt=\"heart\"\u003e\u003c/p\u003e  \u003cp\u003eStep 4: The visual element \u003cem\u003eupdates\u003c/em\u003e (animates, goes from empty to full, jiggles,    etc) like:  \u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/defining-fewp/Image_30_SocMediaCropped1.png\" alt=\"full heart\"\u003e\u003c/p\u003e  \u003cp\u003eStep 5: Behind the scenes, the application \u003cem\u003etells the provider\u003c/em\u003e that this    post has gained your approval so that the central provider can store    this information and use it later (for example, to notify the post     author that you liked their post).\u003c/p\u003e  \u003cp\u003eIf all goes as it should, the entire interaction only takes a second or two. But even this small interaction demonstrates all the concepts of front-end web programming.\u003c/p\u003e  \u003ch2\u003eFlatiron's \"Three Pillars of Web Programming\"\u003c/h2\u003e  \u003cp\u003eTo help us learn web programming in three distinct phases, this curriculum is broken down into three essential \"pillars\":\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/defining-fewp/Image_31_ThreePillarsConcept.png\" alt=\"three pillars\"\u003e\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cstrong\u003eRecognize Events\u003c/strong\u003e\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eManipulate the DOM\u003c/strong\u003e\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eCommunicate with the Server\u003c/strong\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eLet's take another look at steps 3 through 5 of our Favoriting a Social Media Post example. Note that we \u003cem\u003eitalicized\u003c/em\u003e a verb in each step. Those words exemplify the activity of one of the \"pillars\" we must learn in order to make web applications.\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eStep 3 showed \u003cstrong\u003eRecognizing JS events\u003c/strong\u003e: Your \u003cem\u003eclick\u003c/em\u003e action on the empty heart tells JavaScript to do work\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eStep 4 showed \u003cstrong\u003eManipulating the DOM\u003c/strong\u003e: the work JavaScript was told to do was to \u003cem\u003eupdate\u003c/em\u003e the screen to make the heart \"look clicked\"\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eStep 5 showed \u003cstrong\u003eCommunicating with the server\u003c/strong\u003e: the work JavaScript was told to do was to \u003cem\u003etell the social media company\u003c/em\u003e that you approved of this content\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTHINKING ABOUT LEARNING:\u003c/strong\u003e These \"pillars\" are not something professional developers outside Flatiron School recognize. You won't go into a tech interview and be asked: \"Name the three pillars of web programming.\" These abstractions are a way to help learners (you!) recognize how what you're learning fits into three major activity areas. That said, if an interviewer asked you how to debug a web program and you said your strategy would be based on ensuring three \"critical areas\" were working, we think your interview answer would be off to a good start!\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eNow you know what's going on when you click that heart! The next lessons will focus on explaining each of these \"pillars\" in more detail. After you've worked your way through them, your new \"web programmer\" eyes will have you looking at your favorite sites very differently.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWeb Programming consists of creating documents with HTML, styling/positioning the documents' content with CSS, and using JavaScript to respond to events. We can break down the JavaScript part of web programming into three \"pillars\": recognizing events, updating the DOM, and informing the server. Now that we've seen how these pillars are connected in the abstract, we are ready to dive into seeing how they work together in detail.\u003c/p\u003e","frontPage":false},{"exportId":"review-the-dom-is-a-tree","title":"Review: The DOM is a Tree","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-is-a-tree\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDescribe how the DOM works as a tree\u003c/li\u003e\n\u003cli\u003eDefine the computer science version of \"Tree\"\u003c/li\u003e\n\u003cli\u003eAsk the DOM to find or \"select\" an HTML element or elements in the rendered page\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAsk the DOM to find an HTML element or elements in the rendered page\u003c/li\u003e\n\u003cli\u003eRemove the selected element(s) or add a new element next to the selected element\u003c/li\u003e\n\u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn previous lessons we were given the command to find the HTML element we wanted:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.querySelector(selector) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003cem\u003eselector\u003c/em\u003e is like a query string that lets us find things within an HTML page. What is the syntax of this \u003cem\u003eselector\u003c/em\u003e? How does the \u003cem\u003eselector\u003c/em\u003e navigate through our document to find the DOM nodes that we want to work with (update, move, even delete!)?\u003c/p\u003e\n\u003cp\u003eTo understand those queries or \u003cem\u003eselectors\u003c/em\u003e, we first need to talk about how the DOM tree (i.e. what we see in the 'Elements' panel of our DevTools) is used to help the DOM's \u003ccode\u003emethods\u003c/code\u003e find the right nodes.\u003c/p\u003e\n\u003ch3\u003eDefine the Computer Science Version of \"Tree\"\u003c/h3\u003e\n\u003cp\u003eWhat do we mean when we say that the DOM is a tree? Trees make a good metaphor for the DOM because almost everyone has seen a tree. Starting at the bottom, you can climb up the tree and out to the farthest — and smallest — branches. The thicker a branch is, the stronger its connections are and the more it holds within it. Likewise, the thinner a branch is, the less it holds inside.\u003c/p\u003e\n\u003cp\u003eThe DOM works basically the same way, except we usually talk about the root as being at the top of the DOM and the leaves being the most deeply nested HTML elements. So basically, we can imagine a tree upside down.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-the-dom-tree/Image_6_DomTree.png\" alt=\"DOM Tree Graphic\"\u003e\u003c/p\u003e\n\u003cp\u003eThe HTML for this \"tree\" would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE HTML\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;My Title\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;A heading\u0026lt;/h1\u0026gt;\u0026lt;a href=\"http://example.com\"\u0026gt;Link text\u0026lt;/a\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eDescribe How the DOM Works as a Tree\u003c/h3\u003e\n\u003cp\u003eEvery tree can contain subtrees, which we can treat independently of their parent trees. They repeat the pattern and appearance of the full tree, despite being a smaller part of a tree, like branches. Every child has experienced this sense of wonder when they take a fallen branch and stick it in the ground and think that they've planted their own tree.\u003c/p\u003e\n\u003cp\u003ePractically speaking, the DOM begins at \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e, but for now we should avoid changing what's between the \u003ccode\u003e\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;\u003c/code\u003e tags. Most of the time, we will look at the DOM subtree with its root at \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e and only change things that will be visible on the page. We might also deal with subtrees. For example, if we have\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hi!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Bye!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur tree looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        body\u003cbr\u003e        /  \\\u003cbr\u003e      div   div\u003cbr\u003e      /      \\\u003cbr\u003e     p        p\u003cbr\u003e    /          \\\u003cbr\u003e \"Hi!\"        \"Bye!\" \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly, if we had a DOM subtree that looked like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;h5\u0026gt;Sup?\u0026lt;/h5\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe tree would look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e         div\u003cbr\u003e        /  \\\u003cbr\u003e      div   div\u003cbr\u003e      /      \\\u003cbr\u003e    h1        h5\u003cbr\u003e    /          \\\u003cbr\u003e \"Hello!\"     \"Sup?\" \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAsk the DOM to Find or \"select\" an HTML Element or Elements in the Rendered Page\u003c/h3\u003e\n\u003cp\u003eIn creating the HTML for a page, including \u003cem\u003emetadata\u003c/em\u003e for a node (e.g., a \u003ccode\u003eclass\u003c/code\u003e or \u003ccode\u003eid\u003c/code\u003e attribute) will not only provide useful information about that node, but will also make it and its children easier to find. The more specific the metadata is, the more helpful it is for finding the desired element.\u003c/p\u003e\n\u003cp\u003eFor the following exercises, you can experiment with any web page you like. It's fun to change \u003cem\u003eThe New York Times\u003c/em\u003e or Facebook.\u003c/p\u003e\n\u003ch4\u003eFinding a Node\u003c/h4\u003e\n\u003cp\u003eJavaScript exposes a few ways of finding DOM nodes, either directly or in stages, courtesy of the \u003ccode\u003edocument\u003c/code\u003e object. We will introduce three here, in order from most to least specific: \u003ccode\u003egetElementByID()\u003c/code\u003e, \u003ccode\u003egetElementsByClassName()\u003c/code\u003e, and \u003ccode\u003egetElementsByTagName()\u003c/code\u003e.\u003c/p\u003e\n\u003ch5\u003e\u003ccode\u003edocument.getElementById()\u003c/code\u003e\u003c/h5\u003e\n\u003cp\u003eThis method provides the quickest access to a node, but it requires that we know a very specific piece of information — its \u003ccode\u003eid\u003c/code\u003e. This method can only return one element, since CSS \u003ccode\u003eid\u003c/code\u003es are expected to be unique.\u003c/p\u003e\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;h5 id=\"greeting\"\u0026gt;Hello!\u0026lt;/h5\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could find the \u003ccode\u003eh5\u003c/code\u003e element with \u003ccode\u003edocument.getElementById('greeting')\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNotice how the \u003ccode\u003eid\u003c/code\u003e that we pass to \u003ccode\u003egetElementById\u003c/code\u003e is identical to the \u003ccode\u003eid\u003c/code\u003e in \u003ccode\u003e\u0026lt;h5 id=\"greeting\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can use either single(\u003ccode\u003e''\u003c/code\u003e) or double(\u003ccode\u003e\"\"\u003c/code\u003e) quotes around the \u003ccode\u003eid\u003c/code\u003e within the parentheses in \u003ccode\u003edocument.getElementById('yourIDGoesHere')\u003c/code\u003e, as long as you use the same kind to open and close them!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOpen up your DevTools and find an element on the page that has an \u003ccode\u003eid\u003c/code\u003e attribute. Then open up your console, type \u003ccode\u003edocument.getElementById('theIdOfTheElement')\u003c/code\u003e, and check out your handy-dandy DOM node.\u003c/p\u003e\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis one is also very commonly used in DOM programming.\u003c/p\u003e\n\u003cp\u003eThis method finds elements by their \u003ccode\u003eclassName\u003c/code\u003e. Unlike the previous method, class names do not need to be unique, so this method returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e of all the elements with the given class. An \u003ccode\u003eHTMLCollection\u003c/code\u003e is an array-like structure containing a list of elements. You can iterate over an \u003ccode\u003eHTMLCollection\u003c/code\u003e with a simple \u003ccode\u003efor\u003c/code\u003e loop.\u003c/p\u003e\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- the `className` attribute is called `class` in HTML  --\u0026gt;\u003cbr\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Sup?\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h5\u0026gt;Tinier heading\u0026lt;/h5\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could find all of the elements with the class name \"banner\" by calling \u003ccode\u003edocument.getElementsByClassName('banner')\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eInspect your web page again, this time making note of a \u003ccode\u003eclass\u003c/code\u003e. Get all elements with that \u003ccode\u003eclass\u003c/code\u003e and give 'em a look. On the returned object you can use the \u003ccode\u003e.length\u003c/code\u003e property to find out how many came back.\u003c/p\u003e\n\u003cp\u003eIf you recall the \u003ccode\u003efor\u003c/code\u003e loop syntax you might try to write a loop which prints out the \u003ccode\u003einnerHTML\u003c/code\u003e property of every element in the collection. You might find doing so much easier if you save the results of \u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e to a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst elements = document.getElementsByClassName('yourClassNameHere'); \u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByTagName()\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eYou can use this method if you \u003cem\u003edon't\u003c/em\u003e know an element's \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e, but you \u003cem\u003edo\u003c/em\u003e know its tag name (the tag name is the thing between the \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, e.g., \u003ccode\u003e'div'\u003c/code\u003e, \u003ccode\u003e'h1'\u003c/code\u003e, \u003ccode\u003eheader\u003c/code\u003e, \u003ccode\u003earticle\u003c/code\u003e etc.). Since tag names aren't unique, this method also returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eExplore the DOM in the console by typing \u003ccode\u003edocument.getElementsByTagName('div')\u003c/code\u003e. You can iterate through these elements using a simple \u003ccode\u003efor\u003c/code\u003e loop as well.\u003c/p\u003e\n\u003ch4\u003eFinding a Node Without Knowing Anything About It\u003c/h4\u003e\n\u003cp\u003eWhat if we don't have an \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclassName\u003c/code\u003e to help us find a particular element? This is where our knowledge of trees comes in handy!\u003c/p\u003e\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;main\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow would we go about changing only the second \"Hello!\" to \"Goodbye!\"?\u003c/p\u003e\n\u003cp\u003eHere we're going to use a mix of different \u003ccode\u003emethods\u003c/code\u003e to accomplish the goal.\u003c/p\u003e\n\u003cp\u003eLet's start by getting the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e element\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst main = document.getElementsByTagName('main')[0]; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can get the children of \u003ccode\u003emain\u003c/code\u003e using \u003ccode\u003emain.children\u003c/code\u003e. This returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e, so we can get the second child with \u003ccode\u003emain.children[1]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst secondChild = main.children[1]; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we can get our \u003ccode\u003ep\u003c/code\u003e element. To constrain the search to just the children of the second child, we can call \u003ccode\u003egetElementsByTagName()\u003c/code\u003e \u003cstrong\u003edirectly on \u003ccode\u003esecondChild\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst p = secondChild.getElementsByTagName('p')[0]; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd lastly we can change an attribute on the \u003ccode\u003ep\u003c/code\u003e node:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep.textContent = \"Goodbye!\" \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eObviously, this way of accessing that text isn't very efficient and won't work on all pages but it does a good job of demonstrating the basic tools available to us for finding and manipulating HTML elements.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eUnderstanding the tree structure of the DOM helps us navigate all kinds of trees. In subtrees and branches we can find the nodes we need by IDs, class names or tag names, or by using element attributes like \u003ccode\u003echildren\u003c/code\u003e. Once we've selected our elements, we can use JavaScript to manipulate them. By using these techniques, we can start to build a richer user experience.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\"\u003eMDN - Document Object Model\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"http-status-codes","title":"HTTP Status Codes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"status-codes-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/status-codes-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/status-codes-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eDefine status codes and what they communicate to a client\u003c/li\u003e\n\u003cli\u003eDescribe the structure and various categories of status codes\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eWhy Status Codes are Important for the Client\u003c/h2\u003e\n\u003cp\u003eStatus codes allow your server to tell something special to the client. The responses you send need to be effective to both a human user and to the browser itself. That means that response messages like \u003ccode\u003eFile Not Found\u003c/code\u003e or \u003ccode\u003eItem isn't in the cart\u003c/code\u003e work if there is a human to read the English. Browsers also want to know the status of the response. To get that response, the HTTP protocol has an agreed upon contract for different \"status codes\". A status code is a 3-digit integer where the first digit represents the class of the response, and the remaining two digits represent a specific status. There are 5 primary values that the first digit can take.\u003c/p\u003e\n\u003ch3\u003eStatus Code Chart\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eStatus Number\u003c/th\u003e\n\u003cth\u003eCode/Description\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1xx: Informational (request received and continuing process)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e2xx: Success (request successfully received, understood, and accepted)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e3xx: Redirection (further action must be taken to complete request)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e4xx: Client Error (request contains bad syntax and can't be completed)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e5xx: Server Error (server couldn't complete request)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eYou've probably seen a bunch of these before, the most common being \u003ccode\u003e404\u003c/code\u003e. This means that the server couldn't find the route you requested.\u003c/p\u003e\n\u003ch2\u003eVideo Reviews\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=gI9wqEDPiY0\"\u003eHow the Web Works, Part 1\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=LSUevS1PRTg\"\u003eHow the Web Works, Part 2\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eResources\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.tutorialspoint.com/http/http_status_codes.htm\"\u003eMore on Status Codes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"video-refactoring-a-cli-gem-concert-gem","title":"Video: Refactoring a CLI Gem (Concert Gem)","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oo-ruby-refactoring-cli-gem-2\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-refactoring-cli-gem-2\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-refactoring-cli-gem-2/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003e​\u003cem\u003eThis video walks through an extended extended process of refactoring a CLI Gem\u003c/em\u003e​\u003c/p\u003e  \u003cp\u003e*A session between a Student and Avi Walking through their CLI Gem and refactoring extensively\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eDistinguish between Classes and their Instances\u003c/li\u003e \u003cli\u003eCreate powerful and dynamic Scraping methods\u003c/li\u003e \u003cli\u003eTest and debug in console\u003c/li\u003e \u003cli\u003eExplain the advantages and disadvantages of the zipper pattern to combine arrays to create objects\u003c/li\u003e \u003cli\u003eUse user Input to display a specific Object\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eVideo\u003c/h2\u003e  \u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/Lt0oyHiKWIw?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eObjects   \u003cul\u003e \u003cli\u003eClass variables and properties vs instance properties\u003c/li\u003e \u003cli\u003eObject orientation vs functional programming\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eFix the Scraper methods\u003c/li\u003e \u003cli\u003eThe Zipper pattern\u003c/li\u003e \u003cli\u003eThe 'Or equals' memoization \u003c/li\u003e \u003cli\u003eTest in the console  \u003cul\u003e \u003cli\u003ePry and other debugging methods\u003c/li\u003e \u003cli\u003eBuild reload! method to reload code changes into console\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eScrape and capture properties using the zipper pattern  \u003cul\u003e \u003cli\u003eCreate objects with those properties\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eUtilize these changes in our CLI Class  \u003cul\u003e \u003cli\u003eScrape and persist data to objects when the app starts up\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eIterate and display our Concert Objects  \u003cul\u003e \u003cli\u003eFix the menu method\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eUse user input to grab appropriate Object  \u003cul\u003e \u003cli\u003eUse the \u003ccode\u003eConcerts.all\u003c/code\u003e method to determine how many concerts we have\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eArray#count\u003c/code\u003e method\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eInteger#between?\u003c/code\u003e method\u003c/li\u003e \u003cli\u003eCheck the docs for available methods for arrays \u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eFind Concert with the \u003ccode\u003eConcert.find\u003c/code\u003e method\u003c/li\u003e \u003cli\u003eUse returned Concert object to return it's attributes\u003c/li\u003e \u003cli\u003eDebug and fix the 'No method' error\u003cbr\u003e\n\u003c/li\u003e \u003cli\u003eTips on building another application using these ideas\u003c/li\u003e \u003cli\u003eTips on avoiding the Zipper pattern\u003c/li\u003e \u003cli\u003eTalk about the power of Object Orientation  \u003cul\u003e \u003cli\u003eThink about the objects in physical space\u003c/li\u003e \u003cli\u003eThink about method returns\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eFigure out average length of artist names in our data  \u003cul\u003e \u003cli\u003eUse iteration over Concert Objects\u003c/li\u003e \u003cli\u003eTalk about \u003ccode\u003eArray#collect\u003c/code\u003e method\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eTips on internalizing the concepts  \u003cul\u003e \u003cli\u003eSolidify concepts - move slowly!\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eCode\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"https://github.com/benser1/cli-upcoming-concerts/tree/8652e5c285ca779fd2fa94f0490f726a0ec22b6f\"\u003eOriginal Code\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://github.com/benser1/cli-upcoming-concerts\"\u003eRefactored Code\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"scope-chain","title":"Scope Chain","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-principles-scope-chain-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-chain-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-chain-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate nested functions.\u003c/li\u003e \u003cli\u003eExplain that the environment in which a function is created gets added to its scope chain.\u003c/li\u003e \u003cli\u003eDescribe how the scope chain makes variables and functions declared in the outer environment available within a nested function.\u003c/li\u003e \u003cli\u003eExplain how the JavaScript engine makes a first pass over your code before executing it.\u003c/li\u003e \u003cli\u003eDescribe what happens during the \u003cem\u003eexecution phase\u003c/em\u003e of the JavaScript runtime.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eEvery function in JavaScript has access to a \u003cem\u003escope chain\u003c/em\u003e, which includes references to the function's outer scope (the scope in which the function was declared), the outer scope's outer scope, and so on. In this lesson, we'll discuss how the scope chain allows us to access variables and functions declared in outer scopes within an inner function. We'll also talk about what's happening under the hood when we run JavaScript code and how that impacts \u003cem\u003eidentifier resolution\u003c/em\u003e and the \u003cem\u003escope chain\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eNested scopes and the scope chain\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-chain-readme/nested_elevators.gif\" alt=\"Nested elevators\"\u003e\u003c/p\u003e  \u003cp\u003eIn addition to the \u003ccode\u003e#engineering\u003c/code\u003e channel, every software engineer is a member of Flatbook's \u003ccode\u003e#general\u003c/code\u003e channel. Engineers can see all of the messages sent in both channels. If a message in \u003ccode\u003e#general\u003c/code\u003e piques our interest, we can refer to the message in \u003ccode\u003e#engineering\u003c/code\u003e despite the fact that it was posted in \u003ccode\u003e#general\u003c/code\u003e. To bend the analogy back towards functions and scope, everything \u003cem\u003edeclared\u003c/em\u003e in \u003ccode\u003e#general\u003c/code\u003e is accessible in \u003ccode\u003e#engineering\u003c/code\u003e. \u003ccode\u003e#general\u003c/code\u003e, our global scope, is effectively the \u003cem\u003eouter scope\u003c/em\u003e for \u003ccode\u003e#engineering\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eFor a function declared at the top level of our JavaScript file (that is, not declared inside of another function), its outer scope is the \u003cem\u003eglobal scope\u003c/em\u003e. When that new function is invoked, it can access all of the variables and functions declared in the global scope. Upon invocation, the function creates a new scope and \u003cstrong\u003eretains a reference to the \u003cem\u003eouter scope\u003c/em\u003e in which it was declared\u003c/strong\u003e. Inside the new function's body, in addition to variables and functions declared in that function, \u003cstrong\u003ewe also have access to variables and functions declared in the outer scope\u003c/strong\u003e. Let's see that in action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst globalVar = 1;\u003cbr\u003e\u003cbr\u003efunction firstFunc () {\u003cbr\u003e  const firstVar = 2;\u003cbr\u003e\u003cbr\u003e  return firstVar + globalVar;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirstFunc();\u003cbr\u003e// =\u0026gt; 3 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003efirstVar\u003c/code\u003e is declared inside the function, and \u003ccode\u003eglobalVar\u003c/code\u003e is declared in the outer scope, but we have access to \u003cstrong\u003eboth\u003c/strong\u003e inside \u003ccode\u003efirstFunc()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhen we invoke \u003ccode\u003efirstFunc()\u003c/code\u003e, the first line of code inside the function, \u003ccode\u003econst firstVar = 2;\u003c/code\u003e, runs first, creating a new local variable. When the JavaScript engine reaches the function's second line, it sees the reference to \u003ccode\u003efirstVar\u003c/code\u003e and says, \"Great, I know what that means: it's a local variable!\" Then, the engine encounters the reference to \u003ccode\u003eglobalVar\u003c/code\u003e and says, \"What the heck is this?! That's not declared locally!\"\u003c/p\u003e  \u003cp\u003eWhen the engine can't find a local match, it then goes looking in the outer scope and —\u0026nbsp;voilà! —\u0026nbsp;finds a match there. Because of the way functions can look up variables declared in outer scopes, we say they have access to a \u003cem\u003escope chain\u003c/em\u003e. Through the scope chain, a function has access to all variables and functions declared in its outer scope.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eTop Tip\u003c/em\u003e\u003c/strong\u003e: What matters for the scope chain is where the function is declared —\u0026nbsp;not where it is invoked.\u003c/p\u003e  \u003cp\u003eWe can think of JavaScript scopes as a nested system:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-chain-readme/scope_chain.png\" alt=\"Scope chain\"\u003e\u003c/p\u003e  \u003cp\u003eAll variables and functions declared in outer scopes are available in inner scopes via the scope chain. This can go on ad infinitum, with functions nested in functions nested in functions, each new level creating a new scope that can reference functions and variables declared in its outer scopes through the scope chain:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst globalVar = 1;\u003cbr\u003e\u003cbr\u003efunction firstFunc () {\u003cbr\u003e  const firstVar = 2;\u003cbr\u003e\u003cbr\u003e  function secondFunc () {\u003cbr\u003e    const secondVar = 3;\u003cbr\u003e\u003cbr\u003e    return secondVar + firstVar + globalVar;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  const resultFromSecondFunc = secondFunc();\u003cbr\u003e\u003cbr\u003e  return resultFromSecondFunc;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirstFunc();\u003cbr\u003e// =\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInside \u003ccode\u003efirstFunc()\u003c/code\u003e, we've defined a second function, \u003ccode\u003esecondFunc()\u003c/code\u003e. That second function creates yet another scope, and in it we can reference \u003ccode\u003efirstVar\u003c/code\u003e \u003cstrong\u003eand\u003c/strong\u003e \u003ccode\u003eglobalVar\u003c/code\u003e via the scope chain:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-chain-readme/nested_scope_chain.png\" alt=\"Nested scope chain\"\u003e\u003c/p\u003e  \u003cp\u003eInside \u003ccode\u003esecondFunc()\u003c/code\u003e, \u003ccode\u003efirstVar\u003c/code\u003e is accessible via the outer scope, and \u003ccode\u003eglobalVar\u003c/code\u003e is accessible via the outer scope's outer scope. Head spinning? Just remember that the scope chain is \u003ca href=\"https://en.wikipedia.org/wiki/Turtles_all_the_way_down\"\u003escopes all the way down\u003c/a\u003e. If \u003ccode\u003ea()\u003c/code\u003e is declared inside \u003ccode\u003eb()\u003c/code\u003e and \u003ccode\u003eb()\u003c/code\u003e is declared inside \u003ccode\u003ec()\u003c/code\u003e, \u003ccode\u003ea()\u003c/code\u003e has access to functions and variables declared in its own scope, \u003ccode\u003eb()\u003c/code\u003e's scope, and \u003ccode\u003ec()\u003c/code\u003e's scope. That's the scope chain in action!\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: The scope chain only goes in one direction. An outer scope \u003cstrong\u003edoes not have access to things declared in an inner scope\u003c/strong\u003e. In the previous code snippet, \u003ccode\u003efirstFunc()\u003c/code\u003e \u003cstrong\u003ecannot access \u003ccode\u003esecondVar\u003c/code\u003e\u003c/strong\u003e. In addition, two functions declared in the same scope do not have access to anything declared in the other's scope:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fruit = 'Apple';\u003cbr\u003e\u003cbr\u003efunction first () {\u003cbr\u003e  const vegetable = 'Broccoli';\u003cbr\u003e\u003cbr\u003e  console.log('fruit:', fruit);\u003cbr\u003e  console.log('vegetable:', vegetable);\u003cbr\u003e  console.log('legume:', legume);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second () {\u003cbr\u003e  const legume = 'Peanut';\u003cbr\u003e\u003cbr\u003e  console.log('fruit:', fruit);\u003cbr\u003e  console.log('legume:', legume);\u003cbr\u003e  console.log('vegetable:', vegetable);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBoth \u003ccode\u003efirst()\u003c/code\u003e and \u003ccode\u003esecond()\u003c/code\u003e have access to \u003ccode\u003efruit\u003c/code\u003e, but \u003ccode\u003efirst()\u003c/code\u003e cannot access \u003ccode\u003elegume\u003c/code\u003e and \u003ccode\u003esecond()\u003c/code\u003e cannot access \u003ccode\u003evegetable\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efirst();\u003cbr\u003e// LOG: fruit: Apple\u003cbr\u003e// LOG: vegetable: Broccoli\u003cbr\u003e// ERROR: Uncaught ReferenceError: legume is not defined\u003cbr\u003e\u003cbr\u003esecond();\u003cbr\u003e// LOG: fruit: Apple\u003cbr\u003e// LOG: legume: Peanut\u003cbr\u003e// ERROR: Uncaught ReferenceError: vegetable is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOkay, we have an idea of what the scope chain is, but how does it actually work under the hood?\u003c/p\u003e  \u003ch2\u003eThe JavaScript engine and identifier resolution\u003c/h2\u003e  \u003ch3\u003eIdentifiers\u003c/h3\u003e  \u003cp\u003eAs a brief refresher, when we declare a variable or a function, we provide a name that allows us to refer back to it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = \"myVar refers to the variable that contains this string\";\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003efunction myFunc () {\u003cbr\u003e  return \"myFunc refers to this function that returns this string\";\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe call those names \u003cem\u003eidentifiers\u003c/em\u003e because they allow us to \u003cstrong\u003eidentify\u003c/strong\u003e the variable or function we're referring to.\u003c/p\u003e  \u003ch3\u003eThe JavaScript engine\u003c/h3\u003e  \u003cp\u003eWhen our JavaScript code is run in the browser, the JavaScript engine actually makes two separate passes over our code:\u003c/p\u003e  \u003ch4\u003eCompilation phase\u003c/h4\u003e  \u003cp\u003eThe first pass is the \u003cem\u003ecompilation phase\u003c/em\u003e, in which the engine steps through our code line-by-line:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eWhen it reaches a variable declaration, the engine allocates memory and sets up a reference to the variable's identifier, e.g., \u003ccode\u003emyVar\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eWhen the engine encounters a function declaration, it does three things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAllocates memory and sets up a reference to the function's identifier, e.g., \u003ccode\u003emyFunc\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eCreates a new execution context with a new scope.\u003c/li\u003e \u003cli\u003eAdds a reference to the parent scope (the outer environment) to the scope chain, making variables and functions declared in the outer environment available in the new function's scope.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch4\u003eExecution phase\u003c/h4\u003e  \u003cp\u003eThe second pass is the \u003cem\u003eexecution phase\u003c/em\u003e. The JavaScript engine again steps through our code line-by-line, but this time it actually runs our code, assigning values to variables and invoking functions.\u003c/p\u003e  \u003cp\u003eOne of the engine's tasks is the process of matching identifiers to the corresponding values stored in memory. Let's walk through the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 42;\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// =\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDuring the compilation phase, a reference to the identifier \u003ccode\u003emyVar\u003c/code\u003e is stored in memory. The variable isn't yet assigned a value, and the second line (\u003ccode\u003emyVar;\u003c/code\u003e) is skipped over entirely because it isn't a declaration.\u003c/p\u003e  \u003cp\u003eDuring the execution phase, the value \u003ccode\u003e42\u003c/code\u003e is assigned to \u003ccode\u003emyVar\u003c/code\u003e. When the engine reaches the second line, it sees the identifier \u003ccode\u003emyVar\u003c/code\u003e and resolves it to a value through a process known as \u003cem\u003eidentifier resolution\u003c/em\u003e. The engine first checks the current scope to see if \u003ccode\u003emyVar\u003c/code\u003e has been declared in it. If it finds no declaration for \u003ccode\u003emyVar\u003c/code\u003e in the current scope, the engine then starts moving up the scope chain, checking the parent scope and then the parent scope's parent scope and so on until it finds a matching declared identifier or reaches the global scope. If the engine traverses all the way up to the global scope and still can't find a match, it will throw a \u003ccode\u003eReferenceError\u003c/code\u003e and inform you that the identifier is not declared anywhere in the scope chain.\u003c/p\u003e  \u003cp\u003eLet's look at an example. Remember, the engine will continue to move up the scope chain \u003cstrong\u003eonly\u003c/strong\u003e if it can't find a matching identifier in the current scope. Because of this, we can actually use the same identifier to declare variables or functions in multiple scopes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 42;\u003cbr\u003e\u003cbr\u003efunction myFunc () {\u003cbr\u003e  const myVar = 9001;\u003cbr\u003e\u003cbr\u003e  return myVar;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emyFunc();\u003cbr\u003e// =\u0026gt; 9001 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDuring the compilation phase, a reference to \u003ccode\u003emyVar\u003c/code\u003e is created in the global scope, and a reference to a \u003cstrong\u003edifferent\u003c/strong\u003e \u003ccode\u003emyVar\u003c/code\u003e is created in \u003ccode\u003emyFunc()\u003c/code\u003e's scope. The global \u003ccode\u003emyVar\u003c/code\u003e exists in the scope chain for \u003ccode\u003emyFunc()\u003c/code\u003e, but the engine never makes it that far. The engine finds a matching reference within \u003ccode\u003emyFunc()\u003c/code\u003e, and it resolves the \u003ccode\u003emyVar\u003c/code\u003e identifier to \u003ccode\u003e9001\u003c/code\u003e without having to traverse up the scope chain.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThis topic might feel a bit esoteric, but it's critical to understanding how identifier lookups happen in JavaScript. That is, when the JavaScript engine encounters a variable or function, how it knows what value or function to retrieve from memory. If the engine finds the identifier declared locally, it uses that value. However, if it doesn't find a local match, it then looks up (or down, depending on your perspective) the scope chain until it either finds a match in an outer scope or throws an \u003ccode\u003eUncaught ReferenceError\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#Name_conflicts\"\u003eMDN: Functions —\u0026nbsp;Name conflicts\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"review-debugging","title":"Review: Debugging","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-basics-intro-to-debugging-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-intro-to-debugging-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-intro-to-debugging-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine \u003cem\u003etracing\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eUse the built-in \u003ccode\u003econsole\u003c/code\u003e object for debugging\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003econsole.log()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003econsole.error()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003econsole.warn()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003econsole.table()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs developers, one of the things that we spend about half of our time on is debugging. Debugging is the process of figuring out where our code is either breaking, or giving us an unexpected result. Debugging is absolutely normal, and a crucial part of the development process. With a little practice, you'll become an expert! In this lesson, we'll look at a few different ways to print data to the JavaScript console as a means of debugging our code.\u003c/p\u003e  \u003ch2\u003eDefine \u003cem\u003etracing\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eWe've already used \u003ccode\u003econsole.log()\u003c/code\u003e to print out data to the console, but we haven't really discussed why you'd want to do that. In short, it's one of the most basic, best tools in a JavaScript programmer's debugging toolkit.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eAs soon as we started programming, we found to our surprise that it wasn’t as easy to get programs right as we had thought. We had to discover debugging. I can remember the exact instant when I realized that a large part of my life from then on was going to be spent in finding mistakes in my own programs. — Maurice Wilkes, 1949\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003e\u003cem\u003eTracing\u003c/em\u003e is using output statements (like \u003ccode\u003econsole.log()\u003c/code\u003e) to provide feedback about \"what the machine is thinking.\" Oftentimes we request our code to behave like a machine, or like a process...\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/hangry.gif\" alt=\"WHERE'S MY MAC N' CHEESE?\"\u003e \u003c/p\u003e  \u003cp\u003e...and sometimes that process doesn't \u003cem\u003equite\u003c/em\u003e give us what we want. Tracing allows us to check some assumptions. Taking Liz Lemon in the picture as an example, she'd want to know:\u003c/p\u003e  \u003col\u003e \u003cli\u003eDid the person who places order get my Mac N' Cheese order?\u003c/li\u003e \u003cli\u003eDid the person who receives orders get my Mac N' Cheese order?\u003c/li\u003e \u003cli\u003eWas my Mac N' Cheese order on the receipt? If not, problem happened \u003cem\u003ebefore\u003c/em\u003e this point (investigate steps 1 and 2). If not, problem happened after.\u003c/li\u003e \u003cli\u003e(Judging by the fact that there are lunches on the table, clearly the order got here, was paid for, and was put on the table. No debugging needed)\u003c/li\u003e \u003cli\u003eWho opened up the box of lunch orders?\u003c/li\u003e \u003cli\u003eDid any of the writers see my order?\u003c/li\u003e \u003cli\u003eIf someone saw it, and it's not there, someone took it. If no one saw it, call restaurant to make sure they fulfilled the receipt.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWe can imagine that Liz could check these steps above with code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCheck the \u003ccode\u003eObject\u003c/code\u003e of \u003ccode\u003elunchOrdersForTheWriters\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCheck the value for \u003ccode\u003elunchOrdersForTheWriters[\"liz\"]\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCheck whether any \u003ccode\u003ewriters\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003e element responds \u003ccode\u003etruthy\u003c/code\u003e to \u003ccode\u003esawOrder(\"Mac N Cheese\")\u003c/code\u003e?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDebugging the order delivery process like this is \"tracing the program.\"\u003c/p\u003e  \u003ch2\u003eIdentify The Built-in \u003ccode\u003econsole\u003c/code\u003e Object For Debugging\u003c/h2\u003e  \u003cp\u003eThe \u003cstrong\u003ebrowser\u003c/strong\u003e, not \u003cstrong\u003ethe JavaScript language\u003c/strong\u003e provides an object called \u003ccode\u003econsole\u003c/code\u003e. When the first Developer tools were released, only Firefox had them. Firefox chose to call the console \u003ccode\u003econsole\u003c/code\u003e, but other browsers didn't have tooling at all! Over time browsers followed Firefox and rolled in tooling and \u003cem\u003ehave chosen\u003c/em\u003e to call the console \u003ccode\u003econsole\u003c/code\u003e, but they didn't have to.\u003c/p\u003e  \u003cp\u003eThis \u003ccode\u003econsole\u003c/code\u003e object has specific methods that send text to the DevTools logging area, which pretty much everyone calls \"the console.\"\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003econsole.log()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003econsole\u003c/code\u003e object's \u003ccode\u003elog()\u003c/code\u003e method logs general information to the console. It can take any number of arguments. If more than one argument is provided, the arguments will be printed out on the same line with a space in between:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('Hello,', 'world!');\u003cbr\u003e// LOG: Hello, world! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eImportantly, you can log not only simple things like \u003ccode\u003eString\u003c/code\u003es or \u003ccode\u003eNumber\u003c/code\u003es but also objects, and use disclosure triangles to \"expand out\" the contained values.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTypographical Note\u003c/strong\u003e: When we use \u003ccode\u003econsole.log()\u003c/code\u003e in code snippets, we'll preface the output statements with \u003ccode\u003eLOG:\u003c/code\u003e, such as in the above example. This is to differentiate messages logged out to the console from values \u003ccode\u003ereturn\u003c/code\u003eed by an expression, which are represented with \u003ccode\u003e=\u0026gt;\u003c/code\u003e, e.g.:\u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003efunction logReturner() {\u003cbr\u003e    console.log(false);\u003cbr\u003e\u003cbr\u003e    return true;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogReturner();\u003cbr\u003e// LOG: false\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs an example, here's some code. Where might we want to log information to debug this simple app?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst number = 10;\u003cbr\u003e\u003cbr\u003efunction addTwoNumbers(a, b) {\u003cbr\u003e    a + b;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction multiplyByTwo(n) {\u003cbr\u003e    number * 2;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCopy the code above into your console then run the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(multiplyByTwo(addTwoNumbers(1, 3))); //=\u0026gt; undefined(?!) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSome questions to consider in debugging the code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eIs what we passed in what the function got?\u003c/li\u003e \u003cli\u003eIs the thing the function did what we expected it to do?\u003c/li\u003e \u003cli\u003eDoes the operator work like we thought it did?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eTry adding some \u003ccode\u003econsole.log()\u003c/code\u003es to the code to answer these questions and figure out what the issue is.\u003c/p\u003e  \u003cp\u003eTo start, \u003ccode\u003econsole.log()\u003c/code\u003e will be our main \u003ccode\u003econsole\u003c/code\u003e debugging method. However, you'll also probably encounter the following two \u003ccode\u003econsole\u003c/code\u003e methods, \u003ccode\u003eerror()\u003c/code\u003e and \u003ccode\u003ewarn()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003econsole.error()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003econsole\u003c/code\u003e object's \u003ccode\u003eerror()\u003c/code\u003e method is for printing out an error to the console, and it can also take multiple arguments. Most browsers will style the error message differently from a regular message output with \u003ccode\u003elog()\u003c/code\u003e:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/console_error_log.png\" alt=\"`console.error()`\"\u003e\u003c/p\u003e  \u003cp\u003eYou might ask why we'd ever need to use this — isn't the goal of writing good code to \u003cstrong\u003eavoid\u003c/strong\u003e errors? Well, sure, but sometimes errors are out of our control: the network could go down, data could change, or a user could enter something invalid. In these cases, it's helpful to use the specialized \u003ccode\u003econsole.error()\u003c/code\u003e method. That way, you're letting future engineers (including yourself) know that this message is more important than the average logged message.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTYPOGRAPHICAL NOTE\u003c/strong\u003e: When we use \u003ccode\u003econsole.error()\u003c/code\u003e in code snippets, we'll preface the output statements with \u003ccode\u003eERROR:\u003c/code\u003e to differentiate them from other logged messages:\u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003econsole.error('Uh oh, you done goofed.');\u003cbr\u003e// ERROR: Uh oh, you done goofed. \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDemonstrate \u003ccode\u003econsole.warn()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eA step down in severity from \u003ccode\u003econsole.error()\u003c/code\u003e is \u003ccode\u003econsole.warn()\u003c/code\u003e. It provides a step between a regular \u003ccode\u003elog()\u003c/code\u003e message and a more dire \u003ccode\u003eerror()\u003c/code\u003e message.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/console_error_log_warn.png\" alt=\"`console.warn()`\"\u003e\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003econsole.table()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eA very handy method to help work with \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es is \u003ccode\u003econsole.table()\u003c/code\u003e. Given the following object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst family = {\u003cbr\u003e    mother: {\u003cbr\u003e        firstName: \"Susan\",\u003cbr\u003e        lastName: \"Doyle\",\u003cbr\u003e        age: 32\u003cbr\u003e    },\u003cbr\u003e    father: {\u003cbr\u003e        firstName: \"John\",\u003cbr\u003e        lastName: \"Doyle\",\u003cbr\u003e        age: 33\u003cbr\u003e    },\u003cbr\u003e    daughter: {\u003cbr\u003e        firstName: \"Lily\",\u003cbr\u003e        lastName: \"Doyle\",\u003cbr\u003e        age: 5\u003cbr\u003e    },\u003cbr\u003e    son: {\u003cbr\u003e        firstName: \"Mike\",\u003cbr\u003e        lastName: \"Doyle\",\u003cbr\u003e        age: 8\u003cbr\u003e    }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you call \u003ccode\u003econsole.table(family)\u003c/code\u003e, it prints a tables of entries:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://developers.google.com/web/tools/chrome-devtools/console/images/table-people-objects.png\" alt=\"Google Chrome documentation for console.table\"\u003e\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eOver the course of your programming career, you'll probably spend \u003cstrong\u003esignificantly\u003c/strong\u003e more time debugging than actually writing new code. Just as your coding skills will improve with practice, so too will your debugging skills.\u003c/p\u003e  \u003cp\u003eDebugging can sometimes make you feel sad. You'll fix one bug and ten new ones appear:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/bugs.gif\" alt=\"Bugs!\"\u003e\u003c/p\u003e  \u003cp\u003eIf it's any \u003ccode\u003econsole\u003c/code\u003e-ation, we \u003cstrong\u003eall\u003c/strong\u003e make mistakes. Treat debugging as a learning opportunity. Often, looking at your code critically and trying to figure out why something isn't working will afford you a much deeper understanding of how some feature of the language actually works.\u003c/p\u003e  \u003cp\u003eAlso, sometimes difficulty debugging might hint at a program that needs some help from a mentor, a pair, or a friend. Some of our best code edits have started by talking to a friend and saying \"This seems...really complicated and I can't debug it easily!\"\u003c/p\u003e  \u003cp\u003eWe'll continue to use the \u003ccode\u003econsole\u003c/code\u003e object and other tools throughout this course. By the end, you'll be on your way to being a debugging master!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\"\u003eMDN — Console\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Tracing_(software)\"\u003eWikipedia —\u0026nbsp;Tracing (software)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-debugging-readme/nick_parlante_debugging_zen_1996.pdf\"\u003eNick Parlante (Stanford CS) —\u0026nbsp;Debugging Zen\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/console/\"\u003eGoogle Chrome — Console Overview\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"video-refactoring-a-cli-gem","title":"Video: Refactoring a CLI Gem","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"refactoring-cli-gem\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/refactoring-cli-gem\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/refactoring-cli-gem/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eObjectives:\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRefactoring a gem.\u003c/li\u003e \u003cli\u003eDelegating responsibility to the appropriate class.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eVideo\u003c/h2\u003e  \u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/JEL_PXr74qQ?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003e\u003ca href=\"http://learn-co-videos.s3.amazonaws.com/cli/cli-refactor.mp4\"\u003eMP4\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://github.com/aviflombaum/museum-shows/tree/master\"\u003eOriginal Code\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://github.com/aviflombaum/museum-shows/tree/refactored\"\u003eRefactored Code\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://github.com/aviflombaum/museum-shows/pull/1/files?diff=unified\"\u003eDiff\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"review-changing-the-dom-with-devtools","title":"Review: Changing the DOM with DevTools","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-dev-tools\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDemonstrate viewing the DOM through Chrome DevTools\u003c/li\u003e \u003cli\u003eSelect an element with Chrome DevTools\u003c/li\u003e \u003cli\u003eDelete an element with Chrome DevTools\u003c/li\u003e \u003cli\u003eDemonstrate that the source is not changed when the DOM is\u003c/li\u003e \u003cli\u003eDemonstrate opening the DevTools' JavaScript console\u003c/li\u003e \u003cli\u003eSelect an element with JavaScript\u003c/li\u003e \u003cli\u003eDelete an element with JavaScript\u003c/li\u003e \u003cli\u003eStoring node references in variables\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've read that updating the DOM will update the browser's rendered page. Let's try this out. We're going to change the DOM in two ways. First, we'll use Chrome's Developer Tools (\"DevTools\") and our mouse to remove an element from the DOM. Then we'll use the DevTools' JavaScript console to run JavaScript that does the same thing.\u003c/p\u003e  \u003ch2\u003eDemonstrate Viewing the DOM Through Chrome DevTools\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/ada-wiki.png\" alt=\"ada-wiki\"\u003e\u003c/p\u003e  \u003cp\u003eLet's head back to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e. From this web page, look at the Chrome menu bar at the top of the page. Click on \"View\", then select \"Developer\", then \"Developer Tools.\" This will open the Google Developer Tools. Click on the \"Elements\" tab. Here we see the DOM representation of the HTML source that was loaded into the browser.\u003c/p\u003e  \u003ch3\u003eSelect an Element With Chrome DevTools\u003c/h3\u003e  \u003cp\u003eScroll through the Elements panel. You will see some HTML: \u003ccode\u003ehead\u003c/code\u003e tags, \u003ccode\u003ebody\u003c/code\u003e tags, \u003ccode\u003ediv\u003c/code\u003es, etc. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the disclosure triangle to expand it. Notice that you can mouse over different elements in the Elements panel and see them highlighted in the browser window. Locate the \u003ccode\u003ediv\u003c/code\u003e nested inside \u003ccode\u003ebody\u003c/code\u003e that has an \u003ccode\u003eid\u003c/code\u003e attribute of \"content\" and expand that as well.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/content-element.png\" alt=\"content-element\"\u003e\u003c/p\u003e  \u003cp\u003eNext, locate the \u003ccode\u003eh1\u003c/code\u003e element nested inside the \"content\" div. It should look something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/h1-element.png\" alt=\"h1-element\"\u003e\u003c/p\u003e  \u003cp\u003eClick on the \u003ccode\u003eh1\u003c/code\u003e element; you'll see that it's highlighted in the Elements panel. You've now selected an element with the DevTools.\u003c/p\u003e  \u003ch3\u003eDelete an Element With Chrome DevTools\u003c/h3\u003e  \u003cp\u003ePress the delete button on your keyboard. The element will vanish from the browser's rendered page.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/deleted-header.png\" alt=\"deleted-header\"\u003e\u003c/p\u003e  \u003ch3\u003eDemonstrate That the Source is Not Changed When the DOM Is\u003c/h3\u003e  \u003cp\u003eView the page source. In the Chrome menu bar, click on \"View\", then select \"Developer\", then \"View Source.\" You will see that the HTML is just as it always was, with the deleted element still present.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/html-source.png\" alt=\"html-source\"\u003e\u003c/p\u003e  \u003cp\u003eThe changes in the DOM do not affect the HTML file on the server. When you think about it, that makes sense. If that were true then anyone could be changing carefully-written HTML. (Of course, in the case of Wikipedia, people \u003cem\u003ecan\u003c/em\u003e edit the content using Wikipedia's editor, but they aren't directly accessing the underlying HTML.)\u003c/p\u003e  \u003cp\u003eThe HTML, which lives on the server, \u003cstrong\u003eis unchanged\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eRefresh the page by going to \"View\" and choosing \"Reload this Page.\" You will be reloading the DOM \u003cem\u003efrom the source\u003c/em\u003e. The page content will come back.\u003c/p\u003e  \u003ch3\u003eDemonstrate Opening the DevTools' JavaScript Console\u003c/h3\u003e  \u003cp\u003eAbove, we deleted an element by selecting it in the DevTools and pressing the delete key. We can accomplish the same thing using JavaScript.\u003c/p\u003e  \u003cp\u003eIn DevTools, click the \u003cstrong\u003eConsole\u003c/strong\u003e tab. At the prompt, type the word \u003ccode\u003edocument\u003c/code\u003e and press \"Enter.\" You'll get a \u003ccode\u003e#document\u003c/code\u003e returned. If you hover your mouse over the element, you'll see the entire page highlighted in the browser window. If you expand it, you'll see that it's the exact HTML that you saw in the \u003cstrong\u003eElements\u003c/strong\u003e tab.\u003c/p\u003e  \u003cp\u003eRecall that \u003ccode\u003edocument\u003c/code\u003e is an \u003ccode\u003eobject\u003c/code\u003e; as such, it has properties and \u003ccode\u003emethods,\u003c/code\u003e including a number of different methods that can be used to return elements. Let's find or \u003ccode\u003eselect\u003c/code\u003e an element by speaking JavaScript with the DOM.\u003c/p\u003e  \u003ch3\u003eSelect an Element With JavaScript\u003c/h3\u003e  \u003cp\u003eIn the \u003cstrong\u003eConsole\u003c/strong\u003e type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  document.querySelector('h1'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will return something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\"\u0026gt;...\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGo ahead and click on that disclosure triangle to see more.\u003c/p\u003e  \u003cp\u003eThe return value of \u003ccode\u003edocument.querySelector('h1');\u003c/code\u003e is the DOM node, which is also a JavaScript \u003ccode\u003eobject\u003c/code\u003e. This means that it, in turn, can have methods called on it! This is called \u003cem\u003emethod chaining\u003c/em\u003e. Let's use \u003cem\u003emethod chaining\u003c/em\u003e to remove our node from the DOM.\u003c/p\u003e  \u003ch3\u003eDelete an Element with JavaScript\u003c/h3\u003e  \u003cp\u003eNow type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  document.querySelector('h1').remove(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe heading is gone! We called \u003ccode\u003edocument.querySelector('h1')\u003c/code\u003e to get the node; we then used \u003cem\u003emethod chaining\u003c/em\u003e to call the \u003ccode\u003eremove()\u003c/code\u003e method on the node object. We use dot notation to \u003cem\u003echain\u003c/em\u003e the calls.\u003c/p\u003e  \u003cp\u003eFollow the same process we used earlier to verify that the source has not changed. To restore it, simply refresh the page (i.e. reload the DOM).\u003c/p\u003e  \u003ch3\u003eStoring Node References in Variables\u003c/h3\u003e  \u003cp\u003eQuery methods like \u003ccode\u003equerySelector()\u003c/code\u003e and the other methods we'll be learning about are expressions: they return a value (specifically, a DOM node). As such, we can save the results of the query into a variable. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst header = document.querySelector('h1'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe now have a reference to that node with a meaningful name; we can simply use \u003ccode\u003eheader\u003c/code\u003e any time we need to refer to our node, rather than always having to look it up with \u003ccode\u003edocument.querySelector()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eYou can perhaps imagine how, if we have a program that selects, creates, modifies, or removes a large number of nodes, using this approach will result in code that's easier to read, debug and maintain.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAsk the DOM to find or \u003ccode\u003eselect\u003c/code\u003e an HTML element or elements in the rendered page\u003c/li\u003e \u003cli\u003eRemove the selected elements and/or insert a new element\u003c/li\u003e \u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn this lesson you just did all that stuff! Learning to duplicate what you can do in DevTools with JavaScript \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e DOM programming. The next lessons are going to give you more methods for selecting elements and changing them, but you just changed the DOM. High fives are in order.\u003c/p\u003e","frontPage":false},{"exportId":"youre-an-eventing-expert-now","title":"You're an Eventing Expert Now!","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-youre-an-eventing-expert\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-an-eventing-expert/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-an-eventing-expert\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-an-eventing-expert/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eReflect\u003c/h2\u003e\n\u003cp\u003eRemember our \"Simple Liker\" program? In it we saw that front-end web programming is using three \"pillars\" working together:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e☑ Manipulating the DOM\u003c/li\u003e\n\u003cli\u003e☑ Recognizing JavaScript events\u003c/li\u003e\n\u003cli\u003eCommunicating with the server\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow that you've conquered this section, you've learned all the fundamentals of the second pillar, recognizing JavaScript events. You used JavaScript events to invoke actions, created JavaScript functions and implemented event listeners.\u003c/p\u003e\n\u003ch2\u003eNext Step\u003c/h2\u003e\n\u003cp\u003eTwo pillars down, one to go. You're more than halfway to being able to make your own web applications. Next let's take what we've learned about the DOM and eventing and put it together with server communciation.\u003c/p\u003e","frontPage":false},{"exportId":"review-arrays","title":"Review: Arrays","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-arrays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify data structures and \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eCreate \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eAccess the elements in an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn about nested \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eIntroduce \u003ccode\u003eArray\u003c/code\u003e methods\u003c/li\u003e \u003cli\u003eUnderstand mutability\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSo far, we've been focusing on JavaScript's \u003cem\u003eprimitive\u003c/em\u003e data types — types that represent a single value — in particular, strings, Booleans, and numbers. But sometimes we need a way to store a \u003cem\u003ecollection\u003c/em\u003e of data. For this, we need data structures. In this and the next lesson, we will learn about a very useful data structure: \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eBe sure to follow along with the examples in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify Data Structures and Arrays\u003c/h2\u003e  \u003cp\u003eA \u003cem\u003edata structure\u003c/em\u003e is a means for associating and organizing information. Outside of the programming world, we use data structures all the time. For example, we might have a shopping list of the items we need to buy on our next grocery run or an address book for organizing contact information.\u003c/p\u003e  \u003cp\u003eIf we have a lot of related data, it's best to represent it in a related system. Imagine that we're working on a lottery application that has to represent the winning lottery numbers. We could do that as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstNumber = 32;\u003cbr\u003econst secondNumber = 9;\u003cbr\u003econst thirdNumber = 14;\u003cbr\u003econst fourthNumber = 33;\u003cbr\u003econst fifthNumber = 48;\u003cbr\u003econst powerBall = 5; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe've represented all six pieces of data, but there's no way to refer to them as a group. Every single time we want to reference that combination of winning numbers, we need to remember and type out six different variable names:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstNumber = 32;\u003cbr\u003econst secondNumber = 9;\u003cbr\u003econst thirdNumber = 14;\u003cbr\u003econst fourthNumber = 33;\u003cbr\u003econst fifthNumber = 48;\u003cbr\u003econst powerBall = 5;\u003cbr\u003e\u003cbr\u003efunction logWinningNumbers (first, second, third, fourth, fifth, power) {\u003cbr\u003e  console.log('Winning numbers:', first, second, third, fourth, fifth, power);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogWinningNumbers(firstNumber, secondNumber, thirdNumber, fourthNumber, fifthNumber, powerBall);\u003cbr\u003e// LOG: Winning numbers: 32 9 14 33 48 5\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's so much typing! There are much, much better ways to organize data in JavaScript. Let's learn about one of the most common: the \u003cem\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eCreate Arrays\u003c/h2\u003e  \u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is a list, with the items listed in a particular order, surrounded by square brackets (\u003ccode\u003e[]\u003c/code\u003e) and separated by commas:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e['This', 'is', 'an', 'array', 'of', 'strings.'];\u003cbr\u003e// =\u0026gt; [\"This\", \"is\", \"an\", \"array\", \"of\", \"strings.\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003emembers\u003c/em\u003e or \u003cem\u003eelements\u003c/em\u003e in an \u003ccode\u003eArray\u003c/code\u003e can be data of any type in JavaScript:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e['Hello, world!', 42, null, NaN];\u003cbr\u003e// =\u0026gt; [\"Hello, world!\", 42, null, NaN] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: In some other languages \u003ccode\u003eArrays\u003c/code\u003e \u003cem\u003ecannot include elements of multiple types\u003c/em\u003e. In C, C++, Java, Swift, and others you cannot mix types. JavaScript, Python, Ruby, Lisp, and others permit this.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eArrays are \u003cem\u003eordered\u003c/em\u003e, meaning that the elements in them will always appear in the same order. This also means that the \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[1, 2, 3]\u003c/code\u003e is different from the \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[3, 2, 1]\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eJust like any other type of JavaScript data, we can assign an \u003ccode\u003eArray\u003c/code\u003e to a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37];\u003cbr\u003e\u003cbr\u003econst tvShows = ['Game of Thrones', 'Breaking Bad', 'Veep', 'Mad Men']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can find out how many elements an \u003ccode\u003eArray\u003c/code\u003e contains by checking the \u003ccode\u003eArray\u003c/code\u003e's built-in \u003ccode\u003elength\u003c/code\u003e property:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = ['This', 'array', 'has', 5, 'elements'];\u003cbr\u003e\u003cbr\u003emyArray.length;\u003cbr\u003e// =\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe defined the above \u003ccode\u003eArray\u003c/code\u003es using the \u003cem\u003earray literal\u003c/em\u003e syntax —\u0026nbsp;that is, we literally typed out the \u003ccode\u003eArray\u003c/code\u003e that we wanted to create, square brackets and all. There are other ways to create new \u003ccode\u003eArray\u003c/code\u003es, but they are only necessary for very rare circumstances. For now, use \u003ccode\u003eArray\u003c/code\u003e literals.\u003c/p\u003e  \u003cp\u003eTo get a sense of just how effective \u003ccode\u003eArray\u003c/code\u003es are at keeping data organized, let's rewrite our lottery code to use an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst winningNumbers = [32, 9, 14, 33, 48, 5];\u003cbr\u003e\u003cbr\u003efunction logWinningNumbers (numbers) {\u003cbr\u003e  console.log('Winning numbers:', numbers);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogWinningNumbers(winningNumbers);\u003cbr\u003e// LOG: Winning numbers: [32, 9, 14, 33, 48, 5]\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eArray\u003c/code\u003e provides organization, and we only have to remember \u003cem\u003eone\u003c/em\u003e identifier (\u003ccode\u003ewinningNumbers\u003c/code\u003e) instead of six (\u003ccode\u003efirstNumber\u003c/code\u003e, \u003ccode\u003esecondNumber\u003c/code\u003e, and so on). We can also call \u003ccode\u003eArrays\u003c/code\u003e \u003cem\u003eexpressive\u003c/em\u003e because putting all the winning numbers in a shared data structure communicates to other programmers \"Hey, these things go together.\"\u003c/p\u003e  \u003cp\u003eThe one benefit of storing all six lottery numbers separately is that we had a really easy way to access each individual number. For example, we could just reference \u003ccode\u003epowerBall\u003c/code\u003e to grab the sixth number. Luckily, \u003ccode\u003eArray\u003c/code\u003es offer an equally simple syntax for accessing individual members.\u003c/p\u003e  \u003ch2\u003eUsing the Computed Member Access Operator\u003c/h2\u003e  \u003cp\u003eEvery element in an \u003ccode\u003eArray\u003c/code\u003e is assigned a unique index value that corresponds to its place within the collection, \u003cstrong\u003estarting at 0\u003c/strong\u003e. The first element in the \u003ccode\u003eArray\u003c/code\u003e is at index \u003ccode\u003e0\u003c/code\u003e, the fifth element at index \u003ccode\u003e4\u003c/code\u003e, and the 428th element at index \u003ccode\u003e427\u003c/code\u003e. The \u003cem\u003ecomputed member access operator\u003c/em\u003e (\u003ccode\u003e[]\u003c/code\u003e) allows us to access the element at a given index.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Most people just call it \u003cem\u003ebracket notation\u003c/em\u003e or the \u003cem\u003ebracket operator\u003c/em\u003e, so don't worry too much about remembering the term \u003cem\u003ecomputed member access operator\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAccessing an Element\u003c/h3\u003e  \u003cp\u003eTo access an element, we use the computed member access operator like this: \u003ccode\u003enameOfArray[index]\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst winningNumbers = [32, 9, 14, 33, 48, 5];\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ewinningNumbers[0];\u003cbr\u003e// =\u0026gt; 32\u003cbr\u003e\u003cbr\u003ewinningNumbers[3];\u003cbr\u003e// =\u0026gt; 33 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take a minute to think about how we could access the \u003cstrong\u003elast\u003c/strong\u003e element in any \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf \u003ccode\u003emyArray\u003c/code\u003e contains 10 elements, the final element will be at \u003ccode\u003emyArray[9]\u003c/code\u003e. If \u003ccode\u003emyArray\u003c/code\u003e contains 15000 elements, the final element will be at \u003ccode\u003emyArray[14999]\u003c/code\u003e. So the index of the final element is always one less than the number of elements in the \u003ccode\u003eArray\u003c/code\u003e. If only we had an easy way to figure out how many elements are in the \u003ccode\u003eArray\u003c/code\u003e...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ealphabet.length;\u003cbr\u003e// =\u0026gt; 26\u003cbr\u003e\u003cbr\u003ealphabet[alphabet.length - 1];\u003cbr\u003e// =\u0026gt; \"z\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is why it's called the \u003cstrong\u003e\u003cem\u003ecomputed\u003c/em\u003e\u003c/strong\u003e \u003cem\u003emember access operator\u003c/em\u003e. We placed an expression (\u003ccode\u003ealphabet.length - 1\u003c/code\u003e) inside the square brackets, and the JavaScript engine \u003cem\u003ecomputed\u003c/em\u003e the value of that expression to determine which element we were trying to access. In this case, \u003ccode\u003ealphabet.length - 1\u003c/code\u003e evaluated to \u003ccode\u003e25\u003c/code\u003e, so \u003ccode\u003ealphabet[alphabet.length - 1]\u003c/code\u003e became \u003ccode\u003ealphabet[25]\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eUpdating the Value of an Element\u003c/h2\u003e  \u003cp\u003eWe can also use the computed member access operator (\u003ccode\u003e[]\u003c/code\u003e) — along with the assignment operator (\u003ccode\u003e=\u003c/code\u003e) — to update the value of an element in the array. To do that, we access the element we want then reassign that element's value using \u003ccode\u003e=\u003c/code\u003e. Say we've defined an array, \u003ccode\u003eplanets\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Juptier\", \"Saturn\", \"Uranus\", \"Neptune\"];\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks like we've got a typo. Let's fix it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eplanets[4] = \"Jupiter\"; \u003cbr\u003e//=\u0026gt; \"Jupiter\"\u003cbr\u003e\u003cbr\u003eplanets;\u003cbr\u003e//=\u0026gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You might wonder why that worked, given that we declared \u003ccode\u003eplanets\u003c/code\u003e using \u003ccode\u003econst\u003c/code\u003e. After all, declaring with \u003ccode\u003econst\u003c/code\u003e is supposed to prevent us from reassigning the value of the variable! This is an important thing to know about how \u003ccode\u003econst\u003c/code\u003e works with \u003ccode\u003eArray\u003c/code\u003es. We are not able to reassign the array \u003cem\u003eitself\u003c/em\u003e but we \u003cstrong\u003ecan\u003c/strong\u003e reassign any of its elements. We can also add or delete elements. JavaScript \u003ccode\u003eObject\u003c/code\u003es work similarly when declared using \u003ccode\u003econst\u003c/code\u003e (which isn't surprising, given that \u003ccode\u003eArray\u003c/code\u003es are a special type of \u003ccode\u003eObject\u003c/code\u003e).\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAdding an Element to the End of an Array\u003c/h3\u003e  \u003cp\u003eWhile it is not the best way to accomplish the task, we can also use the computed member access operator to add an element to the end of an array. If conclusive evidence of the existence of \u003ca href=\"https://en.wikipedia.org/wiki/Planet_Nine\"\u003ePlanet Nine\u003c/a\u003e is ever found, we could add it to the end of our array as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eplanets[planets.length] = \"Planet Nine\"; // Why did we use planets.length here?\u003cbr\u003e// =\u0026gt; \"Planet Nine\"\u003cbr\u003e\u003cbr\u003eplanets;\u003cbr\u003e//=\u0026gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Planet Nine\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe will learn better ways to add an element to the end of an array in the next lesson.\u003c/p\u003e  \u003ch2\u003eNested Arrays\u003c/h2\u003e  \u003cp\u003eWe mentioned above that arrays can contain elements of \u003cstrong\u003eany\u003c/strong\u003e data type; this includes \u003cstrong\u003eother \u003ccode\u003eArray\u003c/code\u003es\u003c/strong\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst egregiouslyNestedArray = ['How', ['deep', ['can', ['we', ['go', ['?'], 'Pretty'], 'dang'], 'deep,'], 'it'], 'seems.']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you examine the array above, you'll see it contains three elements, the second of which is itself an array.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[0];\u003cbr\u003e//=\u0026gt; 'How'\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1];\u003cbr\u003e//=\u0026gt; [ 'deep', [ 'can', [ 'we', [Array], 'dang' ], 'deep,' ], 'it' ]\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[2];\u003cbr\u003e//=\u0026gt; 'seems.' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo we know we can access the inner array using \u003ccode\u003eegregiouslyNestedArray[1]\u003c/code\u003e, but how do we access the array nested inside \u003cem\u003ethat\u003c/em\u003e array? We simply add another set of brackets:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][0];\u003cbr\u003e//=\u0026gt; 'deep'\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1][1];\u003cbr\u003e//=\u0026gt; [ 'can', [ 'we', [ 'go', [Array], 'Pretty' ], 'dang' ], 'deep,' ]\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1][2];\u003cbr\u003e//=\u0026gt; 'it' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can continue drilling down in this way, adding another set of brackets for each nested array, until we get to the innermost array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][1][1][1][1];\u003cbr\u003e//=\u0026gt; ['?'] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat innermost array contains only one element, so how would we access that?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][1][1][1][1][0];\u003cbr\u003e//=\u0026gt; '?' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile it's great that \u003ccode\u003eArray\u003c/code\u003es allow us to store other \u003ccode\u003eArray\u003c/code\u003es inside them, this is a terrible way to represent a deeply nested data structure. In general, it is best to keep your \u003ccode\u003eArray\u003c/code\u003es to no more than two levels deep. Two levels is perfect for representing two-dimensional things like a tic-tac-toe board:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst board = [\u003cbr\u003e  ['X', 'O', ' '],\u003cbr\u003e  [' ', 'X', 'O'],\u003cbr\u003e  ['X', ' ', 'O']\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003eboard;\u003cbr\u003e// =\u0026gt; [[\"X\", \"O\", \" \"], [\" \", \"X\", \"O\"], [\"X\", \" \", \"O\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe cool thing about representing a game board like that is in how we can access the different squares by specifying coordinates. The first \u003ccode\u003e[]\u003c/code\u003e operator grabs the row that we want, top (\u003ccode\u003eboard[0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1]\u003c/code\u003e), or bottom (\u003ccode\u003eboard[2]\u003c/code\u003e). For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eboard[1];\u003cbr\u003e// =\u0026gt; [\" \", \"X\", \"O\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second \u003ccode\u003e[]\u003c/code\u003e operator specifies the column, or the square within that row: left (\u003ccode\u003eboard[1][0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1][1]\u003c/code\u003e), or right (\u003ccode\u003eboard[1][2]\u003c/code\u003e). For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eboard[0][0];\u003cbr\u003e// =\u0026gt; \"X\"\u003cbr\u003e\u003cbr\u003eboard[0][2];\u003cbr\u003e// =\u0026gt; \" \"\u003cbr\u003e\u003cbr\u003eboard[2][2];\u003cbr\u003e// =\u0026gt; \"O\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEffectively, we're using X and Y coordinates to refer to data within a two- dimensional structure.\u003c/p\u003e  \u003ch2\u003eArray Methods\u003c/h2\u003e  \u003cp\u003eJavaScript includes a number of built-in \u003ccode\u003eArray\u003c/code\u003e \u003cem\u003emethods\u003c/em\u003e, functions that \u003cem\u003ebelong to\u003c/em\u003e (i.e., can only be called on) \u003ccode\u003eArray\u003c/code\u003es. These methods allow us to manipulate arrays in various ways, for example, to add an element to the beginning or end of an \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe have seen methods already in this course. In an earlier lesson, for example, we learned how to use a String method, \u003ccode\u003etoUpperCase()\u003c/code\u003e, to convert a String to all uppercase:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e\u003cbr\u003estring.toUpperCase();\u003cbr\u003e//=\u0026gt; \"HELLO\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs shown above, we call String methods \u003cem\u003eon\u003c/em\u003e a string or string variable using the dot notation. \u003ccode\u003eArray\u003c/code\u003e methods work in the same way. Some of them will take one or more arguments — for example, the element we want to add to the array. The arguments are passed in the parentheses after the method name.\u003c/p\u003e  \u003cp\u003eWe will learn about these \u003ccode\u003eArray\u003c/code\u003e methods in the next lesson. Before we get to that, however, we need to introduce one more concept.\u003c/p\u003e  \u003ch2\u003eMutability\u003c/h2\u003e  \u003cp\u003eSome methods update or \u003cem\u003emutate\u003c/em\u003e the object they are called on; these methods are referred to as \u003cem\u003edestructive\u003c/em\u003e. Other methods, known as \u003cem\u003enondestructive\u003c/em\u003e methods, leave the object intact. For example, the String method \u003ccode\u003etoUpperCase()\u003c/code\u003e is \u003cem\u003enondestructive\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e\u003cbr\u003estring.toUpperCase();\u003cbr\u003e//=\u0026gt; \"HELLO\"\u003cbr\u003e\u003cbr\u003estring;\u003cbr\u003e//=\u0026gt; \"Hello\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003etoUpperCase()\u003c/code\u003e method returns the uppercased version of \u003ccode\u003estring\u003c/code\u003e, it does not \u003cem\u003echange\u003c/em\u003e its value to uppercase.\u003c/p\u003e  \u003cp\u003eSometimes we want to mutate the original object but, in general, it's good practice to avoid mutating a program's state whenever possible. Otherwise, we won't always know what we're dealing with. You will learn more about immutability and why it's important later in the course. But, in the meantime, it's important to know which JavaScript methods are destructive and which are nondestructive so you can choose the appropriate method for what you need to accomplish.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, We learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to create them, access their elements, and change the value of elements. We also learned that arrays can contain elements of any data type, including other \u003ccode\u003eArray\u003c/code\u003es; we refer to these as \u003cem\u003enested\u003c/em\u003e arrays. Finally, we talked a little bit about the concept of mutability. Armed with this knowledge, we are now ready to tackle JavaScript \u003ccode\u003eArray\u003c/code\u003e methods.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"html5-media","title":"HTML5 Media","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"HTML5-Media\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Media/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Media\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Media/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eThe internet is a highly interactive environment. As HTML authors, we might be\ngiven a media file and be told to put it on the internet. How can we display\nmedia inside of a web page \u003cem\u003eand\u003c/em\u003e make sure that it's viewable to the most\npeople possible on the most devices? That will be the focus of this lesson.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the history of media on the web\u003c/li\u003e\n\u003cli\u003eDemonstrate how to embed audio elements in HTML5\u003c/li\u003e\n\u003cli\u003eDemonstrate how to embed video elements in HTML5\u003c/li\u003e\n\u003cli\u003eLink to audio and video converters\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eExplain The History Of Media On The Web\u003c/h2\u003e\n\n\u003cp\u003eIn the early days of HTML, media elements were more difficult to use. They\nwould often require the user to download and install a plugin. Media plugins\nyou might recall were Macromedia Flash, Adobe Shockwave, and Java. This\ncommercial plugin approach brings about a number of problems.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIt is \u003cem\u003eseriously\u003c/em\u003e annoying to have to download all these plugins\u003c/li\u003e\n\u003cli\u003eThe site is unusable while you wait for a plugin to load\u003c/li\u003e\n\u003cli\u003eThe site is unusable without the plugin\u003c/li\u003e\n\u003cli\u003eThe site is unusable for those using assistive devices\u003c/li\u003e\n\u003cli\u003eBad guys could market a viral site which required the installation of a\nplugin. Plugin installation gives access to the operating system where they\ncould install malware\u003c/li\u003e\n\u003cli\u003eIf a company's plugin became dominant, there would be a splitting of the web\ninto a commercial thing versus the non-commercial thing (\"The Internet,\npowered by Adobe Flash\")\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor these reasons and others, the W3C added media support in HTML5.\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate How to Embed Audio Elements in HTML5\u003c/h2\u003e\n\n\u003cp\u003eTo include audio in a website, use the \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e element. Inside the element,\nwe provide \u003ccode\u003e\u0026lt;source\u0026gt;\u003c/code\u003e elements whose \u003ccode\u003esrc\u003c/code\u003e attributes point to a file on the\nserver and whose \u003ccode\u003etype\u003c/code\u003e attributes specify what type of media it is.\u003c/p\u003e\n\n\u003cp\u003eLet's take a deeper look at \u003ccode\u003etype\u003c/code\u003e. The \u003ccode\u003etype\u003c/code\u003e name is the \"MIME standard\" for\nthe filetype. MDN provides a long list of \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\"\u003eMIME types\u003c/a\u003e. A few\nexamples are \u003ccode\u003etext/html\u003c/code\u003e, \u003ccode\u003etext/css\u003c/code\u003e, \u003ccode\u003eimages/jpeg\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou might recall that files fit into two big buckets: binary and text.\nSometimes we need to be more specific within those groups. We want to say this\nis a text file, but also HTML (\u003ccode\u003etext/html\u003c/code\u003e). Or we want to say this is a binary\nfile, but also an MPEG movie (\u003ccode\u003evideo/mpeg\u003c/code\u003e). A MIME type is a way to note, for\nthe computer, \u003cem\u003eexactly\u003c/em\u003e what type of file is present. It will help the\ncomputer find the right player. It's also a bit more precise than a simple file\nextension (\u003ccode\u003e.docx\u003c/code\u003e or \u003ccode\u003e.img\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eTo pull it all together, the \u003ccode\u003etype\u003c/code\u003e attribute should be set to the \"MIME type\"\nfor the media pointed to by the \u003ccode\u003esrc\u003c/code\u003e attribute for each \u003ccode\u003e\u0026lt;source\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\n\u003cp\u003eLet's look at an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;audio controls\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"purrr.mp3\" type=\"audio/mp3\"\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"purrr.ogg\" type=\"audio/ogg\"\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Sorry your browser doesn't support HTML5 Audio! Please \u0026lt;a href=\"http://browsehappy.com/?locale=en\"\u0026gt;upgrade your browser\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/audio\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn the first line we open the \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e tag with the \u003ccode\u003econtrols\u003c/code\u003e attribute\npresent. This is required to display the audio controls to start and pause\nplayback, adjust the recording's volume, etc.  The presence of the \u003ccode\u003econtrols\u003c/code\u003e\nattribute name itself is sufficient, no other properties are needed. There are\noptional attributes you can provide such as \u003ccode\u003eautoplay\u003c/code\u003e and \u003ccode\u003eloop\u003c/code\u003e. These start\nthe audio on page load and repeat the audio after it ends. The\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"\u003edocumentation\u003c/a\u003e lists all available options.\u003c/p\u003e\n\n\u003cp\u003eIn lines two and three, we provide two different source files for playback. If\nthe browser does not recognize the first file type, it will ignore it and move\non to the next. If neither of the formats are supported it will instead display\nthe paragraph on line four. If the browser is able to play one of the source\nfiles it will ignore any other code below until it reaches the closing\n\u003ccode\u003e\u0026lt;/audio\u0026gt;\u003c/code\u003e tag.\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate How To Embed Video Elements in HTML5\u003c/h2\u003e\n\n\u003cp\u003eEmbedding a video is very similar to embedding audio. This can be done by\nincluding the \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e tag. Inside the video tag are source tags that point to\nthe location of various video file formats and specify their MIME types.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;video controls\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"real-estate.mp4\" type=\"video/mp4\"\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"real-estate.ogv\" type=\"video/ogg\"\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Sorry your browser doesn't support HTML5 Video! Please \u0026lt;a href=\"http://browsehappy.com/?locale=en\"\u0026gt;upgrade your browser\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/video\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLike \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e, we will open the \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e tag with the controls attribute.\nFor the full list of accepted attributes, you can check the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\"\u003eMDN documentation\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eOn lines two and three we provide two different source files for playback. If\nthe browser does not recognize the first filetype it will ignore it and move on\nto the next just the same as it does for the audio element. If neither of the\nformats are supported it will display the paragraph instead on line four. If\nthe browser is able to play one of the source files, it will. The others\nsources within the \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e tag will be ignored.\u003c/p\u003e\n\n\u003ch2\u003eLink to Audio and Video Converters\u003c/h2\u003e\n\n\u003cp\u003eThere are a number of free tools that will convert audio files when needed.\n\u003ca href=\"http://www.mediahuman.com/audio-converter/\"\u003eMediaHuman - Free Audio Converter\u003c/a\u003e\nand \u003ca href=\"https://sourceforge.net/projects/audacity/\"\u003eAudacity - Free Audio Editor/Converter\u003c/a\u003e are two we recommend. For a comparison of support levels for various players, see \n\u003ca href=\"https://praegnanz.de/html5video/\"\u003eJavaScript HTML5 Video Player Comparison\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith \u003ccode\u003eaudio\u003c/code\u003e and \u003ccode\u003evideo\u003c/code\u003e tags, the W3C gives us an open way to ensure that\nmedia remain accessible and open to all platforms.\u003c/p\u003e","frontPage":false},{"exportId":"prototypal-inheritance","title":"Prototypal Inheritance","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-intro-to-prototypal-inheritance\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-intro-to-prototypal-inheritance/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-intro-to-prototypal-inheritance\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-intro-to-prototypal-inheritance/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine \"syntactic sugar\"\u003c/li\u003e\n\u003cli\u003eRecognize that the inheritance model of JavaScript is prototypal\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen you learned object-oriented JavaScript you were exposed to the syntax\nthat came into existence around 2014. This syntax uses the \u003ccode\u003eclass\u003c/code\u003e keyword, and\nmethods called \u003ccode\u003econstructor()\u003c/code\u003es to initialize new instances of the class. We'll\ncall this the \"ES2015 standard.\" ES2015's syntax is similar to Ruby, Python,\nand Java and feels to many developers learning JavaScript as a second language\nto be \"the way OO should be done.\"\u003c/p\u003e\n\n\u003ch2\u003eDefine \"syntactic sugar\"\u003c/h2\u003e\n\n\u003cp\u003eHowever, from JavaScript's perspective, ES2015 syntax is \"syntactic sugar.\" This\nis a term that developers use to communicate \"we made the thing easier to type\nand to read, but underneath, it's still doing something a lot more complicated.\"\nThe object-oriented model that ES2015 simplifies is the \"prototypal object\noriented\" model that JavaScript \u003cem\u003eactually\u003c/em\u003e works in.\u003c/p\u003e\n\n\u003ch2\u003eRecognize that the Inheritance Model of JavaScript is Prototypal\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eIMPORTANT\u003c/strong\u003e: This is a common interview question used to weed-out front end\ndevelopers. When asked what kind of inheritance model JavaScript has, boldly\nand proudly say \"Prototypal!\" To demonstrate mastery of this vocabulary word,\nyou'll need to do the rest of the work in this section, though. :)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe difference between Prototypal and Class-based OO goes all the way back to\nPlato and Aristotle. No kidding!  As we think about how humans categorize and\ntry to teach it to computers, we often find ourselves bumping up against those\nphilosophers who sought to explain those \u003cem\u003esame\u003c/em\u003e ideas \u003cem\u003eto humans\u003c/em\u003e millennia ago.\u003c/p\u003e\n\n\u003cp\u003eIn Plato's Theory of Forms he suggests that when we say \"tree\", our minds build\na foggy rough idea of what all trees are like. Philosophy students call this\n\"the form of a Tree\" or \"Tree-ness.\" It's the thing that makes all trees kinda\nthe same. My conception of \"Tree-ness\" has something to do with bark, and\nleaves, and green, and pine trees, and oak trees. Yours is probably similar.\nThere are also forms for Dogs and Cats. Dogs all share \"bark\" and Cats all\nshare \"meow\" and Politicians all share \"be\u003cem\u003eshady.\" When we find or create a\nspecific _instance\u003c/em\u003e that \"participates in\" or \"references\" a form it stops\nbeing a cloudy murky idea and becomes a real thing. Not just Dog-ness, but my Poodle,\nByron.\u003c/p\u003e\n\n\u003cp\u003eThis should remind you of the object-oriented world of Ruby, Java, Python, and\nES2015 standard JavaScript. Forms are \u003ccode\u003eclass\u003c/code\u003ees and instances are the \u003ccode\u003enew\u003c/code\u003e\nembodiments of those \u003ccode\u003eclass\u003c/code\u003ees with some unique, specific, real data bonded to\nthem (via a constructor).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: Programming, for many, is an exercise in applied philosophy.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAristotle, the biologically-minded student of Plato's, said that his teacher\nwas talking about make-believe nonsense like dragons and unicorns when he\ntalked about \"forms.\"\u003c/p\u003e\n\n\u003cp\u003eNo one has ever seen a Tree-ness or a Dog-ness.\u003c/p\u003e\n\n\u003cp\u003eEverything that \u003cem\u003eis\u003c/em\u003e, Aristotle argued, is like a\nsomething else with more specification added. Everything new is based off of a\npre-existing pattern, a first of its kind, the proto(first) - typos(kind), or\n\u003cem\u003eprototype\u003c/em\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn Poodle is based off the Water-Dog breed...\u003c/li\u003e\n\u003cli\u003e...and a Water-Dogs are breeds based off of Dogs...\u003c/li\u003e\n\u003cli\u003e...and Dogs are domesticated Wolves...\u003c/li\u003e\n\u003cli\u003e...and a wolf is a carnivorous mammal...\u003c/li\u003e\n\u003cli\u003e...which means it's a chordate and all chordates are animals (not plants).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis probably reminds you of basic biology and the \u003ca href=\"https://www.acronymfinder.com/King-Philip-Came-Over-For-Good-Spaghetti-(mnemonic-for-taxonomy-order%3A-Kingdom%2C-Phylum%2C-Class%2C-Order%2C-Family%2C-Genus%2C-Species)-(KPCOFGS).html\"\u003eKPCOFGS\u003c/a\u003e way of naming\nthe things living on this planet.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eKingdom \u0026gt; Phylum \u0026gt; Class \u0026gt; Order \u0026gt; Family \u0026gt; Genus \u0026gt; Species\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eAnimalia \u0026gt; Chordata \u0026gt; Mammalia \u0026gt; Carnivora \u0026gt; Canidae \u0026gt; Canis \u0026gt; lupus\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eGiven this view of the world, it's no\nsurprise Aristotle was a huge fan of making trees (another computer science\nidea that started in philosophy) of these relationships (or, \"taxonomies,\"\nanother computer science idea that started in philosophy). Languages that allow you\nto \"extend what's already there\"; that is, Prototypal\nobject systems are languages like C, Lisp, Self, and JavaScript (natively).\u003c/p\u003e\n\n\u003cp\u003eUltimately, both class-based (or, \"form-based\") and prototype-based models are\nways of describing how to create instances from a common ancestor. Neither is\n\"better\" than the other. They're just different ways of seeing objects (no pun\nintended) in the world.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this section we'll put aside the syntactic sugar of the ES2015 standard.\nWe'll go back to writing classes and objects the way we did from 1997-2014. The\nES2015 standard is fast becoming \u003cem\u003ethe\u003c/em\u003e standard, but it's common to see\nPrototypal patterns in legacy code and in job interview questions.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson you were introduced to the inheritance model of JavaScript,\nprototypal inheritance. You were also shown a common pattern in later versions\nof JavaScript: wrapping ugly or clumsy syntax in cleaner syntax (\"syntactic\nsugar\"). In the remainder of this section we're going to show\nyou how to create prototypal classes and instances in JavaScript.\u003c/p\u003e","frontPage":false},{"exportId":"object-orientation-in-javascript","title":"Object-Orientation in JavaScript","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-object-orientation-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-object-orientation-in-javascript/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-object-orientation-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-object-orientation-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e“Every application is a collection of code; the code’s arrangement is the\ndesign.\" - Sandi Metz\u003c/p\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eReview the meaning of Object Orientation\u003c/li\u003e\n\u003cli\u003eReview the benefits of Object Orientation\u003c/li\u003e\n\u003cli\u003eIntroduce how JavaScript can be written using Object Orientation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far in JavaScript, we've discussed the \"Three Pillars of Web Programming\",\n\u003cstrong\u003eRecognizing JS events\u003c/strong\u003e, \u003cstrong\u003eManipulating the DOM\u003c/strong\u003e, and \u003cstrong\u003eCommunicate with the\nserver\u003c/strong\u003e, and we saw how these pillars are incorporated into web applications.\u003c/p\u003e\n\n\u003cp\u003eThe process we've learned so far has been:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e An HTML page renders on the screen\u003c/li\u003e\n\u003cli\u003e JavaScript is executed when the page loads\u003c/li\u003e\n\u003cli\u003e In the JavaScript, event listeners are created pointing to 'free-standing'\nfunctions, listed out in the JavaScript file.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn that process, we have three primary takeaways:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSome of these functions handle DOM manipulation\u003c/li\u003e\n\u003cli\u003eSome functions handle server communication\u003c/li\u003e\n\u003cli\u003eStill other functions may serve as 'helper' functions to others\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese functions can be invoked in whatever order we set, or from within each\nother. This set up works great when just getting off the ground; with a handful\nof functions, we can get an interactive website up and running. What happens,\nthough, when we want to go beyond a small website?\u003c/p\u003e\n\n\u003cp\u003eLet's go back and take a look at the first app we discussed, \u003ca href=\"https://github.com/learn-co-curriculum/fewpjs-stitching-together-the-three-pillars\"\u003eSimple Liker\u003c/a\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e\n\n\u003cp\u003eImagine we want to add a feature to this - we want to display the number of\nusers who have liked this message. Let's say we can get this info from the\nserver, so we write a function that fetches the data and updates the DOM to\ndisplay it. This function could be called when the page loads as well as\nwhenever anyone clicks the 'like' button.\u003c/p\u003e\n\n\u003cp\u003eGreat, but what happens when we start to expand further? Right now we only have\nthe one message from Byron. What if we could have multiple messages to like?\nMore functions would be needed. We'd probably have to modify the code that we\nhave, as well, making it a more complicated.\u003c/p\u003e\n\n\u003cp\u003eContinuing to expand our app, what about displaying a list of names of people\nwho liked this post? More code is needed. How about being able to post our \u003cem\u003eown\u003c/em\u003e\nmessages for other users to like? Even more code. What about adding the option\nto add message comments? A lot more code.\u003c/p\u003e\n\n\u003cp\u003eAt this point, our Simple Liker would no longer be simple, and pretty soon, the\ncode needed to keep all our features working has grown quite long. What's worse,\nall of the different things that happen on our website are starting to get\njumbled together in a heap of functions. You may be able to get everything\nworking for every feature added but the functions have become intertwined and dependent on each other. Coding this way comes at a cost:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe more complicated our code gets, the harder it is to understand and\nchange it.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn larger applications, we might be dealing with hundreds of functions, DOM\nelements, and events, all tied together, forming a web of\nrelationships. It becomes increasingly difficult to follow the flow of actions\nin your code as more and more functions are introduced. Changes to one function\nmay have unforeseen affects on functions \u003cem\u003e'downstream'\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis web of dependent, free-standing functions can be improved with\norganization. We do things like group functions together, arrange code in a\nreadable way. Our options, however, are still limited - it's still a big web.\u003c/p\u003e\n\n\u003cp\u003eIn this and the following lessons, we're going to take a look at an alternative\nway to structure our code, Object Orientation. By understanding and using OO, we\ncan \u003cem\u003edesign\u003c/em\u003e our code to be easier to read, understand and change.\u003c/p\u003e\n\n\u003ch2\u003eDefine Object Orientation\u003c/h2\u003e\n\n\u003cp\u003eWith Object Orientation, instead of a web, we can think of our code as a\ncollection of \u003cem\u003ecells\u003c/em\u003e. These cells are separated from each other, can contain\n\u003cem\u003einformation\u003c/em\u003e, bits of data like variables, as well as \u003cem\u003ebehaviors\u003c/em\u003e, functions\ndirectly related to that data.\u003c/p\u003e\n\n\u003cp\u003eConsider the lessons so far: any sort of data we had to store and manipulate\nhas been either stored in variables or passed to functions as arguments. Code\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet name = 'Evan';\u003cbr\u003elet age = 34;\u003cbr\u003e\u003cbr\u003efunction sayHello(nameOfPerson) {\u003cbr\u003e  console.log(`Hello, my name is ${nameOfPerson}.`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction sayAge(age) {\u003cbr\u003e  console.log(`I am ${age} years old.`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction haveBirthday(age) {\u003cbr\u003e  return age + 1;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003esayHello(name);\u003cbr\u003e// =\u0026gt; Hello, my name is Evan.\u003cbr\u003esayAge(age);\u003cbr\u003e// =\u0026gt; I am 34 years old.\u003cbr\u003eage = haveBirthday(age);\u003cbr\u003esayAge(age);\u003cbr\u003e// =\u0026gt; I am 35 years old.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've got some data, a \u003ccode\u003eString\u003c/code\u003e and an \u003ccode\u003eInteger\u003c/code\u003e assigned to variables,\nand a few functions for using and reading that data. The functions and data are\nclosely related. Combined, they convey information about a \u003cem\u003eperson\u003c/em\u003e. While we,\nas human beings, might be able to interpret the above code as all related, as\nfar as code structure, \u003cstrong\u003ethere isn't anything structurally that actually\n\u003cem\u003eencodes\u003c/em\u003e those relationships\u003c/strong\u003e. The \u003cem\u003enames\u003c/em\u003e of our functions\nand variables are the only indicators that they are related.\u003c/p\u003e\n\n\u003cp\u003eObject Orientation grants us the ability to write code that \u003cstrong\u003estructurally\u003c/strong\u003e\nestablishes the relationships between data and functions. If we rewrite our\nfirst code snippet applying Object Orientation, we could write something like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person {\u003cbr\u003e  constructor(name, age) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.age = age;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  sayHello() {\u003cbr\u003e    console.log(`Hello, my name is ${this.name}.`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  sayAge() {\u003cbr\u003e    console.log(`I am ${this.age} years old.`);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  haveBirthday(age) {\u003cbr\u003e    console.log(`It's my birthday!`);\u003cbr\u003e    this.age += 1;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet evan = new Person('Evan', 34);\u003cbr\u003e\u003cbr\u003eevan.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Evan.\u003cbr\u003eevan.sayAge();\u003cbr\u003e// =\u0026gt; I am 34 years old.\u003cbr\u003eevan.haveBirthday();\u003cbr\u003e// =\u0026gt; It's my birthday.\u003cbr\u003eevan.sayAge();\u003cbr\u003e// =\u0026gt; I am 35 years old.\u003cbr\u003eevan;\u003cbr\u003e// =\u0026gt; Person { name: 'Evan', age: 35 }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYou can try out the code above. Type \u003ccode\u003enode\u003c/code\u003e in your terminal, then\ncopy and paste the above code into the Node environment to play around\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eDo not be alarmed if some of this looks unfamiliar. We will go into greater\ndetail later about specific syntax. For now, though, take a moment to notice\nwhat changed. Where did our variables go? Now we just have one: \u003ccode\u003eevan\u003c/code\u003e.\nInstead of being assigned to a data type like a \u003ccode\u003eString\u003c/code\u003e or an \u003ccode\u003eInteger\u003c/code\u003e,\n\u003ccode\u003eevan\u003c/code\u003e assigned to a \u003ccode\u003ePerson\u003c/code\u003e object that \u003cem\u003econtains\u003c/em\u003e our data.\u003c/p\u003e\n\n\u003cp\u003eThis \u003ccode\u003ePerson\u003c/code\u003e object is a \u003ccode\u003eclass\u003c/code\u003e, the fundamental structure underlying all\nObject Oriented code in JavaScript. The line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet evan = new Person('Evan', 34);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...initializes a copy, a single \u003cstrong\u003e\u003cem\u003einstance\u003c/em\u003e\u003c/strong\u003e of the \u003ccode\u003ePerson\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e (more on\nthis later). Two arguments are passed in, \u003ccode\u003e'Evan'\u003c/code\u003e and \u003ccode\u003e34\u003c/code\u003e, and the resulting\ninstance is assigned to a variable.\u003c/p\u003e\n\n\u003cp\u003eThe instance we just created contains the functions that were previously\nfree-standing, \u003ccode\u003esayHello\u003c/code\u003e, \u003ccode\u003esayAge\u003c/code\u003e, and \u003ccode\u003ehaveBirthday\u003c/code\u003e. Notice here that we're\nno longer passing data as arguments to these functions when we call them.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eFor clarity, in these lessons, functions that are contained within a \u003ccode\u003eclass\u003c/code\u003e\nor \u003ccode\u003eclass\u003c/code\u003e instance will be referred to as 'methods'.\nThe word \u003cem\u003e'function'\u003c/em\u003e will be used when referring to functions outside of any \u003ccode\u003eclass\u003c/code\u003e\nobject.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eInstead of receiving arguments, our \u003cem\u003emethods\u003c/em\u003e have access to the data as\n\u003ccode\u003ethis.name\u003c/code\u003e and \u003ccode\u003ethis.age\u003c/code\u003e! These are referred to as \u003cem\u003eproperties\u003c/em\u003e, and are\nboth assigned when a new instance of the \u003ccode\u003ePerson\u003c/code\u003e class is created.\u003c/p\u003e\n\n\u003cp\u003eWith our data and \u003cem\u003emethods\u003c/em\u003e captured in the \u003ccode\u003ePerson\u003c/code\u003e instance, we've\n\u003cstrong\u003e\u003cem\u003eencapsulated\u003c/em\u003e\u003c/strong\u003e all the information and behaviors that represent a \u003cem\u003eperson\u003c/em\u003e in\nour code!\u003c/p\u003e\n\n\u003ch2\u003eThe Benefits of Object Orientation\u003c/h2\u003e\n\n\u003cp\u003eThe end result of our code example hasn't changed - we are still able to perform\nthe same actions with minor modifications. However, by designing and creating\n\u003ccode\u003eclass\u003c/code\u003ees like this, we can gain some important benefits:\u003c/p\u003e\n\n\u003ch3\u003eEasier to Change\u003c/h3\u003e\n\n\u003cp\u003eIf we want to add more code related to a \u003cem\u003eperson\u003c/em\u003e, instead of just adding it in\nto a long list of functions, we now have a clear, logical place\nto put it. This makes it easier to extend code, and encourages good organization\nin the future.\u003c/p\u003e\n\n\u003ch3\u003eOffers Better Data Control\u003c/h3\u003e\n\n\u003cp\u003eBy encapsulating our data in a \u003ccode\u003eclass\u003c/code\u003e, we can protect that data from unexpected\nchanges. When using local variables like \u003ccode\u003elet name = \"Evan\"\u003c/code\u003e, the variable is\nvulnerable to change from any function. Functions, meanwhile, will do what they\nare programmed to do, regardless of the data they are given. They are oblivious.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction sayHello(nameOfPerson) {\u003cbr\u003e  console.log(`Hello, my name is ${nameOfPerson}.`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003esayHello([23, 'Golden Apple']);\u003cbr\u003e// =\u0026gt; Hello, my name is 23,Golden Apple.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn a \u003ccode\u003eclass\u003c/code\u003e, however, we can design our code so that methods with a specific\npurpose only interact with and change the data they are supposed to. We don't\nneed a stand alone \u003ccode\u003esayHello\u003c/code\u003e function that takes in any argument and tries to\nlog it, we just need it for saying a particular person's name.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet sarah = new Person('Sarah', 31);\u003cbr\u003esarah.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Sarah.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEqually, using a \u003ccode\u003eclass\u003c/code\u003e to encapsulate our data allows us to be specific in how\nthat data is used. The \u003ccode\u003esarah\u003c/code\u003e variable in the code snippet above points to an\nentire \u003cem\u003einstance\u003c/em\u003e of the \u003ccode\u003ePerson\u003c/code\u003e class. Wherever \u003ccode\u003esarah\u003c/code\u003e goes, \u003ccode\u003esarah\u003c/code\u003e will\nalways carry its properties and methods with it. If we need to access\ndata stored on the instance, we can get property values directly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esarah.name;\u003cbr\u003e// =\u0026gt; 'Sarah'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr use the built in methods \u003cem\u003ewe've\u003c/em\u003e defined to access the information however we choose:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esarah.sayAge();\u003cbr\u003e// =\u0026gt; I am 31 years old.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eEasy to Replicate\u003c/h3\u003e\n\n\u003cp\u003eEvery time we initialize a new instance of the \u003ccode\u003ePerson\u003c/code\u003e class, we create a\nunique object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet sarah = new Person('Sarah', 31);\u003cbr\u003elet evan = new Person('Evan', 34);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince each instance of \u003ccode\u003ePerson\u003c/code\u003e has unique data, our instance methods will\nbehave accordingly and only use \u003cem\u003etheir\u003c/em\u003e data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevan.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Evan.\u003cbr\u003esarah.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Sarah.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis turns out to be a fantastic help when dealing with many collections of\nsimilar data. For example, comments on a blog post - while\nthe data is unique to each, comments should always 'behave' the same way - they\nall display the same on the page. With Object Orientation, we can write a\n\u003ccode\u003eComment\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e and create an 'instance' for each unique comment.\u003c/p\u003e\n\n\u003cp\u003eOnce we establish the data and methods for a \u003ccode\u003eclass\u003c/code\u003e, we can create as many\ncopies as we need.\u003c/p\u003e\n\n\u003ch3\u003eImproves Understanding by Adding Meaning\u003c/h3\u003e\n\n\u003cp\u003eBy encapsulating related information and behavior, we have organized our code in\na more meaningful way. It \u003cem\u003emakes sense\u003c/em\u003e to us as humans to group related things\nlike this. Object Orientation works well for representing real world systems\nand relationships in code, which makes it easier to comprehend.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet sarah = new Person('Sarah', 31);\u003cbr\u003elet evan = new Person('Evan', 34);\u003cbr\u003elet restaurant = new Restaurant('La Villa', '261 5th Ave, Brooklyn, NY');\u003cbr\u003e\u003cbr\u003eevan.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Evan.\u003cbr\u003esarah.sayHello();\u003cbr\u003e// =\u0026gt; Hello, my name is Sarah.\u003cbr\u003e\u003cbr\u003erestaurant.addGuest(evan);\u003cbr\u003erestaurant.addGuest(sarah);\u003cbr\u003erestaurant.serveGuest(evan, new Drink('Water'));\u003cbr\u003erestaurant.serveGuest(sarah, new Drink('Water'));\u003cbr\u003e\u003cbr\u003eevan.saySmallTalk();\u003cbr\u003e// =\u0026gt; How about this weather?\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll \u003ccode\u003eclass\u003c/code\u003ees are structured in a consistent way, so even though we don't\nknow the details of the \u003ccode\u003eRestaurant\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e, we can still infer how the\n\u003ccode\u003eRestaurant\u003c/code\u003e, \u003ccode\u003ePerson\u003c/code\u003e and \u003ccode\u003eDrink\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003ees might interact.\u003c/p\u003e\n\n\u003cp\u003eMany systems of inter-related things can be represented as objects interacting\nwith one another, and being able to visualize these relationships helps when\ndesigning complex applications. Even the more abstract concepts of web\nprogramming can be easier to understand using Object Orientation, though it\ntakes some practice to think in the OO mindset.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere is a lot involved in writing Object Oriented code. In the upcoming\nlessons, we will build \u003ccode\u003eclass\u003c/code\u003ees from scratch and talk about the different ways\nwe can design them. Later on, we will introduce \u003ccode\u003eclass\u003c/code\u003e interactions and how\nmany instances of different \u003ccode\u003eclass\u003c/code\u003ees can work together. Object Orientation\ncan fundamentally change the way we design our code, but as we explore, we will\nsee how proper design encourages code that is easier to use, understand, change\nand maintain.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS\"\u003eMDN - Object Oriented JavaScript for Beginners\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"review-array-methods","title":"Review: Array Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eAdd elements to an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove elements from an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eReplace elements in an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the last lesson, we learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to create them and access their elements. In this lab, we will dive into JavaScript's \u003ccode\u003eArray\u003c/code\u003e methods, which enable us to add, remove, and change elements.\u003c/p\u003e  \u003cp\u003eWe discussed the fact that it's important to pay attention to whether the method is \u003cem\u003edestructive\u003c/em\u003e (i.e., it \u003cem\u003emutates\u003c/em\u003e the array) or \u003cem\u003enondestructive\u003c/em\u003e. Another factor to pay attention to is what the \u003cem\u003ereturn value\u003c/em\u003e of each of these methods is. Be sure to follow along and experiment with each method in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e until you understand how it works, what it does to the original array, and what it returns.\u003c/p\u003e  \u003ch2\u003eAdd Elements to an Array\u003c/h2\u003e  \u003cp\u003eWe'll start with the JavaScript methods we can use to add elements to an array: \u003ccode\u003epush()\u003c/code\u003e and \u003ccode\u003eunshift()\u003c/code\u003e, which are \u003cem\u003edestructive\u003c/em\u003e methods, and the spread operator, which is \u003cem\u003enondestructive\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThese two methods work in the same way:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethey take one or more arguments (the element or elements you want to add)\u003c/li\u003e \u003cli\u003ethey \u003cem\u003ereturn\u003c/em\u003e the length of the modified array\u003c/li\u003e \u003cli\u003ethey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe difference is that the \u003ccode\u003e.push()\u003c/code\u003e method adds elements to the end of an \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003eunshift()\u003c/code\u003e adds them to the beginning of the array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst superheroes = ['Catwoman', 'She-Hulk', 'Jessica Jones'];\u003cbr\u003e\u003cbr\u003esuperheroes.push('Wonder Woman');\u003cbr\u003e// =\u0026gt; 4\u003cbr\u003e\u003cbr\u003esuperheroes;\u003cbr\u003e// =\u0026gt; [\"Catwoman\", \"She-Hulk\", \"Jessica Jones\", \"Wonder Woman\"]\u003cbr\u003e\u003cbr\u003econst cities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003ecities.unshift('Boston', 'Chicago');\u003cbr\u003e// =\u0026gt; 3\u003cbr\u003e\u003cbr\u003ecities;\u003cbr\u003e// =\u0026gt; [\"Boston\", \"Chicago\", \"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBefore moving on, try out the examples above as well as some examples of your own in the REPL.\u003c/p\u003e  \u003ch3\u003eSpread Operator\u003c/h3\u003e  \u003cp\u003eThe \u003cem\u003espread operator\u003c/em\u003e, which looks like an ellipsis: \u003ccode\u003e...\u003c/code\u003e, allows us to \"spread out\" the elements of an existing \u003ccode\u003eArray\u003c/code\u003e into a new \u003ccode\u003eArray\u003c/code\u003e, creating a copy:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003econst copyOfCoolCities = [...coolCities];\u003cbr\u003e\u003cbr\u003ecopyOfCoolCities;\u003cbr\u003e//=\u0026gt; [\"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote about copying arrays in Javascript\u003c/strong\u003e You might wonder why we would do this rather than just \u003ccode\u003ecopyOfCoolCities = coolCities\u003c/code\u003e. The answer is that \u003ccode\u003ecoolCities\u003c/code\u003e \u003cem\u003epoints to a location in memory\u003c/em\u003e and when you use the assignment operator to create a copy, you create a second variable that points to the \u003cem\u003esame\u003c/em\u003e location. What this means is that, if you change \u003ccode\u003ecopyOfCoolCities\u003c/code\u003e, \u003ccode\u003ecoolCities\u003c/code\u003e is changed as well (and vice versa).\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eA Second note about copying arrays in JavaScript\u003c/strong\u003e Copying arrays in JavaScript is complicated! Some methods of copying create \u003cem\u003edeep\u003c/em\u003e copies and some create \u003cem\u003eshallow\u003c/em\u003e copies. Using the spread operator to copy an array creates a shallow copy. What this means is that, if you use it to copy a nested array, the inner array (or arrays) \u003cem\u003estill points to the same location in memory\u003c/em\u003e as in the original array. So if you modify the \u003cem\u003einner\u003c/em\u003e array in the copy, it changes the inner array in the original array as well (and vice versa). Don't worry too much about shallow and deep copies at this point: just know that you can safely use the spread operator to clone \u003cem\u003enon-nested\u003c/em\u003e arrays.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eNote that, because the spread operator is an operator rather than a method, it works differently than \u003ccode\u003epush()\u003c/code\u003e and \u003ccode\u003eunshift()\u003c/code\u003e: in the example above, we're constructing an \u003ccode\u003eArray\u003c/code\u003e using \u003cem\u003eliteral\u003c/em\u003e notation (i.e., typing the square brackets) and populating it by using the spread operator on the \u003ccode\u003eArray\u003c/code\u003e we want to copy.\u003c/p\u003e  \u003cp\u003eWhere the spread operator comes in especially handy is when we want to add one or more new elements either before or after the elements in the original array (or both) without mutating the original array. To add an element to the front of the new array, we simply type in the new element before spreading the elements in the original array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003econst allCities = ['Los Angeles', ...coolCities];\u003cbr\u003e\u003cbr\u003ecoolCities;\u003cbr\u003e// =\u0026gt; [\"New York\", \"San Francisco\"]\u003cbr\u003e\u003cbr\u003eallCities;\u003cbr\u003e// =\u0026gt; [\"Los Angeles\", \"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd, as you might expect, to add a new item to the end of an \u003ccode\u003eArray\u003c/code\u003e, we type in the new element \u003cem\u003eafter\u003c/em\u003e spreading the elements in the original array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCats = ['Hobbes', 'Felix', 'Tom'];\u003cbr\u003e\u003cbr\u003econst allCats = [...coolCats, 'Garfield'];\u003cbr\u003e\u003cbr\u003ecoolCats;\u003cbr\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\"]\u003cbr\u003e\u003cbr\u003eallCats;\u003cbr\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\", \"Garfield\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, in both cases, we created a new \u003ccode\u003eArray\u003c/code\u003e instead of modifying the original one —\u0026nbsp;our \u003ccode\u003ecoolCities\u003c/code\u003e and \u003ccode\u003ecoolCats\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003es were untouched. Because we didn't modify the original array, in order to save the results of our work we had to assign it to a variable.\u003c/p\u003e  \u003cp\u003eBe sure to experiment with the spread operator in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e until you're comfortable with how it works — it will come in handy later!\u003c/p\u003e  \u003ch2\u003eRemove Elements from an Array\u003c/h2\u003e  \u003cp\u003eAs complements for \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, respectively, we have \u003ccode\u003e.pop()\u003c/code\u003e and \u003ccode\u003e.shift()\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e.pop()\u003c/code\u003e and \u003ccode\u003e.shift()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eAs with \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, these two methods work in the same way:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethey don't take any arguments\u003c/li\u003e \u003cli\u003ethey remove a single element\u003c/li\u003e \u003cli\u003ethey \u003cem\u003ereturn\u003c/em\u003e the element that is removed\u003c/li\u003e \u003cli\u003ethey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003e.pop()\u003c/code\u003e method removes the last element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.pop();\u003cbr\u003e// =\u0026gt; \"Sun\"\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003e.shift()\u003c/code\u003e method removes the first element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.shift();\u003cbr\u003e// =\u0026gt; \"Mon\"\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice above that both methods returned the removed element and mutated the original array.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eTo remove elements from an \u003ccode\u003eArray\u003c/code\u003e nondestructively (without mutating the original \u003ccode\u003eArray\u003c/code\u003e), we can use the \u003ccode\u003e.slice()\u003c/code\u003e method. Just as the name implies, \u003ccode\u003e.slice()\u003c/code\u003e returns a portion, or \u003cstrong\u003eslice\u003c/strong\u003e, of an \u003ccode\u003eArray\u003c/code\u003e. The method takes 0, 1, or 2 arguments and returns a new array containing the sliced elements.\u003c/p\u003e  \u003ch4\u003eWith No Arguments\u003c/h4\u003e  \u003cp\u003eIf we don't provide any arguments, \u003ccode\u003e.slice()\u003c/code\u003e will return a copy of the original \u003ccode\u003eArray\u003c/code\u003e with all elements intact:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003econst copyOfPrimes = primes.slice();\u003cbr\u003e\u003cbr\u003eprimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7]\u003cbr\u003e\u003cbr\u003ecopyOfPrimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that creating a copy using \u003ccode\u003e.slice()\u003c/code\u003e works the same way as if you use the spread operator: they both create a \u003cem\u003eshallow\u003c/em\u003e copy, and with both the copy points to a different object in memory than the original. If you add an element to one of the arrays, it does \u003cstrong\u003enot\u003c/strong\u003e get added to the others:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003econst copyOfPrimesUsingSlice = primes.slice();\u003cbr\u003e\u003cbr\u003econst copyOfPrimesUsingSpreadOperator = [...primes];\u003cbr\u003e\u003cbr\u003eprimes.push(11);\u003cbr\u003e// =\u0026gt; 5\u003cbr\u003e\u003cbr\u003eprimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7, 11]\u003cbr\u003e\u003cbr\u003ecopyOfPrimesUsingSlice;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7]\u003cbr\u003e\u003cbr\u003ecopyOfPrimesUsingSpreadOperator;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7] \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eWith Arguments\u003c/h4\u003e  \u003cp\u003eWe can also provide one or two arguments to \u003ccode\u003e.slice()\u003c/code\u003e: the first is the index where the slice should begin and the second is the index \u003cstrong\u003ebefore which\u003c/strong\u003e it should end:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(2, 5);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf no second argument is provided, the slice will run from the index specified by the first argument to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(5);\u003cbr\u003e// =\u0026gt; [\"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo return a new \u003ccode\u003eArray\u003c/code\u003e with the first element removed, we call \u003ccode\u003e.slice(1)\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(1);\u003cbr\u003e// =\u0026gt; [\"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can return an array with the last element removed in a way that will look familiar from the previous lesson:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(0, days.length - 1);\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, \u003ccode\u003e.slice()\u003c/code\u003e provides an easier syntax for referencing the last element (or elements) in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(-1);\u003cbr\u003e// =\u0026gt; [\"Sun\"]\u003cbr\u003e\u003cbr\u003edays.slice(-3);\u003cbr\u003e// =\u0026gt; [\"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.slice(0, -1);\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we provide a negative index, the JavaScript engine knows to start counting from the last element in the \u003ccode\u003eArray\u003c/code\u003e instead of the first.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eUnlike \u003ccode\u003e.slice()\u003c/code\u003e, which is nondestructive, \u003ccode\u003e.splice()\u003c/code\u003e performs destructive actions. Depending on how many arguments we give it, \u003ccode\u003e.splice()\u003c/code\u003e allows us to remove elements, add elements, or replace elements (or any combination of the three).\u003c/p\u003e  \u003ch4\u003eWith a Single Argument\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first argument expected by \u003ccode\u003e.splice()\u003c/code\u003e is the index at which to begin the splice. If we only provide the one argument, \u003ccode\u003e.splice()\u003c/code\u003e will destructively remove a chunk of the original \u003ccode\u003eArray\u003c/code\u003e beginning at the provided index and continuing to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.splice(2);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e \u003cstrong\u003eboth\u003c/strong\u003e mutated the original array (by removing a chunk) \u003cstrong\u003eand\u003c/strong\u003e returned a new array containing the removed chunk.\u003c/p\u003e  \u003cp\u003eWe can use a negative 'start' index with \u003ccode\u003esplice()\u003c/code\u003e, the same as with \u003ccode\u003eslice()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.splice(-2);\u003cbr\u003e// =\u0026gt; [\"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"] \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eWith Two Arguments\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start, deleteCount) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we provide two arguments to \u003ccode\u003e.splice()\u003c/code\u003e, the first is still the index at which to begin splicing, and the second dictates how many elements we want to remove from the \u003ccode\u003eArray\u003c/code\u003e. For example, to remove \u003ccode\u003e3\u003c/code\u003e elements, starting with the element at index \u003ccode\u003e2\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.splice(2, 3);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere again, we see that \u003ccode\u003esplice()\u003c/code\u003e removed elements from the original array, mutating that array, and returned the removed elements in a new array.\u003c/p\u003e  \u003ch2\u003eReplace Elements in an Array\u003c/h2\u003e  \u003ch3\u003e\n\u003ccode\u003e.splice()\u003c/code\u003e with 3+ arguments\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start, deleteCount, item1, item2, ...) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter the first two, every additional argument passed to \u003ccode\u003e.splice()\u003c/code\u003e will be inserted into the \u003ccode\u003eArray\u003c/code\u003e at the position indicated by the first argument. We can replace a single element in an \u003ccode\u003eArray\u003c/code\u003e as follows, discarding a card and drawing a new one:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst cards = ['Ace of Spades', 'Jack of Clubs', 'Nine of Clubs', 'Nine of Diamonds', 'Three of Hearts'];\u003cbr\u003e\u003cbr\u003ecards.splice(2, 1, 'Ace of Clubs');\u003cbr\u003e// =\u0026gt; [\"Nine of Clubs\"]\u003cbr\u003e\u003cbr\u003ecards;\u003cbr\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have deleted \"Nine of Clubs\" and inserted \"Ace of Clubs\" in place, effectively \u003cem\u003ereplacing\u003c/em\u003e the original card.\u003c/p\u003e  \u003cp\u003eOr we can remove two elements and insert three new ones as our restaurant expands its vegetarian options:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst menu = ['Jalapeno Poppers', 'Cheeseburger', 'Fish and Chips', 'French Fries', 'Onion Rings'];\u003cbr\u003e\u003cbr\u003emenu.splice(1, 2, 'Veggie Burger', 'House Salad', 'Teriyaki Tofu');\u003cbr\u003e// =\u0026gt; [\"Cheeseburger\", \"Fish and Chips\"]\u003cbr\u003e\u003cbr\u003emenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe aren't required to remove anything with \u003ccode\u003e.splice()\u003c/code\u003e — we can use it to insert any number of elements anywhere within an \u003ccode\u003eArray\u003c/code\u003e by passing 0 as the second argument. Here we're adding new books to our library in alphabetical order:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst books = ['Bleak House', 'David Copperfield', 'Our Mutual Friend'];\u003cbr\u003e\u003cbr\u003ebooks.splice(2, 0, 'Great Expectations', 'Oliver Twist');\u003cbr\u003e// =\u0026gt; []\u003cbr\u003e\u003cbr\u003ebooks;\u003cbr\u003e// =\u0026gt; [\"Bleak House\", \"David Copperfield\", \"Great Expectations\", \"Oliver Twist\", \"Our Mutual Friend\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e returns an empty \u003ccode\u003eArray\u003c/code\u003e when we provide a second argument of \u003ccode\u003e0\u003c/code\u003e. This makes sense because the return value is the set of elements that were removed, and we're telling it to remove \u003ccode\u003e0\u003c/code\u003e elements.\u003c/p\u003e  \u003cp\u003eKeep playing around with \u003ccode\u003e.splice()\u003c/code\u003e in the REPL to get comfortable with it.\u003c/p\u003e  \u003ch3\u003eUsing the Computed Member Access Operator to Replace Elements\u003c/h3\u003e  \u003cp\u003eRecall from the previous lesson that we can also use the computed member access operator to replace a single element in an \u003ccode\u003eArray\u003c/code\u003e. If we only need to replace one element, this is a simpler approach:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst cards = ['Ace of Spades', 'Jack of Clubs', 'Nine of Clubs', 'Nine of Diamonds', 'Three of Hearts'];\u003cbr\u003e\u003cbr\u003ecards[2] = 'Ace of Clubs';\u003cbr\u003e// =\u0026gt; \"Ace of Clubs\"\u003cbr\u003e\u003cbr\u003ecards;\u003cbr\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBoth this approach and \u003ccode\u003esplice()\u003c/code\u003e are destructive —\u0026nbsp;they modify the original \u003ccode\u003eArray\u003c/code\u003e. There's a \u003cem\u003enondestructive\u003c/em\u003e way to replace or add items at arbitrary points within an \u003ccode\u003eArray\u003c/code\u003e; to do it we need to combine the \u003ccode\u003eslice()\u003c/code\u003e method and the spread operator.\u003c/p\u003e  \u003ch3\u003eSlicing and Spreading\u003c/h3\u003e  \u003cp\u003eCombining \u003ccode\u003e.slice()\u003c/code\u003e and the spread operator allows us to replace elements \u003cem\u003enondestructively\u003c/em\u003e, leaving the original \u003ccode\u003eArray\u003c/code\u003e unharmed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst menu = ['Jalapeno Poppers', 'Cheeseburger', 'Fish and Chips', 'French Fries', 'Onion Rings'];\u003cbr\u003e\u003cbr\u003econst newMenu = [...menu.slice(0, 1), 'Veggie Burger', 'House Salad', 'Teriyaki Tofu', ...menu.slice(3)];\u003cbr\u003e\u003cbr\u003emenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Cheeseburger\", \"Fish and Chips\", \"French Fries\", \"Onion Rings\"]\u003cbr\u003e\u003cbr\u003enewMenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's unpack this a little bit. We're assigning an array to \u003ccode\u003enewMenu\u003c/code\u003e using literal notation. Inside the brackets, we are spreading the result of calling slice on \u003ccode\u003emenu\u003c/code\u003e with the arguments \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e, then typing in three new elements, then spreading the result of calling slice on \u003ccode\u003emenu\u003c/code\u003e with the argument \u003ccode\u003e3\u003c/code\u003e. Here, we are taking advantage of the fact that the \u003ccode\u003eslice()\u003c/code\u003e method \u003cstrong\u003ereturns a new array\u003c/strong\u003e. We can spread the elements in \u003cstrong\u003ethat\u003c/strong\u003e array just as we can with any other array.\u003c/p\u003e  \u003cp\u003ePlay around with this in the REPL until it makes sense; break it down into its component parts and try each piece on its own. It's the trickiest thing that we've encountered in this lesson, so don't sweat it if it takes a little while to sink in!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've learned a variety of methods we can use to remove, add, and replace the elements in \u003ccode\u003eArray\u003c/code\u003es. We've learned that some methods are \u003cem\u003edestructive\u003c/em\u003e and some are \u003cem\u003enondestructive\u003c/em\u003e. With this knowledge, you have the tools you need to manipulate \u003ccode\u003eArray\u003c/code\u003es in very complex ways.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/array-methods/javascript-array-methods.jpg\" alt=\"JavaScript Array Methods\"\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"constructor-functions","title":"Constructor Functions","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-constructor-functions-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-constructor-functions-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-constructor-functions-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-constructor-functions-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a constructor function\u003c/li\u003e\n\u003cli\u003eUse a constructor function to create an object\u003c/li\u003e\n\u003cli\u003eExplain what a constructor function is and how it works\u003c/li\u003e\n\u003cli\u003eExplain what \u003ccode\u003enew\u003c/code\u003e is and how it works with the constructor function\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eJavaScript is sometimes a bit confusing. It has a native type \u003ccode\u003eObject\u003c/code\u003e. How does\nthat relate to Object-Orientation? And how does the desire to avoid repeating\nourselves relate to them both? In this lesson we'll work with plain old\nJavaScript \u003ccode\u003eObject\u003c/code\u003es, and slowly transition to one of the key elements of OO, the\nconstructor function and its partner, \u003ccode\u003enew\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCreate a Constructor Function\u003c/h2\u003e\n\n\u003cp\u003eIt's sometime handy to represent data with objects, which gives us key/value\npairs. For example, we may represent a user as the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst bobby = {name: 'bobby', age: 20, hometown: 'Philadelphia'}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow imagine that we had a couple of users:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst bobby = {\u003cbr\u003e  name: 'bobby',\u003cbr\u003e  age: 20,\u003cbr\u003e  hometown: 'Philadelphia'\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst susan = {\u003cbr\u003e  name: 'susan',\u003cbr\u003e  age: 28,\u003cbr\u003e  hometown: 'Boston'\u003cbr\u003e}\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat. Two nice users.\u003c/p\u003e\n\n\u003cp\u003eNote, that with both objects sharing exactly the same keys, and only the values\ndiffering, we are \u003cem\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\"\u003erepeating ourselves\u003c/a\u003e\u003c/em\u003e.  We would like a mechanism to\nconstruct objects with the same attributes (that is, keys), while assigning\ndifferent values to those keys. The name for what kind of function does this\nvaries across many popular programming languages, but we'll call it \u003cstrong\u003ea factory\nfunction\u003c/strong\u003e because it spits out new instances.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, age, hometown) {\u003cbr\u003e    return {\u003cbr\u003e    name, // don't forget ES6 power-tools, this is the same as `name: name`\u003cbr\u003e    age,\u003cbr\u003e    hometown,\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet byronPoodle = User(\"Karbit's Byron By the Bay\", 5, \"Manhattan\")\u003cbr\u003ebyronPoodle.age // =\u0026gt; 5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInterestingly \u003ccode\u003etypeof\u003c/code\u003e confirms \u003ccode\u003ebyronPoodle\u003c/code\u003e is an \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; typeof byronPoodle\u003cbr\u003e'object'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, something's not quite as clear as we might like it to be. If we ask\n\u003ccode\u003ebyronPoodle\u003c/code\u003e what made it, the answer is...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; byronPoodle.constructor\u003cbr\u003e[Function: Object]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003ebyronPoodle\u003c/code\u003e is certainly an \u003ccode\u003eObject\u003c/code\u003e but it's more specific than\nthat: it's a \u003ccode\u003eUser\u003c/code\u003e. We'd really like for this special kind of object to be\nreflected when we ask it what it is. We'd like for a mystical process to come\nalong and say you are not merely an \u003ccode\u003eObject\u003c/code\u003e, you are a \u003ccode\u003eUser\u003c/code\u003e or a \u003ccode\u003eDog\u003c/code\u003e.\nWe tell JavaScript to bless the thing created by the constructor function\ninto being something more specific than \u003ccode\u003eObject\u003c/code\u003e by using the keyword \u003ccode\u003enew\u003c/code\u003e.\nUsing \u003ccode\u003enew\u003c/code\u003e requires that we evolve our \u003cem\u003efactory function\u003c/em\u003e into a \u003cem\u003econstructor\nfunction\u003c/em\u003e. It's the same idea, but with a few subtle additions.\u003c/p\u003e\n\n\u003ch2\u003eExplain What \u003ccode\u003enew\u003c/code\u003e Is and How It Works With the Constructor Function\u003c/h2\u003e\n\n\u003cp\u003eLets create a \u003cem\u003econstructor function\u003c/em\u003e.  Constructor functions must be paired with the \u003ccode\u003enew\u003c/code\u003e\nkeyword (which we'll cover in a moment).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.email = email;\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat's \u003ccode\u003ethis\u003c/code\u003e here? It refers to the function's context. Since functions in\nJavaScript are also \u003ccode\u003eObject\u003c/code\u003es, a function can say \"on me, set a property.\" As\nwe read this function we might think \"OK, so you're going to run a function\nthat will set properties on itself. That's not doing anything useful.\"\u003c/p\u003e\n\n\u003cp\u003eWe would be right.\u003c/p\u003e\n\n\u003cp\u003eWhat we really want to say is something like \"Hey, constructor function, when\nyou run, create a new copy of yourself, leaving the original unchanged and on\nthat \u003cem\u003eparticular\u003c/em\u003e copy, set the properties based on the arguments passed into\nthe function. The keyword \u003ccode\u003enew\u003c/code\u003e tells the constructor function to do exactly\nthat.\u003c/p\u003e\n\n\u003cp\u003ePut the two together like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.email = email;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet lauren = new User(\"Lauren\", \"lauren@example.com\");\u003cbr\u003elauren.name //=\u0026gt; \"Lauren\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eRemember you can and should try these out for yourself in the JavaScript\nconsole or in the \u003ccode\u003enode\u003c/code\u003e REPL\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat's happening here hinges on the \u003ccode\u003enew\u003c/code\u003e keyword. When we invoke the function\nwith \u003ccode\u003enew\u003c/code\u003e before it, you can imagine an imaginary JavaScript \u003ccode\u003eObject\u003c/code\u003e being\ncopied for use in the \u003ccode\u003eUser\u003c/code\u003e function. The constructor function \u003cstrong\u003eis not\nchanged\u003c/strong\u003e; the freshly-created, new context \u003cstrong\u003eis\u003c/strong\u003e changed.\u003c/p\u003e\n\n\u003cp\u003eHere's the code sample above, but with some more comments. Follow the\n[numbers] 1-6.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e    this.name = name;   // [2] Set my context's property name to what\u003cbr\u003e                      //     came in in the first argument (name)\u003cbr\u003e    this.email = email; // [3] Set my context's property email to what\u003cbr\u003e                      //     came in in the second argument (email)\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// [1] Create a new \"context\", that's what `new` does\u003cbr\u003e// Use _that_ new context inside of the execution of the `User` function\u003cbr\u003e// also pass two parameters, \"Lauren\" and \"lauren@example.com\"\u003cbr\u003e\u003cbr\u003e// [4]: Assign the new context thing with its this properties set to the\u003cbr\u003e// variable `lauren`\u003cbr\u003elet lauren = new User(\"Lauren\", \"lauren@example.com\");\u003cbr\u003e\u003cbr\u003e// [5]: Ask the new context for what's in its `.name` property\u003cbr\u003elauren.name //=\u0026gt; [6] \"Lauren\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can ask interesting questions about the \u003ccode\u003elauren\u003c/code\u003e variable. Building on the\nprevious code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; typeof lauren\u003cbr\u003e'object'\u003cbr\u003e\u0026gt; lauren.constructor\u003cbr\u003e[Function: User]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sorta makes sense, the function that constructed \u003ccode\u003elauren\u003c/code\u003e, or the\n\u003ccode\u003econstructor\u003c/code\u003e is \u003ccode\u003eUser\u003c/code\u003e. The instance \u003ccode\u003elauren\u003c/code\u003e is an \u003ccode\u003eobject\u003c/code\u003e. Given what we\nknow about the types available in JavaScript, \u003ccode\u003eobject\u003c/code\u003e makes good sense (not a\n\u003ccode\u003eNumber\u003c/code\u003e or a \u003ccode\u003eString\u003c/code\u003e, that's for sure!)\u003c/p\u003e\n\n\u003cp\u003eSince we know one OO pattern, we might be wondering how to add methods to the\n\u003ccode\u003eUser\u003c/code\u003e instances. It should be obvious that if we can set a property to point to\na value like \u003ccode\u003e\"Lauren\"\u003c/code\u003e or \u003ccode\u003e\"lauren@example.com\"\u003c/code\u003e, we should be able to set an\nanonymous function to a property. That function would have access to the\n\u003ccode\u003ethis\u003c/code\u003e context created when the instance was \u003ccode\u003enew\u003c/code\u003e'd into existence.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.email = email;\u003cbr\u003e    this.sayHello = function() {\u003cbr\u003e        console.log(`Hello everybody, my name is ${this.name} whom you've been\u003cbr\u003emailing at ${this.email}!`);\u003cbr\u003e    };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet lauren = new User('lauren', 'lauren@example.com');\u003cbr\u003elauren.sayHello(); //=\u0026gt; Hello everybody, my name is lauren whom you've been mailing at lauren@example.com!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFeel free to try it with other names and emails to prove to yourself that you\ncan create instances from this constructor function.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson you've seen the constructor function and the \u003ccode\u003enew\u003c/code\u003e keyword work\nto create new instances with instance data and instance methods. We've pretty\nmuch got an object oriented language at our fingers! Not bad!\u003c/p\u003e\n\n\u003cp\u003eThere's one problem with this design. It's incredibly memory inefficient. Take\na look at the code and imagine what that inefficiency could be. We'll explore\nit together in the next lesson!\u003c/p\u003e","frontPage":false},{"exportId":"context-and-implicit-setting","title":"Context and Implicit Setting","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-context-and-implicit-setting\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-implicit-setting/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-implicit-setting\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-implicit-setting/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine execution context\u003c/li\u003e\n\u003cli\u003eDefine \u003ccode\u003ethis\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eAccess implicitly-set context in an Object-contained function expression\u003c/li\u003e\n\u003cli\u003eAccess implicitly-set context global Object in a function expression\u003c/li\u003e\n\u003cli\u003ePrevent implicitly setting context in function calls with \u003ccode\u003euse strict\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eUse available JavaScript runtimes to validate understanding\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson we provided definitions of:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\"Execution Context\"\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ethis\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eapply\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebind\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ebut then built an application that didn't use them. However, with a\nrecord-oriented application built, we will have a shared context to understand\nthese challenging concepts in JavaScript.\u003c/p\u003e\n\n\u003ch2\u003eDefine Execution Context\u003c/h2\u003e\n\n\u003cp\u003eWhen a function in JavaScript \u003cstrong\u003e\u003cem\u003eis called\u003c/em\u003e\u003c/strong\u003e, it is provided an \u003cem\u003eexecution\ncontext\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003eexecution context\u003c/em\u003e is a JavaScript \u003ccode\u003eObject\u003c/code\u003e that is either implicitly or\nexplicitly passed at the time of the function's call.\u003c/p\u003e\n\n\u003cp\u003eThe implicit way of passing a context with a function is something we have to\nmemorize and accept as part of the nature of JavaScript.\u003c/p\u003e\n\n\u003cp\u003eThe tools for explicitly passing a context at function call-time are the\nmethods \u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003eapply\u003c/code\u003e, and \u003ccode\u003ebind.\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003ethis\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe JavaScript keyword \u003ccode\u003ethis\u003c/code\u003e returns the current \u003cem\u003eexecution context\u003c/em\u003e while the\nfunction is being run.  Whether that context was passed explicitly or\nimplicitly, \u003ccode\u003ethis\u003c/code\u003e returns it.\u003c/p\u003e\n\n\u003cp\u003eSome people think that \u003ccode\u003ethis\u003c/code\u003e is a strange thing to call such an important\nconcept. But pronouns like \"this,\" \"he,\" or \"here\" all refer to a \u003cem\u003econtext\u003c/em\u003e. At\na concert, if I say (scream) \"It's noisy here,\" you don't think \"Here in the\nMilky Way galaxy? I disagree.  Space has little oxygen as a sound medium and is\ntherefore quite quiet.\" Instead, you recognize the most-relevant context is at\nthis significant and unusual event with giant speakers and guitar players and\ntherefore infer that \"here\" refers to \"this concert.\" JavaScript thought the\nbest pronoun to use was \u003ccode\u003ethis\u003c/code\u003e, and it seems sensible to us.\u003c/p\u003e\n\n\u003ch2\u003eAccess Implicitly-Set Context in an Object-Contained Function Expression\u003c/h2\u003e\n\n\u003cp\u003eWhen a function is called, it gets an execution context passed in. That context\nwill be whatever the function was 'called on' - the object to the left of the\n\u003ccode\u003e.\u003c/code\u003e  where it's called. In the below example, \u003ccode\u003ebyronPoodle\u003c/code\u003e is to the\nleft of the \u003ccode\u003e.\u003c/code\u003e. In \u003ccode\u003ebyronPoodle.warn()\u003c/code\u003e, \u003ccode\u003ewarn\u003c/code\u003e gets \u003ccode\u003ebyronPoodle\u003c/code\u003e as its\ncontext.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet byronPoodle = {\u003cbr\u003e  name: \"Byron\",\u003cbr\u003e  sonicAttack: \"ear-rupturing atomic bark\",\u003cbr\u003e  mostHatedThing: \"noises in the apartment hallway\",\u003cbr\u003e  warn: function() {\u003cbr\u003e    console.log(`${this.name} issues an ${this.sonicAttack} when he hears ${this.mostHatedThing}`)\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003ebyronPoodle.warn()\u003cbr\u003e// LOG: Byron issues an ear-rupturing atomic bark when he hears noises in the apartment hallway\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, \u003ccode\u003ethis\u003c/code\u003e was set to \u003ccode\u003ebyronPoodle\u003c/code\u003e. So, \u003ccode\u003ethis.name\u003c/code\u003e was \u003ccode\u003ebyronPoodle.name\u003c/code\u003e (\u003ccode\u003e\"Byron\"\u003c/code\u003e), \u003ccode\u003ethis.sonicAttack\u003c/code\u003e was \u003ccode\u003ebyronPoodle.sonicAttack\u003c/code\u003e (\u003ccode\u003e\"ear-rupturing atomic bark\"\u003c/code\u003e) and \u003ccode\u003ethis.mostHatedThing\u003c/code\u003e was \u003ccode\u003ebyronPoodle.mostHatedThing\u003c/code\u003e (\u003ccode\u003e\"noises in the apartment hallway\"\u003c/code\u003e)\u003c/p\u003e\n\n\u003cp\u003eA simple way of saying it: when you call \u003ccode\u003esomeObject.someFunction()\u003c/code\u003e, the\ncontext inside of \u003ccode\u003esomeFunction\u003c/code\u003e will be the thing to the left of the \u003ccode\u003e.\u003c/code\u003e:\n\u003ccode\u003esomeObject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere's another interesting example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet speak = function() { return `It ain't easy being ${this.name}`}\u003cbr\u003elet frog = { name: \"Kermit\" }\u003cbr\u003elet pig = { name: \"Miss Piggy\" }\u003cbr\u003efrog.speak = speak\u003cbr\u003epig.speak = speak\u003cbr\u003efrog.speak === pig.speak //=\u0026gt; true\u003cbr\u003efrog.speak()  //=\u0026gt; \"It ain't easy being Kermit\"\u003cbr\u003epig.speak()  //=\u0026gt; \"It ain't easy being Miss Piggy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAgain, the crucial realization is that the context used \u003cem\u003einside\u003c/em\u003e the function\n\u003ccode\u003espeak\u003c/code\u003e is defined by what's \"left of the dot.\"\u003c/p\u003e\n\n\u003cp\u003eThis is the general behavior for understanding context-setting in JavaScript.\nWe'll now cover some special cases of this general behavior.\u003c/p\u003e\n\n\u003ch2\u003eAccess Implicitly-Set Global Object in a Function Expression\u003c/h2\u003e\n\n\u003cp\u003eWhat happens if we invoke a function and it's \u003cstrong\u003enot\u003c/strong\u003e defined inside an\n\u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet contextReturner = function() {\u003cbr\u003e  return this\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econtextReturner() //=\u0026gt; window\u003cbr\u003econtextReturner() === window //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen no object is to the left of the function, JavaScript invisibly adds \u003cstrong\u003ethe\nglobal object\u003c/strong\u003e. Thus \u003ccode\u003econtextReturner\u003c/code\u003e is, from JavaScript's point of view,\nthe same as \u003ccode\u003ewindow.contextReturner\u003c/code\u003e. You can check for yourself in the console: \u003ccode\u003ewindow.contextReturner === contextReturner //=\u0026gt; true\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA simple way of saying it: when you call \u003ccode\u003esomeFunction()\u003c/code\u003e, the context inside\nof \u003ccode\u003esomeFunction\u003c/code\u003e will be the thing to the left of the \u003ccode\u003e.\u003c/code\u003e.  Since there's\nnothing there, JavaScript swaps in the global object.\u003c/p\u003e\n\n\u003cp\u003eIn browser-based JavaScript environment (or \"JavaScript runtime\"), the global\nobject is called \u003ccode\u003ewindow\u003c/code\u003e. In NodeJS, it's called \u003ccode\u003eglobal\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThus, in Chrome:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet locationReturner = function() {\u003cbr\u003e  return this.location.host\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elocationReturner() //=\u0026gt; URL host serving this page e.g. developer.mozilla.org\u003cbr\u003e// Implicitly: window.locationReturner(); this will be `window` in the function\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's worth noting that even in a function inside of another function, the inner\nfunction's default context is still the global object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction a() {\u003cbr\u003e  return function b() {\u003cbr\u003e    return this;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ea()() === window //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePrevent Implicitly Setting a Global Object In Function Calls With \u003ccode\u003euse strict\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eWe wish we could say that the default context was \u003cstrong\u003ealways\u003c/strong\u003e the global object.\nIt'd make things simple.\u003c/p\u003e\n\n\u003cp\u003eHowever, in JavaScript, if the engine sees the \u003ccode\u003eString\u003c/code\u003e \"use strict\" inside a\nfunction, it will \u003cem\u003estop\u003c/em\u003e passing the implicit \u003cem\u003eexecution context\u003c/em\u003e of the global\nobject.  If JavaScript sees \u003ccode\u003e\"use strict\"\u003c/code\u003e at the top of a JavaScript code\nfile, it will apply this rule (and other strict behaviors) to \u003cem\u003eall functions\u003c/em\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction looseyGoosey() {\u003cbr\u003e  return this\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction noInferringAllowed() {\u003cbr\u003e  \"use strict\"\u003cbr\u003e  return this\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elooseyGoosey() === window; //=\u0026gt; true\u003cbr\u003enoInferringAllowed() === undefined //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are really no guidelines as to which you'll see more. Some programmers\nthink \u003ccode\u003estrict\u003c/code\u003e prevents confusing bugs (seems wise!); others think it's an\nobvious rule of the language and squelching it is against the language's love\nof functions (a decent argument!). Generally, we advise you to think of the\n\"default mode\" as the one that permits an \u003cem\u003eimplicit\u003c/em\u003e presumption of context.\nFor more on strict-mode, see the Resources.\u003c/p\u003e\n\n\u003ch3\u003eAccess Implicitly-Set New Object in Object-Oriented Programming Constructor\u003c/h3\u003e\n\n\u003cp\u003eThis lesson covers how \u003ccode\u003ethis\u003c/code\u003e is implicitly set. An important place where\n\u003ccode\u003ethis\u003c/code\u003e is implicitly set is when new instances of classes are created. Class\ndefinition and instance creation are hallmarks of object-oriented (\"OO\")\nprogramming, a style you might not be familiar with in JavaScript. Rather than\nignore this important case until later, we're going to cover it now, even\nthough you might not be familiar with OO programming.  If you're not familiar\nwith OO in JavaScript (or anywhere for that matter!), that's OK, just remember\nthis rule for later.  When you see \u003ccode\u003ethis\u003c/code\u003e inside of a class definition in\nJavaScript, come back and make sure you understand this rule.\u003c/p\u003e\n\n\u003cp\u003eIt's for convenience and feels \"natural\" from a linguistic point of view: \"The\nthing we're setting up should be the default context for work during its\nconstruction in its own function that's called \u003ccode\u003econstructor\u003c/code\u003e.\"\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Poodle{\u003cbr\u003e  constructor(name, pronoun){\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.pronoun = pronoun\u003cbr\u003e    this.sonicAttack = \"ear-rupturing atomic bark\"\u003cbr\u003e    this.mostHatedThing = \"noises in the apartment hallway\"\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  warn() {\u003cbr\u003e    console.log(`${this.name} issues an ${this.sonicAttack} when ${this.pronoun} hears ${this.mostHatedThing}`)\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003elet b = new Poodle(\"Byron\", \"he\")\u003cbr\u003eb.warn() //=\u0026gt; Byron issues an ear-rupturing atomic bark when he hears noises in the apartment hallway\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUse Available JavaScript Runtimes to Validate Understanding\u003c/h2\u003e\n\n\u003cp\u003eThere are two main JavaScript environments you'll encounter as you get started\nwith JavaScript.  Those environments are also called runtimes. They are:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ein the browser\u003c/li\u003e\n\u003cli\u003ein the \"shell\" when running the NodeJS program\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFor the remainder of this module, it's very important that you not only\n\u003cstrong\u003e\u003cem\u003eread\u003c/em\u003e\u003c/strong\u003e these lessons but that you practice, adjust, test, and explore the\nmaterial within one (or both!) of those JavaScript runtimes.\u003c/p\u003e\n\n\u003cp\u003eTake the initiative to own your own learning and try out these samples (with\nsome variation!) in a runtime of your choice.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo sum up the discussion thus far:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExecution context is set at function call-time, implicitly or explicitly.\u003c/li\u003e\n\u003cli\u003eIn \"bare\" function calls, the context is automatically set to the global object unless prevented by \u003ccode\u003e\"use strict\"\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIn \"non-bare\" function calls, the context is automatically set to the \"object to the left of the dot.\"\u003c/li\u003e\n\u003cli\u003e(For Object-Oriented JavaScript) Execution context defaults to the new thing being created in a \u003ccode\u003eclass\u003c/code\u003e's \u003ccode\u003econstructor\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis covers the \u003cem\u003eimplicit\u003c/em\u003e context-setting rules. We'll now learn about the\n\u003cem\u003eexplicit\u003c/em\u003e context-setting rules.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003estrict\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"review-conditionals","title":"Review: Conditionals","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-review-conditionals\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-review-conditionals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-review-conditionals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview what constitutes an expression in JavaScript\u003c/li\u003e \u003cli\u003eOrganize code using block statements\u003c/li\u003e \u003cli\u003eReview the difference between truthy and falsy values\u003c/li\u003e \u003cli\u003eReview how to use conditional statements\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIf you're hungry, you make a sandwich. If the traffic light is green, you press the gas pedal. If your rent is due, then you pay your rent. This breaks down into a lot of conditional choices:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e hungry → make sandwich.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → don't make sandwich.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e light is green → press gas pedal.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → press brake pedal.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e it's the first of the month → pay rent.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → don't pay rent.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWriting code involves the same type of logic —\u0026nbsp;we only want an action to happen \u003cem\u003eif\u003c/em\u003e a certain condition is met. In the programming world, this is called \u003cstrong\u003econtrol flow\u003c/strong\u003e because, well, it helps \u003cem\u003econtrol\u003c/em\u003e the \u003cem\u003eflow\u003c/em\u003e of an application.\u003c/p\u003e  \u003cp\u003eBefore we dive into JavaScript's conditional structures, let's review a few concepts that provide the syntactic underpinnings.\u003c/p\u003e  \u003ch2\u003eReview What Constitutes an Expression in JavaScript\u003c/h2\u003e  \u003cp\u003eA JavaScript expression is \u003cstrong\u003ea unit of code that returns a value\u003c/strong\u003e. Primitive values are expressions because they resolve to a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9;\u003cbr\u003e// =\u0026gt; 9\u003cbr\u003e\u003cbr\u003e('Hello, world!');\u003cbr\u003e// =\u0026gt; \"Hello, world!\"\u003cbr\u003e\u003cbr\u003efalse;\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo are arithmetic and string operations. This code resolves to the number \u003ccode\u003e64\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e8 * 8;\u003cbr\u003e// =\u0026gt; 64 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd this resolves to the string \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Hello, ' + 'world!';\u003cbr\u003e// =\u0026gt; \"Hello, world!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDitto for comparison and assignment operations. This comparison resolves to the boolean \u003ccode\u003etrue\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2 \u0026gt; 1;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVariable declarations are NOT expressions...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst greeting = \"Hello!\";\u003cbr\u003elet answer; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...but variable assignments ARE, resolving to the assigned value (\u003ccode\u003e42\u003c/code\u003e, in this case):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eanswer = 42;\u003cbr\u003e// =\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFinally, variable lookups are also expressions, resolving to the value contained in the variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fullName = 'Ada Lovelace';\u003cbr\u003e\u003cbr\u003efullName;\u003cbr\u003e// =\u0026gt; \"Ada Lovelace\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eOrganize Code Using Block Statements\u003c/h2\u003e  \u003cp\u003eA block statement is a pair of curly braces (\u003ccode\u003e{ }\u003c/code\u003e) used to group JavaScript statements. It plays a role in conditional statements, loops, and functions.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e    ('This line is a JavaScript statement nested inside a block statement!');\u003cbr\u003e\u003cbr\u003e    // This is also a statement nested inside a block:\u003cbr\u003e    5 * 5 - 5;\u003cbr\u003e\u003cbr\u003e    // And so are these:\u003cbr\u003e    const weCan = 'group multiple statements';\u003cbr\u003e\u003cbr\u003e    const suchAs = 'these variable declarations';\u003cbr\u003e\u003cbr\u003e    const insideA = 'block statement.';\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; 20 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBlock statements return the value of the \u003cem\u003elast evaluated expression\u003c/em\u003e inside the curly braces. Remember, the variable declarations are \u003cem\u003enot\u003c/em\u003e expressions, so the value of \u003ccode\u003e5 * 5 - 5\u003c/code\u003e is returned.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The statement above \u003cem\u003eimplicitly\u003c/em\u003e returns 20 (the value returned by \u003ccode\u003e5 * 5 - 5\u003c/code\u003e, when evaluated). Functions, which we will discuss in an upcoming lesson, also contain all of their code inside curly braces, but for functions, we need to \u003cem\u003eexplicitly\u003c/em\u003e use the word \u003ccode\u003ereturn\u003c/code\u003e to tell JavaScript what we want the return value to be (if we want one at all). Just remember that the \u003cem\u003eimplicit return is something unique to block statements\u003c/em\u003e like the ones we use for \u003ccode\u003eif...else\u003c/code\u003e and loop statements.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eReview the Difference Between Truthy and Falsy Values\u003c/h2\u003e  \u003cp\u003eTruthiness and falsiness indicate what happens when the value is converted into a boolean. If, upon conversion, the value becomes \u003ccode\u003etrue\u003c/code\u003e, we say that it's a \u003cstrong\u003etruthy\u003c/strong\u003e value. If it becomes \u003ccode\u003efalse\u003c/code\u003e, we say that it's \u003cstrong\u003efalsy\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eIn JavaScript, the following values are \u003cstrong\u003efalsy\u003c/strong\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/li\u003e \u003cli\u003eAn empty string (\u003ccode\u003e''\u003c/code\u003e, \u003ccode\u003e\"\"\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cstrong\u003eEvery other value is truthy\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eTo check whether a value is truthy or falsy in our browser's JS console, we can pass it to the global \u003ccode\u003eBoolean\u003c/code\u003e object, which converts the value into its boolean equivalent:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eBoolean(false);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(null);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(undefined);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(0);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(NaN);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean('');\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(true);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean(42);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean('Hello, world!');\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean({ firstName: 'Brendan', lastName: 'Eich' });\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: \u003ccode\u003edocument.all\u003c/code\u003e is also falsy, but don't worry about it for now. (Or ever, really — it's an imperfect solution for legacy code compatibility.) Ready to put that killer new vocabulary to the test? Here we go!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eReview How to Use Conditional Statements\u003c/h2\u003e  \u003cp\u003eJavaScript includes three structures for implementing code conditionally: \u003cem\u003eif statements\u003c/em\u003e, \u003cem\u003eswitch statements\u003c/em\u003e, and \u003cem\u003eternary expressions\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003eif\u003c/code\u003e statement\u003c/h3\u003e  \u003cp\u003eTo write a basic \u003ccode\u003eif\u003c/code\u003e statement, we use the following structure:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (condition) {\u003cbr\u003e    // Block of code\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt consists of the \u003ccode\u003eif\u003c/code\u003e keyword followed by the condition to be checked in parentheses.  After that comes a \u003cem\u003eblock statement\u003c/em\u003e (more commonly called a \u003cem\u003ecode block\u003c/em\u003e): one or more JavaScript expressions or statements enclosed in \u003ccode\u003e{}\u003c/code\u003e. The \u003cem\u003ecode block\u003c/em\u003e contains the code we want to execute \u003cem\u003eif\u003c/em\u003e the condition returns a truthy value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 30;\u003cbr\u003e\u003cbr\u003elet isAdult;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the condition returns a \u003cstrong\u003efalsy\u003c/strong\u003e value, do nothing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 14;\u003cbr\u003e\u003cbr\u003elet isAdult;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eelse\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eOften we want to run one block of code when the condition returns a \u003ccode\u003etruthy\u003c/code\u003e value and a \u003cem\u003edifferent\u003c/em\u003e block of code when it returns a \u003ccode\u003efalsey\u003c/code\u003e value. To do this, we use an \u003ccode\u003eelse\u003c/code\u003e clause:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 14;\u003cbr\u003e\u003cbr\u003elet isAdult;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e} else {\u003cbr\u003e    isAdult = false;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the \u003ccode\u003eelse\u003c/code\u003e clause \u003cstrong\u003edoes not take a condition\u003c/strong\u003e — if the condition for the \u003ccode\u003eif\u003c/code\u003e returns a falsey value, we want the \u003ccode\u003eelse\u003c/code\u003e code block to run \u003cstrong\u003eno matter what\u003c/strong\u003e. This means that exactly one of the code blocks will \u003cem\u003ealways\u003c/em\u003e run.\u003c/p\u003e  \u003ch4\u003eTernary Expressions\u003c/h4\u003e  \u003cp\u003eRecall that this is the exact situation where we can use a ternary expression. Here's what the code above would look like using the ternary operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 26;\u003cbr\u003e\u003cbr\u003elet isAdult;\u003cbr\u003e\u003cbr\u003eage \u0026gt;= 18 ? (isAdult = true) : (isAdult = false);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we assign \u003ccode\u003eisAdult\u003c/code\u003e as \u003ccode\u003etrue\u003c/code\u003e if the condition returns a truthy value and as \u003ccode\u003efalse\u003c/code\u003e otherwise, exactly like the version using \u003ccode\u003eif\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eRemember that a ternary is an \u003cem\u003eexpression\u003c/em\u003e — it returns a \u003cem\u003evalue\u003c/em\u003e. What this means is that we can simplify the code above a bit and assign the \u003cem\u003eresult\u003c/em\u003e of the ternary directly to a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 26;\u003cbr\u003econst isAdult = age \u0026gt;= 18 ? true : false;\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e What is the ternary above doing? Basically, it's saying: \"when the conditional code returns \u003ccode\u003etrue\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e, and when the conditional code returns \u003ccode\u003efalse\u003c/code\u003e, return \u003ccode\u003efalse\u003c/code\u003e.\" Sounds a bit redundant, doesn't it? When the return values are \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e as in the example above, you actually don't need to use a ternary — or an \u003ccode\u003eif...else\u003c/code\u003e — at all! This is because \u003cstrong\u003e\u003cem\u003ethe conditional is an expression as well\u003c/em\u003e\u003c/strong\u003e. The return value of \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e is a \u003cem\u003eBoolean value\u003c/em\u003e (\u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e), so it can be assigned directly to our \u003ccode\u003eisAdult\u003c/code\u003e variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 6;\u003cbr\u003econst isAdult = age \u0026gt;= 18;\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e//=\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe ternary (or \u003ccode\u003eif...else\u003c/code\u003e) is only necessary if the desired return value is something other than a Boolean:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 20;\u003cbr\u003econst ageMessage = age \u0026gt;= 18 ? \"Congratulations! You're an adult!\" : \"Enjoy your childhood while it lasts!\";\u003cbr\u003e\u003cbr\u003eageMessage;\u003cbr\u003e//=\u0026gt; \"Congratulations! You're an adult!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf it helps you visualize what's going on, you can wrap the condition, the expressions, or the entire ternary in parentheses:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 17;\u003cbr\u003e\u003cbr\u003econst isAdult = (age \u0026gt;= 18) ? true : false;\u003cbr\u003e\u003cbr\u003econst canWork = (age \u0026gt;= 16) ? (1 === 1) : (1 !== 1);\u003cbr\u003e\u003cbr\u003econst canEnlist = (isAdult ? true : false);\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003ecanWork;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanEnlist;\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Be careful to not overuse the ternary operator. It's fine for slimming down a simple \u003ccode\u003eif...else\u003c/code\u003e, but be conscious of how easy your code is to understand for an outsider. Remember, you generally write code once, but it gets read (by yourself and others) \u003cstrong\u003efar\u003c/strong\u003e more than once. The ternary is often more difficult to quickly interpret than a regular old \u003ccode\u003eif...else\u003c/code\u003e, so make sure the reduction in code is worth any potential reduction in readability.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003e\u003ccode\u003eelse if\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eWe've discussed the case where our condition is \u003cem\u003ebinary\u003c/em\u003e (one code block executes if the conditional returns true and a second executes otherwise), but sometimes we need to check multiple conditions. We can handle this situation by using one or more \u003ccode\u003eelse if\u003c/code\u003e clauses.\u003c/p\u003e  \u003cp\u003eLet's say that instead of just deciding whether the passed-in \u003ccode\u003eage\u003c/code\u003e meets the criterion for \u003ccode\u003eisAdult\u003c/code\u003e, we want to add in some other examples of adulthood (in American society, at least): \u003ccode\u003ecanWork\u003c/code\u003e, \u003ccode\u003ecanEnlist\u003c/code\u003e, and \u003ccode\u003ecanDrink\u003c/code\u003e. 16-year-olds can legally work; 18-year-olds can do what 16-year-olds can do \u003cstrong\u003eplus\u003c/strong\u003e they can enlist and they are legal adults; 21-year-olds can do what 16- and 18-year-olds can do \u003cstrong\u003eplus\u003c/strong\u003e they can drink (at the federally set minimum age).\u003c/p\u003e  \u003cp\u003eHere's how we can handle that using \u003ccode\u003eelse if\u003c/code\u003e clauses:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 20;\u003cbr\u003e\u003cbr\u003elet isAdult, canWork, canEnlist, canDrink;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 21) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e    canWork = true;\u003cbr\u003e    canEnlist = true;\u003cbr\u003e    canDrink = true;\u003cbr\u003e} else if (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e    canWork = true;\u003cbr\u003e    canEnlist = true;\u003cbr\u003e} else if (age \u0026gt;= 16) {\u003cbr\u003e    canWork = true;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanWork;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanEnlist;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanDrink;\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny time you use an \u003ccode\u003eif...else if\u003c/code\u003e construction, \u003cstrong\u003eat most one code block will be executed\u003c/strong\u003e. As soon as one of the conditions returns a truthy value, the attached code block runs and the conditional statement ends. In the example above, we have not included an \u003ccode\u003eelse\u003c/code\u003e statement so, if none of the conditions is truthy, no code blocks will be run. If we had included an \u003ccode\u003eelse\u003c/code\u003e clause, exactly one code block would be run.\u003c/p\u003e  \u003ch4\u003eNested \u003ccode\u003eif\u003c/code\u003e Statements\u003c/h4\u003e  \u003cp\u003eYou may have noticed that there is some redundancy in the example above: three of the four variables appear in more than one of the conditions. In this circumstance, we can streamline our code a bit by using nested conditional statements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 17;\u003cbr\u003e\u003cbr\u003elet isAdult, canWork, canEnlist, canDrink;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 16) {\u003cbr\u003e  canWork = true;\u003cbr\u003e\u003cbr\u003e  if (age \u0026gt;= 18) {\u003cbr\u003e    isAdult = true;\u003cbr\u003e    canEnlist = true;\u003cbr\u003e\u003cbr\u003e    if (age \u0026gt;= 21) {\u003cbr\u003e      canDrink = true;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ecanWork; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first \u003ccode\u003eif\u003c/code\u003e condition checks for the \"base level\" of adulthood (\u003ccode\u003eage \u0026gt;= 16\u003c/code\u003e), and each subsequent nested \u003ccode\u003eif\u003c/code\u003e \"adds on.\" Note that each inner \u003ccode\u003eif\u003c/code\u003e statement is nested \u003cstrong\u003einside\u003c/strong\u003e the code block of the one before. This means that the inner \u003ccode\u003eif\u003c/code\u003e statements will only execute if the outer ones are truthy. This makes sense: if age is less than 16, we're done — there's no need to check the remaining conditions because we know they have to be false as well. Otherwise JavaScript will keep checking each subsequent condition until it either comes to one that is false or finishes running all the code blocks.\u003c/p\u003e  \u003cp\u003eWhile nested \u003ccode\u003eif\u003c/code\u003es are more efficient than \u003ccode\u003eif...else if\u003c/code\u003es for handling overlapping categories, they are also more difficult to read. An \u003ccode\u003eif...else if\u003c/code\u003e construction will always work. You should consider the tradeoff of readability vs. efficiency in deciding which construction to use.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eLet's say we have a program that includes a variable containing a person's food order and we want to create a variable containing the appropriate ingredients. Using an \u003ccode\u003eif...else if\u003c/code\u003e construction, that might look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst order = 'cheeseburger';\u003cbr\u003e\u003cbr\u003elet ingredients;\u003cbr\u003eif (order === 'cheeseburger') {\u003cbr\u003e    ingredients = 'bun, burger, cheese, lettuce, tomato, onion';\u003cbr\u003e} else if (order === 'hamburger') {\u003cbr\u003e    ingredients = 'bun, burger, lettuce, tomato, onion';\u003cbr\u003e} else if (order === 'malted') {\u003cbr\u003e    ingredients = 'milk, ice cream, malted milk powder';\u003cbr\u003e} else {\u003cbr\u003e    console.log(\"Sorry, that's not on the menu right now.\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs we can see, there's quite a bit of repetition here: we always test \u003ccode\u003eorder\u003c/code\u003e and we always compare with \u003ccode\u003e===\u003c/code\u003e. This is a pretty common selection need. It's so standard that the \u003ccode\u003eswitch\u003c/code\u003e statement was created to enable us to streamline our code. Here's the \u003ccode\u003eswitch\u003c/code\u003e version of the code above:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst order = 'cheeseburger';\u003cbr\u003e\u003cbr\u003elet ingredients;\u003cbr\u003e\u003cbr\u003eswitch (order) {\u003cbr\u003e    case 'cheeseburger':\u003cbr\u003e        ingredients = 'bun, burger, cheese, lettuce, tomato, onion';\u003cbr\u003e        break;\u003cbr\u003e    case 'hamburger':\u003cbr\u003e        ingredients = 'bun, burger, lettuce, tomato, onion';\u003cbr\u003e        break;\u003cbr\u003e    case 'malted':\u003cbr\u003e        ingredients = 'milk, ice cream, malted milk powder';\u003cbr\u003e        break;\u003cbr\u003e    default:\u003cbr\u003e        console.log(\"Sorry, that's not on the menu right now.\");\u003cbr\u003e        break;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine compares the value passed in to the \u003ccode\u003eswitch\u003c/code\u003e statement (here, \u003ccode\u003eorder\u003c/code\u003e) against each of the \u003ccode\u003ecase\u003c/code\u003e values \u003cem\u003eusing strict equality\u003c/em\u003e (\u003ccode\u003e===\u003c/code\u003e). When a match is found, the statements nested under that \u003ccode\u003ecase\u003c/code\u003e are executed. In this example, by using the \u003ccode\u003eswitch\u003c/code\u003e statement, we avoid the need to repeat the \u003ccode\u003eif (order === _____)\u003c/code\u003e line for each possibility.\u003c/p\u003e  \u003cp\u003eWe can also assign the same set of statements to multiple cases. In the following example, if the \u003ccode\u003eage\u003c/code\u003e variable contains any number between \u003ccode\u003e13\u003c/code\u003e and \u003ccode\u003e19\u003c/code\u003e, the \u003ccode\u003eisTeenager\u003c/code\u003e variable will be set to \u003ccode\u003etrue\u003c/code\u003e. If it contains anything other than a number between \u003ccode\u003e13\u003c/code\u003e and \u003ccode\u003e19\u003c/code\u003e, none of our \u003ccode\u003ecase\u003c/code\u003es will hit, and it will end up at the \u003ccode\u003edefault\u003c/code\u003e, which sets \u003ccode\u003eisTeenager\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 15;\u003cbr\u003e\u003cbr\u003elet isTeenager;\u003cbr\u003e\u003cbr\u003eswitch (age) {\u003cbr\u003e    case 13:\u003cbr\u003e    case 14:\u003cbr\u003e    case 15:\u003cbr\u003e    case 16:\u003cbr\u003e    case 17:\u003cbr\u003e    case 18:\u003cbr\u003e    case 19:\u003cbr\u003e        isTeenager = true;\u003cbr\u003e        break;\u003cbr\u003e    default:\u003cbr\u003e        isTeenager = false;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e and \u003ccode\u003ebreak\u003c/code\u003e keywords are both optional in basic \u003ccode\u003eswitch\u003c/code\u003e statements, but useful. In more complicated statements, they become necessary to ensure the correct flow.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e keyword is similar to the \u003ccode\u003eelse\u003c/code\u003e clause in an \u003ccode\u003eif...else\u003c/code\u003e construction. It specifies a set of statements to run after all of the \u003ccode\u003eswitch\u003c/code\u003e statement's \u003ccode\u003ecase\u003c/code\u003es have been checked. However, it is different from an \u003ccode\u003eelse\u003c/code\u003e in that \u003cstrong\u003ethe only time it does \u003cem\u003enot\u003c/em\u003e run is if the engine hits a \u003ccode\u003ebreak\u003c/code\u003e in one of the \u003ccode\u003ecase\u003c/code\u003e statements\u003c/strong\u003e. If you only want one code block in your \u003ccode\u003eswitch\u003c/code\u003e statement to execute, you should always include the \u003ccode\u003ebreak\u003c/code\u003e keyword.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eIn the previous example, \u003ccode\u003ebreak\u003c/code\u003e is used to stop the \u003ccode\u003eswitch\u003c/code\u003e statement from continuing to look at case statements once it finds a match. If we left out the \u003ccode\u003ebreak\u003c/code\u003e keyword, the switch statement would get to a match at \u003ccode\u003ecase 15\u003c/code\u003e and continue on through to \u003ccode\u003ecase 19\u003c/code\u003e, setting \u003ccode\u003eisTeenager\u003c/code\u003e to true. However, since we didn't break after that assignment, the code would continue to execute and \u003ccode\u003eisTeenager\u003c/code\u003e would wind up being reset to false. To keep that from happening, we use \u003ccode\u003ebreak\u003c/code\u003e to tell the JavaScript engine to stop executing the \u003ccode\u003eswitch\u003c/code\u003e statement as soon as it finds a match. You will often see switch statements where \u003ccode\u003ebreak\u003c/code\u003e is used in every case as a way to ensure there is no unexpected behavior from multiple cases executing.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e Sometimes we \u003cem\u003ewant\u003c/em\u003e to potentially match multiple cases, and we will need to leave out \u003ccode\u003ebreak\u003c/code\u003e in order to do this. We can refactor the \u003ccode\u003eif...else if...else\u003c/code\u003e example we saw earlier as a more compact, less repetitious \u003ccode\u003eswitch\u003c/code\u003e statement. To make it work, we will employ a neat little trick: we'll use comparisons for our \u003ccode\u003ecase\u003c/code\u003e statements instead of a simple value.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 25;\u003cbr\u003e\u003cbr\u003elet isAdult, canWork, canEnlist, canDrink;\u003cbr\u003e\u003cbr\u003eswitch (true) {\u003cbr\u003e    case age \u0026gt;= 21:\u003cbr\u003e        canDrink = true;\u003cbr\u003e    case age \u0026gt;= 18:\u003cbr\u003e        isAdult = true;\u003cbr\u003e        canEnlist = true;\u003cbr\u003e    case age \u0026gt;= 16:\u003cbr\u003e        canWork = true;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanWork;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanEnlist;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanDrink;\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe specified \u003ccode\u003etrue\u003c/code\u003e as the value to \u003ccode\u003eswitch\u003c/code\u003e on. All of our \u003ccode\u003ecase\u003c/code\u003es are \u003cem\u003ecomparison expressions\u003c/em\u003e that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Therefore, if a comparison returns \u003ccode\u003etrue\u003c/code\u003e, its statements will be run. Because we did not include any \u003ccode\u003ebreak\u003c/code\u003e statements, once \u003cem\u003eone\u003c/em\u003e case statement matches, all subsequent statements will execute. This is what we want here: if \u003ccode\u003eage\u003c/code\u003e is greater than 21, it's also greater than 18 and 16, so we want \u003cem\u003eall\u003c/em\u003e the assignments to be made.\u003c/p\u003e  \u003cp\u003eIf we set \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e20\u003c/code\u003e in the above example, the first \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 21\u003c/code\u003e, returns \u003ccode\u003efalse\u003c/code\u003e and the assignment of \u003ccode\u003ecanDrink\u003c/code\u003e never happens. The engine then proceeds to the next \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e, which returns \u003ccode\u003etrue\u003c/code\u003e, assigning the value \u003ccode\u003etrue\u003c/code\u003e to \u003ccode\u003eisAdult\u003c/code\u003e and \u003ccode\u003ecanEnlist\u003c/code\u003e. Since it encounters no \u003ccode\u003ebreak\u003c/code\u003e statement, it then proceeds to the last case statement where \u003ccode\u003ecanWork\u003c/code\u003e is set to true as well.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eYou now have three different types of conditional statements available to you: the \u003ccode\u003eif\u003c/code\u003e statement, the \u003ccode\u003eternary\u003c/code\u003e expression, and the \u003ccode\u003eswitch\u003c/code\u003e statement. The \u003ccode\u003eif\u003c/code\u003e statement is the one you will use most often — in fact, you can \u003cem\u003ealways\u003c/em\u003e construct your conditional code using some combination of \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse if\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e. It may not be the most efficient way to write the code, but it will always do the trick.\u003c/p\u003e  \u003cp\u003eAs a rule of thumb, you may find it makes sense to start with \u003ccode\u003eif\u003c/code\u003e statements and, once you've got the code working, consider refactoring it to use a ternary or switch statement if they're better suited for what you need to do.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\"\u003eExpressions\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"\u003eBlock statement\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003efalsy\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#Conditional_statements\"\u003eConditional statements\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\"\u003eConditional (ternary) operator\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"foreach-the-unexpressive-iterator","title":"forEach: The Unexpressive Iterator","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-foreach-method\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-foreach-method\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-foreach-method/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse \u003ccode\u003eforEach()\u003c/code\u003e to work with an array\u003c/li\u003e \u003cli\u003eExplain why \u003ccode\u003eforEach()\u003c/code\u003e is the iterator method we should use least\u003c/li\u003e \u003cli\u003eIdentify use cases for \u003ccode\u003eforEach()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn previous lessons, we've learned about JavaScript's built-in \u003ccode\u003eArray\u003c/code\u003e methods and how they help us save work and write more efficient, readable code. In this lesson, we'll talk about one more: \u003ccode\u003eforEach()\u003c/code\u003e. We'll also discuss why it's the one you should use least.\u003c/p\u003e  \u003ch2\u003eUse \u003ccode\u003eforEach\u003c/code\u003e to Work with an Array\u003c/h2\u003e  \u003cp\u003eIf you look at the MDN page for the \u003ccode\u003eforEach()\u003c/code\u003e method, you'll see the following description:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eThe forEach() method executes a provided function once for each array element.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eUnlike the other methods we've looked at in this section, \u003ccode\u003eforEach()\u003c/code\u003e doesn't have a built-in return value. As a result, \u003ccode\u003eforEach()\u003c/code\u003e is quite generic — the callback we pass to it can contain whatever functionality we like.\u003c/p\u003e  \u003cp\u003eTo use \u003ccode\u003eforEach()\u003c/code\u003e, we simply call it on an array and pass our callback:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eoppressedWorkers = [\u003cbr\u003e  \"Dopey\",\u003cbr\u003e  \"Sneezy\",\u003cbr\u003e  \"Happy\",\u003cbr\u003e  \"Angry\",\u003cbr\u003e  \"Doc\",\u003cbr\u003e  \"Lemonjello\",\u003cbr\u003e  \"Sleepy\"\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003eoppressedWorkers.forEach(function(oppressedWorker) {\u003cbr\u003e  console.log(`${oppressedWorker} wants to form a union!`);\u003cbr\u003e}); //=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e/* Output\u003cbr\u003eDopey wants to form a union!\u003cbr\u003eSneezy wants to form a union!\u003cbr\u003eHappy wants to form a union!\u003cbr\u003eAngry wants to form a union!\u003cbr\u003eDoc wants to form a union!\u003cbr\u003eLemonjello wants to form a union!\u003cbr\u003eSleepy wants to form a union!\u003cbr\u003e*/ \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile this flexibility may seem like a good thing at first glance, the fact that it's generic makes it the least expressive of the iterators.\u003c/p\u003e  \u003ch2\u003eExplain Why \u003ccode\u003eforEach\u003c/code\u003e is the Iterator Method We Should Use Least\u003c/h2\u003e  \u003cp\u003eBy now you recognize that \u003ccode\u003emap\u003c/code\u003e means: \"create a new \u003ccode\u003eArray\u003c/code\u003e after transforming each element.\" You recognize that \u003ccode\u003ereduce\u003c/code\u003e means: \"distill a single summary value from a set of elements.\" These methods are \u003cem\u003eexpressive\u003c/em\u003e; their presence in your code tells other programmers (and your future self) what you intended to happen.\u003c/p\u003e  \u003cp\u003eBut what does \u003ccode\u003eforEach\u003c/code\u003e mean? Programmers recognize that \u003ccode\u003emap()\u003c/code\u003e has a specific use, \u003ccode\u003ereduce()\u003c/code\u003e has a specific use, \u003ccode\u003efind()\u003c/code\u003e has a specific use. But \u003ccode\u003eforEach()\u003c/code\u003e is generic. Are we just printing things, or are we trying to distill to a value, or are we trying to produce a transformed \u003ccode\u003eArray\u003c/code\u003e?\u003c/p\u003e  \u003cp\u003eWhen we use \u003ccode\u003eforEach()\u003c/code\u003e to do \u003ccode\u003emap\u003c/code\u003e-things or \u003ccode\u003ereduce\u003c/code\u003e-things we're not \u003cem\u003edocumenting\u003c/em\u003e what our intention was with regard to the collection. This makes for code that's harder to understand and debug. Here's some code that uses \u003ccode\u003eforEach()\u003c/code\u003e instead of \u003ccode\u003ereduce()\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sumArray(numberArray) {\u003cbr\u003e  let total = 0;\u003cbr\u003e  numberArray.forEach(function(i) {\u003cbr\u003e    total = total + i;\u003cbr\u003e  });\u003cbr\u003e  return total;\u003cbr\u003e}\u003cbr\u003esumArray([1, 2, 3]); //=\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSure, it works, but it doesn't \u003cem\u003ecommunicate\u003c/em\u003e. We should always strive to have code that works \u003cstrong\u003e\u003cem\u003eand\u003c/em\u003e\u003c/strong\u003e communicates.\u003c/p\u003e  \u003ch2\u003eIdentify Use Cases for \u003ccode\u003eforEach\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe best time to use \u003ccode\u003eforEach()\u003c/code\u003e is when you need to enumerate a collection to cause some sort of \"side-effect\". A good example of this is when you want to iterate through an array to log values. \u003ccode\u003econsole.log()\u003c/code\u003e doesn't return anything back, so using something like \u003ccode\u003emap()\u003c/code\u003e here would unnecessarily create a new array. It would also mislead any developers who look at your code about what its purpose is. We're using \u003ccode\u003eforEach\u003c/code\u003e strictly to do something that is handy for us (the developer) as a \u003cem\u003eside-effect\u003c/em\u003e; in this case, printing content to the screen.\u003c/p\u003e  \u003cp\u003eThis is pretty common in debugging:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  empCollection.forEach(function(e){\u003cbr\u003e    console.log(\"DEBUG: WHAT ARE YOU?!?\" + e)\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe other time we want to use \u003ccode\u003eforEach\u003c/code\u003e is if we need to directly change (or \"mutate\") the elements we're iterating through.\u003c/p\u003e  \u003cp\u003eAs an example, consider:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction addFullNameToEmployees(empCollection){\u003cbr\u003e  empCollection.forEach(function(e){\u003cbr\u003e    e.fullName = `${e.firstName} ${e.familyName}`\u003cbr\u003e  })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eaddFullNameToEmployees([\u003cbr\u003e  {firstName: \"Byron\", familyName: \"Karbitii\"},\u003cbr\u003e  {firstName: \"Luca\", familyName: \"Tuexedensis\"}\u003cbr\u003e]) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, we're directly updating employees in the original object, rather than creating a new object with the modifications. The employee, \u003ccode\u003ee\u003c/code\u003e, is updated as a \u003cem\u003eside-effect\u003c/em\u003e of running \u003ccode\u003eforEach\u003c/code\u003e. The only clue that helps us guess what \u003ccode\u003eforEach\u003c/code\u003e is doing here is that the programmer \"wrapped\" it inside of a helpfully-named function.\u003c/p\u003e  \u003cp\u003eRecall, however, that directly mutating objects is something that should be avoided in most cases. This is another good reason to use \u003ccode\u003eforEach\u003c/code\u003e sparingly.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've introduced \u003ccode\u003eArray.prototype.forEach()\u003c/code\u003e. It is flexible and straightforward to use, which can make it an attractive option when you aren't sure which iterator is the best one for your needs. However, in the majority of cases, one of the other iterator methods will be a better choice. You should only use \u003ccode\u003eforEach()\u003c/code\u003e under the specific circumstances outlined above.\u003c/p\u003e  \u003cp\u003eAs you continue learning JavaScript, you should take advantage of the \u003cem\u003eexpressive\u003c/em\u003e iterator methods we've learned about in this section as much as possible. Under most circumstances, using \u003ccode\u003efind()\u003c/code\u003e, \u003ccode\u003efilter()\u003c/code\u003e, \u003ccode\u003emap()\u003c/code\u003e, or \u003ccode\u003ereduce()\u003c/code\u003e in place of more generic options, \u003ccode\u003eforEach\u003c/code\u003e, \u003ccode\u003efor...of\u003c/code\u003e, and \u003ccode\u003efor\u003c/code\u003e, will save you work in the long run and make your code more efficient and expressive.\u003c/p\u003e","frontPage":false},{"exportId":"review-javascript-events","title":"Review: JavaScript Events","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine a JavaScript event\u003c/li\u003e \u003cli\u003eIdentify different types of user events\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've experimented with selecting and manipulating nodes in the DOM using JavaScript: deleting nodes, editing nodes, etc. But most web applications are \u003cem\u003enot\u003c/em\u003e used by people opening up the console and editing the DOM using Chrome's DevTools. Instead, people \u003cem\u003edo something\u003c/em\u003e and then \u003cem\u003ework happens\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e\"Doing work\" in response to \"something happening\" is known as \u003cem\u003eevent handling\u003c/em\u003e. \u003cem\u003eEvents\u003c/em\u003e are the \"something the user does\" and the \"\u003cem\u003ecallback function\u003c/em\u003e\" is the work that will happen in response to the event being triggered.\u003c/p\u003e  \u003cp\u003eIn this lesson we'll go over some of the most commonly-used JavaScript events. In the following lessons, we'll learn how to use \u003cem\u003eevent listeners\u003c/em\u003e to tell JavaScript which event or events we want it to listen for. We'll also learn how to implement \u003cem\u003ecallback functions\u003c/em\u003e to handle the \u003cem\u003ework happens\u003c/em\u003e part of event handling.\u003c/p\u003e  \u003ch2\u003eDefine a JavaScript Event\u003c/h2\u003e  \u003cp\u003eJavaScript has the ability to \"listen\" for things that happen inside the browser. It can listen for events like whether the browser is resized, or whether someone clicked on a specific image on the screen. The event you're probably most familiar with is \"click.\"\u003c/p\u003e  \u003cp\u003eWe'll go over a few of the more common types of events in this lesson.\u003c/p\u003e  \u003ch2\u003eIdentify Different Types of User Events\u003c/h2\u003e  \u003ch3\u003eMouse Click\u003c/h3\u003e  \u003cp\u003eMouse or trackpad events are some of the most common ones you'll be handling using JavaScript eventing. For example, JavaScript can recognize a single click on an element in the page and change the styling of the element to highlight it. Or it can recognize a double-click on an element and open a zoomed-in view of that element.\u003c/p\u003e  \u003cp\u003eThere are many other mouse events you can use; take a look at the list of JavaScript's \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#Mouse_events\"\u003emouse events here\u003c/a\u003e.\u003c/p\u003e  \u003ch3\u003eKey Press\u003c/h3\u003e  \u003cp\u003eWhile click events will likely make up the majority of events you'll use, the keyboard is another important source of events. JavaScript currently includes two \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#Keyboard_events\"\u003ekeyboard events\u003c/a\u003e: \u003ccode\u003ekeydown\u003c/code\u003e and \u003ccode\u003ekeyup\u003c/code\u003e. (A third, \u003ccode\u003ekeypress\u003c/code\u003e, has been deprecated.) When a key is pressed, these events provide a code to indicate which key it was. For example, a game program might listen for \u003ccode\u003ekeydown\u003c/code\u003e events and, if the space bar was pressed, make the character jump over the hole.\u003c/p\u003e  \u003ch3\u003eForm Submission\u003c/h3\u003e  \u003cp\u003eHTML pages often use a submit button to submit a form to a server. When a user submits a form, the \u003ccode\u003esubmit\u003c/code\u003e event is fired. An event handler here might pop up a thank you overlay or log in the user and take them to their home page.\u003c/p\u003e  \u003ch3\u003eOther Events\u003c/h3\u003e  \u003cp\u003eAs you seek to build more complicated applications, you'll need to handle and trigger work on many more events than the few we've discussed in this lesson. Some other common events you are likely to encounter are \u003ccode\u003escroll\u003c/code\u003e, \u003ccode\u003emouseenter\u003c/code\u003e and \u003ccode\u003emouseleave\u003c/code\u003e, \u003ccode\u003efocus\u003c/code\u003e, \u003ccode\u003eblur\u003c/code\u003e,  and \u003ccode\u003eonchange\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eOne important thing to keep in mind is that not all JavaScript events are supported by all browsers. This \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of browser events\u003c/a\u003e includes the ones that can be used in most browsers.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eJavaScript allows us to trigger work when it detects events. You set up an event handler and, when JavaScript recognizes that event, it will execute the event handler's work, which is stored in a \u003cem\u003ecallback function\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eTake a few minutes to look through the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of common events\u003c/a\u003e to familiarize yourself with the many many ways you can use event handling to enhance your users' experience.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"review-query-selector-methods","title":"Review: Query Selector Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-query-selector-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e to find nested nodes\u003c/li\u003e\n\u003cli\u003eModify attributes of DOM nodes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eOne of the most essential skills in our web development toolbox is finding elements in the DOM.\u003c/p\u003e\n\u003cp\u003eWhile \u003ccode\u003edocument.getElementById()\u003c/code\u003e and \u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e are good, we can improve our search when we use document structure (tag, \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003eclass\u003c/code\u003e) \u003cstrong\u003ealong with\u003c/strong\u003e the tree structure of the DOM. It turns out CSS is a \u003cem\u003egreat\u003c/em\u003e language for expressing those relationships! With the \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e methods, we provide one or more CSS selectors as an argument and we get back the matching element or elements. Because they can take a string containing multiple selectors, they allow us to create very specific, complex queries.\u003c/p\u003e\n\u003ch2\u003eUse \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e to Find Nested Nodes\u003c/h2\u003e\n\u003cp\u003eIf you would like to follow along in the console, fork and clone this lesson, open the files in your text editor, and open \u003ccode\u003eindex.html\u003c/code\u003e in Google Chrome. As you go, copy each HTML example into \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003equerySelector()\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003equerySelector()\u003c/code\u003e method takes one argument, a string of one or more CSS-compatible \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e, and returns the \u003cem\u003efirst\u003c/em\u003e element that matches.\u003c/p\u003e\n\u003cp\u003eGiven a document like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Hello!\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Goodbye!\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we called \u003ccode\u003edocument.querySelector('div')\u003c/code\u003e, the method would return the first \u003ccode\u003ediv\u003c/code\u003e. If we check its \u003ccode\u003einnerHTML\u003c/code\u003e, we should see \u003ccode\u003eHello!\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSelectors aren't limited to one tag name, though. Otherwise, why not just use \u003ccode\u003edocument.getElementsByTagName('div')[0]\u003c/code\u003e? We can get very specific.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u003cbr\u003e        \u0026lt;div\u0026gt;\u003cbr\u003e          \u0026lt;ul\u0026gt;\u003cbr\u003e            \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e          \u0026lt;/ul\u0026gt;\u003cbr\u003e        \u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;3\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"unranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;6\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u003cbr\u003e        \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst li2 = document.querySelector('ul.ranked-list li ul li');\u003cbr\u003eli2;\u003cbr\u003e//=\u0026gt; \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e\u003cbr\u003econst div4 = document.querySelector('ul.unranked-list li div');\u003cbr\u003ediv4;\u003cbr\u003e//=\u0026gt; \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above example, the first query says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e (the object we've called \u003ccode\u003equerySelector()\u003c/code\u003e on), find a \u003ccode\u003eul\u003c/code\u003e with a \u003ccode\u003eclassName\u003c/code\u003e of \u003ccode\u003eranked-list\u003c/code\u003e (recall from CSS that the \u003ccode\u003e.\u003c/code\u003e indicates that \u003ccode\u003eranked-list\u003c/code\u003e is a \u003ccode\u003eclassName\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThen find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that \u003ccode\u003eul\u003c/code\u003e. Next find a \u003ccode\u003eul\u003c/code\u003e that is a descendant (but not necessarily a direct child) of that \u003ccode\u003eli\u003c/code\u003e. Finally, find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that (second) \u003ccode\u003eul\u003c/code\u003e.\"\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The HTML property \u003ccode\u003eclass\u003c/code\u003e is referred to as \u003ccode\u003eclassName\u003c/code\u003e in JavaScript.\u003c/p\u003e\n\u003cp\u003eWhat does the second call to \u003ccode\u003equerySelector()\u003c/code\u003e say? Think about it for a minute, and then read on.\u003c/p\u003e\n\u003cp\u003eWait for it...\u003c/p\u003e\n\u003cp\u003eThe second call says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e, find a \u003ccode\u003eul\u003c/code\u003e with a \u003ccode\u003eclassName\u003c/code\u003e of \u003ccode\u003eunranked-list\u003c/code\u003e. Then find an \u003ccode\u003eli\u003c/code\u003e descended from \u003ccode\u003eul.unranked-list\u003c/code\u003e and a \u003ccode\u003ediv\u003c/code\u003e descended from that \u003ccode\u003eli\u003c/code\u003e.\"\u003c/p\u003e\n\u003ch4\u003eCSS Selectors\u003c/h4\u003e\n\u003cp\u003eIf using CSS to target elements isn't feeling natural, now might be a good time to brush up on \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e. Play around on the MDN page, then come back when you're ready.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003equerySelectorAll()\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003equerySelectorAll\u003c/code\u003e works a lot like \u003ccode\u003equerySelector()\u003c/code\u003e — it accepts a string containing one or more selectors as its argument, and it searches starting from the object that it's called on (either \u003ccode\u003edocument\u003c/code\u003e or an element). However, instead of returning the first match, it returns a \u003ccode\u003eNodeList\u003c/code\u003e collection of all matching elements. A \u003ccode\u003eNodeList\u003c/code\u003e is similar to an \u003ccode\u003eHTMLCollection\u003c/code\u003e: it is an array-like structure containing, in this case, a list of DOM nodes.\u003c/p\u003e\n\u003cp\u003eGiven a document like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;main id=\"app\"\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;10\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;11\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we called\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.getElementById('app').querySelectorAll('ul.ranked-list li'); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'd get back a list of nodes corresponding to: \u003ccode\u003e\u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;10\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;11\u0026lt;/li\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThe DOM selection methods \u003ccode\u003edocument.querySelector()\u003c/code\u003e and \u003ccode\u003edocument.querySelectorAll()\u003c/code\u003e are powerful tools for finding the elements we need to update and change. They use the familiar CSS selector syntax and allow us to create very specific queries that give us access to elements in complex DOM trees.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\"\u003edocument.querySelector()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\"\u003edocument.querySelectorAll()\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"liskovs-substitution-principle","title":"Liskov's Substitution Principle","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-liskovs-substitution-principle\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-liskovs-substitution-principle/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-liskovs-substitution-principle\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-liskovs-substitution-principle/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eRecognize the meaning of strong behavioral subtyping\u003c/li\u003e\n\u003cli\u003eRecognize the benefits of upholding Liskov's substitution principle\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMuch work has been done in the field of Object Oriented programming, and over\nthe last few decades, engineers have developed design patterns and principles\nthat are meant to help keep Object Oriented code easier to understand and\nmaintain. One principle in particular applies to inheritence and extension:\nLiskov's substitution principle.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we're going to briefly look at what Liskov's substitution\nprinciple is, how to adhere to it and why.\u003c/p\u003e\n\n\u003ch2\u003eRecognize the Meaning of Strong Behavioral Subtyping\u003c/h2\u003e\n\n\u003cp\u003eLiskov's substitution principle, also known as strong behavioral subtyping,\nis the 'L' in \u003ca href=\"https://en.wikipedia.org/wiki/SOLID\"\u003eSOLID\u003c/a\u003e a popular set of Object Oriented design principles.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLiskov's substitution principle:\u003c/strong\u003e Objects in a program should be replaceable\nwith instances of their subtypes without altering the correctness of that\nprogram.\u003c/p\u003e\n\n\u003cp\u003eIn terms to JavaScript inheritance, \u003cstrong\u003ean instance of a parent class should be\nreplaceable with an instance of a child class.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIf we follow this principle, the consequence is that properties and methods that\nexist on the parent will never be modified in any child. Child classes can\n\u003cem\u003eexpand\u003c/em\u003e upon what they inherited, adding methods or extra properties, do not\nmodify what they inherited.\u003c/p\u003e\n\n\u003cp\u003eIf you need to modify a child's inherited properties or methods, why are we\ninheriting them in the first place?\u003c/p\u003e\n\n\u003cp\u003eBelow are two examples, one that violates Liskov's principle, and one that\nupholds it:\u003c/p\u003e\n\n\u003ch4\u003eViolates Substitution Principle:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eclass Reptile {\u003cbr\u003e    constructor(name) {\u003cbr\u003e        this.name = name;\u003cbr\u003e    }\u003cbr\u003e    get move() {\u003cbr\u003e        return `${this.name} crawls away`;\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// Lizard inherits `move` because it crawls\u003cbr\u003eclass Lizard extends Reptile {}\u003cbr\u003e\u003cbr\u003e//  Snake overrides `move` because it cannot crawl\u003cbr\u003eclass Snake extends Reptile {\u003cbr\u003e    get move() {\u003cbr\u003e        return `${this.name} slithers away`;\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eSnake\u003c/code\u003e class is a subtype of class \u003ccode\u003eReptile\u003c/code\u003e, but overrides the \u003ccode\u003emove\u003c/code\u003e\ngetter because the original doesn't apply. If we created an instance of\n\u003ccode\u003eReptile\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet tricky = new Reptile('Tricky');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand an instance of \u003ccode\u003eSnake\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet basilisk = new Snake('Basilisk');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe see that \u003ccode\u003etricky\u003c/code\u003e cannot be replaced with \u003ccode\u003ebasilisk\u003c/code\u003e without changing\nbehavior:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etricky.move; // =\u0026gt; \"Tricky crawls away\"\u003cbr\u003ebasilisk.move; // =\u0026gt; \"Basilisk slithers away\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eUpholds Substitution Principle:\u003c/h4\u003e\n\n\u003cp\u003eSo how do we stop violating Liskov's principle? We can either choose to not\ninherit from the same parent, \u003cem\u003eor\u003c/em\u003e we can create a grandparent \u003ccode\u003eReptile\u003c/code\u003e class.\nThis grandparent class can still contain all shared data and behavior for all\nparent and child classes. Since the definition of \u003ccode\u003emove\u003c/code\u003e is \u003cem\u003enot\u003c/em\u003e shared by all,\nwe can move these definitions down a level, defining them in two new parent\nclasses:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// all reptiles have a name\u003cbr\u003eclass Reptile {\u003cbr\u003e    constructor(name) {\u003cbr\u003e        this.name = name;\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// legless reptiles slither\u003cbr\u003eclass LeglessReptile extends Reptile {\u003cbr\u003e    move() {\u003cbr\u003e        return `${this.name} slithers away`;\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// legged reptiles crawl\u003cbr\u003eclass LeggedReptile extends Reptile {\u003cbr\u003e    move() {\u003cbr\u003e        return `${this.name} crawls away`;\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Lizard extends LeggedReptile {}\u003cbr\u003eclass Snake extends LeglessReptile {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we've got two levels of inheritance. \u003ccode\u003eReptile\u003c/code\u003e sets up the \u003ccode\u003econstructor\u003c/code\u003e\nthat all children and grandchildren inherit. Because \u003ccode\u003emove\u003c/code\u003e needs to behave\ndifferently for legged and legless reptiles, it is defined differently in both\n\u003ccode\u003eLeglessReptile\u003c/code\u003e and \u003ccode\u003eLeggedReptile\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith this structure, if an instance of \u003ccode\u003eLizard\u003c/code\u003e replaced an instance of\n\u003ccode\u003eLeggedReptile\u003c/code\u003e \u003cem\u003eor\u003c/em\u003e \u003ccode\u003eReptile\u003c/code\u003e, it will work correctly. The same goes for an\ninstance of \u003ccode\u003eSnake\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhy does this work? We've removed some of behavior of \u003ccode\u003eReptile\u003c/code\u003e. An instance\nof \u003ccode\u003eReptile\u003c/code\u003e will never be required to utilize a method it hasn't defined or\ninherited.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eRecognize the Benefits of Upholding Liskov's Substitution Principle\u003c/h2\u003e\n\n\u003cp\u003eBoth of the above examples \u003cem\u003ework\u003c/em\u003e. There is no syntax error if you choose to\nignore Liskov's substitution principle. This is considered a purely \u003cem\u003esemantic\u003c/em\u003e\ndesign choice.\u003c/p\u003e\n\n\u003cp\u003eThe benefit of following this principle is that no matter how complicated\ninheritance gets, you can always assume that whatever a parent class has, a\nchild class will have too. Looking at a parent class should give us some insight\ninto the functionality of any children, grandchildren, great grandchildren,\netc...\u003c/p\u003e\n\n\u003cp\u003eIf we have chains of inheritance where children fundamentally change the data\nand behaviors they inherit, we can potentially introduce bugs. More importantly,\nthis can also make your code much more complicated than it needs to be, which\nwill make it harder to change and understand.\u003c/p\u003e\n\n\u003cp\u003eAs per LSP, a child class may include \u003cem\u003emore\u003c/em\u003e properties or use the data\n\u003cem\u003edifferently\u003c/em\u003e. If you do find that a child class needs to overwrite a method or\nproperty it inherited from its parent, consider other options - perhaps don't\ninherit at all.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In general, when dealing with inheritance, the fewer levels of\ninheritance, the better. If you've got great grandparent, grandparent, parent\nand child classes, it can be difficult to figure out which class contributes\nwhat to a child. It also makes our code more difficult to change. You may not be\nable to modify code on a grandparent class without fundamentally changing how a\nparent or child class functions. Too much inheritance can make our code\ninflexible.\u003c/p\u003e\n\n\u003cp\u003eUpholding Liskov's substitution principle limits what we can do with inheritance,\ndiscouraging larger chains of inherited classes. As a side effect, our code is\neasier to understand and change later on.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eLiskov's substitution principle ensures that all subtypes may replace their\ntypes without altering the behavior of the program. An instance of a parent\nclass should be replaceable by an instance of any of its child classes and still\nwork as expected. The result of this pattern is a clearer, consistent\ninheritance pattern that leads to more organized, easier to change code.\u003c/p\u003e","frontPage":false},{"exportId":"review-introduction-to-the-dom","title":"Review: Introduction to the DOM","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the Document Object Model (DOM)\u003c/li\u003e \u003cli\u003eExplain how the DOM is created\u003c/li\u003e \u003cli\u003eIdentify the DOM as accessed by JavaScript objects\u003c/li\u003e \u003cli\u003eIntroduce the Console and Chrome DevTools\u003c/li\u003e \u003cli\u003eLearn how to open HTML files in the browser\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe have learned how to write HTML and style it with CSS. We have also built our JavaScript programming skills. With this knowledge, we're now ready to learn \u003cstrong\u003eDocument_Object Model (DOM) programming\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eDOM programming consists of using JavaScript to:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAsk the DOM to find or select an HTML element or elements in the rendered page\u003c/li\u003e \u003cli\u003eRemove and/or insert one or more elements\u003c/li\u003e \u003cli\u003eAdjust a property of selected element(s)\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn other words, we can use DOM programming to create and modify content that users see in their browsers and add interactivity to our web pages.\u003c/p\u003e  \u003ch2\u003eIdentify the Document Object Model\u003c/h2\u003e  \u003cp\u003eLet's start with a biology metaphor. Your DNA represents a code-based version of \u003cem\u003eyou\u003c/em\u003e. The DOM represents a code-based version of \u003cem\u003ea web page\u003c/em\u003e. If something edits your DNA, changes will be made in your body (perhaps giving you mutant powers). Similarly, when you change something in the DOM, you change what's displayed in the browser.\u003c/p\u003e  \u003cp\u003eBut what exactly \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e the DOM? You can think of it as a \"middle layer\" between the user and the underlying HTML, CSS, and JavaScript that makes up the page. What the user is actually seeing on the page is the DOM. When the page initially loads, the DOM represents the underlying HTML, CSS and JavaScript. When we use JavaScript and DOM programming to modify the DOM and change what the user sees, the underlying code is not modified: if we refresh the page, it goes back to its original state.\u003c/p\u003e  \u003ch3\u003eExplain How the DOM Is Created\u003c/h3\u003e  \u003cp\u003eThe DOM is created when the page loads from the HTML/CSS/JavaScript that the web server provides to the browser. Let's examine this process step-by-step:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: To ensure that instructions and screenshots match up with your experience, be sure to use the \u003ca href=\"https://www.google.com/chrome/browser/desktop/index.html\"\u003eGoogle Chrome\u003c/a\u003e browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003col\u003e \u003cli\u003eIn Google Chrome, open a tab and navigate to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e.\u003c/li\u003e \u003cli\u003eTo see the HTML of this page, add \u003ccode\u003eview-source:\u003c/code\u003e to the front of the URL in the URL bar. Using the \u003ccode\u003eview-source\u003c/code\u003e URL prefix will display all the page's source HTML. It will look something like this: \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-the-dom/html-source.png\" alt=\"html-source\"\u003e\n\u003c/li\u003e \u003cli\u003eThe browser reads this HTML, along with CSS and JavaScript defined in \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tags, to create the DOM inside the browser. At this point, nothing is displayed on the screen. This time when nothing is displayed is very brief so our human eyes never really catch it.\u003c/li\u003e \u003cli\u003eThe browser then uses the DOM object to create the rendered page. While we often learn that browsers \"display HTML,\" that's not exactly accurate. Browsers use the HTML to create a \"middleman\" that they, in turn, use to display the structured and styled content.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eIdentify the DOM as Accessed by JavaScript Objects\u003c/h3\u003e  \u003cp\u003eWe can access the DOM, using JavaScript and DOM programming, through two \u003cem\u003evariables\u003c/em\u003e: \u003ccode\u003ewindow\u003c/code\u003e and \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003ewindow\u003c/code\u003e variable points to an \u003cem\u003eobject\u003c/em\u003e that represents Chrome's information about the browser, well, \"window.\" It has many functions, but the main one is \"it's a place where everything is.\" Not to be Zen here, but a browser without a \u003ccode\u003ewindow\u003c/code\u003e is like the universe before the Big Bang; there's just... \u003cem\u003enothing\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eLike all objects, the \u003ccode\u003ewindow\u003c/code\u003e has properties and methods. For example, we can access operating system browser information like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewindow.innerHeight;\u003cbr\u003e// returns the inner height of the browser window. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFor the most part, we won't interact with \u003ccode\u003ewindow\u003c/code\u003e: we don't want to mess with the container of everything or with operating system stuff. We want, rather, to change content. To do that, we'll focus on an object called \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e has \u003cem\u003eproperties\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.URL; //=\u0026gt; https://en.wikipedia.org/wiki/Ada_Lovelace \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e also has \u003cem\u003emethods\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.querySelector(\"h1\"); //=\u0026gt; Returns the element on the page with an id attribute equal to \"firstHeading\"  \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003emethods\u003c/em\u003e and \u003cem\u003eproperties\u003c/em\u003e that the DOM provides via its objects is called the DOM's \"Application Programming Interface,\" or \"API.\" It's just a programming word that you're likely to see online. But it just means \"the things that these objects know how to do.\"\u003c/p\u003e  \u003ch2\u003eThe Browser Console and Chrome Developer Tools\u003c/h2\u003e  \u003cp\u003eEvery major browser comes with a built-in set of developer tools that you can use to inspect, modify, and debug the content of a web page. To \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/console/#open_as_panel\"\u003eopen the dev tools in Chrome\u003c/a\u003e, press \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e (Windows / Linux) or \u003ccode\u003eCmd+Opt+J\u003c/code\u003e (Mac). Chrome ships with a whole suite of useful developer tools, but the only one we care about for now is the JavaScript console.\u003c/p\u003e  \u003cp\u003eThe console is an environment in the browser where we can type and run JavaScript code in the context of the current browser window. The console is \u003cem\u003esandboxed\u003c/em\u003e, meaning the only resources it has access to are those loaded on the current page. Once we start declaring variables and functions in separate JavaScript files, we'll be able to access and play around with them in the console. The console is the single best tool for debugging JavaScript in the browser, so start familiarizing yourself with it now.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e / \u003ccode\u003eCmd+Opt+J\u003c/code\u003e command should open up straight into the console. If for whatever reason, it doesn't, you can always click on \u003ccode\u003eConsole\u003c/code\u003e in the dropdown (when the DevTools are collapsed) or in the list of tabs:\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/opening_the_console.gif\" alt=\"Opening the console\"\u003e \u003c/p\u003e  \u003cp\u003eIf at any point the console becomes cluttered with errors, warnings, or anything else, click the \u003ccode\u003eClear console\u003c/code\u003e button:\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/clearing_the_console.gif\" alt=\"Clearing the console\"\u003e \u003c/p\u003e  \u003cp\u003eOkay, okay, enough background and setup. Let's write some code!\u003c/p\u003e  \u003ch3\u003eCoding in the Console\u003c/h3\u003e  \u003cp\u003eYou can write and test out JavaScript code in the console. We'll start off with some simple math. In the console, type \u003ccode\u003e1 + 1\u003c/code\u003e and press enter. You should see the number \u003ccode\u003e2\u003c/code\u003e appear.\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/math_in_console.gif\" alt=\"Math in the console\"\u003e \u003c/p\u003e  \u003cp\u003eTry out some other mathematical expressions and see what they return.\u003c/p\u003e  \u003cp\u003eNext up, let's write some text. To make sure the JavaScript engine knows that we're trying to write some literal text, we need to wrap it in quotation marks, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"This is some literal text in JavaScript!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGo ahead and type that classic phrase, \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e, into the console and press enter. It returned \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e right back to us. Try typing some more literal text into the console, such as your name. Don't forget the quotation marks!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/text_in_console_300.gif\" alt=\"Text in the console\"\u003e\u003c/p\u003e  \u003cp\u003eWe can go far beyond simple literal expressions: we can create variables, loops, or if statements in the console. We can even define and run functions!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It's impossible to overstate how important practice is when you're learning a new programming language. As you continue moving through the JavaScript curriculum, you should almost always have a browser console open. Code along with every example. Get used to the syntax and familiarize yourself with the errors that arise when you mistype something. Clear the console or simply refresh the page whenever you need a clean slate. Code, code, code, \u003cstrong\u003ecode\u003c/strong\u003e, \u003cstrong\u003e\u003cem\u003ecode\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eOpening Files in the Browser\u003c/h2\u003e  \u003cp\u003eIn this section, you will begin working with HTML files (most often, \u003ccode\u003eindex.html\u003c/code\u003e). In order to view the results of the coding you'll be doing, you'll need to open the file in the browser. Instructions for each programming environment are as follows:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eLocal environment on Mac\u003c/strong\u003e: Run \u003ccode\u003eopen index.html\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eLocal environment using WSL/Ubuntu\u003c/strong\u003e: Run \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eAWS IDE\u003c/strong\u003e: right-click on the \u003ccode\u003eindex.html\u003c/code\u003e file in the file tree and select \"Preview.\" There will be a button in the upper right corner that will \"pop\" the page into a new tab in the browser.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eKeep these instructions handy — you will be doing this often.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In order for these instructions to work, you will need to have Google Chrome set as your default browser. You can find \u003ca href=\"https://support.google.com/chrome/answer/95417?hl=en\u0026amp;co=GENIE.Platform=Desktop\"\u003einstructions for Mac and Windows here\u003c/a\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we learned about the DOM, which is a \"middle layer\" that presents the HTML, CSS and JavaScript loaded by the browser when we visit a page. We normally interact with it through the \u003ccode\u003edocument\u003c/code\u003e object. Because it is the \"source of truth\" for what browsers display, changes to the DOM create changes in the browser screen. We also learned how to access the Chrome Developer Tools and use the Console to try out code as we're building our programs.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://css-tricks.com/dom/\"\u003eCSS Tricks - What is the DOM?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\"\u003eMDN - The DOM\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"review-javascript-variables","title":"Review: JavaScript Variables","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-variables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine what a variable is\u003c/li\u003e \u003cli\u003eVariable names in JavaScript\u003c/li\u003e \u003cli\u003eInitializing variables in JavaScript\u003c/li\u003e \u003cli\u003eRetrieving and changing the value of variables\u003c/li\u003e \u003cli\u003eIdentify when to use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for declaring variables\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn an earlier lesson, we talked about using the \u003cem\u003eassignment expression\u003c/em\u003e to save information into a variable. \"Saving\" to a variable allows us to \u003cem\u003estore\u003c/em\u003e a result so we can use it again later. Storing calculations to \u003cem\u003etemporary storage places\u003c/em\u003e is the heart of making efficient programs. It's a simple idea that has powerful consequences.\u003c/p\u003e  \u003ch2\u003eWhat is a Variable?\u003c/h2\u003e  \u003cp\u003eA variable is a container in which we can store values for later retrieval.\u003c/p\u003e  \u003cp\u003eImagine a box that can hold any type of data: a number, a string, etc. We take some data that we want to store, place it inside the box, and hand the box off to the JavaScript engine, which stores it in memory. All done! Our data is safely cached until we need to access it again.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/17556281/28639657-fea1930a-7216-11e7-8c38-45bc9fab96a7.gif\" alt=\"Raiders of the Lost Ark warehouse\"\u003e\u003c/p\u003e  \u003cp\u003eBut wait! When we ask for the data back, how will the JavaScript engine know \u003cem\u003ewhich\u003c/em\u003e box to retrieve? We need to assign a name to our variable —\u0026nbsp;a label for our box — so that we can use the \u003cem\u003evariable lookup expression\u003c/em\u003e to tell the engine exactly which piece of stored data we want to access.\u003c/p\u003e  \u003ch2\u003eVariable Names in JavaScript\u003c/h2\u003e  \u003cp\u003eVariable names in JavaScript can sometimes be complicated, but if you follow these three rules you'll be fine:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eStart every variable name with a lowercase letter. Variable names starting with a number are not valid.\u003c/li\u003e \u003cli\u003eDon't use spaces. If a variable name consists of multiple words, \u003ccode\u003ecamelCaseYourVariableNames\u003c/code\u003e (see the camel humps?) instead of \u003ccode\u003esnake_casing_them\u003c/code\u003e (think of the underscore as a snake that swallowed the words).\u003c/li\u003e \u003cli\u003eDon't use JavaScript \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Reserved_keywords_as_of_ECMAScript_2015\"\u003ereserved words\u003c/a\u003e or \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Future_reserved_keywords\"\u003efuture reserved words\u003c/a\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIt's important to note that case matters, so \u003ccode\u003ejavaScript\u003c/code\u003e, \u003ccode\u003ejavascript\u003c/code\u003e, \u003ccode\u003eJavaScript\u003c/code\u003e, and \u003ccode\u003eJAVASCRIPT\u003c/code\u003e are four different variables.\u003c/p\u003e  \u003ch2\u003eInitializing Variables in JavaScript\u003c/h2\u003e  \u003cp\u003eInitializing variables in JavaScript is really a two-step process: first, we \u003cem\u003edeclare\u003c/em\u003e the variable, then we \u003cem\u003eassign a value\u003c/em\u003e to it.\u003c/p\u003e  \u003cp\u003eTo declare the variable, we use either the \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e reserved word. (And, in fact, there's a third option as well: \u003ccode\u003evar\u003c/code\u003e. We'll talk about when to use each a bit later in this lesson. For now, just know that when you see \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003evar\u003c/code\u003e, those are reserved words that are used to declare a variable.)\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine sets aside a chunk of memory to store the declared variable. Then, we assign a value to that variable using the \u003cem\u003eassignment expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi = 3.14159;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can make our code a bit more efficient by packaging both initialization steps —\u0026nbsp;declaration and assignment —\u0026nbsp;in a single line of code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou will encounter cases later on where it makes sense to declare a variable without immediately assigning a value to it, but combining the two steps will work most of the time.\u003c/p\u003e  \u003ch3\u003eInitializing Multiple Variables\u003c/h3\u003e  \u003cp\u003eLet's say I needed to declare and define multiple variables. It feels like a lot to have to repeat \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e over and over again. To alleviate this pain, JavaScript allows us to initialize multiple variables in a single line of code. The variables must be separated with commas, and the entire line must end with a semicolon.\u003c/p\u003e  \u003cp\u003eLet's condense the below code into one line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5;\u003cbr\u003econst b = 2;\u003cbr\u003econst c = 3;\u003cbr\u003econst d = \"Hello\";\u003cbr\u003econst e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe above is equivalent to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5,\u003cbr\u003e      b = 2,\u003cbr\u003e      c = 3,\u003cbr\u003e      d = \"Hello\",\u003cbr\u003e      e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ewhich can be converted to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5, b = 2, c = 3, d = \"Hello\", e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eRetrieving and Changing the Value of Variables\u003c/h2\u003e  \u003cp\u003eSay we've declared a variable \u003ccode\u003epi\u003c/code\u003e and set its value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo retrieve the value of \u003ccode\u003epi\u003c/code\u003e, we use the \u003cem\u003evariable lookup expression\u003c/em\u003e, i.e., we simply type in its name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we want to change (reassign) that value, we use the \u003cem\u003eassignment expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi;\u003cbr\u003e//=\u0026gt; 3.14159\u003cbr\u003epi = 3.14;\u003cbr\u003epi;\u003cbr\u003e//=\u0026gt; 3.14; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eIdentify When to Use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for Declaring Variables\u003c/h2\u003e  \u003cp\u003eIn the past, \u003ccode\u003evar\u003c/code\u003e was the only option available in JavaScript for declaring variables. Then, in 2015, the language underwent a major revision that, among many other changes, added two new options: \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Delving into the history of JavaScript and the many changes and improvements that were made to it in 2015 is outside the scope of this lesson. However, as you're learning to code in JavaScript you may see references to \u003ccode\u003eECMAScript 2015\u003c/code\u003e, \u003ccode\u003eES2015\u003c/code\u003e, or \u003ccode\u003eES6\u003c/code\u003e. These terms are interchangeable and refer to that major revision. (ECMAScript is the \"offical\" name of JavaScript.) There are some resources listed at the end of this lesson if you're interested in learning more about \u003ccode\u003eES2015\u003c/code\u003e and the history of JavaScript.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThe addition of \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e was in response to significant problems that the use of \u003ccode\u003evar\u003c/code\u003e can cause. In particular, it can create scope issues (which is a whole other topic that you'll learn about later) that lead to unpredictable and difficult to diagnose bugs in your code. You will likely see \u003ccode\u003evar\u003c/code\u003e used a lot in legacy code and older StackOverflow posts, so it's important to be familiar with it. \u003cstrong\u003e\u003cem\u003eHowever, there is no good reason to use \u003ccode\u003evar\u003c/code\u003e to declare variables in your own code, and good reasons not to\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003elet\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe main advantage of using \u003ccode\u003elet\u003c/code\u003e for declaring a variable is that, unlike \u003ccode\u003evar\u003c/code\u003e, it will throw an error if you try to declare the same variable a second time:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003elet pi = \"the ratio between a circle's circumference and diameter\";\u003cbr\u003e//=\u0026gt; Uncaught SyntaxError: Identifier 'pi' has already been declared \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhy is this a good thing? Well, you can imagine how easy it could be, especially in a lengthy program, to accidentally reuse a variable name. Doing so can cause unpredictable behavior because the value associated with the variable in one part of the program may be changed by code in a different part of the program. These types of problems can be very difficult to track down and debug. Using \u003ccode\u003elet\u003c/code\u003e to declare your variables will reduce the likelihood of introducing such errors into your code.\u003c/p\u003e  \u003cp\u003eWhile we can't \u003cem\u003eredeclare\u003c/em\u003e a variable that is declared using \u003ccode\u003elet\u003c/code\u003e, we can still \u003cem\u003ereassign\u003c/em\u003e its value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = \"the ratio between a circle's circumference and diameter\";\u003cbr\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\"\u003cbr\u003e\u003cbr\u003epi;\u003cbr\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003e\u003ccode\u003econst\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003econst\u003c/code\u003e reserved word should be your go-to option for declaring variables in JavaScript. When you declare a variable with \u003ccode\u003econst\u003c/code\u003e, not only can it not be redeclared but it also \u003cstrong\u003e\u003cem\u003ecannot be reassigned\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = 2.71828;\u003cbr\u003e//=\u0026gt; Uncaught TypeError: Assignment to constant variable. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you (or another developer) sees that \u003ccode\u003epi\u003c/code\u003e has been declared with \u003ccode\u003econst\u003c/code\u003e, you immediately know that the variable points to the same value every other time it's referenced in the program. For variables declared with \u003ccode\u003elet\u003c/code\u003e (or \u003ccode\u003evar\u003c/code\u003e), you cannot be so sure and will have to keep track of how those variables change throughout the program. The extra information provided by \u003ccode\u003econst\u003c/code\u003e is valuable, and it comes at no extra cost to you! Just use \u003ccode\u003econst\u003c/code\u003e whenever possible and reap the benefits.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: With \u003ccode\u003elet\u003c/code\u003e, it's possible to declare a variable without assigning a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = 3.14159;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, because \u003ccode\u003econst\u003c/code\u003e doesn't allow reassignment after the variable is initialized, we \u003cstrong\u003emust\u003c/strong\u003e assign a value right away:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst pi;\u003cbr\u003e//=\u0026gt; Uncaught SyntaxError: Missing initializer in const declaration\u003cbr\u003e\u003cbr\u003econst pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003cp\u003eAs your JavaScript powers increase with experience, you'll develop a more nuanced understanding of what to use where. However, for now, this is a good rule of thumb:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003evar\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e never.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003elet\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e when you know the value of a variable will change. For example, a \u003ccode\u003ecounter\u003c/code\u003e variable that starts at \u003ccode\u003e0\u003c/code\u003e and is subsequently incremented to \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e, and so on. In the lessons on looping and iteration in JavaScript, \u003ccode\u003elet\u003c/code\u003e will have its moment in the spotlight.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003econst\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e for \u003cem\u003eevery\u003c/em\u003e other variable.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBest practice is to always declare variables with \u003ccode\u003econst\u003c/code\u003e and then, if you later realize that the value has to change over the course of your program, circle back to change it to \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe covered what a variable is, how to initialize and retrieve it, and how to assign or reassign its value. We also looked at best practices for naming variables and for when to use \u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003econst\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#Variables\"\u003eMDN —\u0026nbsp;Language basics crash course: Variables\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003eMDN —\u0026nbsp;\u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003eMDN —\u0026nbsp;\u003ccode\u003econst\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003eMDN —\u0026nbsp;\u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75\"\u003eJavaScript ES6+: \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003econst\u003c/code\u003e?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/JavaScript#History\"\u003eW3C - A Short History of JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ECMAScript#Versions\"\u003eWikipedia - ECMAScript: Versions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"classes-and-instances","title":"Classes and Instances","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-classes-and-instances\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-classes-and-instances/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-classes-and-instances\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-classes-and-instances/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the creation of \u003ccode\u003eclass\u003c/code\u003e instances using \u003ccode\u003econstructor\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eState the definition of instance properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn Object Orientated JavaScript, objects share a similar structure, the \u003ccode\u003eclass\u003c/code\u003e.\nEach \u003ccode\u003eclass\u003c/code\u003e has the ability to generate copies of itself, referred to as\n\u003cem\u003einstances\u003c/em\u003e. Each of these \u003ccode\u003eclass\u003c/code\u003e instances can contain unique data, often\nset when the instance is created.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we are going to take a closer look at \u003ccode\u003eclass\u003c/code\u003e syntax, instance\ncreation and how to use the \u003ccode\u003econstructor\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eA Basic \u003ccode\u003eclass\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eclass\u003c/code\u003e syntax was introduced in \u003ca href=\"https://www.w3schools.com/js/js_es6.asp\"\u003eECMAScript 2015\u003c/a\u003e and it's important\nto note that the \u003ccode\u003eclass\u003c/code\u003e keyword is just syntactic sugar, or a nice abstraction,\nover JavaScript's existing prototypal object structure.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eReminder: All JavaScript objects inherit properties and methods from a\n\u003ccode\u003eprototype\u003c/code\u003e. This includes standard objects like functions and data types.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA basic, empty class can be written on one line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Fish {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith only a name and brackets, we can now create instances of the 'Fish' \u003ccode\u003eclass\u003c/code\u003e\nby using \u003ccode\u003enew\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet oneFish = new Fish();\u003cbr\u003elet twoFish = new Fish();\u003cbr\u003e\u003cbr\u003eoneFish; // =\u0026gt; Fish {}\u003cbr\u003etwoFish; // =\u0026gt; Fish {}\u003cbr\u003e\u003cbr\u003eoneFish == twoFish; // =\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese two fish are unique \u003ccode\u003eclass\u003c/code\u003e instances, even though they have no\ninformation encapsulated within them.\u003c/p\u003e\n\n\u003ch2\u003eUsing the \u003ccode\u003econstructor\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eTypically, when we create an instance of a \u003ccode\u003eclass\u003c/code\u003e, we want it to contain some\nbit of unique information from the beginning. To do this, we use a special\nmethod called \u003ccode\u003econstructor\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Fish {\u003cbr\u003e  constructor(name, age) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.age = age;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003econstructor\u003c/code\u003e method allows us pass arguments in when we use the \u003ccode\u003enew\u003c/code\u003e\nsyntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet redFish = new Fish('Red', 3);\u003cbr\u003elet blueFish = new Fish('Blue', 1);\u003cbr\u003e\u003cbr\u003eredFish; // =\u0026gt; Fish { name: 'Red', age: 3 }\u003cbr\u003eblueFish; // =\u0026gt; Fish { name: 'Blue', age: 1 }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our instances are each carrying unique data. It is possible to add and\nchange data using other means \u003cem\u003eafter\u003c/em\u003e an instance is created using custom\nmethods, but the \u003ccode\u003econstructor\u003c/code\u003e is where any initial data is defined.\u003c/p\u003e\n\n\u003ch2\u003eAssigning Instance Properties\u003c/h2\u003e\n\n\u003cp\u003eWe see that our fish have data, but what is happening exactly inside the\n\u003ccode\u003econstructor\u003c/code\u003e?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econstructor(name, age) {\u003cbr\u003e  this.name = name;\u003cbr\u003e  this.age = age\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTwo arguments, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eage\u003c/code\u003e are passed in and then assigned to something\nnew: \u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor now, think of \u003ccode\u003ethis\u003c/code\u003e as a reference to the object it is inside. Since we're\ncalling \u003ccode\u003econstructor\u003c/code\u003e when we create a new instance (\u003ccode\u003enew Fish('Red', 3)\u003c/code\u003e),\n\u003ccode\u003ethis\u003c/code\u003e is referring to the \u003cem\u003einstance we've created\u003c/em\u003e. \u003cem\u003eThis\u003c/em\u003e fish.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn \u003ccode\u003eclass\u003c/code\u003e methods, \u003ccode\u003ethis\u003c/code\u003e acts similar to Ruby's \u003ccode\u003eself\u003c/code\u003e keyword. \u003ccode\u003ethis\u003c/code\u003e can\nbe used to refer to properties of an instance, like \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eage\u003c/code\u003e, or methods\nof an instance (\u003ccode\u003ethis.sayName()\u003c/code\u003e). There is more to \u003ccode\u003ethis\u003c/code\u003e than meets\nthe eye, however, and we will go into more detail later on.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eAccessing Instance Properties\u003c/h2\u003e\n\n\u003cp\u003eIf we've assigned an instance to a variable, we can access properties\nusing the variable object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet oldFish = new Fish('George', 19);\u003cbr\u003elet newFish = new Fish('Clyde', 1);\u003cbr\u003e\u003cbr\u003eoldFish.name; //=\u0026gt; 'George'\u003cbr\u003eoldFish.age; //=\u0026gt; 19\u003cbr\u003enewFish.name; //=\u0026gt; 'Clyde'\u003cbr\u003enewFish.age; //=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy using \u003ccode\u003ethis.name\u003c/code\u003e and \u003ccode\u003ethis.age\u003c/code\u003e to define properties in our \u003ccode\u003econstructor\u003c/code\u003e,\nwe can also refer to these properties within other methods of our \u003ccode\u003eclass\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Fish {\u003cbr\u003e    constructor(name, age) {\u003cbr\u003e        this.name = name;\u003cbr\u003e        this.age = age;\u003cbr\u003e    }\u003cbr\u003e\u003cbr\u003e    sayName() {\u003cbr\u003e        return `Hi my name is ${this.name}`;\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis allows us to return dynamic information based on the unique properties\nwe assigned back when an instance was created. Another example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet square = new Square(5);\u003cbr\u003esquare; // =\u0026gt; Square { sideLength: 5 }\u003cbr\u003esquare.sideLength; // =\u0026gt; 5\u003cbr\u003esquare.area(); // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003ePrivate Properties\u003c/h4\u003e\n\n\u003cp\u003eAll properties are accessible from outside an instance, as we see with\n\u003ccode\u003esquare.sideLength\u003c/code\u003e, as well as from within \u003ccode\u003eclass\u003c/code\u003e methods (\u003ccode\u003ethis.sideLength\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThis is not always desirable - sometimes, we want to protect the data from being\nmodified after being set, or we want to use methods to control the exact ways\nour data should be changed. Say, for instance, we had a \u003ccode\u003eTransaction\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e\nthat we are using to represent individual bank transactions. When a new\n\u003ccode\u003eTransaction\u003c/code\u003e instance is created, it has \u003ccode\u003eamount\u003c/code\u003e, \u003ccode\u003edate\u003c/code\u003e and \u003ccode\u003ememo\u003c/code\u003e\nproperties.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Transaction {\u003cbr\u003e  constructor(amount, date, memo) {\u003cbr\u003e    this.amount = amount;\u003cbr\u003e    this.date = date;\u003cbr\u003e    this.memo = memo;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003edate\u003c/code\u003e, \u003ccode\u003eamount\u003c/code\u003e and \u003ccode\u003ememo\u003c/code\u003e properties represent fixed values for each\ninstance when a \u003ccode\u003eTransaction\u003c/code\u003e instance is created and probably shouldn't be\naltered. However, it is still possible to change these properties after they are\nassigned:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet transaction = new Transaction(100.24, '03/04/2018', 'Grocery Shopping');\u003cbr\u003etransaction.amount; // =\u0026gt; 100.24\u003cbr\u003etransaction.amount = 1000000000000.24;\u003cbr\u003etransaction.amount; // =\u0026gt; 1000000000000.24\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCurrently, there is no official way to make a property private - all \u003ccode\u003eclass\u003c/code\u003e and\nobject properties are exposed as we see above. One common convention, however,\nis to include an underscore at the beginning of the property name to indicate\nthose properties are not intended to be accessed from outside the \u003ccode\u003eclass\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Transaction {\u003cbr\u003e  constructor(amount, date, memo) {\u003cbr\u003e    this._amount = amount;\u003cbr\u003e    this._date = date;\u003cbr\u003e    this._memo = memo;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, it is \u003cem\u003estill\u003c/em\u003e possible to modify these properties, the \u003ccode\u003eamount\u003c/code\u003e property\nname just changed to \u003ccode\u003e_amount\u003c/code\u003e. The above \u003ccode\u003eclass\u003c/code\u003e, setup, however, \u003cem\u003esuggests\u003c/em\u003e\nthat these properties should only be accessed or changed through \u003ccode\u003eclass\u003c/code\u003e\nmethods, not directly.\u003c/p\u003e\n\n\u003cp\u003eImplementing private properties is planned in\n\u003ca href=\"https://www.sitepoint.com/javascript-private-class-fields/\"\u003efuture versions of JavaScript\u003c/a\u003e, and will use a \u003ccode\u003e#\u003c/code\u003e symbol to indicate a\nproperty is private.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSo, to recap, we can define a \u003ccode\u003eclass\u003c/code\u003e simply by writing \u003ccode\u003eclass\u003c/code\u003e, a name, and a\nset of curly brackets. We can then use this \u003ccode\u003eclass\u003c/code\u003e to create unique instances.\nThese instances can contain their own data, which we typically set using\n\u003ccode\u003econstructor\u003c/code\u003e, passing in arguments and assigning them to properties we've\ndefined. With these properties, \u003ccode\u003eclass\u003c/code\u003e instances can carry data around with\nthem wherever they go. While there are no private properties (yet), it is\npossible to set up \u003ccode\u003eclass\u003c/code\u003ees to emphasize using methods over directly changing\nproperties.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\u003eClasses\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"array-iterator-methods","title":"Array Iterator Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-iterator-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-iterator-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-iterator-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUnderstand how JavaScript's iterator methods help us\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've learned about \u003ccode\u003eArray\u003c/code\u003e methods that allow us to modify arrays by adding and removing elements (\u003ccode\u003epush()\u003c/code\u003e, \u003ccode\u003eslice()\u003c/code\u003e, etc). These methods operate on the array as a whole, but JavaScript also includes methods that assist us in iterating through an array and interacting with each individual element in some way. We will be learning about these methods in the next few lessons.\u003c/p\u003e  \u003ch2\u003eWhy Use JavaScript's Iterator Methods?\u003c/h2\u003e  \u003cp\u003eImagine that we have a collection of Flatbook user objects in an array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst users = [\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Niky',\u003cbr\u003e    lastName: 'Morgan',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Jaguar',\u003cbr\u003e    personalQuote: \"You're never too old to learn something new\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Tracy',\u003cbr\u003e    lastName: 'Lum',\u003cbr\u003e    favoriteColor: 'Yellow',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e    personalQuote: \"I just got lost in thought - it was unfamiliar territory\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Josh',\u003cbr\u003e    lastName: 'Rowley',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e    personalQuote: \"Always remember you’re unique, just like everyone else\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Kate',\u003cbr\u003e    lastName: 'Travers',\u003cbr\u003e    favoriteColor: 'Red',\u003cbr\u003e    favoriteAnimal: 'Jaguar'\u003cbr\u003e    personalQuote: \"Behind every great man is a woman rolling her eyes\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Avidor',\u003cbr\u003e    lastName: 'Turkewitz',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e    personalQuote: \"You don’t have to see the whole staircase, just take the first step\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Drew',\u003cbr\u003e    lastName: 'Price',\u003cbr\u003e    favoriteColor: 'Yellow',\u003cbr\u003e    favoriteAnimal: 'Elephant'\u003cbr\u003e    personalQuote: \"Failure is not the opposite of success: it’s part of success\"\u003cbr\u003e  }\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can iterate over that collection and print out everyone's first name as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction firstNamePrinter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    console.log(user.firstName);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirstNamePrinter(users);\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Tracy\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Kate\u003cbr\u003e// LOG: Avidor\u003cbr\u003e// LOG: Drew \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's also not too difficult to print out only users whose favorite color is blue:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction blueFilter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user.favoriteColor === 'Blue') {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eblueFilter(users);\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Avidor \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut what if we wanted to print out users whose favorite color is red instead? With the above approach, we'd need to create a whole new \u003ccode\u003eredFilter\u003c/code\u003e function.\u003c/p\u003e  \u003cp\u003eWe can improve matters by abstracting out the color into a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction colorFilter (collection, color) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user.favoriteColor === color) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ecolorFilter(users, 'Red');\u003cbr\u003e// LOG: Kate \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is definitely better: now we can print a list of users with any favorite color, but what if we want to print out users with a particular favorite animal instead? Or what if we want to do something other than simply print a list to the screen? For example, we might want to access each user's personal quote and add an exclamation point to the end. Or, using a different example, we might want to calculate the average amount of money spent by our customers in a given month.\u003c/p\u003e  \u003cp\u003eThere are any number of ways we might want to interact with the elements in our array, but all of them have some things in common: in all cases, we 1) pass in an array, 2) iterate through it using some sort of loop, and 3) write some code to interact with each element in the desired way.\u003c/p\u003e  \u003cp\u003eAccessing and interacting with the elements in an array is, in fact, a very common need in programming. So common that JavaScript has created a number of built in methods that reduce our need to write the common parts of the process over and over again. Below is a summary of some common use cases and the JavaScript method(s) we can use for each:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eUse Case\u003c/th\u003e     \u003cth\u003eMethod\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eFinding a single element that meets a condition\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003eindexOf()\u003c/code\u003e, \u003ccode\u003efind()\u003c/code\u003e\n\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eFinding and returning a list of elements that meet a condition\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003efilter()\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eModifying each element and returning the modified array\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003emap()\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e     \u003ctr\u003e     \u003ctd\u003eCreating a summary or aggregation of values in an array\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003ereduce()\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003cp\u003eWe will learn about each of the above methods in the upcoming lessons.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"blogging","title":"Blogging","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"immersive-course-logistics-maintaining-a-blog\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/immersive-course-logistics-maintaining-a-blog\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/immersive-course-logistics-maintaining-a-blog/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eDuring this course, you will be required to set up a personal technical blog, blog regularly and share some blog posts with your fellow classmates.\u003c/p\u003e  \u003cp\u003eBut don't worry! It's going to be fun. We promise.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/immersive-course-logistics/maintaining-a-blog/Image_135_CatOnComputer.jpg\" alt=\"Photo by Catherine Heath on Unsplash\"\u003e\u003c/p\u003e  \u003ch2\u003eWhy We Blog\u003c/h2\u003e  \u003cp\u003eThere are a number of very important reasons for maintaining your blog. Having a personal technical blog demonstrates that you:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eKnow your craft\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUnderstand and are passionate about your industry\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eCan communicate through writing\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAnd perhaps you can even build an audience - suggesting you’re pretty darn likeable!\u003c/p\u003e  \u003cp\u003eAll of these are important down the line (don't worry about it now!) when you are engaging in the job search.\u003c/p\u003e  \u003cp\u003eLastly, and very importantly, by blogging, you are giving back to the development community of which you are now a part. How many times over the past few weeks have you Googled something like \"iterate over nested hash ruby\" and stumbled upon someone's technical blog? Even if you haven't had that experience yet, we guarantee that over the course of the next few months, you'll follow along with some generous developers blog post to implement something like \u003ca href=\"https://medium.com/@LindaHaviv/the-beginner-s-guide-scraping-in-ruby-cheat-sheet-c4f9c26d1b8c#.kkwe918o4\"\u003eweb scraping with Ruby\u003c/a\u003e, \u003ca href=\"https://medium.com/@sherriously/switching-from-standard-bcrypt-rails-authentication-to-devise-1fd0e910bdda#.fj8ckgksq\"\u003esetting up the Devise gem in a Rails application\u003c/a\u003e or even \u003ca href=\"http://www.thegreatcodeadventure.com/lets-make-a-gem/\"\u003emaking your own gem\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eAs a beginning developer, you'll find yourself taking advantage of the many wonderful blogs out there. That's one of the great things about the tech community--it's full of people who want to learn, and who want to help others learn.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eYour\u003c/em\u003e blog is your opportunity to give back to the tech community.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eDon't assume that, because you are a beginner, you have nothing to contribute.\u003c/strong\u003e Your perspective as a beginner is immensely valuable, especially to other beginners.\u003c/p\u003e  \u003cp\u003eBelow, we'll discuss the benefits of blogging and how you can get started.\u003c/p\u003e  \u003ch2\u003eBenefits of Blogging\u003c/h2\u003e  \u003cp\u003eBlogging has many benefits for job seekers and non-seekers alike.\u003c/p\u003e  \u003cp\u003eFor starters, as a new developer, blogging allows you to reflect on what you have learned. (Aka personal development.)\u003c/p\u003e  \u003cp\u003eBlogging allows you to cement new concepts and technologies, and provides a platform in which you can go deeper into exploring those concepts.\u003c/p\u003e  \u003cp\u003eLearning to code takes lots of practice and lots of repetition. Once you complete one new challenge, you'll have to re-enact what you learned again and again, and even build on it. We've seen students write simple how-to blog posts and revisit their own posts again and again when faced with similar challenges.\u003c/p\u003e  \u003cp\u003eBlogging also sets you apart from others in the job search. When an employer sees that you have a blog, it shows you’re unique, passionate, and productive on your own time. And guess what? Hiring managers want to hire people who are passionate and driven.\u003c/p\u003e  \u003cp\u003eEven more, blogging shows a lot more than a resume does. On a resume, you simply recall your experience, accomplishments, and what skills you have. With a blog you show what you can do. It ultimately provides more information on you and your personality than a resume alone.\u003c/p\u003e  \u003cp\u003eAside from standing out to employers, maintaining a blog keeps you sharp. It gives you the opportunity to put your skills to use. Skills like developing and designing your website to writing content.\u003c/p\u003e  \u003cp\u003eBlogging also gives you the opportunity to engage with other bloggers, and vice versa. It is a great way to engage with others and build relationships with people in your industry.\u003c/p\u003e  \u003cp\u003eBlogging is an investment in yourself. It's a space in which you can showcase what you've learned, strengthen and explore what you're learning and contribute to the larger tech community.\u003c/p\u003e  \u003cp\u003eAnd above all, it's fun! \u003cstrong\u003eDon't think that every blog post you write must be ground-breaking.\u003c/strong\u003e Your blog is your space to explore what you're learning, and keep in mind that there are a lot of beginners out there that will benefit from you sharing what you're learning at every stage of your development as a developer.\u003c/p\u003e  \u003ch2\u003eSome Short and Happy Stories About Blogging\u003c/h2\u003e  \u003cp\u003eWhile we mainly blog for our own personal growth and to give back to the community, ocassionally, blogging during coursework has led some surprising results!\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eOne former student, Tracy, maintained a technical blog while she was a student and TA at Flatiron. When Tracy applied to be a developer at Rent the Runway, her future employers checked out her \u003ca href=\"http://talum.github.io/\"\u003eawesome blog\u003c/a\u003e and liked it so much, they skipped over giving her a code challenge and advanced her to the final interview stage.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eAnother student, Steven, had their \u003ca href=\"https://codeburst.io/bottom-of-the-barrel-8ef73eff00f0\"\u003eblog post\u003c/a\u003e picked up by a Medium publication.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eOne student from 2017 received a job offer from an employer who found him \u003cem\u003ethrough his blog\u003c/em\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eWe recommend setting up your blog on an easy-to-use platform like \u003ca href=\"https://medium.com/\"\u003eMedium\u003c/a\u003e or \u003ca href=\"https://www.tumblr.com/\"\u003eTumblr\u003c/a\u003e. Setting up your blog and posting new content should be easy––reserve your effort for writing blog posts and learning to code. However, if you want a bit of an extra challenge, you can try blogging with \u003ca href=\"https://jekyllrb.com/\"\u003eJekyll\u003c/a\u003e or \u003ca href=\"http://octopress.org/\"\u003eOctopress\u003c/a\u003e. Or, if you're willing to pay a monthly fee, we recommend using \u003ca href=\"https://ghost.org/\"\u003eGhost\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eDon't hesitate to write your first blog post. Keep it simple. Pick a small topic that you're interested in exploring more, or a concept/technique/technology that you recently learned about that you'd like to cement for yourself. Something like \u003ca href=\"http://www.korenlc.com/nested-arrays-hashes-loops-in-ruby/\"\u003eNested Arrays and Hashes in Ruby\u003c/a\u003e or even something a little less technical.\u003c/p\u003e  \u003cp\u003eSoon, we'll deploy a schedule of blog posts. Every day three different students will have a completed blog post due that they will share with the class. You can expect to have one blog post due every two-and-a-half to three weeks (but don't hesitate to blog more frequently than that!)\u003c/p\u003e  \u003cp\u003eIn the meantime, for inspiration, and to get excited about blogging, you can check out the \u003ca href=\"https://flatiron-blogger.herokuapp.com/posts\"\u003ecatalogue of Flatiron Student blog posts\u003c/a\u003e (you'll be prompted to log in with your GitHub account first).\u003c/p\u003e  \u003ch2\u003eGeneral Guidelines\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eStick to programming related topics.\u003c/li\u003e \u003cli\u003eIf you are including code examples, make sure to test them and ensure there are no errors\u003c/li\u003e \u003cli\u003eDo not plagiarize\u003c/li\u003e \u003cli\u003eNo offensive material. Remember, this is a blog that you will be able to use in your future job search.\u003c/li\u003e \u003cli\u003eCiting any sources is very helpful to your readers.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDon't forget to check spelling and grammar before publishing!\u003c/p\u003e","frontPage":false},{"exportId":"lexical-scoping","title":"Lexical scoping","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-principles-lexical-scoping-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-lexical-scoping-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-lexical-scoping-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain the concept of lexical scoping.\u003c/li\u003e \u003cli\u003eDescribe how lexical scoping informs the scope chain of a function.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll learn how JavaScript decides which outer scope to place into the scope chain for a new function.\u003c/p\u003e  \u003cp\u003eFirst, a brief note. Some of the material introduced in this section might feel a bit confusing or esoteric, but, fear not, you're going to get more and more comfortable with these concepts throughout this course. If you're finding it difficult to wrap your brain around some of these more abstract concepts at this point, \u003cstrong\u003edon't freak out\u003c/strong\u003e. This is really difficult material that even seasoned programmers occasionally struggle with. After you've read the material and given it a college try, feel free to move on to the next lesson — with a mental note to return once you have more JavaScript experience under your belt. Okay, onwards and upwards!\u003c/p\u003e  \u003cp\u003eTake a look at the following code snippet:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 'Foo';\u003cbr\u003e\u003cbr\u003efunction first () {\u003cbr\u003e  console.log('Inside first()');\u003cbr\u003e\u003cbr\u003e  console.log('myVar is currently equal to:', myVar);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second () {\u003cbr\u003e  const myVar = 'Bar';\u003cbr\u003e\u003cbr\u003e  first();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThink about what we've learned in previous lessons about how JavaScript looks up the scope chain to perform identifier resolution. Given that information, what do you think will get logged out to the console when we invoke \u003ccode\u003esecond()\u003c/code\u003e? Let's try it out:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esecond();\u003cbr\u003e// LOG: Inside first()\u003cbr\u003e// LOG: myVar is currently equal to: Foo\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDid that catch you by surprise? At first glance, it might seem like \u003ccode\u003eBar\u003c/code\u003e should get printed out. Inside \u003ccode\u003esecond()\u003c/code\u003e, that string is assigned to the \u003ccode\u003emyVar\u003c/code\u003e variable right before \u003ccode\u003efirst()\u003c/code\u003e is invoked:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction second () {\u003cbr\u003e  const myVar = 'Bar';\u003cbr\u003e\u003cbr\u003e  first();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, the assignment of \u003ccode\u003emyVar\u003c/code\u003e as \u003ccode\u003e'Bar'\u003c/code\u003e is \u003cstrong\u003enot visible to \u003ccode\u003efirst()\u003c/code\u003e\u003c/strong\u003e. This is because \u003ccode\u003esecond()\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e the parent scope of \u003ccode\u003efirst()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIn the following diagram, the red \u003ccode\u003emyVar\u003c/code\u003e is declared in the global scope, and the green \u003ccode\u003emyVar\u003c/code\u003e is declared inside \u003ccode\u003esecond()\u003c/code\u003e:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/lexical-scoping-readme/lexical_scope.png\" alt=\"Lexical scope\"\u003e\u003c/p\u003e  \u003cp\u003eNo variable named \u003ccode\u003emyVar\u003c/code\u003e exists inside \u003ccode\u003efirst()\u003c/code\u003e. When the JavaScript engine reaches the second line of code inside the function, it has to consult the scope chain to figure out what the heck this \u003ccode\u003emyVar\u003c/code\u003e thing is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('myVar is currently equal to:', myVar); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe engine's first (and only) stop in the scope chain is the global scope, where it finds a variable named \u003ccode\u003emyVar\u003c/code\u003e. The reference to \u003ccode\u003emyVar\u003c/code\u003e inside \u003ccode\u003efirst()\u003c/code\u003e is pointed at that external variable, so \u003ccode\u003econsole.log()\u003c/code\u003e prints out \u003ccode\u003emyVar is currently equal to: Foo\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003efirst()\u003c/code\u003e is declared in the global scope, and, when it comes to the scope chain, JavaScript functions don't care where they are invoked. \u003cstrong\u003eThe only thing that matters is where they are declared\u003c/strong\u003e. When we declare a new function, the function asks, \"Where was I created?\" The answer to that question is the outer environment (the outer scope) that gets stored in the new function's scope chain.\u003c/p\u003e  \u003cp\u003eThis is called \u003cem\u003elexical scoping\u003c/em\u003e, and \u003cem\u003elexical environment\u003c/em\u003e is a synonym for \u003cem\u003escope\u003c/em\u003e that you might encounter in advanced JavaScript materials. \u003cem\u003eLexical\u003c/em\u003e means \"having to do with words,\" and for lexical scoping what counts is where we, the programmer, typed out the function declaration within our code.\u003c/p\u003e  \u003cp\u003eIn the example above, we typed out our declaration for \u003ccode\u003efirst()\u003c/code\u003e in the global scope. If we instead declare \u003ccode\u003efirst()\u003c/code\u003e inside \u003ccode\u003esecond()\u003c/code\u003e, then \u003ccode\u003efirst()\u003c/code\u003e's reference to its outer scope points at \u003ccode\u003esecond()\u003c/code\u003e instead of at the global scope:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 'Foo';\u003cbr\u003e\u003cbr\u003efunction second () {\u003cbr\u003e  function first () {\u003cbr\u003e    console.log('Inside first()');\u003cbr\u003e\u003cbr\u003e    console.log('myVar is currently equal to:', myVar);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  const myVar = 'Bar';\u003cbr\u003e\u003cbr\u003e  first();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we invoke \u003ccode\u003esecond()\u003c/code\u003e this time, it creates a local \u003ccode\u003emyVar\u003c/code\u003e variable set to \u003ccode\u003e'Bar'\u003c/code\u003e. Then, it invokes \u003ccode\u003efirst()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esecond();\u003cbr\u003e// LOG: Inside first()\u003cbr\u003e// LOG: myVar is currently equal to: Bar\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile \u003ccode\u003efirst()\u003c/code\u003e is executing, it again encounters the reference to \u003ccode\u003emyVar\u003c/code\u003e and realizes it doesn't have a local variable or function with that name. \u003ccode\u003efirst()\u003c/code\u003e looks up the scope chain again, but this time \u003ccode\u003efirst()\u003c/code\u003e's outer scope isn't the global scope. It's the scope of \u003ccode\u003esecond()\u003c/code\u003e \u003cstrong\u003ebecause \u003ccode\u003efirst()\u003c/code\u003e was declared inside \u003ccode\u003esecond()\u003c/code\u003e\u003c/strong\u003e. So \u003ccode\u003efirst()\u003c/code\u003e uses the version of the \u003ccode\u003emyVar\u003c/code\u003e variable from the \u003ccode\u003esecond()\u003c/code\u003e scope, which contains the string \u003ccode\u003e'Bar'\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eWrapping up\u003c/h2\u003e  \u003cp\u003eIf this isn't making a ton of sense, don't sweat it too much! We're spending time on things like the \u003cem\u003escope chain\u003c/em\u003e and the \u003cem\u003elexical environment\u003c/em\u003e now because they're fundamental to the language, but they are not easy concepts to grasp! Keep these concepts in mind as you move through the rest of the course. As you write more and more JavaScript code, you'll notice some of the language's eccentricities cropping up. But then you'll remember things like lexical scoping and the scope chain, and you'll be in a much better position to explain what's going on —\u0026nbsp;\u003cstrong\u003ewhy\u003c/strong\u003e your code is being interpreted a certain way.\u003c/p\u003e  \u003cp\u003eInvesting the time and effort now will pay huge dividends throughout your JavaScript programming career. Knowing how to declare and invoke a function is great and necessary, but knowing what's actually going on under the hood during the declaration and invocation is exponentially more powerful.\u003c/p\u003e  \u003cp\u003eWhen a variable contains an unexpected value, understanding the scope chain will save you countless hours of painful debugging. When you're wondering where to declare a function so that it can access the proper variables, your familiarity with JavaScript's lexical scoping will save the day. When you want to impress some new friends at a party, hit 'em with a quick lesson on how running JavaScript code consists of distinct compilation and execution phases.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/lexical-scoping-readme/cool_party.gif\" alt=\"Cool party!\"\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=Bv_5Zv5c-Ts\"\u003eJavaScript: Understanding the Weird Parts - The First 3.5 Hours\u003c/a\u003e (Video)\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"review-functions","title":"Review: Functions","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-functions-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-functions-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-functions-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine abstraction\u003c/li\u003e \u003cli\u003eExplain that functions are abstractions\u003c/li\u003e \u003cli\u003eExplain how to \u003cem\u003ecall\u003c/em\u003e a function\u003c/li\u003e \u003cli\u003eDefine \"Generalization\"\u003c/li\u003e \u003cli\u003eDemonstrate \"Generalization\" by using \u003cem\u003eparameters\u003c/em\u003e and \u003cem\u003earguments\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eDemonstrate \u003cem\u003ereturn values\u003c/em\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eFunctions are the single most important unit of code in JavaScript. Much like a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e or a \u003ccode\u003e\u0026lt;section\u0026gt;\u003c/code\u003e in HTML, functions serve as ways to group together related bits of JavaScript code.  Grouped code is easier to read, debug, and improve.\u003c/p\u003e  \u003ch2\u003eDefine Abstraction\u003c/h2\u003e  \u003cp\u003eAbstraction comes from Latin roots which mean \"to pull away.\" It's the \"take-away\" or \"impression\" of a whole thing.  As humans, we often take sets of single actions or things and \u003cem\u003eabstract them\u003c/em\u003e into another word.\u003c/p\u003e  \u003cp\u003eThat word that we \"pull away\" is the \"abstraction.\" Literally it means \"the pulled away thing.\" You might not think about it often, but your brain is full of abstractions.\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eSingle Units\u003c/th\u003e     \u003cth\u003eAbstraction\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eJohn, Paul, George, Ringo\u003c/td\u003e     \u003ctd\u003eThe Beatles\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eGet two pieces of bread, put jam on ...\u003c/td\u003e     \u003ctd\u003eMake a peanut butter and jelly sandwich\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eHermione, Harry, Ron\u003c/td\u003e     \u003ctd\u003eTroublesome Gryffindors\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003evisit site, make userid, make password...\u003c/td\u003e     \u003ctd\u003eSign up for Flatbook\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eget in the lift, hit \"G\" button, exit elevator, walk to subway...\u003c/td\u003e     \u003ctd\u003eGo home\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003cp\u003eWe create abstractions to make it easier to shorten our sentences. We'd never get anything done if we couldn't abstract! We also use abstractions to decide what doesn't fit or what should fit. \"Mozart\" doesn't belong with The Beatles, but he does fit with \"Classical Masters.\"\u003c/p\u003e  \u003cp\u003eAbstractions help us think about complex activities. Humans brought the pattern of \"abstracting work\" to JavaScript. Abstractions that hold work are called \u003cem\u003efunctions\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eExplain That Functions Are Abstractions\u003c/h2\u003e  \u003cp\u003eFunctions combine a series of steps under a new name. That's why they're \u003cem\u003eabstractions\u003c/em\u003e. We'll call that the \u003cem\u003efunction name\u003c/em\u003e. More formally:\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eA function is an object that contains a sequence of JavaScript statements.  We can execute or \u003cem\u003ecall\u003c/em\u003e it multiple times.\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eTo \u003cem\u003ecall\u003c/em\u003e a function means to run the independent pieces that make it. Synonyms to \u003cem\u003ecall\u003c/em\u003e that you might see are \u003cem\u003eexecute\u003c/em\u003e and \u003cem\u003einvoke\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eLet's describe a series of single, non-abstract, tasks:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(\"Wake Byron the poodle\");\u003cbr\u003econsole.log(\"Leash Byron the poodle\");\u003cbr\u003econsole.log(\"Walk to the park Byron the poodle\");\u003cbr\u003econsole.log(\"Throw the frisbee for Byron the poodle\");\u003cbr\u003econsole.log(\"Walk home with Byron the poodle\");\u003cbr\u003econsole.log(\"Unleash Byron the poodle\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo abstract these single actions into a collective name, we do:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseByronThePoodle() {\u003cbr\u003e  console.log(\"Wake Byron the poodle\");\u003cbr\u003e  console.log(\"Leash Byron the poodle\");\u003cbr\u003e  console.log(\"Walk to the park Byron the poodle\");\u003cbr\u003e  console.log(\"Throw the frisbee for Byron the poodle\");\u003cbr\u003e  console.log(\"Walk home with Byron the poodle\");\u003cbr\u003e  console.log(\"Unleash Byron the poodle\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis code above is a \u003cem\u003efunction declaration\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eHere we have \u003cem\u003eabstracted\u003c/em\u003e 6 activities into 1 activity: \u003ccode\u003eexerciseByronThePoodle\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: Abstractions themselves can be lumped together \u003cem\u003eas if\u003c/em\u003e they were single things.  The abstraction \u003ccode\u003edailyDogCareForByron\u003c/code\u003e probably includes \u003ccode\u003efeedByronThePoodle\u003c/code\u003e, \u003ccode\u003egiveWaterToByronThePoodle\u003c/code\u003e, \u003ccode\u003eexerciseByronThePoodle\u003c/code\u003e, etc.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eExplain How To \u003cem\u003eCall\u003c/em\u003e a Function\u003c/h2\u003e  \u003cp\u003eTo \"execute\" or \"call\" a function in JavaScript you add \u003ccode\u003e()\u003c/code\u003e after its name. To execute the function we just defined, you run: \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e. When we ran \u003ccode\u003edocument.querySelector()\u003c/code\u003e, we were \u003cem\u003ecalling\u003c/em\u003e a function. \u003ccode\u003eMath.floor()\u003c/code\u003e is another function. That \u003ccode\u003e()\u003c/code\u003e is also known as the \u003cem\u003einvocation operator\u003c/em\u003e because it tells JavaScript to...invoke the function.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eLEARNING TIP\u003c/strong\u003e: Try defining a small function in the JavaScript console to test this out. You can copy the syntax provided above.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eA \u003cem\u003efunction\u003c/em\u003e must be \u003cem\u003edeclared\u003c/em\u003e before it can be called. Calling \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e before the function has been declared causes an error for JavaScript.\u003c/p\u003e  \u003ch2\u003eDefine \"Generalization\"\u003c/h2\u003e  \u003cp\u003eLooking at our abstraction, \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e, it's pretty concrete, the opposite of abstract. It's concrete because it only works for Byron the Poodle. Our function would be more \u003cem\u003eabstract\u003c/em\u003e if it were written for \u003cem\u003eall dogs\u003c/em\u003e and it just-so-happened that Byron the Poodle was one of the eligible things to undergo the function's processes. The process of moving from \u003cem\u003econcrete\u003c/em\u003e to \u003cem\u003eabstract\u003c/em\u003e is called \"generalization\" (or \"abstraction,\" by some).\u003c/p\u003e  \u003ch2\u003eDemonstrate \"Generalization\" By Using \u003cem\u003eParameters\u003c/em\u003e And \u003cem\u003eArguments\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eLet's make \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e more general. Looking at the \u003ccode\u003econsole.log()\u003c/code\u003e statements, we repeatedly refer to a dog's name and a dog's breed. Both of these are \u003ccode\u003eStrings\u003c/code\u003e. If we were to write them as JavaScript variables inside the function we might write \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's use \u003ccode\u003eString\u003c/code\u003e interpolation to generalize the \u003cem\u003ebody\u003c/em\u003e of our function\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseByronThePoodle() {\u003cbr\u003e  const dogName = \"Byron\";\u003cbr\u003e  const dogBreed = \"poodle\";\u003cbr\u003e  console.log(`Wake ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Leash ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk to the park ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Throw the frisbee for ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk home with ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Unleash ${dogName} the ${dogBreed}`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we \u003cem\u003ecall\u003c/em\u003e this function, we'll get the exact \u003cem\u003esame\u003c/em\u003e result as the original \u003ccode\u003eexerciseByronThePoodle()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eBut there are some advances here. We define the \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e in only one place. That means we can change things a bit easier now by changing these variables instead of using find-and-replace (\u003ccode\u003e2 * 6 = 12\u003c/code\u003e) twelve times.\u003c/p\u003e  \u003cp\u003eOur problem now is that our function has the \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e locked in. If we could make it possible to tell each \u003cem\u003ecall\u003c/em\u003e of the function \"Hey use these \u003ccode\u003eString\u003c/code\u003es instead\" we could get more \u003cem\u003egeneral\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eThat's the purpose of \u003cem\u003eparameters\u003c/em\u003e. \u003cem\u003eParameters\u003c/em\u003e are locally-scoped variables that are usable (\"scoped\") to inside the function. In our example, our variables \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e should become \u003cem\u003eparameters\u003c/em\u003e.  They're defined inside of the \u003cem\u003efunction declaration's\u003c/em\u003e \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseDog(dogName, dogBreed) { ... ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJavaScript will assign the \u003cem\u003earguments\u003c/em\u003e of \"Byron\" and \"poodle\" to the \u003cem\u003eparameters\u003c/em\u003e \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e when this function is called like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexerciseDog(\"Byron\", \"poodle\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe full \u003cem\u003efunction declaration\u003c/em\u003e for \u003ccode\u003eexerciseDog\u003c/code\u003e is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseDog(dogName, dogBreed) {\u003cbr\u003e  console.log(`Wake ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Leash ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk to the park ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Throw the frisbee for ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk home with ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Unleash ${dogName} the ${dogBreed}`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the function is \u003cem\u003ecalled\u003c/em\u003e, it assigns \u003ccode\u003edogName = \"Byron\"\u003c/code\u003e and \u003ccode\u003edogBreed = \"poodle\"\u003c/code\u003e. The parameters are usable inside the function body \u003cem\u003eas if\u003c/em\u003e they had been set with \u003ccode\u003econst\u003c/code\u003e inside the function.\u003c/p\u003e  \u003cp\u003eBecause our function is now more \u003cem\u003egeneral\u003c/em\u003e, we can:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexerciseDog(\"Boo\", \"puggle\");\u003cbr\u003eexerciseDog(\"Jojo\", \"mutt\");\u003cbr\u003eexerciseDog(\"Emmeline\", \"bernedoodle\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf expected arguments aren't given, the parameters won't be set. The parameters' values will be \u003ccode\u003eundefined\u003c/code\u003e.  This is just like non-initialized variables; if you don't assign a value they're \u003ccode\u003eundefined\u003c/code\u003e.  \u003cstrong\u003eThis will  not cause an error in JavaScript\u003c/strong\u003e. This can lead to humorous bugs like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"Wake undefined the undefined\"  // From: console.log(\"Wake ${dogName} the ${dogBreed}\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can assign default arguments to our parameters. While it's not as attention-grabbing as a real error, it's a helpful signal that we've run off the rails.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseDog(dogName=\"ERROR the Broken Dog\", dogBreed=\"Sick Puppy\") { ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn summary, we went from:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea list of operations\u003c/li\u003e \u003cli\u003eto a wrapped abstraction called a function\u003c/li\u003e \u003cli\u003eto a more general version of the function\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eDemonstrate \u003cem\u003eReturn Values\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eSometimes it's helpful to send something \u003cem\u003eback\u003c/em\u003e to the place where the function was \u003cem\u003ecalled\u003c/em\u003e. It's like a \"summary\" of what happened in the function. In real life, we expect the function \"bake a cake\" to return a \"cake\". Or we expect \"Visit the ATM\" to return paper money. Functions in JavaScript can also return things.  Consider:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003econst weatherToday = \"Rainy\";\u003cbr\u003e\u003cbr\u003efunction exerciseDog(dogName, dogBreed) {\u003cbr\u003e  if (weatherToday === \"Rainy\") {\u003cbr\u003e    return `${dogName} did not exercise due to rain`;\u003cbr\u003e  }\u003cbr\u003e  console.log(`Wake ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Leash ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk to the park ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Throw the frisbee for ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Walk home with ${dogName} the ${dogBreed}`);\u003cbr\u003e  console.log(`Unleash ${dogName} the ${dogBreed}`);\u003cbr\u003e  return `${dogName} is happy and tired!`\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst result = exerciseDog(\"Byron\", \"poodle\");\u003cbr\u003econsole.log(result); // =\u0026gt; \"Byron did not exercise due to rain\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the JavaScript engine encounters a \u003ccode\u003ereturn\u003c/code\u003estatement it \"returns\" the value of the thing that appears to the right of the word. The thing could be a \u003ccode\u003eString\u003c/code\u003e, a \u003ccode\u003eNumber\u003c/code\u003e or an \u003cem\u003eexpression\u003c/em\u003e like \u003ccode\u003e1 + 1\u003c/code\u003e (which returns, \u003ccode\u003e2\u003c/code\u003e, sensibly enough).\u003c/p\u003e  \u003cp\u003eWhen a \u003ccode\u003ereturn\u003c/code\u003e is reached in the code, no further code behavior happens. Above,  if \u003ccode\u003eweatherToday === \"Rainy\"\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e, \u003cstrong\u003ethe only thing that happens\u003c/strong\u003e is  the evaluation and return of the \u003ccode\u003eString\u003c/code\u003e \u003ccode\u003e${dogName} did not exercise due to rain\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eReturn values can be saved to variables. Or they can be used as inputs to other functions.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we learned about the  idea of abstraction, both in real life and in code. Abstractions reduce complexity by allowing us to think in groups of activities or things instead of being fully zoomed-in all the time. JavaScript functions are defined:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction functionName(parameter1, parameter2, parameter3) {\u003cbr\u003e  body code goes here\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFunctions are \"called\" by entering the function's name followed by the \u003cem\u003einvocation operator\u003c/em\u003e, \u003ccode\u003e()\u003c/code\u003e. \"Invoke\" or \"execute\" mean the same thing. Arguments that the function declaration expects should be passed inside of the invocation operator. Functions can, but are not obligated to, return \u003cem\u003ereturn values\u003c/em\u003e at the end of their execution. Return values are often results of a process, grand totals, or success / failure data.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions\"\u003eFunctions — reusable blocks of code\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values\"\u003eFunction return values\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\"\u003eFunction declaration\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-communicating-with-the-server","title":"Introduction to Communicating with the Server","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-intro-to-communicating-with-the-server\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-intro-to-communicating-with-the-server/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-intro-to-communicating-with-the-server\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-intro-to-communicating-with-the-server/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecall our Three Pillars of Web Programming\u003c/li\u003e\n\u003cli\u003eDescribe the process of communicating with the server\u003c/li\u003e\n\u003cli\u003eDefine AJAX\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe're two-thirds of the way through our exploration of using JavaScript with the\nDOM. We know how to navigate and change the DOM and we know how to make and\nrecognize events. Along the way, we picked up necessary bits of JavaScript. Now\nwe're getting ready to pull it all together.\u003c/p\u003e\n\n\u003ch2\u003eRecall Our Three Pillars of Web Programming\u003c/h2\u003e\n\n\u003cp\u003eRemember our pillars? By this point, they should feel familiar, but it's\nworthwhile to refer back to them as we move along to keep our journey in\nperspective. So, in that spirit, our three pillars of web programming are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eManipulating the DOM\u003c/li\u003e\n\u003cli\u003eCreating events\u003c/li\u003e\n\u003cli\u003eCommunicating with the server\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe last piece, how we send and retrieve information from the server, is what we\nneed to complete our \"favoriting\" app.\u003c/p\u003e\n\n\u003ch2\u003eDescribe the Process of Communicating With the Server\u003c/h2\u003e\n\n\u003cp\u003eIn our Simple Liker app, “favoriting” is a click event on a heart icon that\nupdates the user’s DOM to show a full heart.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe click event kicks off a sequence of actions to notify the server that the\npost has received a like. The server updates the post in the backend then passes\na message back to the browser indicating that the update was made successfully.\nWhen that success message is received, we then update the DOM to reflect the\nchange.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e The update to the DOM is not \u003cem\u003enecessarily\u003c/em\u003e dependent on a success\nmessage from the server. We could just update the DOM in response to the click\nevent itself. However, this is \u003cstrong\u003e\u003cem\u003enot\u003c/em\u003e\u003c/strong\u003e the proper procedure. We only want to\nupdate the DOM once we know that the server successfully \u003cem\u003epersisted\u003c/em\u003e the\nchange in the backend.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe user doesn't see this entire process happening. Ideally, the process moves\nquickly enough that the user barely even notices that it took place. All they\nknow is that the little heart icon is now reflecting their clicked appreciation.\nTo keep the user experience fast and smooth, we use something called the \u003cem\u003eAJAX\ntechnique\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDefine AJAX\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003eAJAX\u003c/em\u003e is short for \"asynchronous JavaScript and XML,\" and it's the process used\nto make requests to the server and update the DOM without reloading the web\npage. There are a few different ways to implement this; a bit later in this\nsection we'll take a look at one of the most efficient ways: \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe name \"asynchronous JavaScript and XML\" arises from the fact that, in the\npast, the data sent back to the browser from the server was encoded as XML. Now,\nhowever, it's most often sent back in a format known as JSON (\"Jay-Sawn\").\nJavaScript Object Notation (JSON) is a \u003ccode\u003eString\u003c/code\u003e that JavaScript knows how to\nturn into an \u003ccode\u003eObject\u003c/code\u003e. Using JavaScript, we can access the JSON returned by the\nserver and use it to update the DOM.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe last skill we need to be effective JavaScript web programmers is\ncommunication with the server. Once we've mastered this final step, we will be\nable to listen for an event, persist the change to the backend, and manipulate\nthe DOM to reflect the updated information. With the AJAX technique, we'll learn\nhow to send and receive data quickly so that we keep our users' experience a\npositive one.\u003c/p\u003e","frontPage":false},{"exportId":"review-modifying-objects","title":"Review: Modifying Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-modifying-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e property using dot or bracket notation\u003c/li\u003e \u003cli\u003eModify a property using dot or bracket notation\u003c/li\u003e \u003cli\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e nondestructively using the spread operator\u003c/li\u003e \u003cli\u003eUsing \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e nondestructively using \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove a property from an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIdentify the relationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we learned the basics of creating \u003ccode\u003eObject\u003c/code\u003es and accessing their properties. In this lesson we'll learn how to modify and remove properties, both destructively and nondestructively. Finally, we'll explore the relationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eAs always, don't forget to follow along in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e Property Using Dot or Bracket Notation\u003c/h2\u003e  \u003cp\u003eWe know how to initialize a variable by declaring it and assigning it a value using the assignment operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst city = \"New York\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe process of creating a property inside an existing object is similar; we specify the key and assign it a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst circle = {}; // Create `circle` and set it to an empty Object\u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; {}\u003cbr\u003e\u003cbr\u003ecircle.radius = 5; // Create the key inside `circle` and set its value to 5 \u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; { radius: 5 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can do this using either dot or bracket notation, and we can use any expression as the value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst circle = {};\u003cbr\u003e\u003cbr\u003ecircle.radius = 5;\u003cbr\u003e\u003cbr\u003ecircle['diameter'] = 10;\u003cbr\u003e\u003cbr\u003ecircle.circumference = circle.diameter * Math.PI;\u003cbr\u003e//=\u0026gt; 31.41592653589793\u003cbr\u003e\u003cbr\u003ecircle['area'] = Math.PI * circle.radius ** 2;\u003cbr\u003e//=\u0026gt; 78.53981633974483\u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; { radius: 5, diameter: 10, circumference: 31.41592653589793, area: 78.53981633974483 } \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eA Side Note\u003c/strong\u003e: Recall from the lesson on \u003ccode\u003eArray\u003c/code\u003es that we can add, modify or delete elements even if we use \u003ccode\u003econst\u003c/code\u003e to initialize the \u003ccode\u003eArray\u003c/code\u003e. The same thing applies here: we can add, modify or delete properties, but we can't reassign the variable itself.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Note that the process above gives us an alternative to typing out our \u003ccode\u003eObject\u003c/code\u003e using literal syntax: we can initialize an empty array and then use dot notation or bracket notation to create the properties programmatically. This approach is less error-prone than using literal syntax since JavaScript creates the correct \u003ccode\u003eObject\u003c/code\u003e syntax for us. Try it out in the REPL.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eModify a Property Using Dot or Bracket Notation\u003c/h3\u003e  \u003cp\u003eWe can update or overwrite existing properties simply by assigning a new value to an existing key:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mondayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Curly',\u003cbr\u003e  salad: 'Cobb'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emondayMenu.fries = 'Sweet potato';\u003cbr\u003e\u003cbr\u003emondayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Cobb\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that modifying an \u003ccode\u003eObject\u003c/code\u003e's properties in the way we did above is \u003cem\u003edestructive\u003c/em\u003e. This means that we're making changes directly to the original \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at an example. We'll start by creating a function to encapsulate this modification process:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction destructivelyUpdateObject (obj, key, value) {\u003cbr\u003e  obj[key] = value; //Why are we using bracket notation here?\u003cbr\u003e\u003cbr\u003e  return obj;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur function takes three arguments: the original menu \u003ccode\u003eObject\u003c/code\u003e, the \u003ccode\u003ekey\u003c/code\u003e identifying the property we want to update, and the \u003ccode\u003evalue\u003c/code\u003e we want to change its value to.\u003c/p\u003e  \u003cp\u003eAt our restaurant, we've finished serving for the day. It's time to update our \u003ccode\u003emondayMenu\u003c/code\u003e to the \u003ccode\u003etuesdayMenu\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mondayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Cobb'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst tuesdayMenu = destructivelyUpdateObject(mondayMenu, 'salad', 'Caesar');\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" }\u003cbr\u003e\u003cbr\u003etuesdayMenu.salad;\u003cbr\u003e//=\u0026gt; \"Caesar\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks like our \u003ccode\u003etuesdayMenu\u003c/code\u003e came out perfectly. But what about \u003ccode\u003emondayMenu\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emondayMenu.salad;\u003cbr\u003e//=\u0026gt; \"Caesar\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDang! We don't serve Caesar salad on Mondays. Instead of destructively updating the original menu, is there a way to nondestructively merge the change(s) into a new \u003ccode\u003eObject\u003c/code\u003e, leaving the original intact?\u003c/p\u003e  \u003ch2\u003eUpdate an Object Nondestructively Using the Spread Operator\u003c/h2\u003e  \u003cp\u003eLet's create a new method; it will take the same three arguments as the previous method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  // Code to return new, updated menu object\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRecall from the lessons on \u003ccode\u003eArray\u003c/code\u003es that we can use the \u003cem\u003espread operator\u003c/em\u003e to copy all the elements of an existing array into a new array. We can do the same thing with \u003ccode\u003eObject\u003c/code\u003es. Let's use the spread operator to copy all of the old menu \u003ccode\u003eObject\u003c/code\u003e's properties into a new \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  const newObj = { ...obj };\u003cbr\u003e\u003cbr\u003e  // Code to return new, updated menu object goes here\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a clone of the original object and save it into a new variable. We can then update the newly-created \u003ccode\u003enewObj\u003c/code\u003e with the desired change and return that updated menu, leaving the original menu \u003ccode\u003eObject\u003c/code\u003e unchanged:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  const newObj = { ...obj };\u003cbr\u003e\u003cbr\u003e  newObj[key] = value;\u003cbr\u003e\u003cbr\u003e  return newObj;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst sundayMenu = nondestructivelyUpdateObject(tuesdayMenu, 'fries', 'Shoestring');\u003cbr\u003e\u003cbr\u003etuesdayMenu.fries;\u003cbr\u003e//=\u0026gt; \"Sweet potato\"\u003cbr\u003e\u003cbr\u003esundayMenu.fries;\u003cbr\u003e//=\u0026gt; \"Shoestring\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo review, we are calling our \u003ccode\u003enondestructivelyUpdateObject()\u003c/code\u003e function, passing as our arguments the original menu (\u003ccode\u003etuesdayMenu\u003c/code\u003e) and the key and value representing the desired change. The function first makes a copy of \u003ccode\u003etuesdayMenu\u003c/code\u003e, then changes the value associated with the \u003ccode\u003efries\u003c/code\u003e key to \u003ccode\u003e\"Shoestring\"\u003c/code\u003e. Finally, it returns the updated menu, which is stored into the variable \u003ccode\u003esundayMenu\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhile this works, it's quite a bit to write, and it's not very extensible. If we want to modify more than a single property, we'll have to completely rewrite our function! Luckily, JavaScript has a much better solution for us.\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we took a look at a couple of JavaScript's static \u003ccode\u003eObject\u003c/code\u003e methods, \u003ccode\u003eObject.keys()\u003c/code\u003e and \u003ccode\u003eObject.values()\u003c/code\u003e. A third method, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e, will allow us to combine properties from multiple \u003ccode\u003eObject\u003c/code\u003es into a single \u003ccode\u003eObject\u003c/code\u003e. The method takes two or more \u003ccode\u003eObject\u003c/code\u003es as its arguments. The first argument passed to \u003ccode\u003eObject.assign()\u003c/code\u003e is the \u003ccode\u003eObject\u003c/code\u003e into which all of the properties will be merged. Every additional argument is an \u003ccode\u003eObject\u003c/code\u003e whose properties we want to merge into the first \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.assign(initialObject, additionalObject, additionalObject, ...); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe return value of \u003ccode\u003eObject.assign()\u003c/code\u003e is the initial \u003ccode\u003eObject\u003c/code\u003e after all of the additional \u003ccode\u003eObject\u003c/code\u003es' properties have been merged in:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.assign({ eggs: 3 }, { flour: '1 cup' });\u003cbr\u003e//=\u0026gt; { eggs: 3, flour: \"1 cup\" }\u003cbr\u003e\u003cbr\u003eObject.assign({ eggs: 3 }, { chocolateChips: '1 cup', flour: '2 cups' }, { flour: '1/2 cup' });\u003cbr\u003e// { eggs: 3, chocolateChips: \"1 cup\", flour: \"1/2 cup\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePay attention to the \u003ccode\u003eflour\u003c/code\u003e property in the above example. \u003cstrong\u003eIf multiple \u003ccode\u003eObject\u003c/code\u003es have a property with the same key, the last key to be defined wins out\u003c/strong\u003e. Essentially, the last call to \u003ccode\u003eObject.assign()\u003c/code\u003e in the above snippet is wrapping all of the following assignments into a single line of code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst recipe = { eggs: 3 };\u003cbr\u003e\u003cbr\u003erecipe.chocolateChips = '1 cup';\u003cbr\u003e\u003cbr\u003erecipe.flour = '2 cups';\u003cbr\u003e\u003cbr\u003erecipe.flour = '1/2 cup'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry both approaches out in REPL and verify that they yield the same results.\u003c/p\u003e  \u003cp\u003eNote that the \u003ccode\u003eObject\u003c/code\u003e being passed as the first argument — in this case, recipe — is modified and returned at the end. So simply using \u003ccode\u003eObject.assign()\u003c/code\u003e does not make our function nondestructive. So how do we solve that problem? Well, the first argument we pass \u003cstrong\u003edoes not need to be an existing \u003ccode\u003eObject\u003c/code\u003e\u003c/strong\u003e!\u003c/p\u003e  \u003ch2\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e Nondestructively Using \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eA common pattern for \u003ccode\u003eObject.assign()\u003c/code\u003e is to provide an empty \u003ccode\u003eObject\u003c/code\u003e as the first argument. That way we're composing an entirely new \u003ccode\u003eObject\u003c/code\u003e instead of modifying or overwriting the properties of an existing \u003ccode\u003eObject\u003c/code\u003e. This pattern allows us to rewrite the above \u003ccode\u003edestructivelyUpdateObject()\u003c/code\u003e function in a nondestructive way:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  return Object.assign({}, obj, { [key]: value });\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code above takes the first argument (an empty \u003ccode\u003eObject\u003c/code\u003e), adds all the properties in \u003ccode\u003eobj\u003c/code\u003e to it, then adds one final property consisting of the key and value that represent the change we want to make. If that key doesn't already exist in \u003ccode\u003eobj\u003c/code\u003e, it is added and its value is set to \u003ccode\u003evalue\u003c/code\u003e. If it does already exist, its old value is replaced by \u003ccode\u003evalue\u003c/code\u003e. Note that all the arguments to \u003ccode\u003eObject.assigne()\u003c/code\u003e must be objects, so we're representing the key-value pair as an \u003ccode\u003eObject\u003c/code\u003e using literal syntax here. Finally, the resulting new \u003ccode\u003eObject\u003c/code\u003e is returned.\u003c/p\u003e  \u003cp\u003eIn other languages (like Ruby), this behavior is called \"merging.\" You take an original base \u003ccode\u003eObject\u003c/code\u003e (maybe with some typical \"standard\" attribute / value pairs already set), and then you \"merge\" in additional Object(s).\u003c/p\u003e  \u003cp\u003eLet's take a look at it using our \u003ccode\u003erecipe\u003c/code\u003e example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  return Object.assign({}, obj, { [key]: value });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst recipe = { eggs: 3 };\u003cbr\u003e\u003cbr\u003econst newRecipe = nondestructivelyUpdateObject(recipe, 'chocolate', '1 cup');\u003cbr\u003e//=\u0026gt; { eggs: 3, chocolate: \"1 cup\" }\u003cbr\u003e\u003cbr\u003enewRecipe;\u003cbr\u003e//=\u0026gt; { eggs: 3, chocolate: \"1 cup\" }\u003cbr\u003e\u003cbr\u003erecipe;\u003cbr\u003e//=\u0026gt; { eggs: 3 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's important that we merge everything into a new, empty \u003ccode\u003eObject\u003c/code\u003e. Otherwise, we would be modifying the original \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSo now let's write a new function for our restaurant that uses this technique. We can also make one additional improvement: we can set up our function to take an \u003ccode\u003eObject\u003c/code\u003e containing the changes we want to make as an argument, rather than a single key and value. This enables us to make multiple changes with one call to the function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction createNewMenu (oldMenu, menuChanges) {\u003cbr\u003e  return Object.assign({}, oldMenu, menuChanges);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst tuesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Caesar'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst newOfferings = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst wednesdayMenu = createNewMenu(tuesdayMenu, newOfferings);\u003cbr\u003e\u003cbr\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\", salad: \"Southwestern\" }\u003cbr\u003e\u003cbr\u003etuesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the value for \u003ccode\u003efries\u003c/code\u003e remains the same because our \u003ccode\u003enewOfferings\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e did not contain a change for that property. \u003cstrong\u003eHowever, this does not work for \u003cem\u003enested\u003c/em\u003e \u003ccode\u003eObjects\u003c/code\u003e.\u003c/strong\u003e For example, if \u003ccode\u003enewOfferings\u003c/code\u003e did not have an updated value for \u003ccode\u003ehard\u003c/code\u003e cheese:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst newOfferings = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina'\u003cbr\u003e  },\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur updated menu would not include that property and would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\"}, fries: \"Sweet potato\", salad: \"Southwestern\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e... instead of the desired outcome of this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Manchego\"}, fries: \"Sweet potato\", salad: \"Southwestern\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou don't need to worry about this too much for now: just be aware that this method does not create a \u003cem\u003edeep clone\u003c/em\u003e. You will learn how to do that later in the course.\u003c/p\u003e  \u003cp\u003eBon appétit!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Doing nondestructive updates (i.e. \"creating new things and merging on top\") is a really important pattern. It turns out that, in many places, nondestructive updates are more performant. The main reason for this is when you add something to an existing \u003ccode\u003eObject\u003c/code\u003e, the computer has to make sure that the \u003ccode\u003eObject\u003c/code\u003e has enough room to add what you're saying to add. If it doesn't, the computer needs to do cleanup work, find some more space, copy the old thing over, add the new, thing, and then resume work. That \"accounting\" process is actually quite slow.\u003c/p\u003e  \u003cp\u003eFurthermore, in the cloud-based world of programming we're moving to more and more, we can't be sure that two computers will share the same memory. They might be servers separated by centimeters or kilometers. Using nondestructive updates ensures that our functions have \"all they need\" to run a function call independently, i.e., they have their own copy of the data they need and aren't sharing memory with other machines.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eRemove a Property from an Object\u003c/h2\u003e  \u003cp\u003eUh oh, we ran out of Southwestern dressing, so we have to take the salad off the menu. In JavaScript, that's as easy as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wednesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edelete wednesdayMenu.salad;\u003cbr\u003e//=\u0026gt; true\u003cbr\u003e\u003cbr\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe pass the property that we'd like to remove to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e operator, and JavaScript takes care of the rest. Poof! No more \u003ccode\u003esalad\u003c/code\u003e property on the \u003ccode\u003ewednesdayMenu\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify the Relationship Between Arrays and Objects\u003c/h2\u003e  \u003cp\u003eThink back to the early lesson on data types in JavaScript. We listed off seven types into which all data falls: numbers, strings, booleans, symbols, \u003ccode\u003eObject\u003c/code\u003es, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e. Notice anything missing? Arrays!\u003c/p\u003e  \u003cp\u003eWhy isn't an \u003ccode\u003eArray\u003c/code\u003e a fundamental data type in JavaScript? The answer is that \u003cstrong\u003eit's actually a special type of \u003ccode\u003eObject\u003c/code\u003e\u003c/strong\u003e. Yes, that's right: \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eArray\u003c/code\u003es are \u003ccode\u003eObject\u003c/code\u003es\u003c/em\u003e\u003c/strong\u003e. To underscore this point, check out what the \u003ccode\u003etypeof\u003c/code\u003e operator returns when we use it on an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof [];\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can set properties on an \u003ccode\u003eArray\u003c/code\u003e just like a regular \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [];\u003cbr\u003e\u003cbr\u003emyArray.summary = 'Empty array!';\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [summary: \"Empty array!\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can modify and access those properties, too:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray['summary'] = 'This array is totally empty.';\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [summary: \"This array is totally empty.\"]\u003cbr\u003e\u003cbr\u003emyArray.summary;\u003cbr\u003e//=\u0026gt; \"This array is totally empty.\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, \u003cem\u003eeverything\u003c/em\u003e we just learned how to do to \u003ccode\u003eObject\u003c/code\u003es can also be done to \u003ccode\u003eArray\u003c/code\u003es because \u003ccode\u003eArray\u003c/code\u003es \u003cstrong\u003eare\u003c/strong\u003e \u003ccode\u003eObject\u003c/code\u003es. Just special ones. To see the special stuff, let's \u003ccode\u003e.push()\u003c/code\u003e some values into our \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.push(2, 3, 5, 7);\u003cbr\u003e//=\u0026gt; 4\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, 3, 5, 7, summary: \"This array is totally empty.\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCool, looks like everything's still in there. What's your guess about the \u003ccode\u003eArray\u003c/code\u003e's \u003ccode\u003e.length\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHuh, that's interesting. Surely our \u003ccode\u003esummary\u003c/code\u003e must be the first element in the \u003ccode\u003eArray\u003c/code\u003e, no? After all, we did add it before we \u003ccode\u003e.push()\u003c/code\u003eed all those values in.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray[0];\u003cbr\u003e//=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHm, then maybe it's the last element?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray[myArray.length - 1];\u003cbr\u003e//=\u0026gt; 7 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat the heck? Where is it?\u003c/p\u003e  \u003cp\u003eYou see, one of the 'special' features of an \u003ccode\u003eArray\u003c/code\u003e is that \u003cstrong\u003eits \u003ccode\u003eArray\u003c/code\u003e-style elements are stored separately from its \u003ccode\u003eObject\u003c/code\u003e-style properties\u003c/strong\u003e. The \u003ccode\u003e.length\u003c/code\u003e property of an \u003ccode\u003eArray\u003c/code\u003e describes how many items exist in its special list of elements. Its \u003ccode\u003eObject\u003c/code\u003e-style properties are not included in that calculation.\u003c/p\u003e  \u003cp\u003eThis brings up an interesting question: if we add a new property to an \u003ccode\u003eArray\u003c/code\u003e that has a key of \u003ccode\u003e0\u003c/code\u003e, how does the JavaScript engine know whether it should be an \u003ccode\u003eObject\u003c/code\u003e-style property or an \u003ccode\u003eArray\u003c/code\u003e-style element?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [];\u003cbr\u003e\u003cbr\u003emyArray[0] = 'Will this be an `Object` property or an `Array` element?';\u003cbr\u003e//=\u0026gt; \"Will this be an `Object` property or an `Array` element?\"\u003cbr\u003e\u003cbr\u003e// Moment of truth...\u003cbr\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [\"Will this be an `Object` property or an `Array` element?\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo JavaScript used that assignment operation to add a new \u003ccode\u003eArray\u003c/code\u003e-style element. What happens if we enclose the integer in quotation marks, turning it into a string?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray['0'] = 'What about this one?';\u003cbr\u003e//=\u0026gt; \"What about this one?\"\u003cbr\u003e\u003cbr\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [\"What about this one?\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is hitting on a fundamental truth: \u003cstrong\u003eall keys in \u003ccode\u003eObject\u003c/code\u003es and all indexes in \u003ccode\u003eArray\u003c/code\u003es are actually strings\u003c/strong\u003e. In \u003ccode\u003emyArray[0]\u003c/code\u003e we're using the integer \u003ccode\u003e0\u003c/code\u003e, but under the hood the JavaScript engine automatically converts that to the string \u003ccode\u003e\"0\"\u003c/code\u003e. When we access elements or properties of an \u003ccode\u003eArray\u003c/code\u003e, the engine routes all integers and integers masquerading as strings (e.g., \u003ccode\u003e'14'\u003c/code\u003e, \u003ccode\u003e\"953\"\u003c/code\u003e, etc.) to the \u003ccode\u003eArray\u003c/code\u003e's special list of elements, and it treats everything else as a simple \u003ccode\u003eObject\u003c/code\u003e property. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003emyArray['1'] = 'Hi';\u003cbr\u003e//=\u0026gt; \"Hi\"\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, \"Hi\", 5, 7]\u003cbr\u003e\u003cbr\u003emyArray['01'] = 'Ho';\u003cbr\u003e//=\u0026gt; \"Ho\"\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, \"Hi\", 5, 7, 01: \"Ho\"]\u003cbr\u003e\u003cbr\u003emyArray[01];\u003cbr\u003e//=\u0026gt; \"Hi\"\u003cbr\u003e\u003cbr\u003emyArray['01'];\u003cbr\u003e//=\u0026gt; \"Ho\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter adding our weird \u003ccode\u003e'01'\u003c/code\u003e property, the \u003ccode\u003e.length\u003c/code\u003e property still returns \u003ccode\u003e4\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo it would stand to reason that \u003ccode\u003eObject.keys()\u003c/code\u003e would only return \u003ccode\u003e'01'\u003c/code\u003e, right?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.keys(myArray);\u003cbr\u003e//=\u0026gt; [\"0\", \"1\", \"2\", \"3\", \"01\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUnfortunately not. The reason why \u003ccode\u003eArray\u003c/code\u003es have this behavior would take us deep inside the JavaScript source code, and it's frankly not that important. Just remember these simple guidelines, and you'll be just fine:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eFor accessing elements in an \u003ccode\u003eArray\u003c/code\u003e, always use integers\u003c/strong\u003e.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eBe wary of setting \u003ccode\u003eObject\u003c/code\u003e-style properties on an \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e. There's rarely any reason to, and it's usually more trouble than it's worth.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eRemember that all \u003ccode\u003eObject\u003c/code\u003e keys, including \u003ccode\u003eArray\u003c/code\u003e indexes, are strings\u003c/strong\u003e. This will really come into play when we learn how to iterate over \u003ccode\u003eObject\u003c/code\u003es, so keep it in the back of your mind.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this and the previous lesson, we dug deep into \u003ccode\u003eObject\u003c/code\u003es in JavaScript. We identified what an \u003ccode\u003eObject\u003c/code\u003e is and how to access values stored in it. We also covered how to add and remove properties and how to use some of JavaScript's convenience methods (\u003ccode\u003eObject.keys()\u003c/code\u003e, \u003ccode\u003eObject.values()\u003c/code\u003e, and \u003ccode\u003eObject.assign()\u003c/code\u003e). We also explored the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"using-fetch","title":"Using fetch()","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-using-fetch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-fetch/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-fetch\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-fetch/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain how to fetch data with \u003ccode\u003efetch()\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWorking around backwards compatibility issues\u003c/li\u003e\n\u003cli\u003eIdentify examples of the AJAX technique on popular websites\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen it comes to making engaging web sites, we often find ourselves needing to\nsend a lot of data (text, images, media, etc.) so that the page is exciting.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBut\u003c/strong\u003e browsers won't show anything until they've processed all the of that\ndata. As a result, they show nothing. The screen stays blank and users\nexperience \"waiting.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/tXL4FHPSnVJ0A/giphy.gif\" alt=\"Spanky waits\"\u003e\u003c/p\u003e\n\n\u003cp\u003eToo much waiting means visitors will click away and never come back. Web users\nexpect sites to load quickly \u003cstrong\u003eand\u003c/strong\u003e to stay updated. Research shows that 40\npercent of visitors to a website will leave if the site takes more than 3\nseconds to load. Mobile users are even \u003cem\u003eless\u003c/em\u003e patient.\u003c/p\u003e\n\n\u003cp\u003eTo solve this problem and help provide lots of other really great features, we\ndeveloped a technique called \u003cstrong\u003e\u003cem\u003eAJAX\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn AJAX we:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDeliver an initial, engaging page using HTML and CSS which browsers render\n\u003cem\u003equickly\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eThen\u003c/em\u003e we use JavaScript to add more to the DOM, behind the scenes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAJAX relies on several technologies:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThings called \u003ccode\u003ePromise\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eThings called \u003ccode\u003eXMLHttpRequestObject\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Serialization\"\u003eserialization format\u003c/a\u003e called JSON for \"JavaScript Object Notation\"\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing\"\u003easynchronous Input / Output\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\"\u003ethe event loop\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePart of what makes AJAX complicated to learn is that to understand it\n\u003cem\u003ethoroughly\u003c/em\u003e, you need to understand \u003cem\u003eall\u003c/em\u003e these components. For the moment,\nhowever, we're going to gloss over all these pieces in this lesson. It just so\nhappens that modern browsers have \u003cem\u003eabstracted\u003c/em\u003e all those components into a\nsingle function called \u003ccode\u003efetch()\u003c/code\u003e. While someone interviewing to be a front-end\ndeveloper will be expected to be able to explain all those components above\n(which we \u003cem\u003ewill\u003c/em\u003e cover later), while we're getting the hang of things, we're\ngoing to simplify our task by using \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's learn to use \u003ccode\u003efetch()\u003c/code\u003e to apply the AJAX technique: a way to load\nadditional data \u003cem\u003eafter\u003c/em\u003e information is presented to the user.\u003c/p\u003e\n\n\u003ch2\u003eExplain How to Fetch Data with \u003ccode\u003efetch()\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003efetch()\u003c/code\u003e function retrieves data. It's a global \u003cem\u003emethod\u003c/em\u003e on the \u003ccode\u003ewindow\u003c/code\u003e\nobject. That means you can use it simply by calling \u003ccode\u003efetch()\u003c/code\u003e and passing in a\npath to a resource as an argument. To use the data that is returned by the\n\u003ccode\u003efetch()\u003c/code\u003e, we need to chain on the \u003ccode\u003ethen()\u003c/code\u003e method. We can see what this looks\nlike below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(\"string representing a URL to a data source\")\n.then(function(response) {\u003cbr\u003e  return response.json();\u003cbr\u003e})\n.then(function(json){\u003cbr\u003e  // Use the data inside of `json` to do DOM manipulation\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's add some multi-line (\u003ccode\u003e/*...*/\u003c/code\u003e) comments (which JavaScript will\nignore) to describe what's happening:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(\"string representing a URL to a data source\")\u003cbr\u003e  /*\u003cbr\u003e    Here we are calling `fetch()` and passing a URL to a data source as the\u003cbr\u003e    argument. The function call returns an object that represents what the data\u003cbr\u003e    source sent back. It does *not* return the actual content. (More about this\u003cbr\u003e    later.)\u003cbr\u003e  */\u003cbr\u003e\u003cbr\u003e  .then(function(response) {\u003cbr\u003e    return response.json();\u003cbr\u003e  })\u003cbr\u003e\u003cbr\u003e  /*\u003cbr\u003e    Next, we call the then() method on the object that comes back from the\u003cbr\u003e    `fetch()`. We capture the object into the `response` parameter so it can be\u003cbr\u003e    passed as an argument into a callback function.\u003cbr\u003e\u003cbr\u003e    Inside the callback function, we do whatever processing we need on the\u003cbr\u003e    object, in this case, converting it into JSON using the built-in `json()`\u003cbr\u003e    method. (Another commonly-used method is `text()`, which will convert the\u003cbr\u003e    response into plain text.) Finally, we return the JSON-ified response. \u003cbr\u003e\u003cbr\u003e    Note that we *have to return* the content that we've gotten out of the\u003cbr\u003e    response and converted to JSON in order to use the data in the next then()\u003cbr\u003e    method call.\u003cbr\u003e\u003cbr\u003e    This first callback function is usually only one line: returning the \u003cbr\u003e    content from the response after converting it into the format me need.\u003cbr\u003e  */\u003cbr\u003e\u003cbr\u003e  .then(function(json){\u003cbr\u003e    // Use the data inside of `json` to do DOM manipulation\u003cbr\u003e  })\u003cbr\u003e  /*\u003cbr\u003e    This time, the `then()` method is receiving the object that we returned\u003cbr\u003e    from the first call to `then()` (our JSON-ified object, in this case). We\u003cbr\u003e    capture the object in the parameter `json` and pass it into a second\u003cbr\u003e    callback function, where we will write code to do DOM manipulation using\u003cbr\u003e    the data from the fetch\u003cbr\u003e  */\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e As always, we can name the parameters being used in our callback\nfunctions anything we like, but you will often see \u003ccode\u003eresponse\u003c/code\u003e (or \u003ccode\u003eresp\u003c/code\u003e) and\n\u003ccode\u003ejson\u003c/code\u003e used.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eFilling Out the Example\u003c/h3\u003e\n\n\u003cp\u003eLet's fill out our base skeleton.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll provide a \u003ccode\u003eString\u003c/code\u003e argument to \u003ccode\u003efetch()\u003c/code\u003e.  As it happens,\n\u003ccode\u003ehttp://api.open-notify.org/astros.json\u003c/code\u003e will provide a list of the humans in\nspace. You can paste this URL into a browser tab and see that the data uses a\nJSON structure.\u003c/p\u003e\n\n\u003cp\u003eJSON is a way to send a collection of data in the internet, formatted as a\n\u003ccode\u003eString\u003c/code\u003e. It just so happens that this string is written in a way that would be\nvalid JavaScript syntax for an \u003ccode\u003eObject\u003c/code\u003e instance. Thus the name \"JavaScript\nObject Notation\", or JSON (\"jay-sawn\"). Programmers find it very easy to think\nabout JavaScript \u003ccode\u003eObject\u003c/code\u003es, so they often send \"stringified\" versions of\n\u003ccode\u003eObject\u003c/code\u003es as responses.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ethen()\u003c/code\u003e takes a function. Here is where you tell JavaScript to ask the\nnetwork response to be turned into JSON.  When you first start using \u003ccode\u003efetch()\u003c/code\u003e,\nmost of your first \u003ccode\u003ethen()\u003c/code\u003es are going have a callback function that looks like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction(response) {\u003cbr\u003e  return response.json();\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe final \u003ccode\u003ethen()\u003c/code\u003e is when you actually get some JSON (the return from the first\n\u003ccode\u003ethen()\u003c/code\u003e) passed in. You can then do something with that JSON. The easiest\noptions are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ealert()\u003c/code\u003e the JSON\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003econsole.log()\u003c/code\u003e the JSON\u003c/li\u003e\n\u003cli\u003ehand the JSON off to another function.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe'll go for the \u003ccode\u003econsole.log()\u003c/code\u003e approach:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction(json) {\u003cbr\u003e  console.log(json)\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSTRETCH:\u003c/strong\u003e But you \u003cem\u003eshould\u003c/em\u003e be able to imagine that you could do some DOM\nmanipulation instead.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eHere's a completed example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://api.open-notify.org/astros.json')\n.then(function(response) {\u003cbr\u003e  console.log(response);\u003cbr\u003e  return response.json();\u003cbr\u003e})\n.then(function(json) {\u003cbr\u003e  console.log(json);\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"http://i.giphy.com/3osxYwZm9WZwnt1Zja.gif\" alt=\"kimmy wow\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's perform a demonstration. Navigate to \u003ca href=\"http://open-notify.org\"\u003ehttp://open-notify.org\u003c/a\u003e in an\n\u003cstrong\u003eincognito\u003c/strong\u003e tab. We need to go incognito to make sure that none of your\nbrowsing history interferes with this experiment.\u003c/p\u003e\n\n\u003cp\u003eOpen up DevTools and paste the following into the console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://api.open-notify.org/astros.json')\n.then(function(response) {\u003cbr\u003e  return response.json();\u003cbr\u003e}).then(function(json) {\u003cbr\u003e  console.log(json);\u003cbr\u003e  console.log(`Holy cow! There are ${json[\"number\"]} humans in space.`);\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/js-async-fetch-readme/simple_fetch_incog_window.png\" alt=\"Simple fetch()\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou might notice in the DevTools console that this chained method call returned\na \u003ccode\u003ePromise\u003c/code\u003e. We'll cover that later.\u003c/p\u003e\n\n\u003ch2\u003eWorking Around Backwards Compatibility Issues\u003c/h2\u003e\n\n\u003cp\u003eAs you can see, \u003ccode\u003efetch()\u003c/code\u003e provides us with a short way to fetch and work with\nresources. However, \u003ccode\u003efetch()\u003c/code\u003e has only recently arrived in browsers. In older\ncode you might see \u003ccode\u003ejquery.ajax\u003c/code\u003e or \u003ccode\u003e$.ajax\u003c/code\u003e or an object called an\n\u003ccode\u003eXMLHttpRequestObject\u003c/code\u003e. These are distractions at this point in your education.\nAfter working with \u003ccode\u003efetch()\u003c/code\u003e you'll be able to more easily integrate these\nspecial topics.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Examples of the AJAX Technique on Popular Websites\u003c/h2\u003e\n\n\u003cp\u003eThe AJAX technique opens up a lot of uses!\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIt allows us to pull in dynamic content. The same \"framing\" HTML page remains\non screen for a cooking website. The recipe on display updates \u003cem\u003ewithout\u003c/em\u003e page\nload. This approach was pioneered by GMail whose nav area is swapped for mail\ncontent swiftly — thanks to AJAX.\u003c/li\u003e\n\u003cli\u003eIt allows us to get data from multiple sources. We could make a website that\ndisplays the current weather forecast and the current price of bitcoin side by\nside! This approach is used by most sites to render ads. Your content loads\nwhile JavaScript gets the ad to show and injects it into your page (sometimes\nAJAX can be used in a way that we don't \u003cem\u003eentirely\u003c/em\u003e like).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eMany pages use AJAX to provide users fast and engaging sites. It's certainly not\nrequired in all sites. In fact, using it could be a step backward if simple HTML\nwould suffice. However, as sites have more and more material, the AJAX technique\nis a great tool to have.\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003efetch()\u003c/code\u003e, we can include requests for data wherever we need to in our\ncode. We can \u003ccode\u003efetch()\u003c/code\u003e data on the click of a button or the expansion of an\naccordion display. There are many older methods for fetching data, but \u003ccode\u003efetch()\u003c/code\u003e\nis the future.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\"\u003eMDN Fetch API\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"review-traversing-nested-objects","title":"Review: Traversing Nested Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-traversing-nested-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRevisit why nested objects are useful\u003c/li\u003e \u003cli\u003eReview how to access inner properties\u003c/li\u003e \u003cli\u003eUse recursion to iterate over nested objects and arrays\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eYou've just been onboarded to the dev team working on Flatbook, the world's premier Flatiron School-based social network. Here at Flatbook, we have some pretty complex data-modeling needs. For instance, think about the breadth of information we might want to display on each user's profile page:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eFirst name\u003c/li\u003e \u003cli\u003eLast name\u003c/li\u003e \u003cli\u003eEmployer  \u003cul\u003e \u003cli\u003eCompany name\u003c/li\u003e \u003cli\u003eJob title\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eFriends  \u003cul\u003e \u003cli\u003eFirst name\u003c/li\u003e \u003cli\u003eLast name\u003c/li\u003e \u003cli\u003eEmployer\u003c/li\u003e \u003cli\u003eCompany name\u003c/li\u003e \u003cli\u003eJob title\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eProjects  \u003cul\u003e \u003cli\u003eTitle\u003c/li\u003e \u003cli\u003eDescription\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWe can already start to see some problems with trying to fit all of this into a \u003cem\u003eshallow\u003c/em\u003e (non-nested) JavaScript object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  companyName: 'Flatbook Labs',\u003cbr\u003e  jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend1firstName: 'Nancy',\u003cbr\u003e  friend1lastName: 'Burgess',\u003cbr\u003e  friend1companyName: 'Flatbook Labs',\u003cbr\u003e  friend1jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend2firstName: 'Corinna',\u003cbr\u003e  friend2lastName: 'Jackson',\u003cbr\u003e  friend2companyName: 'Flatbook Labs',\u003cbr\u003e  friend2jobTitle: 'Senior Developer',\u003cbr\u003e  project1title: 'Flatbook',\u003cbr\u003e  project1description: 'The premier Flatiron School-based social network in the world.',\u003cbr\u003e  project2title: 'Scuber',\u003cbr\u003e  project2description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGoodness, that's messy. It would be a nightmare to keep the object updated. If Avi un-friends Nancy, do we shift Corinna's info into the \u003ccode\u003efriend1...\u003c/code\u003e slots and delete the \u003ccode\u003efriend2...\u003c/code\u003e properties, or do we leave Corinna as \u003ccode\u003efriend2...\u003c/code\u003e and delete the \u003ccode\u003efriend1...\u003c/code\u003e properties? There are no good answers. Except...\u003c/p\u003e  \u003ch2\u003eObjects in Objects\u003c/h2\u003e  \u003cp\u003eRecall from the lesson on objects that the values in an object can be \u003cem\u003eanything\u003c/em\u003e, including another object. If we reorganize the above object a bit, it becomes significantly easier to read and update:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  company: {\u003cbr\u003e    name: 'Flatbook Labs',\u003cbr\u003e    jobTitle: 'Developer Apprentice'\u003cbr\u003e  },\u003cbr\u003e  friends: [{\u003cbr\u003e    firstName: 'Nancy',\u003cbr\u003e    lastName: 'Burgess',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Developer Apprentice'\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Corinna',\u003cbr\u003e    lastName: 'Jackson',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Lead Developer'\u003cbr\u003e    }\u003cbr\u003e  }],\u003cbr\u003e  projects: [{\u003cbr\u003e    title: 'Flatbook',\u003cbr\u003e    description: 'The premier Flatiron School-based social network in the world.'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    title: 'Scuber',\u003cbr\u003e    description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e  }]\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe've pared the sixteen messy properties in our first attempt down to a svelte five: \u003ccode\u003efirstName\u003c/code\u003e, \u003ccode\u003elastName\u003c/code\u003e, \u003ccode\u003ecompany\u003c/code\u003e, \u003ccode\u003efriends\u003c/code\u003e, and \u003ccode\u003eprojects\u003c/code\u003e. \u003ccode\u003ecompany\u003c/code\u003e points at another object, and both \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e point to arrays of objects. Let's practice accessing some of those beautifully nested data points. Copy \u003ccode\u003euserInfo\u003c/code\u003e into \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e and follow along.\u003c/p\u003e  \u003cp\u003eTo review, for a property at the top level of our object, we can grab a value using dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euserInfo.lastName;\u003cbr\u003e//=\u0026gt; \"Flombaum\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the property we're accessing is nested inside another object, we just append the additional key(s):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euserInfo.company.jobTitle;\u003cbr\u003e//=\u0026gt; \"Developer Apprentice\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the property is nested inside an array, we need to specify the index in the array for the object that we want. To get the first name of Avi's first friend and the title of his second project:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003euserInfo.friends[0].firstName;\u003cbr\u003e//=\u0026gt; \"Nancy\"\u003cbr\u003e\u003cbr\u003euserInfo.projects[1].title;\u003cbr\u003e//=\u0026gt; \"Scuber\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's worth spending some time getting comfortable with nested data structures — you will see a lot of them as you proceed through the curriculum and in your career as a developer. Create your own in the REPL and practice accessing various pieces of data.\u003c/p\u003e  \u003ch2\u003eArrays in arrays\u003c/h2\u003e  \u003cp\u003eWorking with nested arrays isn't all that different from nested objects. Simply replace the named properties of nested objects with indexes of nested arrays. Let's review with an example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst letters = ['a', ['b', ['c', ['d', ['e']], 'f']]]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGiven the above nested array, how would we get the letter \u003ccode\u003e'e'\u003c/code\u003e? First, we'd need the second element in \u003ccode\u003eletters\u003c/code\u003e, \u003ccode\u003eletters[1]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1];\u003cbr\u003e//=\u0026gt; [\"b\", [\"c\", [\"d\", [\"e\"]], \"f\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen we'd need the second element of that element, so \u003ccode\u003eletters[1][1]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1][1];\u003cbr\u003e//=\u0026gt; [\"c\", [\"d\", [\"e\"]], \"f\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen the second element of \u003cstrong\u003ethat\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1][1][1];\u003cbr\u003e//=\u0026gt; [\"d\", [\"e\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd the second element of \u003cstrong\u003e\u003cem\u003ethat\u003c/em\u003e\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1][1]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1][1][1][1];\u003cbr\u003e//=\u0026gt; [\"e\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFinally, we want the first element in that final nested array, \u003ccode\u003eletters[1][1][1][1][0]\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eletters[1][1][1][1][0];\u003cbr\u003e//=\u0026gt; \"e\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhew! That's a lot to keep track of. Just remember that each lookup (each set of square brackets) \"drills down\" into each successive nested array.\u003c/p\u003e  \u003ch2\u003eIterating over nested objects and arrays\u003c/h2\u003e  \u003cp\u003eOur initial shallow object had a lot of drawbacks, but one advantage of it is that it was very easy to iterate over all of the information:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  companyName: 'Flatbook Labs',\u003cbr\u003e  jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend1firstName: 'Nancy',\u003cbr\u003e  friend1lastName: 'Burgess',\u003cbr\u003e  friend1companyName: 'Flatbook Labs',\u003cbr\u003e  friend1jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend2firstName: 'Corinna',\u003cbr\u003e  friend2lastName: 'Jackson',\u003cbr\u003e  friend2companyName: 'Flatbook Labs',\u003cbr\u003e  friend2jobTitle: 'Senior Developer',\u003cbr\u003e  project1title: 'Flatbook',\u003cbr\u003e  project1description: 'The premier Flatiron School-based social network in the world.',\u003cbr\u003e  project2title: 'Scuber',\u003cbr\u003e  project2description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction shallowIterator(target) {\u003cbr\u003e  for (const key in target) {\u003cbr\u003e    console.log(target[key]);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eshallowIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Senior Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also use it with arrays:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7, 11];\u003cbr\u003e\u003cbr\u003eshallowIterator(primes);\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: 3\u003cbr\u003e// LOG: 5\u003cbr\u003e// LOG: 7\u003cbr\u003e// LOG: 11 \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: our \u003ccode\u003eshallowIterator()\u003c/code\u003e function uses \u003ccode\u003efor...in\u003c/code\u003e to iterate through the object that's passed to it. We learned in the previous lesson that \u003ccode\u003efor...in\u003c/code\u003e is not the best iterator to use with arrays. Because we're not currently working in the browser (and therefore cross-browser consistency isn't an issue), we can safely ignore that problem for the moment. Since this example is fairly complicated, we'll work through the process using \u003ccode\u003efor...in\u003c/code\u003e first then, once we've got that working, build a modification that will handle arrays appropriately.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eUnfortunately, as you may be able to guess from its name, our \u003ccode\u003eshallowIterator()\u003c/code\u003e function can't handle nested collections:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst numbers = [1, [2, [4, [5, [6]], 3]]];\u003cbr\u003e\u003cbr\u003eshallowIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: [2, [4, [5, [6]], 3]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's trained to iterate over the passed-in array's elements or object's properties, but our function has no concept of \u003cem\u003edepth\u003c/em\u003e. When it tries to iterate over the above nested \u003ccode\u003enumbers\u003c/code\u003e array, it sees only two elements at the top level of the array: the number \u003ccode\u003e1\u003c/code\u003e and \u003cstrong\u003eanother\u003c/strong\u003e array, \u003ccode\u003e[2, [4, [5, [6]], 3]]\u003c/code\u003e. It \u003ccode\u003econsole.log()\u003c/code\u003es out both of those elements and calls it a day, never realizing that we also want it to print out the elements inside the nested array.\u003c/p\u003e  \u003cp\u003eIt behaves similarly with objects. If we passed the nested version of \u003ccode\u003euserInfo\u003c/code\u003e to it, the values at the top level of the object (\"Avi\" and \"Flombaum\") would be logged correctly, but for the \u003ccode\u003ecompany\u003c/code\u003e key, the object it points to would be logged, and, for \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e, arrays of objects would be logged. Try it out for yourself in the REPL.\u003c/p\u003e  \u003cp\u003eLet's modify our function so that if it encounters a nested object or array, it will additionally print out all of the data contained therein. We can do this using an \u003ccode\u003eif\u003c/code\u003e condition and the \u003ccode\u003etypeof\u003c/code\u003e operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction shallowIterator(target) {\u003cbr\u003e  for (const key in target) {\u003cbr\u003e    if (typeof target[key] === 'object') {\u003cbr\u003e      for (const nestedKey in target[key]) {\u003cbr\u003e        console.log(target[key][nestedKey]);\u003cbr\u003e      }\u003cbr\u003e    } else {\u003cbr\u003e      console.log(target[key]);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eshallowIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: [4, [5, [6]], 3] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we've gone two levels deep, which gets us a bit closer to our goal. However, there are two pretty clear drawbacks to this strategy:\u003c/p\u003e  \u003col\u003e \u003cli\u003eWe'll have to add a new \u003ccode\u003efor...in\u003c/code\u003e statement for every level of nesting, quickly ballooning our function out to an unmanageable size.\u003c/li\u003e \u003cli\u003eSince we need to add a separate \u003ccode\u003efor...in\u003c/code\u003e statement for each additional level, we'll have to know exactly what the target structure looks like ahead of time and update our function accordingly. That's a lot of repetitive, error-prone work, and it results in a function that can only be used for data with that particular structure.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/traversing-nested-objects-readme/no_there_has_to_be_another_way.gif\" alt=\"No! There has to be another way.\"\u003e\u003c/p\u003e  \u003ch3\u003eRecursion\u003c/h3\u003e  \u003cp\u003eLucky for us, there \u003cstrong\u003eis\u003c/strong\u003e another way: recursion. It's one of the more powerful concepts in programming, but it's also pretty hard to grasp at first. \u003cstrong\u003eDon't sweat it if it doesn't click immediately\u003c/strong\u003e. We'll introduce the concept here but come back to it periodically throughout the rest of the JavaScript material. Essentially, \u003cstrong\u003ea recursive function is a function that calls itself\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at a better way to write our \u003ccode\u003eshallowIterator()\u003c/code\u003e to take advantage of recursion:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we invoke \u003ccode\u003edeepIterator()\u003c/code\u003e with an argument, the function first checks if the argument is an object (recall that the \u003ccode\u003etypeof\u003c/code\u003e operator returns \u003ccode\u003e\"object\"\u003c/code\u003e for arrays as well). If the argument \u003cstrong\u003eisn't\u003c/strong\u003e an object, \u003ccode\u003edeepIterator()\u003c/code\u003e simply \u003ccode\u003econsole.log()\u003c/code\u003es out the argument and exits. However, if the argument \u003cstrong\u003eis\u003c/strong\u003e an object, we iterate over the properties (or elements) in the object, passing each to \u003ccode\u003edeepIterator()\u003c/code\u003e and \u003cstrong\u003ere-invoking the function\u003c/strong\u003e. That's recursion!\u003c/p\u003e  \u003cp\u003eLet's see it in action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst numbers = [1, [2, [4, [5, [6]], 3]]];\u003cbr\u003e\u003cbr\u003edeepIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: 4\u003cbr\u003e// LOG: 5\u003cbr\u003e// LOG: 6\u003cbr\u003e// LOG: 3 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo help us see what's going on here let's use a REPL. Notice that, in the version of the function in the REPL, we've added a \u003ccode\u003econsole.log()\u003c/code\u003e at the top of the function that will log whatever argument was passed to our function. We've also added a label to the second \u003ccode\u003econsole.log()\u003c/code\u003e so you can see the values that are getting logged from the \u003ccode\u003eelse\u003c/code\u003e statement. If you press the \"Run\" button, you will see an \"Argument\" logged for each time the function is called. You will also see a \"Logged value\" for each time the code in the \u003ccode\u003eelse\u003c/code\u003e executes. Referring to the output of the \u003ccode\u003econsole.log()\u003c/code\u003es, step through the function for each element to trace what's happening.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UprightWiryCopyleft?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eOur function also works with combinations of nested objects and arrays:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  company: {\u003cbr\u003e    name: 'Flatbook Labs',\u003cbr\u003e    jobTitle: 'Developer Apprentice'\u003cbr\u003e  },\u003cbr\u003e  friends: [{\u003cbr\u003e    firstName: 'Nancy',\u003cbr\u003e    lastName: 'Burgess',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Developer Apprentice'\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Corinna',\u003cbr\u003e    lastName: 'Jackson',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Lead Developer'\u003cbr\u003e    }\u003cbr\u003e  }],\u003cbr\u003e  projects: [{\u003cbr\u003e    title: 'Flatbook',\u003cbr\u003e    description: 'The premier Flatiron School-based social network in the world.'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    title: 'Scuber',\u003cbr\u003e    description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e  }]\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo keep track of how many times our function is recursively invoking itself, it might be helpful to use a counter variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e\u003cbr\u003efunction deepIterator(target) {\u003cbr\u003e  counter++;\u003cbr\u003e\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003cbr\u003e\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; 26 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo we invoked \u003ccode\u003edeepIterator()\u003c/code\u003e once, and it invoked itself 25 additional times! If we look closely at our nested \u003ccode\u003euserInfo\u003c/code\u003e object, we can see that it contains two arrays, seven nested objects, and sixteen key-value pairs where the value is a string. Add those all up (2 + 7 + 16), and you get our 25 recursive invocations! (If you're following along in the REPL, you can check the value of \u003ccode\u003ecounter\u003c/code\u003e in the terminal after running the code.)\u003c/p\u003e  \u003ch2\u003eModifying our Program to Better Handle Arrays\u003c/h2\u003e  \u003cp\u003eIn our \u003ccode\u003edeepIterator()\u003c/code\u003e function, we're using an \u003ccode\u003eif\u003c/code\u003e statement to evaluate the argument that's passed in. We do one thing if \u003ccode\u003etarget\u003c/code\u003e is an object and something else if it's not. Now we want to modify our function to handle one more situation: when \u003ccode\u003etarget\u003c/code\u003e is an array. Doing this is a simple matter of adding an \u003ccode\u003eelse if\u003c/code\u003e to our \u003ccode\u003eif\u003c/code\u003e statement; its code block will execute \u003cstrong\u003eif\u003c/strong\u003e \u003ccode\u003etarget\u003c/code\u003e is an array.\u003c/p\u003e  \u003cp\u003eWe can determine whether a variable is an array using an \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#static_methods\"\u003eArray Static Method\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"\u003e\u003ccode\u003eArray.isArray()\u003c/code\u003e\u003c/a\u003e. Let's use that in our new condition. We'll also add a new \u003ccode\u003econsole.log()\u003c/code\u003e to verify that our code is correctly detecting the arrays (we've commented out the final \u003ccode\u003econsole.log()\u003c/code\u003e for now):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else if (Array.isArray(target)) {\u003cbr\u003e    console.log(\"We found an array\");\u003cbr\u003e    // iterate through the array\u003cbr\u003e  } else {\u003cbr\u003e    // console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if we run the code, we see ...nothing. For some reason, our code isn't detecting the arrays. Remember that \u003cstrong\u003earrays are objects\u003c/strong\u003e, so our \u003ccode\u003eif\u003c/code\u003e condition returns true for arrays as well as objects and the \u003ccode\u003eelse if\u003c/code\u003e never executes. We can fix this by reversing the order of our conditions. Let's also put the second \u003ccode\u003econsole.log()\u003c/code\u003e back in, and try running the code again.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (Array.isArray(target)) {\u003cbr\u003e    // iterate through the array\u003cbr\u003e    console.log(\"We found an array\");\u003cbr\u003e  } else if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: We found an array\u003cbr\u003e// LOG: We found an array \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMuch better! The logs are working for the primitive values and the non-array object, so now we just need to code the body of our new \u003ccode\u003eif\u003c/code\u003e statement, using \u003ccode\u003efor...of\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (Array.isArray(target)) {\u003cbr\u003e    for (const element of target) {\u003cbr\u003e      deepIterator(element);\u003cbr\u003e    }\u003cbr\u003e  } else if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhew!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThis is very advanced stuff, and you should absolutely not get discouraged if it doesn't click at first. Create some other nested data structures and traverse over them with \u003ccode\u003eshallowIterator()\u003c/code\u003e and \u003ccode\u003edeepIterator()\u003c/code\u003e, noting the limitations of the former. Use the debugging tools available to you to get a handle on what's happening at each step of the process.\u003c/p\u003e  \u003cp\u003eYou got this!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/scripting/javascript/advanced/recursion-javascript\"\u003eMDN: Recursion (JavaScript)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f\"\u003efreeCodeCamp: Recursion in JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://javascript.info/debugging-chrome\"\u003eJavaScript.info: Debugging in Chrome\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"pulling-it-all-together","title":"Pulling It All Together","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-pulling-it-all-together\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-pulling-it-all-together/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-pulling-it-all-together\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-pulling-it-all-together/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview the Three Pillars\u003c/li\u003e \u003cli\u003ePrepare to code the example\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've come a long way since we first took a look at Simple Liker. Remember our social media app that lets us \"favorite\" a post?\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e  \u003cp\u003eWe took a close look at all of the components that make an action like that possible on the web. Now, it's time to review them and get ready to build our own.\u003c/p\u003e  \u003ch2\u003eReview the Three Pillars\u003c/h2\u003e  \u003cp\u003eWe broke down the web programming concepts we're working with into Three Pillars. We've returned to those throughout our journey, so by now they're probably pretty familiar:\u003c/p\u003e  \u003col\u003e \u003cli\u003eManipulating the DOM\u003c/li\u003e \u003cli\u003eRecognizing JavaScript events\u003c/li\u003e \u003cli\u003eCommunicating with the server\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWe practiced each step and dug into the JavaScript basics necessary to program each. With this experience, we can now pull the concepts and the practice together.\u003c/p\u003e  \u003ch2\u003ePrepare to Code the Example\u003c/h2\u003e  \u003cp\u003eIn the next lab, you'll have the opportunity to create your own Simple Liker from scratch. As you work through it, remember to take a step back whenever necessary to keep perspective on the whole process and each pillar's place within it.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith a solid grasp of all Three Pillars of web programming and how to implement them, we're prepared to code our own working web apps.\u003c/p\u003e","frontPage":false},{"exportId":"finding-array-elements","title":"Finding Array Elements","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs_array_element_finding\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs_array_element_finding\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs_array_element_finding/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eFind elements using a simple condition with \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eFind elements using more complex conditions with \u003ccode\u003eArray.prototype.find()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs developers, one of the things we need to do on a regular basis is locate things in arrays. It's all well and good to be able to store data, but it's pretty useless unless we're able to get it back out again. In JavaScript, there are two different methods that we use to locate data in arrays. For simple conditions, we use \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e. For more complex calculations, we use \u003ccode\u003eArray.prototype.find()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eFind Elements Using a Simple Condition with \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e is called on an array and takes two arguments: the value you are looking for and an optional start position. It compares each element in turn to the value you're looking for using the strict equality operator (\u003ccode\u003e===\u003c/code\u003e) and returns the index of the first matching element. If the element isn't contained in the array, it returns -1.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003econst cards = ['queen of hearts', 'jack of clubs', 'ten of diamonds', 'ace of spades'];\u003cbr\u003e\u003cbr\u003ecards.indexOf('jack of clubs'); //=\u0026gt; 1\u003cbr\u003ecards.indexOf('jack of hearts'); //=\u0026gt; -1\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you pass in the optional second argument, \u003ccode\u003eindexOf()\u003c/code\u003e will begin the search at the specified position:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003ecards.indexOf('ace of spades', 2); //=\u0026gt; 3\u003cbr\u003ecards.indexOf('jack of clubs', 2); //=\u0026gt; -1 \u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e returns \u003ccode\u003e-1\u003c/code\u003e if either the value isn't found \u003cem\u003eor\u003c/em\u003e if the start position you pass in is after the element you're looking for.\u003c/p\u003e  \u003ch2\u003eFind Elements Using More Complex Conditions with \u003ccode\u003eArray.prototype.find()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.find()\u003c/code\u003e allows you to execute more complex searches by passing it a callback function. The method will automatically iterate through the array, call the callback on each value, and return the first element in the array that satisfies the condition defined by the function. If no matching element is found, \u003ccode\u003eundefined\u003c/code\u003e is returned.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.find()\u003c/code\u003e iterates through the array it's called on and, in each iteration, passes three arguments to the callback: the current element of the array, the index of the current element, and the array itself. These arguments can then be captured as parameters in the callback and used inside the function.\u003c/p\u003e  \u003cp\u003eSay we want to determine whether an array of numbers contains any odd values. We can write the following callback function to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction isOdd(element, index, array) {\u003cbr\u003e  return (element % 2 === 1);\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eArray.prototype.find()\u003c/code\u003e will iterate through the array, passing each element in  turn to \u003ccode\u003eisOdd()\u003c/code\u003e. If the element is not odd, the callback returns \u003ccode\u003efalse\u003c/code\u003e and the  iteration continues. If an odd element is encountered, the callback will return  true, and \u003ccode\u003eArray.prototype.find()\u003c/code\u003e will return that element.\u003c/p\u003e  \u003cp\u003eRemember that \u003ccode\u003eArray.prototype.find()\u003c/code\u003e \u003cem\u003eautomatically\u003c/em\u003e passes the three arguments to our function. By defining \u003ccode\u003eisOdd()\u003c/code\u003e with three parameters, we make those values available inside our function. In this example, we're only using the first one, the current element of the array, but all three are being passed in and are available inside our function if we want to use them.\u003c/p\u003e  \u003cp\u003eLet's call \u003ccode\u003e.find()\u003c/code\u003e on the array we want to search, and pass our function as an argument:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction isOdd(element, index, array) {\u003cbr\u003e  return (element % 2 === 1);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e[4, 6, 8, 10].find(isOdd); //=\u0026gt; undefined, not found\u003cbr\u003e[4, 5, 8, 10].find(isOdd); //=\u0026gt; 5\u003cbr\u003e[4, 5, 7, 8, 10].find(isOdd); //=\u0026gt; 5\u003cbr\u003e[4, 7, 5,  8, 10].find(isOdd); //=\u0026gt; 7\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that only the first argument — the current element in the array — is required for the callback function. If (as in our example above) your  callback doesn't use the other two arguments, you can define your  function with only one parameter. This will work as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction isOdd(element) {\u003cbr\u003e  return (element % 2 === 1);\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eBoth \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003eand \u003ccode\u003eArray.prototype.find()\u003c/code\u003e can be very useful in different situations. \u003ccode\u003eArray.prototype.indexOf()\u003c/code\u003e is used when you want to check an array for a simple value; you call \u003ccode\u003eindexOf()\u003c/code\u003e on an array, passing the value you're looking for as the argument. \u003ccode\u003eArray.prototype.find()\u003c/code\u003e is also called on an array, but it takes a \u003cem\u003efunction\u003c/em\u003e as an argument. This enables you to define the condition the element should meet, allowing for more complex searches.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\"\u003eObject.prototype\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"\u003eArray.prototype.indexOf()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"\u003eArray.prototype.find()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"mapping-arrays","title":"Mapping Arrays","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-looping-and-iteration-map-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-looping-and-iteration-map-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-looping-and-iteration-map-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eImplement a \u003ccode\u003emap()\u003c/code\u003e function from scratch\u003c/li\u003e \u003cli\u003eDemonstrate using \u003ccode\u003emap()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we learned about \u003ccode\u003e.filter()\u003c/code\u003e, a built-in array method that searches through a collection, passes each element to a provided callback function, and returns an entirely new array comprised of elements for which the callback returned a truthy value.\u003c/p\u003e  \u003cp\u003eAnother very common built-in array method is \u003ccode\u003e.map()\u003c/code\u003e, which transforms every element in an array to another value. For example, it can be used to square every value in an array of numbers: \u003ccode\u003e[1, 2, 3]\u003c/code\u003e -\u0026gt; \u003ccode\u003e[1, 4, 9]\u003c/code\u003e. Like \u003ccode\u003e.filter()\u003c/code\u003e, \u003ccode\u003e.map()\u003c/code\u003e accepts a callback function, and passes each element in turn to the callback:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[1, 2, 3].map(function(num) {\u003cbr\u003e  return num * num;\u003cbr\u003e});\u003cbr\u003e// =\u0026gt; [1, 4, 9] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile both \u003ccode\u003e.filter()\u003c/code\u003e and \u003ccode\u003e.map()\u003c/code\u003e return a new array, \u003ccode\u003e.filter()\u003c/code\u003e returns a subset of the original array (unless all elements meet the provided condition) in which the elements are unchanged. \u003ccode\u003e.map()\u003c/code\u003e, on the other hand, returns a new array that's the same length as the original array in which the elements have been modified.\u003c/p\u003e  \u003cp\u003eLet's quickly run through how we could create our own version of the \u003ccode\u003e.map()\u003c/code\u003e method.\u003c/p\u003e  \u003ch2\u003eImplementing \u003ccode\u003e.map()\u003c/code\u003e From Scratch\u003c/h2\u003e  \u003ch3\u003eAbstracting the iteration\u003c/h3\u003e  \u003cp\u003eRight off the bat, we know that our function needs to accept the array from which we'd like to \u003cem\u003emap\u003c/em\u003e values as an argument:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array) {\u003cbr\u003e  // Map magic to follow shortly\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInside the function, we need to iterate over each element in the passed-in array, so let's fall back on our trusty \u003ccode\u003efor...of\u003c/code\u003e statement:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array) {\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    // Do something to each element\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eCallback city\u003c/h3\u003e  \u003cp\u003eWe want to transform values from the array, but for code organization and reusability it's best to keep that logic decoupled from the \u003ccode\u003emap()\u003c/code\u003e function. \u003ccode\u003emap()\u003c/code\u003e should really only be concerned with iterating over the collection and passing each element to a callback that will handle the transformations. Let's accept that callback function as the second argument to \u003ccode\u003emap()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    // Do something to each element\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd inside our iteration, we'll want to invoke the callback, passing in the elements from \u003ccode\u003earray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    callback(element);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's make sure this is working so far:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emap([1, 2, 3], function(num) {\u003cbr\u003e  console.log(num * num);\u003cbr\u003e});\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 4\u003cbr\u003e// LOG: 9 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eReturning a brand new collection\u003c/h3\u003e  \u003cp\u003eLogging each squared number out to the console is fun, but \u003ccode\u003emap()\u003c/code\u003e should really be returning an entirely new array containing all of the squared values. Show off that new collection!\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/map-readme/nyfw.gif\" alt=\"NY Fashion Week\"\u003e \u003c/p\u003e  \u003cp\u003eFierce.\u003c/p\u003e  \u003cp\u003eFirst, let's create that new array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  const newArr = [];\u003cbr\u003e\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    callback(element);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInside the \u003ccode\u003efor...of\u003c/code\u003e statement, let's \u003ccode\u003e.push()\u003c/code\u003e the return value of each callback invocation into \u003ccode\u003enewArr\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  const newArr = [];\u003cbr\u003e\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    newArr.push(callback(element));\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd at the end of our \u003ccode\u003emap()\u003c/code\u003e function we're going to want to return the new array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction map(array, callback) {\u003cbr\u003e  const newArr = [];\u003cbr\u003e\u003cbr\u003e  for (const element of array) {\u003cbr\u003e    newArr.push(callback(element));\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return newArr;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's test it out!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst originalNumbers = [1, 2, 3, 4, 5];\u003cbr\u003e\u003cbr\u003econst squaredNumbers = map(originalNumbers, function(num) {\u003cbr\u003e  return num * num;\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eoriginalNumbers;\u003cbr\u003e// =\u0026gt; [1, 2, 3, 4, 5]\u003cbr\u003e\u003cbr\u003esquaredNumbers;\u003cbr\u003e// =\u0026gt; [1, 4, 9, 16, 25] \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDemonstrate Using \u003ccode\u003emap()\u003c/code\u003e on Flatbook's Expanding Engineering Team\u003c/h2\u003e  \u003cp\u003eLet's use our \u003ccode\u003emap()\u003c/code\u003e function on a trickier data structure —\u0026nbsp;a list of recently onboarded engineers. First off, we need to flip each new engineer's account from a normal user to an admin:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst oldAccounts = [\u003cbr\u003e  { userID: 15, title: 'Developer Apprentice', accessLevel: 'user' },\u003cbr\u003e  { userID: 63, title: 'Developer Apprentice', accessLevel: 'user' },\u003cbr\u003e  { userID: 97, title: 'Developer Apprentice', accessLevel: 'user' },\u003cbr\u003e  { userID: 12, title: 'Developer Apprentice', accessLevel: 'user' },\u003cbr\u003e  { userID: 44, title: 'Developer Apprentice', accessLevel: 'user' }\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003econst newEngineers = map(oldAccounts, function(account) {\u003cbr\u003e  return Object.assign({}, account, { accessLevel: 'admin' });\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eoldAccounts;\u003cbr\u003e// =\u0026gt; [\u003cbr\u003e//      { userID: 15, title: \"Developer Apprentice\", accessLevel: \"user\" },\u003cbr\u003e//      { userID: 63, title: \"Developer Apprentice\", accessLevel: \"user\" },\u003cbr\u003e//      { userID: 97, title: \"Developer Apprentice\", accessLevel: \"user\" },\u003cbr\u003e//      { userID: 12, title: \"Developer Apprentice\", accessLevel: \"user\" },\u003cbr\u003e//      { userID: 44, title: \"Developer Apprentice\", accessLevel: \"user\" }\u003cbr\u003e//    ]\u003cbr\u003e\u003cbr\u003enewEngineers;\u003cbr\u003e// =\u0026gt; [\u003cbr\u003e//      { userID: 15, title: \"Developer Apprentice\", accessLevel: \"admin\" },\u003cbr\u003e//      { userID: 63, title: \"Developer Apprentice\", accessLevel: \"admin\" },\u003cbr\u003e//      { userID: 97, title: \"Developer Apprentice\", accessLevel: \"admin\" },\u003cbr\u003e//      { userID: 12, title: \"Developer Apprentice\", accessLevel: \"admin\" },\u003cbr\u003e//      { userID: 44, title: \"Developer Apprentice\", accessLevel: \"admin\" }\u003cbr\u003e//    ] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we're using \u003ccode\u003eObject.assign()\u003c/code\u003e to create a \u003cstrong\u003enew\u003c/strong\u003e object with updated values instead of mutating the original object's \u003ccode\u003eaccessLevel\u003c/code\u003e property. Nondestructive updating is an important concept to practice — destructively modifying objects at multiple points within a code base is one of the biggest sources of bugs.\u003c/p\u003e  \u003cp\u003eNext, we just need a simple array of the new engineers' \u003ccode\u003euserID\u003c/code\u003es that we can shoot over to the system administrator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst userIDs = map(newEngineers, function(eng) {\u003cbr\u003e  return eng.userID;\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003euserIDs;\u003cbr\u003e// =\u0026gt; [15, 63, 97, 12, 44] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFinally, we'll update our engineer objects to indicate that all the new engineers have been provided a new work laptop. This time, though, let's use JavaScript's built-in \u003ccode\u003eArray.prototype.map()\u003c/code\u003e method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst equippedEngineers = newEngineers.map(function(eng) {\u003cbr\u003e  return Object.assign({}, eng, { equipment: 'Laptop' });\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eequippedEngineers;\u003cbr\u003e// =\u0026gt; [\u003cbr\u003e//      { userID: 15, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" },\u003cbr\u003e//      { userID: 63, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" },\u003cbr\u003e//      { userID: 97, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" },\u003cbr\u003e//      { userID: 12, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" },\u003cbr\u003e//      { userID: 44, title: \"Developer Apprentice\", accessLevel: \"admin\", equipment: \"Laptop\" }\u003cbr\u003e//    ] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote how similar this method call is to the one using our version of \u003ccode\u003emap()\u003c/code\u003e: the only difference is that we call the built-in \u003ccode\u003e.map()\u003c/code\u003e method \u003cem\u003eon\u003c/em\u003e our array, rather than passing the array as an argument. There \u003cem\u003eis\u003c/em\u003e one big difference between the two, though: we didn't have to do all the work of building \u003ccode\u003eArray.prototype.map()\u003c/code\u003e!\u003c/p\u003e  \u003cp\u003eNow that we understand how the built-in \u003ccode\u003e.map()\u003c/code\u003e array method is implemented, we can stick to the native method and get rid of our copycat \u003ccode\u003emap()\u003c/code\u003e function.\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/map-readme/office_space.gif\" alt=\"Office Space\"\u003e \u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003eMDN — \u003ccode\u003eArray.prototype.map()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"review-comparisons","title":"Review: Comparisons","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-comparisons-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify equality operators\u003c/li\u003e \u003cli\u003eCompare numbers using relational operators\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNow that we know what \u003cem\u003eBoolean expressions\u003c/em\u003e are we'll start learning how to create them. In this lesson we'll learn about comparison operators, which enable us to check to see if a value is what we're expecting. Follow along with the examples below in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e JavaScript includes both \u003cem\u003estrict\u003c/em\u003e and \u003cem\u003eloose\u003c/em\u003e comparison operators. When writing JavaScript, you should strongly prefer the \u003cstrong\u003estrict\u003c/strong\u003e operators. The reason for this is the loose operators will return true even if the data types aren't the same, which can result in unexpected behavior and bugs that can be difficult to track down. Even if you find you need to compare two values of different data types, you should avoid using loose operators. You will be better off converting the data type of one of the variables so they have the same type, then comparing them using a strict operator.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify equality operators\u003c/h2\u003e  \u003cp\u003eJavaScript includes four equality operators:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003estrict equality operator\u003c/strong\u003e (\u003ccode\u003e===\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003estrict inequality operator\u003c/strong\u003e (\u003ccode\u003e!==\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eloose equality operator\u003c/strong\u003e (\u003ccode\u003e==\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eloose inequality operator\u003c/strong\u003e (\u003ccode\u003e!=\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThese operators allow us to compare values and determine whether they are the same.\u003c/p\u003e  \u003ch3\u003eStrict Equality Operator \u003ccode\u003e===\u003c/code\u003e and Strict Inequality Operator \u003ccode\u003e!==\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe \u003cstrong\u003estrict equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal \u003cem\u003ewithout performing type conversions\u003c/em\u003e. Even if the values on both sides of the operator look similar (e.g., \u003ccode\u003e'42' === 42\u003c/code\u003e), the \u003ccode\u003e===\u003c/code\u003e operator will only return \u003ccode\u003etrue\u003c/code\u003e if the data types also match:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 === 42\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e42 === '42'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003etrue === 1\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e'0' === false\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003enull === undefined\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e' ' === 0\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is logical and accurate!\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003estrict inequality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are \u003cem\u003enot\u003c/em\u003e equal \u003cem\u003ewithout\u003c/em\u003e performing type conversions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9000 !== 9001\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e9001 !== '9001'\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e[] !== ''\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003eLoose Equality Operator \u003ccode\u003e==\u003c/code\u003e and Loose Inequality Operator \u003ccode\u003e!=\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe \u003cstrong\u003eloose equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 == 42\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, it will \u003cem\u003ealso\u003c/em\u003e return \u003ccode\u003etrue\u003c/code\u003e if it can perform a type conversion (e.g., changing the string \u003ccode\u003e'42'\u003c/code\u003e into the number \u003ccode\u003e42\u003c/code\u003e) that makes the two values equal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 == '42'\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003etrue == 1\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e'0' == false\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003enull == undefined\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e' ' == 0\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cstrong\u003eloose inequality operator\u003c/strong\u003e is the opposite of \u003ccode\u003e==\u003c/code\u003e. It returns \u003ccode\u003etrue\u003c/code\u003e if two values are \u003cem\u003enot\u003c/em\u003e equal, performing type conversions as necessary:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9000 != 9001\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e9001 != '9001'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e[] != ''\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is confusing and inaccurate! It makes no sense that the string \u003ccode\u003e'0'\u003c/code\u003e is equal to the boolean \u003ccode\u003efalse\u003c/code\u003e or that \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e — two \u003cstrong\u003ecompletely different\u003c/strong\u003e data types — are equivalent.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch2\u003eCompare Numbers with Relational Operators\u003c/h2\u003e  \u003cp\u003eJavaScript includes four relational operators:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003egreater than\u003c/strong\u003e (\u003ccode\u003e\u0026gt;\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003egreater than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026gt;=\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eless than\u003c/strong\u003e (\u003ccode\u003e\u0026lt;\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eless than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026lt;=\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe behavior of these operators is consistent with the meaning of the corresponding symbols in mathematics:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt; 9\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e88 \u0026gt;= 88\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e88 \u0026lt; 9\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, beware of type conversion when comparing non-numbers against numbers. For instance, when a string is compared with a number, the JavaScript engine tries to convert the string to a number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt; '9'\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the engine can't convert the string into a number, the comparison will always return \u003ccode\u003efalse\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt;= 'hello'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e88 \u0026lt;= 'hello'\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eStrings are compared with other strings lexicographically, meaning character-by-character from left-to-right. The following returns \u003ccode\u003efalse\u003c/code\u003e because the Unicode value of \u003ccode\u003e8\u003c/code\u003e, the first character in \u003ccode\u003e88\u003c/code\u003e, is less than the Unicode value of \u003ccode\u003e9\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'88' \u0026gt; '9'\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you aren't sure what data type you are going to be receiving, but you still need to compare them, make sure that you tell JavaScript to \u003ca href=\"https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/\"\u003econvert the string to a number first\u003c/a\u003e, and then compare.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Stick to comparing \u003cem\u003enumerical\u003c/em\u003e values with the relational operators and you'll be golden.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eJavaScript contains both equality and relational operators that we can use in writing code to compare two values. The resulting statements are \u003cem\u003eBoolean expressions\u003c/em\u003e — they always return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eMake sure you're using the strict equality operators whenever possible, and only comparing numerical values using the relational operators, and you'll avoid annoying errors that can be time consuming to troubleshoot!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\"\u003eComparison operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\"\u003eEquality comparisons and sameness\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://dorey.github.io/JavaScript-Equality-Table/\"\u003eJavaScript Equality Table\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://forum.freecodecamp.org/t/javascript-comparison-operators/14660\"\u003efreeCodeCamp Forum —\u0026nbsp;JavaScript Comparison Operators\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"super","title":"Super","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-class-extension-and-inheritance-super\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-super/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-super\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-super/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize how to use the \u003ccode\u003esuper\u003c/code\u003e method\u003c/li\u003e\n\u003cli\u003eRecognize how to use the \u003ccode\u003esuper\u003c/code\u003e object\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn addition to simply extending classes, JavaScript provides an additional\nkeyword, \u003ccode\u003esuper\u003c/code\u003e, for directly working with a parent class constructor and\ninherited methods.\u003c/p\u003e\n\n\u003ch2\u003eRecognize How to Use the \u003ccode\u003esuper\u003c/code\u003e Method\u003c/h2\u003e\n\n\u003cp\u003eIn the code below, we have 2 JavaScript classes: \u003ccode\u003ePet\u003c/code\u003e and \u003ccode\u003eDog\u003c/code\u003e. The \u003ccode\u003eDog\u003c/code\u003e\nclass is a \u003cem\u003echild\u003c/em\u003e class of \u003ccode\u003ePet\u003c/code\u003e and it uses the \u003ccode\u003eextends\u003c/code\u003e keyword to inherit\nmethods from the parent class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Pet {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this._name = name;\u003cbr\u003e    this._owner = null;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get name() {\u003cbr\u003e    return this._name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get owner() {\u003cbr\u003e    return this._owner;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set owner(owner) {\u003cbr\u003e    this._owner = owner;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get speak() {\u003cbr\u003e    return `${this.name} speaks.`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// Inherits from Pet\u003cbr\u003eclass Dog extends Pet {\u003cbr\u003e  constructor(name, breed) {\u003cbr\u003e    super(name); /* new */\u003cbr\u003e    this.breed = breed;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet creature = new Pet('The Thing');\u003cbr\u003elet dog = new Dog('Spot', 'Foxhound');\u003cbr\u003e\u003cbr\u003edog;\u003cbr\u003e// =\u0026gt; Dog { _name: 'Spot', _owner: null, breed: 'Foxhound' }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, there is something new. The \u003ccode\u003ePet\u003c/code\u003e class takes in a name parameter,\nassigns it to the \u003ccode\u003ename\u003c/code\u003e property, and also creates an \u003ccode\u003e_owner\u003c/code\u003e property,\nsetting it to \u003ccode\u003enull\u003c/code\u003e. The \u003ccode\u003eDog\u003c/code\u003e class takes in \u003cstrong\u003ename and breed\u003c/strong\u003e properties,\ncalls \u003ccode\u003esuper\u003c/code\u003e, passing in the name, then sets \u003ccode\u003ethis.breed\u003c/code\u003e to the provided\nbreed.\u003c/p\u003e\n\n\u003cp\u003eWhat is happening? In our \u003ccode\u003eDog\u003c/code\u003e constructor, we are able to use \u003ccode\u003esuper\u003c/code\u003e to call\nthe \u003ccode\u003ePet\u003c/code\u003e constructor. Doing this will set up the \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eowner\u003c/code\u003e\nproperties. Then, once complete, the \u003ccode\u003eDog\u003c/code\u003e constructor continues to execute,\nsetting \u003ccode\u003ebreed\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn a child class constructor, \u003ccode\u003esuper\u003c/code\u003e is used as a \u003ccode\u003emethod\u003c/code\u003e and calls the parent\nclass constructor before continuing with the child. This lets us extend a\nparent's constructor inside a child. If we need to define custom behavior in a\nchild constructor, we can do so without having to override or ignore the parent.\u003c/p\u003e\n\n\u003ch2\u003eRecognize How to Use the \u003ccode\u003esuper\u003c/code\u003e Object\u003c/h2\u003e\n\n\u003cp\u003eOutside of the constructor, the \u003ccode\u003esuper\u003c/code\u003e keyword is also used, but this time, as\nan \u003ccode\u003eobject\u003c/code\u003e. When used, it refers to parent class' properties or methods.\u003c/p\u003e\n\n\u003cp\u003eWe could, for instance, use \u003ccode\u003esuper.owner\u003c/code\u003e in our \u003ccode\u003eDog\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Inherits from Pet\u003cbr\u003eclass Dog extends Pet {\u003cbr\u003e  constructor(name, breed) {\u003cbr\u003e    super(name); /* new */\u003cbr\u003e    this._breed = breed;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get breed() {\u003cbr\u003e    return this._breed;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get info() {\u003cbr\u003e    if (super.owner) {\u003cbr\u003e      return `${this.name} is a ${this.breed} owned by ${super.owner}`;\u003cbr\u003e    }\u003cbr\u003e    return `${this.name} is a ${this.breed}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet charlie = new Dog('Charlie B. Barkin', 'Mutt');\u003cbr\u003e\u003cbr\u003edog.info;\u003cbr\u003e// =\u0026gt; 'Charlie B. Barkin is a Mutt'\u003cbr\u003e\u003cbr\u003elet lady = new Dog('Lady', 'Cocker Spaniel');\u003cbr\u003elady.owner = 'Darling Dear';\u003cbr\u003e\u003cbr\u003elady.info;\u003cbr\u003e// =\u0026gt; 'Lady is a Cocker Spaniel owned by Darling Dear'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above code, we've added an \u003ccode\u003einfo\u003c/code\u003e getter that uses \u003ccode\u003esuper.owner\u003c/code\u003e in\na conditional statement. This accesses the \u003ccode\u003eowner\u003c/code\u003e getter from the parent.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHowever\u003c/strong\u003e, since instance methods and properties are \u003cem\u003ealready\u003c/em\u003e inherited, this\n\u003cem\u003ewill be the same as using\u003c/em\u003e \u003ccode\u003ethis.owner\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003esuper\u003c/code\u003e as an object is useful in situations where a parent class contains\na static method that we want to expand on in a child class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Pet {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this._owner = null;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get owner() {\u003cbr\u003e    return this._owner;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set owner(owner) {\u003cbr\u003e    this._owner = owner;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  static definition() {\u003cbr\u003e    return `A pet is an animal kept primarily for a person's company.`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// Inherits from Pet\u003cbr\u003eclass Dog extends Pet {\u003cbr\u003e  constructor(name, breed) {\u003cbr\u003e    super(name);\u003cbr\u003e    this.breed = breed;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  static definition() {\u003cbr\u003e    return (\u003cbr\u003e      super.definition() + ' Dogs are one of the most common types of pets.'\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet creature = new Pet('The Thing');\u003cbr\u003elet dog = new Dog('Spot', 'foxhound');\u003cbr\u003e\u003cbr\u003ePet.definition();\u003cbr\u003eDog.definition();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the \u003ccode\u003ePet\u003c/code\u003e class above, we've included a static method, \u003ccode\u003edefinition()\u003c/code\u003e, for\nwhat a pet is. In \u003ccode\u003eDog\u003c/code\u003e, we are able to use \u003ccode\u003esuper.definition()\u003c/code\u003e to access that\nstatic method, then \u003cem\u003eadd\u003c/em\u003e to it, in this case, extending the definition to\nspecifically reference dogs.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we dove deeper into class extensions and inheritance in\nJavaScript. In combination with \u003ccode\u003eextends\u003c/code\u003e, \u003ccode\u003esuper\u003c/code\u003e allows a child class to\naccess a parent's constructor from within a child's constructor. It also allows\na child class to access methods and properties from a parent class, but as most\nof these are already inherited, this is only useful when modifying static\nmethods from the parent class.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance\"\u003eInheritance in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420\"\u003e“Super” and “Extends” In JavaScript ES6 - Understanding The Tough Parts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://javascript.info/class-inheritance\"\u003eClass inheritance, super\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"using-prototypes","title":"Using Prototypes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-using-prototypes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-using-prototypes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-using-prototypes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-using-prototypes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify inefficiency in constructor function object orientation\u003c/li\u003e\n\u003cli\u003eRecognize the prototype as a means for reducing inefficiency\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e  this.name = name;\u003cbr\u003e  this.email = email;\u003cbr\u003e  this.sayHello = function() {\u003cbr\u003e    console.log(`Hello everybody, my name is ${this.name} whom you've been\u003cbr\u003emailing at ${this.email}!`);\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet lauren = new User('lauren', 'lauren@gmail.com');\u003cbr\u003elauren.sayHello(); //=\u0026gt; Hello everybody, my name is lauren whom you've been mailing at lauren@gmail.com!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's assume the following. Let's assume that the \u003ccode\u003ename\u003c/code\u003e property costs 32 bytes\nof space. Let's also assume that the \u003ccode\u003eemail\u003c/code\u003e property costs 32 bytes of space.\nLet's lastly assume that a function costs 64 bytes of space.\u003c/p\u003e\n\n\u003cp\u003eSo to create our \u003ccode\u003elauren\u003c/code\u003e instance we pay a cost of \u003ccode\u003e32 + 32 + 64 = 128\u003c/code\u003e bytes.\nBut now let's assume that we want to create many more \u003ccode\u003eUser\u003c/code\u003es - Facebook\nnumbers of users. Lets suppose a paltry 1 million users. That would be:\n128 million bytes of space. While memory and disk are getting bigger and\ncheaper all the time, we'd like to be efficient whenever possible.\u003c/p\u003e\n\n\u003cp\u003eThe key to gaining efficiency is the \u003cem\u003eprototype\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Inefficiency In Constructor Function Object Orientation\u003c/h2\u003e\n\n\u003cp\u003eIn our example the \u003ccode\u003ename\u003c/code\u003es vary, so we can't economize there. The \u003ccode\u003eemail\u003c/code\u003es\nvary, so we can't economize there either. But the method, \u003ccode\u003esayHello\u003c/code\u003e is the\nsame in every instance: \"in my current context return a template string with\nthis current context's values.\"\u003c/p\u003e\n\n\u003cp\u003eWe would like to tell all instances of \u003ccode\u003eUser\u003c/code\u003e that they have a shared place to\nfind methods. That place is called the \"prototype.\"\u003c/p\u003e\n\n\u003ch2\u003eRecognize the Prototype as a Means for Reducing Inefficiency\u003c/h2\u003e\n\n\u003cp\u003eWe access the prototype of a constructor function by typing the constructor\nfunction's name, and adding the attribute \u003ccode\u003e.prototype\u003c/code\u003e. So for \u003ccode\u003eUser\u003c/code\u003e it's\n\u003ccode\u003eUser.prototype\u003c/code\u003e. Attributes that point to functions in this JavaScript\n\u003ccode\u003eObject\u003c/code\u003e will be shared to all instances made by that constructor function.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e  this.name = name;\u003cbr\u003e  this.email = email;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eUser.prototype.sayHello = function() {\u003cbr\u003e  console.log(`Hello everybody, my name is ${this.name}`);\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet sarah = new User('sarah', 'sarah@example.com');\u003cbr\u003elet lauren = new User('Lauren', 'lauren@example.com');\u003cbr\u003e\u003cbr\u003esarah.sayHello(); //=\u0026gt; // \"Hello everybody, my name is sarah!\"\u003cbr\u003elauren.sayHello(); //=\u0026gt; // \"Hello everybody, my name is Lauren!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe prototype is just a JavaScript \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUser.prototype;\u003cbr\u003e// {sayHello: ƒ, constructor: ƒ}\u003cbr\u003etypeof User.prototype;\u003cbr\u003e// object\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo prove the efficiency of sharing methods via prototype:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elauren.sayHello === sarah.sayHello; //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson you've seen the constructor' prototype and seen how it can be\nused to share functionality between instances.\u003c/p\u003e\n\n\u003cp\u003eYour pattern for writing OO in JavaScript (Prototype-based) is the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction User(name, email) {\u003cbr\u003e  this.name = name;\u003cbr\u003e  this.email = email;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eUser.prototype.sayHello = function() {\u003cbr\u003e  console.log(`Hello everybody, my name is ${this.name}`);\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet sarah = new User('sarah', 'sarah@example.com');\n\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"review-objects","title":"Review: Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eIdentify JavaScript \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003cli\u003eAccess a value stored in an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn about JavaScript's Object methods\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhile \u003ccode\u003eArray\u003c/code\u003es are great for representing simple, ordered data sets, they're generally not so great at modeling a more complex structure. For that, we need \u003ccode\u003eObject\u003c/code\u003es. In this lesson, we'll begin to learn about \u003ccode\u003eObject\u003c/code\u003es, specifically, what they are, how to create them, and how to access values stored in them. In the next lesson, we'll learn how to modify \u003ccode\u003eObject\u003c/code\u003es, both destructively and nondestructively.\u003c/p\u003e  \u003cp\u003eBe sure to follow along with the examples in this lesson in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: You may have heard about or be familiar with the concept of \u003cem\u003eobject-oriented programming\u003c/em\u003e. Un-helpfully JavaScript called this thing with curly braces (\u003ccode\u003e{}\u003c/code\u003e) an \u003ccode\u003eObject\u003c/code\u003e, but it is not related to object orientation. There was initially no thought that JavaScript would ever need to accommodate object-oriented programming but as it grew in popularity, the ability to use object orientation was added to the language. A JavaScript \u003ccode\u003eObject\u003c/code\u003e, however, is a \u003cem\u003edata structure\u003c/em\u003e consisting of \u003ccode\u003ekey\u003c/code\u003es and \u003ccode\u003evalue\u003c/code\u003es, similar to Ruby's \u003ccode\u003eHash\u003c/code\u003e, Python's \u003ccode\u003eDictionary\u003c/code\u003e or C-like languages' \u003ccode\u003estruct\u003c/code\u003e(ure). It is important not to confuse the two.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify JavaScript Objects\u003c/h2\u003e  \u003cp\u003eLet's think about how we could represent a company's address in JavaScript. Addresses are made up of words and numbers, so at first it might make sense to store the address as a string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = '11 Broadway, 2nd Floor, New York, NY 10004'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat looks decent enough, but what happens if the company moves to a different floor in the same building? We just need to modify one piece of the address, but with a string we'd have to involve some pretty complicated find-and-replace pattern matching or replace the entire thing. Instead, let's throw the different pieces of the address into an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = ['11 Broadway', '2nd Floor', 'New York', 'NY', '10004']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we can just grab the small piece that we want to update and leave the rest as is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress[1] = '3rd Floor';\u003cbr\u003e\u003cbr\u003eaddress;\u003cbr\u003e//=\u0026gt; [\"11 Broadway\", \"3rd Floor\", \"New York\", \"NY\", \"10004\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis seems like a better solution, but it still has its drawbacks. Namely, \u003ccode\u003eaddress[1]\u003c/code\u003e is a \u003cstrong\u003eterrible\u003c/strong\u003e way to refer to the second line of an address. What if there is no second line, e.g., \u003ccode\u003e['11 Broadway', 'New York', 'NY', '10004']\u003c/code\u003e? Then \u003ccode\u003eaddress[1]\u003c/code\u003e will contain the city name instead of the floor number.\u003c/p\u003e  \u003cp\u003eWe could standardize it, putting an empty string in \u003ccode\u003eaddress[1]\u003c/code\u003e if there's no second line in the address, but it's still poorly named. \u003ccode\u003eaddress[1]\u003c/code\u003e offers very little insight into what data we should expect to find in there. It's a part of an address, sure, but which part?\u003c/p\u003e  \u003cp\u003eTo get around this, we could store the individual pieces of the address in separate, appropriately-named variables:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst street1 = '11 Broadway';\u003cbr\u003econst street2 = '2nd Floor';\u003cbr\u003econst city = 'New York';\u003cbr\u003econst state = 'NY';\u003cbr\u003econst zipCode = '10004'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's solved one issue but reintroduced the same problem we tackled in the lesson on \u003ccode\u003eArray\u003c/code\u003es: storing pieces of related data in a bunch of unrelated variables is not a great idea! If only there were a best-of-both-worlds solution —\u0026nbsp;a way to store all of our address information in a single data structure while also maintaining a descriptive naming scheme. The data structure we're after here is the \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003eWhat Is an Object?\u003c/h3\u003e  \u003cp\u003eLike \u003ccode\u003eArray\u003c/code\u003es, JavaScript \u003ccode\u003eObject\u003c/code\u003es are collections of data. They consist of a list of \u003cem\u003eproperties\u003c/em\u003e (\u003cem\u003ekey-value pairs\u003c/em\u003e) bounded by curly braces (\u003ccode\u003e{ }\u003c/code\u003e). The properties can point to values of any data type —\u0026nbsp;even other \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eWe can have empty \u003ccode\u003eObject\u003c/code\u003es:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr \u003ccode\u003eObject\u003c/code\u003es with a single property:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{ key: value } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we have to represent multiple properties in the same \u003ccode\u003eObject\u003c/code\u003e (which is most of the time), we use commas to separate them:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  key1: value1,\u003cbr\u003e  key2: value2\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also have nested \u003ccode\u003eObject\u003c/code\u003es, in which the values associated with one or more of the keys is another \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  key1: value1,\u003cbr\u003e  key2: {\u003cbr\u003e    innerKey1: innerValue1,\u003cbr\u003e    innerKey2: innerValue2\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere is no limit to how deeply nested our \u003ccode\u003eObject\u003c/code\u003es can be.\u003c/p\u003e  \u003cp\u003eFor a real example, let's define our address as an \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street: {\u003cbr\u003e    line1: '11 Broadway',\u003cbr\u003e    line2: '2nd Floor'\u003cbr\u003e  },\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: '10004'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we're defining \u003ccode\u003eaddress\u003c/code\u003e using \u003ccode\u003eObject\u003c/code\u003e literal syntax: literally typing out the \u003ccode\u003eObject\u003c/code\u003e inside the \u003ccode\u003e{}\u003c/code\u003e. Our address \u003ccode\u003eObject\u003c/code\u003e has four keys: street, city, state, and zipCode. The first key points to another \u003ccode\u003eObject\u003c/code\u003e which itself has two keys: line1 and line2. Note that there's a comma between each key-value pair in both the top-level \u003ccode\u003eObject\u003c/code\u003e and the nested \u003ccode\u003eObject\u003c/code\u003e. Practice creating an object in the REPL; then try leaving out a comma to see what happens.\u003c/p\u003e  \u003cp\u003eMultiple properties can have the same value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Avocado toast',\u003cbr\u003e  lunch: 'Avocado toast',\u003cbr\u003e  dinner: 'Avocado toast'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals.breakfast;\u003cbr\u003e// =\u0026gt; \"Avocado toast\"\u003cbr\u003e\u003cbr\u003emeals.dinner;\u003cbr\u003e// =\u0026gt; \"Avocado toast\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut keys must be unique. If the same key is used for multiple properties, only the final value will be retained.\u0026nbsp;The rest will be overwritten:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Avocado toast',\u003cbr\u003e  breakfast: 'Oatmeal',\u003cbr\u003e  breakfast: 'Scrambled eggs'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e// =\u0026gt; { breakfast: \"Scrambled eggs\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe real data in an \u003ccode\u003eObject\u003c/code\u003e is stored in the \u003cem\u003evalue\u003c/em\u003e half of the key-value pairings. The \u003cem\u003ekey\u003c/em\u003e is what lets us access that value. In the same way we use \u003cem\u003eidentifiers\u003c/em\u003e to name variables and functions, inside an \u003ccode\u003eObject\u003c/code\u003e we assign each value a key. We can then refer to that key and the JavaScript engine knows exactly which value we're trying to access.\u003c/p\u003e  \u003ch2\u003eAccess a Value Stored in an Object\u003c/h2\u003e  \u003cp\u003eWe access an \u003ccode\u003eObject\u003c/code\u003e stored in a variable in the same way we access any variable's value: by typing the variable name. Then, to access one of the values \u003cem\u003einside\u003c/em\u003e our \u003ccode\u003eObject\u003c/code\u003e, we add a reference to the key associated with the value we want; we can do that using either \u003cem\u003edot notation\u003c/em\u003e or \u003cem\u003ebracket notation\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eDot Notation\u003c/h3\u003e  \u003cp\u003eWith \u003cem\u003edot notation\u003c/em\u003e, we use the \u003cem\u003emember access operator\u003c/em\u003e (a single period) to access values in an \u003ccode\u003eObject\u003c/code\u003e. For example, we can grab the individual pieces of our address, above, as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.street;\u003cbr\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003cbr\u003e\u003cbr\u003eaddress.city;\u003cbr\u003e//=\u0026gt; \"New York\"\u003cbr\u003e\u003cbr\u003eaddress.state;\u003cbr\u003e//=\u0026gt; \"NY\"\u003cbr\u003e\u003cbr\u003eaddress.zipCode;\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen to access a value inside \u003ccode\u003eaddress.street\u003c/code\u003e, we simply append the inner key, again using dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.street.line1;\u003cbr\u003e//=\u0026gt; \"11 Broadway\"\u003cbr\u003e\u003cbr\u003eaddress.street.line2;\u003cbr\u003e//=\u0026gt; \"2nd Floor\" \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You might initially think we should use \u003ccode\u003eaddress.line1\u003c/code\u003e to access the value associated with the \u003ccode\u003eline1\u003c/code\u003e key, but \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003eaddress.street\u003c/code\u003e are \u003cem\u003eseparate\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003es. \u003ccode\u003eaddress.street\u003c/code\u003e is the \u003cem\u003eidentifier\u003c/em\u003e for the nested \u003ccode\u003eObject\u003c/code\u003e — the one that contains the \u003ccode\u003eline1\u003c/code\u003e key — and we can use dot notation on that just the same as on the top-level \u003ccode\u003eObject\u003c/code\u003e, \u003ccode\u003eaddress\u003c/code\u003e. Experiment in the REPL to make sure you understand how it works.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eDot notation is fantastic for readability, as we can just reference the bare key name (e.g., \u003ccode\u003estreet\u003c/code\u003e or \u003ccode\u003ezipCode\u003c/code\u003e). Because of this simple syntax, it should be your go-to strategy for accessing the properties of an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Most people just call it \u003cem\u003edot notation\u003c/em\u003e or the \u003cem\u003edot operator\u003c/em\u003e, so don't worry too much about remembering the term \u003cem\u003emember access operator\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eAccessing Nonexistent Properties\u003c/h4\u003e  \u003cp\u003eIf we try to access the \u003ccode\u003ecountry\u003c/code\u003e property of our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, what will happen?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.country;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt returns \u003ccode\u003eundefined\u003c/code\u003e because there is no matching key on the \u003ccode\u003eObject\u003c/code\u003e. JavaScript is too nice to throw an error, so it lets us down gently. Keep one thing in mind, though: if you're seeing \u003ccode\u003eundefined\u003c/code\u003e when trying to access an \u003ccode\u003eObject\u003c/code\u003e's properties, you should recheck which properties exist on the \u003ccode\u003eObject\u003c/code\u003e (along with your spelling and capitalization)!\u003c/p\u003e  \u003ch3\u003eBracket Notation\u003c/h3\u003e  \u003cp\u003eWith \u003cem\u003ebracket notation\u003c/em\u003e, we use the \u003cem\u003ecomputed member access operator\u003c/em\u003e, which, recall from the lesson on \u003ccode\u003eArray\u003c/code\u003es, is a pair of square brackets (\u003ccode\u003e[]\u003c/code\u003e). To access the same properties as above, we need to represent them as strings inside the operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress['street'];\u003cbr\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003cbr\u003e\u003cbr\u003eaddress['street']['line1'];\u003cbr\u003e//=\u0026gt; \"11 Broadway\"\u003cbr\u003e\u003cbr\u003eaddress['street']['line2'];\u003cbr\u003e//=\u0026gt; \"2nd Floor\"\u003cbr\u003e\u003cbr\u003eaddress['city'];\u003cbr\u003e//=\u0026gt; \"New York\"\u003cbr\u003e\u003cbr\u003eaddress['state'];\u003cbr\u003e//=\u0026gt; \"NY\"\u003cbr\u003e\u003cbr\u003eaddress['zipCode'];\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBracket notation is a bit harder to read than dot notation, so we always default to the latter. However, there are two main situations in which we need to use bracket notation.\u003c/p\u003e  \u003ch4\u003eNonstandard Keys\u003c/h4\u003e  \u003cp\u003eIf (for whatever reason) you need to use a nonstandard string as the key in an \u003ccode\u003eObject\u003c/code\u003e, you'll only be able to access the properties with bracket notation. For example, this is a valid \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wildKeys = {\u003cbr\u003e  'Cash rules everything around me.': 'Wu',\u003cbr\u003e  'C.R.E.A.M.': 'Tang',\u003cbr\u003e  'Get the money.': 'For',\u003cbr\u003e  \"$ $ bill, y'all!\": 'Ever'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's impossible to access those properties with dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewildKeys.'Cash rules everything around me.';\u003cbr\u003e// ERROR: Uncaught SyntaxError: Unexpected string \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut bracket notation works just fine:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewildKeys[\"$ $ bill, y'all!\"];\u003cbr\u003e//=\u0026gt; \"Ever\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn order to access a property via dot notation, \u003cstrong\u003ethe key must follow the same naming rules applied to variables and functions\u003c/strong\u003e. It's also important to note that under the hood \u003cstrong\u003eall keys are strings\u003c/strong\u003e. Don't waste too much time worrying whether a key is accessible via dot notation. If you follow these rules when naming your keys, everything will work out:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ecamelCaseEverything\u003c/li\u003e \u003cli\u003eStart the key with a lowercase letter\u003c/li\u003e \u003cli\u003eNo spaces or punctuation\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIf you follow those three rules, you'll be able to access all of an \u003ccode\u003eObject\u003c/code\u003e's properties via bracket notation \u003cstrong\u003eor\u003c/strong\u003e dot notation.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Always name your \u003ccode\u003eObject\u003c/code\u003e's keys according to the above three rules. Keeping everything standardized is good, and being able to access properties via dot notation makes the code much more readable.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eAccessing Properties Dynamically\u003c/h4\u003e  \u003cp\u003eThe other situation in which bracket notation is required is if we want to dynamically access properties (i.e., using variables rather than literal identifiers). The reason we need to enclose the key inside quotes when we use the literal key is because, when we \u003cstrong\u003edon't\u003c/strong\u003e use the quotes, JavaScript will interpret what's inside the brackets as a variable.\u003c/p\u003e  \u003cp\u003eFrom the lesson on \u003ccode\u003eArray\u003c/code\u003es, remember why we call it the \u003cem\u003ecomputed member access operator\u003c/em\u003e: we can place any expression inside the brackets and JavaScript will \u003cem\u003ecompute\u003c/em\u003e its value to figure out which property to access. For example, we can access the \u003ccode\u003ezipCode\u003c/code\u003e property from our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress['zip' + 'Code'];\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePretty neat, but the real strength of bracket notation is its ability to compute the value of variables on the fly. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Oatmeal',\u003cbr\u003e  lunch: 'Caesar salad',\u003cbr\u003e  dinner: 'Chimichangas'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet mealName = 'lunch';\u003cbr\u003e\u003cbr\u003emeals[mealName];\u003cbr\u003e//=\u0026gt; \"Caesar salad\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy placing \u003ccode\u003emealName\u003c/code\u003e in the square brackets, we're telling the JavaScript engine it needs to \u003cem\u003einterpret\u003c/em\u003e the value inside those brackets. It evalutes \u003ccode\u003emealName\u003c/code\u003e, resolves it to \u003ccode\u003e'lunch'\u003c/code\u003e, and returns \"Caesar salad\". Note that we didn't enclose the key in quotes: the keys themselves are strings, but \u003ccode\u003emealName\u003c/code\u003e is a variable \u003cem\u003econtaining\u003c/em\u003e a string. If we try to use the \u003ccode\u003emealName\u003c/code\u003e variable with dot notation instead, it doesn't work:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emealName = 'dinner';\u003cbr\u003e//=\u0026gt; \"dinner\"\u003cbr\u003e\u003cbr\u003emeals.mealName;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith dot notation, JavaScript doesn't treat \u003ccode\u003emealName\u003c/code\u003e as a variable —\u0026nbsp;instead it checks whether a property exists with the literal key \u003ccode\u003emealName\u003c/code\u003e, only finds properties named \u003ccode\u003ebreakfast\u003c/code\u003e, \u003ccode\u003elunch\u003c/code\u003e, and \u003ccode\u003edinner\u003c/code\u003e, and so returns \u003ccode\u003eundefined\u003c/code\u003e. Essentially, dot notation is for when you know the exact name of the property in advance, and bracket notation is for when you need to compute it when the program runs.\u003c/p\u003e  \u003cp\u003eThe need for bracket notation doesn't stop at dynamically accessing properties on an already-created \u003ccode\u003eObject\u003c/code\u003e. We can also use bracket notation to dynamically set properties \u003cem\u003eduring the creation of a new \u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst morningMeal = 'breakfast';\u003cbr\u003econst middayMeal = 'lunch';\u003cbr\u003econst eveningMeal = 'dinner';\u003cbr\u003e\u003cbr\u003econst meals = {\u003cbr\u003e  [morningMeal]: 'French toast',\u003cbr\u003e  [middayMeal]: 'Personal pizza',\u003cbr\u003e  [eveningMeal]: 'Fish and chips'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e//=\u0026gt; { breakfast: \"French toast\", lunch: \"Personal pizza\", dinner: \"Fish and chips\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnce again, by wrapping the variable names in square brackets, we're letting JavaScript know that it needs to interpret the contents. Let's try doing the same thing without the square brackets:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst morningMeal = 'breakfast';\u003cbr\u003econst middayMeal = 'lunch';\u003cbr\u003econst eveningMeal = 'dinner';\u003cbr\u003e\u003cbr\u003econst meals = {\u003cbr\u003e  morningMeal: 'French toast',\u003cbr\u003e  middayMeal: 'Personal pizza',\u003cbr\u003e  eveningMeal: 'Fish and chips'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e//=\u0026gt; { morningMeal: \"French toast\", middayMeal: \"Personal pizza\", eveningMeal: \"Fish and chips\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWithout the square brackets, JavaScript treated each key as a literal identifier instead of a variable. Bracket notation — the \u003cem\u003ecomputed member access operator\u003c/em\u003e — once again shows its powers of computation!\u003c/p\u003e  \u003cp\u003eBracket notation will really come in handy when we start iterating over \u003ccode\u003eObject\u003c/code\u003es and programmatically accessing and assigning properties.\u003c/p\u003e  \u003ch2\u003eJavaScript's Object Methods\u003c/h2\u003e  \u003cp\u003eJavaScript includes a number of built-in \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\"\u003estatic \u003ccode\u003eObject\u003c/code\u003e methods\u003c/a\u003e (\u003cem\u003estatic\u003c/em\u003e means that these methods are called on the \u003ccode\u003eObject\u003c/code\u003e class itself, rather than on an instance of an \u003ccode\u003eObject\u003c/code\u003e). We will talk briefly about a couple of them here and go into detail about one more in the next lesson.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe can get a list of the top-level keys in an \u003ccode\u003eObject\u003c/code\u003e by using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/a\u003e static method. We do that by calling \u003ccode\u003eObject.keys()\u003c/code\u003e and passing the \u003ccode\u003eObject\u003c/code\u003e instance as an argument. The return value is an \u003ccode\u003eArray\u003c/code\u003e containing all of the keys at the \u003cem\u003etop level\u003c/em\u003e of the \u003ccode\u003eObject\u003c/code\u003e instance.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wednesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eObject.keys(wednesdayMenu);\u003cbr\u003e//=\u0026gt; [\"cheesePlate\", \"fries\", \"salad\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that it didn't pick up the keys in the nested \u003ccode\u003echeesePlate\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e —\u0026nbsp;just the keys from the properties declared at the top level within \u003ccode\u003ewednesdayMenu\u003c/code\u003e. How do you think we could use \u003ccode\u003eObject.keys()\u003c/code\u003e to get a list of the keys inside the nested \u003ccode\u003eObject\u003c/code\u003e? Try it out in the REPL.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: The sequence in which keys are ordered in the returned \u003ccode\u003eArray\u003c/code\u003e is not consistent across browsers and should not be relied upon. All of the \u003ccode\u003eObject\u003c/code\u003e's keys will be in the \u003ccode\u003eArray\u003c/code\u003e, but you can't count on \u003ccode\u003ekeyA\u003c/code\u003e always being at index \u003ccode\u003e0\u003c/code\u003e of the \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003ekeyB\u003c/code\u003e always being at index \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/a\u003e static method behaves similarly to \u003ccode\u003eObject.keys()\u003c/code\u003e but, as you might expect, returns an array containing values rather than keys. Try this out in the REPL as well.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we identified what an \u003ccode\u003eObject\u003c/code\u003e is and how it gives us a better way to keep track of more complicated sets of related data. We also learned how to access values stored in an \u003ccode\u003eObject\u003c/code\u003e using dot notation and bracket notation, as well as when to use each. In the next lesson, we'll learn how to modify \u003ccode\u003eObject\u003c/code\u003es. We'll also explore the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eCreating and interacting with \u003ccode\u003eObject\u003c/code\u003es is an important skill in JavaScript programming. Before moving on, be sure to use \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e to practice creating \u003ccode\u003eObject\u003c/code\u003es (including nested \u003ccode\u003eObject\u003c/code\u003es) and accessing properties.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"welcome-what-to-expect-in-phase-1","title":"Welcome - What To Expect In Phase 1","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-to-phase-1-js-what-to-expect\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-phase-1-js-what-to-expect\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-to-phase-1-js-what-to-expect/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eFirst,\u003c/h2\u003e  \u003ch3\u003eCongratulations!\u003c/h3\u003e  \u003cp\u003eWelcome to the the start of Phase 1 — our core JavaScript content! What you've done so far is no small feat. There is much more ahead, but you're well on your way!\u003c/p\u003e  \u003chr\u003e  \u003ch2\u003eThe Journey of Learning Something New\u003c/h2\u003e  \u003ch3\u003eThe Stages of Learning\u003c/h3\u003e  \u003cp\u003eYou will see below an image that illustrates the stages of learning that each of us goes through, at least when it comes to programming:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/20468684/44881320-33845480-ac7d-11e8-8a69-5e30c51ebfd9.jpg\" alt=\"alt text\" title=\"Consciousness of Competence\"\u003e\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eSTART: You don't know what the road to knowledge looks like.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eSECOND: You've learned what the road looks like, and consequently you know you're rather far from your end goal.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eTHIRD: You're working toward the goal via the road, acknowledging an increase in knowledge along the way.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eGOAL: You got to the goal and moved on to other roads, taking the knowledge with you!\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eThe Emotional Journey of Creating Anything Great\u003c/h3\u003e  \u003cp\u003eYou will see below an image that illustrates the emotional journey of creating anything great. We want you to take a look at this because there is much that you and your cohort mates can take away from it as you enter the most intensive of the five modules:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://i.imgur.com/X4QR5en.png\" alt=\"alt text\" title=\"The Emotional Journey of Creating Anything Great\"\u003e\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eThe first point we want share with you is that it is normal to feel the weight of Phase 1 (and the entire program) on your shoulders — you will not be alone in however you will be feeling. Many students are actively going through the same thing. Lean on each other! We encourage you to find others at the same place in the course as you and make time to work together towards your shared goals.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe second point we want to share with you is that you should try to be aware of where you find yourself mentally and emotionally, and should act accordingly to attempt to stay out of the dark swamp. Lean on family, and remember to have confidence in your support system. If the administrative support system available to you is not clear, talk to an instructor and a meeting can be arranged with the two of you and an administrator such as the Senior Program Manager.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003ePutting It Together\u003c/h3\u003e  \u003cp\u003eWe know JavaScript is new to most (if not all) of you. It is not unusual, when a student gets to the second step of \"The Stages of Learning\" and sees how long that road is, to feel discouraged. If you feel that happening to you, keep the above two points in mind and also keep confidence in the curriculum: it is a thoroughly crafted, thoroughly tested, and further refined system that is designed to get you ready for the workforce!\u003c/p\u003e  \u003ch3\u003ePersonal Empowerment Protocol\u003c/h3\u003e  \u003col\u003e \u003cli\u003eRead the Error\u003c/li\u003e \u003cli\u003eGoogle the Problem\u003c/li\u003e \u003cli\u003eAsk a Neighbor\u003c/li\u003e \u003cli\u003eAsk an Instructor\u003c/li\u003e \u003c/ol\u003e  \u003chr\u003e  \u003ch2\u003eThe Content\u003c/h2\u003e  \u003ch3\u003eThings to Know\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eLearning JavaScript can be difficult because it is a language with many quirks and a large vocabulary.\u003c/li\u003e \u003cli\u003eThe material for this module requires increased use of critical thinking and problem solving skills. You cannot pattern match to solve the labs.  Your priority should be drilling down and understanding the underlying concepts, not just passing the tests.\u003c/li\u003e \u003cli\u003eTest your code often! As you code, you should be regularly checking your \u003cem\u003eassumptions\u003c/em\u003e about what your code is doing against what it's actually telling the browser to do. Continually ask yourself what your code is doing and why it is doing it.\u003c/li\u003e \u003cli\u003eOne topic does not always flow into the other. This is because JavaScript has many moving parts.\u003c/li\u003e \u003cli\u003eGoing forward, \u003cstrong\u003enot all assignments will have tests\u003c/strong\u003e. There will be some that are more open-ended. These are provided to allow you to practice applying concepts without being restricted to a specific design. You will need to use your judgment to determine how much time you should spend working on this content.\u003c/li\u003e \u003c/ul\u003e  \u003chr\u003e  \u003ch2\u003eIndependence\u003c/h2\u003e  \u003cp\u003eWe want to empower you to take control of your own learning. This means learning to teach yourself how to approach new topics, debug, and find the answers to conceptual questions.\u003c/p\u003e  \u003cp\u003eFor this reason, instructors may steer you towards resources, rather than answer your questions directly. We aren’t avoiding the question; we want to see if you can read documentation and master Google-fu. These are the skills you will need in your first job!\u003c/p\u003e","frontPage":false},{"exportId":"build-a-cli-application-with-external-data","title":"Build a CLI Application with External Data","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-data-gem-assessment\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-data-gem-assessment\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-data-gem-assessment/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"#expectations\"\u003eWhat to Expect from the Project Review\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#requirements\"\u003eProject Requirements\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#instructions\"\u003eInstructions\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#success\"\u003ePracticing for Success\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#resources\"\u003eResources\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eCongrats! It’s time to work on your first project. In this lesson you're going to build a \u003ca href=\"https://guides.rubygems.org/what-is-a-gem/\"\u003eRuby gem\u003c/a\u003e that provides a Command Line Interface (CLI) to an external data source. The CLI will be composed of an Object Oriented Ruby application. You'll use all you've learned about Ruby and \u003ca href=\"https://github.com/learn-co-curriculum/ruby-cli-applications-readme\"\u003eCLI Applications in Ruby\u003c/a\u003e to complete this project.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003ePlease note that while you will be writing code to \u003ca href=\"https://github.com/learn-co-curriculum/scraping-reading\"\u003escrape data\u003c/a\u003e or utilize an API from a public website, we are really looking for you to demonstrate your ability  to write concise, easy-to-read Object-Oriented Ruby code (e.g. objects, not hashes; separation of concerns). The details of the regex or the selectors you use to parse your scraped web pages are less important.\u003c/strong\u003e\u003c/p\u003e  \u003ch2\u003e\u003ca id=\"expectations\"\u003eWhat to expect from the Project Review\u003c/a\u003e\u003c/h2\u003e  \u003cp\u003eProject reviews are focused on preparing you for \u003ca href=\"https://www.brightnetwork.co.uk/career-path-guides/technology-it-software-development/five-ways-stand-out-your-technology/what-expect-technical-interview/\"\u003etechnical interviews\u003c/a\u003e. Treat project reviews as if they were technical interviews, in both attitude and technical presentation.\u003c/p\u003e  \u003cp\u003eDuring your project review, be prepared to:\u003c/p\u003e  \u003col\u003e \u003cli\u003eExplain your code from execution point to exit point. You will also be asked questions that test your knowledge of Ruby fundamentals. Use the best technical vocabulary you can. We’ll help you with the words you can’t remember or those you find difficult to pronounce. 20-25 minutes\u003c/li\u003e \u003cli\u003eRefactor code. 10-20 minutes\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIf any requirements are missing or if significant gaps in understanding are found, be prepared to do one or all of the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eExtend the application with a new feature, more data, a different domain etc.\u003c/li\u003e \u003cli\u003eSubmit an improved version\u003c/li\u003e \u003cli\u003eMeet again for another Project Review\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWhat won't happen:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eYou won't be yelled at, belittled, or scolded\u003c/li\u003e \u003cli\u003eYou won't be put on the spot without support\u003c/li\u003e \u003cli\u003eThere's nothing you can do to instantly fail or blow it\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003e\u003ca id=\"requirements\"\u003eProject Requirements\u003c/a\u003e\u003c/h2\u003e  \u003col\u003e \u003cli\u003eProvide a \u003ca href=\"https://github.com/learn-co-curriculum/cli-interfaces-readme#program-loop\"\u003eCLI\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003eYour \u003ca href=\"https://github.com/learn-co-curriculum/ruby-cli-applications-readme\"\u003eCLI application\u003c/a\u003e must provide access to data from a web page.\u003c/li\u003e \u003cli\u003eThe data provided must go at least one level deep. A \"level\" is where a user can make a choice and then get detailed information about their choice. Some examples are below:  \u003cul\u003e \u003cli\u003eMovies opening soon - Enter your zip code and receive a list of movies and their details.\u003c/li\u003e \u003cli\u003eLibraries near you -  Enter your zip code and receive a list of libraries and their details.\u003c/li\u003e \u003cli\u003eProgramming meetups near you - Choose from an events list and receive details.\u003c/li\u003e \u003cli\u003eNews reader - List articles and read an article of your choosing.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eYour CLI application should not be too similar to the Ruby final projects (Music Library CLI, Tic-Tac-Toe with AI, Student Scraper). Also, please refrain from using \u003ca href=\"https://github.com/learn-co-curriculum/scraping-kickstarter\"\u003eKickstarter\u003c/a\u003e as that was used for the scraping 'code along'.\u003c/li\u003e \u003cli\u003eUse good OO design patterns. You should be creating a collection of objects, not hashes, to store your data. \u003cem\u003ePro Tip: Avoid scraping data more than once per web page - utilize objects you have already created. It will speed up your program!\u003c/em\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003ca href=\"https://github.com/cjbrock/worlds-best-restaurants-cli-gem\"\u003eWorld's Best Restaurants\u003c/a\u003e was built by a Learn student, is maintained by Flatiron School staff, meets these requirements, and is well coded. Take the time to clone, run, and look through the code in detail - it'll really help.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eIf you have time for an extra challenge, \u003ca href=\"https://guides.rubygems.org/make-your-own-gem/\"\u003ecreate a gem\u003c/a\u003e from your application. Want more? Try \u003ca href=\"https://guides.rubygems.org/publishing/\"\u003epublishing your gem to RubyGems.org\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e  \u003ch2\u003e\u003ca id=\"instructions\"\u003eInstructions\u003c/a\u003e\u003c/h2\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eWatch this \u003ca href=\"https://www.youtube.com/watch?v=_lDExWIhYKI\"\u003evideo walkthrough\u003c/a\u003e of building a basic CLI Gem called \u003ca href=\"https://github.com/learn-co-curriculum/daily_deal\"\u003eDaily Deal\u003c/a\u003e before you begin. Review the \u003ca href=\"https://github.com/learn-co-curriculum/oo-student-scraper\"\u003eStudent Scraper Project\u003c/a\u003e, which provides a good example of how scraping concerns can be separated into a distinct class.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eBuild your application. This is going to be different from labs you have done on Learn. Do \u003cem\u003enot\u003c/em\u003e click \u003ccode\u003eOpen IDE\u003c/code\u003e and create your application within the lesson files. Instead:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eOnline Software Engineering\u003c/strong\u003e: \u003ca href=\"https://learn.co/tracks/online-software-engineering-structured/object-oriented-ruby/section-17-final-projects/bonus-video-review-music-library-cli\"\u003eUse this IDE Sandbox\u003c/a\u003e.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eFull Stack Web Development V7\u003c/strong\u003e: \u003ca href=\"https://learn.co/tracks/full-stack-web-development-v7/intro-to-ruby-development/command-line-applications/cli-applications-in-ruby\"\u003eUse this IDE Sandbox\u003c/a\u003e.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eFull Stack Web Development V8\u003c/strong\u003e \u003ca href=\"https://learn.co/tracks/full-stack-web-development-v8/module-3-intro-to-ruby-development/section-5-command-line-applications/cli-applications-in-ruby\"\u003eUse this IDE Sandbox\u003c/a\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cem\u003eDo not close the Sandbox without completing the next step or your work will be lost.\u003c/em\u003e\u003c/p\u003e\n\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003e- After your repo is pushed up to Github, make sure you have [a good README.md](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2) with a short description, install instructions, a contributors guide and a link to the license for your code (students usually use the [MIT license](https://opensource.org/licenses/MIT)).\u003cbr\u003e- To continue working on your project, you'll need to delete extra project files in the Sandbox and clone your project down each time. [This article](http://help.learn.co/workflow-tips/learn-gem/how-to-manually-open-a-lab) includes instructions on how to clone down a repo.\u003cbr\u003e- Make sure to commit early and commit often. [Commit messages should be meaningful](https://chris.beams.io/posts/git-commit/) (clearly describe what you're doing in the commit) and accurate (there should be nothing in the commit that doesn't match the description in the commit message). Most of your commits should have under 15 lines of code and a 2 line commit is perfectly acceptable. Good rule of thumb is to commit every 3-7 mins of actual coding time.\u003cbr\u003e- [Use this checklist](https://docs.google.com/forms/d/1ItDHkNbtHJP8T2G28Nqc3Ad8MppbPDpqv9AijAOCFDA/) as you complete your project and submit when you are done. \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003e\n\u003cp\u003eDocumentation\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWhile you're working on it, record a 30-minute coding session with your favorite screen capture tool. During the session, either think out loud or not. It's up to you. You don't need to submit the video, but we may ask for it at a later time.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eSubmission\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://docs.google.com/forms/d/1ItDHkNbtHJP8T2G28Nqc3Ad8MppbPDpqv9AijAOCFDA/\"\u003eSubmit this checklist\u003c/a\u003e after confirming all requirements are met.\u003c/li\u003e \u003cli\u003ePrepare a video demo (narration helps!) describing how a user would interact with your working gem. Some common video recording tools used are \u003ca href=\"https://zoom.us/\"\u003eZoom\u003c/a\u003e, \u003ca href=\"https://www.apple.com/quicktime/download/\"\u003eQuicktime\u003c/a\u003e, and \u003ca href=\"https://chrome.google.com/webstore/detail/nimbus-screenshot-screen/bpconcjcammlapcogcnnelfmaeghhagj?hl=en\"\u003eNimbus\u003c/a\u003e. After you create your demo, publish it on a service like \u003ca href=\"https://www.youtube.com/\"\u003eYouTube\u003c/a\u003e or \u003ca href=\"https://www.google.com/drive/\"\u003eGoogle Drive\u003c/a\u003e.\u003c/li\u003e \u003cli\u003eWrite a blog post about the project and process.\u003c/li\u003e \u003cli\u003eOn Learn, submit links to the GitHub repository for your app, your video demo (not your 30-minute coding session), and your blog post each to the corresponding textbox in the right rail, and hit \"I'm done\" to wrap it up.\u003cbr\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003e\u003ca id=\"success\"\u003ePracticing for Success \u003c/a\u003e\u003c/h2\u003e  \u003ch4\u003eBe scrappy.\u003c/h4\u003e  \u003cul\u003e \u003cli\u003eIf you make a mistake, correct yourself! We all make mistakes, I promise.\u003c/li\u003e \u003cli\u003eThink on your feet. Feel free to look things up while you're pairing with us. You'll be asked to expand on concepts you implemented and you will be pushed to the edge of your knowledge.\u003c/li\u003e \u003cli\u003eExplain the details. We're curious!\u003c/li\u003e \u003cli\u003eDon’t worry if your code isn’t perfect the first time - focus on getting something working, then refactoring to improve it.\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eMake no little plans.\u003c/h4\u003e  \u003cul\u003e \u003cli\u003eYou're going to learn a ton. We will give pointers and show you ways to improve your code. This isn't telling you that your code is wrong, it's simply us teaching. Whatever you don't quite understand will be explained.\u003c/li\u003e \u003cli\u003eBe proud of your project and your code, and show confidence in it.\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eRadiate positivity.\u003c/h4\u003e  \u003cul\u003e \u003cli\u003ePresent yourself and your project in the best way possible.\u003c/li\u003e \u003cli\u003eBe open to feedback, both positive and constructive.\u003c/li\u003e \u003cli\u003eRemember, the interviewer is a person too. Be nice to them!\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eWork Together.\u003c/h4\u003e  \u003cul\u003e \u003cli\u003eTrust yourself.\u003c/li\u003e \u003cli\u003eTrust us - our goal is to help you be successful in achieving your goals.\u003c/li\u003e \u003cli\u003eWe understand that this process can be stressful. We’re here to help you through.\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003ePursue mastery.\u003c/h4\u003e  \u003cul\u003e \u003cli\u003eUse the best technical vocabulary you can. We’ll help you with the words you can’t remember, or if you’re unsure about how something is pronounced.\u003c/li\u003e \u003cli\u003eAsk questions! Curiosity and willingness to learn are hugely valued in our industry. If you haven’t heard of something, that’s okay - use this opportunity to learn about it!\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003e\u003ca id=\"resources\"\u003eResources\u003c/a\u003e\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://bundler.io/v1.12/guides/creating_gem.html\"\u003eBundler\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/git-basics-readme\"\u003eGit Repository Basics\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=XBgZLm-sdl8\"\u003eEnvironments, Requiring Files, Bundler, and Gems\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=_lDExWIhYKI\"\u003eVideo- CLI Data Gem Walkthrough\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=Y5X6NRQi0bU\"\u003eVideo- CLI Data Gem Walkthrough: Creating a CLI Scraper Gem\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=cbMa87oWv08\"\u003eVideo- Common Anti-Patterns in CLI Data Gem\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=JEL_PXr74qQ\"\u003eVideo- Student Example 1: Refactoring CLI Data Gem\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=Lt0oyHiKWIw\"\u003eVideo- Student Example 2: Refactoring CLI Data Gem\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://guides.rubygems.org/make-your-own-gem/\"\u003eHow to build a ruby gem\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://guides.rubygems.org/publishing/\"\u003eHow to publish your gem\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"prototypal-inheritance-conclusion","title":"Prototypal Inheritance Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-summary\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-summary/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-summary\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-summary/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eYou've now learned about the Prototypal model of Object-Orientation used by\nJavaScript, \u003cem\u003enatively\u003c/em\u003e. These days, most OO JS will be written using \u003ccode\u003eclass\u003c/code\u003e\nand the ES2016 standard, but you will likely encounter and might well be\ninterviewed on questions around the Prototypal model.\u003c/p\u003e\n\n\u003cp\u003eWhile the syntax changes, Object-Orientation \u003cem\u003edoes not\u003c/em\u003e. We still use\nconstructors to pass instance data, we still write methods that have access to\nthe instance data, we still use objects to help us maintain intelligible code.\n\u003cstrong\u003e\u003cem\u003eThe only difference\u003c/em\u003e\u003c/strong\u003e is how you write the class and how you instantiate\nthe instance.\u003c/p\u003e","frontPage":false},{"exportId":"video-common-anti-patterns-in-cli-gem-application","title":"Video: Common Anti-Patterns in CLI Gem Application","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oo-ruby-refactoring-cli-gem\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-refactoring-cli-gem\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-refactoring-cli-gem/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003e\u003cem\u003eThis video walks through the process of refactoring a CLI Gem fixing common anti-patterns in CLI Gem applications\u003c/em\u003e\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eDefine anti-patterns\u003c/li\u003e \u003cli\u003ePinpoint flaws in Gem\u003c/li\u003e \u003cli\u003eZipper Pattern\u003c/li\u003e \u003cli\u003eFormat user output\u003c/li\u003e \u003cli\u003eDecouple scraping functionality \u003c/li\u003e \u003cli\u003eCreate Instances of our Model/Class\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eVideo\u003c/h2\u003e  \u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/cbMa87oWv08?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003e\u003ca href=\"Find%20learn%20s3%20source?\"\u003eMP4\u003c/a\u003e\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ewhat do we mean by anti-patterns\u003c/li\u003e \u003cli\u003eexplain our gem functionality\u003c/li\u003e \u003cli\u003eexplain our classes\u003c/li\u003e \u003cli\u003efind flaws in gem  \u003cul\u003e \u003cli\u003ebunch of different arrays of data instead of unified objects\u003c/li\u003e \u003cli\u003eexplain zipper pattern\u003c/li\u003e \u003cli\u003etoo many calls to website\u003c/li\u003e \u003cli\u003eWe never instantiate instances of our class\u003c/li\u003e \u003cli\u003ea ton of scraping methods in our story object\u003c/li\u003e \u003cli\u003ehard coded maximum number for user input\u003c/li\u003e \u003cli\u003eusing \u003ccode\u003eeach\u003c/code\u003e instead of \u003ccode\u003ecollect\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eexamine app in pry\u003c/li\u003e \u003cli\u003efix formatting for output\u003c/li\u003e \u003cli\u003ebuild functionality to scrape individual story\u003cbr\u003e  \u003cul\u003e \u003cli\u003emake it work using our zipper pattern\u003c/li\u003e \u003cli\u003efix undefined method error\u003c/li\u003e \u003cli\u003eoutput scraped story\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003emove scraping logic to a Scraper class  \u003cul\u003e \u003cli\u003echange class methods to instance methods\u003c/li\u003e \u003cli\u003edefine responsibility of Scraper class\u003c/li\u003e \u003cli\u003escrape individual li tags of stories \u003c/li\u003e \u003cli\u003egrab individual attributes of that story with css selectors.\u003c/li\u003e \u003cli\u003euse those individual story details info to create a new story instance\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eadd functionalty to Story class to keep track of all its instances\u003c/li\u003e \u003cli\u003etest scraper functionality  \u003cul\u003e \u003cli\u003elast article causes an error\u003c/li\u003e \u003cli\u003euse \u003ccode\u003erescue\u003c/code\u003e to pinpoint source of error\u003c/li\u003e \u003cli\u003ecreate logic to prevent the error stemming from different tags in final article\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eimplement our new functionality throughout the app  \u003cul\u003e \u003cli\u003euse our new logic to obtain and output the stories in cli class\u003c/li\u003e \u003cli\u003eadd functionality to scrape individual article \u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003erealize how efficient our app is now that we've utilized Object Orientation  \u003cul\u003e \u003cli\u003ea story object now has power and convenient methods \u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003ecommit and examine github diff post refactor\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eCode\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"https://github.com/aviflombaum/techcrunch_cli/tree/pre-refactor\"\u003eOriginal Code\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://github.com/aviflombaum/techcrunch_cli/tree/post-refactor\"\u003eRefactored Code\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://github.com/aviflombaum/techcrunch_cli/compare/pre-refactor...post-refactor?expand=1\"\u003eDiff\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"youre-a-dom-manipulation-expert-now","title":"You're a DOM Manipulation Expert, Now!","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-youre-a-dom-manipulation-expert\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-a-dom-manipulation-expert\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-youre-a-dom-manipulation-expert/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eReflect\u003c/h2\u003e\n\u003cp\u003eRemember our \"Simple Liker\" program. In it we saw that front end web programming is using three \"pillars\" working together:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e☑ Manipulating the DOM\u003c/li\u003e\n\u003cli\u003eRecognizing JavaScript events\u003c/li\u003e\n\u003cli\u003eCommunicate with the server\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis whole unit has been about gaining the skills required to \u003cstrong\u003eManipulate the DOM\u003c/strong\u003e. Since you can now update web pages using JavaScript, you can communicate things to users like \"You've liked this message\" by changing the appearance of the web page they're looking at.\u003c/p\u003e\n\u003ch2\u003eNext Step\u003c/h2\u003e\n\u003cp\u003eBut...obviously most people don't interact with web pages by opening up the Chrome DevTools console and writing JavaScript commands. If we could tell the web page to do that work when some event happens (clicking an image, double clicking inside a square, etc.) we'd be closer to the web experiences that we're already familiar with.\u003c/p\u003e\n\u003cp\u003eThe important part is that you've mastered the first pillar. Two more down and you're going to be building the rich web applications of your dreams!\u003c/p\u003e","frontPage":false},{"exportId":"review-logical-operators","title":"Review: Logical Operators","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-logical-operators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDescribe how to use \u003ccode\u003e!\u003c/code\u003e to negate an expression\u003c/li\u003e \u003cli\u003eDescribe how to convert an expression to a Boolean using \u003ccode\u003e!!\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e \u003cli\u003eDescribe how to link conditions using the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e \u003cli\u003ePractice What We Learned\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lesson, we will continue to expand our toolset for creating Boolean expressions by learning about logical operators. Using JavaScript's three logical operators, NOT (\u003ccode\u003e!\u003c/code\u003e), AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e), and OR (\u003ccode\u003e||\u003c/code\u003e), we'll learn how to negate and combine expressions. These operators, in combination with the equality and relational operators we learned earlier, will enable us to create more complex and sophisticated Boolean expressions.\u003c/p\u003e  \u003ch2\u003eDescribe How to Use \u003ccode\u003e!\u003c/code\u003e to Negate an Expression\u003c/h2\u003e  \u003ch3\u003e\n\u003ccode\u003e!\u003c/code\u003e NOT\u003c/h3\u003e  \u003cp\u003eIn an earlier lesson, we learned about truthy and falsey values in JavaScript. The logical NOT operator (\u003ccode\u003e!\u003c/code\u003e), also called the \u003cem\u003ebang operator\u003c/em\u003e, operates on an expression, returning the opposite of the expression's truthiness. If \u003ccode\u003ex\u003c/code\u003e resolves to a truthy value, \u003ccode\u003e!x\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e. If \u003ccode\u003ex\u003c/code\u003e is falsey, \u003ccode\u003e!x\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UniqueAnotherAutomaticvectorization?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you click the Run button you'll see the bang operator in action, returning the reverse of \u003ccode\u003etruthyValue\u003c/code\u003e's truthiness. Then modify the code on line 4 to verify that it works for the falsey value as well. (Recall that you will need to create your own account to make changes.)\u003c/p\u003e  \u003ch2\u003eDescribe How to Convert an Expression to a Boolean Using \u003ccode\u003e!!\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn an earlier lesson, we passed values into the \u003ccode\u003eBoolean()\u003c/code\u003e \u003cem\u003econstructor function\u003c/em\u003e to check their truthiness. We'll learn all about constructor functions later in the course; for now, just think of \u003ccode\u003eBoolean()\u003c/code\u003e as a function that takes in some input, \u003cem\u003econstructs\u003c/em\u003e a new Boolean from that input, and outputs the newly constructed Boolean.\u003c/p\u003e  \u003cp\u003eAs a shorter way to convert any value into a Boolean, we can use two NOT operators:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/WanGrimyFunction?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eThe JavaScript engine reads from left to right: it sees the first \u003ccode\u003e!\u003c/code\u003e and looks to the right to check what we're asking it to invert (\u003ccode\u003e!truthyValue\u003c/code\u003e). It then sees the second \u003ccode\u003e!\u003c/code\u003e and looks to the right \u003cem\u003eagain\u003c/em\u003e, this time finding our \u003ccode\u003etruthyValue\u003c/code\u003e variable. At this point, the engine resolves \u003ccode\u003etruthyValue\u003c/code\u003e to \u003ccode\u003e\"This value is truthy.\"\u003c/code\u003e, which (as it tells us) is truthy. It then executes the inner \u003ccode\u003e!\u003c/code\u003e operator on it. \u003ccode\u003e!truthyValue\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, so instead of \u003ccode\u003e!!truthyValue\u003c/code\u003e JavaScript is now evaluating \u003ccode\u003e!false\u003c/code\u003e. Executing the outer \u003ccode\u003e!\u003c/code\u003e operator on \u003ccode\u003efalse\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTry inverting various values in the REPL above to get a feel for the NOT operator. See what happens when you stack a ton of them: \u003ccode\u003e!!!!!!!!!truthyValue\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can edit line 3 in \u003ccode\u003eindex.js\u003c/code\u003e \u003cem\u003eor\u003c/em\u003e add lines of code below the current code. If you add lines, when you click the Run button, the value returned in the bottom window will be the return value of the \u003cem\u003elast expression evaluated\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eOn to the next!\u003c/p\u003e  \u003ch2\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e Operators\u003c/h2\u003e  \u003ch3\u003e\n\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (AND)\u003c/h3\u003e  \u003cp\u003eThe logical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) operator takes two expressions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexpression1 \u0026amp;\u0026amp; expression2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe return value of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator is always \u003cstrong\u003eone of the two expressions\u003c/strong\u003e. If the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the first expression. If the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the second expression.\u003c/p\u003e  \u003cp\u003eAgain, if the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns that value and exits \u003cem\u003ewithout ever checking the second expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efalse \u0026amp;\u0026amp; 'Anything';\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e// 4 * 0 returns 0, which is falsey\u003cbr\u003e4 * 0 \u0026amp;\u0026amp; 'Anything';\u003cbr\u003e// =\u0026gt; 0 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e then returns whatever the second expression evaluates to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etrue \u0026amp;\u0026amp; false;\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e1 + 1 \u0026amp;\u0026amp; 'Whatever';\u003cbr\u003e// =\u0026gt; \"Whatever\"\u003cbr\u003e\u003cbr\u003e'The truthiest of truthy strings' \u0026amp;\u0026amp; 9 * 9;\u003cbr\u003e// =\u0026gt; 81 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere are three different ways the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator can be evaluated:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eLeft side\u003c/th\u003e     \u003cth\u003eRight side\u003c/th\u003e     \u003cth\u003eReturn value\u003c/th\u003e     \u003cth\u003eTruthiness of return value\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eDoesn't matter\u003c/td\u003e     \u003ctd\u003eLeft side\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eRight side\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eRight side\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003col\u003e \u003cli\u003eIf the left-side expression is falsey, the right-side expression doesn't matter at all. The \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the left side's falsey value and finishes.\u003c/li\u003e \u003cli\u003eIf the left-side expression is truthy, the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the right side's value (whether it's truthy or falsey) and finishes.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWhat this means is that the return value of the expression will be truthy if the values on either side of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e are \u003cem\u003eboth\u003c/em\u003e truthy, and falsey otherwise.\u003c/p\u003e  \u003cp\u003eIf you're feeling a little confused, that's ok. This is one of those concepts that's a bit hard to understand unless you've played around with it in code. You will have an opportunity to practice at the end of the lesson.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e||\u003c/code\u003e (OR)\u003c/h3\u003e  \u003cp\u003eThe logical OR (\u003ccode\u003e||\u003c/code\u003e) operator also takes two expressions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexpression1 || expression2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs with \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, the return value of the \u003ccode\u003e||\u003c/code\u003e operator is always \u003cstrong\u003eone of the two expressions\u003c/strong\u003e. If the first expression is truthy, \u003ccode\u003e||\u003c/code\u003e returns the value of the first expression. If the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns the value of the second expression.\u003c/p\u003e  \u003cp\u003eIf the first expression is truthy, that value is immediately returned and the second expression is never evaluated:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etrue || 'Whatever';\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e1 + 1 || 'Whatever';\u003cbr\u003e// =\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns whatever the second expression evaluates to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efalse || 'Whatever';\u003cbr\u003e// =\u0026gt; \"Whatever\"\u003cbr\u003e\u003cbr\u003e1 === 2 || 8 * 8;\u003cbr\u003e// =\u0026gt; 64\u003cbr\u003e\u003cbr\u003e'' || 'Not ' + 'an ' + 'empty ' + 'string';\u003cbr\u003e// =\u0026gt; \"Not an empty string\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere are three different ways the \u003ccode\u003e||\u003c/code\u003e operator can be evaluated:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eLeft side\u003c/th\u003e     \u003cth\u003eRight side\u003c/th\u003e     \u003cth\u003eReturn value\u003c/th\u003e     \u003cth\u003eTruthiness of return value\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eDoesn't matter\u003c/td\u003e     \u003ctd\u003eLeft side\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e     \u003ctd\u003eRight side\u003c/td\u003e     \u003ctd\u003eTruthy\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e     \u003ctd\u003eRight side\u003c/td\u003e     \u003ctd\u003eFalsey\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003col\u003e \u003cli\u003eIf the left-side expression is truthy, the right-side expression doesn't matter at all. The \u003ccode\u003e||\u003c/code\u003e operator returns the left side's truthy value and completes.\u003c/li\u003e \u003cli\u003eIf the left-side expression is falsey, the \u003ccode\u003e||\u003c/code\u003e operator returns the right side's value (regardless of whether it's truthy or falsey) and completes.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWhat this means is that the return value of the expression will be truthy if \u003cem\u003eone or both\u003c/em\u003e of the values on either side of the \u003ccode\u003e||\u003c/code\u003e are truthy, and falsey otherwise.\u003c/p\u003e  \u003ch2\u003ePracticing What We've Learned\u003c/h2\u003e  \u003cp\u003eThe REPL below contains a number of expressions that use the logical operators we've learned about in this lesson:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/EmbellishedPresentOrigin?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eBefore we get to that, however...\u003c/p\u003e  \u003ch3\u003eA Note About Comments in Code\u003c/h3\u003e  \u003cp\u003eNote that most of the lines in the REPL currently have the characters \u003ccode\u003e//\u003c/code\u003e at the front. The \u003ccode\u003e//\u003c/code\u003e is used in JavaScript to 'comment out' lines of code. Any line in your code that has \u003ccode\u003e//\u003c/code\u003e at the front will \u003cem\u003enot be interpreted\u003c/em\u003e by the JavaScript engine. This enables us to do two things: 1) include text (i.e., messages meant for humans) in our code files without JavaScript throwing an error, and 2) \u003cem\u003etemporarily\u003c/em\u003e keep lines of code from being interpreted; this  second use can be especially handy when debugging code.\u003c/p\u003e  \u003cp\u003eTry removing the \u003ccode\u003e//\u003c/code\u003e at the beginning of line 1 and clicking the Run button. Not surprisingly, JavaScript doesn't know what to do with that line of 'code'. The \u003ccode\u003e//\u003c/code\u003e enables programmers to include messages to other programmers — or to their own future selves — for documentation or clarification purposes. Don't forget to re-comment out line 1 before you move on.\u003c/p\u003e  \u003ch3\u003eInstructions\u003c/h3\u003e  \u003cp\u003eOkay, let's get some practice with logical operators. Take a look at line 4 in the REPL (the only un-commented out line). What do you think the expression will return? Think it through and come up with an answer, then click Run to check whether you're right. When you're done with the first expression, work your way down, un-commenting out each expression in turn. Be sure you think each example through and figure out your answer before clicking Run.\u003c/p\u003e  \u003cp\u003eIf you're having difficulty with the examples, try following this procedure:\u003c/p\u003e  \u003col\u003e \u003cli\u003eEvaluate each side of the operator individually: what is the \u003cem\u003ereturn value\u003c/em\u003e of each individual expression, and what is the \u003cem\u003etruthiness\u003c/em\u003e of each of those values?\u003c/li\u003e \u003cli\u003eFind the corresponding row in the appropriate table above and refer to the 'Return value' column to determine the return value of the full expression.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eFinally, once you're done with the provided expressions, experiment with some examples of your own to cement your understanding.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn the last few lessons, we've been introduced to powerful tools for creating Boolean expressions: comparison operators (equality and relational) and logical operators. With these tools, we can construct very sophisticated expressions. A bit later in the course, we will learn how to use these expressions to execute code conditionally, which will enable us to implement powerful logic in our programs.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/\"\u003eMDN\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\"\u003eLogical operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals\"\u003eReview of conditionals, comparisons, and logical operators\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"class-extension-and-inheritance","title":"Class Extension and Inheritance","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-class-extension-and-inheritance-extends\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-extends/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-extends\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-class-extension-and-inheritance-extends/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the \u003ccode\u003eextends\u003c/code\u003e keyword\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn JavaScript, as in other Object Oriented languages, we've learned\nthat we can create classes and build methods that can perform\nactions on instance data, or specific to the class. What if you have\nclasses that exhibit many of the same behaviors, such as \u003ccode\u003eCat\u003c/code\u003e, \u003ccode\u003eDog\u003c/code\u003e,\nand \u003ccode\u003eBird\u003c/code\u003e, which all have a method for \u003ccode\u003espeak\u003c/code\u003e?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  speak() {\u003cbr\u003e    return `${this.name} says woof!`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Cat {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  speak() {\u003cbr\u003e    return `${this.name} says meow!`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Bird {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  speak() {\u003cbr\u003e      return `${this.name} says squawk!`\u003cbr\u003e    }\u003cbr\u003e  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this code snippet, \u003ccode\u003eDog\u003c/code\u003e, \u003ccode\u003eCat\u003c/code\u003e, and \u003ccode\u003eBird\u003c/code\u003e all accept \u003ccode\u003ename\u003c/code\u003e and\nhave a method called \u003ccode\u003espeak()\u003c/code\u003e, thus repeating code. In JavaScript,\nwe can create \"child\" object classes that inherit methods and properties\nfrom their \"parent\" classes, allowing us to reuse some class methods while\nbuilding in additional functionality.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we'll discuss 1 way of \u003cem\u003eextending\u003c/em\u003e functionality to\nother classes.\u003c/p\u003e\n\n\u003ch2\u003eUse the \u003ccode\u003eextends\u003c/code\u003e Keyword\u003c/h2\u003e\n\n\u003cp\u003eTo get started with inheriting class functionality, we utilize the \u003ccode\u003eextends\u003c/code\u003e\nkeyword. \u003ccode\u003eextends\u003c/code\u003e is used in class declarations to create a class which\nis a \u003cem\u003echild\u003c/em\u003e of another class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Pet {\u003cbr\u003e  constructor(name, sound) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.sound = sound;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  speak() {\u003cbr\u003e    return `${this.name} says ${this.sound}!`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Dog extends Pet {\u003cbr\u003e  // inherits constructor from Pet\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Cat extends Pet {\u003cbr\u003e  // inherits constructor from Pet\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Bird extends Pet  {\u003cbr\u003e  // inherits constructor from Pet\u003cbr\u003e  fly() {\u003cbr\u003e    return `${this.name} flies away!`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet dog = new Dog(\"Shadow\", \"woof\");\u003cbr\u003elet cat = new Cat(\"Missy\", \"meow\");\u003cbr\u003elet bird = new Bird(\"Tiki\", \"squawk\");\u003cbr\u003e\u003cbr\u003edog.speak(); // Shadow says woof!\u003cbr\u003ecat.speak(); // Missy says meow!\u003cbr\u003ebird.speak(); // Tiki says squawk!\u003cbr\u003ebird.fly(); // Tiki flies away!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn addition to \u003cem\u003einheriting\u003c/em\u003e the functionality of the \u003ccode\u003ePet\u003c/code\u003e class, each \"child\"\nclass extending the functionality of the parent. For example, \u003ccode\u003eBird\u003c/code\u003e has an\nadditional method called \u003ccode\u003efly\u003c/code\u003e that is unique to it, and not present on \u003ccode\u003ePet\u003c/code\u003e.\n\u003ccode\u003eBird\u003c/code\u003e can still call \u003ccode\u003espeak()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we learned about more functionality in JavaScript that allows\nus to leverage Object Orientation concepts: class extensions and inheritance.\nWith \u003ccode\u003eextends\u003c/code\u003e we can create new classes that are capable utilizing of all the\nsame methods as its parent. Leveraging inheritance and \u003ccode\u003eextends\u003c/code\u003e is vital in\nObject Oriented programming. It keep code bases maintainable by sharing and\nreusing code in a beneficial manner.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance\"\u003eInheritance in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends\"\u003eExtends\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420\"\u003e“Super” and “Extends” In JavaScript ES6 - Understanding The Tough Parts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"filtering-arrays","title":"Filtering Arrays","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-filtering-arrays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-filtering-arrays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-filtering-arrays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain the concept of filtering an array\u003c/li\u003e \u003cli\u003eBuild our own version of JavaScript's \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e method\u003c/li\u003e \u003cli\u003eDefine what makes a function \u003cem\u003epure\u003c/em\u003e and explain why \u003cem\u003epure functions\u003c/em\u003e are often preferable to \u003cem\u003eimpure functions\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've seen the \u003ccode\u003eArray\u003c/code\u003e methods available in JavaScript to find a \u003cem\u003esingle\u003c/em\u003e element, but sometimes we want to return \u003cem\u003eall\u003c/em\u003e elements that match a certain condition. For example, we might want to search through an array and return values greater than one (\u003ccode\u003e[1, 2, 3]\u003c/code\u003e -\u0026gt; \u003ccode\u003e[2, 3]\u003c/code\u003e). In the JavaScript world, we refer to that search process as \u003cem\u003efiltering\u003c/em\u003e an array. In this lesson we're going to build our own \u003ccode\u003efilter()\u003c/code\u003e function.\u003c/p\u003e  \u003ch2\u003eFilter\u003c/h2\u003e  \u003cp\u003eLet's revisit our array of Flatbook user objects:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst users = [\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Niky',\u003cbr\u003e    lastName: 'Morgan',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Jaguar'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Tracy',\u003cbr\u003e    lastName: 'Lum',\u003cbr\u003e    favoriteColor: 'Yellow',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Josh',\u003cbr\u003e    lastName: 'Rowley',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Kate',\u003cbr\u003e    lastName: 'Travers',\u003cbr\u003e    favoriteColor: 'Red',\u003cbr\u003e    favoriteAnimal: 'Jaguar'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Avidor',\u003cbr\u003e    lastName: 'Turkewitz',\u003cbr\u003e    favoriteColor: 'Blue',\u003cbr\u003e    favoriteAnimal: 'Penguin'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Drew',\u003cbr\u003e    lastName: 'Price',\u003cbr\u003e    favoriteColor: 'Yellow',\u003cbr\u003e    favoriteAnimal: 'Elephant'\u003cbr\u003e  }\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo review, we know we can iterate over that collection and print out everyone's first name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction firstNamePrinter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    console.log(user.firstName);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirstNamePrinter(users);\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Tracy\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Kate\u003cbr\u003e// LOG: Avidor\u003cbr\u003e// LOG: Drew \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe also know how to print out only users whose favorite color is blue:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction blueFilter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user.favoriteColor === 'Blue') {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eblueFilter(users);\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Avidor \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow what if we want to filter our collection of users for those whose favorite color is red? We could define an entirely new function, \u003ccode\u003eredFilter()\u003c/code\u003e, but that seems wasteful. Instead, let's just pass in the color that we want to filter for as an argument:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction colorFilter (collection, color) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user.favoriteColor === color) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ecolorFilter(users, 'Red');\u003cbr\u003e// LOG: Kate \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNice! We've extracted some of the hard-coded logic out of the function, making it more generic and reusable. However, now we want to filter our users based on whose favorite animal is a jaguar, and our \u003ccode\u003ecolorFilter()\u003c/code\u003e function won't work. Let's abstract the function a bit further:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction filter (collection, attribute, value) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user[attribute] === value) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilter(users, 'favoriteAnimal', 'Jaguar', );\u003cbr\u003e// LOG: Niky\u003cbr\u003e// LOG: Kate\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo our function is definitely getting more abstract, but what if we wanted to filter by two attributes? We'd have to do something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction filter (collection, attribute1, value1, attribute2, value2) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (user[attribute1] === value1 \u0026amp;\u0026amp; user[attribute2] === value2) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilter(users, 'favoriteAnimal', 'Jaguar', 'favoriteColor', 'Blue');\u003cbr\u003e// LOG: Niky\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is getting slightly ridiculous by this point. That is \u003cstrong\u003eway\u003c/strong\u003e too much logic to be putting on the shoulders of our poor little filter function. Plus, now our filter will only work if we're filtering by two attributes. To fix this, we can extract the comparison logic into a separate function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction filter (collection) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (likesElephants(user)) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction likesElephants (user) {\u003cbr\u003e  return user['favoriteAnimal'] === 'Elephant';\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilter(users);\u003cbr\u003e// LOG: Drew \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat separation of concerns feels nice. \u003ccode\u003efilter()\u003c/code\u003e doesn't remotely care what happens inside \u003ccode\u003elikesElephants()\u003c/code\u003e; it simply delegates the comparison and then trusts that \u003ccode\u003elikesElephants()\u003c/code\u003e correctly returns \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. We're almost at the finish line, but there's one final abstraction we can make: right now, our \u003ccode\u003efilter()\u003c/code\u003e function can only make comparisons using \u003ccode\u003elikesElephants()\u003c/code\u003e. If we want to use a different comparison function, we'd have to rewrite \u003ccode\u003efilter()\u003c/code\u003e. However, there is another way: we can use a callback function!\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/filter-readme/maybe_theres_another_way.gif\" alt=\"Maybe there's another way.\"\u003e \u003c/p\u003e  \u003cp\u003eLet's refactor our filter function to take a callback:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst users = [\u003cbr\u003e  { firstName: 'Niky',   lastName: 'Morgan',    favoriteColor: 'Blue',   favoriteAnimal: 'Jaguar' },\u003cbr\u003e  { firstName: 'Tracy',  lastName: 'Lum',       favoriteColor: 'Yellow', favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Josh',   lastName: 'Rowley',    favoriteColor: 'Blue',   favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Kate',   lastName: 'Travers',   favoriteColor: 'Red',    favoriteAnimal: 'Jaguar' },\u003cbr\u003e  { firstName: 'Avidor', lastName: 'Turkewitz', favoriteColor: 'Blue',   favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Drew',   lastName: 'Price',     favoriteColor: 'Yellow', favoriteAnimal: 'Elephant' }\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003efunction filter (collection, cb) {\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (cb(user)) {\u003cbr\u003e      console.log(user.firstName);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilter(users, function (user) { return user.favoriteColor === 'Blue' \u0026amp;\u0026amp; user.favoriteAnimal === 'Penguin'; });\u003cbr\u003e// LOG: Josh\u003cbr\u003e// LOG: Avidor\u003cbr\u003e\u003cbr\u003efilter(users, function (user) { return user.favoriteColor === 'Yellow'; });\u003cbr\u003e// LOG: Tracy\u003cbr\u003e// LOG: Drew \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur \u003ccode\u003efilter()\u003c/code\u003e function doesn't know or care about any of the comparison logic encapsulated in the callback function. All it does is take in a collection and a callback and \u003ccode\u003econsole.log()\u003c/code\u003e out the \u003ccode\u003efirstName\u003c/code\u003e of every \u003ccode\u003euser\u003c/code\u003e object that makes the callback return \u003ccode\u003etrue\u003c/code\u003e. And because we've extracted the logic into a separate function, our \u003ccode\u003efilter\u003c/code\u003e now works regardless of how many conditions we want to filter on.\u003c/p\u003e  \u003ch3\u003ePure functions\u003c/h3\u003e  \u003cp\u003eOne final note about \u003ccode\u003efilter()\u003c/code\u003e and manipulating objects in JavaScript. We touched on this in the discussions of \u003cem\u003edestructive\u003c/em\u003e and \u003cem\u003enondestructive\u003c/em\u003e operations, but there's some function-specific terminology that's important to know. A function in JavaScript can be \u003cem\u003epure\u003c/em\u003e or \u003cem\u003eimpure\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIf a \u003cem\u003epure function\u003c/em\u003e is repeatedly invoked with the same set of arguments, the function will \u003cstrong\u003ealways return the same result\u003c/strong\u003e. Its behavior is predictable. Additionally, invoking the function has no external side-effects such as making a network or database call or altering any object(s) passed to it as an argument.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eImpure functions\u003c/em\u003e are the opposite: the return value is not predictable, and invoking the function might make network or database calls or alter any objects passed in as arguments.\u003c/p\u003e  \u003cp\u003eThis function is impure because the return value is not predictable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction randomMultiplyAndFloor () {\u003cbr\u003e  return Math.floor(Math.random() * 100);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erandomMultiplyAndFloor();\u003cbr\u003e// =\u0026gt; 53\u003cbr\u003erandomMultiplyAndFloor();\u003cbr\u003e// =\u0026gt; 66 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis one's impure because it alters the passed-in object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ada = {\u003cbr\u003e  name: 'Ada Lovelace',\u003cbr\u003e  age: 202\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction happyBirthday (person) {\u003cbr\u003e  console.log(`Happy birthday, ${person.name}! You're ${++person.age} years old!`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ehappyBirthday(ada);\u003cbr\u003e// LOG: Happy birthday, Ada Lovelace! You're 203 years old!\u003cbr\u003e\u003cbr\u003ehappyBirthday(ada);\u003cbr\u003e// LOG: Happy birthday, Ada Lovelace! You're 204 years old!\u003cbr\u003e\u003cbr\u003eada;\u003cbr\u003e// =\u0026gt; {name: \"Ada Lovelace\", age: 204} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen possible, it's generally good to avoid impure functions for the following two reasons:\u003c/p\u003e  \u003col\u003e \u003cli\u003ePredictable code is good. If you can be sure that a function will always return the same value when provided the same inputs, it makes writing tests for that function a cinch.\u003c/li\u003e \u003cli\u003eBecause pure functions don't have side effects, it makes debugging a lot easier. Imagine that our code errors out due to an array that doesn't contain the correct properties.  \u003cul\u003e \u003cli\u003eIf that array was returned from a pure function, our debugging process would be linear and well-scoped. We would first check what inputs were provided to the pure function. If the inputs are correct, that means the bug is inside our pure function. If the inputs aren't correct, then we figure out why they aren't correct. Case closed!\u003c/li\u003e \u003cli\u003eIf, however, the array is modified by impure functions, we'd have to follow the data around on a wild goose chase, combing through each impure function to see where and how the array is modified.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: The fewer places a particular object can be modified, the fewer places we have to look when debugging.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eHere's a pure take on our \u003ccode\u003erandomMultiplyAndFloor()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction multiplyAndFloor (num) {\u003cbr\u003e  return Math.floor(num * 100);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst randNum = Math.random();\u003cbr\u003e\u003cbr\u003erandNum;\u003cbr\u003e// =\u0026gt; 0.9123939589869237\u003cbr\u003e\u003cbr\u003emultiplyAndFloor(randNum);\u003cbr\u003e// =\u0026gt; 91\u003cbr\u003emultiplyAndFloor(randNum);\u003cbr\u003e// =\u0026gt; 91 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd one that returns a new object instead of mutating the passed-in object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst adaAge202 = {\u003cbr\u003e  name: 'Ada Lovelace',\u003cbr\u003e  age: 202\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction happyBirthday (person) {\u003cbr\u003e  const newPerson = Object.assign({}, person, { age: person.age + 1 });\u003cbr\u003e\u003cbr\u003e  console.log(`Happy birthday, ${newPerson.name}! You're ${newPerson.age} years old!`);\u003cbr\u003e\u003cbr\u003e  return newPerson;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst adaAge203 = happyBirthday(adaAge202);\u003cbr\u003e// LOG: Happy birthday, Ada Lovelace! You're 203 years old!\u003cbr\u003e\u003cbr\u003eadaAge202;\u003cbr\u003e// =\u0026gt; {name: \"Ada Lovelace\", age: 202}\u003cbr\u003e\u003cbr\u003eadaAge203;\u003cbr\u003e// =\u0026gt; {name: \"Ada Lovelace\", age: 203} \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eTying it all together\u003c/h2\u003e  \u003cp\u003eAs a final challenge, let's rewrite our \u003ccode\u003efilter()\u003c/code\u003e function as a pure function that returns a new array containing the filtered elements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst users = [\u003cbr\u003e  { firstName: 'Niky',   lastName: 'Morgan',    favoriteColor: 'Blue',   favoriteAnimal: 'Jaguar' },\u003cbr\u003e  { firstName: 'Tracy',  lastName: 'Lum',       favoriteColor: 'Yellow', favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Josh',   lastName: 'Rowley',    favoriteColor: 'Blue',   favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Kate',   lastName: 'Travers',   favoriteColor: 'Red',    favoriteAnimal: 'Jaguar' },\u003cbr\u003e  { firstName: 'Avidor', lastName: 'Turkewitz', favoriteColor: 'Blue',   favoriteAnimal: 'Penguin' },\u003cbr\u003e  { firstName: 'Drew',   lastName: 'Price',     favoriteColor: 'Yellow', favoriteAnimal: 'Elephant' }\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003efunction filter (collection, cb) {\u003cbr\u003e  const newCollection = [];\u003cbr\u003e\u003cbr\u003e  for (const user of collection) {\u003cbr\u003e    if (cb(user)) {\u003cbr\u003e      newCollection.push(user);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return newCollection;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst bluePenguinUsers = filter(users, function (user) { return user.favoriteColor === 'Blue' \u0026amp;\u0026amp; user.favoriteAnimal === 'Penguin'; });\u003cbr\u003e\u003cbr\u003ebluePenguinUsers;\u003cbr\u003e// =\u0026gt; [{ firstName: \"Josh\", lastName: \"Rowley\", favoriteColor: \"Blue\", favoriteAnimal: \"Penguin\" }, { firstName: \"Avidor\", lastName: \"Turkewitz\", favoriteColor: \"Blue\", favoriteAnimal: \"Penguin\" }]\u003cbr\u003e\u003cbr\u003econst yellowUsers = filter(users, function (user) { return user.favoriteColor === 'Yellow'; });\u003cbr\u003e\u003cbr\u003eyellowUsers;\u003cbr\u003e// =\u0026gt; [{ firstName: \"Tracy\", lastName: \"Lum\", favoriteColor: \"Yellow\", favoriteAnimal: \"Penguin\" }, { firstName: \"Drew\", lastName: \"Price\", favoriteColor: \"Yellow\", favoriteAnimal: \"Elephant\" }]\u003cbr\u003e\u003cbr\u003eusers.length;\u003cbr\u003e// =\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWoohoo! We successfully built a clone of JavaScript's built-in \u003ccode\u003e.filter()\u003c/code\u003e array method!\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/filter-readme/no_shortcuts.gif\" alt=\"Our journey has never been one of shortcuts or settling for less.\"\u003e \u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eNow that we've built our own version of \u003ccode\u003efilter()\u003c/code\u003e, we have a better understanding of what JavaScript's built-in \u003ccode\u003efilter()\u003c/code\u003e method is doing for us and how it works under the hood. Here's an example of what a call to \u003ccode\u003efilter()\u003c/code\u003e might look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[1, 2, 3, 4, 5].filter(function (num) { return num \u0026gt; 3; });\u003cbr\u003e// =\u0026gt; [4, 5] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe method accepts one argument, a callback function that it will invoke with each element in the array. For each element passed to the callback, if the callback's return value is \u003ccode\u003etrue\u003c/code\u003e, that element is copied into a new array. If the callback's return value is \u003ccode\u003efalse\u003c/code\u003e, the element is filtered out. After iterating over every element in the collection, \u003ccode\u003e.filter()\u003c/code\u003e returns the new array.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs we've learned in this lesson, using JavaScript's built-in \u003ccode\u003efilter()\u003c/code\u003e method enables us to write more efficient, less repetitive code. Specifically:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe no longer need to create a \u003ccode\u003efor\u003c/code\u003e or \u003ccode\u003efor ... of\u003c/code\u003e loop.\u003c/li\u003e \u003cli\u003eIn each iteration through the array, the current element is stored in a variable for us. We no longer need to access elements using their index values.\u003c/li\u003e \u003cli\u003eA new array is automatically created and returned after the iterations are complete, so we no longer need to create an empty array and push elements into it.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFinally, \u003ccode\u003eArray\u003c/code\u003e methods like \u003ccode\u003efind()\u003c/code\u003e, \u003ccode\u003efilter()\u003c/code\u003e and the other methods we will learn about in this section are \u003cem\u003eexpressive\u003c/em\u003e. As soon as we (or other developers) see that \u003ccode\u003efilter()\u003c/code\u003e is being called, we know that the code is looking for elements in an array that meet a certain condition and returning a new array containing those elements. Or if we see that \u003ccode\u003emap()\u003c/code\u003e (which we'll learn about next) is being called, we immediately know that the code is modifying the elements in an array and returning an array containing the modifed values. This makes our code easier to read and understand than if we use a generic looping construct.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"\u003eMDN — \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://javascript.tutorialhorizon.com/2016/04/24/pure-vs-impure-functions/\"\u003eTutorial Horizon —\u0026nbsp;Pure vs. Impure Functions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"html5-semantic-elements","title":"HTML5 Semantic Elements","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"HTML5-Semantic-Elements\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Semantic-Elements/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Semantic-Elements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/HTML5-Semantic-Elements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\u003cp\u003eWe have \u003ccode\u003ediv\u003c/code\u003e elements to organize and label sections of HTML. But too many \u003ccode\u003ediv\u003c/code\u003e tags makes our HTML document look cluttered and confusing. Even when we identify or classify them with specific names, it's a lot to keep track of. It would be clearer for both developers and browsers if we could use more descriptive HTML elements to arrange our content. That's where semantic elements come in. They allow us to say, \"this isn't \u003cem\u003ejust\u003c/em\u003e a division of text, it's a \u003cem\u003eheader\u003c/em\u003e.\" We'll learn more about these \u003cem\u003esemantic\u003c/em\u003e elements in this lesson.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eExplain the historical reasoning behind semantic elements\u003c/li\u003e\n\u003cli\u003eDemonstrate HTML5 semantic element use\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eExplain the Historical Reasoning Behind Semantic Elements\u003c/h2\u003e\n\u003cp\u003eWhen developers first began defining containers to structure HTML, they had only one generic element available to them: the \u003ccode\u003ediv\u003c/code\u003e. Creating complex page layouts then required dozens of \u003ccode\u003ediv\u003c/code\u003e elements that were often difficult to organize or locate within the code. HTML authors needed a way to distinguish one \u003ccode\u003ediv\u003c/code\u003e from another, which led to \u003ccode\u003eid\u003c/code\u003e and \u003ccode\u003eclass\u003c/code\u003e attributes on elements being misused in an attempt to communicate what the \u003ccode\u003ediv\u003c/code\u003e was doing. For example, a document usually has only one header, so it seemed sensible to write \u003ccode\u003ediv id=\"header\"\u003c/code\u003e as a way to say something stronger than, \"this is a text division.\" Developers wanted to say, \"this is a special division of introduction,\" but lacked the specific language to express it. They wanted those sections to have a \u003cem\u003esemantic meaning\u003c/em\u003e (more on that later). But the HTML language simply didn't have the ability to meet this need.\u003c/p\u003e\n\u003cp\u003eNevertheless, many HTML authors thought that this was a good idea and an informal standard sprang up around adding \u003ccode\u003eid\u003c/code\u003e attributes on elements to express their \"semantic meaning.\"\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"header\"\u0026gt;\u003cbr\u003e  \u0026lt;div class=\"wrapper\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen the W3C (the organization that oversees the specifications for HTML and CSS) started writing the specification for HTML5 they wanted to create new elements that would eliminate the need to label so many \u003ccode\u003ediv\u003c/code\u003e elements. The goals were to make the code more readable for developers and more descriptive for browsers. It turned out that many developers were already using the same names to label their elements, such as \u003ccode\u003eid=\"header\"\u003c/code\u003e, \u003ccode\u003eid=\"footer\"\u003c/code\u003e, \u003ccode\u003eid=\"nav\"\u003c/code\u003e, \u003ccode\u003eclass=\"article\"\u003c/code\u003e, etc. So HTML5 provided semantic elements that explicitly described those functions for developers to use instead.\u003c/p\u003e\n\u003cp\u003eWe once used to have to identify a \u003ccode\u003ediv\u003c/code\u003e as our header section.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"header\"\u0026gt;...\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we use the \u003ccode\u003eheader\u003c/code\u003e element.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;header\u0026gt;\u0026lt;/header\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhy do we call these \u003cem\u003esemantic\u003c/em\u003e elements? Semantic elements are elements that we use when the content within the element all has the same related \u003cem\u003emeaning\u003c/em\u003e. In our \u003ccode\u003eheader\u003c/code\u003e example above, all the content we would put within the \u003ccode\u003eheader\u003c/code\u003e element would relate to introductory content, such as titles or navigation.\u003c/p\u003e\n\u003ch2\u003eDemonstrate HTML5 Semantic Element Use\u003c/h2\u003e\n\u003cp\u003eLet's take a layout that uses \u003ccode\u003ediv\u003c/code\u003e elements and convert it to use semantic elements instead. This is the markup we begin with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"wrapper\"\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"header\"\u0026gt;\u003cbr\u003e     \u0026lt;div id=\"nav\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"main\"\u0026gt;\u003cbr\u003e    \u0026lt;div id=\"music\"\u0026gt;\u003cbr\u003e      \u0026lt;div id=\"rock\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;div id=\"jazz\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"aside\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"footer\"\u0026gt;...\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we'll replace each instance of a \u003ccode\u003ediv\u003c/code\u003e with a semantic element that matches the type of content we want it to contain.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"wrapper\"\u0026gt;\u003cbr\u003e  \u0026lt;header\u0026gt;\u003cbr\u003e     \u0026lt;nav\u0026gt;...\u0026lt;/nav\u0026gt;\u003cbr\u003e  \u0026lt;/header\u0026gt;\u003cbr\u003e  \u0026lt;main\u0026gt;\u003cbr\u003e    \u0026lt;section id=\"music\"\u0026gt;\u003cbr\u003e      \u0026lt;article id=\"rock\"\u0026gt;...\u0026lt;/article\u0026gt;\u003cbr\u003e      \u0026lt;article id=\"jazz\"\u0026gt;...\u0026lt;/article\u0026gt;\u003cbr\u003e    \u0026lt;/section\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e  \u0026lt;aside\u0026gt;...\u0026lt;/aside\u0026gt;\u003cbr\u003e  \u0026lt;footer\u0026gt;...\u0026lt;/footer\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that in cases where the content within the element is not semantically related or we have the need to create a generic box such as the \u003ccode\u003ewrapper\u003c/code\u003e, we can still use \u003ccode\u003ediv\u003c/code\u003e elements as we please. As a developer, keep in mind that while these elements are intended for certain content, there are no hard rules about how to configure them. You should feel comfortable configuring them in any way that makes the most sense to you and best suits your layout needs.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIf the content within an element is all semantically related, it is best practice to use the appropriate HTML5 semantic element if one applies. This cleans up our code and makes it more readable for developers and more descriptive to browsers. There are a variety of semantic elements you can use to structure your content, and you can also still use \u003ccode\u003ediv\u003c/code\u003e elements to create generic boxes or grouping elements as needed.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/1tl0aB0EUOhLMi1Xr19UCAUTCY20FRqEDv-oDGg2cTkg/edit?usp=sharing\"\u003ePresentation Slides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/embed/V28xLFEYaSQ\"\u003eHTML5 Semantic Elements Lecture Video\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://diveintohtml5.info/semantics.html#new-elements\"\u003eDive into HTML5 - Semantic Elements\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003eMDN - HTML - Element Reference\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"method-types","title":"Method Types","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-method-types\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-method-types/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-method-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-method-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize the syntactic differences between regular, static, getter and setter\nmethods\u003c/li\u003e\n\u003cli\u003eRecognize the different uses of each method type\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've seen some examples of \u003ccode\u003eclass\u003c/code\u003ees that have their own custom\nmethods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt turns out, however, there are four different types of methods we can write in\na \u003ccode\u003eclass\u003c/code\u003e: the standard 'instance' method we've seen already, \u003cem\u003estatic\u003c/em\u003e, getter\nand setter methods. Each of these behaves differently, and this variety provides\nus with flexibility in how we design the behaviors of our \u003ccode\u003eclass\u003c/code\u003ees.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we're going to briefly look at each type of method and consider\nsome use cases for each.\u003c/p\u003e\n\n\u003ch2\u003eStandard Methods\u003c/h2\u003e\n\n\u003cp\u003eMost \u003ccode\u003eclass\u003c/code\u003e methods you will see use the following, standard syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earea() {\u003cbr\u003e  return this.sideLength * this.sideLength;\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese methods are available to any instance of the \u003ccode\u003eclass\u003c/code\u003e they belong to,\nas we've seen:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet square = new Square(5);\u003cbr\u003esquare.area(); // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMethods can be called from inside other methods just like properties:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  areaMessage() {\u003cbr\u003e    return `The area of this square is ${this.area()}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003esquare.area(); // =\u0026gt; 25\u003cbr\u003esquare.areaMessage(); // =\u0026gt; LOG: The area of this square is 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the \u003ccode\u003eclass\u003c/code\u003e above, we can access \u003ccode\u003earea()\u003c/code\u003e directly, or use it to provide\ndynamic content for other methods. These methods are the most common - they act\nas the 'behaviors' of a \u003ccode\u003eclass\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003ch2\u003eStatic Methods\u003c/h2\u003e\n\n\u003cp\u003eStatic methods are \u003ccode\u003eclass\u003c/code\u003e level methods - they are not callable on instances of\na \u003ccode\u003eclass\u003c/code\u003e, only the \u003ccode\u003eclass\u003c/code\u003e itself. These are often used in 'utility' \u003ccode\u003eclass\u003c/code\u003ees -\n\u003ccode\u003eclass\u003c/code\u003ees that encapsulate a set of related methods but don't need to be\nmade into instances. For example, we could write a \u003ccode\u003eCommonMath\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e that\nstores a series of math related methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CommonMath {\u003cbr\u003e  static triple(number) {\u003cbr\u003e    return number * number * number;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  static findHypotenuse(a, b) {\u003cbr\u003e    return Math.sqrt(a * a + b * b);\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo access, these static methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet num = CommonMath.triple(3);\u003cbr\u003enum; // =\u0026gt; 27\u003cbr\u003elet c = CommonMath.findHypotenuse(3, 4);\u003cbr\u003ec; // =\u0026gt; 5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sort of \u003ccode\u003eclass\u003c/code\u003e might be useful in many different situations, but we don't\never need an \u003cem\u003einstance\u003c/em\u003e of it.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eget\u003c/code\u003e Keyword in JavaScript Class Context\u003c/h2\u003e\n\n\u003cp\u003eOften, when writing methods for a \u003ccode\u003eclass\u003c/code\u003e, we want to return information derived\nfrom that instance's properties. In the Square \u003ccode\u003eclass\u003c/code\u003e example earlier, \u003ccode\u003earea()\u003c/code\u003e\nreturns a calculation based on \u003ccode\u003ethis.sideLength\u003c/code\u003e, and \u003ccode\u003eareaMessage()\u003c/code\u003e returns a\n\u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn modern JavaScript, new syntax, \u003ccode\u003eget\u003c/code\u003e, has been introduced. The \u003ccode\u003eget\u003c/code\u003e keyword\nis used in \u003ccode\u003eclass\u003c/code\u003ees for methods which serve the specific purpose of\nretrieving data from an instance.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eget\u003c/code\u003e keyword turns a method into a 'pseudo-property', that is - it allows\nus to write a method that interacts like a property. To use \u003ccode\u003eget\u003c/code\u003e, write a\n\u003ccode\u003eclass\u003c/code\u003e method like normal, preceded by \u003ccode\u003eget\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs a result of this, \u003ccode\u003earea\u003c/code\u003e will now be available as though it is a\nproperty just like \u003ccode\u003esideLength\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet square = new Square(5);\u003cbr\u003esquare.sideLength; // =\u0026gt; 5\u003cbr\u003esquare.area; // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you try to use \u003ccode\u003ethis.area()\u003c/code\u003e, you'll receive a TypeError - \u003ccode\u003earea\u003c/code\u003e is no\nlonger considered a function!\u003c/p\u003e\n\n\u003cp\u003eThis may seem strange - you could also just write the following and achieve the\nsame result:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e    this.area = sideLength * sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is valid code, but what we've done is load our \u003ccode\u003econstructor\u003c/code\u003e with more\ncalculations.\u003c/p\u003e\n\n\u003cp\u003eThe main benefit to using \u003ccode\u003eget\u003c/code\u003e is that your \u003ccode\u003earea\u003c/code\u003e calculation isn't actually\nrun until it is accessed. The 'cost' of calculating is offset, and may not be\ncalled at all. While our computers can make short work of this example, there\nare times when we need to perform calculations that are CPU intensive, sometimes\nreferred to as a 'costly' or 'expensive' processes.\u003c/p\u003e\n\n\u003cp\u003eIf included in the \u003ccode\u003econstructor\u003c/code\u003e, an expensive process will be called every\ntime a new instance of a \u003ccode\u003eclass\u003c/code\u003e is created. When dealing with many instances,\nthis can result in decreased performance.\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003eget\u003c/code\u003e, an expensive process can be delayed - only run when we need it,\ndistributing the workload more evenly.\u003c/p\u003e\n\n\u003cp\u003eEven if your process is not expensive, using \u003ccode\u003eget\u003c/code\u003e is useful in general when\nderiving or calculating data from properties. Since properties can change,\nany values dependent on them should be calculated based on the current property\nvalues, otherwise we will run in to issues like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e    this.area = sideLength * sideLength;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003elet square = new Square(5);\u003cbr\u003esquare.area; // =\u0026gt; 25\u003cbr\u003esquare.sideLength = 10;\u003cbr\u003esquare.area; // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf \u003ccode\u003earea\u003c/code\u003e is only calculated in the beginning and \u003ccode\u003esideLength\u003c/code\u003e is then modified,\n\u003ccode\u003earea\u003c/code\u003e will no longer be accurate.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eset\u003c/code\u003e Keyword in JavaScript Class Context\u003c/h2\u003e\n\n\u003cp\u003eUsing \u003ccode\u003eget\u003c/code\u003e to create a pseudo-property is only half the story, since it is\nonly used for retrieving data from an instance. To change data, we have \u003ccode\u003eset\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eset\u003c/code\u003e keyword allows us to write a method that interacts like a property\nbeing assigned a value. By adding it in conjunction with a \u003ccode\u003eget\u003c/code\u003e, we can\ncreate a 'reassignable' pseudo-property.\u003c/p\u003e\n\n\u003cp\u003eFor example, in the previous section we used \u003ccode\u003eget\u003c/code\u003e in the \u003ccode\u003eSquare\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis allowed us to retrieve the area of a Square instance like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet square = new Square(5);\u003cbr\u003esquare.sideLength; // =\u0026gt; 5\u003cbr\u003esquare.area; // =\u0026gt; 25\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we change \u003ccode\u003esquare.sideLength\u003c/code\u003e, \u003ccode\u003esquare.area\u003c/code\u003e will update accordingly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esquare.sideLength = 10;\u003cbr\u003esquare.area; // =\u0026gt; 100\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, we can't \u003cem\u003eassign\u003c/em\u003e \u003ccode\u003earea\u003c/code\u003e a new value. To make \u003ccode\u003earea\u003c/code\u003e fully act like a\nreal property, we create both \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e methods for it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this.sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get area() {\u003cbr\u003e    return this.sideLength * this.sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set area(newArea) {\u003cbr\u003e    this.sideLength = Math.sqrt(newArea);\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can now 'set' the pseudo-property, \u003ccode\u003earea\u003c/code\u003e, and modify \u003ccode\u003ethis.sideLength\u003c/code\u003e based\non a reverse of the calculation we used in \u003ccode\u003eget\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet square = new Square(5);\u003cbr\u003esquare.sideLength; // =\u0026gt; 5\u003cbr\u003esquare.area; // =\u0026gt; 25\u003cbr\u003esquare.area = 64;\u003cbr\u003esquare.sideLength; // =\u0026gt; 8\u003cbr\u003esquare.area; // =\u0026gt; 64\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can now interact with \u003ccode\u003earea\u003c/code\u003e as though it is a modifiable property, even\nthough \u003ccode\u003earea\u003c/code\u003e is derived.\u003c/p\u003e\n\n\u003cp\u003eFrom the outside, it looks like a property is being set, but behind the scenes,\nwe can define what we want to happen, including applying conditional statements:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eset area(newArea) {\u003cbr\u003e  if (newArea \u0026gt; 0) {\u003cbr\u003e    this.sideLength = Math.sqrt(newArea)\u003cbr\u003e  } else {\u003cbr\u003e    console.warn(\"Area cannot be less than 0\");\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCreating pseudo-properties this way enables us to finely tune how data can be\nboth accessed and modified. In using \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e, we are designing the\ninterface for our \u003ccode\u003eclass\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eUsing \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e with 'Private' Properties\u003c/h4\u003e\n\n\u003cp\u003eYou may remember, though that in JavaScript, properties are exposed. That is,\nany property can be reassigned from outside. Here is where \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e\nreally shine. Although there is no official 'private' property yet,\nan underscore at the beginning of a property is commonly used to indicate that\nmethod should not be directly modified. With \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e, we can define\nthe 'public' facing methods for updating a 'private' property:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    this._sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get sideLength() {\u003cbr\u003e    this._sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set sideLength(sideLength) {\u003cbr\u003e    this._sideLength = sideLength;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA square's side can't have negative length. Now with our pseudo-property in\nplace, we write code to make sure that \u003ccode\u003e_sideLength\u003c/code\u003e is always valid, both\nwhen an instance property is created and when it is modified:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Square {\u003cbr\u003e  constructor(sideLength) {\u003cbr\u003e    if (sideLength \u0026gt; 0) {\u003cbr\u003e      this._sideLength = sideLength;\u003cbr\u003e    } else {\u003cbr\u003e      throw new Error('A Square cannot have negative side length');\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get sideLength() {\u003cbr\u003e    this._sideLength;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set sideLength(sideLength) {\u003cbr\u003e    if (sideLength \u0026gt; 0) {\u003cbr\u003e      this._sideLength = sideLength;\u003cbr\u003e    } else {\u003cbr\u003e      throw new Error('A Square cannot have negative side length');\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could always extract that duplicate code into a helper method, but the take\naway here is the design. We've designed our \u003ccode\u003eSquare\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003ees to be a little\nmore resistant to unwanted changes that might introduce bugs.\u003c/p\u003e\n\n\u003cp\u003eStepping away from \u003ccode\u003eSquares\u003c/code\u003e for a moment, let's consider an example with\n\u003ccode\u003eString\u003c/code\u003e properties. Imagine we want to build a \u003ccode\u003eStudent\u003c/code\u003e class. The class\ntakes in a students' first and last name. We are tasked with making sure\nnames do not have any non-alphanumeric characters except for those that appear\nin names. This is sometimes referred to as \u003cem\u003esanitizing\u003c/em\u003e text.\u003c/p\u003e\n\n\u003cp\u003eWith \u003ccode\u003eset\u003c/code\u003e, we can make sure that we sanitize input text both when an instance\nis created as well as later, if the property needs to change:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Student {\u003cbr\u003e  constructor(firstName, lastName) {\u003cbr\u003e    this._firstName = this.sanitize(firstName);\u003cbr\u003e    this._lastName = this.sanitize(lastName);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get firstName() {\u003cbr\u003e    return this.capitalize(this._firstName);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set firstName(firstName) {\u003cbr\u003e    this._firstName = this.sanitize(firstName);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  capitalize(string) {\u003cbr\u003e    // capitalizes first letter\u003cbr\u003e    return string.charAt(0).toUpperCase() + string.slice(1);\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  sanitize(string) {\u003cbr\u003e    // removes any non alpha-numeric characters except dash and single quotes (apostrophes)\u003cbr\u003e    return string.replace(/[^A-Za-z0-9-']+/g, '');\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet student = new Student('Carr@ol-Ann', ')Freel*ing');\u003cbr\u003estudent; // =\u0026gt; Student { _firstName: 'Carrol-Ann', _lastName: 'Freeling' }\u003cbr\u003e\u003cbr\u003estudent.firstName = 'Hea@)@(!$)ther';\u003cbr\u003estudent.firstName; // =\u0026gt; 'Heather'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this \u003ccode\u003eStudent\u003c/code\u003e class, we've set up a pseudo-property, \u003ccode\u003efirstName\u003c/code\u003e, which\nrefers to a 'private' property \u003ccode\u003e_firstName\u003c/code\u003e. We've also included a \u003ccode\u003esanitize()\u003c/code\u003e\nmethod that removes any non alpha-numeric characters except \u003ccode\u003e-\u003c/code\u003e and \u003ccode\u003e'\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBecause we are using \u003ccode\u003eset\u003c/code\u003e and a 'private' property, we can call \u003ccode\u003esanitize()\u003c/code\u003e\nwhen a \u003ccode\u003eStudent\u003c/code\u003e instance is constructed, \u003cem\u003eor\u003c/em\u003e when we try to modify\n\u003ccode\u003e_firstName\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eWhen to Use Methods Over \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAlthough \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e change the way in which we interact with a \u003ccode\u003eclass\u003c/code\u003e, \nnormal instance methods can do everything that \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e can do. So, \nwhich should we use and when? JavaScript itself is indifferent.\u003c/p\u003e\n\n\u003cp\u003eWith \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e, while we don't gain any sort of extra functionality,\nwe gain the ability to \u003cem\u003edifferentiate\u003c/em\u003e between behaviors. \u003cstrong\u003eWe can use \u003ccode\u003eget\u003c/code\u003e\nand \u003ccode\u003eset\u003c/code\u003e whenever we are handling input or output of a \u003ccode\u003eclass\u003c/code\u003e\u003c/strong\u003e. We are, \nin essence, creating the \u003cem\u003epublic interface\u003c/em\u003e of the \u003ccode\u003eclass\u003c/code\u003e. We can treat this \ninterface as a menu of sorts.. \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e methods are the ways in which \n\u003cem\u003eother\u003c/em\u003e classes and code \u003cem\u003eshould\u003c/em\u003e utilize this \u003ccode\u003eclass\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eUsing this design, all remaining methods can be considered \u003cem\u003eprivate\u003c/em\u003e. They \ndon't deal with input and output; they are only used internally as helper \nmethods.\u003c/p\u003e\n\n\u003cp\u003eIt is important to note that in JavaScript currently, we can \u003cem\u003ealways\u003c/em\u003e order \noff the menu. All \u003ccode\u003eclass\u003c/code\u003e methods and properties are exposed for use \n'publicly'. Using \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e in this way is purely design. In designing\nthis way, however, we produce better organized, easier to understand \u003ccode\u003eclass\u003c/code\u003ees.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn the Object Oriented JavaScript world, we have a variety of ways to build our\n\u003ccode\u003eclass\u003c/code\u003ees. As we continue to learn about OO JS, we will see that this\nflexibility is important - it allows us to design many \u003ccode\u003eclass\u003c/code\u003ees that work\ntogether, each serving their own specific purpose that we have defined.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\"\u003e\u003ccode\u003eget\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\"\u003estatic methods\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"how-the-web-works","title":"How The Web Works","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-how-the-web-works\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-how-the-web-works/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-how-the-web-works\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-how-the-web-works/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a client and server\u003c/li\u003e\n\u003cli\u003eExplain what an HTTP request is\u003c/li\u003e\n\u003cli\u003eExplain the nature of request and response\u003c/li\u003e\n\u003cli\u003eDefine a static site vs. dynamic site\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHow many times a day do you use the internet? How many times do you load a\ndifferent web page? Think about how many times you do this in a year! As a user,\nall you really need to know is the URL to navigate to. You don't need to concern\nyourself with what's going on behind the scenes. But if you want to be a web\ndeveloper, it's important to have some understanding of how the web works. From\nhere on out, you are no longer just a user of the internet. You are a creator of\nthe web.\u003c/p\u003e\n\n\u003ch2\u003eClient and Server\u003c/h2\u003e\n\n\u003cp\u003eSo seriously, how does this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttps://www.youtube.com/user/AdeleVEVO\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTurn into this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/request-intro.png\" alt=\"AdeleVEVO\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe internet operates based on conversations between the client (more familiarly\nknown as the browser) and the server (the code running the web site you're\ntrying to load). By typing in that URL into your browser, you (the client) are\n\u003cem\u003erequesting\u003c/em\u003e a web page. The server then receives the request, processes it, and\nsends a \u003cem\u003eresponse\u003c/em\u003e. Your browser receives that response and shows it to you.\nThese are the fundamentals of the web. Browsers send requests, and servers send\nresponses. Until today you have always been a client. Moving forward you will be\nbuilding the server. This means processing requests, creating responses, and\nsending them back to the client.\u003c/p\u003e\n\n\u003cp\u003eServers can be written using a number of different backend programming languages\n(e.g., Ruby) or frameworks (e.g., Ruby on Rails). You browser doesn't know, nor\ndoes it care, what server it talks to. How does that work? How can a server that\nwas written 15 years ago still work with a browser written 15 months or days\nago?\u003c/p\u003e\n\n\u003cp\u003eIn addition, you can use multiple clients! You can use Chrome, Safari, Internet\nExplorer, Opera, and many others. All of those browsers are able to talk to the\nsame server. Let's take a closer look at how this occurs.\u003c/p\u003e\n\n\u003ch2\u003eHTTP Overview\u003c/h2\u003e\n\n\u003cp\u003eBeing able to switch out both the server and the client happens because the way\nbrowsers and servers talk is controlled by a contract or \u003cem\u003eprotocol\u003c/em\u003e.\nSpecifically it is a protocol created by Tim Berners-Lee called the \u003cstrong\u003eH\u003c/strong\u003eyper\n\u003cstrong\u003eT\u003c/strong\u003eext \u003cstrong\u003eT\u003c/strong\u003eransfer \u003cstrong\u003eP\u003c/strong\u003erotocol or HTTP. Your server will receive requests\nfrom the browser that follow HTTP. It then responds with an HTTP response that\nall browsers are able to parse.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eHTTP\u003c/code\u003e is the language browsers speak. Every time you load a web page, you are\nmaking an \u003ccode\u003eHTTP\u003c/code\u003e request to the site's server, and the server sends back an\n\u003ccode\u003eHTTP\u003c/code\u003e response.\u003c/p\u003e\n\n\u003cp\u003eIn the example above, the client is making an \u003ccode\u003eHTTP GET request\u003c/code\u003e to YouTube's\nserver. YouTube's server then sends back a response and the client renders the\npage in the browser.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/how-the-web-works/Image_17_ComputerServer.png\" alt=\"computer server\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRequests\u003c/h2\u003e\n\n\u003ch3\u003eURI\u003c/h3\u003e\n\n\u003cp\u003eWhen you make a request on the web, how do you know where to send it?  This is\ndone through \u003cstrong\u003eU\u003c/strong\u003eniform \u003cstrong\u003eR\u003c/strong\u003eesource \u003cstrong\u003eI\u003c/strong\u003edentifiers or URIs. You've probably\nalso heard these referred to as URLs. Both are fine. Let's look at the URI we\nused up top.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://www.youtube.com/user/adelevevo\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis URI is broken into three parts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ehttp\u003c/code\u003e - the protocol\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eyoutube.com\u003c/code\u003e - the domain\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e/user/adelevevo\u003c/code\u003e - the resource\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe \u003ccode\u003eprotocol\u003c/code\u003e is the way we're sending our request. There are several different\ntypes of internet protocols (SMTP for emails, HTTPS for secure requests, FTP for\nfile transfers). To load a website, we use HTTP.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edomain name\u003c/code\u003e is a string of characters that identifies the unique location\nof the web server that hosts that particular website. This will be things like\n\u003ccode\u003eyoutube.com\u003c/code\u003e and \u003ccode\u003egoogle.com\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eresource\u003c/code\u003e is the particular part of the website we want to load. YouTube\nhas millions and millions of channels and videos, so we need to identify the\nspecific resource we want: \u003ccode\u003e/user/adelevevo\u003c/code\u003e (because we can't get Hello out of\nour heads).\u003c/p\u003e\n\n\u003cp\u003eAn analogy that works well is an apartment building. The domain is the entire\nbuilding. Within that building, though, there are hundreds of apartments. We use\nthe specific resource (also called a path) to indicate that we care about\napartment 4E. The numbering/lettering system is different for every apartment\nbuilding, just as the resources are laid out a bit differently for every\nwebsite. For example, if we search for \"URI\" using Google, the path looks like\nthis: \u003ccode\u003ehttps://www.google.com/search?q=URI\u003c/code\u003e. If we use Facebook to execute the\nsame search, it looks like this: \u003ccode\u003ehttps://www.facebook.com/search/top/?q=uri\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eHTTP Verbs\u003c/h3\u003e\n\n\u003cp\u003eWhen making a web request, in addition to the path, you also need to specify the\naction you would like the server to perform. We do this using \u003cem\u003eHTTP Verbs\u003c/em\u003e. We\ncan use the same resource for multiple actions, so it is the \u003cstrong\u003ecombination\u003c/strong\u003e of\nthe path and the HTTP verb that fully describes the request.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eGET\u003c/code\u003e requests are the most common browser requests. This just means \"hey\nserver, please GET me this resource\", i.e., load this web page. Other verbs are\nused if we want to send some data from the user to the server, or modify or\ndelete existing data. Below is a list of the available HTTP Verbs and what each\nis used for. We will learn about them a bit later:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\n\u003ctr\u003e\n    \u003cth\u003eVerb\u003c/th\u003e\n    \u003cth\u003eDescription\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eHEAD\u003c/td\u003e\n    \u003ctd\u003eAsks for a response like a GET but without the body\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eGET\u003c/td\u003e\n    \u003ctd\u003eRetrieves a representation of a resource\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ePOST\u003c/td\u003e\n    \u003ctd\u003eSubmits data to be processed in the body of the request\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ePUT\u003c/td\u003e\n    \u003ctd\u003eUploads a representation of a resource in the body of the request\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDELETE\u003c/td\u003e\n    \u003ctd\u003eDeletes a specific resource\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eTRACE\u003c/td\u003e\n    \u003ctd\u003eEchoes back the received request\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eOPTIONS\u003c/td\u003e\n    \u003ctd\u003eReturns the HTTP methods the server supports\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eCONNECT\u003c/td\u003e\n    \u003ctd\u003eConverts the request to a TCP/IP tunnel (generally for SSL)\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ePATCH\u003c/td\u003e\n    \u003ctd\u003eApply a partial modification of a resource\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3\u003eRequest Format\u003c/h3\u003e\n\n\u003cp\u003eOur client so far has made a request to YouTube's server. In this case, a\nrequest to \u003ccode\u003e/user/adelevevo\u003c/code\u003e. The server then responds with all the code\nassociated with that resource (everything between \u003ccode\u003e\u0026lt;!doctype html\u0026gt;\u003c/code\u003e and\n\u003ccode\u003e\u0026lt;/html\u0026gt;\u003c/code\u003e), including all images, CSS files, JavaScript files, videos, music,\netc.\u003c/p\u003e\n\n\u003cp\u003eWhen the client makes a request, it includes other items besides just the URL in\nthe \"headers.\" The request header contains all the information the server needs\nin order to fulfill the request: the type of request, the resource (path), and\nthe domain, as well as some other metadata. The request header would look\nsomething like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/request-header.png\" alt=\"request header\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eResponses\u003c/h2\u003e\n\n\u003cp\u003eOnce your server receives the request, it will do some processing (run code you\nwrote!) and then send a response back. The server's response is separated into\ntwo sections: the headers and the body.\u003c/p\u003e\n\n\u003cp\u003eThe server's response headers look something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/response-headers.png\" alt=\"response header\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe headers contain all of the metadata about the response. This includes things\nlike content-length (how big is my response) and what type of content it is. The\nheaders also include the status code of the response.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003ebody\u003c/em\u003e of the response is what you see rendered on the page. It is all of\nthat HTML/CSS that you see! Most of the data of a response is in the body, not\nin the headers.\u003c/p\u003e\n\n\u003ch3\u003eStatus Codes\u003c/h3\u003e\n\n\u003cp\u003eThe primary way that a human user knows that a web request was successful is\nthat the page loads without any errors. However, you can also tell a request was\nsuccessful if you see that the response header's status code is \u003ccode\u003e200\u003c/code\u003e. That code\ntells the \u003cem\u003ebrowser\u003c/em\u003e that the request was successfully received. You've probably\nseen another common status code, \u003ccode\u003e404\u003c/code\u003e. This means \"file not found.\"\u003c/p\u003e\n\n\u003cp\u003eThe HTTP protocol has an agreed upon contract for different \"status codes\" that\nare used to let the browser know the status of a request. A status code is a\n3-digit integer where the first digit represents the class of the response, and\nthe remaining two digits represent a specific status.\u003c/p\u003e\n\n\u003cp\u003eThere are 5 primary values that the first digit can take:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e1xx: Informational (request received and continuing process)\u003c/li\u003e\n\u003cli\u003e2xx: Success (request successfully received, understood, and accepted)\u003c/li\u003e\n\u003cli\u003e3xx: Redirection (further action must be taken to complete request)\u003c/li\u003e\n\u003cli\u003e4xx: Client Error (request contains bad syntax and can't be completed)\u003c/li\u003e\n\u003cli\u003e5xx: Server Error (server couldn't complete request)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere are a number of other status codes within each category and it's good to\nget familiar with them. You can see a full \u003ca href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\"\u003elist of status codes on\nWikipedia\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eStatic vs. Dynamic Websites\u003c/h2\u003e\n\n\u003cp\u003eIt's important to note that there are two different types of websites: static\nand dynamic. A \u003ccode\u003estatic\u003c/code\u003e website is one that doesn't change unless a developer\nopens up an HTML file and modifies the content of that file. \u003ccode\u003eDynamic\u003c/code\u003e websites\nare sites where the content changes based on user input (e.g. Facebook, Twitter,\nYelp, etc.). Every time you visit the site, the content you see is most likely\ndifferent than the last time you visited because someone else gave a review of\nthat restaurant, or sent out a new tweet, or commented on that image you liked.\u003c/p\u003e\n\n\u003cp\u003eIt can be helpful to think of static sites as \"websites\" and dynamic sites as\n\"web apps\", although there is no official definition of either term or the\ndifference between them. The terms provide a convenient way to distinguish in a\nnon-technical way between sites with static vs. dynamic content.\u003c/p\u003e\n\n\u003cp\u003eThe flow of request and response is slightly different for a static website than\nfor a dynamic web app. When the client wants to load a static site, the client\nmakes a request, and the server finds the file on a disk and sends it back. Done\nand Done.\u003c/p\u003e\n\n\u003cp\u003eIt gets a little bit more complex with a web app. The client makes a request,\nthe server runs application code (backend code written using something like\nRuby), and returns a dynamically generated response.\u003c/p\u003e\n\n\u003ch2\u003eVideo Review\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=gI9wqEDPiY0\"\u003eHow the Web Works, Part 1\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"context-and-explicit-setting","title":"Context and Explicit Setting","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-context-and-explicit-setting\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-explicit-setting/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-explicit-setting\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-and-explicit-setting/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplicitly override context with \u003ccode\u003ecall\u003c/code\u003e and \u003ccode\u003eapply\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eExplicitly lock context for a function with \u003ccode\u003ebind\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we learned that when we invoke functions JavaScript\nwill make a context available inside the function. That context will be set to\n\"whatever's to the left of the dot\" or, when there's nothing to the left of the dot, the global object.\u003c/p\u003e\n\n\u003cp\u003eJavaScript provides other means for specifying what \u003cem\u003ewe\u003c/em\u003e want the context to\nbe. These are the \u003cem\u003eexplicit\u003c/em\u003e methods of setting execution context: \u003ccode\u003ecall\u003c/code\u003e,\n\u003ccode\u003eapply\u003c/code\u003e, and \u003ccode\u003ebind\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eExplicitly Override Context with \u003ccode\u003ecall\u003c/code\u003e and \u003ccode\u003eapply\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe methods on functions called \u003ccode\u003ecall\u003c/code\u003e and \u003ccode\u003eapply\u003c/code\u003e allow us to override the\n\u003cem\u003eexecution context\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's think back to a previous lesson and recall working with records. We'll\ninvoke the functions in a familiar way, but also show how we could achieve the\nequivalent behavior using \u003ccode\u003ecall\u003c/code\u003e or \u003ccode\u003eapply\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet asgardianBrothers = [\u003cbr\u003e  {\u003cbr\u003e    firstName: \"Thor\",\u003cbr\u003e    familyName: \"Odinsson\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: \"Loki\",\u003cbr\u003e    familyName: \"Laufeysson-Odinsson\"\u003cbr\u003e  }\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003efunction intro(person, line) {\u003cbr\u003e  return `${person.firstName} ${person.familyName} says: ${line}`\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction introWithContext(line){\u003cbr\u003e  return `${this.firstName} ${this.familyName} says: ${line}`\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet phrase = \"I like this brown drink very much, bring me another!\"\u003cbr\u003eintro(asgardianBrothers[0], phrase) //=\u0026gt; Thor Odinsson says: I like this brown drink very much, bring me another!\u003cbr\u003eintro(asgardianBrothers[0], phrase) === introWithContext.call(asgardianBrothers[0], phrase) //=\u0026gt; true\u003cbr\u003eintro(asgardianBrothers[0], phrase) === introWithContext.apply(asgardianBrothers[0], [phrase]) //=\u0026gt; true\u003cbr\u003e\u003cbr\u003elet complaint = \"I was falling for thirty minutes!\"\u003cbr\u003eintro(asgardianBrothers[1], complaint) === introWithContext.call(asgardianBrothers[1], complaint) //=\u0026gt; true\u003cbr\u003eintro(asgardianBrothers[1], complaint) === introWithContext.apply(asgardianBrothers[1], [complaint]) //=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we first wrote a record-oriented program, we wrote functions in the style\nof \u003ccode\u003eintro\u003c/code\u003e. They took the record \u003cem\u003eas an argument\u003c/em\u003e. In fact, if we look at the\n\u003ccode\u003esolution\u003c/code\u003e branch for the previous lesson, we'll see that multiple functions\nhave the same first parameter: \u003ccode\u003eemployee\u003c/code\u003e, the record. Your solution probably\nhas a similar repetition.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createTimeInEvent(employee, dateStamp){ /* */ }\u003cbr\u003efunction createTimeOutEvent(employee, dateStamp){ /* */ }\u003cbr\u003efunction hoursWorkedOnDate(employee, soughtDate){ /* */ }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we told JavaScript that instead of the record being a \u003cem\u003eparameter\u003c/em\u003e (in\naddition to a phrase), it could be assumed as a \u003cem\u003econtext\u003c/em\u003e and thus accessible\nvia \u003ccode\u003ethis\u003c/code\u003e. That's what we're doing with the function \u003ccode\u003eintroWithContext\u003c/code\u003e as\ninvoked with either \u003ccode\u003ecall\u003c/code\u003e or \u003ccode\u003eapply\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eintroWithContext\u003c/code\u003e function expects only a catchphrase as an argument. Both \u003ccode\u003ecall\u003c/code\u003e and\n\u003ccode\u003eapply\u003c/code\u003e take a \u003ccode\u003ethisArg\u003c/code\u003e argument as their first argument (see their\ndocumentation for further clarification): that argument becomes the \u003ccode\u003ethis\u003c/code\u003e\n\u003cem\u003einside\u003c/em\u003e the function.  In the case of \u003ccode\u003ecall\u003c/code\u003e, anything after the \u003ccode\u003ethisArg\u003c/code\u003e\ngets passed to the function like arguments inside of a \u003ccode\u003e()\u003c/code\u003e. In the case of\n\u003ccode\u003eapply\u003c/code\u003e, the contents in the \u003ccode\u003eArray\u003c/code\u003e get destructured and passed to the\nfunction like arguments inside of a \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eES6 ALERT\u003c/strong\u003e: Some might wonder: if we have destructuring of \u003ccode\u003eArray\u003c/code\u003es, why\ndo we need both \u003ccode\u003ecall\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003eapply\u003c/code\u003e since a destructured \u003ccode\u003eArray\u003c/code\u003e, as\nrequired by \u003ccode\u003eapply\u003c/code\u003e could simply be destructured and fed to \u003ccode\u003ecall\u003c/code\u003e.\nDestructuring is a relatively new arrival to JavaScript, so before then\nJavaScript had two separate methods.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eExplicitly Lock Context For a Function With \u003ccode\u003ebind\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eLet's suppose that we wanted to create the \u003ccode\u003eintroWithContext\u003c/code\u003e function, but\nhave it permanently bound to \u003ccode\u003easgardianBrothers[0]\u003c/code\u003e. As the adjective \"bound\"\nsuggests, we use \u003ccode\u003ebind\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet asgardianBrothers = [\u003cbr\u003e  {\u003cbr\u003e    firstName: \"Thor\",\u003cbr\u003e    familyName: \"Odinsson\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: \"Loki\",\u003cbr\u003e    familyName: \"Laufeysson-Odinsson\"\u003cbr\u003e  }\u003cbr\u003e]\u003cbr\u003efunction introWithContext(line){\u003cbr\u003e  return `${this.firstName} ${this.familyName} says: ${line}`\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet thorIntro = introWithContext.bind(asgardianBrothers[0])\u003cbr\u003ethorIntro(\"Hi, Jane\") //=\u0026gt; Thor Odinsson says: Hi, Jane\u003cbr\u003ethorIntro(\"I love snakes\") //=\u0026gt; Thor Odinsson says: I love snakes\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ebind\u003c/code\u003e method \u003cstrong\u003e\u003cem\u003ereturns a function that needs to be called\u003c/em\u003e\u003c/strong\u003e, but\nwherever the function that \u003ccode\u003ebind\u003c/code\u003e was called on had a \u003ccode\u003ethis\u003c/code\u003e reference, the\n\u003ccode\u003ethis\u003c/code\u003e is \"hard set\" to what was passed into \u003ccode\u003ebind\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo sum up the explicit overrides:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExecution context is set in a function by invoking \u003ccode\u003ecall\u003c/code\u003e on the function\nand passing, as the first argument, a \u003ccode\u003ethisArg\u003c/code\u003e which is accessed via \u003ccode\u003ethis\u003c/code\u003e\nin the function. Additional parameters to the function are listed after \u003ccode\u003e,\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eExecution context is set in a function by invoking \u003ccode\u003eapply\u003c/code\u003e on the function\nand passing, as first argument, a \u003ccode\u003ethisArg\u003c/code\u003e which is accessed via \u003ccode\u003ethis\u003c/code\u003e in\nthe function. Additional parameters to the function are stored in the\nsecond argument: an \u003ccode\u003eArray\u003c/code\u003e containing arguments to the function.\u003c/li\u003e\n\u003cli\u003eExecution context can be locked in a function by invoking \u003ccode\u003ebind\u003c/code\u003e on it and\npassing it a \u003ccode\u003ethisArg\u003c/code\u003e. The \u003ccode\u003ebind\u003c/code\u003e function makes a copy of the\nfunctionality of its function but with all the \u003ccode\u003ethis\u003c/code\u003e stuff locked in place\nand returns that function. That \u003cem\u003enew\u003c/em\u003e function can have arguments passed to it\nduring its call with \u003ccode\u003e()\u003c/code\u003e as usual.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/apply\"\u003e\u003ccode\u003eapply\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"\u003e\u003ccode\u003ebind\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"video-music-library-cli-review","title":"Video: Music Library CLI Review","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oo-ruby-video-review-music-library-cli\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-music-library-cli\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-music-library-cli/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eThis video lesson uses a review of the Music Libray CLI lab as the basis for a comprehensive look at Object Oriented Ruby. Please do the lab before watching this video to get the most out of it. \u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate classes and add class methods for persisting and tracking instances\u003c/li\u003e \u003cli\u003eDefine find\u003cem\u003eby\u003c/em\u003ename class method to find instance with a specific name\u003c/li\u003e \u003cli\u003eAbstract methods to a module to avoid repetitive code\u003c/li\u003e \u003cli\u003eSeparate class and instance methods into separate namespaced modules\u003c/li\u003e \u003cli\u003eUse getter methods to expose class variables\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003eextended\u003c/code\u003e hook to extend class variables from modules\u003c/li\u003e \u003cli\u003eDefine a module with the \u003ccode\u003ecreate_by_name\u003c/code\u003e method to create a new instance of a class\u003c/li\u003e \u003cli\u003eAdd setter methods to associate objects to each other\u003c/li\u003e \u003cli\u003eDefine and map out our associations\u003c/li\u003e \u003cli\u003eExplain builder mixin and module patterns\u003c/li\u003e \u003c/ul\u003e  \u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/iClea2crypU?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e","frontPage":false},{"exportId":"introduction-to-scope","title":"Introduction to Scope","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-principles-scope-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain in general terms what the execution context is.\u003c/li\u003e \u003cli\u003eDescribe the difference between global- and function-scoped code.\u003c/li\u003e \u003cli\u003eUnderstand how block scoping affects variables declared with \u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003e\u003cem\u003eScope\u003c/em\u003e is, in short, the concept of \u003cstrong\u003ewhere something is available\u003c/strong\u003e. In the case of JavaScript, it has to do with where declared variables and methods are available within our code.\u003c/p\u003e  \u003cp\u003eScope is a ubiquitous concept in programming and one of the most misunderstood principles in JavaScript, frustrating even seasoned engineers. Not understanding how scope works will lead to pain. Just ask this guy:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-readme/telescope_fail.gif\" alt=\"\"\u003e\u003c/p\u003e  \u003ch2\u003eLet's talk about Slack, baby\u003c/h2\u003e  \u003cp\u003eAs the newest engineer at Flatbook, you have access to the company's Slack team. The Slack team is organized into channels, some of which are company-wide, such as the main \u003ccode\u003e#general\u003c/code\u003e channel, and some of which are used by individual teams for intra-team communication, such as \u003ccode\u003e#education\u003c/code\u003e, \u003ccode\u003e#engineering\u003c/code\u003e, and \u003ccode\u003e#marketing\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eEach channel forms its own \u003cem\u003escope\u003c/em\u003e, meaning that its messages are only visible to those with access to the channel. Within \u003ccode\u003e#engineering\u003c/code\u003e, you can interact with the other members of your team, referring and responding to messages that they send. However, you can't see any of the messages posted inside \u003ccode\u003e#marketing\u003c/code\u003e —\u0026nbsp;that's a different scope that you don't have access to.\u003c/p\u003e  \u003cp\u003eThe same exact principle of distinct scopes exists in JavaScript, and it has to do with where declared variables and functions are visible.\u003c/p\u003e  \u003ch2\u003eExecution contexts\u003c/h2\u003e  \u003cp\u003eJust as every message on Slack is sent in a channel, every piece of JavaScript code is run in an \u003cem\u003eexecution context\u003c/em\u003e. In a Slack channel, we have access to all of the messages sent in that channel; we can send a message that references any of the other messages posted in the same channel. Similarly, in a JavaScript execution context, we have access to all of the variables and functions declared in that context. Within an execution context, we can write an expression that references a variable or invokes a function declared in the same context.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-readme/execution_context_and_scope_1.png\" alt=\"Execution context and scope\"\u003e\u003c/p\u003e  \u003cp\u003eUp to this point, much of the JavaScript code we've written has lived in the \u003cem\u003eglobal execution context\u003c/em\u003e, the context that implicitly wraps all of the JavaScript code in a project. Variables and functions declared in the global execution context —\u0026nbsp;in the \u003cem\u003eglobal scope\u003c/em\u003e —\u0026nbsp;are accessible everywhere in your JavaScript code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// 'myFunc' is declared in the global scope and available everywhere in your code:\u003cbr\u003efunction myFunc () {\u003cbr\u003e  return 42;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e// 'myVar' is able to reference and invoke 'myFunc' because both are declared in the same scope (the global execution context):\u003cbr\u003econst myVar = myFunc() * 2;\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// =\u0026gt; 84 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-readme/execution_context_and_scope_2.png\" alt=\"Execution context and scope\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eTop Tip\u003c/em\u003e\u003c/strong\u003e: If a variable or function is \u003cstrong\u003enot\u003c/strong\u003e declared inside a function or block, it's in the global execution context.\u003c/p\u003e  \u003ch2\u003eFunction scope\u003c/h2\u003e  \u003cp\u003eWhen we declare a new function and write some code in the function body, we're no longer in the global execution context. The function creates a new execution context with its own scope. Inside the function body, we can reference variables and functions declared in the function's scope:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction myFunc () {\u003cbr\u003e  const myVar = 42;\u003cbr\u003e\u003cbr\u003e  return myVar * 2;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003emyFunc();\u003cbr\u003e// =\u0026gt; 84 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, from outside the function, we can't reference anything declared inside of it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction myFunc () {\u003cbr\u003e  const myVar = 42;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003emyVar * 2;\u003cbr\u003e// Uncaught ReferenceError: myVar is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe function body creates its own scope. It's like a separate channel on Slack —\u0026nbsp;only the members of that channel can read the messages sent in it.\u003c/p\u003e  \u003ch2\u003eBlock scope\u003c/h2\u003e  \u003cp\u003eA block statement also creates its own scope... kind of.\u003c/p\u003e  \u003cp\u003eVariables declared with \u003ccode\u003evar\u003c/code\u003e are \u003cstrong\u003enot\u003c/strong\u003e block-scoped:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (true) {\u003cbr\u003e  var myVar = 42;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// =\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, variables declared with \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e \u003cstrong\u003eare\u003c/strong\u003e block-scoped:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (true) {\u003cbr\u003e  const myVar = 42;\u003cbr\u003e\u003cbr\u003e  let myOtherVar = 9001;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// Uncaught ReferenceError: myVar is not defined\u003cbr\u003e\u003cbr\u003emyOtherVar;\u003cbr\u003e// Uncaught ReferenceError: myOtherVar is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is yet another reason to \u003cstrong\u003enever use \u003ccode\u003evar\u003c/code\u003e\u003c/strong\u003e. As long as you stick to declaring variables with \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e, what happens in block stays in block.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/scope-readme/what_happens_here_stays_here.gif\" alt=\"Remember, what happens here stays here.\"\u003e\u003c/p\u003e  \u003ch2\u003eThe global gotcha\u003c/h2\u003e  \u003cp\u003eIn a perfect world, you'd always remember to declare new variables with \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e, and you'd never run into any weird scoping issues. However, it's inevitable that at some point you're going to forget the \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e and accidentally do something like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efirstName = 'Ada'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVariables created without a \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003evar\u003c/code\u003e keyword are \u003cstrong\u003ealways globally-scoped\u003c/strong\u003e, regardless of where they sit in your code. If you create one inside of a block, it's still available globally:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (true) {\u003cbr\u003e  lastName = 'Lovelace';\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elastName;\u003cbr\u003e// =\u0026gt; \"Lovelace\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you create one inside of a function —\u0026nbsp;wait for it —\u0026nbsp;it's still available globally:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction bankAccount () {\u003cbr\u003e  secretPassword = 'il0v3pupp135';\u003cbr\u003e\u003cbr\u003e  return 'bankAccount() function invoked!';\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ebankAccount();\u003cbr\u003e// =\u0026gt; \"bankAccount() function invoked!\"\u003cbr\u003e\u003cbr\u003esecretPassword;\u003cbr\u003e// =\u0026gt; \"il0v3pupp135\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOh no; our super secret password has leaked into the global scope and is available everywhere! Declaring global variables and functions should only be used as a last resort if you absolutely need access to something \u003cstrong\u003eeverywhere\u003c/strong\u003e in your program. In general, it's best practice to make variables and functions available only where they're needed —\u0026nbsp;and nowhere else. Making a variable available in places that shouldn't have access to it can only lead to bad things and make your debugging process more complex. The more pieces of code that can access a given variable, the more places you have to check for bugs if/when that variable contains an unexpected value.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eSo, to sum up our tricks for taming the scope monster:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAlways use \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e to declare variables.\u003c/li\u003e \u003cli\u003eKeep in mind that every function creates its own scope, and any variables or functions you declare inside of the function will not be available outside of it.\u003c/li\u003e \u003cli\u003eFor Dijkstra's sake, \u003cstrong\u003e\u003cem\u003ealways use \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e to declare variables\u003c/em\u003e\u003c/strong\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/scope\"\u003eScope\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#Function_scope\"\u003eFunctions —\u0026nbsp;Function scope\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"html-iframes","title":"HTML IFrames","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-iframes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-iframes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-iframes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-iframes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eSome sites let us use \u003cem\u003etheir\u003c/em\u003e creations in \u003cem\u003eour\u003c/em\u003e HTML documents. We're sure\nyou've noticed how many pages have Google maps built into them. The HTML tag\nthat lets us put someone else's web page \u003cem\u003einside\u003c/em\u003e our page is the \u003ccode\u003eiframe\u003c/code\u003e tag.\nWe'll explore it in this lesson.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe how \u003ccode\u003eiframe\u003c/code\u003e elements work\u003c/li\u003e\n\u003cli\u003eState the \u003ccode\u003eiframe\u003c/code\u003e attributes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eDescribe How \u003ccode\u003eiframe\u003c/code\u003e Elements Work\u003c/h2\u003e\n\n\u003cp\u003eWe can display HTML from other pages by using an \u003ccode\u003eiframe\u003c/code\u003e tag. The \u003ccode\u003eiframe\u003c/code\u003e\ncreates a window inside the page where this \"shared\" information appears.\u003c/p\u003e\n\n\u003cp\u003eAn \u003ccode\u003eiframe\u003c/code\u003e's \u003ccode\u003esrc\u003c/code\u003e attribute points to the location of the shared material.\nExamples are a custom search bar or YouTube video.\u003c/p\u003e\n\n\u003cp\u003eHere's an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003ciframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d335994.89219194185!2d2.0673752159642937!3d48.8589713267984!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x47e66e1f06e2b70f%3A0x40b82c3688c9460!2sParis%2C+France!5e0!3m2!1sen!2sus!4v1457911182825\" width=\"600\" height=\"450\" frameborder=\"0\" style=\"border: 0;\" allowfullscreen=\"\"\u003e\n\u003c/iframe\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d335994.89219194185!2d2.0673752159642937!3d48.8589713267984!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x47e66e1f06e2b70f%3A0x40b82c3688c9460!2sParis%2C+France!5e0!3m2!1sen!2sus!4v1457911182825\" width=\"600\" height=\"450\" frameborder=\"0\" style=\"border: 0;\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003ch2\u003eSome Important Iframe Attributes\u003c/h2\u003e\n\n\u003ch3\u003e\u003ccode\u003esrc\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eiframe\u003c/code\u003e element has one required attribute: \u003ccode\u003esrc\u003c/code\u003e. The \u003ccode\u003esrc\u003c/code\u003e attribute takes a\nURL (\u003ccode\u003ehttp://example.com/....\u003c/code\u003e) and displays the page requested.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e allow us to control the size of the \u003ccode\u003eiframe\u003c/code\u003e that we'd\nlike to display. Depending on the website that you are using in your \u003ccode\u003eiframe\u003c/code\u003e,\nit might have a size built in, but to be safe you always want to specify a\nsize. It's worth noting that if you know CSS, you can control height and width\nthere as well.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eframeborder\u003c/code\u003e and \u003ccode\u003estyle\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eIn earlier HTML versions, \u003ccode\u003eiframe\u003c/code\u003es were put inside of borders by default.\nMany people found that ugly. The \u003ccode\u003eframeborder\u003c/code\u003e allowed us to turn the border\noff.  \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eframeborder\u003c/code\u003e attribute is considered \u003cem\u003edeprecated\u003c/em\u003e, meaning \"likely to be\nremoved from the standard.\" In modern browsers, we can control borders  using\nCSS, as with our example, \u003ccode\u003estyle=\"border:0\"\u003c/code\u003e. You might not be familiar with CSS\nyet. For the time being, feel free to simply add this attribute.\u003c/p\u003e\n\n\u003cp\u003eGoogle and sites like YouTube still provide a \u003ccode\u003eframeborder\u003c/code\u003e attribute in their\nembedded map examples. We see this appear often in \u003ccode\u003eiframe\u003c/code\u003e links as providers\ntry to support \u003cem\u003eas many browsers as possible\u003c/em\u003e. It's important to understand what\nit means, but you probably won't need to write it much.  If you do, you'll want\nto set both \u003ccode\u003eframeborder=\"0\"\u003c/code\u003e AND \u003ccode\u003estyle=\"border:0\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eallowfullscreen\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eLike the \u003ccode\u003erequired\u003c/code\u003e attribute for HTML form elements, \u003ccode\u003eallowfullscreen\u003c/code\u003e is built\ninto HTML5. The \u003ccode\u003eallowfullscreen\u003c/code\u003e attribute uses a JavaScript method called\n\u003ccode\u003erequestFullScreen()\u003c/code\u003e to send the \u003ccode\u003eiframe\u003c/code\u003e to full screen. If \u003ccode\u003eallowfullscreen\u003c/code\u003e\nisn't included, the element can't be placed into full screen mode. It's\nimportant to be able to understand this attribute and realize that you can't get\naround any restrictions unless the \u003cem\u003eprovider\u003c/em\u003e wants you to. For more details\nvisit \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\"\u003eMDN\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIframes are powerful tools that allow us to show content from one website\nwithin a different site. You can put any website you'd like in an \u003ccode\u003eiframe\u003c/code\u003e, but\ncertain sites make more sense than others. Search or mapping sites in \u003ccode\u003eiframe\u003c/code\u003es\nare the most frequently used. However, we've seen many inventive uses of\n\u003ccode\u003eiframe\u003c/code\u003es!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/embed/eiCtXc2YMKc?rel=0\"\u003eHTML Forms and Iframes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/115ECvsMyDnFBcc-Rvb4Jn876JhOycXxKVN6sv7OiJ1Y/edit?usp=sharing\"\u003ePresentation Slides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\"\u003eMDN - HTML - Iframe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developers.google.com/maps/documentation/embed/guide\"\u003eGoogle Maps iframe documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"arrays-and-objects-what-is-really-going-on","title":"Arrays and Objects - What is Really Going On?","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-arrays-objects-what-is-really-going-on\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-arrays-objects-what-is-really-going-on\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-arrays-objects-what-is-really-going-on/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize Arrays are Objects\u003c/li\u003e \u003cli\u003eRecognize that many other things in JavaScript are Objects\u003c/li\u003e \u003cli\u003eTake a deeper look at Objects\u003c/li\u003e \u003cli\u003eIntroduce \u003ccode\u003ethis\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIntroduce Prototypal Inheritance\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSo far, we've seen that both Arrays and Objects can store things inside them, including \u003cem\u003eother\u003c/em\u003e Arrays and Objects. We think this is pretty cool! You can use data to represent all sorts of things using nested data structures.\u003c/p\u003e  \u003cp\u003eWe'll soon see, however, that there is more going on. In this lesson, we're going to briefly explore what's really going on with Arrays and Objects behind the scenes.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Before we dive in too deep — some of the topics we will touch on in this lesson will be covered in more depth later on in this course. Do not feel that you need to fully understand concepts like context and prototypes. As you've already proven, data structures can be useful to us, even if we haven't fully understood them.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eArrays are... Objects in JavaScript?\u003c/h2\u003e  \u003cp\u003eIf you recall from the previous lessons on functions, in JavaScript, functions are considered \u003cem\u003efirst-class\u003c/em\u003e. This means that, like data values, they can be used as arguments in other functions and assigned to variables. It also means you can store functions \u003cem\u003ein\u003c/em\u003e Arrays and Objects. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst phrases = {\u003cbr\u003e  greeting: \"Hello there!\",\u003cbr\u003e  time: () =\u0026gt; {\u003cbr\u003e    const currentTime = new Date();\u003cbr\u003e    return `The time is ${currentTime.getHours()}:${currentTime.getMinutes()}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ephrases.greeting;\u003cbr\u003e// =\u0026gt; \"Hello there!\"\u003cbr\u003ephrases.time();\u003cbr\u003e// =\u0026gt; \"The time is 16:51\" (or whatever time it is currently on a 24-hour clock) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we've stored a function in an Object, and then called that function with \u003ccode\u003ephrases.time()\u003c/code\u003e. Let's break that down — we first call the \u003ccode\u003ephrases\u003c/code\u003e object. This is followed by a dot, \u003ccode\u003e.\u003c/code\u003e, then the key \u003ccode\u003etime\u003c/code\u003e. This key points to a value — a function expression. Adding parentheses, \u003ccode\u003e()\u003c/code\u003e, executes that function expression.\u003c/p\u003e  \u003cp\u003eNow, hold on a moment — we've seen this dot syntax before, but with Arrays:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst listOfGoodDogs = [\"Peach\", \"Harpo\", \"Emma\"];\u003cbr\u003e\u003cbr\u003elistOfGoodDogs.map((dog) =\u0026gt; console.log(dog));\u003cbr\u003e// LOG: Peach\u003cbr\u003e// LOG: Harpo\u003cbr\u003e// LOG: Emma \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we've called \u003ccode\u003emap\u003c/code\u003e on our array, \u003ccode\u003elistOfGoodDogs\u003c/code\u003e, and passed in a callback function to log each element in the Array. As with \u003ccode\u003etime\u003c/code\u003e in the previous example, \u003ccode\u003emap\u003c/code\u003e is acting like an Object key pointing to a function expression.\u003c/p\u003e  \u003cp\u003eWhy does this work? Well... it is because Arrays \u003cem\u003eare\u003c/em\u003e Objects in JavaScript. Lots of things are Objects, actually. Notice in the two previous examples, we used the dot syntax for other things. In the first code snippet, we assigned a \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003ecurrentTime\u003c/code\u003e, to \u003ccode\u003enew Date()\u003c/code\u003e, then called \u003ccode\u003egetHours()\u003c/code\u003e and \u003ccode\u003egetMinutes()\u003c/code\u003e on it. In the second code snippet, we called \u003ccode\u003elog()\u003c/code\u003e as part of \u003ccode\u003econsole\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThese are all JavaScript Objects — \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArrays\u003c/a\u003e and other things like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e are Objects... even \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"\u003e\u003cem\u003eStrings\u003c/em\u003e\u003c/a\u003e are Objects, which is why we can do things like \u003ccode\u003e\"hello\".slice(1)\u003c/code\u003e. Functions... are also Objects in JavaScript if things weren't confusing enough already.\u003c/p\u003e  \u003cp\u003eAs it turns out, Objects are a bit more complex than we originally presented!\u003c/p\u003e  \u003ch2\u003eA Deeper Look at Objects\u003c/h2\u003e  \u003cp\u003eBefore we continue, we want to be clear in the language we use going forward — so far we've talked about key/value pairs in general, but they're actually referred to as different things depending on what they store. Key/value pairs like \u003ccode\u003egreeting\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e are also referred to as \u003cem\u003eproperties\u003c/em\u003e of an Object. Properties that store a function expression as a value, like \u003ccode\u003etime\u003c/code\u003e, are referred to as \u003cem\u003emethods\u003c/em\u003e of the object. The \u003ccode\u003ephrases\u003c/code\u003e object we've defined, then, has two properties, one of which is a method.\u003c/p\u003e  \u003cp\u003eWe've gotten used to creating objects using the object literal notation, using curly braces to wrap comma separated properties:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst phrases = {\u003cbr\u003e  greeting: \"Hello there!\",\u003cbr\u003e  time: () =\u0026gt; {\u003cbr\u003e    const currentTime = new Date();\u003cbr\u003e    return `The time is ${currentTime.getHours()}:${currentTime.getMinutes()}`;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis way of creating Objects is often preferred due to its simplicity, but there are other ways we can create Objects. Say, for example, that we want to be able to create multiple Objects that all share some properties. Rather than type out all the properties each time, we can use a \u003cem\u003eConstructor function\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eCreating an Object Using the Constructor Function\u003c/h3\u003e  \u003cp\u003eWe mentioned earlier that functions are Objects. The easiest way to demonstrate this is to create an object using a function. We can recreate our \u003ccode\u003ephrases\u003c/code\u003e object using what is called a 'Constructor' function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction PhraseObjectConstructor(name) {\u003cbr\u003e  this.greeting = `Hello there ${name}!`;\u003cbr\u003e  this.time = () =\u0026gt; {\u003cbr\u003e    const currentTime = new Date();\u003cbr\u003e    return `The time is ${currentTime.getHours()}:${currentTime.getMinutes()}`;\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst phrases = new PhraseObjectConstructor(\"Harold\");\u003cbr\u003e\u003cbr\u003e\u003cbr\u003ephrases.greeting;\u003cbr\u003e// =\u0026gt; \"Hello there Harold!\"\u003cbr\u003ephrases.time();\u003cbr\u003e// =\u0026gt; \"The time is 17:30\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can see here that the code above results in a \u003ccode\u003ephrases\u003c/code\u003e object that behaves like the previous examples, with \u003ccode\u003egreeting\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e properties. You probably notice some things that are unfamiliar, though.\u003c/p\u003e  \u003cp\u003eNote that instead of using key/value pairs to set properties, we've used something else — \u003ccode\u003ethis\u003c/code\u003e followed by the dot notation we've seen. We will go into greater depth on \u003ccode\u003ethis\u003c/code\u003e and context later. For now, take note that in our example, \u003ccode\u003ethis\u003c/code\u003e seems to be written like it is an Object itself; the properties we're assigning, \u003ccode\u003egreeting\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e, are part of \u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAnother noticeable difference is that \u003ccode\u003ePhraseObjectConstructor()\u003c/code\u003e does not \u003cem\u003ereturn\u003c/em\u003e anything explicitly (the only \u003ccode\u003ereturn\u003c/code\u003e is inside the \u003ccode\u003etime\u003c/code\u003e method). However, when we run \u003ccode\u003enew PhraseObjectConstructor(\"Harold\")\u003c/code\u003e, we do assign \u003cem\u003esomething\u003c/em\u003e to the \u003ccode\u003ephrases\u003c/code\u003e variable — \u003cem\u003ean Object\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eThe essential bit in this puzzle is \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e\u003c/a\u003e. Adding \u003ccode\u003enew\u003c/code\u003e before \u003ccode\u003ePhraseObjectConstructor(\"Harold\")\u003c/code\u003e tells JavaScript to do a couple of things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eIt creates a basic Object (which gets assigned to the \u003ccode\u003ephrases\u003c/code\u003e variable).\u003c/li\u003e \u003cli\u003eIt binds \u003ccode\u003ethis\u003c/code\u003e to the newly created Object. The properties defined in the function now belong to \u003cem\u003ethis\u003c/em\u003e new Object.\u003c/li\u003e \u003cli\u003eIt adds a new property, \u003ccode\u003e__proto__\u003c/code\u003e to the Object.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe first action is something we're familiar with, less so the other two. We'll discuss both then check out an example of why this behavior is useful.\u003c/p\u003e  \u003ch2\u003eA Brief Intro to \u003ccode\u003ethis\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003e\u003ccode\u003ethis\u003c/code\u003e\u003c/a\u003e is a reserved word in JavaScript that returns the \u003cem\u003econtext\u003c/em\u003e it is in. The value of \u003ccode\u003ethis\u003c/code\u003e depends on where and how it is used. Consider the following plain object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst example = {\u003cbr\u003e  name: \"Henry\",\u003cbr\u003e  test: function() {\u003cbr\u003e    return this;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexample.test();\u003cbr\u003e// =\u0026gt; {name: \"Henry\", test: ƒ} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you paste the above into your browser console and run \u003ccode\u003eexample.test()\u003c/code\u003e, you will get the \u003ccode\u003eexample\u003c/code\u003e object in return!\u003c/p\u003e  \u003cp\u003eYou may notice we're not using an arrow function here. If you replace \u003ccode\u003etest\u003c/code\u003e with an arrow function, you'll get a different value for \u003ccode\u003ethis\u003c/code\u003e. The reason is beyond the scope of this lesson and is related to how context is determined in arrow functions.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ethis\u003c/code\u003e can be very useful since we can use it to reference objects from inside themselves.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst example = {\u003cbr\u003e  name: \"Henry\",\u003cbr\u003e  sayName: function() {\u003cbr\u003e    return `My name is ${this.name}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexample.sayName();\u003cbr\u003e// =\u0026gt; \"My name is Henry\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGoing back to \u003ccode\u003enew\u003c/code\u003e, when we call \u003ccode\u003enew PhraseObjectConstructor(\"Harold\")\u003c/code\u003e, \u003ccode\u003ethis\u003c/code\u003e gets bound to the newly created object, turning \u003ccode\u003ethis.greeting\u003c/code\u003e and \u003ccode\u003ethis.time\u003c/code\u003e into properties for that object.\u003c/p\u003e  \u003ch2\u003eA Brief Intro to Prototypal Inheritance\u003c/h2\u003e  \u003cp\u003eWe mentioned that when using \u003ccode\u003enew\u003c/code\u003e, a property \u003ccode\u003e__proto__\u003c/code\u003e is added to the newly created object. \u003ccode\u003e__proto__\u003c/code\u003e refers to an Object's \u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\"\u003eprototype\u003c/a\u003e. Every JavaScript Object has a prototype property, though it isn't typically displayed when logging.\u003c/p\u003e  \u003cp\u003eThe prototype contains \u003cem\u003einherited\u003c/em\u003e properties, often methods. When we use a constructor function to create objects, the created object will inherit prototype properties from the constructor function (remember that it too is an Object). The constructor function has a prototype that \u003cem\u003eit\u003c/em\u003e inherited, as well. In this way, some shared properties are able to be 'passed down' from Object to Object. This is known as a prototype \u003cem\u003echain\u003c/em\u003e. Properties of an Object that are in the prototype can be accessed using the \u003ccode\u003e__proto__\u003c/code\u003e property of an individual object.\u003c/p\u003e  \u003cp\u003eRemember when we mentioned that Arrays are a \u003cem\u003etype\u003c/em\u003e of Object and that there are many Objects in JavaScript? Once we create an array, we can access methods on that array to do things.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst exampleArray = [1, 2, 3];\u003cbr\u003e\u003cbr\u003eexampleArray.pop();\u003cbr\u003e// =\u0026gt; 3\u003cbr\u003eexampleArray;\u003cbr\u003e// =\u0026gt; [1, 2] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMethods like \u003ccode\u003epop()\u003c/code\u003e (and \u003ccode\u003epush()\u003c/code\u003e, \u003ccode\u003eshift()\u003c/code\u003e, \u003ccode\u003eunshift()\u003c/code\u003e, etc...) are available on every Array we create because \u003cstrong\u003ethese methods exist in the prototype shared by all Arrays\u003c/strong\u003e. We can actually see them if we use \u003ccode\u003eexampleArray.__proto__\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexampleArray.__proto__\u003cbr\u003e// =\u0026gt; {\u003cbr\u003e// concat: ƒ,\u003cbr\u003e// constructor: ƒ,\u003cbr\u003e// ...\u003cbr\u003e// ...\u003cbr\u003e// pop: ƒ,\u003cbr\u003e// push: ƒ,\u003cbr\u003e// ...\u003cbr\u003e// ...\u003cbr\u003e// } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we call \u003ccode\u003enew PhraseObjectConstructor()\u003c/code\u003e, a \u003ccode\u003ePhraseObjectConstructor\u003c/code\u003e prototype is passed to every object created. This prototype contains its own \u003ccode\u003e__proto__\u003c/code\u003e property, which points to the basic Object prototype that the \u003ccode\u003ePhraseObjectConstructor\u003c/code\u003e function inherited from.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject -\u0026gt; PhraseObjectConstructor -\u0026gt; individual object \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Remember, do not be discouraged if you find these concepts confusing. They are most definitely confusing and will remain that way for a bit, but that is okay. As you progress through the JavaScript content, you'll see more examples of \u003ccode\u003ethis\u003c/code\u003e and prototypes.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion — The Power of Objects\u003c/h2\u003e  \u003cp\u003eLet's review what we've found out so far about Objects.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe know they can contain properties\u003c/li\u003e \u003cli\u003eWe know \u003ccode\u003ethis\u003c/code\u003e can be used in an object to reference itself\u003c/li\u003e \u003cli\u003eWe know Objects inherit shared properties from other Objects via the prototype chain\u003c/li\u003e \u003cli\u003eWe know many things in JavaScript are actually Objects\u003c/li\u003e \u003cli\u003eThere are multiple ways to create Objects\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou may occasionally find programmers debating online as to whether or not JavaScript is an object-oriented language. Some resources will refer to JavaScript as having 'object-oriented capabilities' but not as 'object-oriented.' This is technically true, as JavaScript doesn't strictly adhere to some specific design principles related to object-orientation. However, we'll soon see that you can absolutely use JavaScript as you would use other object-oriented languages.\u003c/p\u003e  \u003cp\u003eOne core concept of object-orientation is the ability to create object 'classes.' A class can be though of as a template; a blueprint we can use to create something from. In object-orientation, the things we create are typically referred to as 'instances.' Instances are individual copies of a class that can each carry unique information, but contain shared properties that were defined on the class.\u003c/p\u003e  \u003cp\u003eDoes this seem familiar? Sounds very similar to what we've discussed regarding constructor functions and prototypal inheritance. When we create a constructor function, we are essentially creating a template that can be used to generate new, individual objects.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction PhraseObjectConstructor(name) {\u003cbr\u003e  this.greeting = `Hello there ${name}!`;\u003cbr\u003e  this.time = () =\u0026gt; {\u003cbr\u003e    const currentTime = new Date();\u003cbr\u003e    return `The time is ${currentTime.getHours()}:${currentTime.getMinutes()}`;\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst phrases1 = new PhraseObjectConstructor(\"Harold\");\u003cbr\u003econst phrases2 = new PhraseObjectConstructor(\"Hank\");\u003cbr\u003e\u003cbr\u003ephrases1.greeting;\u003cbr\u003e// =\u0026gt; \"Hello there Harold!\"\u003cbr\u003ephrases2.greeting;\u003cbr\u003e// =\u0026gt; \"Hello there Hank!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThese objects can store unique information in their properties, but share a similar structure and have both inherited the constructor function's prototype.\u003c/p\u003e  \u003cp\u003eWith this knowledge, we encourage you take a look back at some of the JavaScript you've used so far. Did you know you can create new Arrays with \u003ccode\u003enew Array()\u003c/code\u003e? Can you guess what is happening when this command is run? What about other examples we've seen? \u003ccode\u003enew Date()\u003c/code\u003e is an interesting example — it \u003cem\u003ereturns a string\u003c/em\u003e when used, but it \u003cstrong\u003ealso\u003c/strong\u003e can be used to create a \u003ccode\u003eDate\u003c/code\u003e object with unique properties like \u003ccode\u003egetHours\u003c/code\u003e and \u003ccode\u003egetMinutes\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThings may still seem mysterious, but keep these ideas in mind as you move through the remaining content. You'll see these concepts appear again, but they will hopefully not be so unfamiliar!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\"\u003eObject Prototypes\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003e\u003ccode\u003ethis\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"asynchronous-javascript","title":"Asynchronous JavaScript","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-asynchronous-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-asynchronous-javascript/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-asynchronous-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-asynchronous-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eEstablish a metaphor for synchronous versus asynchronous work\u003c/li\u003e \u003cli\u003eDescribe a synchronous code block\u003c/li\u003e \u003cli\u003eDescribe an asynchronous code block\u003c/li\u003e \u003cli\u003eIdentify a synchronous code block\u003c/li\u003e \u003cli\u003eIdentify an asynchronous code block\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eBrowsers have to manage a lot. They're animating a \u003ccode\u003egif\u003c/code\u003e, they're displaying text, they're listening for clicks and scrolls, they're streaming a SoundCloud demo in a background tab, and they're running JavaScript programs.\u003c/p\u003e  \u003cp\u003eTo do all that work efficiently, browsers use an \u003cem\u003easynchronous\u003c/em\u003e execution model. That's a fancy way of saying \"they do little bits of lots of tasks until the tasks are done.\"\u003c/p\u003e  \u003cp\u003eIn this lesson we'll build a foundation of understanding around the asynchronous execution model of JavaScript.\u003c/p\u003e  \u003ch2\u003eEstablish a Metaphor for Synchronous Versus Asynchronous Work\u003c/h2\u003e  \u003cp\u003eLet's imagine a chef in a kitchen preparing a big meal. There's only one chef in this kitchen. The chef could prepare a turkey, then prepare some potatoes, then prepare some bread, then prepare green beans, and then serve it.\u003c/p\u003e  \u003cp\u003eOur diners would be treated to cold turkey, cold bread, cold green beans, and cold potatoes! This is not the goal. This meal was prepared in a \u003cem\u003esynchronous\u003c/em\u003e model: one-thing-after-the-other. Whatever happened \"blocked\" the rest of things that were waiting for work.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eInstead\u003c/em\u003e, our chef should move between each of these tasks quickly. The chef should use the \u003cem\u003easynchronous\u003c/em\u003e execution model browsers use. They should stuff the Turkey, they should measure the ingredients for the bread, they should peel the potatoes, etc. in a loop, \u003cem\u003eas fast as possible\u003c/em\u003e so that all the tasks \u003cem\u003eseem\u003c/em\u003e to be advancing at the same time. If the chef were to adopt this \u003cem\u003easynchronous\u003c/em\u003e model of work, the diners would be treated to piping-hot turkey, steaming potatoes, soft warm bread, and fresh warm green beans.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-asynchrony/Image_42_AsynchronyIllustrations.png\" alt=\"synch/asynch diagram\"\u003e\u003c/p\u003e  \u003ch2\u003eDescribe a Synchronous Code Block\u003c/h2\u003e  \u003cp\u003eSo far in JavaScript, we've mostly written \u003cem\u003esynchronous\u003c/em\u003e code where the execution model didn't matter.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst sum = 1 + 1; // Line 1\u003cbr\u003econst lis = document.querySelectorAll(\"li\"); // Line 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, when we hit the definition of \u003ccode\u003esum\u003c/code\u003e, this work doesn't rely on any \"unknowably long\" process. As soon as the work of \u003ccode\u003eLine 1\u003c/code\u003e is done, JavaScript will then go to work finding elements and assigning them to \u003ccode\u003elis\u003c/code\u003e in Line 2.\u003c/p\u003e  \u003cp\u003eBut let's consider a \"blocking\" operation. Imagine we had a synchronous function called \u003ccode\u003esynchronousFetch(\"URL STRING\")\u003c/code\u003e that fetches data from the network.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst tooMuchData = synchronousFetch(\"http://genome.example.com/...\"); // Line 1\u003cbr\u003econst lis = document.querySelectorAll(\"li\"); // Line 2\u003cbr\u003econsole.log(tooMuchData); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat work in Line 1 could take a long time (e.g. slow network), or might fail (e.g. failed login), or might retrieve a \u003cstrong\u003e\u003cem\u003ehuge\u003c/em\u003e\u003c/strong\u003e amount of data (e.g. The Human Genome).\u003c/p\u003e  \u003cp\u003eWith this synchronous approach, JavaScript won't continue to the next line of code until \u003ccode\u003esynchronousFetch\u003c/code\u003e has finished executing, so it's possible that the \u003ccode\u003econst lis\u003c/code\u003e in Line 2 \u003cem\u003ewill never execute\u003c/em\u003e! Furthermore, while JavaScript is executing \u003ccode\u003esynchronousFetch\u003c/code\u003e it will not be able to animate gifs, you won't be able to open a new tab, it will stop streaming SoundCloud, it will appear \"locked up.\" Recall our chef metaphor: while the chef prepares the potatoes, the green beans grow cold and the turkey congeals. Gross.\u003c/p\u003e  \u003ch2\u003eDescribe an Asynchronous Code Block\u003c/h2\u003e  \u003cp\u003eAsynchronous code in JavaScript looks a lot like event handlers. And if we think about it, that makes sense. You tell JavaScript:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eHey, do this thing. While you're waiting for that to finish, go do whatever maintenance you need: animate that gif, play some audio from SoundCloud, whatever. But when that first thing has an \"I'm done\" event, go \u003cstrong\u003eback\u003c/strong\u003e to it and \u003cem\u003ethen\u003c/em\u003e do some work that I defined in a function when I called it.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eLet's imagine a function called \u003ccode\u003easynchronousFetch\u003c/code\u003e that takes two arguments:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eA URL String\u003c/li\u003e \u003cli\u003eA callback function that will have the fetched data passed into it as its first argument when the \u003ccode\u003easynchronousFetch\u003c/code\u003e work is done\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003easynchronousFetch(\"http://genome.example.com/...\", tonOfGeneticData =\u0026gt; sequenceClone(tonOfGeneticData)); // Line 1\u003cbr\u003econst lis = document.querySelectorAll(\"li\"); // Line 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, JavaScript \u003cem\u003estarts\u003c/em\u003e the \u003ccode\u003easynchronousFetch\u003c/code\u003e in Line 1, and then sets \u003ccode\u003elis\u003c/code\u003e in Line 2.  Some time later (who knows how long?), the fetch of data finishes and \u003cem\u003ethat\u003c/em\u003e data is passed into the \"callback\" function as \u003ccode\u003etonOfGeneticData\u003c/code\u003e — back on Line 1.\u003c/p\u003e  \u003cp\u003eMost asynchronous functions in JavaScript have this quality of \"being passed a callback function.\" It's a helpful tool for spotting asynchronous code \"in the wild.\"\u003c/p\u003e  \u003cp\u003eLet's try seeing how synchronous versus asynchronous works in real JavaScript code.\u003c/p\u003e  \u003ch2\u003eIdentify a Synchronous Code Block\u003c/h2\u003e  \u003cp\u003eAs we have experienced in JavaScript, our code executes top-to-bottom, left-to-right.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction getData(){\u003cbr\u003e  console.log(\"2. Returning instantly available data.\");\u003cbr\u003e  return [{name: \"Dobby the House-Elf\"}, {name: \"Nagini\"}];\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction main(){\u003cbr\u003e  console.log(\"1. Starting Script\");\u003cbr\u003e  const data = getData();\u003cbr\u003e  console.log(`3. Data is currently ${JSON.stringify(data)}`);\u003cbr\u003e  console.log(\"4. Script Ended\");\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emain(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can copy and paste this into a DevTools console to see the result. It matches our default model of \"how code runs.\"\u003c/p\u003e  \u003ch2\u003eIdentify an Asynchronous Code Block\u003c/h2\u003e  \u003cp\u003eThe easiest asynchronous wrapper function is \u003ca href=\"https://www.w3schools.com/jsref/met_win_settimeout.asp\"\u003e\u003ccode\u003ewindow.setTimeout()\u003c/code\u003e\u003c/a\u003e. It takes as arguments:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ea \u003ccode\u003eFunction\u003c/code\u003e (the \"callback\" function)\u003c/li\u003e \u003cli\u003ea \u003ccode\u003eNumber\u003c/code\u003e representing milliseconds\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003esetTimeout()\u003c/code\u003e will wait the specified number of milliseconds and then execute the callback.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esetTimeout(() =\u0026gt; console.log('Hello World!'), 2000); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis says \"Hello World!\"... in 2 seconds. Try it out in the DevTools console!\u003c/p\u003e  \u003cp\u003eSince this code is in an \u003cem\u003easynchronous\u003c/em\u003e container, JavaScript can do other work and \u003cem\u003ecome back\u003c/em\u003e when the work \"on the back-burner\" is done. If JavaScript \u003cem\u003edidn't\u003c/em\u003e have an asynchronous model, while you waited those 2 seconds, no gifs would animate and streaming audio might stall. Asynchronous execution makes browsers the exceedingly useful tools they are.\u003c/p\u003e  \u003cp\u003eWhat do you think the output will be here?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esetTimeout(() =\u0026gt; console.log('Hello World!'), 2000);\u003cbr\u003econsole.log(\"No, me first\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSure enough:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNo, me first\u003cbr\u003eHello World! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJavaScript is so committed to trying to squeeze in work when it gets a chance that this has the exact same output!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esetTimeout(() =\u0026gt; console.log('Hello World!'), 0); // 0 Milliseconds!!\u003cbr\u003econsole.log(\"No, me first\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere the browser has \u0026lt; 0 milliseconds (i.e. nanoseconds) to see if it can find any work to do — and it still does!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eJavaScript in the browser has an asynchronous execution model. This fact has little impact when you're writing simple code, but when you start doing work that might block the browser you'll need to leverage asynchronous functions. Remember, these functions can be surprising and nearly every JavaScript developer sooner or later forgets to reckon with asynchrony.\u003c/p\u003e  \u003cp\u003eWhile working asynchronously can be a bit of a headache for developers, it allows JavaScript to do other work whenever it has an opportunity. Important methods which require us to think asynchronously are \u003ccode\u003esetTimeout()\u003c/code\u003e and \u003ccode\u003efetch()\u003c/code\u003e, among others.\u003c/p\u003e","frontPage":false},{"exportId":"callback-functions","title":"Callback Functions","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-callback-functions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-callback-functions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-callback-functions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUnderstand that we can pass functions as arguments in JavaScript\u003c/li\u003e \u003cli\u003eDefine callback functions\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003ePassing Functions as Arguments\u003c/h2\u003e  \u003cp\u003eWe know we can pass numbers, strings, objects, and arrays into a function as arguments, but did you know we can also \u003cstrong\u003epass functions into other functions\u003c/strong\u003e? We'll go into this in greater depth in an upcoming lesson, but it's important to start thinking about this concept now: in JavaScript, \u003cstrong\u003efunctions are objects\u003c/strong\u003e. Specifically, they are objects with a special, hidden code property that can be invoked.\u003c/p\u003e  \u003cp\u003eThis is how we pass an object into a function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction iReturnThings (thing) {\u003cbr\u003e  return thing;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eiReturnThings({ firstName: 'Brendan', lastName: 'Eich' });\u003cbr\u003e// =\u0026gt; {firstName: \"Brendan\", lastName: \"Eich\"} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd this is how we pass a function into a function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eiReturnThings(function () { return 4 + 5; });\u003cbr\u003e// =\u0026gt; ƒ () { return 4 + 5; } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that a representation of the passed-in function was returned, but \u003cstrong\u003eit was not invoked\u003c/strong\u003e. The \u003ccode\u003eiReturnThings()\u003c/code\u003e function accepted the passed-in function as its lone argument, \u003ccode\u003ething\u003c/code\u003e. As with all arguments, \u003ccode\u003ething\u003c/code\u003e was then available everywhere inside \u003ccode\u003eiReturnThings()\u003c/code\u003e as a local variable. When we passed a function into \u003ccode\u003eiReturnThings()\u003c/code\u003e, the \u003ccode\u003ething\u003c/code\u003e variable contained that function. Currently, all \u003ccode\u003eiReturnThings()\u003c/code\u003e does is return whatever value is stored inside \u003ccode\u003ething\u003c/code\u003e. However, if we know \u003ccode\u003ething\u003c/code\u003e contains a function, we can do a piece of awesome, function-y magic to it: \u003cstrong\u003ewe can invoke it\u003c/strong\u003e and return the function's result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction iInvokeThings (thing) {\u003cbr\u003e  return thing();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eiInvokeThings(function () { return 4 + 5; });\u003cbr\u003e// =\u0026gt; 9\u003cbr\u003e\u003cbr\u003eiInvokeThings(function () { return 'Hello, ' + 'world!'; });\u003cbr\u003e// =\u0026gt; \"Hello, world!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe pass in a function as the lone argument, store it inside the \u003ccode\u003ething\u003c/code\u003e variable, and then use the invocation operator (a pair of parentheses) to invoke the stored function: \u003ccode\u003ething()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As we dive deeper and deeper into functional programming in JavaScript, it bears repeating: this is \u003cstrong\u003every\u003c/strong\u003e complicated material! This is likely the first time you're encountering any of this stuff so, if you're struggling with the new concepts, don't sweat it! Set aside some extra time to re-read and practice, and make sure you're coding along with every example we cover in the lessons.\u003c/p\u003e  \u003ch2\u003eDefine Callback Functions\u003c/h2\u003e  \u003cp\u003eIf you've done any outside reading on JavaScript, you've probably come across the name of the pattern we just introduced: \u003cem\u003ecallback functions\u003c/em\u003e. When we pass a function into another function wherein it might be invoked, we refer to the passed function as a \u003cem\u003ecallback\u003c/em\u003e. The term derives from the fact that the function isn't invoked immediately — instead it's \u003cem\u003ecalled back\u003c/em\u003e, or invoked at a later point.\u003c/p\u003e  \u003cp\u003eYou may have noticed, but all of our callback functions so far have been \u003cem\u003eanonymous functions\u003c/em\u003e; that is, we haven't assigned them an identifier. You're welcome to name your callback functions if you'd like, but generally, it just clutters things up if you only use the callback function in one place. And, anyway, we already have a way to refer to them: by the name of the parameter into which they're passed! For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction main (cb) {\u003cbr\u003e  console.log(cb());\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emain(function () { return \"After I get passed to the main() function as the only argument, I'm stored in the local 'cb' variable!\"});\u003cbr\u003e// LOG: After I get passed to the main() function as the only argument, I'm stored in the local 'cb' variable! \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003eWe passed an anonymous function, \u003ccode\u003efunction () { return \"After I get passed... }\u003c/code\u003e, as the lone argument to our invocation of \u003ccode\u003emain()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003emain()\u003c/code\u003e stored the passed-in function in the local \u003ccode\u003ecb\u003c/code\u003e variable and then invoked the callback function.\u003c/li\u003e \u003cli\u003eThe invoked callback returned its long string, which was \u003ccode\u003econsole.log()\u003c/code\u003e-ed out in \u003ccode\u003emain()\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWe know that the parameters we define for our outer function are available anywhere inside the function. As a result, we can pass them as arguments to the callback function. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction greet (name, cb) {\u003cbr\u003e  return cb(name);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003egreet('Ada Lovelace', function (name) { return 'Hello there, ' + name; });\u003cbr\u003e// =\u0026gt; \"Hello there, Ada Lovelace\"\u003cbr\u003e\u003cbr\u003efunction doMath (num1, num2, cb) {\u003cbr\u003e  return cb(num1, num2);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edoMath(42, 8, function (num1, num2) { return num1 * num2; });\u003cbr\u003e// =\u0026gt; 336 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the above examples, what the \u003ccode\u003egreet()\u003c/code\u003e and \u003ccode\u003edoMath()\u003c/code\u003e functions are doing is pretty trivial: they're simply returning the result of calling the callback function. But let's consider another example. Imagine for a moment that we have a very expensive operation we need to execute, and that we need to do different things with the data it returns at different points in our program. We can use a callback to help us encapsulate that operation into its own function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction somethingExpensive(cb) {\u003cbr\u003e  // do something crazy,\u003cbr\u003e  // like fetching a bajillion websites\u003cbr\u003e  // then pass their data to the callback:\u003cbr\u003e  cb(data);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis approach allows us to separate the execution of the expensive operation from the functions that use the data it returns. We do this by passing whichever function we currently need to \u003ccode\u003esomethingExpensive()\u003c/code\u003e as a callback. Once the expensive operation is finished, we simply call \u003ccode\u003ecb()\u003c/code\u003e, passing the data along as an argument.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we learned about JavaScript callback functions. If the topic feels a little abstract at this point, don't worry! We will learn a lot more about callback functions and how they can be used in upcoming lessons.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/\"\u003eJavaScript Is Sexy: Callbacks\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://stackoverflow.com/questions/9596276/how-to-explain-callbacks-in-plain-english-how-are-they-different-from-calling-o\"\u003eStackOverflow: Explain Callbacks in Plain English\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false}],"assignments":[{"exportId":"g1b614488b68f6b26ffd466d8b625159f","title":"Adding Behavior with Methods","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-adding-behavior-with-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-adding-behavior-with-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-adding-behavior-with-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-adding-behavior-with-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite methods that use instance data and parameter data\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn review, with \u003cem\u003eObject-Oriented programming (OOP)\u003c/em\u003e, we can use classes to\nrepresent concepts such as students, books, comments, posts, or even animals.\u003c/p\u003e\n\n\u003cp\u003eWe should only have to define the properties and methods of a class once.\nDifferent \u003cem\u003einstances\u003c/em\u003e of this class will all have the same properties and\nmethods. Specific values for those properties will be different between\ninstances. Mickey and Minnie are both \u003ccode\u003eMouse\u003c/code\u003e instances that have a property\ncalled \u003ccode\u003ename\u003c/code\u003e, but the value of that property for each is different.\u003c/p\u003e\n\n\u003cp\u003eWith knowledge of \u003ccode\u003econstructors\u003c/code\u003e, we can use JavaScript's \u003ccode\u003eclass\u003c/code\u003ees as a\ntemplate for \u003cem\u003einstances\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWrite a Method That Uses Instance Data and Parameter Data\u003c/h3\u003e\n\n\u003cp\u003eTo practice \u003cem\u003eOOP\u003c/em\u003e concepts, let's create 3 \u003ccode\u003eclass\u003c/code\u003ees that use \u003ccode\u003econstructor\u003c/code\u003e\nmethods. These \u003ccode\u003econstructor\u003c/code\u003es will assign properties based on initial parameters.\nWe'll also write methods that leverage these properties.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Create \u003ccode\u003eclass\u003c/code\u003ees \u003ccode\u003eCat\u003c/code\u003e, \u003ccode\u003eDog\u003c/code\u003e, and \u003ccode\u003eBird\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e Each of these \u003ccode\u003eclass\u003c/code\u003ees will accept the \u003cem\u003eparameters\u003c/em\u003e \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003esex\u003c/code\u003e and\nwill store those values as \u003cem\u003eproperties\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003eclass Cat {\u003cbr\u003e  //...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Dog {\u003cbr\u003e  //...\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eclass Bird {\u003cbr\u003e  //...\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor each \u003ccode\u003eclass\u003c/code\u003e, create the method \u003ccode\u003espeak\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFor an \u003cem\u003einstance\u003c/em\u003e of \u003ccode\u003eCat\u003c/code\u003e, speak returns \"\u003ccode\u003ename\u003c/code\u003e says meow!\",\u003c/li\u003e\n\u003cli\u003eFor an \u003cem\u003einstance\u003c/em\u003e of \u003ccode\u003eDog\u003c/code\u003e, speak returns \"\u003ccode\u003ename\u003c/code\u003e says woof!\"\u003c/li\u003e\n\u003cli\u003eFor an \u003cem\u003einstance\u003c/em\u003e of \u003ccode\u003eBird\u003c/code\u003e, speak returns conditional output. If the\n\u003cem\u003einstance\u003c/em\u003e of \u003ccode\u003eBird\u003c/code\u003e is \u003ccode\u003emale\u003c/code\u003e, speak returns \"It's me! \u003ccode\u003ename\u003c/code\u003e, the parrot!\". If\nit is not \u003ccode\u003emale\u003c/code\u003e, speak returns \"\u003ccode\u003ename\u003c/code\u003e says squawk!\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe've learned to instantiate class instances, or \"objects\" in JavaScript. The\nconstructor function allows us to easily define and standardize the instances we\ncreate. Good work!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003eMozilla Developer Network\u003c/a\u003e - \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003ethis\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://codeburst.io/various-ways-to-create-javascript-object-9563c6887a47\"\u003eJavaScript — Multiple Ways to Create Objects\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0afe51031589acd6c9fc0cdae7168289","title":"Arrow Functions","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-arrow-functions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-arrow-functions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-arrow-functions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview declaring a function using a function expression\u003c/li\u003e \u003cli\u003eDeclare a function using arrow syntax\u003c/li\u003e \u003cli\u003eDescribe situations where arrow functions are used\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe original style for defining functions in JavaScript is the \u003cem\u003efunction declaration\u003c/em\u003e. But JavaScript has two other ways to write functions: the \u003cem\u003efunction expression\u003c/em\u003e and the \u003cem\u003earrow function\u003c/em\u003e. In this lesson, we will start by briefly reviewing function expressions, then we will learn how to write functions using \u003cem\u003earrow syntax\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eReview: Declare a Function Using a Function Expression\u003c/h2\u003e  \u003cp\u003eThe first method we learned for defining a function is the \u003cem\u003efunction declaration\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction foo() {\u003cbr\u003e  return 'bar';\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut, as we've learned, a function can also be written as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foo = function() {\u003cbr\u003e  return 'bar';\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efunction() {...}\u003c/code\u003e to the right of the assignment operator (\u003ccode\u003e=\u003c/code\u003e) is called a \u003cem\u003efunction expression\u003c/em\u003e. The best way to understand function expressions is by analogy.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst sum = 1 + 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEvaluate the expression \u003ccode\u003e1 + 1\u003c/code\u003e, returning \u003ccode\u003e2\u003c/code\u003e, and assign it to the variable \u003ccode\u003esum\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst difference = 10 - 1; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEvaluate the expression \u003ccode\u003e10 - 1\u003c/code\u003e, returning \u003ccode\u003e9\u003c/code\u003e, and assign it to the variable \u003ccode\u003edifference\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst foo = function() {\u003cbr\u003e  return 'bar';\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEvaluate the expression \u003ccode\u003efunction() { return 'bar' }\u003c/code\u003e, returning a thing that can be called, and assign it to the variable \u003ccode\u003efoo\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe've also learned that the function expression (again, the thing to the right of \u003ccode\u003e=\u003c/code\u003e) is known as an \u003cem\u003eanonymous function\u003c/em\u003e. It doesn't have a name associated with it like you see in a \u003cem\u003efunction declaration\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eHowever, when we assign an anonymous function to a variable, we have a name that points to a callable thing. We can call this anonymous function by invoking \u003ccode\u003efoo()\u003c/code\u003e. That anonymous function is now, for all practical purposes, named \u003ccode\u003efoo\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThere are a few subtle differences between \u003cem\u003efunction declarations\u003c/em\u003e and \u003cem\u003efunction expressions\u003c/em\u003e, but they are very minute. Neither is really better than the other. Over time, conventions have evolved in the JavaScript programming community for when to use one vs. the other; you will develop a sense for these as you continue to learn JavaScript. Ultimately, however, you are free to use whichever one you prefer.\u003c/p\u003e  \u003ch2\u003eDeclare a Function Using An Arrow Function\u003c/h2\u003e  \u003cp\u003eThe arrow syntax builds on the syntax of the function expression and provides a shorthand way to declare functions that doesn't require using the \u003ccode\u003efunction\u003c/code\u003e keyword. In fact, in cases where the function body consists of one line of code, we can define it in a single line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst add = (parameter1, parameter2) =\u0026gt; parameter1 + parameter2;\u003cbr\u003eadd(2,3); //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFirst, we declare a variable \u003ccode\u003eadd\u003c/code\u003e and assign an \u003cem\u003eanonymous function\u003c/em\u003e as its value. Nothing new there. So, let's look to the right of the \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(parameter1, parameter2) =\u0026gt; parameter1 + parameter2;\u003cbr\u003e// Parameter list ^^^^^   // Function Body ^^^^^^^^ \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is a very short function body! It adds \u003ccode\u003eparameter1\u003c/code\u003e and \u003ccode\u003eparameter2\u003c/code\u003e. There are a couple of things to be aware of in the code above: first, note that if the function body consists of a single expression, we no longer need to wrap it in curly braces. Second, \u003cstrong\u003ewhen there are no braces, arrow functions have an \u003cem\u003eimplicit\u003c/em\u003e return\u003c/strong\u003e, i.e., they \u003cem\u003eautomatically\u003c/em\u003e return the result of the last expression! \u003cstrong\u003eThis is the only situation in which a JavaScript function doesn't require \u003cem\u003eexplicit return\u003c/em\u003e with the \u003ccode\u003ereturn\u003c/code\u003e keyword.\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eTo the left of the \u003ccode\u003e=\u0026gt;\u003c/code\u003e, you see the parameters that are defined for the function. This looks similar to what we would have done with a function declaration: list the parameters, separated by commas, inside of \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf your arrow function has only one parameter, the \u003ccode\u003e()\u003c/code\u003e around the parameter becomes optional:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst twoAdder = x =\u0026gt; x + 2;\u003cbr\u003e// is the same as\u003cbr\u003econst twoAdder = (x) =\u0026gt; x + 2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAlmost all developers will drop the parentheses in this case.\u003c/p\u003e  \u003cp\u003eIf we need to do more work than return a single expression, we'll need \u003ccode\u003e{}\u003c/code\u003e to wrap the multiple lines of code, \u003cstrong\u003eand\u003c/strong\u003e we'll have to declare a \u003ccode\u003ereturn\u003c/code\u003e. That sweet no-\u003ccode\u003ereturn\u003c/code\u003e syntax is only available if your function body is one expression long.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst sum = (parameter1, parameter2) =\u0026gt; {\u003cbr\u003e  console.log(`Adding ${parameter1}`);\u003cbr\u003e  console.log(`Adding ${parameter2}`);\u003cbr\u003e  return parameter1 + parameter2;\u003cbr\u003e}\u003cbr\u003esum(1,2); //=\u0026gt; 3 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDescribe Situations Where Arrow Functions Are Used\u003c/h2\u003e  \u003cp\u003eArrow functions are often used in JavaScript's \u003cem\u003eiterator\u003c/em\u003e methods. An iterator is a method that allows you to deal with a set of data one at a time. For example, if you had a group of students' essays, you could only grade them one at a time.\u003c/p\u003e  \u003cp\u003eIn addition to looping constructs such as \u003ccode\u003efor\u003c/code\u003e, JavaScript includes a number of \u003cem\u003eadvanced iterators\u003c/em\u003e; we'll learn about these later in this section. For now, to see an example of how arrow functions are used in these methods, we'll preview JavaScript's \u003ccode\u003e.map()\u003c/code\u003e method.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003e.map()\u003c/code\u003e method is called on an \u003ccode\u003eArray\u003c/code\u003e and takes a function as an argument. It iterates through the array, passing each element in turn to the function. It then takes that function's return value and adds it to a new array, leaving the original array unchanged. That new array, containing the modified elements, is returned at the end after all iterations are complete.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst nums = [1,2,3];\u003cbr\u003econst squares = nums.map(x =\u0026gt; x ** 2); \u003cbr\u003esquares; //=\u0026gt; [1,4,9]\u003cbr\u003enums; //=\u0026gt; [1,2,3] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the argument being passed to \u003ccode\u003emap\u003c/code\u003e above is an arrow function! In each iteration through the \u003ccode\u003enums\u003c/code\u003e array, \u003ccode\u003emap\u003c/code\u003e passes the value of the current element to the arrow function as an argument and it is assigned to the parameter \u003ccode\u003ex\u003c/code\u003e. That value is then squared and stored in a new array. After \u003ccode\u003emap\u003c/code\u003e has iterated through all of the elements, it returns the new array containing the squared values.\u003c/p\u003e  \u003cp\u003eIf all this math stuff seems a bit too textbook-y, be reassured that we can iterate through anything, not just numbers. In the following example, we can imagine that \u003ccode\u003eoverdueTodoItems\u003c/code\u003e is a collection of DOM elements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efinishedItems = overdueTodoItems.map( item =\u0026gt; item.className = \"complete\" );\u003cbr\u003eheader.innerText = `You finished ${finishedItems.length} items!`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr we might use \u003ccode\u003emap\u003c/code\u003e in billing software:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elapsedUserAccounts.map( u =\u0026gt; sendBillTo(u.address) ); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDon't worry if you don't completely follow everything that goes on here — we will cover advanced iterators in detail later in this section.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eYou are going to write several methods. Write your code in the \u003ccode\u003eindex.js\u003c/code\u003e file. Let the tests guide you through the process.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson you saw two different styles for declaring functions: function expressions and arrow functions. Neither is \"better\" than the standard function declaration we've been using. Arrow functions excel when a simple change or operation needs to be used repeatedly. But they're certainly used to write long, complex functions too! As you continue through the course, you'll see all three methods used to write functions, and develop a feel for when to use each.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"\u003eMDN: Arrow Functions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g631f487030315313fc191d954404333d","title":"Building the Simple Liker App","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-building-simple-liker\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-building-simple-liker/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-building-simple-liker\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-building-simple-liker/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eSet up an event listener to respond to a user action\u003c/li\u003e \u003cli\u003eSubmit a request to a mocked-up server\u003c/li\u003e \u003cli\u003eUpdate the DOM based on the mock server's response\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eRemember when we started this exploration of the \"Simple Liker\" application? You might not have been sure that you would make it to this point, but you have. Right now you should have the information needed to create a basic web application!\u003c/p\u003e  \u003cp\u003eYour goal is to implement the \"liking\" functionality of \"Simple Liker.\" As a reminder, the final product should look something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-build-the-example/finished_product_ss.png\" alt=\"Screenshot Final\"\u003e\u003c/p\u003e  \u003cp\u003eThe focus of this lab is the JavaScript code. You should only need to make one change to the HTML, and no changes to the CSS file.\u003c/p\u003e  \u003cp\u003eYou might be tempted to look back at previous code, but don't. Use your knowledge and documentation from the internet (if needed), to build the application.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eYou will be doing your coding in \u003ccode\u003emain.js\u003c/code\u003e. If you take a look at the file, you will see that a function, \u003ccode\u003emimicServerCall()\u003c/code\u003e, is being provided for you. This function will \"mock\" the behavior of a backend server. You will invoke \u003ccode\u003emimicServerCall()\u003c/code\u003e in response to a user action, and the function will randomly return either a \"success\" or \"fail\" response. Your code will then need to handle the response appropriately: updating the appearance of the heart if it returns a \"successful\" response, and displaying an error in the DOM otherwise.\u003c/p\u003e  \u003cp\u003eNote that the content of the \"successful\" response from the server is not important here — we only care that it's successful. This means you will not need to call \u003ccode\u003e.json()\u003c/code\u003e on the response so you only need a single \u003ccode\u003ethen()\u003c/code\u003e call.\u003c/p\u003e  \u003cp\u003eHere's the specification:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAdd the \u003ccode\u003e.hidden\u003c/code\u003e class to the error modal in the HTML so it does not appear when the page first loads\u003c/li\u003e \u003cli\u003eWhen a user clicks on an empty heart:  \u003cul\u003e \u003cli\u003eInvoke \u003ccode\u003emimicServerCall\u003c/code\u003e to simulate making a server request\u003c/li\u003e \u003cli\u003eWhen the \"server\" returns a failure status:\u003c/li\u003e \u003cli\u003eRespond to the error using a \u003ccode\u003e.catch(() =\u0026gt; {})\u003c/code\u003e block after your \u003ccode\u003e.then(() =\u0026gt; {})\u003c/code\u003e block.\u003c/li\u003e \u003cli\u003eDisplay the error modal by removing the \u003ccode\u003e.hidden\u003c/code\u003e class\u003c/li\u003e \u003cli\u003eDisplay the server error message in the modal\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003esetTimeout\u003c/code\u003e to hide the modal after 3 seconds (add the \u003ccode\u003e.hidden\u003c/code\u003e class)\u003c/li\u003e \u003cli\u003eWhen the \"server\" returns a success status:\u003c/li\u003e \u003cli\u003eChange the heart to a full heart\u003c/li\u003e \u003cli\u003eAdd the \u003ccode\u003e.activated-heart\u003c/code\u003e class to make the heart appear red\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eWhen a user clicks on a full heart:  \u003cul\u003e \u003cli\u003eChange the heart back to an empty heart\u003c/li\u003e \u003cli\u003eRemove the \u003ccode\u003e.activated-heart\u003c/code\u003e class\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eKeep all your styling rules entirely in \u003ccode\u003estyle.css\u003c/code\u003e. Do not manipulate any \u003ccode\u003e.style\u003c/code\u003e properties.\u003c/li\u003e \u003cli\u003eOnly manipulate the DOM once the server request responds. Do not make the heart full until you're inside a successful \u003ccode\u003e.then\u003c/code\u003e block.\u003c/li\u003e \u003c/ul\u003e  \u003cblockquote\u003e \u003cp\u003eNote: The tests will only check for the first part of the specification (adding the \u003ccode\u003ehidden\u003c/code\u003e class). You should verify the rest of the behavior yourself, by checking the page in the browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThat's it! Congratulations. You're now a real-deal front-end developer! You can use HTML, CSS, and JavaScript to create living, breathing applications. Every web application front-end you see or have seen is built using these three pillars, which you're now skilled with! Give yourself a well-deserved pat on the back!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g96fe2270b38a9a7a6638e72c3b124696","title":"Challenge: Interacting with the DOM using Events","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-challenge-interacting-with-the-dom\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-interacting-with-the-dom/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-interacting-with-the-dom\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-interacting-with-the-dom/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIf you open up index.html in the browser, you'll find a small application. It has a few features:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA Counter that increases by 1 each second\u003c/li\u003e\n\u003cli\u003ePlus and Minus buttons that increment or decrement the counter\u003c/li\u003e\n\u003cli\u003eA 'like' button (❤️) that adds a 'like' for the number that is currently\ndisplayed by the timer\u003c/li\u003e\n\u003cli\u003eA comment box that adds comments when submitted\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFirst, take a few minutes to explore and test out the behavior of the page.\nThink about how each of the features must work. What must be happening\nunderneath each of these features?\u003c/p\u003e\n\n\u003cp\u003eThe challenge is to reverse engineer these features and build them yourself,\nusing what you've learned about JavaScript and DOM Manipulation.\u003c/p\u003e\n\n\u003ch2\u003eRewriting the functionality\u003c/h2\u003e\n\n\u003cp\u003eTo begin, comment out the script tag linking to \u003ccode\u003ejs/index.min.js\u003c/code\u003e in the html\nfile. This will \"shut off\" the existing behaviors so you can begin recreating\nthem, using the \u003ccode\u003ejs/challenge.js\u003c/code\u003e file to write your code. You can see the\n\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag that loads this file just after the one for \u003ccode\u003eindex.min.js\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAdd the following features one by one, refreshing the page to see your\nfunctionality working as you build.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote: These deliverables are written in the form of \u003cem\u003eUser Stories\u003c/em\u003e. They\ndescribe the features from the perspective of a user when they visit the page.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003eAs a user, I should see the timer increment every second once the page has\nloaded.\u003c/li\u003e\n\u003cli\u003eAs a user, I can manually increment and decrement the counter using the plus\nand minus buttons.\u003c/li\u003e\n\u003cli\u003eAs a user, I can 'like' an individual number of the counter. I should see the\ncount of the number of 'likes' associated with that number displayed.\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAs a user, I can pause the counter, which should:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003epause the counter\u003c/li\u003e\n\u003cli\u003edisable all buttons except the pause button\u003c/li\u003e\n\u003cli\u003eswitch the label on the button from \"pause\" to \"resume\"\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAs a user, I should be able to click the \"restart\" button to restart the\ncounter and re-enable the buttons.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAs a user, I can leave comments on my gameplay, such as: \"Wow, what a fun\ngame this is.\"\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eHint for the timer\u003c/h2\u003e\n\n\u003cp\u003eIf you're not sure how to create or pause a timer, look into:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\"\u003e\u003ccode\u003esetTimeout\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\"\u003e\u003ccode\u003esetInterval\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval\"\u003e\u003ccode\u003eclearinterval\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gcf84d113e6c3beaa5c209f65b23729b0","title":"Challenge: TaskLister Mini-Project","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-tasklister-mini-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-tasklister-mini-project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-tasklister-mini-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-tasklister-mini-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a functioning to-do list application\u003c/li\u003e\n\u003cli\u003eSuppress a default action with \u003ccode\u003eevent.preventDefault()\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be creating a simple to-do list application that uses\nJavaScript to manipulate the DOM.\u003c/p\u003e\n\n\u003cp\u003eCheck out the \u003ca href=\"https://learn-co-curriculum.github.io/js-task-lister-lite/\"\u003eworking demo\u003c/a\u003e!\u003c/p\u003e\n\n\u003ch2\u003eLab: Build a Functioning To-Do List Application\u003c/h2\u003e\n\n\u003cp\u003eInstead of relying on tests, this lab is \u003cem\u003edeliverable driven\u003c/em\u003e. You will be\nresponsible for ensuring that your solution works as intended by testing the\nbehavior in the browser.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this repository\u003c/li\u003e\n\u003cli\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in Chrome\u003c/li\u003e\n\u003cli\u003ePut your JavaScript knowledge to the test and work your way through the\ndeliverables\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eStructuring Your Code\u003c/h3\u003e\n\n\u003cp\u003eYou've been provided with a basic HTML file, as well as an \u003ccode\u003eindex.js\u003c/code\u003e file where\nyou can implement your solution. Note that the \u003ccode\u003eindex.js\u003c/code\u003e file is contained\nwithin a \u003ccode\u003esrc\u003c/code\u003e folder — this is a common pattern that you will see in many labs\nmoving forward. If you take a look at the \u003ccode\u003eindex.html\u003c/code\u003e file, you'll see that the\n\u003ccode\u003escript\u003c/code\u003e tag that loads the code file includes the \u003ccode\u003esrc\u003c/code\u003e directory in its path:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;script src=\"./src/index.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eDeliverables\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eAs a user, I should be able to type a task into the input field.\u003c/li\u003e\n\u003cli\u003eAs a user, I should be able to click some form of a submit button.\u003c/li\u003e\n\u003cli\u003eAs a user, I expect to see the task string that I provided appear in the DOM\nafter the submit button has been activated.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026gt; \u003cstrong\u003eNote:\u003c/strong\u003e \u003ca href=\"https://learn-co-curriculum.github.io/js-task-lister-lite/\"\u003eWhile the example\u003c/a\u003e shows one possible working\n\u0026gt; implementation of the TaskLister app, yours can (and is encouraged to!) look\n\u0026gt; however you like!\u003c/p\u003e\n\n\u003ch3\u003eHTML Forms\u003c/h3\u003e\n\n\u003cp\u003eFor this lab, we are going to be using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form\"\u003eHTML \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element\u003c/a\u003e to\ncapture the tasks the user enters. HTML forms can be quite complex and\nsophisticated but, at their most basic, consist of opening and closing \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e\ntags that enclose one or more \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e elements where users can enter\ninformation, and a way to submit the form. There are many types of \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input\"\u003einput\nfields\u003c/a\u003e to choose from; we use the \u003ccode\u003etype\u003c/code\u003e attribute to specify the one we\nwant. For this lab, we are using two: a text field (\u003ccode\u003etype=\"text\"\u003c/code\u003e) and a submit\nbutton (\u003ccode\u003etype=\"submit\"\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eIf you look in the \u003ccode\u003eindex.html\u003c/code\u003e file, you will see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    \u0026lt;form id=\"create-task-form\" action=\"#\" method=\"POST\"\u0026gt;\u003cbr\u003e      \u0026lt;label for=\"new-task-description\"\u0026gt;Task description:\u0026lt;/label\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"text\" id=\"new-task-description\" name=\"new-task-description\" placeholder=\"description\"\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"submit\" value=\"Create New Task\"\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow take a look at the page in your browser. The rendered form looks like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/javascript-events/task_lister.png\" alt=\"TaskLister input form\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can see each of the components that are in our form's HTML:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ethe label for our input field (\"Task description:\")\u003c/li\u003e\n\u003cli\u003ethe input box, with the placeholder content \"description\", and\u003c/li\u003e\n\u003cli\u003ethe button that's created by the \u003ccode\u003esubmit\u003c/code\u003e input tag\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eLet's take a closer look at the opening \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e tag. You'll see it includes an\n(optional) \u003ccode\u003eid\u003c/code\u003e attribute and two other attributes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;form id=\"create-task-form\" action=\"#\" method=\"POST\"\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause HTML forms were designed to be handled by backend programming languages\nsuch as PHP, the \u003ccode\u003eaction\u003c/code\u003e attribute would normally contain a path to the backend\ncode that processes the data captured from the user. Because we will be handling\nthe form using JavaScript, we don't need to provide a path. By convention, we\nset that attribute to \u003ccode\u003e\"#\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003emethod\u003c/code\u003e attribute specifies the \u003cem\u003etype\u003c/em\u003e of action we're executing when the\nform is submitted. The \u003ccode\u003emethod\u003c/code\u003e attribute's value (in this case, \"POST\") is an\n\u003cem\u003eHTTP Verb\u003c/em\u003e. (Although it is not required, you will often see HTTP verbs in all\ncaps.) We will learn more about HTTP Verbs in the next section. For now, just\nknow that the \u003ccode\u003ePOST\u003c/code\u003e method is used when we want to capture the data submitted\nby our form and use it in some way.\u003c/p\u003e\n\n\u003cp\u003eBy default, the HTML \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element submits the form and redirects the browser\nto a new url when the \u003ccode\u003e\u0026lt;submit\u0026gt;\u003c/code\u003e button is clicked. This default behavior makes\nsense when form submission is being handled by a back-end programming language.\nHowever, this \u003cem\u003eis not\u003c/em\u003e the experience we want to build in this lab. We instead\nwant to handle the submission of the form using JavaScript and update the DOM\nwithout reloading the page. Therefore, we need to prevent that event from\nperforming its default behavior.\u003c/p\u003e\n\n\u003ch3\u003eSuppress a Default Action with \u003ccode\u003eEvent.preventDefault()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe deliverables for this lab require you to use JavaScript to handle the\nclicking of the submit button. To do this, you'll need to listen for a \u003ccode\u003esubmit\u003c/code\u003e\nevent on the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element. In order to \u003cem\u003eprevent\u003c/em\u003e the \u003cem\u003edefault\u003c/em\u003e behavior of\nthe \u003ccode\u003esubmit\u003c/code\u003e event, when our event listener \"sees\" the event, it needs to invoke\nthe \u003ccode\u003epreventDefault()\u003c/code\u003e method on it.\u003c/p\u003e\n\n\u003cp\u003eTake a look at the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault\"\u003eMDN Documentation on \u003ccode\u003eEvent.preventDefault()\u003c/code\u003e\u003c/a\u003e.\nYou'll see how JavaScript is used to prevent a form element (checkbox) from\ndoing its \u003cem\u003edefault\u003c/em\u003e behavior (appearing checked upon click). You'll want to\nprevent \u003ccode\u003esubmit\u003c/code\u003e from doing its default behavior in a similar fashion.\u003c/p\u003e\n\n\u003ch3\u003eStretch Deliverables\u003c/h3\u003e\n\n\u003cp\u003eOnce you've got the required deliverables working, you may want to try to\nimplement one or more of the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA delete function that will remove tasks from your list\u003c/li\u003e\n\u003cli\u003eA priority value selected from a \u003ca href=\"https://www.w3docs.com/learn-html/html-select-tag.html\"\u003edropdown\u003c/a\u003e that is used to determine the color\nof the text in the list (e.g. red for high priority, yellow for medium, green\nfor low)\n\n\u003cul\u003e\n\u003cli\u003eAs an additional challenge, implement a sorting functionality that displays\nthe tasks in ascending or descending order based on priority\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eAn additional input field (e.g. user, duration, date due)\u003c/li\u003e\n\u003cli\u003eAbility to edit tasks\u003c/li\u003e\n\u003cli\u003eSomething of your choice! The main objective is to add a feature that allows\nthe user's input to affect the DOM\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge337ba3246beee04f17dbeb0adf56176","title":"Challenge: Toy Tale","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-challenge-toy-tale\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-toy-tale/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-toy-tale\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-toy-tale/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eSet up event listeners to respond to user events\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to make a \"GET\" request, then render the returned toys to the DOM\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to make a \"POST\" request to create a new toy, then add it to the DOM\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to make a \"PATCH\" request that updates an existing toy, then render the updated information to the DOM\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eYou've got a friend in need! Your friend Andy recently misplaced all their toys! Let's write an app that helps Andy keep track of them. For this lab, you will need to pull together everything you've learned about manipulating the DOM, responding to events, and communicating with the server. Specifically, you will need to:\u003c/p\u003e  \u003cp\u003e1) Access the list of toys from an API (mocked using JSON Server) and render    each of them in a \"card\" on the page 2) Hook up a form that enables users to add new toys. Create an event listener    so that, when the form is submitted, the new toy is persisted to the database    and a new card showing the toy is added to the DOM 3) Create an event listener that gives users the ability to click a button to    \"like\" a toy. When the button is clicked, the number of likes should be    updated in the database and the updated information should be rendered to the    DOM\u003c/p\u003e  \u003cp\u003eThe final product should look like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/toy_tale.gif\" alt=\"Toy Tale working app\"\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: this lab does not contain tests. You will be working from the requirements described below and verifying that your code is working correctly in the browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eStart Up the Server\u003c/h2\u003e  \u003cp\u003eAll of the toy data is stored in the \u003ccode\u003edb.json\u003c/code\u003e file. You'll want to access this data using a JSON server. Run \u003ccode\u003ejson-server --watch db.json\u003c/code\u003e to start the server.\u003c/p\u003e  \u003cp\u003eThis will create a server storing all of our lost toy data with restful routes at \u003ccode\u003ehttp://localhost:3000/toys\u003c/code\u003e. You can also check out the information for each individual toy at \u003ccode\u003ehttp://localhost:3000/toys/:id\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e we are using \u003ccode\u003e:id\u003c/code\u003e here as a variable value that indicates the path to a specific toy. To navigate (or send a request) to that path, the \u003ccode\u003eid\u003c/code\u003e number will be inserted into the URL in place of \u003ccode\u003e:id\u003c/code\u003e, e.g., \u003ccode\u003ehttp://localhost:3000/toys/1\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eOpen a second tab in the terminal then open \u003ccode\u003eindex.html\u003c/code\u003e in the browser and take a look at the page. The CSS has all been provided for you so that, when you create the cards to display each toy, you just need to add a CSS class to style them.\u003c/p\u003e  \u003cp\u003eIf you click on the \"Add a new toy!\" button, you'll see that it exposes a form where the user can submit information for a new toy. To re-hide the form, click the button a second time. If you take a look inside \u003ccode\u003eindex.js\u003c/code\u003e, you'll see that the code implementing that functionality has been provided for you. You will be writing the code to wire up the \"Create Toy\" button.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003ch3\u003eFetch Andy's Toys\u003c/h3\u003e  \u003cp\u003eOn the \u003ccode\u003eindex.html\u003c/code\u003e page, there is a \u003ccode\u003ediv\u003c/code\u003e with the \u003ccode\u003eid\u003c/code\u003e \"toy-collection.\"\u003c/p\u003e  \u003cp\u003eWhen the page loads, make a 'GET' request to fetch all the toy objects. With the response data, make a \u003ccode\u003e\u0026lt;div class=\"card\"\u0026gt;\u003c/code\u003e for each toy and add it to the toy-collection \u003ccode\u003ediv\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eAdd Toy Info to the Card\u003c/h3\u003e  \u003cp\u003eEach card should have the following child elements:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eh2\u003c/code\u003e tag with the toy's name\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eimg\u003c/code\u003e tag with the \u003ccode\u003esrc\u003c/code\u003e of the toy's image attribute and the class name \"toy-avatar\"\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ep\u003c/code\u003e tag with how many likes that toy has\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ebutton\u003c/code\u003e tag with a class \"like-btn\" and an id attribute set to the toy's id number\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAfter all of that, the toy card should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \u0026lt;div class=\"card\"\u0026gt;\u003cbr\u003e    \u0026lt;h2\u0026gt;Woody\u0026lt;/h2\u0026gt;\u003cbr\u003e    \u0026lt;img src=\"[toy_image_url]\" class=\"toy-avatar\" /\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;4 Likes \u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;button class=\"like-btn\" id=\"[toy_id]\"\u0026gt;Like \u0026lt;3\u0026lt;/button\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eAdd a New Toy\u003c/h3\u003e  \u003cp\u003eWhen a user submits the toy form, two things should happen:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eA \u003ccode\u003ePOST\u003c/code\u003e request should be sent to \u003ccode\u003ehttp://localhost:3000/toys\u003c/code\u003e and the new toy added to Andy's Toy Collection.\u003c/li\u003e \u003cli\u003eIf the post is successful, the toy should be added to the DOM without reloading the page.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIn order to send a POST request via \u003ccode\u003efetch()\u003c/code\u003e, give the \u003ccode\u003efetch()\u003c/code\u003e a second argument of an object. This object should specify the method as \u003ccode\u003ePOST\u003c/code\u003e and also provide the appropriate headers and the JSON-ified data for the request. The headers and body should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eheaders: \u003cbr\u003e{\u003cbr\u003e  \"Content-Type\": \"application/json\",\u003cbr\u003e  Accept: \"application/json\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ebody: JSON.stringify({\u003cbr\u003e  \"name\": \"Jessie\",\u003cbr\u003e  \"image\": \"https://vignette.wikia.nocookie.net/p__/images/8/88/Jessie_Toy_Story_3.png/revision/latest?cb=20161023024601\u0026amp;path-prefix=protagonist\",\u003cbr\u003e  \"likes\": 0\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFor examples, refer to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e  \u003ch3\u003eIncrease a Toy's Likes\u003c/h3\u003e  \u003cp\u003eWhen a user clicks on a toy's like button, two things should happen:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eA \u003ccode\u003epatch\u003c/code\u003e request (i.e., \u003ccode\u003emethod: \"PATCH\"\u003c/code\u003e) should be sent to the server at \u003ccode\u003ehttp://localhost:3000/toys/:id\u003c/code\u003e, updating the number of likes that the specific toy has\u003c/li\u003e \u003cli\u003eIf the patch is successful, the toy's like count should be updated in the DOM without reloading the page\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003epatch\u003c/code\u003e request enables us to \u003cstrong\u003eupdate\u003c/strong\u003e an existing toy. The request will look very similar to our \"POST\" request \u003cstrong\u003eexcept\u003c/strong\u003e that we need to include the \u003ccode\u003eid\u003c/code\u003e of the toy we're updating in the path.\u003c/p\u003e  \u003cp\u003eTo get this working, you will need to add an event listener to each toy's \"Like\" button. When the button is clicked for a toy, your code should:\u003c/p\u003e  \u003cp\u003e1) capture that toy's id, 2) calculate the new number of likes, 3) submit the \u003ccode\u003epatch\u003c/code\u003e request, and 4) update the toy's card in the DOM based on the \u003ccode\u003eResponse\u003c/code\u003e returned by the    fetch request.\u003c/p\u003e  \u003cp\u003eThe headers and body should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eheaders: \u003cbr\u003e{\u003cbr\u003e  \"Content-Type\": \"application/json\",\u003cbr\u003e  Accept: \"application/json\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ebody: JSON.stringify({\u003cbr\u003e  \"likes\": \u0026lt;new number\u0026gt;\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003epatch\u003c/code\u003e method updates the property or properties included in the body of a \u003ccode\u003efetch\u003c/code\u003e request but leaves the remaining properties as they are. For our example, the \u003ccode\u003elikes\u003c/code\u003e property will be updated by our \u003ccode\u003epatch\u003c/code\u003e request but the \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e, and \u003ccode\u003eimage\u003c/code\u003e properties will remain unchanged.\u003c/p\u003e  \u003cp\u003eIf your request isn't working, make sure your headers and keys match the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eHINT\u003c/strong\u003e: You will be creating two event listeners for this lab. The first one will be on the \"Create Toy\" button, which is provided in the app's \u003ccode\u003eindex.html\u003c/code\u003e file. The second one, however, will be on the \"Likes\" button on each individual toy card. Given that the toy cards will be rendered to the DOM dynamically from the \u003ccode\u003eResponse\u003c/code\u003e returned by the \u003ccode\u003efetch\u003c/code\u003e \"GET\" request, think about \u003cstrong\u003ewhen\u003c/strong\u003e it makes sense to add the event listener to each toy's \"Like\" button.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eOnce you get everything working, take a moment to appreciate how far you've come. You now have the skills needed to respond to user events, persist changes to a database, and manipulate the DOM in response. You have created your first fully-functioning web app that combines all three of the pillars.\u003c/p\u003e  \u003cp\u003eCongratulations!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g069e9dc5b5e33e1d87f72e98db3792c1","title":"Class Extension Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-class-extensions-extends-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-extends-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-extends-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-extends-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice writing JavaScript classes that inherit from other classes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we're going to create a geometry application that allows us to\ncalculate different properties of multiple shapes. We'll be using JavaScript's\n\u003ccode\u003eclass\u003c/code\u003e keyword to build objects that inherit from its base object.\u003c/p\u003e\n\n\u003ch2\u003ePractice Writing JavaScript classes That Inherit From Other Classes\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a \u003ccode\u003ePolygon\u003c/code\u003e class. \u003ccode\u003ePolygon\u003c/code\u003e will accept an \u003ccode\u003eArray\u003c/code\u003e of integers as a\nparameter, which will represent each \u003cem\u003eside\u003c/em\u003e of a shape. \u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003ecountSides\u003c/code\u003e that counts the number of sides (each index in the array).\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003eperimeter\u003c/code\u003e that calculates the sum of each side (each index in the array) of the polygon.\nThis method will become accessible to its child classes.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDefine a \u003ccode\u003eTriangle\u003c/code\u003e class that inherits from \u003ccode\u003ePolygon\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt will automatically have access to \u003ccode\u003ecount\u003c/code\u003e and \u003ccode\u003eperimeter\u003c/code\u003e inherited from \u003ccode\u003ePolygon\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003eisValid\u003c/code\u003e that checks if the given 3 sides for a triangle is valid.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe sum of the lengths of any two sides of a triangle is greater than the length of\nthe third side. If you take the three sides of a triangle and add them in pairs, the sum\nis greater than (not equal to) the third side. If that is not true, then it is not possible\nto construct a triangle with the given side lengths.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a \u003ccode\u003eSquare\u003c/code\u003e class that inherits from \u003ccode\u003ePolygon\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIt will automatically have access to \u003ccode\u003ecount\u003c/code\u003e and \u003ccode\u003eperimeter\u003c/code\u003e inherited from \u003ccode\u003ePolygon\u003c/code\u003e. \u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003eisValid\u003c/code\u003e that checks if the given 4 sides for a square is\nvalid. A square is valid when the lengths of all sides are equal. \u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eget\u003c/code\u003e keyword to make a getter method \u003ccode\u003earea\u003c/code\u003e that calculates the area of the square.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\"\u003eUnderstanding Getters\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g62e2b7f0179c81b97888348fb18db34c","title":"Constructor Functions Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-object-oriented-constructor-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-object-oriented-constructor-functions-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-object-oriented-constructor-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-object-oriented-constructor-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild constructor functions\u003c/li\u003e\n\u003cli\u003eBuild objects with properties from a constructor function\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntro\u003c/h2\u003e\n\n\u003cp\u003eScuber needs you to develop a fast way to create \u003ccode\u003eScooter\u003c/code\u003es, \u003ccode\u003eDriver\u003c/code\u003es, and \u003ccode\u003ePickupLocation\u003c/code\u003es as new business keeps rolling in.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eCreate a constructor function for each of the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eScooter with \u003ccode\u003eyear\u003c/code\u003e, \u003ccode\u003ecolor\u003c/code\u003e, and \u003ccode\u003emodel\u003c/code\u003e properties\u003c/li\u003e\n\u003cli\u003eDriver with \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eage\u003c/code\u003e, and \u003ccode\u003eexperience\u003c/code\u003e properties\u003c/li\u003e\n\u003cli\u003ePickupLocation with \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003ecity\u003c/code\u003e properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMake sure you run the tests to make sure your solutions work as expected.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfeb8632963cf8573600f430c7e758190","title":"Context Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-context-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-context-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplicitly override context with \u003ccode\u003ecall\u003c/code\u003e and \u003ccode\u003eapply\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eExplicitly lock context for a function with bind\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to build the time-card and payroll application using\nthe record-oriented approach again. This lab will feature the same topic and\narea of work as the previous lab; \u003cem\u003ehowever\u003c/em\u003e, \u003cem\u003ehow\u003c/em\u003e we call and use functions\nwill change with our new knowledge. While the code will stay \u003cem\u003emostly\u003c/em\u003e the same,\nyou're going to need to use \u003ccode\u003ethis\u003c/code\u003e a lot more.\u003c/p\u003e\n\n\u003cp\u003eThe tests guide you to implementing a time card system: when someone enters the\ncompany's state of the art technical office, the employee has to insert their\ncard in a time-clock which will record the time they came in. When it's time to\nleave, the employee will \"punch out.\"\u003c/p\u003e\n\n\u003cp\u003eFor simplicity's sake, we'll make these assumptions:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAssume that employees always check in and check out\u003c/li\u003e\n\u003cli\u003eAssume employees always check in and out on the hour\u003c/li\u003e\n\u003cli\u003eThe time is represented on a 24-hour clock (1300 is 1:00 pm); this keeps the\nmath easier and is the standard in most of the world\u003c/li\u003e\n\u003cli\u003eWhen timestamps are needed, they will be provided as Strings in the form:\n\"YYYY-MM-DD 800\" or \"YYYY-MM-DD 1800\" e.g. \"2018-01-01 2300\"\u003c/li\u003e\n\u003cli\u003eEmployees will never work across days i.e. in at 2200 and out at 0400 the\nnext day.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe lab tests will guide you toward a solution. Keep in mind, the goal is to\nunderstand how to \"grow\" an application in \"record-oriented\" fashion in\nJavaScript, as well as pass the lab. Make sure you're learning about this app\ndesign while you pass the solutions.\u003c/p\u003e\n\n\u003cp\u003eAs before, if you find yourself having extra time, use the guidance in the\nprevious lab to make your application more robust.\u003c/p\u003e\n\n\u003cp\u003eTake advantage of your collection-processing strengths that you trained up over\nthe last few lessons.\u003c/p\u003e\n\n\u003cp\u003ePut your code in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhile you will want to be guided by the tests, you will implement the following\nfunctions. To make the tests easier to read, we've provided the \u003cem\u003esignatures\u003c/em\u003e of\nthe functions.\u003c/p\u003e\n\n\u003cp\u003eA function \u003cem\u003esignature\u003c/em\u003e is the function name, the arguments it expects, and what\nthe function returns.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateEmployeeRecord\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA 4-element Array of a \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, and \u003ccode\u003eNumber\u003c/code\u003e\ncorresponding to a first name, family name, title, and pay rate per hour\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eJavaScript \u003ccode\u003eObject\u003c/code\u003e with keys:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efirstName\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efamilyName\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epayPerHour\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeInEvents\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeOutEvents\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eLoads \u003ccode\u003eArray\u003c/code\u003e elements into corresponding \u003ccode\u003eObject\u003c/code\u003e properties.\n\u003cem\u003eAdditionally\u003c/em\u003e, initialize empty \u003ccode\u003eArray\u003c/code\u003es on the properties \u003ccode\u003etimeInEvents\u003c/code\u003e\nand \u003ccode\u003etimeOutEvents\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateEmployeeRecords\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eConverts each nested \u003ccode\u003eArray\u003c/code\u003e into an employee record using\n\u003ccode\u003ecreateEmployeeRecord\u003c/code\u003e and accumulates it to a new \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateTimeInEvent\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA date stamp (\u003ccode\u003e\"YYYY-MM-DD HHMM\"\u003c/code\u003e), where time is expressed in \u003ca href=\"https://en.wikipedia.org/wiki/24-hour_clock\"\u003e24-hour standard\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe record that was just updated\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e with keys:\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e: Set to \u003ccode\u003e\"TimeIn\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehour\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edate\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateTimeOutEvent\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA date stamp (\u003ccode\u003e\"YYYY-MM-DD HHMM\"\u003c/code\u003e), where time is expressed in \u003ca href=\"https://en.wikipedia.org/wiki/24-hour_clock\"\u003e24-hour standard\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe record that was just updated\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e with keys:\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e: Set to \u003ccode\u003e\"TimeOut\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehour\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edate\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ehoursWorkedOnDate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA date of the form \u003ccode\u003e\"YYYY-MM-DD\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eHours worked, an \u003ccode\u003eInteger\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eGiven a date, find the number of hours elapsed between that date's\ntimeInEvent and timeOutEvent\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA date of the form \u003ccode\u003e\"YYYY-MM-DD\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003ePay owed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ehoursWorkedOnDate\u003c/code\u003e, multiply the hours by the record's\npayRate to determine amount owed. Amount should be returned as a number.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003eallWagesFor\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eNone\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eSum of pay owed to all employees for all dates, as a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e, accumulate the value of all dates worked by the\nemployee in the record used as context. Amount should be returned as a\nnumber. \u003cstrong\u003eHINT\u003c/strong\u003e: You will need to find the available dates somehow....\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003efindEmployeeByFirstName\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003esrcArray\u003c/code\u003e: Array of employee records\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003efirstName\u003c/code\u003e: String representing a first name held in an employee record\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eMatching record or \u003ccode\u003eundefined\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eTest the \u003ccode\u003efirstName\u003c/code\u003e field for a match with the \u003ccode\u003efirstName\u003c/code\u003e argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecalculatePayroll\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of employee records\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003ePay owed for all dates\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e, accumulate the value of all dates worked by the\nemployee in the record used as context. Amount should be returned as a\nnumber.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eA Mystery on the Horizon\u003c/h2\u003e\n\n\u003cp\u003eYou'll notice that in this lab we give you the implementation of \u003ccode\u003eallWagesFor\u003c/code\u003e.\nAs part of writing this challenge, we ran right smack into one of the most\nfamous bugs in JavaScript land: \"the lost context bug.\" Because we've not\ntaught you to deal with it, we've \"given\" you this function. We think you can\nsolve the other tests with this little piece having been given to you.\u003c/p\u003e\n\n\u003cp\u003eIf you find yourself having extra time, try researching this topic on your own.\nWe'll tell you all about it in our next lesson, though.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThis is one of the hardest topics in JavaScript. But you have hands-on\nexperience with the why and motivations of it! You're so much better off than\nmost JavaScript hackers who \u003cem\u003enever\u003c/em\u003e quite get the hang of it. It's been a lot\nof growth, but this hard-won knowledge is going to help you do staggeringly\ncool things\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"\u003e\u003ccode\u003ebind\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/apply\"\u003e\u003ccode\u003eapply\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g2a4554cb40d4ff190c7f2a8b944eec58","title":"Fetch Dog CEO Challenge","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-challenge-dog-ceo\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-dog-ceo/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-dog-ceo\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-challenge-dog-ceo/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice accessing information from APIs and using it to update the DOM\u003c/li\u003e \u003cli\u003ePractice listening for user events and updating the DOM in response\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lab, you will write JavaScript to get images of dogs and a list of dog breeds from API's and render them to the DOM. You will also add some click behavior to the list elements and implement a filter.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: this lab does not contain tests. You will be working from the requirements described below and verifying that your code is working correctly in the browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eChallenge 1\u003c/h2\u003e  \u003cp\u003eThis repository includes an \u003ccode\u003eindex.html\u003c/code\u003e file that loads an \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst imgUrl = \"https://dog.ceo/api/breeds/image/random/4\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAdd JavaScript that:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eon page load, fetches the images using the url above ⬆️\u003c/li\u003e \u003cli\u003eparses the response as \u003ccode\u003eJSON\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eadds image elements to the DOM \u003cstrong\u003efor each\u003c/strong\u003e 🤔 image in the array\u003c/li\u003e \u003c/ul\u003e  \u003chr\u003e  \u003ch2\u003eChallenge 2\u003c/h2\u003e \u003cpre\u003e\u003ccode\u003econst breedUrl = 'https://dog.ceo/api/breeds/list/all' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter the first challenge is completed, add JavaScript that:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eon page load, fetches all the dog breeds using the url above ⬆️\u003c/li\u003e \u003cli\u003eadds the breeds to the page in the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e provided in \u003ccode\u003eindex.html\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003chr\u003e  \u003ch2\u003eChallenge 3\u003c/h2\u003e  \u003cp\u003eOnce all of the breeds are rendered in the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, add JavaScript so that, when the user clicks on any one of the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003es, the font color of that \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e changes. This can be a color of your choosing.\u003c/p\u003e  \u003chr\u003e  \u003ch2\u003eChallenge 4\u003c/h2\u003e  \u003cp\u003eOnce we are able to load \u003cem\u003eall\u003c/em\u003e of the dog breeds onto the page, add JavaScript so that the user can filter breeds that start with a particular letter using a \u003ca href=\"https://www.w3docs.com/learn-html/html-select-tag.html\"\u003edropdown\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eFor example, if the user selects 'a' in the dropdown, only show the breeds with names that start with the letter a. For simplicity, the dropdown only includes the letters a-d. However, we can imagine expanding this to include the entire alphabet.\u003c/p\u003e  \u003chr\u003e  \u003cp\u003e\u003cimg src=\"https://dog.ceo/img/dog.jpg\" alt=\"dog ceo\"\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g89da3256de76e131fb0ba4305cf5c1e2","title":"Fetch Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-fetch-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-fetch-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-fetch-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-fetch-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to programmatically make a web request\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be using \u003ccode\u003efetch()\u003c/code\u003e to send web requests to the \u003ca href=\"https://anapioficeandfire.com/\"\u003eGame of\nThrones\u003c/a\u003e API. We'll make a web request to the API, and in return we will\nreceive a collection of data, structured like a nested JavaScript \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-fetch-lab/got-comeatme.gif\" alt=\"Game of Thrones Come at Me Gif\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eWhat's an API?\u003c/h3\u003e\n\n\u003cp\u003eAn \u003cstrong\u003eAPI\u003c/strong\u003e, or application programming interface, is a manner in which companies\nand organizations, like Twitter or the New York City government, or the super\nfans behind the Game of Thrones API, expose their data and/or functionality to\nthe public (i.e. talented programmers like yourself) for use. APIs allow us to\nadd important data and functionality to the applications we build. You can think\nof an API as one way in which data is exposed to us developers for use in our\nown programs.\u003c/p\u003e\n\n\u003cp\u003eJust like we can use JavaScript to send a web request for a web page that is\nwritten in HTML, and receive a response that is full of HTML, we can use\nJavaScript to send a web request to an API and receive a collection of JSON in\nreturn.\u003c/p\u003e\n\n\u003ch3\u003eWhat's JSON?\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eJSON\u003c/strong\u003e is a language-agnostic way of formatting data. If we send a web request\nto the Game of Thrones API, it will return to us a JSON collection of data. With\njust one easy line of code, we can tell JavaScript to treat that JSON collection\nas a nested \u003ccode\u003eObject\u003c/code\u003e. In this way, large and complicated amounts of data can be\nshared across platforms.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGo ahead and navigate to the \u003ca href=\"https://anapioficeandfire.com/\"\u003eGame of Thrones\u003c/a\u003e API in a separate browser\ntab and open DevTools. Copy the following code into the console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch('https://anapioficeandfire.com/api/books')\u003cbr\u003e  .then(resp =\u0026gt; resp.json())\u003cbr\u003e  .then(json =\u0026gt; console.log(json));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first line of code fetches the requested data from the API. In the second\nline, we use the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Body/json\"\u003e\u003ccode\u003ejson()\u003c/code\u003e method\u003c/a\u003e of the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Body\"\u003e\u003ccode\u003eBody\u003c/code\u003e mixin\u003c/a\u003e\nto render the API's response as plain old JavaScript object (POJO).\nBecause we're using arrow syntax, the object is returned and passed to the\n\u003cem\u003enext\u003c/em\u003e \u003ccode\u003ethen()\u003c/code\u003e. Finally, in the second \u003ccode\u003ethen()\u003c/code\u003e, the \u003ccode\u003econsole.log()\u003c/code\u003e prints\nthe JavaScript object to our console.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-fetch-lab/Image_26_FullAsynchronousJavaScript.png\" alt=\"Convert JSON into object\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe response from the API contains all ten books currently existing in the Game\nof Thrones series, in a JSON format.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/ajax/fetch_lab_promises_response.png\" alt=\"Fetch Response from Game of Thrones API\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSince we asked for all the books by making a query to the \u003ccode\u003e/books\u003c/code\u003e path, it gave\nus all the books.  APIs have many different variations and can be as\ncustomizable as the developer wants them to be. If you're really lucky, there\nwill be robust documentation to go along with the API that gives you a road map\nto help you figure out how to format your request for information. For now we'll\nfocus on just getting different kinds of information out of the API's \u003ccode\u003e/books\u003c/code\u003e\npath.\u003c/p\u003e\n\n\u003cp\u003ePlay around with the logged response. See if you can design a strategy to use\nthe logged object and find the following answers.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe 5th book in the series\u003c/li\u003e\n\u003cli\u003eThe 1031st character in the series\u003c/li\u003e\n\u003cli\u003eThe total number of pages of all the books\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNote that you do not need to encode these strategies to pass the lab. It's not\nuncommon for developers who are integrating with third-party APIs to have to do\nsome exploration of the returned data to find the thing they're looking for.\nThis is an opportunity for you to practice.\u003c/p\u003e\n\n\u003ch2\u003eDeliverables\u003c/h2\u003e\n\n\u003cp\u003eIn \u003ccode\u003eindex.js\u003c/code\u003e, there is an empty function, \u003ccode\u003efetchBooks()\u003c/code\u003e, that is called when\n\u003ccode\u003eindex.html\u003c/code\u003e is loaded. To pass this lab, this function should include a fetch\nrequest to the Game of Thrones API ('\u003ca href=\"https://anapioficeandfire.com/api/books'\"\u003ehttps://anapioficeandfire.com/api/books'\u003c/a\u003e).\nThe returned response should be converted to JSON. Then, it should call the\nsecond function, \u003ccode\u003erenderBooks()\u003c/code\u003e, passing in the JSON-ified data as the\nargument. To check if you have done this correctly, open up the index.html page\nof this lab; you should see a list of Game Of Thrones titles on your webpage.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: The tests in this lab need to access the \u003ccode\u003efetch()\u003c/code\u003e request you will\ncreate inside \u003ccode\u003efetchBooks()\u003c/code\u003e. In order to give them access, write your\nsolution so that \u003ccode\u003efetchBooks()\u003c/code\u003e \u003cem\u003ereturns\u003c/em\u003e the \u003ccode\u003efetch()\u003c/code\u003e. This will not change\nthe behavior of your \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAPIs are powerful tools that can help you leverage the power of the available\ndata on the web. Once you feel comfortable using the tools that access the data,\nthe world is your oyster!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-fetch-lab/got-dancing.gif\" alt=\"Dancing\"\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9debbb349d4a864eb39706882d4462a2","title":"Fetch on Demand with Forms","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-js-fetch-on-demand-with-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-js-fetch-on-demand-with-forms/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-js-fetch-on-demand-with-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-js-fetch-on-demand-with-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice using forms to trigger \u003ccode\u003efetch\u003c/code\u003e requests\u003c/li\u003e\n\u003cli\u003eAdd content to the DOM based on user input\u003c/li\u003e\n\u003cli\u003eOverride default form behavior using JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lab, we accessed a remote API on page load and populated some\ncontent. This is a common practice in modern web development — when you visit a\nwebsite, that site may fetch data from a variety of places right as the page\nloads. Sites often retrieve data from a backend (like your account info) while\nalso retrieving data from other sources like APIs. From a user's perspective, it\nall just loads when they visit the site.\u003c/p\u003e\n\n\u003cp\u003eNow, we're going to look at a slightly different scenario — retrieving data based\non user input.\u003c/p\u003e\n\n\u003cp\u003eThe underlying code isn't much different than what we've seen. We'll pass a\nfunction into an event listener that, when called, sends a \u003ccode\u003efetch\u003c/code\u003e request, then\ndoes something with the retrieved data.\u003c/p\u003e\n\n\u003cp\u003eFor this code-along, we'll use JSON server as a mock API and build out a form to\nget specific data from our API.\u003c/p\u003e\n\n\u003ch2\u003eScenario\u003c/h2\u003e\n\n\u003cp\u003eImagine you've been hired to help build the frontend for a movie database\ncompany specializing in kids' movies. Some initial work has already been done\nfor you — we have an API with some starter data and some initial HTML, but very\nlittle JavaScript.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFirst, let's get the JSON server up and running in the background. From inside\nthis assignment's local directory, run \u003ccode\u003enpm install\u003c/code\u003e. When NPM finishes\ninstalling the necessary packages, run \u003ccode\u003ejson-server --watch db.json\u003c/code\u003e to start\nthe JSON server. In your browser, you can verify the server is running by\nnavigating to \u003ccode\u003ehttp://localhost:3000/movies\u003c/code\u003e to see the API data.\u003c/p\u003e\n\n\u003cp\u003eLeave the server running for now. Open a second terminal window and navigate to\nthis assignment again. We'll use this second window to open files in your\nbrowser or text editor while the server is running.\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your text editor and in the browser (\u003ccode\u003eopen index.html\u003c/code\u003e for\nMac, \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e for WSL). With everything set up, we can take a\nlook at the HTML we currently have.\u003c/p\u003e\n\n\u003ch2\u003eExisting HTML\u003c/h2\u003e\n\n\u003cp\u003eIn \u003ccode\u003eindex.html\u003c/code\u003e, the movies from our database are currently hard-coded along\nwith their IDs for our convenience. Below these is a form.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  \u0026lt;h2\u0026gt;Movies Database\u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u003cbr\u003e      \u0026lt;h3\u0026gt;The Brave Little Toaster\u0026lt;/h3\u0026gt;\u003cbr\u003e      \u0026lt;div\u0026gt;ID: 1\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u003cbr\u003e      \u0026lt;h3\u0026gt;The Princess Bride\u0026lt;/h3\u0026gt;\u003cbr\u003e      \u0026lt;div\u0026gt;ID: 2\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u003cbr\u003e      \u0026lt;h3\u0026gt;Spirited Away\u0026lt;/h3\u0026gt;\u003cbr\u003e      \u0026lt;div\u0026gt;ID: 3\u0026lt;/div\u0026gt;\u003cbr\u003e    \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;/ul\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;section\u0026gt;\u003cbr\u003e    \u0026lt;form\u0026gt;\u003cbr\u003e      \u0026lt;label for=\"searchByID\"\u0026gt;Search By ID\u0026lt;/label\u0026gt;\u003cbr\u003e      \u0026lt;input id=\"searchByID\" type=\"text\" placeholder=\"Enter ID here\"/\u0026gt;\u003cbr\u003e      \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  \u0026lt;/section\u0026gt;\u003cbr\u003e  \u0026lt;section id=\"movieDetails\"\u0026gt;\u003cbr\u003e    \u0026lt;h4\u0026gt;Title\u0026lt;/h4\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Summary\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/section\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis form doesn't do much at the moment. In the browser, if we type something\nin and try to submit, our input just disappears.\u003c/p\u003e\n\n\u003cp\u003eYour primary task will be to get this form working. When a user inputs a valid\nID, the movie information should appear on the page.\u003c/p\u003e\n\n\u003cp\u003eDoing this will involve a few steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd event listeners to capture form data and override a form's default behavior\u003c/li\u003e\n\u003cli\u003eFetch data based on what the user types into that form\u003c/li\u003e\n\u003cli\u003eDisplay that data on the page\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAdd Event Listeners to Capture Form Data and Override the Form's Behavior\u003c/h2\u003e\n\n\u003cp\u003eBy default, HTML form elements will refresh when a \u003cstrong\u003eSubmit\u003c/strong\u003e input is clicked.\nBefore we can run the code for fetching data, we need to override this behavior.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003e./src/index.js\u003c/code\u003e, we can do this by adding an event listener. Note that it\nalready contains one event listener and a callback function, \u003ccode\u003einit\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst init = () =\u0026gt; {\u003cbr\u003e\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edocument.addEventListener('DOMContentLoaded', init);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe want to make sure the JavaScript we write executes when the DOM is fully\nloaded. Any code related to DOM manipulation should either go in \u003ccode\u003einit\u003c/code\u003e or in a\nfunction called within \u003ccode\u003einit\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn our case, we want to add an event listener to the \u003ccode\u003eform\u003c/code\u003e element. We would first\ntarget the DOM element we want:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst inputForm = document.querySelector('form');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we'll need to add an event listener to the form, currently represented by\n\u003ccode\u003einputForm\u003c/code\u003e in our code.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"eventlisteners\"\u003eEvent listeners\u003c/a\u003e require two arguments: the \u003cem\u003etype\u003c/em\u003e of event, a\nstring, and the \u003cem\u003elistener\u003c/em\u003e, a callback function. In our case, we'll want to pass\nin \u003ccode\u003e'submit'\u003c/code\u003e as the type. For the listener, we need to provide a callback\nfunction that will be called to 'handle' the event.\u003c/p\u003e\n\n\u003cp\u003eWhen the event is triggered, the callback function we've provided will execute\nand an object representing the event will be passed in as an argument. We can\nexpect this to happen and can write a parameter in our code to store the event\nobject in a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt this point, the form will still refresh automatically, as we haven't done\nanything to override that yet. The \u003ccode\u003eevent\u003c/code\u003e object that gets passed in to our\ncallback contains a particular method we need in order to override our form's\nbehavior — \u003ccode\u003epreventDefault()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst init = () =\u0026gt; {\u003cbr\u003e  const inputForm = document.querySelector('form');\u003cbr\u003e\u003cbr\u003e  inputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e\u003cbr\u003e  });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edocument.addEventListener('DOMContentLoaded', init);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCalling this inside our callback will stop the page from refreshing and allow us\nto do something else instead. We can confirm everything is working by adding a\n\u003ccode\u003econsole.log\u003c/code\u003e in our callback:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    console.log(event);\u003cbr\u003e  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith dev tools open in the browser, if you enter some text and submit the form,\nyou should see the \u003ccode\u003eevent\u003c/code\u003e logged.\u003c/p\u003e\n\n\u003cp\u003eThere is quite a lot stored on this \u003ccode\u003eevent\u003c/code\u003e object, but we only need one thing:\nif we're fetching data based off a user input, we need to get the value of\nwhatever the user entered; whatever you just entered into the form.\u003c/p\u003e\n\n\u003cp\u003eThere are two ways we can get this value:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eevent\u003c/code\u003e object actually contains the value we need\u003c/li\u003e\n\u003cli\u003eWe can select the specific DOM element and get its value\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eAccess Input Value from an Event Object\u003c/h3\u003e\n\n\u003cp\u003eTo get the value from our \u003ccode\u003eevent\u003c/code\u003e object, we first want to access\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\"\u003e\u003ccode\u003eevent.target\u003c/code\u003e\u003c/a\u003e. \u003ccode\u003eevent.target\u003c/code\u003e returns the DOM element targeted\nby our event, a \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e in our case.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevent.target\u003cbr\u003e// =\u0026gt; \u0026lt;form\u0026gt;..\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eevent.target\u003c/code\u003e has a property, \u003ccode\u003echildren\u003c/code\u003e, that returns an\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection\"\u003e\u003ccode\u003eHTMLCollection\u003c/code\u003e\u003c/a\u003e containing all the nested elements of the\n\u003ccode\u003eevent.target\u003c/code\u003e element.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevent.target.children\u003cbr\u003e// =\u0026gt; HTMLCollection(3)\u0026nbsp;[label, input#searchByID, input, searchByID: input#searchByID]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooking at the form, we can see we want to access the \u003cem\u003esecond\u003c/em\u003e element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;form\u0026gt;\u003cbr\u003e  \u0026lt;label for=\"searchByID\"\u0026gt;Search By ID\u0026lt;/label\u0026gt;\u003cbr\u003e  \u0026lt;input id=\"searchByID\" type=\"text\" placeholder=\"Enter ID here\"/\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo we access this element via its index:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevent.target.children[1]\u003cbr\u003e// =\u0026gt; \u0026lt;input id=\"searchByID\" type=\"text\" placeholder=\"Enter ID here\"\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd to get the input value, we use the \u003ccode\u003evalue\u003c/code\u003e attribute\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevent.target.children[1].value\u003cbr\u003e// =\u0026gt; whatever you typed into the input\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAccess Input Value Directly\u003c/h3\u003e\n\n\u003cp\u003eWe will always need to use \u003ccode\u003eevent.preventDefault()\u003c/code\u003e to stop the page from\nrefreshing. However, we don't necessarily need to use the \u003ccode\u003eevent\u003c/code\u003e to get the\nvalue we need. We can also choose to access the \u003ccode\u003einput\u003c/code\u003e element directly.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  const input = document.querySelector('input#searchByID');\u003cbr\u003e\u003cbr\u003e  console.log(input.value);\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBoth options work for getting the value we need. For now, we'll use the code\nabove.\u003c/p\u003e\n\n\u003cp\u003eWith this data, and the default form behavior overridden, we can set up a \u003ccode\u003efetch\u003c/code\u003e\nrequest.\u003c/p\u003e\n\n\u003ch2\u003eFetch Data Based on User Input\u003c/h2\u003e\n\n\u003cp\u003eLet's first set up the basic shell of our \u003ccode\u003efetch\u003c/code\u003e request. To make sure everything\nis working and we can connect to the JSON server, we'll send a basic request to\n\u003ccode\u003e'http://localhost:3000/movies'\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst init = () =\u0026gt; {\u003cbr\u003e  const inputForm = document.querySelector('form');\u003cbr\u003e\u003cbr\u003e  inputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    const input = document.querySelector('input#searchByID');\u003cbr\u003e\u003cbr\u003e    console.log(input.value);\u003cbr\u003e\u003cbr\u003e    fetch('http://localhost:3000/movies')\u003cbr\u003e    .then(response =\u0026gt; response.json())\u003cbr\u003e    .then(data =\u0026gt; {\u003cbr\u003e      console.log(data);\u003cbr\u003e      // LOG: (3)\u0026nbsp;[{…}, {…}, {…}]\u003cbr\u003e    });\u003cbr\u003e  });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edocument.addEventListener('DOMContentLoaded', init);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf everything is working, you should see an array of three objects logged in the\nconsole using the code above.\u003c/p\u003e\n\n\u003cp\u003eThese three objects represent the three 'records' available from the movies API.\nIn our example, this is enough for us to move on — we have our user input\naccessible in \u003ccode\u003einput.value\u003c/code\u003e, and each object in \u003ccode\u003edata\u003c/code\u003e has an \u003ccode\u003eid\u003c/code\u003e property. We\ncould now iterate over \u003ccode\u003edata\u003c/code\u003e and find a match between \u003ccode\u003einput.value\u003c/code\u003e and \u003ccode\u003eid\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHowever, it isn't usually the case that we want to get \u003cem\u003eall\u003c/em\u003e records from an API\nor server. It would be helpful if we could have \u003cem\u003ethe 'server'\u003c/em\u003e do that work for\nus.\u003c/p\u003e\n\n\u003cp\u003eJSON Server follows RESTful conventions. As a result of these conventions, we\ncan expect to be able to access specific records directly by providing the\nappropriate parameter in our request URL.\u003c/p\u003e\n\n\u003cp\u003eIf you open a new tab in your browser and visit\n\u003ccode\u003ehttp://localhost:3000/movies/1\u003c/code\u003e, instead of seeing all three movie objects,\nyou'll be presented with the object with \u003ccode\u003e1\u003c/code\u003e as its \u003ccode\u003eid\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 1,\u003cbr\u003e  \"title\": \"The Brave Little Toaster\",\u003cbr\u003e  \"summary\": \"A group of appliances set off on a journey\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly, if we pass this URL into our \u003ccode\u003efetch\u003c/code\u003e request, we'll get this single\nobject in return.\u003c/p\u003e\n\n\u003cp\u003eWe need to modify the URL we pass to our \u003ccode\u003efetch\u003c/code\u003e function based on the input\ntyped into the HTML form. Using interpolation, we can adapt our existing code\nto do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  const input = document.querySelector('input#searchByID');\u003cbr\u003e\u003cbr\u003e  fetch(`http://localhost:3000/movies/${input.value}`)\u003cbr\u003e  .then(response =\u0026gt; response.json())\u003cbr\u003e  .then(data =\u0026gt; {\u003cbr\u003e    console.log(data);\u003cbr\u003e  });\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if you type a valid ID into the form, a specific movie object will be\nlogged!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e What happens when you enter an \u003cem\u003einvalid\u003c/em\u003e ID? In the console, you\nshould see a \u003ccode\u003e404\u003c/code\u003e error. Something to think about as you continue to learn —\nwhat are some ways you might \u003cem\u003ehandle\u003c/em\u003e an invalid request?\u003c/p\u003e\n\n\u003ch2\u003eDisplay Fetched Data on the Page\u003c/h2\u003e\n\n\u003cp\u003eWe've captured some user input and used it to customize a fetch request to our\nJSON server. The final step in our code-along is to display some of the\nretrieved data on the page. In the HTML, we have a \u003ccode\u003esection\u003c/code\u003e element with an id,\n\u003ccode\u003e\"movieDetails\"\u003c/code\u003e, that contains some filler content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;section id=\"movieDetails\"\u0026gt;\u003cbr\u003e  \u0026lt;h4\u0026gt;Title\u0026lt;/h4\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Summary\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/section\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's replace \u003ccode\u003eTitle\u003c/code\u003e and \u003ccode\u003eSummary\u003c/code\u003e with data we retrieved from our server. To do this,\nwe'll work inside the second \u003ccode\u003ethen\u003c/code\u003e of our \u003ccode\u003efetch\u003c/code\u003e request. First, we'll access the DOM\nand store the two elements in JavaScript\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(`http://localhost:3000/movies/${input.value}`)\u003cbr\u003e  .then(response =\u0026gt; response.json())\u003cbr\u003e  .then(data =\u0026gt; {\u003cbr\u003e    const title = document.querySelector('section#movieDetails h4');\u003cbr\u003e    const summary = document.querySelector('section#movieDetails p');\u003cbr\u003e  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere again, we could access these elements in many ways, this is just one way to\napproach it. We could add \u003ccode\u003eid\u003c/code\u003e attributes to the \u003ccode\u003eh4\u003c/code\u003e and \u003ccode\u003ep\u003c/code\u003e tags directly.\u003c/p\u003e\n\n\u003cp\u003eNext, we want to change the contents of our \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003esummary\u003c/code\u003e elements based\non the retrieved data. We can do this by setting their \u003ccode\u003einnerText\u003c/code\u003e values to the\nappropriate values in our data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(`http://localhost:3000/movies/${input.value}`)\u003cbr\u003e  .then(response =\u0026gt; response.json())\u003cbr\u003e  .then(data =\u0026gt; {\u003cbr\u003e    const title = document.querySelector('section#movieDetails h4');\u003cbr\u003e    const summary = document.querySelector('section#movieDetails p');\u003cbr\u003e\u003cbr\u003e    title.innerText = data.title;\u003cbr\u003e    summary.innerText = data.summary;\u003cbr\u003e  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll together, our code looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst init = () =\u0026gt; {\u003cbr\u003e  const inputForm = document.querySelector('form')\u003cbr\u003e\u003cbr\u003e  inputForm.addEventListener('submit', (event) =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    const input = document.querySelector('input#searchByID');\u003cbr\u003e\u003cbr\u003e    fetch(`http://localhost:3000/movies/${input.value}`)\u003cbr\u003e    .then(response =\u0026gt; response.json())\u003cbr\u003e    .then(data =\u0026gt; {\u003cbr\u003e      const title = document.querySelector('section#movieDetails h4');\u003cbr\u003e      const summary = document.querySelector('section#movieDetails p');\u003cbr\u003e\u003cbr\u003e      title.innerText = data.title;\u003cbr\u003e      summary.innerText = data.summary;\u003cbr\u003e    });\u003cbr\u003e  });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edocument.addEventListener('DOMContentLoaded', init);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the browser, if we type \u003ccode\u003e1\u003c/code\u003e into the form, we should see info on the \u003cstrong\u003eBrave\nLittle Toaster\u003c/strong\u003e. Type \u003ccode\u003e2\u003c/code\u003e, and we get \u003cstrong\u003eThe Princess Bride\u003c/strong\u003e. We're\nsuccessfully fetching data \u003cem\u003eon demand!\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eA core aspect of the modern JavaScript-based web is that web pages can\ndynamically update their content as a user interacts with it. When a user adds a\ncomment, adds an emoji response, etc., refreshing the page isn't a great\nexperience.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we've gone through the basic mechanisms for providing a better\nexperience. By capturing user input via event listeners, using \u003ccode\u003efetch\u003c/code\u003e requests,\nand DOM manipulation, we can update page content as a user requests it. Although\nthis won't be the case for all events, we also overrode HTML's default behavior.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\"\u003e\u003ccode\u003eaddEventListener()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\"\u003e\u003ccode\u003eevent.target\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection\"\u003e\u003ccode\u003eHTMLCollection\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0a66fef15cc3e444b760ef6fdf157436","title":"First-Class Functions","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-first-class-functions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine \"first-class function\"\u003c/li\u003e \u003cli\u003eUse inline functions\u003c/li\u003e \u003cli\u003eUse functions as return values\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSometimes in life, we need to take a first step. Since life isn't scripted like a reality TV show, anything can happen after that initial step. We need to be able to adjust accordingly.\u003c/p\u003e  \u003cp\u003eImagine an exercise routine: every morning, we run 5 miles. But afterwards — depending on the day — we might lift weights, go for a swim, or run an extra 5 miles.\u003c/p\u003e  \u003cp\u003eIn programming-speak, we could write out a function for every day (follow along!):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Monday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Pump iron');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction Tuesday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Swim 40 laps');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction Wednesday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction Thursday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Pump iron');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction Friday() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e  console.log('Swim 40 laps');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut that's pretty tedious. And we already know that functions are supposed to help us \u003cem\u003ereduce\u003c/em\u003e this kind of repetition.\u003c/p\u003e  \u003cp\u003eWhat if we pull all of our five-mile runs into their own function?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction runFiveMiles() {\u003cbr\u003e  console.log('Go for a five-mile run');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOkay, that cuts down \u003cem\u003eslightly\u003c/em\u003e on how much code we need to write. Let's do the same thing for lifting weights and swimming:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction liftWeights() {\u003cbr\u003e  console.log('Pump iron');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction swimFortyLaps() {\u003cbr\u003e  console.log('Swim 40 laps');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAwesome! We've cut down a little bit more: \u003ccode\u003eMonday()\u003c/code\u003e could now look like\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Monday() {\u003cbr\u003e  runFiveMiles();\u003cbr\u003e  liftWeights();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile it is a tiny bit shorter than before, there is definitely still room for improvement. We know that every day, our routine includes two activities. We also know that the first activity is always a run. That means that the second activity can be variable. What if we created a function that took the second activity as a parameter?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction exerciseRoutine(postRunActivity) {\u003cbr\u003e  runFiveMiles();\u003cbr\u003e  postRunActivity();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that, in \u003ccode\u003eexerciseRoutine()\u003c/code\u003e, the \u003ccode\u003epostRunActivity\u003c/code\u003e parameter is a \u003cem\u003ecallback function\u003c/em\u003e — we call it after we call \u003ccode\u003erunFiveMiles()\u003c/code\u003e. Now let's try to use this new function we created in our \u003ccode\u003eMonday()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction Monday() {\u003cbr\u003e  exerciseRoutine(liftWeights);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that we aren't \u003cem\u003ecalling\u003c/em\u003e \u003ccode\u003eliftWeights\u003c/code\u003e. When we want to pass a function as a value, we pass it by \u003cem\u003ereference\u003c/em\u003e by omitting the parentheses. We're not running the function at this point. It's up to \u003ccode\u003eexerciseRoutine()\u003c/code\u003e to call the function when it is needed.\u003c/p\u003e  \u003cp\u003eIf we call \u003ccode\u003eMonday()\u003c/code\u003e, we'll see that we run five miles, and then we lift weights — awesome!\u003c/p\u003e  \u003ch2\u003eDefine First-Class Functions\u003c/h2\u003e  \u003cp\u003eFunctions in JavaScript are \u003cstrong\u003efirst-class objects\u003c/strong\u003e, which means they can be treated like any other object: they can be assigned to a variable, passed as values to other functions, returned as the value from another function, etc. They're super useful, as you can see — they even help us exercise in the mornings!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eNote that we stated above that JavaScript functions can be treated like any \u003cem\u003eother\u003c/em\u003e object. In JavaScript, functions are a special type of object!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eInline Functions\u003c/h2\u003e  \u003cp\u003eWhat if, though, we want to have a one-off day of Pilates in our exercise routine? Keep in mind that our \u003ccode\u003eexerciseRoutine()\u003c/code\u003e function requires a function as its first (and only) parameter. However, that function doesn't have to be defined beforehand! We can pass an \u003cem\u003eanonymous function\u003c/em\u003e to \u003ccode\u003eexerciseRoutine()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo start with, let's use the full function syntax we've come to know and love:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexerciseRoutine(function() {\u003cbr\u003e  console.log('Stretch! Work that core!');\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003e// \"Go for a five-mile run\"\u003cbr\u003e// \"Stretch! Work that core!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can rewrite this to be more concise by using an arrow function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexerciseRoutine(() =\u0026gt; {\u003cbr\u003e  console.log('Stretch! Work that core!');\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003e// Or even shorter:\u003cbr\u003eexerciseRoutine(() =\u0026gt; console.log('Stretch! Work that core!')); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBecause we only need to use our function this one time, there's no need to give it a name or assign it to a variable. Instead, we define it inline as an anonymous function, passing it as the argument when we call \u003ccode\u003eexerciseRoutine()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eReturning Functions\u003c/h2\u003e  \u003cp\u003eFunctions can also return other functions. This is useful when we want to package up a function and its environment, but don't want to call it \u003cem\u003ejust yet\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eFor example, let's say our morning routine involves drinking a cup of coffee, exercising immediately, and then at some point later (depending on how we feel), eating breakfast. What we'll have for breakfast depends on what kind of exercise we're doing.\u003c/p\u003e  \u003cp\u003eLet's translate this to a function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction morningRoutine(exercise) {\u003cbr\u003e  let breakfast;\u003cbr\u003e\u003cbr\u003e  if (exercise === liftWeights) {\u003cbr\u003e    breakfast = 'protein bar';\u003cbr\u003e  } else if (exercise === swimFortyLaps) {\u003cbr\u003e    breakfast = 'kale smoothie';\u003cbr\u003e  } else {\u003cbr\u003e    breakfast = 'granola';\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  exerciseRoutine(exercise);\u003cbr\u003e\u003cbr\u003e  // we could give this function a name if we wanted to, but since\u003cbr\u003e  // it's only available _inside_ morningRoutine(), we don't need to\u003cbr\u003e  return function() {\u003cbr\u003e    console.log(`Nom nom nom, this ${breakfast} is delicious!`);\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when we call \u003ccode\u003emorningRoutine()\u003c/code\u003e, our exercise routine will be logged as before, but we'll also get a function back:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst afterExercise = morningRoutine(liftWeights);\u003cbr\u003e// LOG: Go for a five-mile run\u003cbr\u003e// LOG: Pump iron\u003cbr\u003e\u003cbr\u003eafterExercise;\u003cbr\u003e//=\u0026gt; ƒ () { console.log(`Nom nom nom, this ${breakfast} is delicious!`); } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can call that function later:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eafterExercise();\u003cbr\u003e// LOG: Nom nom nom, this protein bar is delicious! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you haven't been following along, it's vitally important that you go back and do so. First-class functions are one of JavaScript's most powerful features, but it takes some practice for them to sink in.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://en.wikipedia.org/wiki/First-class_function\"\u003eWikipedia\u003c/a\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/First-class_function\"\u003eFirst-class function\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/#more-1037\"\u003eJavaScript is Sexy\u003c/a\u003e: \u003ca href=\"http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/#more-1037\"\u003eHigher-order functions\u003c/a\u003e\n\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g28d20289376b2cea6dd0f4d6d480e304","title":"Functions: Continued","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-javascript-functions-continued\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-functions-continued\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-functions-continued/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine a function using a function declaration\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003ehoisting\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003efunction expression\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eanonymous function\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine a function using a function expression\u003c/li\u003e \u003cli\u003eDefine an IIFE: \u003ccode\u003eInstantly-Invoked Function Expression\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003efunction-level scope\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003escope chain\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eclosure\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThis lab describes some more advanced concepts related to JavaScript functions. Be sure to take time to experiment or read up on a concept if you're not comfortable with the idea before moving on. If you're struggling here, the remainder of this module will be challenging. Fix any gaps now before moving on.\u003c/p\u003e  \u003cp\u003eWe also recommend that you complete the lab as you read through the sections. Reinforcing what you read by physically typing in the code will help make sure the concepts are locked in. We'll prompt you when it's a good time to shift modes from \"reading along\" to coding.\u003c/p\u003e  \u003ch2\u003eDefine a Function Using Function Declaration\u003c/h2\u003e  \u003cp\u003eIn JavaScript, the most common way to define functions is with a \u003cstrong\u003efunction declaration\u003c/strong\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction razzle() {\u003cbr\u003e  console.log(\"You've been razzled!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe word \u003ccode\u003erazzle\u003c/code\u003e becomes a \u003cem\u003epointer\u003c/em\u003e to some stored, potential, not-yet-actually-run bit of work (the function). We use the \u003cem\u003epointer\u003c/em\u003e to \u003cem\u003ecall\u003c/em\u003e or \u003cem\u003einvoke\u003c/em\u003e the function. We \u003cem\u003ecall\u003c/em\u003e the function by adding \u003ccode\u003e()\u003c/code\u003e after the \u003cem\u003epointer\u003c/em\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction razzle() {\u003cbr\u003e  console.log(\"You've been razzled!\");\u003cbr\u003e}\u003cbr\u003erazzle();\u003cbr\u003e//=\u0026gt; \"You've been razzled!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInterestingly, you can write function declarations \u003cem\u003eafter\u003c/em\u003e you call them:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erazzle(); //=\u0026gt; \"You've been razzled!\"\u003cbr\u003efunction razzle() {\u003cbr\u003e  console.log(\"You've been razzled!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFunctions can be passed arguments, given default arguments, etc.  Here's a brief code synopsis:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction razzle(lawyer=\"Billy\", target=\"'em\") {\u003cbr\u003e  console.log(`${lawyer} razzle-dazzles ${target}!`);\u003cbr\u003e}\u003cbr\u003erazzle(); //=\u0026gt; Billy razzle-dazzles 'em!\u003cbr\u003erazzle(\"Methuselah\", \"T'challah\"); //=\u0026gt; Methuselah razzle-dazzles T'challah! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eLAB\u003c/strong\u003e: Implement a function called \u003ccode\u003esaturdayFun\u003c/code\u003e. It should return a \u003ccode\u003eString\u003c/code\u003e like \u003ccode\u003e\"This Saturday, I want to ....!\"\u003c/code\u003e Fill in the \u003ccode\u003e...\u003c/code\u003e with the activity that's passed in as the first parameter. If nothing is passed in, default to \u003ccode\u003e\"roller-skate\"\u003c/code\u003e. Run \u003ccode\u003elearn\u003c/code\u003e to verify you've gotten the first set of tests passing before continuing with the lesson.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eHoisting\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eJavaScript's ability to call functions \u003cem\u003ebefore\u003c/em\u003e they appear in the code is called \u003cem\u003ehoisting\u003c/em\u003e. For hoisting to work, \u003cstrong\u003ethe function must be defined using a function declaration\u003c/strong\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eFunction Expression\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe've learned that programming languages feature \u003cem\u003eexpressions\u003c/em\u003e: arrangements of constants, variables, and symbols that, when interpreted by the language, produce a \u003cem\u003evalue\u003c/em\u003e. To review, open up your browser console and type in these examples:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1 + 1; //=\u0026gt; 2\u003cbr\u003e\"Razzle \" + \"dazzle!\"; //=\u0026gt; \"Razzle dazzle!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe examples above are expressions that return \u003cem\u003eprimitive values\u003c/em\u003e, but JavaScript also has \u003cem\u003efunction expressions\u003c/em\u003e that look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003evalue\u003c/em\u003e returned by this expression is the function itself. Go ahead and enter the above into the browser console; you should see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eUncaught SyntaxError: Function statements require a function name \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe problem is that, when the function expression appears by itself as shown above, \u003cstrong\u003eJavaScript does not recognize it as a function expression\u003c/strong\u003e; it instead interprets it as a function declaration that's missing its name. One way to tell the JavaScript engine that it's a function expression is to use the \u003ccode\u003egrouping operator ()\u003c/code\u003e to wrap the entire thing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(function() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRecall that the grouping operator is usually used in arithmetic operations to tell the JavaScript engine to evaluate the value that's inside it first. It's serving a similar purpose in this case: it's telling JavaScript to interpret what's inside the parentheses as a \u003cem\u003evalue\u003c/em\u003e. With the grouping operator in place, the JavaScript engine recognizes our function as a function expression. Enter the function into your console again, this time using the grouping operator. You should see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eƒ () {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJavaScript now correctly shows us the return value of our function expression: a \u003cem\u003efunction\u003c/em\u003e (indicated by the \u003ccode\u003eƒ ()\u003c/code\u003e) storing the work of logging our message.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eAnonymous Function\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eAn \u003cstrong\u003eanonymous function\u003c/strong\u003e is, quite simply, a function that doesn't have a name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUnlike a function declaration, there's no function name in front of the \u003ccode\u003e()\u003c/code\u003e. Note, however, that if we don't assign a name to the function, we have no way to call it. We lose access to our function immediately after it's created. So how can we invoke an anonymous function? We've seen one way before: we can use it as a callback function. For example, you'll often see anonymous functions passed as an argument to an event listener:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst button = document.getElementById('button');\u003cbr\u003ebutton.addEventListener('click', function() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur anonymous function is being passed as an argument to \u003ccode\u003eaddEventListener\u003c/code\u003e. The JavaScript engine \"stores it away\" as work to be executed later, when the button is clicked.\u003c/p\u003e  \u003ch2\u003eDefine a Function Using a Function Expression\u003c/h2\u003e  \u003cp\u003eAnother way we can solve the problem of accessing an anonymous function is by declaring a variable and assigning the function as its value. Recall that any expression can be assigned to a variable; this includes function expressions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fn = function() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code above defines our function using a function expression. If we ask JavaScript what's in \u003ccode\u003efn\u003c/code\u003e, it tells us:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efn; //=\u0026gt; ƒ () { console.log(\"Yet more razzling\") } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, \u003ccode\u003efn\u003c/code\u003e is a \u003cem\u003epointer\u003c/em\u003e to the stored block of work that hasn't yet been invoked. Just as with \u003cstrong\u003efunction declaration\u003c/strong\u003e, to actually do the work, we need to \u003cem\u003einvoke\u003c/em\u003e or \u003cem\u003ecall\u003c/em\u003e the function. We do this by adding \u003ccode\u003e()\u003c/code\u003e to the end of our \"pointer\", the variable name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fn = function() {\u003cbr\u003e  console.log(\"Yet more razzling\");\u003cbr\u003e} //=\u0026gt; undefined\u003cbr\u003efn; //=\u0026gt; ƒ () { console.log(\"Yet more razzling\") }\u003cbr\u003efn(); // \"Yet more razzling\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAlso as with a function declaration, if we need to pass arguments to the function, we would include those in the parentheses when we call the function.\u003c/p\u003e  \u003cp\u003eWe now know how to define a function as a function expression. Very importantly, \u003cstrong\u003e\u003cem\u003efunction expressions are not hoisted\u003c/em\u003e\u003c/strong\u003e. The same is true for any variable assignment: if we assign a \u003ccode\u003eString\u003c/code\u003e or the result of an arithmetic expression to a variable, those assignments are not hoisted either.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eLAB\u003c/strong\u003e: Implement a function expression called \u003ccode\u003emondayWork\u003c/code\u003e. The function should return a \u003ccode\u003eString\u003c/code\u003e like \u003ccode\u003e\"This Monday, I will ... .\"\u003c/code\u003e Fill in the \u003ccode\u003e...\u003c/code\u003e with the activity that's passed in as the first parameter. If nothing is passed in, default to \u003ccode\u003e\"go to the office\"\u003c/code\u003e. Run \u003ccode\u003elearn\u003c/code\u003e to verify you've gotten this set of tests passing before continuing with the lesson.\u003c/p\u003e  \u003ch2\u003eDefine an IIFE: Instantly-Invoked Function Expression\u003c/h2\u003e  \u003cp\u003eAnother way to invoke an anonymous function is by creating what's known as an \u003ccode\u003einstantly-invoked function expression (IIFE)\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAs a thought experiment, consider what happens here:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(function(baseNumber){ return baseNumber + 3 })(2); //=\u0026gt; ??? \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe recognize the first \u003ccode\u003e()\u003c/code\u003e as the grouping operator that tells the JavaScript engine to interpret the contents as a value — in this case, a function expression. What this means is that, in the IIFE statement, the value returned by the first set of parentheses is an anonymous function, which can be invoked (instantly).\u003c/p\u003e  \u003cp\u003eThe second \u003ccode\u003e()\u003c/code\u003e are the \u003ccode\u003e()\u003c/code\u003e of function invocation. When we put them immediately after the first set of parentheses, we're invoking the function that those parentheses return immediately after defining it. Try it out in the browser console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(function(baseNumber){ return baseNumber + 3; })(2); //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInterestingly, any variables, functions, \u003ccode\u003eArray\u003c/code\u003es, etc. that are defined \u003cem\u003einside\u003c/em\u003e of the function expression's body \u003cem\u003ecan't\u003c/em\u003e be seen \u003cem\u003eoutside\u003c/em\u003e of the IIFE. To see this, check the value of \u003ccode\u003ebaseNumber\u003c/code\u003e in the console. It's like opening up a micro-dimension, a bubble-universe, doing all the work you could ever want to do there, and then closing the space-time rift. We'll see some of the practical power of \"hiding things\" in IIFEs a little later in this lesson.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eFunction-Level Scope\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eJavaScript exhibits \"function-level\" scope. This means that if a function is defined \u003cem\u003einside another\u003c/em\u003e function, the inner function has access to all the parameters of, as well as any variables defined in, the outer function. This works recursively: if we nest a third function inside the inner function, it will have access to all the variables of both the inner and outer enclosing functions. Each of the enclosing parents' scopes are made available via the \u003cem\u003escope chain\u003c/em\u003e. We will define the scope chain a bit later in this lesson. Let's start by seeing it in action.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: This is where people \u003cstrong\u003ereally\u003c/strong\u003e start to get awed by JavaScript.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eConsider this code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction outer(greeting, msg=\"It's a fine day to learn\") { // 2\u003cbr\u003e  const innerFunction =  function(name, lang=\"Python\") { // 3\u003cbr\u003e    return `${greeting}, ${name}! ${msg} ${lang}`; // 4\u003cbr\u003e  }\u003cbr\u003e  return innerFunction(\"student\", \"JavaScript\"); // 5\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eouter(\"Hello\"); // 1\u003cbr\u003e//=\u0026gt; \"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's break this down:\u003c/p\u003e  \u003col\u003e \u003cli\u003eWe call \u003ccode\u003eouter\u003c/code\u003e, passing \u003ccode\u003e\"Hello\"\u003c/code\u003e as an argument.\u003c/li\u003e \u003cli\u003eThe argument (\u003ccode\u003e\"Hello\"\u003c/code\u003e) is saved in \u003ccode\u003eouter\u003c/code\u003e's \u003ccode\u003egreeting\u003c/code\u003e parameter. The other parameter, \u003ccode\u003emsg\u003c/code\u003e, is set to a default value.\u003c/li\u003e \u003cli\u003eHere's our old friend the function expression. It expects two arguments, to be stored in the parameters \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elang\u003c/code\u003e, and \u003ccode\u003elang\u003c/code\u003e is assigned the default value of \u003ccode\u003e\"Python\"\u003c/code\u003e. The function expression itself is saved in the local variable \u003ccode\u003einnerFunction\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eInside \u003ccode\u003einnerFunction\u003c/code\u003e we make use of its parameters, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elang\u003c/code\u003e, \u003cstrong\u003e\u003cem\u003eas well as\u003c/em\u003e\u003c/strong\u003e the \u003ccode\u003egreeting\u003c/code\u003e and \u003ccode\u003emsg\u003c/code\u003e parameters defined in innerFunction's containing (parent) function, \u003ccode\u003eouter\u003c/code\u003e. \u003ccode\u003einnerFunction\u003c/code\u003e has access to those variables via the scope chain.\u003c/li\u003e \u003cli\u003eFinally, inside \u003ccode\u003eouter\u003c/code\u003e, we invoke \u003ccode\u003einnerFunction\u003c/code\u003e, passing arguments that get stored in \u003ccode\u003einnerFunction\u003c/code\u003e's \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elang\u003c/code\u003e parameters.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eThis might look a little bit weird, but it generally makes sense to our intuition about scopes: inner things can see their parent outer things.\u003c/p\u003e  \u003cp\u003eNote that currently, the values of the arguments being passed to \u003ccode\u003einnerFunction\u003c/code\u003e are part of the \u003cstrong\u003edefinition\u003c/strong\u003e of \u003ccode\u003eouter\u003c/code\u003e. In order to change those values we have to modify the \u003ccode\u003eouter\u003c/code\u003e function. This is not ideal.\u003c/p\u003e  \u003cp\u003eWith a simple change, something miraculous can happen. Rather than having \u003ccode\u003eouter\u003c/code\u003e return the result of calling \u003ccode\u003einnerFunction\u003c/code\u003e, let's have it return the function itself:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction outer(greeting, msg=\"It's a fine day to learn\") {\u003cbr\u003e  const innerFunction =  function(name, lang=\"Python\") {\u003cbr\u003e    return `${greeting}, ${name}! ${msg} ${lang}`;\u003cbr\u003e  }\u003cbr\u003e  return innerFunction;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe return value of \u003ccode\u003eouter\u003c/code\u003e is now an \u003cstrong\u003eanonymous function\u003c/strong\u003e. To invoke it, we update the function call as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eouter(\"Hello\")(\"student\", \"JavaScript\");\u003cbr\u003e//=\u0026gt; \"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe function call is processed by the JavaScript engine from left to right. First, \u003ccode\u003eouter\u003c/code\u003e is called with the argument \"Hello.\" The return value of calling \u003ccode\u003eouter(\"Hello\")\u003c/code\u003e is itself a function and, therefore, can itself be called. We do this by chaining on the second set of parentheses. This is basically the same concept as assigning a function expression to a variable and using the variable name followed by \u003ccode\u003e()\u003c/code\u003e to invoke the function. You can almost think of \u003ccode\u003eouter(\"Hello\")\u003c/code\u003e as the \"name\" of the function that's returned by \u003ccode\u003eouter\u003c/code\u003e. It's the same as if we did this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst storedFunction = outer(\"Hello\");\u003cbr\u003estoredFunction(\"student\", \"JavaScript\");\u003cbr\u003e//=\u0026gt; \"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that we are no longer calling \u003ccode\u003einnerFunction\u003c/code\u003e from inside \u003ccode\u003eouter\u003c/code\u003e. Amazingly, the code works \u003cstrong\u003e\u003cem\u003eexactly the same\u003c/em\u003e\u003c/strong\u003e: it \u003cstrong\u003e\u003cem\u003estill\u003c/em\u003e\u003c/strong\u003e has access to those parent function's variables. It's like a little wormhole in space-time to the \u003ccode\u003eouter\u003c/code\u003e's scope!\u003c/p\u003e  \u003cp\u003eWe can tighten this code up a bit more: instead of assigning the function expression to \u003ccode\u003einnerFunction\u003c/code\u003e and returning that, let's just return the function expression.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction outer(greeting, msg=\"It's a fine day to learn\") {\u003cbr\u003e  return function(name, lang=\"Python\") {\u003cbr\u003e    return `${greeting}, ${name}! ${msg} ${lang};`\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eouter(\"Hello\")(\"student\", \"JavaScript\")\u003cbr\u003e//=\u0026gt; \"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo review: we first called \u003ccode\u003eouter\u003c/code\u003e, passing in the argument \"Hello\". \u003ccode\u003eouter\u003c/code\u003e \u003cstrong\u003ereturned an anonymous function\u003c/strong\u003e inside which the default value of \u003ccode\u003emsg\u003c/code\u003e and the passed-in value of \u003ccode\u003egreeting\u003c/code\u003e have now been set. It's almost as if \u003ccode\u003eouter\u003c/code\u003e returned:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction(name, lang=\"Python\") { // The \"inner\" function\u003cbr\u003e  return `Hello, ${name}! It's a fine day to learn ${lang}`\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe invoked this returned \u003cem\u003e\"inner\" function\"\u003c/em\u003e by adding the second set of parentheses and passing the arguments \u003ccode\u003e\"student\"\u003c/code\u003e and \u003ccode\u003e\"JavaScript\"\u003c/code\u003e, which were stored in \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elang\u003c/code\u003e. This filled in the final two values inside of the template string and returned:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"Hello, student! It's a fine day to learn JavaScript\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDefine \u003ccode\u003eClosure\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn the previous example, we could call the \"inner\" function, the \u003cstrong\u003eanonymous function\u003c/strong\u003e, a \"closure.\" It \"encloses\" the function-level scope of its parent. And, like a backpack, it can carry out the knowledge that it saw — \u003cem\u003eeven when you're out of the parent's scope\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eRecall the IIFE discussion. Since what's inside an IIFE can't be seen, if we wanted to let just tiny bits of information leak back out, we might want to pass that information back out, through a closure.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst array = (\u003cbr\u003e  function(thingToAdd) {\u003cbr\u003e    const base = 3;\u003cbr\u003e    return [\u003cbr\u003e      function() { return base + thingToAdd; },\u003cbr\u003e      function() { return base; }\u003cbr\u003e    ];\u003cbr\u003e  }\u003cbr\u003e)(2) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the value on the right of the \u003ccode\u003e=\u003c/code\u003e in the first line is a function expression. That function takes a single argument and returns an array that contains two functions. The \u003ccode\u003e(2)\u003c/code\u003e after the function expression executes that function (instantly), and the two inner functions are stored in the \u003ccode\u003earray\u003c/code\u003e variable.\u003c/p\u003e  \u003cp\u003eGo ahead and copy the code above into your browser console and take a look at the values of the two elements of \u003ccode\u003earray\u003c/code\u003e. You should see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earray[0]; //=\u0026gt; ƒ () { return base + thingToAdd; }\u003cbr\u003earray[1]; //=\u0026gt; ƒ () { return base; } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, if you try looking at the value of \u003ccode\u003ebase\u003c/code\u003e in the console you'll get a reference error: the value of \u003ccode\u003ebase\u003c/code\u003e is not accessible outside the function it's defined in. Now go ahead and \u003cem\u003ecall\u003c/em\u003e the two returned functions; you should see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earray[0](); //=\u0026gt; 5\u003cbr\u003earray[1](); //=\u0026gt; 3 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe two functions being returned in \u003ccode\u003earray\u003c/code\u003e are \u003cstrong\u003eclosures\u003c/strong\u003e; they have access to the \u003ccode\u003ebase\u003c/code\u003e variable because it's defined in their parent function. When they're executed, they \"let out\" the values of the sum and the original base number, allowing us to see them.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eScope Chain\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe mechanism behind all the cool stuff we just saw is the \u003cem\u003escope chain\u003c/em\u003e which allows functions defined inside functions (inside functions) to access all their parent (and grandparent) scopes' variables. Here's a simple example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction demoChain(name) {\u003cbr\u003e  const part1 = 'hi'\u003cbr\u003e  return function() {\u003cbr\u003e    const part2 = 'there'\u003cbr\u003e    return function() { \u003cbr\u003e      console.log(`${part1.toUpperCase()} ${part2} ${name}`);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edemoChain(\"Dr. Stephen Strange\")()() //=\u0026gt; HI there Dr. Stephen Strange \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen it is called, the innermost function has access to \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003epart1\u003c/code\u003e, and \u003ccode\u003epart2\u003c/code\u003e through the \u003cem\u003escope chain\u003c/em\u003e. As a result, when the \u003ccode\u003econsole.log()\u003c/code\u003e statement is run, the string includes all three values. That's awesome wormhole, space-time magic!\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eLAB\u003c/strong\u003e:\u003c/p\u003e  \u003cp\u003eImplement a function called \u003ccode\u003ewrapAdjective\u003c/code\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eIt should return a function  \u003cul\u003e \u003cli\u003eThis \"inner\" function should:\u003c/li\u003e \u003cli\u003etake a single parameter that should default to \u003ccode\u003e\"special\"\u003c/code\u003e. Name it however you wish.\u003c/li\u003e \u003cli\u003ereturn a \u003ccode\u003eString\u003c/code\u003e of the form \"You are ...\" where \u003ccode\u003e...\u003c/code\u003e should be the adjective this function received wrapped in visual flair\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eIt should take as parameter a \u003ccode\u003eString\u003c/code\u003e that will be used to create visual flair\u003c/li\u003e \u003cli\u003eYou may call the parameter whatever you like, but its default value should be \u003ccode\u003e\"*\"\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCall example: \u003ccode\u003econst encouragingPromptFunction = wrapAdjective(\"!!!\")\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThus a total call should be:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewrapAdjective(\"%\")(\"a dedicated programmer\") //=\u0026gt; \"You are %a dedicated programmer%!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e to verify you've gotten this set of tests passing.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've covered the basics of function declaration, invocation, and function scope. As a refresher on your skills, we've provided a simple lab to make sure that you're set for the new information coming up in the rest of this module.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/First-class_function\"\u003eWikipedia — First-class function\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/705173/what-is-meant-by-first-class-object\"\u003eStackOverflow — What is meant by 'first class object'?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://web.archive.org/web/20170606141950/http://helephant.com/2008/08/19/functions-are-first-class-objects-in-javascript/\"\u003eHelephant — Functions are first class objects in javascript (Wayback Machine)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://2ality.com/2012/09/expressions-vs-statements.html\"\u003e2ality — Expressions versus statements in JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/web/JavaScript/Reference/Operators/function\"\u003eMDN — Functions\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements\"\u003eMDN — Statements and declarations\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g1daea43705565d1f7f0b40343a906b7f","title":"Functions Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-basics-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice writing functions\u003c/li\u003e \u003cli\u003eExplain calling functions from within other functions\u003c/li\u003e \u003cli\u003ePractice basics of control flow and \u003ccode\u003ereturn\u003c/code\u003e statements\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eScuber, our transportation company, has gained some traction among moms and dads in New York City. It has also received a few requests.\u003c/p\u003e  \u003cp\u003eFirst, Scuber's executives want to ensure that Scuber's headquarters is near its customers. They would like you to write a function that takes in a pickup location for a passenger, and returns the number of blocks from its headquarters on 42nd Street. For example, if the pickup location is \u003ccode\u003e50\u003c/code\u003e (i.e., 50th Street), the return value should be \u003ccode\u003e8\u003c/code\u003e. The function's return value can then be used for another function that translates the number of blocks from headquarters to the distance in feet.\u003c/p\u003e  \u003cp\u003eSecond, customers want Scuber to calculate the number of feet travelled based on the distance. Write a function called \u003ccode\u003edistanceTravelledInFeet\u003c/code\u003e that takes in the beginning and destination blocks and returns the number of feet travelled. Each block in Manhattan is 264 feet long. For example \u003ccode\u003edistanceTravelledInFeet(34, 38)\u003c/code\u003e representing 34th St to 38th St, returns 1056 (\u003ccode\u003e(38-34)*264\u003c/code\u003e). You can assume that we are only calculating distance uptown/downtown, not from river to river.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e and look at the tests currently breaking. You will need to write these functions from scratch, and test them as you go to get them working. Remember to look through the tests, which are located in \u003ccode\u003etest/indexTest.js\u003c/code\u003e. It's a bit easier to think through the testing process in steps.\u003c/p\u003e  \u003col\u003e \u003cli\u003eThe first describe statement, \u003ccode\u003edescribe('index.js', function()\u003c/code\u003e, tells us the file being tested. Here, it's the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/li\u003e \u003cli\u003eOur second describe statement, \u003ccode\u003edescribe('distanceFromHqInBlocks()', function()\u003c/code\u003e, lets us know what the name of our function is. In this case, our test is expecting to find a function called \u003ccode\u003edistanceFromHqInBlocks()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eOur third statement, \u003ccode\u003eit('returns a distance in blocks', function()\u003c/code\u003e, describes what our function is doing. In this case, we're going to be calculating some kind of distance.\u003c/li\u003e \u003cli\u003eFinally, our last statement, \u003ccode\u003eexpect(distanceFromHqInBlocks(43)).to.equal(1)\u003c/code\u003e, tells us what our test is expecting the result to be. There are a couple really important clues here. Our first one is the 43. That tells us that our function is expecting an argument to be passed in, so we'll need to specify some kind of variable. Our other clue is the 1, because that tells us what the result is. If we're passing in 43, we're expecting our function to calculate that it's 1 block from headquarters.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eTry reading through all of the tests first, before you write any code! It will help you decide how to structure your code in the cleanest and most efficient manner.\u003c/p\u003e  \u003cp\u003eTo complete all of your work assignments, you'll need to write four functions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003edistanceFromHqInBlocks\u003c/code\u003e: Returns the number of blocks from Scuber's headquarters to the pickup location.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003edistanceFromHqInFeet\u003c/code\u003e: Returns the number of feet from Scuber's headquarters to the pickup location. You can use your \u003ccode\u003edistanceFromHqInBlocks\u003c/code\u003e function to help return the correct value here. Try something like this:\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003efunction distanceFromHqInBlocks (someValue) {\u003cbr\u003e  //returns the number of blocks given a value\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction distanceFromHqInFeet (someValue) {\u003cbr\u003e  distanceFromHqInBlocks(someValue);\u003cbr\u003e  // calls distanceFromHqInBlocks from inside the distanceFromHqInFeet function, passing the argument from distanceFromHqInFeet into distanceFromHqInBlocks\u003cbr\u003e  //the return value of distanceFromHqInBlocks can then be used to calculate feet\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003edistanceTravelledInFeet\u003c/code\u003e: Calculates the number of feet a passenger travels given a starting block and an ending block — it only calculates distance North and South (uptown/downtown). It uses the knowledge that a block is 264 feet long.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003ecalculatesFarePrice\u003c/code\u003e: Given the same starting and ending block as the previous test (\u003cem\u003ehint hint\u003c/em\u003e), return the fare for the customer. The first four hundred feet are free. For a distance between 400 and 2000 feet, the price is 2 cents per foot (not including 400, which are free!). Then Scuber charges a flat fare for a distance over 2000 feet and under 2500 feet. Finally, Scuber does not allow any rides over 2500 feet — the function returns \u003ccode\u003e'cannot travel that far'\u003c/code\u003e if a ride over 2500 feet is requested.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge35cdcf837660d4f13d83e8e5142ddd6","title":"Getter and Setter Methods","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-getter-and-setter-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-getter-and-setter-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-getter-and-setter-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-getter-and-setter-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuilds getter and setter methods to calculate computed properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've seen so far that we can write methods inside our \u003ccode\u003eclass\u003c/code\u003ees that allow us\nto access and change properties. These methods work fine in some cases. However,\nwe know about additional JS syntax that we can use: \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e. With \u003ccode\u003eget\u003c/code\u003e,\nwe can return calculated or dynamic data based an object properties, and with\n\u003ccode\u003eset\u003c/code\u003e we can change a property in a controlled way. In this lab, we will be\nbuilding pseudo-properties to illustrate these these concepts.\u003c/p\u003e\n\n\u003ch2\u003eBuilds Getter and Setter Method to Calculate Computed Properties\u003c/h2\u003e\n\n\u003cp\u003eLet's look at a quick example for review:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bird {\u003cbr\u003e  constructor(name) {\u003cbr\u003e    this.name = name;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  set phrase(phrase) {\u003cbr\u003e    this._phrase = phrase;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  get speak() {\u003cbr\u003e    return `${this.name} says ${this._phrase || 'squawk'}`;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet daffy = new Bird('Daffy');\u003cbr\u003edaffy.speak; // =\u0026gt; 'Daffy says squawk'\u003cbr\u003edaffy.phrase = \"it's rabbit season!\";\u003cbr\u003edaffy.speak; // =\u0026gt; 'Daffy says it's rabbit season!'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur \u003ccode\u003eBird\u003c/code\u003e \u003ccode\u003eclass\u003c/code\u003e accepts the parameter of \u003ccode\u003ename\u003c/code\u003e, which is set each time a\nnew instance of \u003ccode\u003eBird\u003c/code\u003e is created. When \u003ccode\u003ephrase\u003c/code\u003e is set, our new \u003ccode\u003eBird\u003c/code\u003e instance\ncan speak a phrase. If it is not set, it will squawk.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet buddy = Bird.new('Buddy');\u003cbr\u003e\u003cbr\u003ebuddy.phrase = \"What'cha doin'?\";\u003cbr\u003ebuddy.speak; // returns 'Buddy says What'cha doin'?'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBuilding on this concept, we're going to build our own shape calculator!\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst, let's create a \u003ccode\u003eclass\u003c/code\u003e of \u003ccode\u003eCircle\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eCircle\u003c/code\u003e will accept 1 parameter, \u003ccode\u003eradius\u003c/code\u003e, and use \u003ccode\u003ethis.radius\u003c/code\u003e to store the\nvalue\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eMath.PI\u003c/code\u003e to get an accurate measurement of \u003ca href=\"https://en.wikipedia.org/wiki/Pi\"\u003epi\u003c/a\u003e (π)\u003c/li\u003e\n\u003cli\u003eDefine getter methods for \u003ccode\u003ediameter\u003c/code\u003e, \u003ccode\u003ecircumference\u003c/code\u003e, and \u003ccode\u003earea\u003c/code\u003e which\nwill calculate each value using \u003ccode\u003ethis.radius\u003c/code\u003e and pi\u003c/li\u003e\n\u003cli\u003eDefine setter methods for \u003ccode\u003ediameter\u003c/code\u003e, \u003ccode\u003ecircumference\u003c/code\u003e, and \u003ccode\u003earea\u003c/code\u003e which\nwill accept values for each calculation, calculate the \u003cem\u003eradius\u003c/em\u003e based on the\ninput value and \u003cem\u003eset\u003c/em\u003e \u003ccode\u003ethis.radius\u003c/code\u003e accordingly\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor reference, here are the formulas for calculating diameter, circumference and\narea:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDiameter = radius • 2\u003c/li\u003e\n\u003cli\u003eCircumference = π • diameter\u003c/li\u003e\n\u003cli\u003eArea = π • radius\u003csup\u003e2\u003c/sup\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDon't forget about \u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003ePEMDAS\u003c/a\u003e!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAll instances of \u003ccode\u003eCircle\u003c/code\u003e should be able to calculate the \u003ccode\u003ediameter\u003c/code\u003e,\n\u003ccode\u003ecircumference\u003c/code\u003e, and \u003ccode\u003earea\u003c/code\u003e based on the given \u003ccode\u003eradius\u003c/code\u003e. All instances should\nalso be able to set \u003ccode\u003ethis.radius\u003c/code\u003e by setting a value to \u003ccode\u003ediameter\u003c/code\u003e,\n\u003ccode\u003ecircumference\u003c/code\u003e, or \u003ccode\u003earea\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eGetter and setter methods are very useful for doing things behind-the-scenes in\nJavaScript. Using a setter, you can call a function each time the value of a\npseudo-property is changed, making sure all data on an \u003ccode\u003eclass\u003c/code\u003e instance is\nconsistent. Using a getter, you can return a computed value as though it is a\nproperty! Just as you can set and retrieve basic information from properties,\nyou can also perform a number of functions that will \"automagically\" spit out\nthe output you want.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://javascript.info/property-accessors\"\u003eProperty getters and setters\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g237dfd9e54e6efc54e117cbe1a496442","title":"HTML5 Containers Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html5-semantic-containers-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/html5-semantic-containers-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html5-semantic-containers-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html5-semantic-containers-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\u003cp\u003eIn HTML5, there are many new tags that help us describe \u003cem\u003ewhat kind of content\u003c/em\u003e exists within a specific tag. These are referred to as \u003cem\u003esemantic\u003c/em\u003e elements. In this lesson, we will be introducing some of the most useful tags.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIntroduce common semantic tags in HTML\u003c/li\u003e\n\u003cli\u003eExplore their use by applying them to existing content\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eNon-Semantic Elements\u003c/h2\u003e\n\u003cp\u003eBefore we dive into semantic elements, lets see some examples of \u003cem\u003enon-semantic\u003c/em\u003e elements. Two of the most commonly used HTML tags are \u003ccode\u003espan\u003c/code\u003e and \u003ccode\u003ediv\u003c/code\u003e. Neither tag has automatic styling. The only difference between them: content wrapped with the \u003ccode\u003espan\u003c/code\u003e tag will display without line breaks, whereas content wrapped with \u003ccode\u003ediv\u003c/code\u003e \u003cem\u003ewill\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;span\u0026gt;This content will share the same line...\u0026lt;/span\u0026gt;\u0026lt;span\u0026gt;...as this content\u0026lt;/span\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  This message will appear on a new line\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese tags certainly have their uses, and developers can sometimes favor them \u003cem\u003ebecause\u003c/em\u003e of the lack of styling. However, they don't give any indication as to what type of content they're wrapping. They are just \u003cem\u003edividers\u003c/em\u003e of the content.\u003c/p\u003e\n\u003ch2\u003eSemantic Elements\u003c/h2\u003e\n\u003cp\u003eMany semantic elements also lack automatic styling, and act very similar to the \u003ccode\u003ediv\u003c/code\u003e tag. What they provide, instead, is an explanation of what they wrap.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;header\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;footer\u0026gt;\u003c/code\u003e Tags\u003c/h4\u003e\n\u003cp\u003eThe first two semantic tags to discuss are the \u003ccode\u003eheader\u003c/code\u003e and \u003ccode\u003efooter\u003c/code\u003e tags. The purpose of these may seem obvious to those who have used document editors like Microsoft Word. The \u003ccode\u003eheader\u003c/code\u003e tag is used to wrap all content we would want to contain within the top, (header), portion of a page. The \u003ccode\u003efooter\u003c/code\u003e is for everything at the foot, (bottom), of a page:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;header\u0026gt;\u003cbr\u003e  \u0026lt;!-- Headers often contain company logos --\u0026gt;\u003cbr\u003e\u0026lt;/header\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!-- All the main content of a web page goes in between --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;footer\u0026gt;\u003cbr\u003e  \u0026lt;!-- Footers often contain resources, privacy policy links, and copyright information --\u0026gt;\u003cbr\u003e\u0026lt;/footer\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCommonly, a website with many different pages will have the same header and footer content on each page...the only content that changes is what is in between.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;nav\u0026gt;\u003c/code\u003e Tags\u003c/h4\u003e\n\u003cp\u003eTypically, inside or just below the header section of a page are navigation links to help users access different parts of a website. For this block of links, we can use the \u003ccode\u003enav\u003c/code\u003e tag. Wrapping \u003ccode\u003enav\u003c/code\u003e around links helps describe those links as the page navigation itself:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;nav\u0026gt;\u003cbr\u003e  \u0026lt;a href=\"about.html\"\u0026gt;About\u0026lt;/a\u0026gt;\u003cbr\u003e  \u0026lt;a href=\"contact.html\"\u0026gt;Contact\u0026lt;/a\u0026gt;\u003cbr\u003e\u0026lt;/nav\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA reader glancing over an HTML page can quickly see what these links are meant for. The \u003ccode\u003enav\u003c/code\u003e tag is not meant for all links, just those typically used for site navigation.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e Tag\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003emain\u003c/code\u003e tag specifies the \u003cem\u003emain\u003c/em\u003e content of a web page. This would typically be everything in between the \u003ccode\u003eheader\u003c/code\u003e and \u003ccode\u003efooter\u003c/code\u003e areas, and may contain many nested tags:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;header\u0026gt;\u0026lt;/header\u0026gt;\u003cbr\u003e\u0026lt;nav\u0026gt;\u0026lt;/nav\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;main\u0026gt;\u003cbr\u003e  \u0026lt;!-- All the main content of a web page goes here --\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith these few tags, common content within a web page can be separated in a way that is easy to understand.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;section\u0026gt;\u003c/code\u003e Tag\u003c/h4\u003e\n\u003cp\u003eWithin the \u003ccode\u003emain\u003c/code\u003e tag, we can continue to breakdown content into specific, meaningful sections. One way we can do this is to use the...well...\u003ccode\u003esection\u003c/code\u003e tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;section\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet...\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet...\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/section\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003esection\u003c/code\u003e tag can be used to define specific portions of a web page. A page may have multiple boxes of content within a larger container like \u003ccode\u003emain\u003c/code\u003e. For each box, we can use a \u003ccode\u003esection\u003c/code\u003e tag to separate the content.\u003c/p\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;article\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;aside\u0026gt;\u003c/code\u003e Tags\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003esection\u003c/code\u003e tag is more informative than the \u003ccode\u003ediv\u003c/code\u003e tag, but it still may not be as specific as we need. For particular parts of a web page, we have semantic options like \u003ccode\u003earticle\u003c/code\u003e and \u003ccode\u003easide\u003c/code\u003e. The \u003ccode\u003earticle\u003c/code\u003e tag is for containing written content such as a news story or blog post. The \u003ccode\u003easide\u003c/code\u003e tag is for containing content that may be related to other content, but is better kept separated.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;article\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;First Human Digitizes Brain\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;In 2018, Chrome Boi became the first human to digitize their brain. They now live in the Internet.\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/article\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;aside\u0026gt;\u003cbr\u003e  \u0026lt;h4\u0026gt;Once human, now digital\u0026lt;/h4\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;A quick visit to https://en.wikipedia.org/wiki/Draft:Chrome_Boi will show you the ascended individual\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/aside\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\n\u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;figcaption\u0026gt;\u003c/code\u003e Tags\u003c/h4\u003e\n\u003cp\u003eAlong with \u003ccode\u003esection\u003c/code\u003e, \u003ccode\u003earticle\u003c/code\u003e, and \u003ccode\u003easide\u003c/code\u003e, we also have some tags specific for containing image and media content. The \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e tag wraps self-contained media content. For instance, a blog post could have an accompanying image to support the content.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003efigure\u003c/code\u003e tag also comes with a companion for providing captions, the \u003ccode\u003efigcaption\u003c/code\u003e tag. Since \u003ccode\u003efigure\u003c/code\u003e is used for media, the \u003ccode\u003efigcaption\u003c/code\u003e tag can be used to add an additional message about that media or its source.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;section\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;article\u0026gt;\u003cbr\u003e    Lorem ipsum dolor sit amet...\u003cbr\u003e  \u0026lt;/article\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;figure\u0026gt;\u003cbr\u003e    \u0026lt;img src=\"images/intro-pic.jpg\"  alt=\"An exceptional living room.\" title=\"Welcome to Exceptional Living Rooms\"\u0026gt;\u003cbr\u003e    \u0026lt;figcaption\u0026gt;\"An Exceptional Living Room\" by Leonardo DaVinci, photograph\u0026lt;/figcaption\u0026gt;\u003cbr\u003e  \u0026lt;/figure\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/section\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've wrapped an image in the \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e tag, and included a \u003ccode\u003e\u0026lt;figcaption\u0026gt;\u003c/code\u003e providing the title and creator of the image.\u003c/p\u003e\n\u003ch2\u003ePractice with Semantic Elements\u003c/h2\u003e\n\u003cp\u003eLet's practice what we've discussed. In \u003ccode\u003eindex.html\u003c/code\u003e, we have a web page with some example content for a real estate agency. However, most of the HTML tags within the \u003ccode\u003ebody\u003c/code\u003e are non-semantic \u003ccode\u003ediv\u003c/code\u003e and \u003ccode\u003espan\u003c/code\u003e tags.\u003c/p\u003e\n\u003cp\u003eYour task is to read through the provided comments and add in the appropriate semantic tags. Run \u003ccode\u003elearn\u003c/code\u003e to test your work and use the provided error messaging to work through the tests. When finished, run \u003ccode\u003elearn submit\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e there are a \u003cem\u003efew\u003c/em\u003e semantic tags in \u003ccode\u003eindex.html\u003c/code\u003e not explicitly discussed in this readme. Use the comments to figure out what tag you will have to use.\u003c/p\u003e\n\u003cp\u003eMake sure that for every \u003ccode\u003ediv\u003c/code\u003e and \u003ccode\u003espan\u003c/code\u003e you replace, that you also replace the corresponding \u003cem\u003eclosing\u003c/em\u003e tag!\u003c/p\u003e\n\u003cp\u003eYou can view \u003ccode\u003eindex.html\u003c/code\u003e in the browser by running \u003ccode\u003ehttpserver\u003c/code\u003e or opening the file in a separate browser tab. It is worth noting, though, that the layout of the page won't change as you add semantic tags. We are not changing the styling or structure, but the description of the content contained on the page.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eUsing semantic tags serves multiple functions. They provide a greater \u003cem\u003ereadability\u003c/em\u003e for yourself or anyone else who may edit an HTML document in the future. They also make it easier to \u003cem\u003estyle\u003c/em\u003e your pages. As a bonus, they help search engines identify and categorize content on websites.\u003c/p\u003e\n\u003cp\u003eWhen using Cascading Style Sheets, we can easily set up styling for \u003cem\u003ejust\u003c/em\u003e the specific semantic elements. These tags are more natural to write and faster to understand than \u003ccode\u003ediv\u003c/code\u003e and \u003ccode\u003espan\u003c/code\u003e tags.\u003c/p\u003e\n\u003cp\u003eThere are more semantic tags to explore, some of which you've already used! Tags such as \u003ccode\u003eform\u003c/code\u003e and \u003ccode\u003etable\u003c/code\u003e are semantic as well, as they describe the contents within.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g2feb1a4d6a50abbe11aa694944dd7ce5","title":"HTML5 Embedded Videos Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html5-video-embed-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/html5-video-embed-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html5-video-embed-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html5-video-embed-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\u003cp\u003eAdding images to HTML content is a great way to make websites more appealing and engaging for your users. Sometimes, though, we want \u003cem\u003ejust a little more pizzazz\u003c/em\u003e and we need to add glamorous \u003cstrong\u003evideo content\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eIn the past, adding video to HTML was only possible using the \u003ccode\u003eiframe\u003c/code\u003e tag. This method is still implemented, and sites like \u003ca href=\"youtube.com\"\u003eYoutube\u003c/a\u003e still provide iframe code as a default option. However, with HTML5, a \u003cem\u003enew\u003c/em\u003e tag was introduced: \u003ccode\u003evideo\u003c/code\u003e. The \u003ccode\u003evideo\u003c/code\u003e tag provides a more \u003cem\u003esemantic\u003c/em\u003e method for including video. It also allows for some customization of videos that iframe does not. Namely, with the \u003ccode\u003evideo\u003c/code\u003e tag, we can provide \u003cem\u003emultiple\u003c/em\u003e video source links.\u003c/p\u003e\n\u003cp\u003eIn this lesson, we will be exploring the HTML \u003ccode\u003evideo\u003c/code\u003e tag then applying what we've learned in a brief lab.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIntroduce the HTML \u003ccode\u003evideo\u003c/code\u003e tag and its attributes\u003c/li\u003e\n\u003cli\u003ePractice using the \u003ccode\u003evideo\u003c/code\u003e tag by creating our own\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroducing Embedded Videos\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003evideo\u003c/code\u003e tag, similar to \u003ccode\u003eimg\u003c/code\u003e, can display videos from files stored locally (i.e. saved on your computer or in the same directory as your \u003ccode\u003ehtml\u003c/code\u003e file) or videos from somewhere else on the internet.\u003c/p\u003e\n\u003cp\u003eIn a basic implementation, like \u003ccode\u003eimg\u003c/code\u003e tags, \u003ccode\u003evideo\u003c/code\u003e tags contain a \u003ccode\u003esrc\u003c/code\u003e attribute pointing to the file we want to play:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;video src=\"videofile.ogg\" autoplay poster=\"posterimage.jpg\"\u0026gt;\u0026lt;/video\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile you will certainly see this style on the internet, we recommend the following approach because it ensures the greatest amount of compatibility.\u003c/p\u003e\n\u003cp\u003eWe can \u003cem\u003ewrap\u003c/em\u003e the \u003ccode\u003evideo\u003c/code\u003e tag around multiple, separate \u003ccode\u003esource\u003c/code\u003e tags. A basic \u003ccode\u003evideo\u003c/code\u003e element, complete with multiple video sources may look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;video\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"https://s3.amazonaws.com/ironboard-learn/cat_video.mp4\" type=\"video/mp4\"\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"https://s3.amazonaws.com/ironboard-learn/cat_video.ogg\" type=\"video/ogg\"\u0026gt;\u003cbr\u003e\u0026lt;/video\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhy two sources? Compatibility! When HTML is rendered, the browser will try to load the first source. If it fails, it will \u003cem\u003efall back\u003c/em\u003e to the second source.\u003c/p\u003e\n\u003cp\u003eAll modern browsers support MP4 files. If we had the above video on a website, its likely that more than 99% of visitors will see the MP4 version. However, if a site visitor is still using an older version of a browser like Firefox, the MP4 file will fail to load. At this point, the OGG file will load instead. It is still useful to have an alternate video format for this reason.\u003c/p\u003e\n\u003cp\u003eIn addition to multiple sources, we can provide a fall back message. This message will appear to users in the event that they are using a browser that is \u003cem\u003eso\u003c/em\u003e out of date, it doesn't support HTML5. For this, we add something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;video\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"https://s3.amazonaws.com/ironboard-learn/cat_video.mp4\" type=\"video/mp4\"\u0026gt;\u003cbr\u003e  \u0026lt;source src=\"https://s3.amazonaws.com/ironboard-learn/cat_video.ogg\" type=\"video/ogg\"\u0026gt;\u003cbr\u003e  Your browser does not support HTML5 video  \u0026lt;a href=\"https://browsehappy.com/\" target=\"_blank\"\u0026gt;Please upgrade your browser\u0026lt;/a\u0026gt;\u003cbr\u003e\u0026lt;/video\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf a user was still hanging on to Internet Explorer 8 (they are out there), they won't see the video content. Instead, they will see the message \"Your browser does not support HTML5 video\", followed by a link to \u003ca href=\"browsehappy.com\"\u003ebrowsehappy.com\u003c/a\u003e, where they can download an up-to-date browser.\u003c/p\u003e\n\u003ch4\u003eVideo Tag Attributes\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003evideo\u003c/code\u003e tag has some important attributes worth noting:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003econtrols\u003c/code\u003e - the embedded video will always show video controls\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eautoplay\u003c/code\u003e - the video will play on page load, rather than waiting for a user to click play\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e attributes are also important. These set the size of the video, just as with other HTML tags. However, it is good practice to set these to specific values. Without them, the video element may flicker while the page is loading.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003esource\u003c/code\u003e tag is only ever used for multiple media resources, as we have in our example. The \u003ccode\u003esrc\u003c/code\u003e attribute of \u003ccode\u003esource\u003c/code\u003e is always required, as it is the path to the file we want to play. The \u003ccode\u003etype\u003c/code\u003e tag is helpful in defining what format the media is in.\u003c/p\u003e\n\u003ch2\u003eBuilding a Video Element\u003c/h2\u003e\n\u003cp\u003eIts time to apply what we've just learned! In \u003ccode\u003eindex.html\u003c/code\u003e, some basic code is provided. Your task is to create a video element complete with \u003cem\u003etwo\u003c/em\u003e video sources and the attributes we've discussed. For this portion of the lesson, we will be using a video stored elsewhere on the internet...a \u003cem\u003edramatic\u003c/em\u003e real estate video! There are two video formats, MP4 and OGG:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCaution: The music in these videos may be loud\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMP4 video: \u003ca href=\"https://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/real-estate-lab-assets/real-estate.mp4\"\u003ehttps://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/real-estate-lab-assets/real-estate.mp4\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eOGG video: \u003ca href=\"https://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/real-estate-lab-assets/real-estate.ogg\"\u003ehttps://curriculum-content.s3.amazonaws.com/skills-front-end-web-development/real-estate-lab-assets/real-estate.ogg\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo complete this lab:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate a \u003ccode\u003evideo\u003c/code\u003e tag with the attributes \u003ccode\u003econtrols\u003c/code\u003e and \u003ccode\u003eautoplay\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eSet the width of \u003ccode\u003evideo\u003c/code\u003e to '600px', and the height to '400px'\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003esource\u003c/code\u003e tag for the MP4 video URL above that has appropriate \u003ccode\u003esrc\u003c/code\u003e and \u003ccode\u003etype\u003c/code\u003e attributes\u003c/li\u003e\n\u003cli\u003eCreate a fall back \u003ccode\u003esource\u003c/code\u003e tag for the OGG video URL above that has appropriate \u003ccode\u003esrc\u003c/code\u003e and \u003ccode\u003etype\u003c/code\u003e attributes\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e and follow the test messages as you go. You can also run \u003ccode\u003ehttpserver\u003c/code\u003e or open \u003ccode\u003eindex.html\u003c/code\u003e in a browser tab to see your work as you build it. Run \u003ccode\u003elearn submit\u003c/code\u003e once you've passed all the tests.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWith the \u003ccode\u003evideo\u003c/code\u003e tag, we can spice up our plain old text websites, whether it is a demo reel for a company product or a personal vlog.\u003c/p\u003e\n\u003cp\u003eWe can customize the size of the video on our page and make sure our video is viewable by every site visitor. This way, we're not just catering to those with the most up-to-date browsers.\u003c/p\u003e\n\u003cp\u003eIn addition to \u003ccode\u003evideo\u003c/code\u003e, there is also an \u003ccode\u003eaudio\u003c/code\u003e tag that plays MP3, OGG, and WAV files. The \u003ccode\u003eaudio\u003c/code\u003e tag works the same way as \u003ccode\u003evideo\u003c/code\u003e! It has the same \u003ccode\u003econtrols\u003c/code\u003e and \u003ccode\u003eautoplay\u003c/code\u003e attributes, and also uses the nested \u003ccode\u003esource\u003c/code\u003e tag! You've actually learned two useful HTML5 elements in one!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfa2dc680c3bc4a92f63a325a95b30100","title":"HTML Forms Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-forms-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-forms-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-forms-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-forms-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eBusiness of all types and sizes want to provide multiple ways for their potential\ncustomers to contact them.  One of the most common ways to do this is on a website is to provide\na \u003cem\u003econtact form\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn this lab, we will practice what we've learned about HTML forms by creating a\ncontact form similar to those we see on business websites.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eApply what we know of HTML forms to build a functional a contact form\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eReinforcing Our Understanding of HTML Forms\u003c/h2\u003e\n\n\u003cp\u003eTo see and test your form in action, run \u003ccode\u003ehttpserver\u003c/code\u003e or open \u003ccode\u003eindex.html\u003c/code\u003e in a\nnew browser tab. To test your work, run \u003ccode\u003elearn\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSome basic HTML has been provided for this lab, along with HTML comments on what\nis needed.  Follow the provided comments and test messages to see what is needed\nwhen creating the form.  At completion, your form should have:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA \u003cem\u003erequired\u003c/em\u003e text input for a full name with a placeholder, \"Enter Name\"\u003c/li\u003e\n\u003cli\u003eA \u003cem\u003erequired\u003c/em\u003e email type input for an email address with a placeholder, \"Enter Email\"\u003c/li\u003e\n\u003cli\u003eA \u003cem\u003etel\u003c/em\u003e type input for a telephone number with a placeholder, \"Enter Telephone (optional)\"\u003c/li\u003e\n\u003cli\u003eA text area for a user to include a message with a placeholder, \"Enter Message\"\u003c/li\u003e\n\u003cli\u003eLabels for each text input\u003c/li\u003e\n\u003cli\u003eA checkbox with text of your choosing\u003c/li\u003e\n\u003cli\u003eA submit button\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eThe \u003ccode\u003erequired\u003c/code\u003e Attribute\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003erequired\u003c/code\u003e attribute prevents the browser from submitting a form.  All\nrequired inputs must be filled in properly, preventing an unneeded page reload.\nThis functionality is baked into HTML5 for us automatically. All that is\nneeded is to include the word \u003ccode\u003erequired\u003c/code\u003e as an attribute, without setting it to\nany value.\u003c/p\u003e\n\n\u003cp\u003eWhen an input is required, the \u003ccode\u003etype\u003c/code\u003e attribute (e.g., \u003ccode\u003etext\u003c/code\u003e vs \u003ccode\u003eemail\u003c/code\u003e) will\ndetermine what the browser checks. In the case of an email, for instance, the input must\nmatch the format of an email address, including the \"@\".\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eForms are an essential way for users to submit data to a website. Some forms,\nlike search bars, only contain a single input field, but we can make them as\ncomplex as we need.\u003c/p\u003e\n\n\u003cp\u003eWe are only focused on building out the front end side of this form.  When a\nform is submitted, it is up to the \u003cem\u003ebackend\u003c/em\u003e of a website to decide how to\nhandle and store form data when submitted.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb829ea7bf8b9ca32d31662bf641fdd66","title":"HTML IFrames Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-iframes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-iframes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-iframes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-iframes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eProblem Statement\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eiframe\u003c/code\u003e element displays an entire HTML file inside itself, allowing one\nHTML page to be contained within another. Before JavaScript became widely used\nin websites, \u003cem\u003eanytime\u003c/em\u003e a user clicked on a link, the entire page would refresh.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eiframe\u003c/code\u003e tag can be used to reload specific parts of a page without changing\nothers, providing a better user experience. For example, when a navigation link\nwas clicked, the whole page would not reload: instead only the iframe portion.\u003c/p\u003e\n\n\u003cp\u003eWith JavaScript, HTML content can be added and removed programmatically without\nneeding a refresh. This replaced the need for the \u003ccode\u003eiframe\u003c/code\u003e tag in many websites.\u003c/p\u003e\n\n\u003cp\u003eStill, there are some specific uses where \u003ccode\u003eiframe\u003c/code\u003e remains valuable. One\nexample: embedded maps. Embedded maps are a simple option for websites that need\na custom map (i.e. contact pages for businesses). An \u003ccode\u003eiframe\u003c/code\u003e is used to contain\nthe entire interactive map page within a websites. While using an \u003ccode\u003eiframe\u003c/code\u003e, we\ndo not need to write our own JavaScript and we can incorporate all that\npre-built functionality neatly.\u003c/p\u003e\n\n\u003cp\u003eIn this lab, we will add an iframe to our existing HTML contact form for\nWalkies, Inc. To do this, we will be incorporating an embedded map similar to\nthose we see on business websites.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIncorporate an embedded Google map from scratch\u003c/li\u003e\n\u003cli\u003eReinforce our understanding of iframes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIncorporate an Embedded Google Map from Scratch\u003c/h2\u003e\n\n\u003cp\u003eBefore we can get to writing HTML, we need to get a map to embed within an\niframe.\u003c/p\u003e\n\n\u003cp\u003eIn your browser, head to\n\u003ca href=\"https://www.google.com/maps\"\u003ehttps://www.google.com/maps\u003c/a\u003e and search for a\ngeneral location. For instance, a great place to walk dogs in New York City is\n\u003ccode\u003eCentral Park, New York, NY\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow, click the menu icon located at the top left of the screen and select\n\u003cstrong\u003eShare or embed map\u003c/strong\u003e. \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-iframes/share-or-embed-map.png\" alt=\"Share or Embed Map\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThen click the \u003cstrong\u003eEmbed map\u003c/strong\u003e tab.\u003c/p\u003e\n\n\u003cp\u003eGoogle provides the entire iframe tag, but we will add some additional\nattributes manually. Highlight the iframe embed code and copy it to your\nclipboard. In \u003ccode\u003eindex.html\u003c/code\u003e paste the code snippet.\u003c/p\u003e\n\n\u003ch2\u003eReinforce Our Understanding of Iframes\u003c/h2\u003e\n\n\u003cp\u003eWe've already got a basic \u003ccode\u003eiframe\u003c/code\u003e from Google. To pass all the tests, we'll\nneed to add the following attributes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eEdit/Add a \u003ccode\u003ewidth\u003c/code\u003e attribute set to \"100%\"\u003c/li\u003e\n\u003cli\u003eEdit/Add a \u003ccode\u003eheight\u003c/code\u003e attribute set to \"400px\"\u003c/li\u003e\n\u003cli\u003eChange the \u003ccode\u003eframeborder\u003c/code\u003e attribute to \"1\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e to test your work and \u003ccode\u003elearn submit\u003c/code\u003e once you've passed all the\ntests.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eiframe\u003c/code\u003e element allows us to load another HTML page inside our own HTML\npage. It is like looking through a window from \u003cem\u003eour\u003c/em\u003e page into another page\ndisplaying a Google Map.\u003c/p\u003e\n\n\u003cp\u003eWhile many uses of \u003ccode\u003eiframe\u003c/code\u003e tags were replaced with JavaScript, they still\nprove valuable in specific cases.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developers.google.com/maps/documentation/embed/guide\"\u003eGoogle Maps developer documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8210a89a3135f8476f489715fddbf746","title":"Initializing Instances","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-initializing-instances\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-initializing-instances/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-initializing-instances\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-initializing-instances/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a class in JavaScript using the class keyword\u003c/li\u003e\n\u003cli\u003eProvide a JavaScript class's constructor instantiation data for an instance\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we are going to practice creating Object Oriented classes and instances using JavaScript's \u003ccode\u003eclass\u003c/code\u003e keyword. We are also going to use JavaScript's class \u003ccode\u003econstructor\u003c/code\u003e to instantiate data into a class. In other words, we're going to create a class, and then put some data in it.\u003c/p\u003e\n\n\u003ch2\u003eCreate a class in JavaScript using the class keyword\u003c/h2\u003e\n\n\u003cp\u003eRemember, when we want to create a class in JavaScript, we want to create it using the \u003ccode\u003eclass\u003c/code\u003e keyword:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eProvide a JavaScript class's \u003ccode\u003econstructor\u003c/code\u003e instantiation data for an instance\u003c/h2\u003e\n\n\u003cp\u003eWithin our class, JavaScript class's \u003ccode\u003econstructor\u003c/code\u003e allows us to pass data to our new class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog {\u003cbr\u003e  constructor(name, breed) {\u003cbr\u003e    this.name = name;\u003cbr\u003e    this.breed = breed;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou could then create data for the class above by doing something like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet bigFluffyDog1 = new Dog(\"Buzz\", \"greatPyrenees\");\u003cbr\u003elet bigFluffyDog2 = new Dog(\"Woody\", \"labrador\");\u003cbr\u003e\u003cbr\u003ebigFluffyDog1; // =\u0026gt; Dog { name: 'Buzz', breed: 'greatPyrenees' }\u003cbr\u003ebigFluffyDog2; // =\u0026gt; Dog { name: 'Woody', breed: 'labrador' }\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eTo practice OOP concepts, let's create 3 classes that use constructor methods. These constructors will assign properties based on initial parameters.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a class for \u003ccode\u003eBreakfast\u003c/code\u003e. \u003ccode\u003eBreakfast\u003c/code\u003e will have a constructor with a food and a drink.\u003c/li\u003e\n\u003cli\u003eCreate a class for \u003ccode\u003eLunch\u003c/code\u003e. \u003ccode\u003eLunch\u003c/code\u003e will have a constructor with a salad, a soup, and a drink.\u003c/li\u003e\n\u003cli\u003eCreate a class for \u003ccode\u003eDinner\u003c/code\u003e. Since dinner is a little bit fancier, \u003ccode\u003eDinner\u003c/code\u003e will have a constructor with salad, soup, entree, and dessert. Indicate that dessert is intended to be a private property by including an underscore (\u003ccode\u003e_\u003c/code\u003e) at the beginning.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBy effectively creating classes and instances, you have mastered the beginning of Object Oriented JavaScript. Feel free to play around with your newly created classes to create more instances!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\u003eClasses\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc73fe4331cc4e3d3d131dd43a5d29b47","title":"Instructor Review: Phase 1 Portfolio Project","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eYour instructor will add your portfolio project's grade on this assignment. Use \u003ca class=\"instructure_file_link inline_disabled\" href=\"https://go.oncehub.com/StructuredProgramJavascriptProjectReviews\" target=\"_blank\"\u003ethis link\u003c/a\u003e to schedule a review, then \u003cstrong\u003epaste your confirmation email \u003c/strong\u003ein the text box below.\u003c/span\u003e\u003c/p\u003e","submissionTypes":null,"graded":true,"pointsPossible":0.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gdde2652d6a777218fcf0e57a6bdaa6c8","title":"Introduction to Context","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-introduction-to-context-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-introduction-to-context-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-introduction-to-context-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-introduction-to-context-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the term \"record\"\u003c/li\u003e\n\u003cli\u003eDefine the term \"record-oriented programming\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's take a moment to appreciate where we are. We've reviewed the basic use\nand creation of functions. We've applied these skills in the context of\ncollection-processing methods like \u003ccode\u003emap\u003c/code\u003e, \u003ccode\u003ereduce\u003c/code\u003e, and \u003ccode\u003eforEach\u003c/code\u003e. We're now\nready to face one of the (infamously) most-challenging parts of JavaScript:\nworking with execution context. We're going to start this sequence of lessons\noff by defining five key terms. Each will be addressed in depth elsewhere, but\nwe want to give you a survey first so you can say \"Oh, this is important\" when\nyou see the terms.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDefinitions\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExecution Context: When JavaScript functions run, they have an associated\nJavaScript \u003ccode\u003eObject\u003c/code\u003e that goes along with them which they can access by the\nkeyword \u003ccode\u003ethis\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ethis\u003c/code\u003e: Inside a function, \u003ccode\u003ethis\u003c/code\u003e is the \u003ccode\u003eObject\u003c/code\u003e that represents the\nfunction's execution context\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecall\u003c/code\u003e: This is a method \u003cem\u003eon a function\u003c/em\u003e that calls the function, just like\n\u003ccode\u003e()\u003c/code\u003e. You provide a new execution context as the first argument,\ntraditionally called \u003ccode\u003ethisArg\u003c/code\u003e, and the arguments you want to send to the\nfunction after the \u003ccode\u003ethisArg\u003c/code\u003e. An invocation of \u003ccode\u003ecall\u003c/code\u003e looks like:\n\u003ccode\u003eCalculator.sum.call(multilingualMessages, 1, 2)\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eapply\u003c/code\u003e: This is a method \u003cem\u003eon a function\u003c/em\u003e that calls the function, just like\n\u003ccode\u003e()\u003c/code\u003e. You provide a new execution context as the first argument,\ntraditionally called \u003ccode\u003ethisArg\u003c/code\u003e, and the arguments you want to send to the\nfunction \u003cstrong\u003e\u003cem\u003eas an \u003ccode\u003eArray\u003c/code\u003e\u003c/em\u003e\u003c/strong\u003e after the \u003ccode\u003ethisArg\u003c/code\u003e. An invocation of \u003ccode\u003eapply\u003c/code\u003e\nlooks like: \u003ccode\u003eCalculator.sum.apply(multilingualMessages, [1, 2])\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebind\u003c/code\u003e: This method returns \u003cem\u003ea copy\u003c/em\u003e of the function but with the execution\ncontext \"set\" to the argument that's passed to \u003ccode\u003ebind\u003c/code\u003e. It looks like this:\n\u003ccode\u003esayHello.bind(greenFrog)(\"Hello\") //=\u0026gt; \"Mr. GreenFrog says *Hello* to you all.\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003ePrinting up these definitions is what \u003cem\u003emost\u003c/em\u003e JavaScript documentation does.\nPeople accept these as truth and shrug and muddle their way through living in a\nstate of fear when they write in JavaScript — but that won't be you!\u003c/p\u003e\n\n\u003cp\u003eIn this lab, we're going to practice what we've already learned about\nJavaScript to build a time-card application, guided by tests. This application\nis an example of a \"record-oriented\" application, a term we'll explain below.\nOnce we have a working application, we'll show how execution context, \u003ccode\u003ethis\u003c/code\u003e,\n\u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003eapply\u003c/code\u003e and \u003ccode\u003ebind\u003c/code\u003e can DRY up our code.\u003c/p\u003e\n\n\u003cp\u003eWith these capabilities, we hope you'll learn to love functions even more\n— maybe even as much as JavaScript does!\u003c/p\u003e\n\n\u003ch2\u003eDefine the Term \"Record\"\u003c/h2\u003e\n\n\u003cp\u003eBack in the old days (the 1960s and earlier) computers didn't have much memory.\nRecords were stored on, if you can even believe this, small paper cards called\npunch-cards. They looked like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Used_Punchcard_%285151286161%29.jpg/800px-Used_Punchcard_%285151286161%29.jpg\" alt=\"Image of a punched card, used in early computers\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThese cards, or \"records,\" often had information on them in \"fields.\" In the\n\u003ccode\u003efirst_name\u003c/code\u003e field, you'd find a first name, etc... So when a business needed to\nfigure out how much to pay each person for a week's work, something like the\nfollowing would happen:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLoad up all the employees' cards into a tray\u003c/li\u003e\n\u003cli\u003eFeed the tray of cards into the computer\u003c/li\u003e\n\u003cli\u003eThe computer would read in each card and calculate the hours worked for the week per card\u003c/li\u003e\n\u003cli\u003eThe computer would emit a new card with all the old data but this card would have a new field \nadded called something like \u003ccode\u003ewagesPaidInWeek33OfYear: 550\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThe computer would also print out a table of the employee name and the amount owed\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026gt; \u003cstrong\u003eASIDE\u003c/strong\u003e: Come to think of it, iterating over a collection, performing a\n\u0026gt; transformation and emitting a new collection where every element has been\n\u0026gt; transformed sounds an \u003cem\u003eawful\u003c/em\u003e lot like \u003ccode\u003emap\u003c/code\u003e to us.\u003c/p\u003e\n\n\u003cp\u003eThen, the emitted pay ledger could be taken to the payroll department and the\nappropriate person could write (Write! With their hands! Using a pen and ink!)\nout paychecks to the employees.\u003c/p\u003e\n\n\u003cp\u003eHere's another use. If the executive team needed to know how much payroll cost\nthe company in a given week, they'd (you guessed it!) load up all those punch\ncards in a tray and run them through a different program that calculated a\ntotal.\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; \u003cstrong\u003eASIDE\u003c/strong\u003e: Come to think of it, iterating over a collection, performing an\n\u0026gt; evaluation on each element and emitting a new value based on those elements\n\u0026gt; sounds an \u003cem\u003eawful\u003c/em\u003e lot like \u003ccode\u003ereduce\u003c/code\u003e to us.\u003c/p\u003e\n\n\u003cp\u003eUltimately, the \"punch card\" was an intermediate step between paper records and\ndigital records. But it was during the punch-card era that computing really got\nbig, so a \u003cem\u003elot\u003c/em\u003e of our ways of thinking about programming started by thinking\nabout \"records.\"\u003c/p\u003e\n\n\u003ch2\u003eDefine the Term \"Record-Oriented Programming\"\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Record_(computer_science)\"\u003eRecord-oriented programming\u003c/a\u003e is a style of programming based on finding\nrecords and processing them so that they're updated (\u003ccode\u003emap\u003c/code\u003e-like) or so that\ntheir information is aggregated (\u003ccode\u003ereduce\u003c/code\u003e-like). \"Record-oriented\" isn't a\nbuzzword that we hear used very much, but for these next few lessons, we'll use\nit. Ask any programmer who's worked in large scale billing (phone companies,\ninsurers, etc.) or at a university (50,000 grade point averages), and you can\nbet they'll understand what the term means, though.\u003c/p\u003e\n\n\u003cp\u003eThe amazing thing is that in the 21st century this style of programming is back\nin vogue! We're not using punch cards, but the ability to spin up hundreds of\nlittle computers in a cloud, hand them each a bundle of records, and get\nanswers back and process the answers are records is \u003cem\u003ecutting-edge!\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIn fact, a program to do \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003ereduce\u003c/code\u003e operations at scale on a cloud was\nstandardized in the 2000s. Guess what it's called? \u003ca href=\"https://en.wikipedia.org/wiki/MapReduce\"\u003e\u003ccode\u003emapReduce\u003c/code\u003e\u003c/a\u003e\n— and you should know why. It was pioneered and advanced as part of the\nsecret sauce that made a small little company from Mountain View, California\ncalled Google become the giant it is today. Today you can use it under the\nname of \u003ca href=\"https://en.wikipedia.org/wiki/Apache_Hadoop\"\u003eApache Hadoop\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \"Go\" programming language is built around building and processing records\nat scale. Record-Oriented Programming is not likely to go away any time soon.\nMaybe it'll be the hot job posting buzzword any minute now!\u003c/p\u003e\n\n\u003ch2\u003eLab\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to build a time-card and payroll application using the\nrecord-oriented approach.\u003c/p\u003e\n\n\u003cp\u003eThe tests guide you to implementing a time card system: when someone enters the\ncompany's state of the art technical office, the employee has to insert their\ncard in a time-clock which will record the time they came in. When it's time to\nleave, the employee will \"punch out.\"\u003c/p\u003e\n\n\u003cp\u003eFor simplicity's sake, we'll make these assumptions:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAssume that employees always check-in \u003cstrong\u003eand\u003c/strong\u003e check-out.\u003c/li\u003e\n\u003cli\u003eAssume employees always check-in and out on the hour\u003c/li\u003e\n\u003cli\u003eThe time is represented on a 24-hour clock (1300 is 1:00 pm); this keeps the\nmath easier and is the standard in most of the world\u003c/li\u003e\n\u003cli\u003eWhen timestamps are needed, they will be provided as \u003ccode\u003eString\u003c/code\u003es in the form:\n\u003ccode\u003e\"YYYY-MM-DD 800\"\u003c/code\u003e or \u003ccode\u003e\"YYYY-MM-DD 1800\"\u003c/code\u003e e.g. \u003ccode\u003e\"2018-01-01 2300\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eEmployees will never work across days i.e. in at \u003ccode\u003e2200\u003c/code\u003e and out at \u003ccode\u003e0400\u003c/code\u003e the\nnext day.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe lab tests will guide you toward a solution. Keep in mind, the goal is to\nunderstand how to \"grow\" an application in \"record-oriented\" fashion in\nJavaScript, \u003cem\u003eas well\u003c/em\u003e as pass the lab. Make sure you're learning about this app\ndesign while you pass the solutions. When you encounter a failing test, look at\nhow the test is calling the function that's missing or failing: how did it call\nthe function, what arguments did it pass? What kind of thing did it expect\nback?\u003c/p\u003e\n\n\u003cp\u003eTake advantage of your collection-processing strengths that you trained up over\nthe last few lessons.\u003c/p\u003e\n\n\u003ch2\u003eExtending the Challenge\u003c/h2\u003e\n\n\u003cp\u003eIf you have the time, you can learn more about JavaScript and remove the\nsimplifying assumptions we wrote above. You can expand your learning by:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRaise an exception if a \u003ccode\u003etimeIn\u003c/code\u003e is found without a matching \u003ccode\u003etimeOut\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eException Handling in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eFigure out how to turn a time stamp into a construct that allows for you to\nhandle across day and non-o'clock times\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003eDate Class Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRaise errors if the time stamp is in an invalid format\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhile the bar set by the tests is at one level, you can turn this into a robust\napplication, if you so desire!\u003c/p\u003e\n\n\u003cp\u003ePut your code in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhile you will want to be guided by the tests, you will implement the following\nfunctions. To make the tests easier to read, we've provided the \u003cem\u003esignatures\u003c/em\u003e of\nthe functions.\u003c/p\u003e\n\n\u003cp\u003eA function \u003cem\u003esignature\u003c/em\u003e is the function name, the arguments it expects, and what\nthe function returns.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateEmployeeRecord\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eA 4-element Array of a \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, and \u003ccode\u003eNumber\u003c/code\u003e\ncorresponding to a first name, family name, title, and pay rate per hour\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eJavaScript \u003ccode\u003eObject\u003c/code\u003e with keys:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efirstName\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efamilyName\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epayPerHour\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeInEvents\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etimeOutEvents\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eLoads \u003ccode\u003eArray\u003c/code\u003e elements into corresponding \u003ccode\u003eObject\u003c/code\u003e properties.\n\u003cem\u003eAdditionally\u003c/em\u003e, initialize empty \u003ccode\u003eArray\u003c/code\u003es on the properties \u003ccode\u003etimeInEvents\u003c/code\u003e\nand \u003ccode\u003etimeOutEvents\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateEmployeeRecords\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eConverts each nested \u003ccode\u003eArray\u003c/code\u003e into an employee record using\n\u003ccode\u003ecreateEmployeeRecord\u003c/code\u003e and accumulates it to a new \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateTimeInEvent\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA date stamp (\u003ccode\u003e\"YYYY-MM-DD HHMM\"\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe employee record\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e with keys to the \u003ccode\u003etimeInEvents\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003e on the record\n\u003ccode\u003eObject\u003c/code\u003e:\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e: Set to \u003ccode\u003e\"TimeIn\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehour\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edate\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecreateTimeOutEvent\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA date stamp (\u003ccode\u003e\"YYYY-MM-DD HHMM\"\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe employee record\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e with keys to the \u003ccode\u003etimeOutEvents\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003e on the record\n\u003ccode\u003eObject\u003c/code\u003e:\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003etype\u003c/code\u003e: Set to \u003ccode\u003e\"TimeOut\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehour\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edate\u003c/code\u003e: Derived from the argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ehoursWorkedOnDate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA date of the form \u003ccode\u003e\"YYYY-MM-DD\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eHours worked, an \u003ccode\u003eInteger\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eGiven a date, find the number of hours elapsed between that date's\ntimeInEvent and timeOutEvent\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA date of the form \u003ccode\u003e\"YYYY-MM-DD\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003ePay owed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ehoursWorkedOnDate\u003c/code\u003e, multiply the hours by the record's\npayRate to determine amount owed. Amount should be returned as a number.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003eallWagesFor\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn employee record \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003ePay owed for all dates\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e, accumulate the value of all dates worked by the\nemployee in the record used as context. Amount should be returned as a\nnumber. \u003cstrong\u003eHINT\u003c/strong\u003e: You will need to find the available dates somehow...\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003efindEmployeeByFirstName\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003esrcArray\u003c/code\u003e: Array of employee records\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003efirstName\u003c/code\u003e: String representing a first name held in an employee record\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eMatching record or \u003ccode\u003eundefined\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eTest the \u003ccode\u003efirstName\u003c/code\u003e field for a match with the \u003ccode\u003efirstName\u003c/code\u003e argument\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003ecalculatePayroll\u003c/code\u003e\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eArgument(s)\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of employee records\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eReturns\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eSum of pay owed to all employees for all dates, as a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBehavior\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsing \u003ccode\u003ewagesEarnedOnDate\u003c/code\u003e, accumulate the value of all dates worked by the\nemployee in the record used as context. Amount should be returned as a\nnumber.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations! At the end of this lab, you should have built several\nincredibly simple functions that leveraged \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003ereduce\u003c/code\u003e to transform and\naggregate data. Take a look at your code and see where you might be repeating\nyourself. Finding these repetitions will be where we can bring in the\ninnovation of execution context. We'll learn how this can DRY up our code using\nexecution contexts in the next lesson.\u003c/p\u003e\n\n\u003cp\u003eIt's also worth your time to take a look at the tests in \u003ccode\u003etest/indexTest.js\u003c/code\u003e.\nBecause of this application's design, it's incredibly easy to test the\nfunctions which drive the application. Some programmers consider this style of\nprogramming to be optimal for the ease of testing and simplicity of code.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Record_(computer_science)\"\u003eRecord / Record-Oriented Programming\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eJavaScript Error Class\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003eJavaScript Date Class\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g85193d40cf5f4610f8441e1e7e5d7de7","title":"JavaScript Advanced Functions: First-Class Functions Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-first-class-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-first-class-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAssign functions to a variable.\u003c/li\u003e \u003cli\u003eStore functions in a data structure.\u003c/li\u003e \u003cli\u003eWrite functions that return other functions.\u003c/li\u003e \u003cli\u003ePass a function to another function.\u003c/li\u003e \u003cli\u003eCall a function returned by another function.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eFunctions are a very important part of JavaScript, and you will use them all the time. Without functions, we wouldn't get anything done! In this lab, we'll take a look at how we can use functions as first-class objects to pass them around, store them in variables and data structures, and return them from other functions.\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ereturnFirstTwoDrivers()\u003c/code\u003e — Declare a variable with \u003ccode\u003econst\u003c/code\u003e that is assigned an anonymous function. The assigned function should accept an array of drivers as an argument and return the \u003cstrong\u003efirst\u003c/strong\u003e two drivers in the array.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ereturnLastTwoDrivers()\u003c/code\u003e — Declare a variable with \u003ccode\u003econst\u003c/code\u003e that is assigned an anonymous function. The assigned function should accept an array of drivers as an argument and return the \u003cstrong\u003elast\u003c/strong\u003e two drivers in the array.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eselectingDrivers\u003c/code\u003e — This is an array containing two elements: the two functions that we previously defined (\u003ccode\u003ereturnFirstTwoDrivers()\u003c/code\u003e and \u003ccode\u003ereturnLastTwoDrivers()\u003c/code\u003e).\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e — This is a higher-order function that takes in one argument, an integer, and returns a function that will multiply a fare for a ride accordingly. If \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e receives an argument of \u003ccode\u003e4\u003c/code\u003e, it will return a function that takes in a fare as an argument and quadruples the fare.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003efareDoubler()\u003c/code\u003e — Declare a variable with \u003ccode\u003econst\u003c/code\u003e and assign a function returned by \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e to it. Invoke \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e in such a way that the new \u003ccode\u003efareDoubler()\u003c/code\u003e function accepts a fare as its lone argument and doubles it.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003efareTripler()\u003c/code\u003e — Declare a variable with \u003ccode\u003econst\u003c/code\u003e and assign a function returned by \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e to it. Invoke \u003ccode\u003ecreateFareMultiplier()\u003c/code\u003e in such a way that the new \u003ccode\u003efareTripler()\u003c/code\u003e function accepts a fare as its lone argument and triples it.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eselectDifferentDrivers()\u003c/code\u003e — This function takes two arguments, an array of \u003ccode\u003edrivers\u003c/code\u003e and either the \u003ccode\u003ereturnFirstTwoDrivers()\u003c/code\u003e or \u003ccode\u003ereturnLastTwoDrivers()\u003c/code\u003e function. Based on these two arguments, \u003ccode\u003eselectDifferentDrivers()\u003c/code\u003e will return either the first two drivers or the last two drivers.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/First-class_function\"\u003eWikipedia: First-class function\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003eMDN: Functions\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://typeofnan.dev/what-is-a-higher-order-function/\"\u003eTypeOfNaN: What is a Higher-Order Function?\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8cc656c6525c0c190737742e3bf98cca","title":"JavaScript Functional Library Project","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-functional-library-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-functional-library-project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-functional-library-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-functional-library-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\"Functional programming (FP)\" is a style of programming like record-oriented or\nobject-oriented programming. It's very popular in languages that \u003cstrong\u003e\u003cem\u003eLOVE\u003c/em\u003e\u003c/strong\u003e\nfunctions, like JavaScript.\u003c/p\u003e\n\n\u003cp\u003eDon't get spooked though, we've been guiding you and coaching you all along to\nthink in the \"FP\" mindset.\u003c/p\u003e\n\n\u003cp\u003eDevelopers learn new paradigms all the time. Today we're going to practice\nlearning a new style of programming and implementing it.\u003c/p\u003e\n\n\u003cp\u003eFirst, read up on \u003ca href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0\"\u003eFP\u003c/a\u003e, and then come back.\u003c/p\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine an IIFE: Instantly-Invoked Function Expression\u003c/li\u003e\n\u003cli\u003ePass data between functions and callbacks\u003c/li\u003e\n\u003cli\u003eCall a callback from within a function\u003c/li\u003e\n\u003cli\u003ePass a callback to a function\u003c/li\u003e\n\u003cli\u003eIdentify JavaScript's non-enforcement of arity\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYour functions should conform to the following guidelines:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite pure functions (see article)\u003c/li\u003e\n\u003cli\u003eAvoid sharing or mutating state (see article)\u003c/li\u003e\n\u003cli\u003eAvoid side effects (see article)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eGiven the same input your functions should always return the same value.\u003c/p\u003e\n\n\u003cp\u003eBelow you will find a list of function descriptions detailing what their name,\nparameters and return value should be. Your job is to develop the code to\nimplement these functions.\u003c/p\u003e\n\n\u003cp\u003eThe entire \u003ccode\u003efi\u003c/code\u003e library should be wrapped in an \u003ca href=\"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\"\u003eImmediately Invoked Function\nExpression\u003c/a\u003e (IIFE), like the example below.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi = (function() {\u003cbr\u003e  return {\u003cbr\u003e    libraryMethod: function() {\u003cbr\u003e      return \"Start by reading the article!\";\u003cbr\u003e    },\u003cbr\u003e\u003cbr\u003e    each: function() {\u003cbr\u003e      /*TODO*/\u003cbr\u003e    }\u003cbr\u003e  };\u003cbr\u003e})();\u003cbr\u003e\u003cbr\u003efi.libraryMethod();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWrapping a library in code is sometimes called \"\u003ca href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript\"\u003eThe Module Pattern\u003c/a\u003e\"\u003c/p\u003e\n\n\u003cp\u003eThe point of this exercise is to build \u003cstrong\u003e\u003cem\u003eyour own implementation\u003c/em\u003e\u003c/strong\u003e of the\ncollection-processing methods. Don't simply re-use the built-in methods!\nLeverage all you know about callbacks, passing data, etc. to prove that you\ncould build your own collection-processing framework whenever \u003cstrong\u003e\u003cem\u003eyou\u003c/em\u003e\u003c/strong\u003e want.\u003c/p\u003e\n\n\u003ch2\u003eCollection Functions (Arrays or Objects)\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003efi.each\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.each(collection, callback)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIterates over a \u003cstrong\u003ecollection\u003c/strong\u003e of elements, passing each element in turn to a\n\u003cstrong\u003ecallback\u003c/strong\u003e function. Each invocation of \u003cstrong\u003ecallback\u003c/strong\u003e is called with three\narguments: (element, index, collection). If \u003cstrong\u003ecollection\u003c/strong\u003e is a JavaScript\nobject, \u003cstrong\u003ecallback\u003c/strong\u003e's arguments will be (value, key, collection). \u003cstrong\u003eReturns\nthe original collection for chaining.\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.each([1, 2, 3], alert);\u003cbr\u003e=\u0026gt; alerts each number in turn and returns the original collection\u003cbr\u003efi.each({one: 1, two: 2, three: 3}, alert);\u003cbr\u003e=\u0026gt; alerts each number value in turn and returns the original collection\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.map\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.map(collection, callback)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eProduces a new array of values by mapping each value in \u003cstrong\u003ecollection\u003c/strong\u003e through\na transformation function (\u003cstrong\u003ecallback\u003c/strong\u003e). The callback is passed three\narguments: the value, then the index (or key) of the iteration, and finally a\nreference to the entire collection. \u003cstrong\u003eReturns a new collection for chaining\nwithout modifying the original.\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.map([1, 2, 3], function(num){ return num * 3; });\u003cbr\u003e=\u0026gt; [3, 6, 9]\u003cbr\u003efi.map({one: 1, two: 2, three: 3}, function(num, key){ return num * 3; });\u003cbr\u003e=\u0026gt; [3, 6, 9]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.reduce\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.reduce(collection, callback, acc)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReduce boils down a \u003cstrong\u003ecollection\u003c/strong\u003e of values into a single value. \u003cstrong\u003eAcc\u003c/strong\u003e\n(short for accumulator) starts as the initial state of the reduction, and with\neach successive step it should be accumulate the return value of \u003cstrong\u003ecallback\u003c/strong\u003e.\nThe callback is passed three arguments: the acc, the current value in our\niteration (the element in the array), and finally a reference to the entire\ncollection.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar sum = fi.reduce([1, 2, 3], function(acc, val, collection) { return acc + val; }, 0);\u003cbr\u003e=\u0026gt; 6\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.find\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.find(collection, predicate)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eLooks through each value in the \u003cstrong\u003ecollection\u003c/strong\u003e, returning the first one that\npasses a truth test (\u003cstrong\u003epredicate\u003c/strong\u003e), or undefined if no value passes the test.\nThe function returns as soon as it finds an acceptable element, and doesn't\ntraverse the entire collection.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar even = fi.find([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\u003cbr\u003e=\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.filter\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.filter(collection, predicate)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eLooks through each value in the \u003cstrong\u003ecollection\u003c/strong\u003e, returning an array of all the\nvalues that pass a truth test (\u003cstrong\u003epredicate\u003c/strong\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar evens = fi.filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\u003cbr\u003e=\u0026gt; [2, 4, 6]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.size\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.size(collection)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturn the number of values in the \u003cstrong\u003ecollection\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.size({one: 1, two: 2, three: 3});\u003cbr\u003e=\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eArray Functions\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003efi.first\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.first(array, [n])\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns the first element of an \u003cstrong\u003earray\u003c/strong\u003e. Passing \u003cstrong\u003en\u003c/strong\u003e will return the first \u003cstrong\u003en\u003c/strong\u003e elements of the array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.first([5, 4, 3, 2, 1]);\u003cbr\u003e=\u0026gt; 5\u003cbr\u003e\u003cbr\u003efi.first([5, 4, 3, 2, 1], 3);\u003cbr\u003e=\u0026gt; [5, 4, 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.last\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.last(array, [n])\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns the last element of an \u003cstrong\u003earray\u003c/strong\u003e. Passing \u003cstrong\u003en\u003c/strong\u003e will return the last \u003cstrong\u003en\u003c/strong\u003e elements of the array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.last([5, 4, 3, 2, 1]);\u003cbr\u003e=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.compact\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.compact(array)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns a copy of the \u003cstrong\u003earray\u003c/strong\u003e with all falsy values removed. In JavaScript,\n\u003cem\u003efalse\u003c/em\u003e, \u003cem\u003enull\u003c/em\u003e, \u003cem\u003e0\u003c/em\u003e, \u003cem\u003e\"\"\u003c/em\u003e, \u003cem\u003eundefined\u003c/em\u003e and \u003cem\u003eNaN\u003c/em\u003e are all falsy.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.compact([0, 1, false, 2, '', 3]);\u003cbr\u003e=\u0026gt; [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.sortBy\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.sortBy(array, callback)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns a sorted copy of \u003cstrong\u003earray\u003c/strong\u003e, ranked in ascending order by the results of\nrunning each value through \u003cstrong\u003ecallback\u003c/strong\u003e. The values from the original array\nshould be retained within the sorted copy, just in ascending order.  \u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eThe point of this exercise is not to write your own sorting algorithm and you are free to use the native \u003ca href=\"https://www.w3schools.com/js/js_array_sort.asp\"\u003eJS sort\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eIf you would like to go deeper and try to construct your own sorting algorithm\nthis is a great extension.\n\u003ca href=\"http://blog.benoitvallon.com/sorting-algorithms-in-javascript/sorting-algorithms-in-javascript-all-the-code/\"\u003eHere\u003c/a\u003e\nis a list of sorting algorithms implemented in JS with additional resources\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.sortBy([1, 2, 3, 4, 5, 6], function(num){ return Math.sin(num) });\u003cbr\u003e=\u0026gt; [5, 4, 6, 3, 1, 2];\u003cbr\u003e\u003cbr\u003e\u003cbr\u003evar stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];\u003cbr\u003efi.sortBy(stooges, function(stooge){ return stooge.name });\u003cbr\u003e=\u0026gt; [{name: 'curly', age: 60}, {name: 'larry', age: 50}, {name: 'moe', age: 40}];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.flatten (bonus function)\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.flatten(array, [shallow])\u003c/code\u003e\nFlattens a nested \u003cstrong\u003earray\u003c/strong\u003e (the nesting can be to any depth).\u003c/p\u003e\n\n\u003cp\u003eIf you pass \u003cstrong\u003etrue\u003c/strong\u003e for the second argument, the array will only be flattened a single level.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.flatten([1, [2], [3, [[4]]]]);\u003cbr\u003e=\u0026gt; [1, 2, 3, 4];\u003cbr\u003e\u003cbr\u003efi.flatten([1, [2], [3, [[4]]]], true);\u003cbr\u003e=\u0026gt; [1, 2, 3, [[4]]];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.uniq\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.uniq(array, [isSorted], [callback])\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eProduces a duplicate-free version of the \u003cstrong\u003earray\u003c/strong\u003e, using \u003cem\u003e===\u003c/em\u003e to test object equality. In particular only the first occurrence of each value is kept.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.uniq([1, 2, 1, 4, 1, 3]);\u003cbr\u003e=\u0026gt; [1, 2, 4, 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you know in advance that the \u003cstrong\u003earray\u003c/strong\u003e is sorted, passing \u003cem\u003etrue\u003c/em\u003e for \u003cstrong\u003eisSorted\u003c/strong\u003e will run a much faster algorithm. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.uniq(['a', 'a', 'b', 'c', 'e', 'e', 'e', 'e'], true)\u003cbr\u003e=\u0026gt; ['a', 'b', 'c', 'e'] // faster than unsorted\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you want to compute unique items based on a transformation, pass a \u003cstrong\u003ecallback\u003c/strong\u003e function.\u003c/p\u003e\n\n\u003cp\u003eSpecifically, if the callback function returns the same value that a previous execution of the callback also returned, we don't include that item in the return array - even if the original array's elements are different. The output array will be made up of a subset of the values of the original array - not the transformed values.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.uniq([1, 2, 3, 6], false, (x =\u0026gt; x % 3));\u003cbr\u003e=\u0026gt; [1, 2, 3]\u003cbr\u003efi.uniq([4,8,6,5,7], false, (x =\u0026gt; x % 3));\u003cbr\u003e=\u0026gt; [4,8,6]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eFunction\u003c/h2\u003e\n\n\u003ch2\u003eObject Functions\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003efi.keys\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.keys(object)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eRetrieve all the names of the \u003cstrong\u003eobject\u003c/strong\u003e's own enumerable properties.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.keys({one: 1, two: 2, three: 3});\u003cbr\u003e=\u0026gt; [\"one\", \"two\", \"three\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.values\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.values(object)\u003c/code\u003e\nReturn all of the values of the \u003cstrong\u003eobject\u003c/strong\u003e's own properties.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.values({one: 1, two: 2, three: 3});\u003cbr\u003e=\u0026gt; [1, 2, 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003efi.functions\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efi.functions(object)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns a sorted collection of the names of every function in an object — that is to say, the name of every property whose value is a function.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efi.functions(fi);\u003cbr\u003e=\u0026gt; [\"compact\", \"each\", \"filter\", \"find\", \"first\", \"functions\", \"last\", \"map\", \"reduce\", \"size\", \"sortBy\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBuilding a functional library is a great experience for learning to see how\nmany functions can build off of each other. This lab asked you to take on some\nof the basic tasks that you would face when writing a functional library.\u003c/p\u003e\n\n\u003cp\u003eExpand your vocabulary by visiting a library like \u003ca href=\"https://lodash.com\"\u003elodash\u003c/a\u003e or \u003ca href=\"https://ramdajs.com/docs/\"\u003eramda\u003c/a\u003e. Look\nat methods like Ramda's \u003ca href=\"https://ramdajs.com/docs/#filter\"\u003efilter\u003c/a\u003e or \u003ca href=\"https://ramdajs.com/docs/#flip\"\u003eflip\u003c/a\u003e. Can you imagine how to write\nthat? These libraries are providing the functionality just like you did too!\u003c/p\u003e\n\n\u003cp\u003eYou've pushed your skills to a whole new level. Congratulations!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lodash.com\"\u003elodash\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ramdajs.com/docs/\"\u003eramda\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3a9730bd8fb591efd7c033777012420c","title":"JavaScript Project Mode","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-javascript-project-mode\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-project-mode/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-project-mode\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-project-mode/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDesign and architect features across a frontend\u003c/li\u003e \u003cli\u003eCommunicate and collaborate in a technical environment\u003c/li\u003e \u003cli\u003eIntegrate JavaScript and an external API\u003c/li\u003e \u003cli\u003eDebug issues in small- to medium-sized projects\u003c/li\u003e \u003cli\u003eBuild and iterate on a project MVP\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWelcome to JavaScript Project Mode!\u003c/p\u003e  \u003cp\u003eYou’ve worked so hard to get here and have learned a ton. Now it's time to bring it all together!\u003c/p\u003e  \u003cp\u003eFor this project, you're going build a Single Page Application (\u003cstrong\u003eSPA\u003c/strong\u003e). Building this application will be challenging because it will integrate everything you've learned up to this point. Your frontend will be built with HTML, CSS, and JavaScript and will communicate with a public API.\u003c/p\u003e  \u003ch3\u003eProject Requirements\u003c/h3\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eYour app must be a HTML/CSS/JS frontend that accesses data from a public API. All interactions between the client and the API should be handled asynchronously and use JSON as the communication format.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eYour entire app must run on a single page. There should be NO redirects. In other words, your project will contain a single HTML file.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eSome interactivity is required. This interactivity needs to incorporate at least 3 separate event listeners. This could be as simple as adding a \"like\" button or adding comments. These interactions do not need to persist after reloading the page.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eStretch Goals\u003c/h3\u003e  \u003col\u003e \u003cli\u003eSet up a JSON server in your project to persist your app's interactivity.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eStrategy, Timeline, and Tips\u003c/h2\u003e  \u003ch3\u003ePlanning\u003c/h3\u003e  \u003cul\u003e \u003cli\u003ePlan out your features\u003c/li\u003e \u003cli\u003eDevelop user stories  \u003cul\u003e \u003cli\u003e“As [ a user ], I want [ to perform this action ] so that [ I can accomplish this goal ].”\u003c/li\u003e \u003cli\u003eFeatures should not need you there to explain them to users\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003ePlan out the structure of your JSON requests\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eProject Pitches\u003c/h3\u003e  \u003cp\u003eBefore you start working on your project, you'll pitch your project idea to your instructors for approval and feedback. \u003c/p\u003e  \u003cp\u003eFor your project pitch, you should include:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe basic story of your application\u003c/li\u003e \u003cli\u003eThe core features of your MVP\u003c/li\u003e \u003cli\u003eThe API data you'll be using and how you'll use it\u003c/li\u003e \u003cli\u003eChallenges you expect to face\u003c/li\u003e \u003cli\u003eHow you are meeting the requirements of the project\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFeel free to send this pitch to your instructor via slack asynchronously. \u003c/p\u003e  \u003ch3\u003eMVP ASAP\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eBuild a Minimum Viable Product (MVP) as quickly as possible.  \u003cul\u003e \u003cli\u003ePick an API and explore it early on to ensure it will work for your need\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eInstructor Guidance\u003c/h3\u003e  \u003cp\u003eYou should strive to solve problems independently, but you also shouldn't waste your time stuck on a problem. A good guideline for a small bug is the rule of 10s:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e10 minutes debugging the code\u003c/li\u003e \u003cli\u003e10 minutes using Google and StackOverflow to try to find an answer\u003c/li\u003e \u003cli\u003e10 minutes asking your fellow students for help\u003c/li\u003e \u003cli\u003eAsking an instructor\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIf you seek out instructor guidance on your design from the start, they might help steer you into design and architectural decisions that will help you down the road. That will also give the instructors context for what your app is supposed to do, so you won't need to explain everything to them when asking for help debugging.\u003c/p\u003e  \u003ch3\u003eGuidelines for Staying Organized\u003c/h3\u003e  \u003cp\u003e\u003cstrong\u003eWrite down\u003c/strong\u003e the decisions you make about your project. This will not only help you think more clearly, it will also help you communicate your project to instructors when asking for help. In addition to writing everything down, we also recommend the following to help stay organized and on track:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDescribe/sketch your ideas (use diagrams!).\u003c/li\u003e \u003cli\u003eStart by creating a frontend directory with the basic files you'll need\u003c/li\u003e \u003cli\u003eNext, build enough code to get some API data to work with. Don't worry about building all of your async code yet, just get to the point where you can access one endpoint on an API, then start working on getting that data displayed.\u003c/li\u003e \u003cli\u003eThen, continue to build additional async code and frontend features.\u003c/li\u003e \u003cli\u003eContinue building features one by one.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eCheck in with your instructors to make sure your scope and timeline are manageable.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge1a04af88e90d283aa96bbe19e83358e","title":"Module Assessments and Instructions","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"code-challenge-instructions-and-example\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"instructure_file_link\" title=\"example-code-challenge-2021-02-24.zip\" href=\"viewer/files/Uploaded%20Media/example-code-challenge-2021-02-24.zip?canvas_=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\"\u003eexample-code-challenge-2021-02-24.zip\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eTowards the end of each phase of this course, you'll receive an assessment in the form of a code challenge. This assessment a chance for you to show off how much you've learned, see where you are in terms of grasping the material, and get feedback from us on ways to improve or areas to work on further.\u003c/p\u003e\n\u003cp\u003eThe first assessment will cover your knowledge of JavaScript and frontend development. Topics will include DOM manipulation, event handling, and communicating with a server.\u003c/p\u003e\n\u003cp\u003eFor the first assessment, you'll receive a repo with instructions and deliverables. For example, one deliverable might be \"As a user, I should be able to add a comment to a blog post\". It's an open-book, totally Googleable assessment. As opposed to standard labs, there will not be tests. Instead, we will be reading, running, and grading your code based on how you fulfill the requirements and your use of coding best practices. We will give you constructive feedback based on your submission.\u003c/p\u003e\n\u003cp\u003eYou can expect feedback after we grade your assessment. We'll set aside time for each of you over the subsequent week to review if you don't pass the assessment.\u003c/p\u003e\n\u003cp\u003eFuture assessments will follow a similar format, but of course, the topics will be different. You can expect any of the topics we cover in class to be touched on in some way. The best way to prepare will be to consistently complete labs, review your lecture notes, and build your own projects.\u003c/p\u003e\n\u003cp\u003ePlease don't think of passing the assessments as the goal of your learning —— doing well on them should be a side effect, a by-product of you learning how to be an amazing developer. By all means, get more practice in any areas where you know you need it, but don't cram for a code challenge, and definitely don't sacrifice keeping up with the labs to prepare for it.\u003c/p\u003e\n\u003cp\u003eBelow, we've provided instructions for how to work on and submit your future assessments. This lesson is structured like an code challenge, so feel free to practice here.\u003c/p\u003e\n\u003ch2\u003eInstructions for Working on and Submitting Code Challenge\u003c/h2\u003e\n\u003cp\u003eBefore you can start working on a code challenge, you must follow the steps below:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOnce your code challenge is published, it will be available in the Code Challenges module of this course.\u003c/li\u003e\n\u003cli\u003eFind and open the code challenge assignment and download the linked ZIP file\u003c/li\u003e\n\u003cli\u003eUnzip the file on your computer\u003c/li\u003e\n\u003cli\u003eIn your terminal, change directory (\u003ccode\u003ecd\u003c/code\u003e) into the unzipped challenge directory\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003els\u003c/code\u003e; you should see a \u003ccode\u003ebin/\u003c/code\u003e directory and a \u003ccode\u003ecode-challenge.bundle\u003c/code\u003e file)\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003eruby bin/start \u0026lt;your-name\u0026gt;\u003c/code\u003e from the directory; this will create a new directory called \u003ccode\u003ecode-challenge/\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecd\u003c/code\u003e into the new \u003ccode\u003ecode-challenge/\u003c/code\u003e directory and open in your code editor\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo work on your code challenge:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEnsure that you're in the \u003ccode\u003ecode-challenge/\u003c/code\u003e directory\u003c/li\u003e\n\u003cli\u003eFollow the instructions in the \u003ccode\u003eREADME.md\u003c/code\u003e file\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003egit add .\u003c/code\u003e and \u003ccode\u003egit commit\u003c/code\u003e inside of the \u003ccode\u003ecode-challenge/\u003c/code\u003e directory often as you're working\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo submit the code challenge:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNavigate to the \u003cstrong\u003eparent directory\u003c/strong\u003e of \u003ccode\u003ecode-challenge/\u003c/code\u003e in your terminal.\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003eruby bin/end\u003c/code\u003e, which will create a new file, \u003ccode\u003e\u0026lt;your-name\u0026gt;.bundle\u003c/code\u003e in that directory (for example, \u003ccode\u003ealicia.bundle\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eNavigate back to the code challenge assignment in Canvas\u003c/li\u003e\n\u003cli\u003eUpload \u003ccode\u003e\u0026lt;your-name\u0026gt;.bundle\u003c/code\u003e to the assignment and submit\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eReach out to your instructors immediately\u003c/strong\u003e if you run into issues downloading, working on, or uploading your code challenge.\u003c/p\u003e\n\u003cp\u003eBelow is a video walkthrough of starting and submitting a code challenge using the steps above. Note that the initial location of the code challenge in Canvas has changed, but the other steps are still the same.\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube-nocookie.com/embed/3AM3qXUtnQY\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e","submissionTypes":"a file upload","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0e69d594967cb7460471db8b1752f2be","title":"Object-Oriented Methods Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prototypal-oo-js-object-oriented-object-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-object-oriented-object-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-object-oriented-object-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prototypal-oo-js-object-oriented-object-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate constructor functions\u003c/li\u003e\n\u003cli\u003eAdd methods to a constructor function\u003c/li\u003e\n\u003cli\u003eCreate objects from a constructor function\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eScuber, in an effort to gain much needed local influence, has begun adding some powerful board members to its organization.  It expects to add more (similar) board members in the future, so it needs you to declare a constructor function so that it can crank them out.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003eindex.js\u003c/code\u003e, write a constructor function called \u003ccode\u003eBoardMember\u003c/code\u003e that sets the following properties: \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ehomeState\u003c/code\u003e, and \u003ccode\u003etraining\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAdd following methods to the class:\n- \u003ccode\u003eveto\u003c/code\u003e — returns \u003ccode\u003eNo, I must disagree\u003c/code\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eapprove\u003c/code\u003e — returns \u003ccode\u003eYou can do that!\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003edoCharity\u003c/code\u003e — returns \u003ccode\u003eI like to help people.\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ereleasePressStatement\u003c/code\u003e — returns \u003ccode\u003eYou will see great things from Scuber.\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003esayHi\u003c/code\u003e — returns \u003ccode\u003e\"Hi, my name is \u0026lt;name\u0026gt;. I am from \u0026lt;homestate\u0026gt;, and I was trained in \u0026lt;training\u0026gt;.\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g75ebbb7811c18d0c734046b7a73a72ce","title":"Object-Oriented Student Scraper","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oo-student-scraper\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-student-scraper\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-student-scraper/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eBuild two classes, a class that is responsible for scraping data from a web page and a class that uses that data to instantiate new objects.\u003c/li\u003e \u003cli\u003eUnderstand the contents of a third class that is responsible for the command line interface.\u003c/li\u003e \u003cli\u003eUse meta-programming to instantiate new instances of a class and add attributes to instances of a class.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lab, you'll be scraping your Learn.co student website. You'll use the index page to grab a list of current students and instantiate a series of \u003ccode\u003eStudent\u003c/code\u003e objects. You'll scrape the individual profile pages of each student to add attributes to each individual student.\u003c/p\u003e  \u003cp\u003eWe've given you a third class, \u003ccode\u003eCommandLineInterface\u003c/code\u003e that is responsible for generating students using both the \u003ccode\u003eStudent\u003c/code\u003e and \u003ccode\u003eScraper\u003c/code\u003e classes. As you go through this lab, take some time to read through the code in the \u003ccode\u003eCommandLineInterface\u003c/code\u003e class. Try to understand how it works and how it uses the code in our other classes to create students, add attributes to them, and display them to the user via the command-line interface.\u003c/p\u003e  \u003cp\u003eWe've also given you an executable file in \u003ccode\u003ebin/run\u003c/code\u003e that you can execute once you get your tests passing to see your code in action!\u003c/p\u003e  \u003ch2\u003eBefore You Begin\u003c/h2\u003e  \u003cp\u003eFor this project, we'll be scraping data from the student profiles website. Sort of. We can't really give you a project with a full test suite and base those tests on the real live Learn.co website on the real live internet. Why? Because websites change! They get new styling or new information, or they break because someone did something wrong. It happens! So, any tests we write would be based on the website at a given point in time. The code you write to pass those tests would assume that you are scraping a website that may have since changed. Your scraper would pass tests but fail to actually scrape the web page if you tried to run your code by sending a real web request to the real website. That would be terrible! Then you couldn't see your code in action or view the page you were writing code to scrape. Just awful.\u003c/p\u003e  \u003cp\u003eDon't worry! We've very cleverly solved this problem for the purposes of this project. We've created a mock-up student site, \u003ca href=\"https://learn-co-curriculum.github.io/student-scraper-test-page/\"\u003eavailable here as a GitHub Page\u003c/a\u003e\u003c/p\u003e  \u003cp\u003eThis copy is being maintained only for the purposes of this project, so we don't have to worry about things like the styling changing or the code breaking and affecting our scraper code.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eRun \u003ccode\u003ebundle install\u003c/code\u003e first.\u003c/p\u003e  \u003ch3\u003eThe \u003ccode\u003eScraper\u003c/code\u003e Class\u003c/h3\u003e  \u003cp\u003eLet's start with the \u003ccode\u003eScraper\u003c/code\u003e class in \u003ccode\u003elib/scraper.rb\u003c/code\u003e. In this class you are responsible for defining two methods. The \u003ccode\u003e#scrape_index_page\u003c/code\u003e method is responsible for scraping the index page that lists all of the students and the \u003ccode\u003e#scrape_profile_page\u003c/code\u003e method is responsible for scraping an individual student's profile page to get further information about that student.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e Nokogiri will take care of parsing the actual HTML page. Once parsed, we can use Nokogiri's \u003ccode\u003e.css\u003c/code\u003e method to access specific elements based on their class or id. After reading the instructions below, inspect the \u003ca href=\"https://learn-co-curriculum.github.io/student-scraper-test-page/\"\u003ewebsite\u003c/a\u003e in a browser to find the appropriate CSS classes for elements you need to scrape. For more information, check out \u003ca href=\"https://nokogiri.org/tutorials/searching_a_xml_html_document.html\"\u003eNokogiri's reference materials\u003c/a\u003e for additional information\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eThe \u003ccode\u003e.scrape_index_page\u003c/code\u003e Method\u003c/h4\u003e  \u003cp\u003eThis is a class method that should take in an argument of the URL of the index page. For the purposes of our test the URL will be \u003ccode\u003ehttps://learn-co-curriculum.github.io/student-scraper-test-page/index.html\u003c/code\u003e. This method should use Nokogiri and Open-URI to access that page. The return value of this method should be an array of hashes in which each hash represents a single student. The keys of the individual student hashes should be \u003ccode\u003e:name\u003c/code\u003e, \u003ccode\u003e:location\u003c/code\u003e and \u003ccode\u003e:profile_url\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eHere's a look at the desired behavior:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eScraper.scrape_index_page(index_url)\u003cbr\u003e# =\u0026gt; [\u003cbr\u003e        {:name =\u0026gt; \"Abby Smith\", :location =\u0026gt; \"Brooklyn, NY\", :profile_url =\u0026gt; \"students/abby-smith.html\"},\u003cbr\u003e        {:name =\u0026gt; \"Joe Jones\", :location =\u0026gt; \"Paris, France\", :profile_url =\u0026gt; \"students/joe-jonas.html\"},\u003cbr\u003e        {:name =\u0026gt; \"Carlos Rodriguez\", :location =\u0026gt; \"New York, NY\", :profile_url =\u0026gt; \"students/carlos-rodriguez.html\"},\u003cbr\u003e        {:name =\u0026gt; \"Lorenzo Oro\", :location =\u0026gt; \"Los Angeles, CA\", :profile_url =\u0026gt; \"students/lorenzo-oro.html\"},\u003cbr\u003e        {:name =\u0026gt; \"Marisa Royer\", :location =\u0026gt; \"Tampa, FL\", :profile_url =\u0026gt; \"students/marisa-royer.html\"}\u003cbr\u003e      ] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e Remember to use the element inspector in your browser's developer tools to examine each element whose value you are trying to scrape. You can also use \u003ccode\u003ebinding.pry\u003c/code\u003e and experiment with different element selectors in your terminal. It takes a lot of trial and error to find the correct selectors for the desired element.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eThe \u003ccode\u003e.scrape_profile_page\u003c/code\u003e Method\u003c/h4\u003e  \u003cp\u003eThis is a class method that should take in an argument of a student's profile URL. It should use Nokogiri and Open-URI to access that page. The return value of this method should be a hash in which the key/value pairs describe an individual student. Some students don't have a Twitter or some other social link. Be sure to be able to handle that. Once written, the following code should return a hash containing info from the provided \u003ccode\u003eprofile_url\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eScraper.scrape_profile_page(profile_url) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd the returned hash should look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  :twitter=\u0026gt;\"http://twitter.com/flatironschool\",\u003cbr\u003e  :linkedin=\u0026gt;\"https://www.linkedin.com/in/flatironschool\",\u003cbr\u003e  :github=\u0026gt;\"https://github.com/learn-co\",\u003cbr\u003e  :blog=\u0026gt;\"http://flatironschool.com\",\u003cbr\u003e  :profile_quote=\u0026gt;\"\\\"Forget safety. Live where you fear to live. Destroy your reputation. Be notorious.\\\" - Rumi\",\u003cbr\u003e  :bio=\u0026gt; \"I'm a school\"\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe only attributes you need to scrape from a student's profile page are the ones listed above: the Twitter URL, LinkedIn URL, GitHub URL, blog URL, profile quote, and bio. The hash you build using those attributes should be formatted like the one in the example above.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eWhy class methods?\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eWhy are our scraping methods being defined as class methods? Well, we don't need to store any information about the \u003ccode\u003eScraper\u003c/code\u003e once it has completed the job of scraping. We simply need to scrape some information and pass that information along to our \u003ccode\u003eStudent\u003c/code\u003e class. So, we don't need to produce instances of \u003ccode\u003eScraper\u003c/code\u003e that maintain their own attributes.\u003c/p\u003e  \u003ch3\u003eThe \u003ccode\u003eStudent\u003c/code\u003e Class\u003c/h3\u003e  \u003cp\u003eWe've already given you the \u003ccode\u003eattr_accessors\u003c/code\u003e that you are required to have for each individual student.\u003c/p\u003e  \u003cp\u003eThe student class will use the information returned by the above methods from our \u003ccode\u003eScraper\u003c/code\u003e class to create students and add attributes to individual students. However, the \u003ccode\u003eStudent\u003c/code\u003e class shouldn't know about the \u003ccode\u003eScraper\u003c/code\u003e class. This means that the \u003ccode\u003eStudent\u003c/code\u003e class shouldn't directly interact with the \u003ccode\u003eScraper\u003c/code\u003e class––it shouldn't call on the \u003ccode\u003eScraper\u003c/code\u003e class in any of its methods or take in the \u003ccode\u003eScraper\u003c/code\u003e class itself as an argument. Why is this? We want our program to be as flexible as possible.\u003c/p\u003e  \u003cp\u003eWe can imagine any number of applications that use a \u003ccode\u003eStudent\u003c/code\u003e model. So we don't want our \u003ccode\u003eStudent\u003c/code\u003e model to be dependent on \u003cem\u003ehow\u003c/em\u003e it gets information regarding the students it creates. It should simply be ready to take in that information, regardless of its source (be it scraping, a .csv file, or a form on a website).\u003c/p\u003e  \u003ch4\u003eThe \u003ccode\u003e#create_from_collection(students_array)\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eThis class method should take in an array of hashes. In fact, we will call \u003ccode\u003eStudent.create_from_collection\u003c/code\u003e with the return value of the \u003ccode\u003eScraper.scrape_index_page\u003c/code\u003e method as the argument. The \u003ccode\u003e#create_from_collection\u003c/code\u003e method should iterate over the array of hashes and create a new individual student using each hash. This brings us to the \u003ccode\u003e#initialize\u003c/code\u003e method on our \u003ccode\u003eStudent\u003c/code\u003e class.\u003c/p\u003e  \u003ch5\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e Method\u003c/h5\u003e  \u003cp\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e method should take in an argument of a hash and use meta-programming to assign the newly created student attributes and values per the key/value pairs of the hash. Use the \u003ccode\u003e#send\u003c/code\u003e method to achieve this. This method should also add the newly created student to the \u003ccode\u003eStudent\u003c/code\u003e class' \u003ccode\u003e@@all\u003c/code\u003e array of all students. You'll need to create this class variable and set it equal to an empty array at the top of your class. Push \u003ccode\u003eself\u003c/code\u003e into the array at the end of the \u003ccode\u003e#initialize\u003c/code\u003e method.\u003c/p\u003e  \u003ch4\u003eThe \u003ccode\u003e#add_student_attributes\u003c/code\u003e Method\u003c/h4\u003e  \u003cp\u003eThis instance method should take in a hash whose key/value pairs describe additional attributes of an individual student. In fact, we will be calling \u003ccode\u003estudent.add_student_attributes\u003c/code\u003e with the return value of the \u003ccode\u003eScraper.scrape_profile_page\u003c/code\u003e method as the argument.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003e#add_student_attributes\u003c/code\u003e method should iterate over the given hash and use meta-programming to dynamically assign the student attributes and values per the key/value pairs of the hash. Use the \u003ccode\u003e#send\u003c/code\u003e method to achieve this.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e The return value of this method should be the student itself. Use the \u003ccode\u003eself\u003c/code\u003e keyword.\u003c/p\u003e  \u003ch4\u003eThe \u003ccode\u003e.all\u003c/code\u003e Method\u003c/h4\u003e  \u003cp\u003eThis class method should return the contents of the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/p\u003e  \u003ch2\u003eOur Code in Action\u003c/h2\u003e  \u003cp\u003eNow that you have all your tests passing, you can run our executable file, which relies on our \u003ccode\u003eCommandLineInterface\u003c/code\u003e class.\u003c/p\u003e  \u003cp\u003eWe've provided you with all of the code in the \u003ccode\u003eCommandLineInterface\u003c/code\u003e class. Take a few minutes to read through this class and gain a strong understanding of how it uses the code you wrote in your Scraper and Student classes to make a request to the local files and scrape the students.\u003c/p\u003e  \u003cp\u003eNow run the executable file with \u003ccode\u003eruby bin/run\u003c/code\u003e. You should see all of the students you scraped and instantiated \u003ccode\u003eputs\u003c/code\u003e-ed out to the terminal. Great job!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5788cb0c2273d32d30e8f223aba6bd81","title":"Phase 1 Blog","type":"Assignment","content":"\u003cp\u003eSubmit the link to your blog post below.\u003c/p\u003e","submissionTypes":null,"graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g2bfaff8af5eece1291c1b86aa01dd36e","title":"Phase 1 Code Challenge: Flatagram","type":"Assignment","content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"Phase-1-Code-Challenge-Flatagram-2021-02-2.zip\" href=\"viewer/files/Uploaded%20Media/Phase-1-Code-Challenge-Flatagram-2021-02-2.zip?canvas_=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\"\u003ePhase-1-Code-Challenge-Flatagram-2021-02-2.zip\u003c/a\u003e \u0026nbsp;\u003cbr\u003e\u003cbr\u003eDownload the file above and unzip it to get started. Refer to the previous code challenge instructions for the process of starting and submitting this challenge.\u003c/p\u003e","submissionTypes":"a file upload","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc8e0401a1424dbe0c8308223d8ada261","title":"Phase 1 Rubric","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eRead the rubric attached below.\u003c/span\u003e\u003c/p\u003e","submissionTypes":null,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gaf2bef96caaede740b1b022324d3193a","title":"Project: Bookliker","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"bookliker-practice-challenge\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/bookliker-practice-challenge/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/bookliker-practice-challenge\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/bookliker-practice-challenge/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWelcome to BookLiker, where you can look at books and like them! (Hey, not all startups are brilliant ideas.)\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eYou will be using the \u003ca href=\"https://github.com/typicode/json-server\"\u003ejson-server\u003c/a\u003e package to mock an external API. You can make the same RESTful requests to this server that you would to any API. If you haven't yet, install json-server.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install -g json-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen run the server with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejson-server db.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will serve your code on \u003ccode\u003ehttp://localhost:3000\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eBuild the following application in Vanilla JS\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://curriculum-content.s3.amazonaws.com/module-3/bookliker-example.gif\" alt=\"example GIF\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou will be using the following backend to get the list of books. The expectation here is that you will include the following features\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eGet a list of books \u0026amp; render them\n\u003ccode\u003ehttp://localhost:3000/books\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eBe able to click on a book, you should see the book's thumbnail and description and a list of users who have liked the book.\u003c/li\u003e\n\u003cli\u003eYou can like a book by clicking on a button. You are user 1 \u003ccode\u003e{\"id\":1, \"username\":\"pouros\"}\u003c/code\u003e, so to like a book send a \u003ccode\u003ePATCH\u003c/code\u003e request to \u003ccode\u003ehttp://localhost:3000/books/:id\u003c/code\u003e with an array of users who like the book. This array should be equal to the existing array of users that like the book, plus your user. For example, if the previous array was \u003ccode\u003e\"[{\"id\":2, \"username\":\"auer\"}, {\"id\":8, \"username\":\"maverick\"}]\u003c/code\u003e, you should send as the body of your PATCH request:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"users\": [\u003cbr\u003e    {\"id\":2, \"username\":\"auer\"},\u003cbr\u003e    {\"id\":8, \"username\":\"maverick\"},\u003cbr\u003e    {\"id\":1, \"username\":\"pouros\"}\u003cbr\u003e  ]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThis route will respond with the updated book json including the list of users who have liked the book.\u003c/li\u003e\n\u003cli\u003eBONUS: Can you make it so a second patch request to the same book removes your user from the list of users? Can you toggle likes on and off?\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gdb0095acf78e553718d3e2b1c6d2e1a7","title":"Project: Dog Show Challenge","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dog-show-challenge\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/dog-show-challenge/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dog-show-challenge\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dog-show-challenge/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eYou are responsible for managing the website for the Westminster Kennel Club Dog Show. These dog owners are \u003cem\u003every\u003c/em\u003e competitive. We need to make sure that they can view all the competition (the other dogs) and edit their dog's information.\u003c/p\u003e\n\n\u003ch3\u003eGetting Started\u003c/h3\u003e\n\n\u003cp\u003eYou will be using the \u003ca href=\"https://github.com/typicode/json-server\"\u003ejson-server\u003c/a\u003e package to mock an external API. You can make the same RESTful requests to this server that you would to any API. If you haven't yet, install json-server.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install -g json-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen run the server with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejson-server --watch db.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will serve your code on \u003ca href=\"http://localhost:3000\"\u003ehttp://localhost:3000\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003eDeliverables\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eOn page load, render a list of already registered dogs in the table. You can fetch these dogs from \u003ca href=\"http://localhost:3000/dogs\"\u003ehttp://localhost:3000/dogs\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe dog should be put on the table as a table row. The HTML might look something like this \u003ccode\u003e\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Dog *Name*\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;*Dog Breed*\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;*Dog Sex*\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;Edit\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eMake a dog editable. Clicking on the edit button next to a dog should populate the top form with that dog's current information.\u003c/li\u003e\n\u003cli\u003eOn submit of the form, a PATCH request should be made to \u003ca href=\"http://localhost:3000/dogs/:id\"\u003ehttp://localhost:3000/dogs/:id\u003c/a\u003e to update the dog information (including name, breed and sex attributes).\u003c/li\u003e\n\u003cli\u003eOnce the form is submitted, the table should reflect the updated dog information. There are many ways to do this. You could search for the table fields you need to edit and update each of them in turn, but we suggest making a new get request for all dogs and rerendering all of them in the table. Make sure this GET happens after the PATCH so you can get the most up-to-date dog information.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eExample\u003c/h3\u003e\n\n\u003cp\u003eThe below gif demonstrates the working functionality of the app.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"assets/app.gif\" alt=\"app\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"assets/dog-show.jpg\" alt=\"dog\"\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gcfcf0e383585485a8cc1e51313165ad9","title":"Project: GitHub Search App","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-github-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-github-project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-github-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-github-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eGitHub API\u003c/h2\u003e\n\n\u003cp\u003eYou will be using the GitHub API for this project. You can view documentation\nfor this API \u003ca href=\"https://developer.github.com/v3/\"\u003ehere\u003c/a\u003e. This is an open API: no\nAPI key or authentication is required for the endpoints we will be using.\u003c/p\u003e\n\n\u003cp\u003eNotice the GitHub API documentation includes the following excerpt. They require\nyou to add a custom header to your requests.\u003c/p\u003e\n\n\u003cblockquote\u003e\nBy default, all requests to https://api.github.com receive the v3 version of the REST API. We encourage you to explicitly request this version via the Accept header.\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003eAccept: application/vnd.github.v3+json\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ca href=\"https://developer.github.com/v3/search/#search-users\"\u003eUser Search Endpoint\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eYou can search for users matching a certain name. For example, if we wanted to\nfind all users name \u003ccode\u003eoctocat\u003c/code\u003e, we would make a \u003ccode\u003eGET\u003c/code\u003e request to\n\u003ccode\u003ehttps://api.github.com/search/users?q=octocat\u003c/code\u003e. To view the response, you can\ncopy and paste that URL into your browser.\u003c/p\u003e\n\n\u003cp\u003eThis endpoint is rate limited. This means the API will stop returning data if\nyou make more than\n\u003ca href=\"https://developer.github.com/v3/search/#rate-limit\"\u003e10 requests per minute\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ca href=\"https://developer.github.com/v3/repos/#list-user-repositories\"\u003eUser Repos Endpoint\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eYou can find all the public repositories for a user using this endpoint. For\nexample if we wanted to find all the repositories for a user with GitHub\nusername \u003ccode\u003eoctocat\u003c/code\u003e, we would make a \u003ccode\u003eGET\u003c/code\u003e request to\n\u003ccode\u003ehttps://api.github.com/users/octocat/repos\u003c/code\u003e. To view the response, you can copy\nand paste that URL into your browser.\u003c/p\u003e\n\n\u003cp\u003eThis endpoint is rate limited. This endpoint will stop returning data if you\nmake more than\n\u003ca href=\"https://developer.github.com/v3/#rate-limiting\"\u003e60 requests in an hour\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDeliverables\u003c/h2\u003e\n\n\u003cp\u003eYou are going to build a JavaScript application which searches GitHub for users\nby name and displays the results on the screen. Clicking on a specific user will\nshow all the repositories for that user.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe \u003ccode\u003eindex.html\u003c/code\u003e file has a form with a search input. When the form is\nsubmitted, it should take the value of the input and search GitHub for user\nmatches using the \u003ca href=\"#user-search-endpoint\"\u003eUser Search Endpoint\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eUsing the results of the search, display information about the users to the\npage. (You might include showing their username, avatar and a link to their\nprofile.)\u003c/li\u003e\n\u003cli\u003eClicking on one of these users should send a request to the\n\u003ca href=\"#user-repos-endpoint\"\u003eUser Repos Endpoint\u003c/a\u003e and return data about all the\nrepositories for that user.\u003c/li\u003e\n\u003cli\u003eUsing the response from the Users Repos Endpoint, display all the\nrepositories for that user on the page.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBonus\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eToggle the search bar between searching for users by keyword and searching for\nrepos by keyword by adding an extra button. Hint: you can use the same search\nbar for this, but you may need to create a variable which stores what the\ncurrent search type is (user or repo). The endpoint to search repositories by\nkeyword is\n\u003ca href=\"https://developer.github.com/v3/search/#search-repositories\"\u003ehere\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g11dcca5dcb879e651c4ba4ac232cd841","title":"Project: Monsters","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-fetch-monster-practice-challenge\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-fetch-monster-practice-challenge/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-fetch-monster-practice-challenge\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-fetch-monster-practice-challenge/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFor this practice code challenge, your objective is to build a frontend for our\nmonsters data. Currently, the index.html page has a script tag to \u003ccode\u003ejs/demo.js\u003c/code\u003e\nso that you can see a demo of the finished app. Comment out the script tag to\n\u003ccode\u003ejs/demo.js\u003c/code\u003e and uncomment out the script tag to \u003ccode\u003ejs/index.js\u003c/code\u003e where you will\ncode your solution\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eIf you haven't yet, install json-server\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install -g json-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen run the server with\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejson-server monsters.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhen the page loads, show the first 50 monsters. Each monster's name, age, and\ndescription should be shown.\u003c/li\u003e\n\u003cli\u003eAbove your list of monsters, you should have a form to create a new monster.\nYou should have fields for name, age, and description, and a 'Create Monster\nButton'. When you click the button, the monster should be added to the list\nand saved in the API.\u003c/li\u003e\n\u003cli\u003eAt the end of the list of monsters, show a button. When clicked, the button\nshould load the next 50 monsters and show them.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAPI methods\u003c/h2\u003e\n\n\u003cp\u003eGet the list of monsters\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGET http://localhost:3000/monsters\u003cbr\u003e\u003cbr\u003eoptional parameters:\u003cbr\u003e\u003cbr\u003e_limit=[number] - limit the number of monsters returned\u003cbr\u003e_page=[number] - offset your request for monsters to some page (must specify a limit)\u003cbr\u003e\u003cbr\u003eexample:\u003cbr\u003e\u003cbr\u003eGET http://localhost:3000/monsters/?_limit=20\u0026amp;_page=3\u003cbr\u003e\u003cbr\u003esample response:\u003cbr\u003e[\u003cbr\u003e  {\u003cbr\u003e    \"name\": \"Chronos\",\u003cbr\u003e    \"age\": 4005.302453418598,\u003cbr\u003e    \"description\": \"Effulgence eldritch shunned foetid. Ululate gibbering tenebrous foetid iridescence daemoniac. Stench nameless gambrel. Amorphous furtive iridescence noisome. Foetid mortal nameless.\",\u003cbr\u003e    \"id\": 1\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"name\": \"Tartarus\",\u003cbr\u003e    \"age\": 1874.4913565609456,\u003cbr\u003e    \"description\": \"Cyclopean swarthy amorphous singular accursed furtive non-euclidean stygian. Swarthy gibbering charnel eldritch daemoniac gibbous. Cyclopean lurk hideous tentacles squamous immemorial tenebrous mortal. Madness tentacles furtive mortal foetid decadent. Foetid immemorial comprehension.\",\u003cbr\u003e    \"id\": 2\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"name\": \"Hemera\",\u003cbr\u003e    \"age\": 4094.8375978925988,\u003cbr\u003e    \"description\": \"Dank immemorial abnormal gambrel. Cat lurk unutterable. Abnormal tenebrous ululate. Nameless swarthy manuscript eldritch indescribable accursed antediluvian decadent.\",\u003cbr\u003e    \"id\": 3\u003cbr\u003e  }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCreate a monster\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePOST http://localhost:3000/monsters\u003cbr\u003eheaders: \u003cbr\u003e{\u003cbr\u003e  \"Content-Type\": \"application/json\",\u003cbr\u003e  Accept: \"application/json\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edata:\u003cbr\u003e{ name: string, age: number, description: string }\n\u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga4ecbe13efaed258cd78c56e02662c16","title":"Project: Quotes App","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-quotes-practice\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-quotes-practice/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-quotes-practice\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-quotes-practice/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse \u003ccode\u003ejson-server\u003c/code\u003e to provide a basic RESTful data store\u003c/li\u003e\n\u003cli\u003eBuild a simple, event-driven, JavaScript DOM-modifying application\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHello, let's build a simple app that allows us to keep track of our favorite quotes and who said them.\u003c/p\u003e\n\n\u003ch2\u003eUse \u003ccode\u003ejson-server\u003c/code\u003e to Provide a Basic RESTful Data Store\u003c/h2\u003e\n\n\u003cp\u003eIf you don't have \u003ccode\u003ejson-server\u003c/code\u003e installed, run \u003ccode\u003e$ npm i -g json-server\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf you already have it installed, run the server by: \u003ccode\u003e$ json-server --watch db.json\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eBuild a simple, Event-driven, JavaScript DOM-modifying application\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003ePopulate page with quotes with a \u003ccode\u003eGET\u003c/code\u003e request to\n\u003ccode\u003ehttp://localhost:3000/quotes?_embed=likes\u003c/code\u003e. The query string in this URL tells \n\u003ccode\u003ejson-server\u003c/code\u003e to include the likes for a quote in the JSON of the response. You\nshould not use this query string when creating or deleting a quote.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eEach quote should have the following structure:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e    \u003cli class=\"quote-card\"\u003e\n\u003cbr\u003e      \u003cblockquote class=\"blockquote\"\u003e\n\u003cbr\u003e        \u003cp class=\"mb-0\"\u003eLorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.\u003c/p\u003e\n\u003cbr\u003e        \u003cfooter class=\"blockquote-footer\"\u003eSomeone famous\u003c/footer\u003e\u003cbr\u003e        \u003cbr\u003e\u003cbr\u003e        Likes: \u003cspan\u003e0\u003c/span\u003e\u003cbr\u003e        Delete\u003cbr\u003e      \u003c/blockquote\u003e\n\u003cbr\u003e    \u003c/li\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eSubmitting the form creates a new quote and adds it to the list of quotes\nwithout having to refresh the page. Pessimistic rendering is reccommended.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eClicking the delete button should delete the respective quote from the\nAPI and remove it from the page without having to refresh.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClicking the like button will create a like for this particular quote in the\nAPI and update the number of likes displayed on the page without having to\nrefresh.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse a \u003ccode\u003ePOST\u003c/code\u003e request to \u003ccode\u003ehttp://localhost:3000/likes\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThe body of the request should be a JSON object containing a key of\n\u003ccode\u003equoteId\u003c/code\u003e, with an \u003cem\u003einteger\u003c/em\u003e value. Use the ID of the quote you're creating the like for — e.g. \u003ccode\u003e{ quoteId: 5 }\u003c/code\u003e to create a like for quote 5. \u003c/li\u003e\n\u003cli\u003eIMPORTANT: if the \u003ccode\u003equoteID\u003c/code\u003e is a string for some reason (for example, if you've pulled the ID from a dataset)\u0026nbsp;the index page will not include the like you create on \u003cem\u003eany\u003c/em\u003e quote.\u003c/li\u003e\n\u003cli\u003eBonus (not required): add a \u003ccode\u003ecreatedAt\u003c/code\u003e key to your object to track when\nthe like was created. Use \u003ca href=\"https://en.wikipedia.org/wiki/Unix_time\"\u003eUNIX time\u003c/a\u003e (the number of seconds since\nJanuary 1, 1970). The  \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003edocumentation\u003c/a\u003e for the JS \u003ccode\u003eDate\u003c/code\u003e class may be\nhelpful here!\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eExtend Your Learning\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an edit button to each quote-card that will allow the editing of a quote. \u003cem\u003e(Hint: there is no 'correct' way to do this. You can try creating a hidden form that will only show up when hitting the edit button.)\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003eCurrently, the number of likes of each post does not persist on the frontend after we refresh, as we set the beginning value to 0. Include an additional fetch to always have an updated number of likes for each post. You will send a GET request to \u003ccode\u003ehttp://localhost:3000/likes?quoteId=\u003c/code\u003e and interpolate the id of a given post.\u003c/li\u003e\n\u003cli\u003eAdd a sort button that can be toggled on or off. When off the list of quotes will appear sorted by the ID. When the sort is active, it will display the quotes by author's name, alphabetically.\n\n\u003cul\u003e\n\u003cli\u003eOne way of doing this is to sort the quotes in JS after you've retrieved them from the API. Try this way first.\u003c/li\u003e\n\u003cli\u003eAnother way of doing this is to make a fetch to \u003ccode\u003ehttp://localhost:3000/quotes?_sort=author\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWhat are the pros and cons in doing the sorting on the client vs. the server? Discuss with a partner.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBuilding an application like this is a typical interview exercise. It's not\nuncommon to be set in front of a foreign computer (or asked to bring your own)\nand to receive a specification like this.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb78d1c12f8f9845b9b59c2b4ca32d44c","title":"Project: Woof Woof Welcome to Doggo App","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"woof-woof-js-practice\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/woof-woof-js-practice/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/woof-woof-js-practice\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/woof-woof-js-practice/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eTHIS GOOD APPLICATION FOR LOOKING AT DOGS BOW WOW.\u003c/p\u003e\n\n\u003cp\u003eWHEN LOOKING AT PUP PUPS USER SHOULD BE ABLE TO:\n - CLICK ON DOGS IN THE DOG BAR TO SEE MORE INFO ABOUT THE GOOD PUPPER;\n   - MORE INFO INCLUDES A DOG PIC, A DOG NAME, AND A DOG BUTTON THAT INDICATES\n     WHETHER IT IS A GOOD DOG OR A BAD DOG;\n - CLICK ON GOOD DOG/BAD DOG BUTTON IN ORDER TO TOGGLE PUP GOODNESS;\n - CLICK ON \"FILTER GOOD DOGS\" BUTTON IN ORDER TO JUST SEE GOOD DOGS OR SEE\n   ALL DOGS IN DOG BAR.\u003c/p\u003e\n\n\u003ch2\u003eEXAMPLE:\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"woof-woof-demo.gif\" alt=\"Showcasing the full functionality\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eSTEP 1: VIEW THE DATA\u003c/h3\u003e\n\n\u003cp\u003eAll of the dog data is stored in the \u003ccode\u003edb.json\u003c/code\u003e file. You'll want to access this data\nusing a json server. In order to do this, run \u003ccode\u003e$ npm install -g json-server\u003c/code\u003e and\nthen \u003ccode\u003e$ json-server --watch db.json\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis will setup the data on a server using restful routes at \u003ca href=\"http://localhost:3000/pups\"\u003ehttp://localhost:3000/pups\u003c/a\u003e.\nGo ahead and head to that url in your browser to view the data.\nFamiliarize yourself with the attributes for each pup. Try going to \u003ccode\u003e/pups/:id\u003c/code\u003e to see an individual pup as well.\u003c/p\u003e\n\n\u003ch3\u003eSTEP 2: ADD PUPS TO DOG BAR\u003c/h3\u003e\n\n\u003cp\u003eOn the page, there is a \u003ccode\u003ediv\u003c/code\u003e with the id of \u003ccode\u003e\"dog-bar\"\u003c/code\u003e. On page load, make a fetch\nto get all of the pup objects. When you have this information, you'll need to add\na \u003ccode\u003espan\u003c/code\u003e with the pup's name to the dog bar (ex: \u003ccode\u003e\u0026lt;span\u0026gt;Mr. Bonkers\u0026lt;/span\u0026gt;\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch3\u003eSTEP 3: SHOW MORE INFO ABOUT EACH PUP\u003c/h3\u003e\n\n\u003cp\u003eWhen a user clicks on a pup's \u003ccode\u003espan\u003c/code\u003e in the dog bar, that pup's info (\u003ccode\u003eimage\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e, and \u003ccode\u003eisGoodDog\u003c/code\u003e status) should show up in the \u003ccode\u003ediv\u003c/code\u003e with the id of \u003ccode\u003e\"dog-info\"\u003c/code\u003e.\nWhen you have the pup's information, the dog info \u003ccode\u003ediv\u003c/code\u003e should have the following children:\n - an \u003ccode\u003eimg\u003c/code\u003e tag with the pup's image url\n - an \u003ccode\u003eh2\u003c/code\u003e with the pup's name\n - a \u003ccode\u003ebutton\u003c/code\u003e that says \u003ccode\u003e\"Good Dog!\"\u003c/code\u003e or \u003ccode\u003e\"Bad Dog!\"\u003c/code\u003e based on whether \u003ccode\u003eisGoodDog\u003c/code\u003e is true or false.\n Ex:\n \u003ccode\u003e\n  \u0026lt;img src=dog_image_url\u0026gt;\n  \u0026lt;h2\u0026gt;Mr. Bonkers\u0026lt;/h2\u0026gt;\n  \u0026lt;button\u0026gt;Good Dog!\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eSTEP 4: TOGGLE GOOD DOG\u003c/h3\u003e\n\n\u003cp\u003eWhen a user clicks the Good Dog/Bad Dog button, two things should happen:\n  - The button's text should change from Good to Bad or Bad to Good\n  - The corresponding pup object in the database should be updated to reflect the new isGoodDog value\n    - Please note, you can update a dog by making a PATCH request to \u003ccode\u003e/pups/:id\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eBONUS! STEP 5: FILTER GOOD DOGS\u003c/h3\u003e\n\n\u003cp\u003eWhen a user clicks on the Filter Good Dogs button, two things should happen:\n - The button's text should change from \"Filter good dogs: OFF\" to \"Filter good dogs: ON\", or vice versa.\n - If the button now says \"ON\" (meaning the filter is on), then the Dog Bar should only show pups whose isGoodDog attribute is true. If the filter is off, the Dog Bar should show all pups (like normal).\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfa305b482885eb09f0f1c78c0eb83044","title":"Review: Acting on Events","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-acting-on-events-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice moving elements on the page\u003c/li\u003e \u003cli\u003eDemonstrate how to move an element in response to a browser event\u003c/li\u003e \u003cli\u003eDemonstrate how to update an element's position on the page conditionally\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThink back to the first video game you played.\u003c/p\u003e  \u003cp\u003eThink about the mechanics of that game. When you \u003cem\u003etilted\u003c/em\u003e a joystick or \u003cem\u003epressed\u003c/em\u003e a button it responded to your whims. It pulled you into its story by giving you a window into its world and a way of interacting with — shaping, even — that world. When you performed an \u003cstrong\u003e\u003cem\u003eevent\u003c/em\u003e\u003c/strong\u003e, the computer made the world respond: the little plumber from Brooklyn jumped (\u003cem\u003eSuper Mario Franchise\u003c/em\u003e), the undead warrior slashed at an evil foe (\u003cem\u003eDark Souls\u003c/em\u003e), or the banana-yellow guy ate the power pellet (\u003cem\u003ePac-Man\u003c/em\u003e).\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-acting-on-events/Image_36_VideoGame.png\" alt=\"Controlling classic video game characters Mario and Pacman\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cem\u003eProgramming means that you can create such a world for other people.\u003c/em\u003e Sure, it'll be a while before you're ready to build something like one of the classic games above, but we can start with the essential steps. In this lab we'll learn how to move an element on a page in response to an \u003cem\u003eevent\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003cp\u003eGo ahead and run the tests. You'll see that you need to create two functions to get the tests passing: \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e and \u003ccode\u003emoveDodgerRight()\u003c/code\u003e. We'll write \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e together, then you'll create \u003ccode\u003emoveDodgerRight()\u003c/code\u003e on your own.\u003c/p\u003e  \u003ch2\u003ePractice Moving Elements on the Page\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/rock-dodger.png\" alt=\"Rock Dodger!\"\u003e\u003c/p\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in the browser. You'll see a black square which represents the game field and a white rectangle at the bottom of that field which is our game piece, the dodger. Now open DevTools and click on the Elements tab. You'll see that the game field is a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"game.\" Expand that \u003ccode\u003ediv\u003c/code\u003e and you'll see that the game piece is a second, nested \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"dodger.\"\u003c/p\u003e  \u003cp\u003eClick on the game \u003ccode\u003ediv\u003c/code\u003e and take a look at its CSS in the styles tab. You'll see that the game field has a height and width of 400px. Now click on the dodger and note that it has a height of 20px and a width of 40px. Finally, take a look at the inline style on the dodger \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e: the \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties define the dodger's starting position \u003cem\u003erelative to its parent element, the game field\u003c/em\u003e. In other words, the lower left corner of the game field corresponds to\u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003ebottom\u003c/code\u003e positions of 0px. The starting values of the dodger's \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties are what places it at the bottom center of the game field when our game launches.\u003c/p\u003e  \u003cp\u003eBefore we can use JavaScript to move the dodger, we first need to grab it and save a reference to it in a variable. Enter the following in the console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst dodger = document.getElementById(\"dodger\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAwesome. Now let's change its color:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.backgroundColor = \"#000000\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhoa, where'd it go? Well, we changed the color to \u003ccode\u003e#000000\u003c/code\u003e, another way of expressing \"black.\" So it just blends in with the background.\u003c/p\u003e  \u003cp\u003eLet's change it to something more visible.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.backgroundColor = \"#FF69B4\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMuch better!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger.png\" alt=\"pink dodger\"\u003e\u003c/p\u003e  \u003cp\u003eAccessing the \u003ccode\u003estyle\u003c/code\u003e property of the \u003ccode\u003edodger\u003c/code\u003e element allows us to change things like the \u003ccode\u003ebackgroundColor\u003c/code\u003e, \u003ccode\u003eheight\u003c/code\u003e, \u003ccode\u003ewidth\u003c/code\u003e, etc. We can also use it to change an element's position on the page.\u003c/p\u003e  \u003cp\u003eLet's start by moving the element up:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.bottom = \"100px\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger_bottom_100.png\" alt=\"up 100px\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Even though we're talking about \u003cem\u003enumeric\u003c/em\u003e coordinates, note that we need to move the dodger by assigning a new \u003cem\u003estring value\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eWe can verify our dodger's current position by simply typing \u003ccode\u003edodger.style.left\u003c/code\u003e or \u003ccode\u003edodger.style.bottom\u003c/code\u003e into the console.\u003c/p\u003e  \u003cp\u003eLet's return it to where it started by resetting the \u003ccode\u003ebottom\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.bottom = \"0px\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's visually verify that the dodger's position is determined relative to the game field by changing its \u003ccode\u003eleft\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edodger.style.left = \"0px\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see the dodger nestled up against the bottom left corner of the game field.\u003c/p\u003e  \u003ch2\u003eDemonstrate How to Move an Element in Response to a Browser Event\u003c/h2\u003e  \u003cp\u003eNow that we know how to write the code to move the dodger, let's figure out how to tie that action to an event.\u003c/p\u003e  \u003cp\u003eLet's say we want the user to be able to move the dodger to the left using the left arrow key. We learned in an earlier lesson that, when a key is pressed, the \u003ccode\u003ekeydown\u003c/code\u003e event provides a code to indicate which key it was. So the first thing we have to do is figure out what code is used to identify the left arrow key. We could look it up, but we're programmers — let's explore!\u003c/p\u003e  \u003cp\u003eSo what do we mean when we say that an event provides a code? Any time an event listener is in place and the event it's listening for is triggered, a JavaScript object containing a bunch of information about the event is \u003cstrong\u003eautomatically\u003c/strong\u003e passed as an argument to the callback function. We can access that object and the information it contains by defining a parameter for the callback. It looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(event) {\u003cbr\u003e  console.log(event);\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy defining the \u003ccode\u003eevent\u003c/code\u003e parameter in the parentheses, we've given the body of the callback access to that event object, which is what allows us to log it to the console. Note that, as with any JavaScript parameter (and, in fact, any JavaScript variable), we can give it any valid JavaScript variable name we like. By convention, and in keeping with programming best practice of using meaningful variable names, the name JavaScript programmers use for this parameter is usually either \u003ccode\u003eevent\u003c/code\u003e or \u003ccode\u003ee\u003c/code\u003e. You will see these in a lot of JavaScript code, and we recommend you use them as well.\u003c/p\u003e  \u003cp\u003eThis pattern, when you first encounter it, is tricky to wrap your head around. Don't worry if it doesn't make total sense yet — it will become clearer as you continue through the curriculum. You might also want to read the excellent accepted answer in \u003ca href=\"https://stackoverflow.com/questions/35936365/what-exactly-is-the-parameter-e-event-and-why-pass-it-to-javascript-functions\"\u003ethis Stack Overflow thread\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at what that event object looks like. Enter the code above into the console then click in the browser window (where the game field and dodger are rendered). Now, if you press the left arrow key, you should see a \u003ccode\u003eKeyboardEvent\u003c/code\u003e logged in the console. Expand the event and you'll see its properties listed; the one we're interested in is the \u003ccode\u003ekey\u003c/code\u003e property. Try pressing some other keys as well and check out their \u003ccode\u003ekey\u003c/code\u003e properties.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/keyboard-event.png\" alt=\"Keyboard Event\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e You can explore other event types as well: just change the name of the event in the code above.\u003c/p\u003e  \u003cp\u003eNow that we know the code the event uses to identify the left arrow key, we can write the JavaScript code to move the dodger left when the key is pressed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(event) {\u003cbr\u003e  if (event.key === \"ArrowLeft\") {\u003cbr\u003e    const leftNumbers = dodger.style.left.replace(\"px\", \"\");\u003cbr\u003e    const left = parseInt(leftNumbers, 10);\u003cbr\u003e\u003cbr\u003e    dodger.style.left = `${left - 1}px`;\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo what are we doing here? Well, when our event listener detects a \u003ccode\u003ekeydown\u003c/code\u003e event, we first check to see whether the \u003ccode\u003ekey\u003c/code\u003e property of the event object has the value \"ArrowLeft.\" If it does, we get the current value of the dodger's \u003ccode\u003estyle.left\u003c/code\u003e property and use the \u003ca href=\"https://www.w3schools.com/jsref/jsref_replace.asp\"\u003eString \u003ccode\u003ereplace()\u003c/code\u003e method\u003c/a\u003e to strip out the \"px\", then store the result in \u003ccode\u003eleftNumbers\u003c/code\u003e.  Next, we parse \u003ccode\u003eleftNumbers\u003c/code\u003e as an integer and store that result in \u003ccode\u003eleft\u003c/code\u003e. Finally, we update the dodger's \u003ccode\u003estyle.left\u003c/code\u003e property using string interpolation, injecting the current value minus 1. If the key that's pressed is \u003cem\u003enot\u003c/em\u003e the left arrow key, we do zilch. Try it out in the browser yourself!! (Be sure to refresh the page first.)\u003c/p\u003e  \u003cp\u003eWe do still have a problem, though. Even though we're only going one pixel at a time, eventually our dodger will zoom (well, relatively speaking) right out of view.\u003c/p\u003e  \u003cp\u003eHow can we prevent this? We need to check where the left edge of the dodger is and only move it if it hasn't yet reached the left edge of the game field.\u003c/p\u003e  \u003ch2\u003eUpdate an Element's Position on the Page Conditionally\u003c/h2\u003e  \u003cp\u003eOur callback function is starting to get pretty complex. This is probably a good time to break the dodger's movement out into a separate function. We want to move the dodger left if our \u003ccode\u003eif\u003c/code\u003e statement returns true, so let's pull out the body of that \u003ccode\u003eif\u003c/code\u003e statement into a function called \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eRefresh the page so we're starting with a blank slate, then grab the dodger again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst dodger = document.getElementById(\"dodger\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we'll build our \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e function, adding a check on the current position of the dodger:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction moveDodgerLeft() {\u003cbr\u003e  const leftNumbers = dodger.style.left.replace(\"px\", \"\");\u003cbr\u003e  const left = parseInt(leftNumbers, 10);\u003cbr\u003e\u003cbr\u003e  if (left \u0026gt; 0) {\u003cbr\u003e    dodger.style.left = `${left - 1}px`;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're doing essentially the same thing, but we first ensure that the dodger's left edge has not reached the left edge of its container.\u003c/p\u003e  \u003cp\u003eNow let's wire this up to our event listener:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(e) {\u003cbr\u003e  if (e.key === \"ArrowLeft\") {\u003cbr\u003e    moveDodgerLeft();\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow try moving the dodger past the left edge. No can do!\u003c/p\u003e  \u003cp\u003eCopy the final code into \u003ccode\u003eindex.js\u003c/code\u003e and run the tests. You should now have the first one passing.\u003c/p\u003e  \u003ch2\u003eLab\u003c/h2\u003e  \u003cp\u003eNow it's your turn. With the code implemented from the code-along, think about what needs to change to make a \u003ccode\u003emoveDodgerRight()\u003c/code\u003e function. You'll need to add another condition to your event listener's callback function to call \u003ccode\u003emoveDodgerRight()\u003c/code\u003e. Then, inside the function, instead of moving the dodger \u003ccode\u003e${left - 1}px\u003c/code\u003e, you'll be moving it \u003ccode\u003e${left + 1}px\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It may seem logical that you would use the dodger's \u003ccode\u003estyle.right\u003c/code\u003e property to move the dodger right, but that won't work. The reason is that changing the \u003ccode\u003estyle.right\u003c/code\u003e property \u003cem\u003edoesn't change\u003c/em\u003e the \u003ccode\u003estyle.left\u003c/code\u003e property, which means we'd have conflicting information about where the dodger should be on the screen. JavaScript solves this problem by giving precedence to \u003ccode\u003estyle.left\u003c/code\u003e. In other words, once the user presses the left arrow key for the first time and the value of \u003ccode\u003estyle.left\u003c/code\u003e is changed, any subsequent changes to \u003ccode\u003estyle.right\u003c/code\u003e will be ignored.\u003c/p\u003e  \u003cp\u003eFinally, implement the code needed to prevent the dodger from escaping off the right-hand side. How can we check whether the \u003cem\u003eright\u003c/em\u003e edge of the dodger has reached the \u003cem\u003eright\u003c/em\u003e edge of the game field? (Keep in mind that the dodger is 40px wide.)\u003c/p\u003e  \u003cp\u003eOnce you've completed the work to get the tests to pass, the last step is to \"try out\" your application. Make sure it works the way you expect in the browser. In professional applications, tests can't cover 100% of the use of the application. It's important to realize that \"passing all the tests\" \u003cem\u003eis not the same\u003c/em\u003e as \"building a working application.\"\u003c/p\u003e  \u003cp\u003eBe sure to do a human-level manual \"play through\" with your dodger to make sure your working code \u003cem\u003ereally works\u003c/em\u003e!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/vvLWidwZNYH5e/200w_d.gif\" alt=\"Passing the Tests is only part of the job\"\u003e\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eEvents and event handling are vital to web programming. JavaScript allows for dynamic page rendering, so users can interact with the contents of the page in real time. Knowledge of the basic techniques we've learned so far sets you on the road toward being able to create complex interactions like those in video games you may have played before!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gcdeec4f37584b0ec9ecfbc4ddfca1983","title":"Review: Arithmetic Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-js-fundamentals-arithmetic-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-js-fundamentals-arithmetic-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-js-fundamentals-arithmetic-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize the limitations of math in JavaScript\u003c/li\u003e \u003cli\u003eEmploy operators to perform arithmetic and assign values to variables\u003c/li\u003e \u003cli\u003eExplain what \u003ccode\u003eNaN\u003c/code\u003e is\u003c/li\u003e \u003cli\u003eUse built-in objects like \u003ccode\u003eMath\u003c/code\u003e and \u003ccode\u003eNumber\u003c/code\u003e to accomplish complex tasks\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe're going to discuss a number of the common operators and objects we'll use to perform arithmetic operations in JavaScript.\u003c/p\u003e  \u003cp\u003eIn the browser's JavaScript console, we can test out all of the examples in this lesson. Remember that we can't redeclare variables previously declared with \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e, so the page may have to be refreshed (which wipes away all declared variables) or different variable names can be chosen than those in the examples.\u003c/p\u003e  \u003ch2\u003eRecognize the Limitations of Math in JavaScript\u003c/h2\u003e  \u003cp\u003e\u003cstrong\u003eMath is awesome!\u003c/strong\u003e JavaScript has only a single, all-encompassing \u003ccode\u003enumber\u003c/code\u003e type. While other languages might have distinct types for integers, decimals, and the like, JavaScript represents everything as a double-precision floating-point number, or \u003cem\u003efloat\u003c/em\u003e. This imposes some interesting technical limitations on the precision of the arithmetic we can perform with JavaScript. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e0.1 * 0.1;\u003cbr\u003e//=\u0026gt; 0.010000000000000002\u003cbr\u003e\u003cbr\u003e0.1 + 0.1 + 0.1;\u003cbr\u003e//=\u0026gt; 0.30000000000000004\u003cbr\u003e\u003cbr\u003e1 - 0.9;\u003cbr\u003e//=\u0026gt; 0.09999999999999998 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou shouldn't waste too much time diving into why this happens, but it basically boils down to the language, once again, trying to be too user-friendly. Under the hood, JavaScript stores numbers in binary (base-2) format, as a series of \u003ccode\u003e1\u003c/code\u003es and \u003ccode\u003e0\u003c/code\u003es, but it displays numbers in the more human-readable decimal (base-10) format. The problem that the above code snippet highlights is that it's really easy to represent something like \u003ccode\u003e1/10\u003c/code\u003e in decimal (\u003ccode\u003e0.1\u003c/code\u003e) but impossible to do it in binary (\u003ccode\u003e0.0001100110011...\u003c/code\u003e). It's the exact same problem that the decimal system has in trying to represent \u003ccode\u003e1/3\u003c/code\u003e as \u003ccode\u003e0.33333333333...\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe only time you'd really have to worry about this is if you needed to calculate something to a high degree of precision, like interest payments for a bank. However, for most of our day-to-day arithmetic needs, JavaScript is more than capable.\u003c/p\u003e  \u003ch2\u003eEmploy Operators to Perform Arithmetic and Assign Values to Variables\u003c/h2\u003e  \u003cp\u003eJavaScript employs a pretty standard set of arithmetic operators.\u003c/p\u003e  \u003ch3\u003eArithmetic Operators\u003c/h3\u003e  \u003ch4\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eWe've used the addition operator to concatenate strings, but it's also used to add numbers together:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e40 + 2;\u003cbr\u003e//=\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe subtraction operator returns the difference between two numbers:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9001 - 9000;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe multiplication operator returns the product of two numbers:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e6 * 7;\u003cbr\u003e//=\u0026gt; 42 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e/\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe division operator returns the result of the left number divided by the right number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9001 / 42;\u003cbr\u003e//=\u0026gt; 214.3095238095238 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e%\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe remainder operator returns the remainder when the left number is divided by the right number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9001 % 42;\u003cbr\u003e//=\u0026gt; 13 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003e**\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe exponentiation operator returns the left number raised to the power of the right number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2 ** 8;\u003cbr\u003e//=\u0026gt; 256 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eOrder of Operations\u003c/h3\u003e  \u003cp\u003eJavaScript evaluates compound arithmetic operations by following the standard \u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003eorder of operations\u003c/a\u003e used in basic math. Anything in parentheses has highest priority; exponentiation is second; then multiplication, division, and remainder; and, finally, addition and subtraction, in order from left to right. This is how the JavaScript compiler works. For example:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003e( )\u003c/code\u003e → \u003ccode\u003e**\u003c/code\u003e → \u003ccode\u003e*\u003c/code\u003e \u003ccode\u003e/\u003c/code\u003e \u003ccode\u003e%\u003c/code\u003e → \u003ccode\u003e+\u003c/code\u003e \u003ccode\u003e-\u003c/code\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2 - (2 % 2) + (2 / 2 ** 2) * 2;\u003cbr\u003e//=\u0026gt; 3\u003cbr\u003e\u003cbr\u003e2 - ((2 % (2 + 2)) / 2 ** 2) * 2;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eIncrementing and Decrementing\u003c/h3\u003e  \u003cp\u003eJavaScript also has a pair of operators that we can use to increment and decrement a numerical value stored in a variable.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003e++\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe \u003ccode\u003e++\u003c/code\u003e operator increments the stored number by \u003ccode\u003e1\u003c/code\u003e. If the \u003ccode\u003e++\u003c/code\u003e operator comes after the variable (e.g., \u003ccode\u003ecounter++\u003c/code\u003e), the variable's value is \u003cem\u003ereturned first and then incremented\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ecounter++;\u003cbr\u003e//=\u0026gt; 0\u003cbr\u003e\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the \u003ccode\u003e++\u003c/code\u003e operator comes before the variable (e.g., \u003ccode\u003e++counter\u003c/code\u003e), the variable's value is \u003cem\u003eincremented first and then returned\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e++counter;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn both cases, \u003ccode\u003ecounter\u003c/code\u003e contains the value \u003ccode\u003e1\u003c/code\u003e after incrementing. The difference is in whether we want the operation to return the original or incremented value.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003e--\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe \u003ccode\u003e--\u003c/code\u003e operator decrements the stored number by \u003ccode\u003e1\u003c/code\u003e and has the same pair of prefix and postfix options as the \u003ccode\u003e++\u003c/code\u003e operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e// Return the current value of 'counter' and then decrement by 1\u003cbr\u003ecounter--;\u003cbr\u003e//=\u0026gt; 0\u003cbr\u003e\u003cbr\u003e// Check the new value of 'counter'\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; -1\u003cbr\u003e\u003cbr\u003e// Decrement 'counter' and then return the new value\u003cbr\u003e--counter;\u003cbr\u003e//=\u0026gt; -2\u003cbr\u003e\u003cbr\u003e// Check the new value of 'counter'\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; -2 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eAssignment operators\u003c/h2\u003e  \u003cp\u003eJavaScript has a number of operators for assigning a value to a variable. We've already used the most basic, \u003ccode\u003e=\u003c/code\u003e, but we can also couple it with an arithmetic operator to perform an operation \u003cem\u003eand\u003c/em\u003e assign the value of the operation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ecounter += 10;\u003cbr\u003e//=\u0026gt; 10\u003cbr\u003e\u003cbr\u003ecounter -= 2;\u003cbr\u003e//=\u0026gt; 8\u003cbr\u003e\u003cbr\u003ecounter *= 4;\u003cbr\u003e//=\u0026gt; 32\u003cbr\u003e\u003cbr\u003ecounter /= 2;\u003cbr\u003e//=\u0026gt; 16\u003cbr\u003e\u003cbr\u003ecounter %= 6;\u003cbr\u003e//=\u0026gt; 4\u003cbr\u003e\u003cbr\u003ecounter **= 3;\u003cbr\u003e//=\u0026gt; 64 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eExplain What \u003ccode\u003eNaN\u003c/code\u003e Is\u003c/h2\u003e  \u003cp\u003eJavaScript tries to return a value for every operation, but sometimes we'll ask it to calculate the incalculable. For example, imagine that one of the lines of code in our program increments the value of a \u003ccode\u003ecounter\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e. However, something broke in a different part of the program, and \u003ccode\u003ecounter\u003c/code\u003e is currently \u003ccode\u003eundefined\u003c/code\u003e. When the JavaScript engine reaches the incrementing line, what happens?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecounter++;\u003cbr\u003e//=\u0026gt; NaN \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine can't add \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003eundefined\u003c/code\u003e, so it tells us the result is \u003cstrong\u003eNot a Number\u003c/strong\u003e —\u0026nbsp;\u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eTop Tip\u003c/em\u003e\u003c/strong\u003e: Much like \u003ccode\u003eundefined\u003c/code\u003e, you should never assign \u003ccode\u003eNaN\u003c/code\u003e as the value of a variable and instead let it be a signal that some weird maths are happening in your code.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eUse built-in objects like \u003ccode\u003eMath\u003c/code\u003e and \u003ccode\u003eNumber\u003c/code\u003e to accomplish complex tasks\u003c/h2\u003e  \u003cp\u003eTo satisfy most of our math needs, JavaScript provides several built-in objects that we can reference anywhere in JavaScript code, including \u003ccode\u003eNumber\u003c/code\u003e and \u003ccode\u003eMath\u003c/code\u003e. With these objects, we can perform complex tasks like generating random numbers.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eNumber\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eNumber\u003c/code\u003e object comes with a collection of handy methods that we can use for checking and converting numbers in JavaScript.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003eNumber.isInteger()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eChecks whether the provided argument is an integer:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.isInteger(42);\u003cbr\u003e//=\u0026gt; true\u003cbr\u003e\u003cbr\u003eNumber.isInteger(0.42);\u003cbr\u003e//=\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eNumber.isFinite()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eChecks whether the provided argument is finite:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.isFinite(9001);\u003cbr\u003e//=\u0026gt; true\u003cbr\u003e\u003cbr\u003eNumber.isFinite(Infinity);\u003cbr\u003e//=\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eNumber.isNaN()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eChecks whether the provided argument is \u003ccode\u003eNaN\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.isNaN(10);\u003cbr\u003e//=\u0026gt; false\u003cbr\u003e\u003cbr\u003eNumber.isNaN(undefined);\u003cbr\u003e//=\u0026gt; false\u003cbr\u003e\u003cbr\u003eNumber.isNaN(NaN);\u003cbr\u003e//=\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eNumber.parseInt()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eAccepts a string as its first argument and parses it as an integer. The second argument is the base that should be used in parsing (e.g., \u003ccode\u003e2\u003c/code\u003e for binary or \u003ccode\u003e10\u003c/code\u003e for decimal). For example, \u003ccode\u003e100\u003c/code\u003e is \u003ccode\u003e100\u003c/code\u003e in decimal but \u003ccode\u003e4\u003c/code\u003e in binary:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.parseInt('100', 10);\u003cbr\u003e//=\u0026gt; 100\u003cbr\u003e\u003cbr\u003eNumber.parseInt('100', 2);\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second argument is optional, but you should always provide it to avoid confusion.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003eNumber.parseFloat()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003e\u003ccode\u003eNumber.parseFloat()\u003c/code\u003e only accepts a single argument, the string that should be parsed into a floating-point number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eNumber.parseFloat('3.14159');\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003e\u003ccode\u003eMath\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eMath\u003c/code\u003e object contains some properties representing common mathematical values, such as \u003ccode\u003eMath.PI\u003c/code\u003e and \u003ccode\u003eMath.E\u003c/code\u003e, as well as a number of methods for performing useful calculations.\u003c/p\u003e  \u003ch4\u003e\n\u003ccode\u003eMath.ceil()\u003c/code\u003e / \u003ccode\u003eMath.floor()\u003c/code\u003e / \u003ccode\u003eMath.round()\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eJavaScript provides three methods for rounding numbers. \u003ccode\u003eMath.ceil()\u003c/code\u003e rounds the number \u003cem\u003eup\u003c/em\u003e, \u003ccode\u003eMath.floor()\u003c/code\u003e rounds the number \u003cem\u003edown\u003c/em\u003e, and \u003ccode\u003eMath.round()\u003c/code\u003e rounds the number either up or down, whichever is nearest:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eMath.ceil(0.5);\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003eMath.floor(0.5);\u003cbr\u003e//=\u0026gt; 0\u003cbr\u003e\u003cbr\u003eMath.round(0.5);\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003eMath.round(0.49);\u003cbr\u003e//=\u0026gt; 0 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\n\u003ccode\u003eMath.max()\u003c/code\u003e / \u003ccode\u003eMath.min()\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eThese two methods accept a number of arguments and return the lowest and highest constituent, respectively:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eMath.max(1, 2, 3, 4, 5);\u003cbr\u003e//=\u0026gt; 5\u003cbr\u003e\u003cbr\u003eMath.min(1, 2, 3, 4, 5);\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\u003ccode\u003eMath.random()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThis method generates a random number between \u003ccode\u003e0\u003c/code\u003e (inclusive) and \u003ccode\u003e1\u003c/code\u003e (exclusive):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eMath.random();\u003cbr\u003e//=\u0026gt; 0.4495507082209371 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn combination with some simple arithmetic and one of the rounding methods, we can generate random integers within a specific range. For example, to generate a random integer between \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e10\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eMath.floor(Math.random() * 10) + 1;\u003cbr\u003e//=\u0026gt; 8\u003cbr\u003e\u003cbr\u003eMath.floor(Math.random() * 10) + 1;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003eMath.floor(Math.random() * 10) + 1;\u003cbr\u003e//=\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eMath.random()\u003c/code\u003e returns a number between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e0.999...\u003c/code\u003e, which we multiply by \u003ccode\u003e10\u003c/code\u003e to give us a number between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e9.999...\u003c/code\u003e. We then pass that number to \u003ccode\u003eMath.floor()\u003c/code\u003e, which returns an integer between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e9\u003c/code\u003e. That's one less than the desired range (\u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003e10\u003c/code\u003e), so we add one at the end of the equation. Try it out in the JS console!\u003c/p\u003e  \u003ch2\u003eAssignment\u003c/h2\u003e  \u003cp\u003eThere are four challenges we need you to solve. Code your solution in \u003ccode\u003eindex.js\u003c/code\u003e. We'll provide some brief instructions here, but you should really rely on the test failure messages to guide your code.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003col\u003e \u003cli\u003eCreate a variable called \u003ccode\u003emultiply\u003c/code\u003e set to an equation that will multiply the variables \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e; the result of the multiplication should be \u003ccode\u003e62\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eCreate a variable called \u003ccode\u003erandom\u003c/code\u003e that will generate a random integer greater than 0.\u003c/li\u003e \u003cli\u003eCreate a variable called \u003ccode\u003emod\u003c/code\u003e set to an equation that will calculate the remainder of dividing variable \u003ccode\u003enum3\u003c/code\u003e by \u003ccode\u003enum4\u003c/code\u003e; the remainder should be \u003ccode\u003e4\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eCreate a variable called \u003ccode\u003emax\u003c/code\u003e that finds the highest number in a set; the value returned should be \u003ccode\u003e20\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/17556281/28846833-e671480c-76da-11e7-9285-17b5c592e065.gif\" alt=\"Good luck\"\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math\"\u003eBasic math in JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\"\u003eArithmetic operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\"\u003eOperator precedence\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\"\u003eAssignment operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\"\u003e\u003ccode\u003eNumber\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\"\u003e\u003ccode\u003eMath\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://2ality.com/2012/04/number-encoding.html\"\u003e2ality — How numbers are encoded in JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003eOrder of Operations\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g178879c3d7b187bc062fe6b49b2bece3","title":"Review: Arrays Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice writing arrays\u003c/li\u003e \u003cli\u003ePractice using \u003cem\u003edestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e \u003cli\u003ePractice using \u003cem\u003enondestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've learned about how arrays work and about the array methods built in to JavaScript that we can use to manipulate them. Now it's time to practice what we've learned.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eOpen up the \u003ccode\u003etest\u003c/code\u003e folder and take a look at \u003ccode\u003eindexTest.js\u003c/code\u003e. Note that some of the names of the functions you will be writing begin with \u003ccode\u003edestructively\u003c/code\u003e and some don't. This is a clue as to which \u003ccode\u003eArray\u003c/code\u003e method you will need to use for each function.\u003c/p\u003e  \u003cp\u003eNote also that the first test asks for an array called \u003ccode\u003ecats\u003c/code\u003e, set to an initial value of \u003ccode\u003e[\"Milo\", \"Otis\", \"Garfield\"]\u003c/code\u003e. In your functions, you will be accessing and manipulating this array.\u003c/p\u003e  \u003cp\u003eNear the top of \u003ccode\u003eindexTest.js\u003c/code\u003e you will see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    beforeEach(function () {\u003cbr\u003e      cats.length = 0;\u003cbr\u003e\u003cbr\u003e      cats.push('Milo', 'Otis', 'Garfield');\u003cbr\u003e    }); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat this code does is \u003cem\u003ereset\u003c/em\u003e the array to its original contents before each test is run. The reason we need to do this is because some of your functions will be \u003cem\u003edestructive\u003c/em\u003e — they will change the original \u003ccode\u003ecats\u003c/code\u003e array. This is a problem because it means the input to the remaining functions will be dependent on the outcome of other functions. It also means that the expected return value of a function might change if the tests are run in a different order. This makes it more difficult both to write tests in the first place and to figure out how to get the tests to pass. Resetting the array returns us to a blank slate between tests.\u003c/p\u003e  \u003cp\u003eThis is also a good illustration of why it's generally good practice to avoid mutating a program's state whenever possible. If we use only \u003cem\u003enondestructive\u003c/em\u003e methods, we have complete control over what's going into and coming out of the function. This makes our programs more robust, easier to maintain, and less prone to bugs.\u003c/p\u003e  \u003cp\u003eRemember the workflow:\u003c/p\u003e  \u003col\u003e \u003cli\u003eRun the tests using \u003ccode\u003enpm test\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eRead the errors; vocalize what they're asking you to do.\u003c/li\u003e \u003cli\u003eWrite code; repeat steps 1 and 2 often until a test passes.\u003c/li\u003e \u003cli\u003eRepeat as needed for the remaining tests.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge92237c29981fea074595ee22d7b4d0f","title":"Review: Control Flow Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-basics-control-flow-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-control-flow-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-basics-control-flow-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePractice writing \u003ccode\u003eif...else if...else\u003c/code\u003e statements.\u003c/li\u003e\n\u003cli\u003ePractice working with the ternary operator.\u003c/li\u003e\n\u003cli\u003ePractice writing \u003ccode\u003eswitch\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eYou have been hired as a contractor for Scuber, a burgeoning startup that helps busy parents transport their children to and from all of their activities on scooters.\u003c/p\u003e\n\u003cp\u003eScuber's drivers charge their passengers a variable amount based on how far they need to travel. Modify the \u003ccode\u003eindex.js\u003c/code\u003e file to make sure that Scuber's drivers are properly telling their passengers how much the ride will cost.\u003c/p\u003e\n\u003ch2\u003eRead the Tests\u003c/h2\u003e\n\u003cp\u003eWe know that you do not have much experience with testing, so that is why it is very important for you to read the instructions in this and every lab. That being said, reading the tests can often provide important clues on how to complete a lab. Let's take a look at the first test for this lab together:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('index.js', function () {\u003cbr\u003e  describe('scuberGreetingForFeet()', function () {\u003cbr\u003e    it('gives customers a free sample if the ride is less than or equal to 400 feet', function () {\u003cbr\u003e      expect(scuberGreetingForFeet(199)).to.equal('This one is on me!');\u003cbr\u003e    });\u003cbr\u003e\u003cbr\u003e    // tests continue...\u003cbr\u003e  });\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, so all of the fancy \u003ccode\u003edescribe\u003c/code\u003e words are just there to organize the requirements, and provide a description for what each function should do. By reading the text inside of the \u003ccode\u003edescribe\u003c/code\u003e words, we can see that there is some function that should give customers a free sample, where the first 400 feet are free. Then in the next line we see a function called \u003ccode\u003escuberGreetingForFeet\u003c/code\u003e being executed with \u003ccode\u003e199\u003c/code\u003e passed through as an argument to the function. Executing the \u003ccode\u003escuberGreetingForFeet\u003c/code\u003e function with the argument should return \u003ccode\u003e\"This one is on me!\"\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWe will tackle the details of function writing in depth in an upcoming lab. For now, briefly, a function declaration is written like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction addFive(someNumber) {\u003cbr\u003e  //Everything I want my function to do I put inside these curly braces\u003cbr\u003e  //In this example, let's say I want my function, addFive, to add 5 to\u003cbr\u003e  //any number I pass in (someNumber), but only IF the number is greater\u003cbr\u003e  //than zero:\u003cbr\u003e  let result\u003cbr\u003e  if (someNumber \u0026gt; 0) {\u003cbr\u003e    result = someNumber + 5;\u003cbr\u003e  }\u003cbr\u003e  //at the end, if I want my function to return something, I need to state it:\u003cbr\u003e  return result\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e//once our function is declared, we can call addFive, passing in values \u003cbr\u003e//as arguments:\u003cbr\u003e\u003cbr\u003eaddFive(10);\u003cbr\u003e//=\u0026gt; 15\u003cbr\u003e\u003cbr\u003eaddFive(20);\u003cbr\u003e//=\u0026gt; 25\u003cbr\u003e\u003cbr\u003eaddFive(-5);\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003eaddFive(addFive(5));\u003cbr\u003e//=\u0026gt; 15!! In this case, the return value of addFive(5), 10, is passed in \u003cbr\u003e//as the argument to the outer addFive, returning 15 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, looking back at our test example, \u003ccode\u003escuberGreetingForFeet(199)\u003c/code\u003e is calling the function \u003ccode\u003escuberGreetingForFeet\u003c/code\u003e, and passing in the value \u003ccode\u003e199\u003c/code\u003e as the argument. When we write this function, we need to write the logic inside the curly braces to pass our tests and return the result:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction scuberGreetingForFeet(someValue) {\u003cbr\u003e  //this is where we can use conditionals given our argument, someValue\u003cbr\u003e  //don't forget to return whatever the result is!\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe big clue from reading the example test above is that the tests in the \u003ccode\u003eindexTest.js\u003c/code\u003e file are calling the functions that we write inside the \u003ccode\u003eindex.js\u003c/code\u003e file. These tests pass arguments to our function. When this test passes an argument of \u003ccode\u003e199\u003c/code\u003e to our function, the \u003ccode\u003escuberGreetingForFeet\u003c/code\u003e function should return \u003ccode\u003e\"This one is on me!\"\u003c/code\u003e. That makes sense, considering the text in the \u003ccode\u003edescribe\u003c/code\u003e and \u003ccode\u003eit\u003c/code\u003e functions say that the first 400 feet should be free. That \u003ccode\u003e199\u003c/code\u003e must be indicating the distance in feet of the requested ride.\u003c/p\u003e\n\u003cp\u003eSo reading tests is essentially like reading the instructions. It's something we may have avoided for much of our lives, but when it comes to programming, tests fill in the picture of the goal we are trying to accomplish. They run mini-experiments on our code and help us better understand our code and the problem we are solving.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eThere are three functions that have been declared for you. You will need to fill in the following code:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003escuberGreetingForFeet()\u003c/code\u003e — Use \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse if\u003c/code\u003e statements to return the correct greeting based on the distance the passenger desires to travel.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eternaryCheckCity()\u003c/code\u003e — Use a ternary operator to return the correct response based on the desired destination of the passenger.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eswitchOnCharmFromTip()\u003c/code\u003e — Use a \u003ccode\u003eswitch\u003c/code\u003e statement to return a different response based on the generosity of the passenger's tip.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: Beware a gotcha! In JavaScript, you cannot express the concept of 'between' in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2 \u0026lt; 5 \u0026lt; 4\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt seems like that expression should evaluate to \u003ccode\u003efalse\u003c/code\u003e because \u003ccode\u003e5\u003c/code\u003e is not less than \u003ccode\u003e4\u003c/code\u003e. However, we're forgetting about the order of operations — let's think about how the JavaScript engine evaluates that expression. First, the engine compares \u003ccode\u003e2 \u0026lt; 5\u003c/code\u003e, which evaluates to \u003ccode\u003etrue\u003c/code\u003e. At that point, it's as though the value \u003ccode\u003etrue\u003c/code\u003e has replaced \u003ccode\u003e2 \u0026lt; 5\u003c/code\u003e in the expression, resulting in \u003ccode\u003etrue \u0026lt; 4\u003c/code\u003e. The engine sees that we're trying to compare a non-number (\u003ccode\u003etrue\u003c/code\u003e) against a number (\u003ccode\u003e4\u003c/code\u003e), and under the hood it converts \u003ccode\u003etrue\u003c/code\u003e into a number:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNumber(true);\u003cbr\u003e// =\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat leaves us with \u003ccode\u003e1 \u0026lt; 4\u003c/code\u003e, which the JavaScript engine correctly evaluates to \u003ccode\u003etrue\u003c/code\u003e. Can you figure out how to properly evaluate whether \u003ccode\u003e5\u003c/code\u003e is greater than \u003ccode\u003e2\u003c/code\u003e \u003cstrong\u003eAND\u003c/strong\u003e \u003ccode\u003e5\u003c/code\u003e is less than \u003ccode\u003e4\u003c/code\u003e using logical operators? Ponder that as you work through the assignment.\u003c/p\u003e\n\u003cp\u003eGood luck!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb7290094f81a48c6ce1a172b8962243d","title":"Review: Creating and Inserting DOM Nodes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-modifying-elements-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate DOM elements programmatically\u003c/li\u003e \u003cli\u003eAdd elements to the DOM\u003c/li\u003e \u003cli\u003eUpdate elements using \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eChange properties on DOM nodes\u003c/li\u003e \u003cli\u003eRemove elements from the DOM\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNow that you have an understanding of the DOM and powerful tools for selecting the right elements, it's time to learn how to:\u003c/p\u003e  \u003col\u003e \u003cli\u003ecreate new nodes,\u003c/li\u003e \u003cli\u003edelete nodes, and\u003c/li\u003e \u003cli\u003eupdate nodes' properties\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eCreate DOM Elements Programmatically\u003c/h2\u003e  \u003ch3\u003e\u003ccode\u003edocument.createElement()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eCreating an element in JavaScript is an easy process. You simply call \u003ccode\u003edocument.createElement('tagName')\u003c/code\u003e, where \u003ccode\u003etagName\u003c/code\u003e is the name of any valid HTML tag (\u003ccode\u003e'p'\u003c/code\u003e, \u003ccode\u003e'div'\u003c/code\u003e, \u003ccode\u003e'span'\u003c/code\u003e, etc.).\u003c/p\u003e  \u003cp\u003eOpen the \u003ccode\u003eindex.html\u003c/code\u003e file in your browser and open up the browser's console. In the console, enter:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst element = document.createElement('div'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ethen take a look at the Elements tab. The element doesn't show up on the page. Why not?\u003c/p\u003e  \u003ch2\u003eAdd Elements to the DOM\u003c/h2\u003e  \u003cp\u003eTo get an element to appear in the DOM, we have to \u003ccode\u003eappend\u003c/code\u003e it to an existing DOM node. To go back to our tree metaphor, we have to glue our new leaf onto a branch that's already there. We can start as high up on the tree as \u003ccode\u003edocument.body\u003c/code\u003e, or we can find a more specific element using any of the methods we've learned for traversing the DOM.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eappendChild()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eLet's append \u003ccode\u003eelement\u003c/code\u003e to \u003ccode\u003ebody\u003c/code\u003e to start:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.body.appendChild(element); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you look at the Elements tab, you'll see our new (empty) \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e nested inside the \u003ccode\u003ebody\u003c/code\u003e element. Let's give it some content:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ul = document.createElement('ul');\u003cbr\u003e\u003cbr\u003efor (let i = 0; i \u0026lt; 3; i++) {\u003cbr\u003e  const li = document.createElement('li');\u003cbr\u003e  li.innerHTML = (i + 1).toString();\u003cbr\u003e  ul.appendChild(li);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eelement.appendChild(ul); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, each time we create a new element, we create a variable and save a reference to it. That makes it quite easy to make additional updates and to add it to the DOM using \u003ccode\u003eappendChild\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eRefresh the browser; you should now see the unordered list rendered on the page, and see the new elements in the \"Elements\" tab.\u003c/p\u003e  \u003ch2\u003eAdd Elements to the DOM via \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eCreating elements and then appending them into the DOM is a multi-step process. It's also the \u003cstrong\u003e\u003cem\u003esafest and most reliable way\u003c/em\u003e\u003c/strong\u003e to add content to the DOM. Most repeated code can be removed by using variables, functions and loops. It's The Right Way.\u003c/p\u003e  \u003cp\u003eThat said, however, there's another process that will also work, using \u003ccode\u003eElement.innerHTML\u003c/code\u003e. Inside our loop above, we create an \u003ccode\u003eli\u003c/code\u003e element and set its \u003ccode\u003einnerHTML\u003c/code\u003e property to a simple number (expressed as a string) that represents the current iteration through the loop. Once we append the \u003ccode\u003eli\u003c/code\u003e to the \u003ccode\u003eul\u003c/code\u003e and the \u003ccode\u003eul\u003c/code\u003e to the document \u003ccode\u003ebody\u003c/code\u003e, we see our unordered list in the browser window. This is a perfectly valid way to use \u003ccode\u003einnerHTML\u003c/code\u003e to add content to the DOM. Imagine, however, that we want to add content that's more complicated.\u003c/p\u003e  \u003cp\u003eAssume our HTML includes a \u003ccode\u003ediv\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"header.\" We can grab that element and set its \u003ccode\u003einnerHTML\u003c/code\u003e attribute to any HTML we like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst header = document.getElementById('header');\u003cbr\u003eheader.innerHTML = \"\u0026lt;h1\u0026gt;Poodles!\u0026lt;/h1\u0026gt;\u0026lt;h3\u0026gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective\u0026lt;/h3\u0026gt;\u0026lt;p\u0026gt;\u0026lt;em\u0026gt;By: Byron Q. Poodle, Esq., BA.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we are using one big, long string, complete with multiple HTML tags, to create the following HTML in the DOM:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"header\"\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;Poodles!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;h3\u0026gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;By: Byron Q. Poodle, Esq., BA.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis process works but it is \u003cstrong\u003enot\u003c/strong\u003e recommended for several reasons. First, it's more error-prone, and the errors can be difficult to find. Second, it can negatively impact site performance. Finally, if you're inserting user-derived data (e.g., comments) into the DOM using \u003ccode\u003einnerHTML\u003c/code\u003e, you can expose your site to the risk of users \u003ca href=\"https://www.reddit.com/r/learnjavascript/comments/9502x5/is_innerhtml_still_considered_bad/e3p31go/?utm_source=share\u0026amp;utm_medium=web2x\u0026amp;context=3\"\u003einjecting malicious code\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eProgrammatically creating and appending elements is safer and more efficient, and it results in code that's easier to read, easier to debug, and easier to maintain.\u003c/p\u003e  \u003ch2\u003eChange Properties on DOM Nodes\u003c/h2\u003e  \u003cp\u003eWe can change the appearance of a DOM node using its \u003ccode\u003estyle\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.style.backgroundColor = '#27647B'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou've changed what's on the screen!\u003c/p\u003e  \u003cp\u003eFeel free to set as many properties as you'd like — this is a good chance to look around and explore different properties of DOM elements.\u003c/p\u003e  \u003cp\u003eLet's adjust the display:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.style.fontSize = '24px';\u003cbr\u003eelement.style.marginLeft = '30px';\u003cbr\u003eelement.style.lineHeight = 2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePerhaps the most common way to change how things appear in the DOM is by changing an element's \u003ccode\u003eclass\u003c/code\u003e attribute. As you know from CSS, we often change the way a bit of rendered HTML appears by adding or removing a class.\u003c/p\u003e  \u003cp\u003eFor example, we could create an \u003ccode\u003ealert\u003c/code\u003e class that turns the text red (using the CSS \u003ccode\u003ecolor\u003c/code\u003e attribute) and makes it big (using the CSS \u003ccode\u003efont-size\u003c/code\u003e attribute). We can then use JavaScript to first grab the element and then add the class by updating the element's \u003ccode\u003eclassName\u003c/code\u003e property. This has the same effect as setting the \u003ccode\u003eclass\u003c/code\u003e property in the HTML. The \u003ccode\u003eclassName\u003c/code\u003e property expects a \u003ccode\u003eString\u003c/code\u003e with one or more class names, separated by spaces:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.className = \"dog\";\u003cbr\u003eelement.className = \"pet-listing dog\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnother way to accomplish the same thing is by using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003e\u003ccode\u003eElement.classList\u003c/code\u003e property\u003c/a\u003e. This property has \u003ccode\u003e.add()\u003c/code\u003e and \u003ccode\u003e.remove()\u003c/code\u003e methods that can be used as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.classList.remove(\"unneeded-class\");\u003cbr\u003eelement.classList.add(\"pet-listing\", \"dog\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis approach allows you to easily add and remove classes programmatically, without having to create a long string of class names.\u003c/p\u003e  \u003ch3\u003eSeparation of Concerns\u003c/h3\u003e  \u003cp\u003eAn important thing to bear in mind is that we only want to use JavaScript to change the appearance of an element when we need to make a change dynamically, i.e., in response to user actions. This goes back to a fundamental programming concept about separating concerns between technologies:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHTML defines the structure of the website (not appearance or functionality)\u003c/li\u003e \u003cli\u003eJavaScript defines functionality of the website (not structure or styling)\u003c/li\u003e \u003cli\u003eCSS defines the visualization and style of the website (not structure or functionality)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDefining the base CSS should still happen in the CSS files that are loaded into the DOM when the page is opened.\u003c/p\u003e  \u003ch2\u003eRemove Elements from the DOM\u003c/h2\u003e  \u003cp\u003eWe know how to add elements and change their attributes. What if we want to remove an element from a page?\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eremoveChild()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe use \u003ccode\u003eremoveChild()\u003c/code\u003e, as you might guess, to remove a particular child of an element:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esomeElement.removeChild(someChildElement); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take a look at a more complex example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ul = document.getElementsbyTagName('ul')[0];\u003cbr\u003eul.removeChild(ul.querySelector('li:nth-child(2)')); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere you can see the power of \u003ccode\u003equerySelector()\u003c/code\u003e: we can use it to find the second \u003ccode\u003eli\u003c/code\u003e element of \u003ccode\u003eul\u003c/code\u003e. We then pass that element as the argument to our \u003ccode\u003eremoveChild\u003c/code\u003e method, which removes the element from our \u003ccode\u003eul\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhat if we want to remove the whole unordered list (\u003ccode\u003eul\u003c/code\u003e)?\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eelement.remove()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe can just call \u003ccode\u003eremove()\u003c/code\u003e on the element itself:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eul.remove(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd it's gone!\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eFrom this point forward, many of the labs will work a little differently from ones you've done before. Specifically, the tests will mock the process of 1) running JavaScript code in the browser and 2) seeing the results of that code represented in the DOM. Take a look at \u003ccode\u003etest/indexTest.js\u003c/code\u003e to see the tests' descriptions of the changes your code should be making to the DOM elements.\u003c/p\u003e  \u003cp\u003eNote that you do not need to create functions for this lab. Just create the line or lines of JavaScript necessary to pass each test. As usual, you will write your code in the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\"\u003edocument.createElement()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild\"\u003eappendChild()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild\"\u003eremoveChild()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\"\u003eelement.remove()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003eclassList Property\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga46189681936f767318b3f6e74072d68","title":"Review: DOM Editing","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-editing-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify that DOM nodes are written as HTML\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've started looking at the DOM and how it's created. Now it's time to see its structure.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eIdentify That DOM Nodes Are Written As HTML\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we learned that, when we load a web page in a browser, the content we see in the DOM is a representation of the underlying HTML, CSS and JavaScript. If we were to view the DOM in Chrome Dev Tools (we'll learn how to do that shortly), we would see HTML that is a clone of the HTML found in the source HTML file. As we learned earlier in the course, that HTML consists of \u003cem\u003eelements\u003c/em\u003e that in turn consist of HTML \u003cem\u003etags\u003c/em\u003e and their content.\u003c/p\u003e  \u003cp\u003eWhen we're working in the DOM, the structure is the same. We can access objects in the DOM (called \u003cem\u003enodes\u003c/em\u003e) that consist of tags, just like the HTML elements that make up the base HTML. Nodes and elements are not the same thing — all elements in the DOM are nodes but not all nodes are HTML elements. However, when we're working in the DOM, the nodes we access and modify are virtually always HTML elements.\u003c/p\u003e  \u003ch3\u003eThe Structure of DOM Content\u003c/h3\u003e  \u003cp\u003eWe'll start by going over how content in the DOM is structured using nodes. The information below should be familiar from what you've learned about HTML elements.\u003c/p\u003e  \u003cp\u003eDOM nodes most often have a starting tag and an ending tag. Examples include a paragraph:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;I am a paragraph.\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor a \u003ccode\u003emain\u003c/code\u003e section:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;main\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBecause they have both starting and ending tags, we can nest other nodes inside them. The inner node is called a child node, and the outer node is called a parent node. To nest items, we simply add the child node and its content between its parent's starting and ending tags:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;main\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;I am a nested paragraph, inside the main element, inside the body!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSome nodes only have a starting tag. Those are called \u003cem\u003eself-closing elements\u003c/em\u003e or \u003cem\u003evoid elements\u003c/em\u003e. Void elements do not have any content nested inside of them and cannot be parent nodes.\u003c/p\u003e  \u003cp\u003eAn example of a self-closing tag is an image:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\" alt=\"A policeman\" /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn self-closing tags, the trailing \u003ccode\u003e/\u003c/code\u003e is optional. This is valid too:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\" alt=\"A policeman\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEnough review, let's write some HTML!\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eStart by running the tests and taking a look through the errors. You'll see that the tests are looking for certain content to be present in the HTML file.\u003c/p\u003e  \u003cp\u003eNext, open the \u003ccode\u003eindex.html\u003c/code\u003e file in the browser using the instructions in the previous lesson for your development environment.\u003c/p\u003e  \u003cp\u003eJust to speed things up a bit, paste the following code into \u003ccode\u003eindex.html\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;meta charset=\"UTF-8\"\u0026gt;\u003cbr\u003e    \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u0026gt;\u003cbr\u003e    \u0026lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Introduction to the DOM Lab\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;!--All our work for this lesson will go here--\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRefresh the browser page to see the changes.\u003c/p\u003e  \u003cp\u003eOpen the Google Developer Tools by clicking on the \"View\" menu and selecting Developer -\u0026gt; Developer Tools. The Elements tab should be selected but, if it isn't, click on it. Here we have the DOM representation of the HTML source loaded by the browser. You should see the \u003ccode\u003ehead\u003c/code\u003e and \u003ccode\u003ebody\u003c/code\u003e elements nested inside the \u003ccode\u003ehtml\u003c/code\u003e element. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the disclosure triangle to expand it. You should see that the \u003ccode\u003ebody\u003c/code\u003e element is, temporarily, child-less. Let's go ahead and start adding some content in \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: the \u003cem\u003edisclosure triangle\u003c/em\u003e is the triangle to the left of the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e tag. When you first open the Elements tab, the nodes are generally collapsed, hiding their contents. You can click the triangle to expand the node and see its contents. Disclosure triangles are standard for hiding information throughout Chrome DevTools. If you want to see more, feel free to click on the triangle! You're not going to break anything.\u003c/p\u003e  \u003cp\u003eFirst, let's add a title to our page:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;My HTML adventure\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRefresh the page to see the changes displayed in the browser. If you view the Elements tab again, you should see that a new child node is nested inside the \u003ccode\u003ebody\u003c/code\u003e. Finally, run the tests again; the first test should now be passing.\u003c/p\u003e  \u003cp\u003eNext, we'll add a paragraph below the title. We'll also add some highlighted bits of text to the paragraph to make it stand out a little.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003cbr\u003e  We're writing HTML markup to display in our \u0026lt;strong\u0026gt;browser\u0026lt;/strong\u0026gt;.\u003cbr\u003e  We're basically telling computers what to do. \u0026lt;em\u0026gt;Neat!\u0026lt;/em\u0026gt;\u003cbr\u003e\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSave the file and check out the page in the 'Elements' tab.  What's happening above is that we added some inline elements, \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e to our paragraph to style things a little. The \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e tag makes any text within look \u003cstrong\u003eimportant\u003c/strong\u003e. It's usually bold in browsers by default. The \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e tag allows us to \u003cem\u003eemphasize\u003c/em\u003e certain text. This text is typically rendered as italic in browsers.\u003c/p\u003e  \u003cp\u003eRun the tests again; you should now have all but two of the tests passing.\u003c/p\u003e  \u003cp\u003eLet's add a link to MDN to define HTML. We'll use the\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag for this. Add this to our existing \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eWe're writing \u0026lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\"\u0026gt;HTML\u0026lt;/a\u0026gt; markup to display in our \u0026lt;strong\u0026gt;browser\u0026lt;/strong\u0026gt;. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that HTML attributes (in this case, the \u003ccode\u003ehref\u003c/code\u003e attribute) are shown alongside their opening tag.\u003c/p\u003e  \u003cp\u003eLastly, we'll add a table below the paragraph to recap some of the stuff in this lesson:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;thead\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;th\u0026gt;Element name\u0026lt;/th\u0026gt;\u003cbr\u003e      \u0026lt;th\u0026gt;Display value\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;/thead\u0026gt;\u003cbr\u003e  \u0026lt;tbody\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;h1\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;block\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;p\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;block\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;strong\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;inline\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;em\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;inline\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;/tbody\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWoah. That's a \u003cstrong\u003elot\u003c/strong\u003e of markup! If you take a look at the result, though, you'll see that it's a fairly complex visual — it's a table! Our table consists of a header and a body. The header allows us to give the columns a name, and the table body contains the rows of content. Both \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e tags contains rows, which are represented as \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e (table row). These rows then contain cells which form the table's columns. In the \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e row, cells are represented as \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e, while cells in \u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e have their content in \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e  \u003cp\u003eThat's a \u003cem\u003elot\u003c/em\u003e of nesting.\u003c/p\u003e  \u003cp\u003eLook again at the Elements tab. Expand out all the children of the \u003ccode\u003etable\u003c/code\u003e. This is the DOM tree!\u003c/p\u003e  \u003cp\u003eWhen you're done, go ahead and run the tests. They should now all be passing.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5fe8115f59287fd59b263fe685685a06","title":"Review: Iterating Through Arrays","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-looping-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eBuild a \u003ccode\u003efor\u003c/code\u003e loop.\u003c/li\u003e \u003cli\u003eBuild a \u003ccode\u003ewhile\u003c/code\u003e loop.\u003c/li\u003e \u003cli\u003eExplain the purpose of a loop.\u003c/li\u003e \u003cli\u003eUnderstand when to use each type of loop.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn an earlier lesson, we learned about \u003cem\u003erepetition statements\u003c/em\u003e — statements that allow us to break out of the default sequence and repeat a section of code multiple times. We also learned about two of JavaScript's repetition constructs: the \u003cem\u003ewhile\u003c/em\u003e loop and the \u003cem\u003edo...while\u003c/em\u003e loop. In this lesson we will learn about a third: the \u003cem\u003efor\u003c/em\u003e loop.\u003c/p\u003e  \u003cp\u003eLet's say we have a bunch of gifts to wrap. They all happen to be the same size and shape, so for every gift, we need to cut a similarly sized piece of wrapping paper, fold it up over the edges of the gift, tape it together, and add a nice little card. Then we set the wrapped gift aside and move on to the next gift.\u003c/p\u003e  \u003cp\u003eIn programming terms, we can think of our \u003cstrong\u003ecollection\u003c/strong\u003e of gifts as an \u003cstrong\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e and the act of wrapping them as a function. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGift(gift) {\u003cbr\u003e  console.log(`Wrapped ${gift} and added a bow!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe could then call \u003ccode\u003ewrapGift()\u003c/code\u003e on each gift individually:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewrapGift(gifts[0]);\u003cbr\u003ewrapGift(gifts[1]);\u003cbr\u003ewrapGift(gifts[2]); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, this isn't very efficient or extensible. It's a lot of repetitive code to write out, and if we had more gifts we'd have to write a whole new line for each.\u003c/p\u003e  \u003cp\u003eThis is where loops come in handy! With a loop, we can just write the repeated action \u003cstrong\u003eonce\u003c/strong\u003e and perform the action on \u003cstrong\u003eevery item in the collection\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eThis is a code-along, so follow along with the instructions in each section. There are tests to make sure you're coding your solutions correctly. If you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eThe \u003ccode\u003efor\u003c/code\u003e loop\u003c/h2\u003e  \u003cp\u003eOf the loops in JavaScript, the \u003ccode\u003efor\u003c/code\u003e loop is the most common. The \u003ccode\u003efor\u003c/code\u003e loop is made up of four statements in the following structure:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor ([initialization]; [condition]; [iteration]) {\u003cbr\u003e  [loop body]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cul\u003e \u003cli\u003eInitialization  \u003cul\u003e \u003cli\u003eTypically used to initialize a \u003cstrong\u003ecounter\u003c/strong\u003e variable.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eCondition  \u003cul\u003e \u003cli\u003eAn expression evaluated before each pass through the loop. If this expression evaluates to \u003ccode\u003etrue\u003c/code\u003e, the statements in the loop body are executed. If the expression evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop exits.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eIteration  \u003cul\u003e \u003cli\u003eAn expression executed at the end of each iteration. Typically, this will involve incrementing or decrementing a counter, bringing the loop ever closer to completion.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eLoop body  \u003cul\u003e \u003cli\u003eCode that runs on each pass through the loop.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eUsage\u003c/em\u003e\u003c/strong\u003e: Use a \u003ccode\u003efor\u003c/code\u003e loop when you know how many times you want the loop to run (for example, when you're looping through elements in an array).\u003c/p\u003e  \u003ch4\u003eExamples\u003c/h4\u003e  \u003cp\u003eLet's take a look at an example and get some practice using the Node debugger. Enter the code below into the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can, of course, copy/paste the code rather than typing it in yourself, but we recommend typing it in for now. The act of typing code develops muscle memory and helps your brain understand and internalize the syntax.\u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003efor (let age = 30; age \u0026lt; 40; age++) {\u003cbr\u003e  console.log(`I'm ${age} years old. Happy birthday to me!`);\u003cbr\u003e  debugger;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the above code, \u003ccode\u003elet age = 30\u003c/code\u003e is the \u003cstrong\u003einitialization\u003c/strong\u003e: we're creating a variable, \u003ccode\u003eage\u003c/code\u003e, that we'll use in the next three phases of the loop. Notice that we use \u003ccode\u003elet\u003c/code\u003e instead of \u003ccode\u003econst\u003c/code\u003e because we need to increment the value of \u003ccode\u003eage\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003econdition\u003c/strong\u003e for the above loop is \u003ccode\u003eage \u0026lt; 40\u003c/code\u003e, or, in other words, \"Run the code in the loop body until \u003ccode\u003eage\u003c/code\u003e is NOT less than \u003ccode\u003e40\u003c/code\u003e.\" As long as the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e, the code in the loop body is executed, the value of \u003ccode\u003eage\u003c/code\u003e is incremented, and the condition is reevaluated. As soon as the condition evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop ends.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003eiteration\u003c/strong\u003e is \u003ccode\u003eage++\u003c/code\u003e, which increments the value of \u003ccode\u003eage\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e after every pass through the loop. We initialized \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e30\u003c/code\u003e, and it retains that value during the first pass through the loop. At the end of the first pass, we increment \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e31\u003c/code\u003e, check whether the condition still holds \u003ccode\u003etrue\u003c/code\u003e, and, since it does, run the loop body again with \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e31\u003c/code\u003e. After that second loop, we increment \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e32\u003c/code\u003e, and so on.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003eloop body\u003c/strong\u003e is the set of statements that we want to run when the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at what's happening in our loop using debugger. Run \u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to start the debugger. You should see the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_1.png\" alt=\"Debugger Output 1\"\u003e\u003c/p\u003e  \u003cp\u003eNow run \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start executing the loop and advance to the breakpoint. It should look like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_2.png\" alt=\"Debugger Output 2\"\u003e\u003c/p\u003e  \u003cp\u003eNote, in the first line, that the message has been logged and that \u003ccode\u003eage\u003c/code\u003e is equal to 30. To verify that, enter \u003ccode\u003erepl\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to open the REPL, then enter \u003ccode\u003eage\u003c/code\u003e. You should see \u003ccode\u003e30\u003c/code\u003e output. Now type \u003ccode\u003eCtrl-C\u003c/code\u003e to exit the repl, and enter \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the next iteration of the loop. You should see the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_3.png\" alt=\"Debugger Output 3\"\u003e\u003c/p\u003e  \u003cp\u003eNote that the logged output now shows that age is 31. You can continue to step through the iterations by running \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt. At any point you can verify the value of \u003ccode\u003eage\u003c/code\u003e by entering the REPL and typing \u003ccode\u003eage\u003c/code\u003e at the prompt, then exit the REPL to continue stepping through. When you're done, enter \u003ccode\u003e.exit\u003c/code\u003e or \u003ccode\u003eCtrl-C\u003c/code\u003e twice to exit the debugger.\u003c/p\u003e  \u003cp\u003eNow let's remove \u003ccode\u003edebugger;\u003c/code\u003e from our code and execute it by running \u003ccode\u003enode index.js\u003c/code\u003e. You should see the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/happy-birthday-to-me.png\" alt=\"Happy Birthday logged\"\u003e\u003c/p\u003e  \u003ch3\u003eUsing \u003ccode\u003efor\u003c/code\u003e with Arrays\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003efor\u003c/code\u003e loop is often used to iterate over every element in an array. Let's rewrite our gift-wrapping action above as a \u003ccode\u003efor\u003c/code\u003e loop. Enter the following code into \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGifts(gifts) {\u003cbr\u003e  for (let i = 0; i \u0026lt; gifts.length; i++) {\u003cbr\u003e    console.log(`Wrapped ${gifts[i]} and added a bow!`);\u003cbr\u003e    debugger;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return gifts;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ewrapGifts(gifts); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe started our counter, \u003ccode\u003ei\u003c/code\u003e, at \u003ccode\u003e0\u003c/code\u003e because arrays have zero-based indexes. Our condition states that we should run the code in the loop body while \u003ccode\u003ei\u003c/code\u003e is less than \u003ccode\u003egifts.length\u003c/code\u003e (\u003ccode\u003e3\u003c/code\u003e in the above example). Our iteration, \u003ccode\u003ei++\u003c/code\u003e, increments our counter by \u003ccode\u003e1\u003c/code\u003e at the end of each pass through the loop.\u003c/p\u003e  \u003cp\u003eRun \u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to enter the debugger, and \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the breakpoint. You should see \u003ccode\u003eWrapped teddy bear and added a bow!\u003c/code\u003e logged. In our loop body, we reference \u003ccode\u003egifts[i]\u003c/code\u003e. Since \u003ccode\u003ei\u003c/code\u003e starts out as \u003ccode\u003e0\u003c/code\u003e, during the first pass through the loop \u003ccode\u003egifts[i]\u003c/code\u003e is \u003ccode\u003egifts[0]\u003c/code\u003e, which is \u003ccode\u003e'teddy bear'\u003c/code\u003e. Continue stepping through the loop by entering \u003ccode\u003econt\u003c/code\u003e at the\u003ccode\u003edebug\u003c/code\u003e prompt and remember you can enter the REPL at any point to check the values of our variables, \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003egifts[i]\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhen you're done, remove the \u003ccode\u003edebugger\u003c/code\u003e and execute the code by running \u003ccode\u003enode index.js\u003c/code\u003e. You should see the following logged to the terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eWrapped teddy bear and added a bow!\u003cbr\u003eWrapped drone and added a bow!\u003cbr\u003eWrapped doll and added a bow! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eAssignment\u003c/h3\u003e  \u003cp\u003eIn the previous section, the \u003ccode\u003ewrapGift()\u003c/code\u003e function allowed us to take any array of gifts and loop over them, logging our own message. Let's practice that with a slightly different idea. To complement our gift wrapping function, your task is to create a thank you card creator.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003eindex.js\u003c/code\u003e, build a function named \u003ccode\u003ewriteCards()\u003c/code\u003e that accepts two arguments: an array of string names, and an event name. Create a \u003ccode\u003efor\u003c/code\u003e loop with a counter that starts at \u003ccode\u003e0\u003c/code\u003e and increments at the end of each loop. The condition should halt the \u003ccode\u003efor\u003c/code\u003e loop after the last name in the array is printed out in the loop body.\u003c/p\u003e  \u003cp\u003eInside the loop, create a custom message for each name from the provided array, thanking that person for their gift. Collect the messages in an array and return this array. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewriteCards([\"Ada\", \"Brendan\", \"Ali\"], \"birthday\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWould produce the following array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  \"Thank you, Ada, for the wonderful birthday gift!\",\u003cbr\u003e  \"Thank you, Brendan, for the wonderful birthday gift!\",\u003cbr\u003e  \"Thank you, Ali, for the wonderful birthday gift!\"\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: The debugger isn't just for debugging code — you can also use it to help you write your function! Try building the structure of the loop, putting the \u003ccode\u003edebugger\u003c/code\u003e inside the loop body. Even before you start writing the code, you can enter the debugger's REPL and try out code until you figure out how to create the message and add it to an array. Once it's working in the REPL, transfer the code to \u003ccode\u003eindex.js\u003c/code\u003e, exit the debugger, and run the tests.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eThe \u003ccode\u003ewhile\u003c/code\u003e loop\u003c/h2\u003e  \u003cp\u003eRecall from the earlier lesson that the \u003ccode\u003ewhile\u003c/code\u003e loop is similar to a \u003ccode\u003efor\u003c/code\u003e loop, repeating an action in a loop based on a condition. Both will continue to loop until that condition evaluates to \u003ccode\u003efalse\u003c/code\u003e. Unlike \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e only requires condition and loop statements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile ([condition]) {\u003cbr\u003e  [loop body]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe initialization and iteration statements of the \u003ccode\u003efor\u003c/code\u003e loop have not disappeared, though. In fact, we could rewrite our original \u003ccode\u003efor\u003c/code\u003e loop gift wrapping example using a \u003ccode\u003ewhile\u003c/code\u003e loop and achieve the exact same result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGifts(gifts) {\u003cbr\u003e  let i = 0; // the initialization moves OUTSIDE the body of the loop!\u003cbr\u003e  while (i \u0026lt; gifts.length) {\u003cbr\u003e    console.log(`Wrapped ${gifts[i]} and added a bow!`);\u003cbr\u003e    i++; // the iteration moves INSIDE the body of the loop!\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return gifts;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ewrapGifts(gifts);\u003cbr\u003e// LOG: Wrapped teddy bear and added a bow!\u003cbr\u003e// LOG: Wrapped drone and added a bow!\u003cbr\u003e// LOG: Wrapped doll and added a bow!\u003cbr\u003e// =\u0026gt; [\"teddy bear\", \"drone\", \"doll\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we've just moved the initialization and iteration statements — declaring the \u003ccode\u003ei\u003c/code\u003e variable \u003cem\u003eoutside\u003c/em\u003e the loop, and incrementing it \u003cem\u003einside\u003c/em\u003e the loop.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eCAUTION\u003c/strong\u003e: When using \u003ccode\u003ewhile\u003c/code\u003e loops, it is easy to forget to involve iteration. Leaving iteration out can result in a condition that \u003cem\u003ealways\u003c/em\u003e evaluates to \u003ccode\u003etrue\u003c/code\u003e, causing an infinite loop!\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eUsing a \u003ccode\u003ewhile\u003c/code\u003e loop enables us to check conditions that aren't based on a counter. Take a look at the following \u003cem\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Pseudocode\"\u003epseudocode\u003c/a\u003e\u003c/em\u003e for an example of how we could use \u003ccode\u003ewhile\u003c/code\u003e in a program for planting a garden:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction plantGarden() {\u003cbr\u003e  let keepWorking = true;\u003cbr\u003e  while (keepWorking) {\u003cbr\u003e    chooseSeedLocation();\u003cbr\u003e    plantSeed();\u003cbr\u003e    waterSeed();\u003cbr\u003e    keepWorking = checkForMoreSeeds();\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can imagine that \u003cem\u003ewhile\u003c/em\u003e we have seeds, we take the same steps over and over: choose a location for a seed; plant it; water it. Then, check if there are more seeds. If \u003cem\u003enot\u003c/em\u003e, do not keep working.\u003c/p\u003e  \u003ch2\u003eWhen to Use \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eJavaScript, like many programming languages, provides a variety of looping options. Loops like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e are actually just slight variations of the same process. By providing a variety, we as programmers have a larger vocabulary to work with.\u003c/p\u003e  \u003cp\u003eOften, you will see \u003ccode\u003ewhile\u003c/code\u003e loops simply being used as an alternative to \u003ccode\u003efor\u003c/code\u003e loops:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet countup = 0;\u003cbr\u003ewhile (countup \u0026lt; 10) {\u003cbr\u003e  console.log(countup++);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is perfectly fine as an alternative way to describe:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (let countup = 0; countup \u0026lt; 10; countup++) {\u003cbr\u003e  console.log(countup);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you're feeling a bit lost about when to use a \u003ccode\u003efor\u003c/code\u003e vs. a \u003ccode\u003ewhile\u003c/code\u003e loop, take a deep breath. Most of the time, a regular \u003ccode\u003efor\u003c/code\u003e loop will suffice. It's by far the most common looping construct in JavaScript. A general heuristic for choosing which loop to use is to first try a \u003ccode\u003efor\u003c/code\u003e loop. If that doesn't serve your purposes, then go ahead and try a \u003ccode\u003ewhile\u003c/code\u003e loop. Also, remember that you can always refer to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003edocumentation on these loops\u003c/a\u003e at any time.\u003c/p\u003e  \u003cp\u003eJust don't forget: with \u003ccode\u003ewhile\u003c/code\u003e, make sure you are updating the condition on each loop so that the loop eventually terminates!\u003c/p\u003e  \u003ch2\u003eAssignment\u003c/h2\u003e  \u003cp\u003eTo get more acquainted with \u003ccode\u003ewhile\u003c/code\u003e, your task is to write a function, \u003ccode\u003ecountDown\u003c/code\u003e, that takes in any positive integer and, starting from that number, counts down to zero using \u003ccode\u003econsole.log()\u003c/code\u003e. Note that this means that running \u003ccode\u003ecountdown(10);\u003c/code\u003e would actually log \u003cem\u003e11\u003c/em\u003e times:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e10\u003cbr\u003e9\u003cbr\u003e8\u003cbr\u003e7\u003cbr\u003e6\u003cbr\u003e5\u003cbr\u003e4\u003cbr\u003e3\u003cbr\u003e2\u003cbr\u003e1\u003cbr\u003e0 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAfter some time programming in JavaScript, writing a \u003ccode\u003efor\u003c/code\u003e loop will come as naturally to you as wrapping one gift after another. Just as you slowly become comfortable using different words and vocabulary to better express yourself, you will become more acquainted with concepts like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e until you are able to discern the nuanced differences in usage between them.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCodecademy  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#for-loops\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#while-loops\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003eLoops and iteration\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g69bdcc57c8551adb8506b9d0eeab270c","title":"Review: JavaScript Event Listeners Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-event-listening-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate event listeners on DOM nodes using \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lab we will learn how to teach nodes to \"listen\" for an event using \u003ccode\u003eaddEventListener()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eCreate Event Listeners on DOM Nodes with \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn order for JavaScript to handle an event, we first need to tell it to listen for that event. We do this by calling the \u003ccode\u003eaddEventListener()\u003c/code\u003e method on the element we want to add the listener to, and passing it two arguments:\u003c/p\u003e  \u003col\u003e \u003cli\u003ethe name of the event to listen for, and\u003c/li\u003e \u003cli\u003ea \u003cem\u003ecallback function\u003c/em\u003e to \"handle\" the event\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eOpen up \u003ccode\u003eindex.html\u003c/code\u003e in the browser. When you click in the \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e area, nothing happens. Let's set up some \u003cem\u003eevent handling\u003c/em\u003e. Specifically, let's add an event listener for the \u003ccode\u003eclick\u003c/code\u003e event on the \u003ccode\u003einput#input\u003c/code\u003e element in \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTry out the following in the Chrome DevTools console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst input = document.getElementById('input');\u003cbr\u003einput.addEventListener('click', function() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when you click inside of \u003ccode\u003einput#input\u003c/code\u003e, you will get an alert box.\u003c/p\u003e  \u003cp\u003eLet's review what's happening in this code.\u003c/p\u003e  \u003cp\u003eFirst, we grab the element that we want to add the event listener to and save a reference to it in the \u003ccode\u003einput\u003c/code\u003e variable.\u003c/p\u003e  \u003cp\u003eNext, we call \u003ccode\u003eaddEventListener()\u003c/code\u003e on that element to tell JavaScript to listen for the event. We pass two arguments to \u003ccode\u003eaddEventListener()\u003c/code\u003e: the name of the event to listen for (in this case, \u003ccode\u003eclick\u003c/code\u003e) and a \u003cem\u003ecallback function\u003c/em\u003e that will be executed when the event is \"heard.\"\u003c/p\u003e  \u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\"\u003eAccording to MDN\u003c/a\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eA callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThat's exactly what's happening here: we're passing a callback function as the second argument to the \u003ccode\u003eaddEventListener()\u003c/code\u003e function; the callback will be invoked as soon as the event occurs.\u003c/p\u003e  \u003cp\u003eLet's pull out that second argument and take a look at it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis function has all the components of functions we've seen before (the \u003ccode\u003efunction\u003c/code\u003e keyword, a pair of parentheses, and the body of the function enclosed in curly braces) \u003cem\u003eexcept one\u003c/em\u003e: it doesn't have a name assigned to it. This is what's called an \u003cem\u003eanonymous\u003c/em\u003e function. Because it doesn't have a name, it can't be invoked directly. But the event listener knows to execute whatever function is passed as the second argument when it detects the event, so it doesn't need to be named.\u003c/p\u003e  \u003cp\u003eIf we are only calling our callback function in that one place, using an anonymous function makes sense. However, what if we wanted to use that same alert message on the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e containing the number \u003ccode\u003e5\u003c/code\u003e? In that case, it would make more sense to create a separate, named function that could be called by both event listeners. With this approach, we would pass the \u003cem\u003efunction name\u003c/em\u003e as the second argument to \u003ccode\u003eaddEventListener()\u003c/code\u003e rather than the function itself:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst input = document.getElementById('input');\u003cbr\u003e\u003cbr\u003efunction clickAlert() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003einput.addEventListener('click', clickAlert); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo hook up our other div, we would use our CSS selector skills to grab the element and save it to a variable, then add an event listener to that element. Give it a try!\u003c/p\u003e  \u003cp\u003eWith this approach, if we decide later that we want to change the text of the alert to \"Hee hee, that tickles!\" instead, we would only need to make that change in one place.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: we pass \u003ccode\u003eclickAlert\u003c/code\u003e as the argument, not \u003ccode\u003eclickAlert()\u003c/code\u003e. This is because we don't want to \u003cem\u003einvoke\u003c/em\u003e the function in this line of code. Instead, we want to pass a \u003cem\u003ereference\u003c/em\u003e to the function to \u003ccode\u003eaddEventListener()\u003c/code\u003e so \u003cem\u003eit\u003c/em\u003e can call the function when the time comes.\u003c/p\u003e  \u003cp\u003eRefresh your browser and try out the latest version of the code in the console to verify that it works. Also try passing \u003ccode\u003eclickAlert()\u003c/code\u003e as the second argument rather than \u003ccode\u003eclickAlert\u003c/code\u003e and see what happens.\u003c/p\u003e  \u003ch2\u003ePassing the Tests\u003c/h2\u003e  \u003cp\u003eNow let's set up \u003ccode\u003eindex.js\u003c/code\u003e to do the same thing so we can get our test passing. To do that, simply copy the code into the \u003ccode\u003eindex.js\u003c/code\u003e file's \u003ccode\u003eaddingEventListener()\u003c/code\u003e function and run the test. Either version should pass the test — try them both and find out!\u003c/p\u003e  \u003ch4\u003eChecking the Code in the Browser\u003c/h4\u003e  \u003cp\u003eWe know that the code works in the console and passes the test, but we should also check our changes to \u003ccode\u003eindex.js\u003c/code\u003e in the browser. Because you've added the \u003ccode\u003eaddEventListener()\u003c/code\u003e function \u003cem\u003einside\u003c/em\u003e the \u003ccode\u003eaddingEventListener()\u003c/code\u003e function, recall that you will need to call the outer function in \u003ccode\u003eindex.js\u003c/code\u003e to execute \u003ccode\u003eaddEventListener()\u003c/code\u003e and activate the event listener. Be sure to refresh the page to load the new code in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gaa5758efd3ee3087c6e1e42145c6dce3","title":"Review: Objects Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ePerform operations on an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe covered the concepts of \u003ccode\u003eObject\u003c/code\u003es in JavaScript. Now it's time to put the concepts into practice.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eFollow the steps below, running \u003ccode\u003enpm test\u003c/code\u003e as you go to get additional information from the tests.\u003c/p\u003e  \u003cp\u003eLet's say we are working on a program that will keep track of a company's employees. We want to store each \u003ccode\u003eemployee\u003c/code\u003e as an \u003ccode\u003eObject\u003c/code\u003e. We're starting small, so to begin with we'll only keep track of the employee's name and street address.\u003c/p\u003e  \u003cp\u003eTo start, define a \u003ccode\u003eemployee\u003c/code\u003e variable and assign it to an \u003ccode\u003eObject\u003c/code\u003e containing \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003estreetAddress\u003c/code\u003e keys; you can use whatever values you like. Use literal syntax to create your \u003ccode\u003eObject\u003c/code\u003e. Various updates will be applied to this variable (destructively and non-destructively) in this lab.\u003c/p\u003e  \u003cp\u003eOnce you've initialized the \u003ccode\u003eemployee\u003c/code\u003e Object, you'll need to create the following four functions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should take in three arguments: a \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, a \u003ccode\u003ekey\u003c/code\u003e and a \u003ccode\u003evalue\u003c/code\u003e. This function should not mutate the \u003ccode\u003eemployee\u003c/code\u003e; it should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that has an updated \u003ccode\u003evalue\u003c/code\u003e for the \u003ccode\u003ekey\u003c/code\u003e passed in.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edestructivelyUpdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should work the same as \u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e passed in.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e: this function should take in a \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e and a \u003ccode\u003ekey\u003c/code\u003e. It should delete the property with that \u003ccode\u003ekey\u003c/code\u003e from the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e. This should not mutate the original \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e; it should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that doesn't include the identified key-value pair.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edestructivelyDeleteFromEmployeeByKey()\u003c/code\u003e: this function should work the same as \u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAs you work on your functions, be sure to think about when to use dot notation vs. bracket notation.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lab, we practiced creating an \u003ccode\u003eObject\u003c/code\u003e and performing operations on it.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"\u003eMDN: Object\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gf2bf27ef433375bcdab6e456e9f91643","title":"Review: Strings Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-review-strings-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-review-strings-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-review-strings-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eConcatenate strings with the \u003ccode\u003e+\u003c/code\u003e operator\u003c/li\u003e \u003cli\u003eInterpolate variables and other JavaScript expressions inside template literals\u003c/li\u003e \u003cli\u003eRead the MDN documentation on string methods and practice using a few\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eFor this lab, you've just been onboarded to the dev team working on Flatbook, the world's premier Flatiron School-based social network. At the moment, the view that our users see upon logging in is pretty generic. We'd like to improve the user experience by adding some custom greeting capabilities.\u003c/p\u003e  \u003ch2\u003eWork Through Failing Tests in a JavaScript Test Suite\u003c/h2\u003e  \u003cp\u003eTo start off, let's run the test suite with the \u003ccode\u003elearn\u003c/code\u003e command. Our code is currently failing all of the tests, but we expected that because we haven't done anything yet. Let's get to work!\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003ecurrentUser\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe first test is telling us that \u003ccode\u003ecurrentUser\u003c/code\u003e is not defined. Let's go to \u003ccode\u003eindex.js\u003c/code\u003e and write the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper'; \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Generally, when the tests ask you to define something, you want to define it exactly as indicated in the test. But in this case, you don't have to write \u003ccode\u003e'Grace Hopper'\u003c/code\u003e, because the important part is the variable name: \u003ccode\u003ecurrentUser\u003c/code\u003e.  You can use your own name, your pet's name, your favorite programmer's name — whatever you'd like.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eRerun the tests and you should see that the first one is passing.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003ewelcomeMessage\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe next failing test is similarly helpful, telling us exactly what we have to fix: \u003ccode\u003ewelcomeMessage contains \"Welcome to Flatbook, \"\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's return to \u003ccode\u003eindex.js\u003c/code\u003e and define our second variable below where we declared \u003ccode\u003ecurrentUser\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = 'Welcome to Flatbook, '; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRerun the tests; you should see a second passing test.\u003c/p\u003e  \u003cp\u003eThe third test tells us that \u003ccode\u003ewelcomeMessage\u003c/code\u003e should contain the value stored in \u003ccode\u003ecurrentUser\u003c/code\u003e. This seems like it might contradict the second test a bit, but let's try it out. Let's erase \u003ccode\u003e'Welcome to Flatbook, '\u003c/code\u003e and set \u003ccode\u003ewelcomeMessage\u003c/code\u003e equal to \u003ccode\u003ecurrentUser\u003c/code\u003e instead:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = currentUser; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we rerun the tests, we still have two passing. But now the first and third tests are passing instead of the first and second! That doesn't seem quite right.\u003c/p\u003e  \u003cp\u003eIt turns out that the tests want \u003ccode\u003ewelcomeMessage\u003c/code\u003e to include \u003cem\u003eboth\u003c/em\u003e \u003ccode\u003e'Welcome to Flatbook, '\u003c/code\u003e and the value stored in \u003ccode\u003ecurrentUser\u003c/code\u003e. Maybe we can include both of them in a single string?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = 'Welcome to Flatbook, currentUser'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we rerun the tests, we're once again passing the second test, but we're back to failing the third test. The new error message for the third test gives us a hint about what's happening:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eAssertionError: expected 'Welcome to Flatbook, currentUser' to contain 'Grace Hopper' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen JavaScript is expecting a variable to contain one thing, and it does not, that is known as an \u003ccode\u003eAssertionError\u003c/code\u003e. The test suite looked at the value stored in \u003ccode\u003ewelcomeMessage\u003c/code\u003e and expected to find the string \u003ccode\u003e'Grace Hopper'\u003c/code\u003e, which is the value stored in \u003ccode\u003ecurrentUser\u003c/code\u003e. Instead, \u003ccode\u003ewelcomeMessage\u003c/code\u003e contains the literal string \u003ccode\u003e\"currentUser\"\u003c/code\u003e. It's important to understand the distinction:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ecurrentUser\u003c/code\u003e is a \u003cem\u003evariable\u003c/em\u003e that contains a string (\u003ccode\u003e'Grace Hopper'\u003c/code\u003e in our examples).\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003e'currentUser'\u003c/code\u003e is a \u003cem\u003estring\u003c/em\u003e,\u0026nbsp;\u003cstrong\u003e\u003cem\u003enot a variable\u003c/em\u003e\u003c/strong\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe JavaScript engine sees a matching pair of single quotes (\u003ccode\u003e' '\u003c/code\u003e), creates a new string, and assumes that \u003cem\u003eeverything\u003c/em\u003e in between the matching punctuation marks is part of that string. For example, if we add quotation marks around the first line of code that we wrote, it becomes a simple string consisting of 35 characters:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof \"const currentUser = 'Grace Hopper';\";\u003cbr\u003e//=\u0026gt; \"string\"\u003cbr\u003e\u003cbr\u003e\"const currentUser = 'Grace Hopper';\".length;\u003cbr\u003e//=\u0026gt; 35\u003cbr\u003e\u003cbr\u003ecurrentUser;\u003cbr\u003e//=\u0026gt; Uncaught ReferenceError: currentUser is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs demonstrated by the last line in that snippet, because we turned our code into a string it no longer functions as JavaScript code for declaring and assigning a \u003ccode\u003ecurrentUser\u003c/code\u003e variable.\u003c/p\u003e  \u003cp\u003eSince we want \u003ccode\u003ewelcomeMessage\u003c/code\u003e to contain both \u003ccode\u003e'Welcome to Flatbook, '\u003c/code\u003e and the value stored in \u003ccode\u003ecurrentUser\u003c/code\u003e, we have two options: \u003cstrong\u003econcatenation\u003c/strong\u003e and \u003cstrong\u003einterpolation\u003c/strong\u003e.\u003c/p\u003e  \u003ch2\u003eConcatenate Strings with the \u003ccode\u003e+\u003c/code\u003e Operator\u003c/h2\u003e  \u003cp\u003eString concatenation is a way to take two strings and add one to the other, creating a single, longer string. The easiest way to concatenate strings in JavaScript is with the \u003ccode\u003e+\u003c/code\u003e operator, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"High \" + \"five!\";\u003cbr\u003e//=\u0026gt; \"High five!\"\u003cbr\u003e\u003cbr\u003e\"We\" + ' ' + `can` + \" \" + 'concat' + `enate` + \" as many strings \" + 'as our heart ' + `desires.`;\u003cbr\u003e//=\u0026gt; \"We can concatenate as many strings as our heart desires.\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSince our \u003ccode\u003ecurrentUser\u003c/code\u003e variable contains a string, we can concatenate it to the end of \u003ccode\u003e'Welcome to Flatbook, '\u003c/code\u003e to dynamically create a new string based on whatever value \u003ccode\u003ecurrentUser\u003c/code\u003e contains at a given moment:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = 'Welcome to Flatbook, ' + currentUser; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we run the test suite with our updated code, we'll see both the second and third tests passing! However, before we move on, let's talk about interpolation.\u003c/p\u003e  \u003ch2\u003eInterpolate Variables and Other JavaScript Expressions Inside Template Literals\u003c/h2\u003e  \u003cp\u003eString interpolation lets us dynamically insert values in the middle of a string. To do this, we need to use \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003etemplate literals\u003c/a\u003e, which are simply strings wrapped in backticks rather than single or double quotes. Template literals enable us to interpolate the value of a variable into a string by wrapping the variable in curly braces preceded by a dollar sign: \u003ccode\u003e${yourVariable}\u003c/code\u003e. The \u003ccode\u003e${}\u003c/code\u003e, when inside backticks, tells the JavaScript engine that it needs to \u003cem\u003einterpret the value\u003c/em\u003e of \u003ccode\u003eyourVariable\u003c/code\u003e and insert that value into the string. If you forget to use the backticks and use single or double quotes instead, the dollar sign, curly braces and variable name will all be inserted into the string instead of the variable's value.\u003c/p\u003e  \u003cp\u003eUnlike string concatenation, template literals will also allow you to use multi-line strings. Wrapping the string in backticks preserves any new lines when the string is returned or output.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myString = 'template literal';\u003cbr\u003e\u003cbr\u003econst myNumber = 10;\u003cbr\u003e\u003cbr\u003econst myBoolean = false;\u003cbr\u003e\u003cbr\u003e`Saying that interpolation with ${myString}s is better than concatenation ${90 + myNumber}% of the time is simply ${myBoolean}. But it is pretty cool!\u003cbr\u003e\u003cbr\u003eBeware that new lines inside of a ${myString} will be preserved as new lines in the resulting ${typeof myString}!`;\u003cbr\u003e//=\u0026gt; \"Saying that interpolation with template literals is better than concatenation 100% of the time is simply false. But it is pretty cool!\u003cbr\u003e\u003cbr\u003e// Beware that new lines inside of a template literal will be preserved as new lines in the resulting string!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, in the example above, one of the things we interpolated into our string is an arithmetic expression: \u003ccode\u003e${90 + myNumber}\u003c/code\u003e. We aren't limited to interpolating just variables — we can use \u003cem\u003eany expression\u003c/em\u003e inside the curly braces.\u003c/p\u003e  \u003cp\u003eWhile, for most purposes, the choice of whether to use concatenation or string interpolation is primarily a matter of personal preference, JavaScript programmers tend to use string interpolation for all but the simplest of cases.\u003c/p\u003e  \u003cp\u003eLet's rewrite our \u003ccode\u003ewelcomeMessage\u003c/code\u003e to use a template literal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = `Welcome to Flatbook, ${currentUser}`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first three tests are still passing, but the fourth wants our \u003ccode\u003ewelcomeMessage\u003c/code\u003e to end with an exclamation point. The fix is as simple as adding a \u003ccode\u003e!\u003c/code\u003e as the last character in the template literal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = `Welcome to Flatbook, ${currentUser}!`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFour tests down, six to go!\u003c/p\u003e  \u003ch2\u003eRead the MDN Documentation on String Methods and Practice Using a Few\u003c/h2\u003e  \u003ch4\u003e\u003ccode\u003eexcitedWelcomeMessage\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eSometimes we get so excited when someone logs into their Flatbook account that we just want to shout out loud. We \u003cem\u003ecould\u003c/em\u003e copy over most of the code from \u003ccode\u003ewelcomeMessage\u003c/code\u003e and then change every character to its uppercase equivalent, but as developers we try not to repeat ourselves. Instead, let's use the \u003ccode\u003e.toUpperCase()\u003c/code\u003e string method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e\u003cbr\u003econst welcomeMessage = `Welcome to Flatbook, ${currentUser}!`;\u003cbr\u003e\u003cbr\u003econst excitedWelcomeMessage = welcomeMessage.toUpperCase(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAll strings in JavaScript have access to the same set of default methods, which are common operations like changing a string and returning the new version, searching through a string for specific character(s) and returning the match, and so on. For example, we can use \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"\u003e\u003ccode\u003e.toUpperCase()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"\u003e\u003ccode\u003e.toLowerCase()\u003c/code\u003e\u003c/a\u003e on a string to make the entire string uppercase or lowercase. There are lots of other \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Methods_2\"\u003estring methods\u003c/a\u003e that you'll find useful at various points throughout your JavaScript programming career.\u003c/p\u003e  \u003cp\u003eRerun the tests; you should see the first seven tests passing. Woohoo!\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003eshortGreeting\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe mobile team at Flatbook is busy redesigning the site for smaller devices, and they're a bit concerned about how much real estate the \u003ccode\u003ewelcomeMessage\u003c/code\u003e takes up on the screen. They want us to create a shorter version that truncates the \u003ccode\u003ecurrentUser\u003c/code\u003e's name into just their first initial.\u003c/p\u003e  \u003cp\u003eIf you take a look at the first error, you'll see that the JavaScript engine is telling us that it can't find \u003ccode\u003eshortGreeting\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eshortGreeting\u003cbr\u003e  contains \"Welcome, \"\u003cbr\u003e    ReferenceError: shortGreeting is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnce we define it in \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003e\u003cbr\u003econst shortGreeting = ''; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ewe see a new error from the test suite:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eshortGreeting\u003cbr\u003e  contains \"Welcome, \"\u003cbr\u003e    AssertionError: expected '' to contain 'Welcome, ' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt expected \u003ccode\u003eshortGreeting\u003c/code\u003e to contain the string \u003ccode\u003e\"Welcome, \"\u003c/code\u003e, but \u003ccode\u003eshortGreeting\u003c/code\u003e is currently an empty string, \u003ccode\u003e''\u003c/code\u003e. We can fix that now:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003e\u003cbr\u003econst shortGreeting = 'Welcome, '; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext up is another \u003ccode\u003eAssertionError\u003c/code\u003e, this one checking that \u003ccode\u003eshortGreeting\u003c/code\u003e contains the first letter from \u003ccode\u003ecurrentUser\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eshortGreeting\u003cbr\u003e  contains the first initial of the name stored in the 'currentUser' variable\u003cbr\u003e    AssertionError: expected 'Welcome, ' to contain 'G' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo get a sense of how specific the tests are, let's start by adding the entirety of \u003ccode\u003ecurrentUser\u003c/code\u003e to \u003ccode\u003eshortGreeting\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003econst shortGreeting = `Welcome, ${currentUser}`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we changed the single quotes to backticks, which allows us to interpolate with \u003ccode\u003e${ }\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe new error reads as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eshortGreeting\u003cbr\u003e  contains the first initial of the name stored in the 'currentUser' variable\u003cbr\u003e    AssertionError: expected 'Welcome, Grace Hopper' to not contain 'race Hopper' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe test suite checks that \u003ccode\u003eshortGreeting\u003c/code\u003e contains the first character in \u003ccode\u003ecurrentUser\u003c/code\u003e (\u003ccode\u003eG\u003c/code\u003e in our example) and that it \u003cem\u003edoesn't\u003c/em\u003e contain the rest of the string (\u003ccode\u003erace Hopper\u003c/code\u003e).\u003c/p\u003e  \u003cp\u003eThere are a few different ways we could get just the first character of \u003ccode\u003ecurrentUser\u003c/code\u003e. The easiest would be to use \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Character_access\"\u003ebracket notation or the \u003ccode\u003e.charAt()\u003c/code\u003e method\u003c/a\u003e to grab the character at index \u003ccode\u003e0\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'[0];\u003cbr\u003e//=\u0026gt; \"E\"\u003cbr\u003e\u003cbr\u003e'Edsger Dijkstra'.charAt(0);\u003cbr\u003e//=\u0026gt; \"E\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, it's a good practice to make our code flexible and future-proof it a bit. What if our product team decides it would be better to shorten \u003ccode\u003ecurrentName\u003c/code\u003e to two characters instead of one? Or three characters?\u003c/p\u003e  \u003cp\u003eFor the added flexibility, we're going to use \u003ccode\u003e.slice()\u003c/code\u003e, but you can always explore the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Methods_2\"\u003eMDN documentation on string methods\u003c/a\u003e to pick out your own strategy.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eIf you take a look at the documentation for \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/a\u003e, you will see the following description:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eThe \u003cstrong\u003eslice()\u003c/strong\u003e method extracts a section of a string and returns it as a new string, without modifying the original string.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThe method takes two arguments: the index at which the extraction should begin and the index \u003cem\u003ebefore which\u003c/em\u003e it should end. When we talk about indexes of a string, we're talking about how to access specific characters at various points within the string. Recall that computers start counting with 0. Because we start at index \u003ccode\u003e0\u003c/code\u003e instead of \u003ccode\u003e1\u003c/code\u003e, the index of each character in a string is always one less than the character's place in the string. The second character is at index \u003ccode\u003e1\u003c/code\u003e, the fifth at index \u003ccode\u003e4\u003c/code\u003e, the twelfth at index \u003ccode\u003e11\u003c/code\u003e, and so on. The index of the last character is always one less than the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"\u003elength\u003c/a\u003e of the string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'.length;\u003cbr\u003e//=\u0026gt; 15\u003cbr\u003e\u003cbr\u003e'Edsger Dijkstra'[15];\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003e'Edsger Dijkstra'[14];\u003cbr\u003e//=\u0026gt; \"a\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we omit both arguments, \u003ccode\u003e.slice()\u003c/code\u003e will return a full copy of the original string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'.slice();\u003cbr\u003e//=\u0026gt; \"Edsger Dijkstra\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we provide a single argument, \u003ccode\u003e.slice()\u003c/code\u003e will return a copy from that index to the end of the string. For example, to grab Dijkstra's last name, we could start the slice on index \u003ccode\u003e7\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'.slice(7);\u003cbr\u003e//=\u0026gt; \"Dijkstra\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we wanted the first three characters of Dijkstra's name, we would specify \u003ccode\u003e0\u003c/code\u003e as the first argument, the index at which to start, and \u003ccode\u003e3\u003c/code\u003e as the second argument, the index before which to end:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Edsger Dijkstra'.slice(0, 3);\u003cbr\u003e//=\u0026gt; \"Eds\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo satisfy our team's current specifications for \u003ccode\u003eshortGreeting\u003c/code\u003e, we need to start our slice at index \u003ccode\u003e0\u003c/code\u003e and end it before index \u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecurrentUser.slice(0, 1); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when our product team asks us to use the first two characters of \u003ccode\u003ecurrentUser\u003c/code\u003e, the change is as simple as \u003ccode\u003ecurrentUser.slice(0, 1)\u003c/code\u003e → \u003ccode\u003ecurrentUser.slice(0, 2)\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAdd an exclamation point to the end, and the entire test suite should be passing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst currentUser = 'Grace Hopper';\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003econst shortGreeting = `Welcome, ${currentUser.slice(0, 1)}!`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGreat work!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://webmasters.stackexchange.com/questions/8525/how-do-i-open-the-javascript-console-in-different-browsers/77337#77337\"\u003eStackExchange – How to open the JavaScript console\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003eMDN —\u0026nbsp;Template literals\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\"\u003eDRY —\u0026nbsp;Don't Repeat Yourself\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"\u003eMDN —\u0026nbsp;String — \u003ccode\u003e.length\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Character_access\"\u003eMDN —\u0026nbsp;String —\u0026nbsp;Character access\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Methods_2\"\u003eMDN —\u0026nbsp;String — Methods\u003c/a\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"\u003eMDN —\u0026nbsp;\u003ccode\u003e.toUpperCase()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"\u003eMDN —\u0026nbsp;\u003ccode\u003e.toLowerCase()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\"\u003eMDN —\u0026nbsp;\u003ccode\u003e.slice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd4d4e32f4edfa786d18cb64fc8f3c77d","title":"Review: Variables Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-javascript-variables-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-variables-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-javascript-variables-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice using \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e to declare variables in JavaScript\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eIn this lab we'll practice declaring and assigning values to variables. We'll also go over how to read the test document. Understanding how to read the tests can be a valuable tool in figuring out exactly what you'll need to do to complete the lab.\u003c/p\u003e  \u003ch3\u003eTests\u003c/h3\u003e  \u003cp\u003eWhen we want to run an experiment, we need to develop a hypothesis and we need to test it. In programming, we run tests to verify that programs behave the way we think they do. Tests help us identify bugs and judge how healthy our applications are.\u003c/p\u003e  \u003cp\u003eWe use tests to describe the program's behavior, just as you would in a professional coding environment, and we also use them as teaching tools. You are in charge of getting the tests to pass.\u003c/p\u003e  \u003ch3\u003eStructure\u003c/h3\u003e  \u003cp\u003eThe structure of this lab — where its files and folders are located — looks roughly like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e├── CONTRIBUTING.md\u003cbr\u003e├── LICENSE.md\u003cbr\u003e├── README.md\u003cbr\u003e├── index.js\u003cbr\u003e├── node_modules/\u003cbr\u003e├── package.json\u003cbr\u003e└── test\u003cbr\u003e    └── indexTest.js \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAll labs will more or less have the same structure. (And non-lab lessons, for that matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)\u003c/p\u003e  \u003ch3\u003eCode Along\u003c/h3\u003e  \u003cp\u003eOpen up \u003ccode\u003eindex.js\u003c/code\u003e in your text editor; you should see, well, nothing. We'll fix that soon.\u003c/p\u003e  \u003cp\u003eNow open up \u003ccode\u003etest/indexTest.js\u003c/code\u003e. Hey, there's something! What's all of this stuff doing?\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The \u003ccode\u003etest/indexTest.js\u003c/code\u003e has great info that we want to look at, but do not edit this file otherwise you may have extra difficulty passing this lab.\u003c/p\u003e  \u003cp\u003eA few lines down in the \u003ccode\u003etest/indexTest.js\u003c/code\u003e file you will see:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edescribe('index.js', function () {\u003cbr\u003e  // there's stuff in here, too\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003edescribe\u003c/code\u003e is a function provided by our test library, Mocha, and it's used to hold our tests. After the word \u003ccode\u003edescribe\u003c/code\u003e is information about our tests. Tests are used as a way to document the behavior of a function to developers. For example, the next word \u003ccode\u003edescribe\u003c/code\u003e is followed by the word \u003ccode\u003ecompanyName\u003c/code\u003e. Here the test is telling us that the tests that come afterwards will be about \u003ccode\u003ecompanyName\u003c/code\u003e. Then comes the word \u003ccode\u003eit\u003c/code\u003e, where you see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eit('is set as Scuber', function () {\u003cbr\u003e  // tests are here\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is telling us that the \u003ccode\u003ecompanyName\u003c/code\u003e should be set to \u003ccode\u003eScuber\u003c/code\u003e. Finally, filling in the missing part of the \u003ccode\u003eit\u003c/code\u003e code, we see:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eit('is set as Scuber', function () {\u003cbr\u003e  expect(companyName).to.equal('Scuber');\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis example shows that the test expects \u003ccode\u003ecompanyName\u003c/code\u003e to equal \u003ccode\u003eScuber\u003c/code\u003e. That \u003ccode\u003eexpect\u003c/code\u003e and \u003ccode\u003eto.equal\u003c/code\u003e are essentially doing the same thing as \u003ccode\u003ecompanyName == 'Scuber'\u003c/code\u003e. In other words, \u003ccode\u003eexpect(companyName).to.equal('Scuber')\u003c/code\u003e is running code that will have this first test pass if \u003ccode\u003ecompanyName\u003c/code\u003e equals \u003ccode\u003eScuber\u003c/code\u003e and fail if it does not.\u003c/p\u003e  \u003cp\u003eDon't worry too much yet if it's hard to understand what is happening inside of the \u003ccode\u003etest/indexTest.js\u003c/code\u003e file. But it's a good idea to open up the file, and gather the information that you can. We will also provide instructions in the \u003ccode\u003eREADME.md\u003c/code\u003e file that will allow you to complete the lab.\u003c/p\u003e  \u003ch2\u003eRunning the Tests\u003c/h2\u003e  \u003cp\u003eTo run the tests, type \u003ccode\u003elearn\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e in the terminal. You should now see the current status of the tests in the terminal. For the moment, all of the tests fail. Let's figure out how to get one of them passing! (The rest will be up to you.)\u003c/p\u003e  \u003cp\u003eTo get our first test to pass, we can open up our \u003ccode\u003eindex.js\u003c/code\u003e file, and write the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet companyName = 'Scuber'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run \u003ccode\u003elearn\u003c/code\u003e again, you'll see that our first test is now passing. However, the second test, which is also about \u003ccode\u003ecompanyName\u003c/code\u003e, is not yet passing. It's not passing because it expects \u003ccode\u003ecompanyName\u003c/code\u003e to be declared using a different keyword than the \u003ccode\u003elet\u003c/code\u003e keyword — it needs a keyword that is used for variables that can't be changed...\u003c/p\u003e  \u003cp\u003eContinue to work through the problems below. Keep in mind the general workflow for a lab:\u003c/p\u003e  \u003col\u003e \u003cli\u003eRun \u003ccode\u003elearn\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eRead the errors; vocalize what they're asking you to do.\u003c/li\u003e \u003cli\u003eWrite code; repeat steps 1 and 2 often until a test passes.\u003c/li\u003e \u003cli\u003eRepeat as needed until all the tests are passing.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eWorking Through the Problems\u003c/h2\u003e  \u003cp\u003eIf you open up \u003ccode\u003etest/indexTest.js\u003c/code\u003e, you will see the tasks in front of you:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ecompanyName\u003c/code\u003e — Inside the \u003ccode\u003etest/indexTest.js\u003c/code\u003e file, look at the \u003ccode\u003edescribe\u003c/code\u003e function call for the \u003ccode\u003ecompanyName\u003c/code\u003e variable. The two \u003ccode\u003eit\u003c/code\u003e function calls inside this \u003ccode\u003edescribe\u003c/code\u003e tell us the features of \u003ccode\u003ecompanyName\u003c/code\u003e we need to create. To review, in the first \u003ccode\u003eit\u003c/code\u003e function call, it says that \u003ccode\u003eit\u003c/code\u003e (companyName) \u003ccode\u003eis set as Scuber\u003c/code\u003e. In the next line, you can see that the test checks to make sure this occurs by seeing if \u003ccode\u003ecompanyName\u003c/code\u003e equals \u003ccode\u003eScuber\u003c/code\u003e. So this means that you need to go to your \u003ccode\u003eindex.js\u003c/code\u003e file and declare a variable named \u003ccode\u003ecompanyName\u003c/code\u003e and set it equal to \u003ccode\u003eScuber\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eIn the second \u003ccode\u003eit\u003c/code\u003e function call for \u003ccode\u003ecompanyName\u003c/code\u003e, it says it \u003ccode\u003eis defined as a const\u003c/code\u003e. The next line of code tests this. So you need to make sure that you are using the correct type of variable declaration such that attempting to reassign the variable throws an error.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003emostProfitableNeighborhood\u003c/code\u003e and \u003ccode\u003ecompanyCeo\u003c/code\u003e — Here we are getting more practice with declaring variables. Read the tests to see how you need to code these two variables to get the remaining tests passing.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003eMDN: Let\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003eMDN: Const\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g34c7f66cb548451809efb67098d321f7","title":"Ruby Music Library","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-music-library-cli\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-music-library-cli\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-music-library-cli/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eYou're going to be implementing a Music Library domain composed of 3 main models, \u003ccode\u003eSong\u003c/code\u003e, \u003ccode\u003eArtist\u003c/code\u003e, and \u003ccode\u003eGenre\u003c/code\u003e. The models will relate to each other and collaborate heavily. Additionally, you're going to be extracting some common functionality out of those models and into a module, \u003ccode\u003eConcerns::Findable\u003c/code\u003e, which you'll then mix back into the models. You'll then build a collaborating object, \u003ccode\u003eMusicImporter\u003c/code\u003e, that can parse a directory of MP3 files and use the extracted filenames to create instances of \u003ccode\u003eSong\u003c/code\u003e, \u003ccode\u003eArtist\u003c/code\u003e, and \u003ccode\u003eGenre\u003c/code\u003e objects. Finally, you'll build a CLI in \u003ccode\u003ebin/musiclibrary\u003c/code\u003e that is powered by a \u003ccode\u003eMusicLibraryController\u003c/code\u003e to provide a simple CLI that lets a user browse the library of MP3s imported by song, artist, and genre.\u003c/p\u003e  \u003cp\u003eThis is a complex lab with many parts, so go slowly. Take time to understand what you're building holistically before starting. Read this entire README before jumping in. As you go from spec to spec, we recommend doing them in numbered order.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003ch2\u003e\n\u003ccode\u003eSong\u003c/code\u003e, \u003ccode\u003eArtist\u003c/code\u003e, and \u003ccode\u003eGenre\u003c/code\u003e basics\u003c/h2\u003e  \u003cp\u003eThe first thing to do is get the basics of the main models working. Each model has almost the exact same basic requirements, so once you make \u003ccode\u003e001_song_basics_spec.rb\u003c/code\u003e pass by building the \u003ccode\u003eSong\u003c/code\u003e class, the basic \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eGenre\u003c/code\u003e specs will go quickly.\u003c/p\u003e  \u003cp\u003eThe requirements for each model are that they can accept a \u003ccode\u003ename\u003c/code\u003e upon initialization and set that property correctly. The \u003ccode\u003ename\u003c/code\u003e property should be readable and writable by the object.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eSong.new(\"Blank Space\").name #=\u0026gt; \"Blank Space\"` \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAdditionally, \u003cem\u003eeach\u003c/em\u003e class should contain a class variable \u003ccode\u003e@@all\u003c/code\u003e that is set to an empty array and is prepared to store all saved instances of the class. This class variable should be accessible via the class method \u003ccode\u003e.all\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eSong.all #=\u0026gt; []\u003cbr\u003e\u003cbr\u003eArtist.all #=\u0026gt; [] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInstances should respond to a \u003ccode\u003e#save\u003c/code\u003e method that adds the instance itself into the appropriate \u003ccode\u003e@@all\u003c/code\u003e class variable.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eSong.new(\"Blank Space\").save\u003cbr\u003eSong.all #=\u0026gt; [#] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe class should be able to empty its \u003ccode\u003e@@all\u003c/code\u003e array via a class method \u003ccode\u003e.destroy_all\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eSong.new(\"Kaohsiung Christmas\").save\u003cbr\u003eSong.all #=\u0026gt; [#, #]\u003cbr\u003eSong.destroy_all\u003cbr\u003eSong.all #=\u0026gt; [] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFinally, all classes should implement a custom constructor \u003ccode\u003e.create\u003c/code\u003e that instantiates an instance using \u003ccode\u003e.new\u003c/code\u003e but also invokes \u003ccode\u003e#save\u003c/code\u003e on that instance, forcing it to persist immediately.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eSong.new(\"Blank Space\")\u003cbr\u003eSong.all #=\u0026gt; []\u003cbr\u003eSong.create(\"Blank Space\")\u003cbr\u003eSong.all #=\u0026gt; [#] \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eRelationships\u003c/h2\u003e  \u003ch3\u003e\n\u003ccode\u003eSong\u003c/code\u003es and \u003ccode\u003eArtist\u003c/code\u003es\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eSongs belong to an artist and an artist has many songs. Adding a song to an artist is done by calling an \u003ccode\u003e#add_song\u003c/code\u003e method on an instance of the \u003ccode\u003eArtist\u003c/code\u003e class.\u003c/li\u003e \u003cli\u003eSongs can be initialized with an optional \u003ccode\u003eartist\u003c/code\u003e argument.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003e\n\u003ccode\u003eSong\u003c/code\u003es and \u003ccode\u003eGenre\u003c/code\u003es\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eGenres have many songs and are initialized with an empty list of songs.\u003c/li\u003e \u003cli\u003eSongs have one genre.\u003c/li\u003e \u003cli\u003eSongs can be initialized with an optional \u003ccode\u003egenre\u003c/code\u003e argument.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003e\n\u003ccode\u003eArtist\u003c/code\u003es and \u003ccode\u003eGenre\u003c/code\u003es\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eArtists have many genres through their songs. Implement a \u003ccode\u003e#genres\u003c/code\u003e method for this association.\u003c/li\u003e \u003cli\u003eGenres have many artists through their songs. Implement an \u003ccode\u003e#artists\u003c/code\u003e method for this association.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote:\u003c/em\u003e\u003c/strong\u003e there are a few tests concerned with switching the \u003ccode\u003eSong#initialize\u003c/code\u003e method from setting instance variables for \u003ccode\u003e@artist\u003c/code\u003e and \u003ccode\u003e@genre\u003c/code\u003e to using the custom setter methods that you define (e.g., \u003ccode\u003eSong#genre=\u003c/code\u003e). We want to use the custom setter methods because they keep our associations in sync. For example, when we call our custom \u003ccode\u003eSong#artist=\u003c/code\u003e method, it sets the song's \u003ccode\u003e@artist\u003c/code\u003e property \u003cem\u003eand\u003c/em\u003e adds the song to the artist's collection of songs. When you reach these tests, make sure those setter methods are only invoked \u003cem\u003eif\u003c/em\u003e \u003ccode\u003eSong#initialize\u003c/code\u003e is called with artist and/or genre arguments. Otherwise, the \u003ccode\u003e@artist\u003c/code\u003e and/or \u003ccode\u003e@genre\u003c/code\u003e properties will be initialized as \u003ccode\u003enil\u003c/code\u003e, and you'll have some unexpected consequences in both your code and the test suite.   * If we call \u003ccode\u003eSong.new(\"Song Title\", artist_object, genre_object)\u003c/code\u003e, both \u003ccode\u003eSong#artist=\u003c/code\u003e and \u003ccode\u003eSong#genre=\u003c/code\u003e should be invoked.   * If we call \u003ccode\u003eSong.new(\"This Song Has No Artist or Genre\")\u003c/code\u003e, neither \u003ccode\u003eSong#artist=\u003c/code\u003e nor \u003ccode\u003eSong#genre=\u003c/code\u003e should be invoked.\u003c/p\u003e  \u003ch2\u003eFinding\u003c/h2\u003e  \u003ch3\u003eSong\u003c/h3\u003e  \u003cp\u003eFirst implement the following two methods in your \u003ccode\u003eSong\u003c/code\u003e class:   * Songs should have a \u003ccode\u003efind_by_name\u003c/code\u003e method.   * Songs should have a \u003ccode\u003efind_or_create_by_name\u003c/code\u003e method.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eConcerns::Findable\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eNow that you've gotten the methods working in \u003ccode\u003eSong\u003c/code\u003e, let's adapt them for general reuse by putting them into a module that we can mix into our \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eGenre\u003c/code\u003e classes. It's Ruby convention to put modules in a \u003ccode\u003econcerns/\u003c/code\u003e folder nested under \u003ccode\u003elib/\u003c/code\u003e, and each module should be namespaced like this: \u003ccode\u003eruby module Concerns::ModuleName   # Module code here end \u003c/code\u003e Once the basic module structure is good to go, it's time to code our two class methods again:   * Implement a generic \u003ccode\u003e#find_by_name\u003c/code\u003e method that uses the \u003ccode\u003e.all\u003c/code\u003e method defined by the class to find an instance of the class by name.   * Implement a generic \u003ccode\u003e#find_or_create_by_name\u003c/code\u003e method that uses the \u003ccode\u003e.all\u003c/code\u003e method defined by the class to find an instance of the class by name and to create a new instance if a match is not found.   * Add this module to your \u003ccode\u003eGenre\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class.\u003c/p\u003e  \u003ch2\u003e\u003ccode\u003eMusicImporter\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eCreate a \u003ccode\u003eMusicImporter\u003c/code\u003e class that works with your \u003ccode\u003eSong\u003c/code\u003e, \u003ccode\u003eGenre\u003c/code\u003e, and \u003ccode\u003eArtist\u003c/code\u003e objects to import a directory of MP3 files. This class will have the following methods:   * \u003ccode\u003e#initialize\u003c/code\u003e accepts a file path to a directory of MP3 files.   * \u003ccode\u003e#files\u003c/code\u003e returns all of the imported filenames.   * \u003ccode\u003e.import\u003c/code\u003e imports all of the files from the library, instantiating a new \u003ccode\u003eSong\u003c/code\u003e object for each file.\u003c/p\u003e  \u003cp\u003eIn addition, add the following pair of methods to your \u003ccode\u003eSong\u003c/code\u003e class:   * \u003ccode\u003e.new_from_filename\u003c/code\u003e, which instantiates a new \u003ccode\u003eSong\u003c/code\u003e object based on a provided filename.   * \u003ccode\u003e.create_from_filename\u003c/code\u003e, which does the same thing as \u003ccode\u003e.new_from_filename\u003c/code\u003e but also saves the newly-created song to the \u003ccode\u003e@@all\u003c/code\u003e class variable.\u003c/p\u003e  \u003ch2\u003eIt's CLI time!\u003c/h2\u003e  \u003cp\u003eCongrats! You've done the heavy lifting. Now let's wrap it all up in a simple CLI so that users can actually interact with our code. Create a \u003ccode\u003eMusicLibraryController\u003c/code\u003e class that:   * Upon initialization, accepts an optional path to the library of MP3 files, defaulting to \u003ccode\u003e./db/mp3s/\u003c/code\u003e. It should then instantiate a \u003ccode\u003eMusicImporter\u003c/code\u003e object, which it will use to import songs from the specified library.   * Has a \u003ccode\u003e#call\u003c/code\u003e method that starts the CLI and prompts the user for input. Read the tests carefully for specifics.\u003c/p\u003e  \u003cp\u003eHave fun!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=kgYP9Yj8OE4\u0026amp;feature=youtu.be\"\u003eQA with Students\u003c/a\u003e  \u003cul\u003e \u003cli\u003eThis Q\u0026amp;A led by Avi Flombaum covers setting up a bin file, setting up a \u003ccode\u003eGemfile\u003c/code\u003e and installing gems, and identifying objects and their responsibilities. It contains general tips on requirements, gems, and design.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=J_BSGPW37AE\"\u003eDebugging an Error in Music Library CLI\u003c/a\u003e  \u003cul\u003e \u003cli\u003eThis walk-through traces an error to its source in the code. In addition it covers how to change file permissions and how to create an executable file to initialize a sandbox environment.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=iClea2crypU\"\u003eLab Review\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gaf0f5dbc7cfb513f0464e82566a25807","title":"Scope Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-principles-scope-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-principles-scope-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUnderstand how functions determine scope in JavaScript\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eScuber's drivers are beginning to take down some notes about their customers. Use your knowledge of scope to access and change some of these variables.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eA word of warning. In this lab, you will practice doing some bad things. For example, we'll ask you to declare variables in global scope, and write functions that break down. You'll also need to use \u003ccode\u003evar\u003c/code\u003e to declare all variables except when specifically instructed otherwise. We do this because, by testing the limits and exposing the underbelly of a language, you can better understand it and know what to avoid in the future.\u003c/p\u003e  \u003cp\u003eOk, these are your tasks:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ecustomerName\u003c/code\u003e: Declare a variable in global scope called \u003ccode\u003ecustomerName\u003c/code\u003e using the \u003ccode\u003evar\u003c/code\u003e keyword.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eupperCaseCustomerName()\u003c/code\u003e: Write a function that accesses that global \u003ccode\u003ecustomerName\u003c/code\u003e variable, and uppercases it.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003esetBestCustomer()\u003c/code\u003e: Write a function that when called, declares a variable called \u003ccode\u003ebestCustomer\u003c/code\u003e in global scope and assigns it to be \u003ccode\u003e'not bob'\u003c/code\u003e. (Poor Bob.) Also, poor us, declaring a global variable from inside a function is one of those things we would never want to do normally, but is good for us to explore right now.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eoverwriteBestCustomer()\u003c/code\u003e: See the consequences of declaring a variable in global scope, by writing a new function called \u003ccode\u003eoverwriteBestCustomer()\u003c/code\u003e that changes that \u003ccode\u003ebestCustomer\u003c/code\u003e variable.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eleastFavoriteCustomer\u003c/code\u003e and \u003ccode\u003echangeLeastFavoriteCustomer()\u003c/code\u003e: Now declare a constant (using the \u003ccode\u003econst\u003c/code\u003e keyword) in global scope called \u003ccode\u003eleastFavoriteCustomer\u003c/code\u003e; be sure to assign it some initial value. Finally, write a function called \u003ccode\u003echangeLeastFavoriteCustomer()\u003c/code\u003e that attempts to change that constant - notice what JavaScript does when you try to change the constant.\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g23cc858759a2ef5fa544bfe6f83ba68d","title":"Sending Data with Fetch","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-sending-data-with-fetch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-sending-data-with-fetch/fork\" target=\"_blank\"\u003e \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-sending-data-with-fetch\" target=\"_blank\"\u003e \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-sending-data-with-fetch/issues/new\" target=\"_blank\"\u003e \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e \u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003efetch()\u003c/code\u003e to send data to a remote host\u003c/li\u003e\n\u003cli\u003eHandle the response from a successful request\u003c/li\u003e\n\u003cli\u003eHandle errors from an unsuccessful request\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIf you think about it, \u003ccode\u003efetch()\u003c/code\u003e is a little browser in your browser. You tell \u003ccode\u003efetch()\u003c/code\u003e to go to a URL by passing it an argument, e.g. \u003ccode\u003efetch(\"https://flatironschool.com\")\u003c/code\u003e, and it makes a network request. You chain calls to \u003ccode\u003efetch()\u003c/code\u003e with \u003ccode\u003ethen()\u003c/code\u003e. Each \u003ccode\u003ethen()\u003c/code\u003e call takes a callback function as its argument. Based on actions in the callback function, we can display or update content in the DOM.\u003c/p\u003e\n\u003cp\u003eThis is a lot like browsing the web: you change the URL in the URL bar, or you follow a link, and those actions tell the browser to go somewhere else and get the data. A technical way to describe that is: \"The browser implements an HTTP \u003ccode\u003eGET\u003c/code\u003e to retrieve the content at a URL.\" It's also 100% technically correct to say \"\u003ccode\u003efetch()\u003c/code\u003e uses an HTTP \u003ccode\u003eGET\u003c/code\u003e to retrieve the content specified by a URL.\"\u003c/p\u003e\n\u003cp\u003eThe browser also provides a helpful model for understanding what \u003cem\u003esending\u003c/em\u003e data from the browser looks like. We know this as an HTML \u003cem\u003eform\u003c/em\u003e. Technically speaking, HTML forms \"use an HTTP \u003ccode\u003ePOST\u003c/code\u003e to send content gathered in \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e elements to a specified URL.\" It's also 100% technically correct to say \"\u003ccode\u003efetch()\u003c/code\u003e uses an HTTP \u003ccode\u003ePOST\u003c/code\u003e to send content gathered in a JavaScript \u003ccode\u003eObject\u003c/code\u003e.\"\u003c/p\u003e\n\u003cp\u003eHTML forms are still widely used, but with \u003ccode\u003efetch()\u003c/code\u003e, we have more detailed control of the request. Using \u003ccode\u003efetch()\u003c/code\u003e, we can actually \u003cem\u003eoverride\u003c/em\u003e the normal behavior of an HTML form, capture any user input, package it up with the appropriate request information and send it out.\u003c/p\u003e\n\u003cp\u003eOur focus in this lesson will be learning how to send data using \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eUsing JSON Server to Mimic a Backend Database\u003c/h2\u003e\n\u003cp\u003eGo ahead and start up JSON Server by running \u003ccode\u003ejson-server --watch db.json\u003c/code\u003e in your terminal.\u003c/p\u003e\n\u003cp\u003eOnce the server is running, you'll see a list of available resource paths in the terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eResources\u003cbr\u003e  http://localhost:3000/dogs\u003cbr\u003e  http://localhost:3000/cats\u003cbr\u003e  http://localhost:3000/users\u003cbr\u003e  http://localhost:3000/robots \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese endpoints each provide different sets of data. Since it is mimicking a RESTful API, sending a request to '\u003ca href=\"http://localhost:3000/dogs\"\u003ehttp://localhost:3000/dogs\u003c/a\u003e' will return all records in the database for dogs, while '\u003ca href=\"http://localhost:3000/dogs/1\"\u003ehttp://localhost:3000/dogs/1\u003c/a\u003e' will return the dog with the id of 1.\u003c/p\u003e\n\u003cp\u003eSome example data is already present, stored in \u003ccode\u003edb.json\u003c/code\u003e. If the JSON server is running, you can also visit any of the above resources in a browser to see the data.\u003c/p\u003e\n\u003cp\u003eThe tests in this lab do not need JSON Server to be running, but if you would like to run tests while also running the server, open a second tab in your terminal.\u003c/p\u003e\n\u003ch2\u003eAnalyze Data Sent in an HTML Form\u003c/h2\u003e\n\u003cp\u003eLet's take a look at an HTML \u003ccode\u003eform\u003c/code\u003e (\u003cem\u003esee `sample_form.html` in this repo\u003c/em\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eaction\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ehttp://localhost:3000/dogs\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003emethod\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ePOST\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e Dog Name: \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edogName\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edogName\u003c/span\u003e\" /\u0026gt;\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e /\u0026gt;\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e Dog Breed: \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etext\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edogBreed\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edogBreed\u003c/span\u003e\" /\u0026gt;\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003elabel\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ebr\u003c/span\u003e /\u0026gt;\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003einput\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003eid\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003esubmit\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003evalue\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eSubmit\u003c/span\u003e\" /\u0026gt;\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eform\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we use the element's default POST behavior in combination with a backend server, the key components for sending the submitted data to the server are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe destination URL as defined in the \u003ccode\u003eaction\u003c/code\u003e attribute of the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eThe HTTP verb to use as defined in the \u003ccode\u003emethod\u003c/code\u003e attribute of the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eThe key / value data obtained from the inputs in the fields \u003ccode\u003edogName\u003c/code\u003e and \u003ccode\u003edogBreed\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe should expect that our \"mini-browser,\" \u003ccode\u003efetch()\u003c/code\u003e, will need those same bits of information in order to send a Post request to the server.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: with JSON Server and our HTML form, we already have what we need to submit our form the conventional way, without using JavaScript. To try this out, make sure the JSON server is running and open \u003ccode\u003esample_form.html\u003c/code\u003e in the browser. If you enter a dog name and breed in the input fields and click \"Submit,\" your information should successfully POST to the JSON server database, \u003ccode\u003edb.json\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eConstruct a POST Request Using \u003ccode\u003efetch()\u003c/code\u003e\n\u003c/h2\u003e\n\u003cp\u003eSending a POST request with \u003ccode\u003efetch()\u003c/code\u003e is more complicated than what we've seen up to this point. It still takes a \u003ccode\u003eString\u003c/code\u003e representing the destination URL as the first argument, as always. But as we will see below, \u003ccode\u003efetch()\u003c/code\u003e can also take a JavaScript \u003ccode\u003eObject\u003c/code\u003e as the \u003cem\u003esecond\u003c/em\u003e argument. This \u003ccode\u003eObject\u003c/code\u003e can be given certain \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters\"\u003eproperties\u003c/a\u003e that can be used to change \u003ccode\u003efetch()\u003c/code\u003e's default behavior.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(destinationURL, configurationObject); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003econfigurationObject\u003c/code\u003e contains three core components that are needed for standard POST requests: the HTTP verb, the headers, and the body.\u003c/p\u003e\n\u003ch3\u003eAdd the HTTP Verb\u003c/h3\u003e\n\u003cp\u003eSo far, comparing to an HTML form, we've only got the destination URL ('\u003ca href=\"http://localhost:3000/dogs\"\u003ehttp://localhost:3000/dogs\u003c/a\u003e' in this case). The next thing we need to include is the HTTP verb. By default, the verb is GET, which is why we can send simple GET requests with \u003cem\u003eonly\u003c/em\u003e a destination URL. To tell \u003ccode\u003efetch()\u003c/code\u003e that this is a POST request, we need to add a \u003ccode\u003emethod\u003c/code\u003e property to our \u003ccode\u003econfigurationObject\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\"\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAdd Headers\u003c/h3\u003e\n\u003cp\u003eThe second piece we need to include is some \u003cem\u003emetadata\u003c/em\u003e about the actual data we want to send. This metadata is in the form of \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\"\u003e\u003cem\u003eheaders\u003c/em\u003e\u003c/a\u003e. Headers are sent just ahead of the actual data payload of our POST request. They contain information about the data being sent.\u003c/p\u003e\n\u003cp\u003eOne very common header is \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\"\u003e\u003ccode\u003e\"Content-Type\"\u003c/code\u003e\u003c/a\u003e. \u003ccode\u003e\"Content-Type\"\u003c/code\u003e is used to indicate what format the data being sent is in. With JavaScript's \u003ccode\u003efetch()\u003c/code\u003e, \u003ca href=\"https://www.json.org/\"\u003eJSON\u003c/a\u003e is the most common format we will be using. We want to make sure that the destination of our POST request knows this. To do this, we'll include the \u003ccode\u003e\"Content-Type\"\u003c/code\u003e header:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\"\u003cbr\u003e  }\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach individual header is stored as a key/value pair inside an object. This object is assigned as the value of the \u003ccode\u003eheaders\u003c/code\u003e property as seen above.\u003c/p\u003e\n\u003cp\u003eWhen sending data, the server at the destination URL will send back a response, often including data that the sender of the \u003ccode\u003efetch()\u003c/code\u003e request might find useful. Just like \u003ccode\u003e\"Content-Type\"\u003c/code\u003e tells the destination server what type of data we're sending, it is also good practice to tell the server what data format we \u003cem\u003eaccept\u003c/em\u003e in return.\u003c/p\u003e\n\u003cp\u003eTo do this, we add a second header, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept\"\u003e\u003ccode\u003e\"Accept\"\u003c/code\u003e\u003c/a\u003e, and assign it to \u003ccode\u003e\"application/json\"\u003c/code\u003e as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  }\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are many other \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\"\u003eheaders\u003c/a\u003e available for particular uses. Some are used to send credentials or user authentication keys. Others are used to send cookies containing user info. \u003ccode\u003e\"Content-Type\"\u003c/code\u003e and \u003ccode\u003e\"Accept\"\u003c/code\u003e are two that we'll see the most throughout the remainder of this course.\u003c/p\u003e\n\u003cp\u003eServers may reject requests without the specific headers the server is configured to expect.\u003c/p\u003e\n\u003ch3\u003eAdd Data\u003c/h3\u003e\n\u003cp\u003eWe now have the destination URL, our HTTP verb, and headers that include information about the data we're sending. The last thing to add is the \u003cem\u003edata\u003c/em\u003e itself.\u003c/p\u003e\n\u003cp\u003eData being sent in \u003ccode\u003efetch()\u003c/code\u003e must be stored in the \u003ccode\u003ebody\u003c/code\u003e of the \u003ccode\u003econfigurationObject\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: /* Your data goes here */\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere is a catch here to be aware of — when data is exchanged between a client (your browser, for instance), and a server, the data is sent as \u003cem\u003etext\u003c/em\u003e. Whatever data we're assigning to the \u003ccode\u003ebody\u003c/code\u003e of our request needs to be a string.\u003c/p\u003e\n\u003ch4\u003eUse \u003ccode\u003eJSON.stringify()\u003c/code\u003e to Convert Objects to Strings\u003c/h4\u003e\n\u003cp\u003eWhen sending data using \u003ccode\u003efetch()\u003c/code\u003e, we often send multiple pieces of information in one request. In our code, we often organize this information using objects. Consider the following object, for instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  dogName: \"Byron\",\u003cbr\u003e  dogBreed: \"Poodle\"\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis object contains two related pieces of information, a dog's name and breed. Let's say we want to send the data in this object to a server. We can't simply assign it to \u003ccode\u003ebody\u003c/code\u003e, as it isn't a string. Instead, we convert it to JSON. The object above, converted to JSON would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"{\"dogName\":\"Byron\",\"dogBreed\":\"Poodle\"}\" \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, using JSON has enabled us to preserve the key/value pairs of our object within the string. When sent to a server, the server will be able to take this string and convert it back into key/value pairs in whatever language the server is written in.\u003c/p\u003e\n\u003cp\u003eFortunately, JavaScript comes with a built in method for converting objects to strings, \u003ccode\u003eJSON.stringify()\u003c/code\u003e. By passing an object in, \u003ccode\u003eJSON.stringify()\u003c/code\u003e will return a string, formatted and ready to send in our request:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify({\u003cbr\u003e    dogName: \"Byron\",\u003cbr\u003e    dogBreed: \"Poodle\"\u003cbr\u003e  })\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSend the POST Request\u003c/h2\u003e\n\u003cp\u003eWe've got all the pieces we need. Putting it all together, we get:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify({\u003cbr\u003e    dogName: \"Byron\",\u003cbr\u003e    dogBreed: \"Poodle\"\u003cbr\u003e  })\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efetch(\"http://localhost:3000/dogs\", configurationObject); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the JSON server running, if you open up \u003ccode\u003esample_form.html\u003c/code\u003e or \u003ccode\u003eindex.html\u003c/code\u003e, you can test out the code above in the console. Try it and take a look in \u003ccode\u003edb.json\u003c/code\u003e: you should see that Byron the Poodle has been successfully persisted to our database.\u003c/p\u003e\n\u003cp\u003eWe can make our code a bit more general by splitting out the body of our request into a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst formData = {\u003cbr\u003e  dogName: \"Byron\",\u003cbr\u003e  dogBreed: \"Poodle\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify(formData)\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efetch(\"http://localhost:3000/dogs\", configurationObject); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing the \u003ccode\u003eformData\u003c/code\u003e and \u003ccode\u003econfigurationObject\u003c/code\u003e variables helps make our code more readable and flexible, but, of course, we could instead just pass an anonymous object as the second argument to \u003ccode\u003efetch()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch(\"http://localhost:3000/dogs\", {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify({\u003cbr\u003e    dogName: \"Byron\",\u003cbr\u003e    dogBreed: \"Poodle\"\u003cbr\u003e  })\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll three approaches yield the same results!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: As a security precaution, most modern websites block the ability to use \u003ccode\u003efetch()\u003c/code\u003e in console while on their website, so if you are testing out code in the browser, make sure to be on a page like \u003ccode\u003eindex.html\u003c/code\u003e or \u003ccode\u003esample_form.html\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHandling What Happens After\u003c/h2\u003e\n\u003cp\u003eJust like when we use \u003ccode\u003efetch()\u003c/code\u003e to send GET requests, we have to handle responses to \u003ccode\u003efetch()\u003c/code\u003e. As mentioned before, servers will send a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\"\u003eResponse\u003c/a\u003e that might include useful information. To access this information, we use a series of calls to \u003ccode\u003ethen()\u003c/code\u003e which are given function \u003cem\u003ecallbacks\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eBuilding on the previous implementation we might write the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst formData = {\u003cbr\u003e  dogName: \"Byron\",\u003cbr\u003e  dogBreed: \"Poodle\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst configurationObject = {\u003cbr\u003e  method: \"POST\",\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify(formData)\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efetch(\"http://localhost:3000/dogs\", configurationObject)\u003cbr\u003e  .then(function(response) {\u003cbr\u003e    return response.json();\u003cbr\u003e  })\u003cbr\u003e  .then(function(object) {\u003cbr\u003e    console.log(object);\u003cbr\u003e  }); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the first \u003ccode\u003ethen()\u003c/code\u003e is passed a callback function that takes in \u003ccode\u003eresponse\u003c/code\u003e as an argument. This is a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\"\u003e\u003ccode\u003eResponse\u003c/code\u003e\u003c/a\u003e object, representing what the destination server sent back to us. This object has a built in method, \u003ccode\u003ejson()\u003c/code\u003e, that converts the \u003cem\u003ebody\u003c/em\u003e of the response from JSON to a plain old JavaScript object. The result of \u003ccode\u003ejson()\u003c/code\u003e is returned and made available in the \u003cem\u003esecond\u003c/em\u003e \u003ccode\u003ethen()\u003c/code\u003e. In this example, whatever \u003ccode\u003eresponse.json()\u003c/code\u003e returns will be logged in \u003ccode\u003econsole.log(object)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLet's go ahead and send the example above to our JSON server in the console; once the request is successfully resolved, you should see the following log:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{dogName: \"Byron\", dogBreed: \"Poodle\", id: 6} // Your ID value may be different \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe JSON server is sending back the data we sent, along with a new piece of data, an \u003ccode\u003eid\u003c/code\u003e, created by the server.\u003c/p\u003e\n\u003ch3\u003eWhen Things Go Wrong: Using \u003ccode\u003ecatch()\u003c/code\u003e\n\u003c/h3\u003e\n\u003cp\u003eWhen something goes wrong in a \u003ccode\u003efetch()\u003c/code\u003e request, JavaScript will look down the chain of \u003ccode\u003e.then()\u003c/code\u003e calls for something very similar to a \u003ccode\u003ethen()\u003c/code\u003e called a \u003ccode\u003ecatch()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen something goes wrong in a \u003ccode\u003efetch()\u003c/code\u003e, \u003ccode\u003ecatch()\u003c/code\u003e will be called; this allows us to write code to \"handle\" the error. Say for instance, we forgot to add the HTTP verb to our POST request, and the \u003ccode\u003efetch()\u003c/code\u003e defaults to GET. By including a \u003ccode\u003ecatch()\u003c/code\u003e statement, JavaScript doesn't fail silently:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet formData = {\u003cbr\u003e  dogName: \"Byron\",\u003cbr\u003e  dogBreed: \"Poodle\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// method: \"POST\" is missing from the object below\u003cbr\u003elet configObj = {\u003cbr\u003e  headers: {\u003cbr\u003e    \"Content-Type\": \"application/json\",\u003cbr\u003e    \"Accept\": \"application/json\"\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify(formData)\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efetch(\"http://localhost:3000/dogs\", configObj)\u003cbr\u003e  .then(function(response) {\u003cbr\u003e    return response.json();\u003cbr\u003e  })\u003cbr\u003e  .then(function(object) {\u003cbr\u003e    console.log(object);\u003cbr\u003e  })\u003cbr\u003e  .catch(function(error) {\u003cbr\u003e    alert(\"Bad things! Ragnarők!\");\u003cbr\u003e    console.log(error.message);\u003cbr\u003e  }); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you try the code above in the console from \u003ccode\u003eindex.html\u003c/code\u003e or \u003ccode\u003esample_form.html\u003c/code\u003e, you should receive an alert window pop-up and a logged message:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailed to execute 'fetch' on 'Window': Request with GET/HEAD method cannot have body. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile \u003ccode\u003ecatch()\u003c/code\u003e may not stop \u003cem\u003eall\u003c/em\u003e silent errors, it is useful to have as a way to gracefully handle unexpected results. We can use it, for instance, to display a message in the DOM for a user, rather than leave them with nothing.\u003c/p\u003e\n\u003ch2\u003eChallenge\u003c/h2\u003e\n\u003cp\u003eIt's time to practice writing your own POST request using \u003ccode\u003efetch()\u003c/code\u003e. In \u003ccode\u003eindex.js\u003c/code\u003e, write a function, \u003ccode\u003esubmitData\u003c/code\u003e, that takes two strings as arguments, one representing a user's name and the other representing a user's email.\u003c/p\u003e\n\u003cp\u003eThe first two tests mirror the behavior of the JSON server. As you write your solution, keep the server running to test your code. Open \u003ccode\u003eindex.html\u003c/code\u003e in a browser to gain access to your \u003ccode\u003esubmitData\u003c/code\u003e function in console.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The tests in this lab need access to the \u003ccode\u003efetch()\u003c/code\u003e request inside \u003ccode\u003esubmitData\u003c/code\u003e. In order to give them access, write your solution so that \u003ccode\u003esubmitData\u003c/code\u003e \u003cem\u003ereturns\u003c/em\u003e the \u003ccode\u003efetch()\u003c/code\u003e. This will not change the behavior of your \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eTest 1 - Send Data\u003c/h3\u003e\n\u003cp\u003eIn \u003ccode\u003esubmitData\u003c/code\u003e, write a valid POST request to \u003ccode\u003ehttp://localhost:3000/users\u003c/code\u003e using \u003ccode\u003efetch()\u003c/code\u003e. This request should include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe destination URL\u003c/li\u003e\n\u003cli\u003eHeaders for 'Content-Type' and 'Accept', both set to 'application/json'\u003c/li\u003e\n\u003cli\u003eA body with the name and email passed in as arguments to \u003ccode\u003esubmitData\u003c/code\u003e. These should be assigned to \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eemail\u003c/code\u003e keys within an object. This object should then be stringified.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eTest 2 - Handle the Response\u003c/h3\u003e\n\u003cp\u003eOn a successful POST request, expect the server to respond with a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\"\u003e\u003ccode\u003eResponse\u003c/code\u003e\u003c/a\u003e object. Just like we saw earlier in the dog example, the \u003ccode\u003ebody\u003c/code\u003e property of this response will contain the data from the POST request along with a newly assigned \u003cem\u003eid\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eUse a \u003ccode\u003ethen()\u003c/code\u003e call to access the \u003ccode\u003eResponse\u003c/code\u003e object and use its built-in \u003ccode\u003ejson()\u003c/code\u003e method to parse the contents of the \u003ccode\u003ebody\u003c/code\u003e property. Use a \u003cem\u003esecond\u003c/em\u003e \u003ccode\u003ethen()\u003c/code\u003e to access this newly converted object. From this object, find the new id and append this value to the DOM.\u003c/p\u003e\n\u003cp\u003eIf JSON Server is running and \u003ccode\u003eindex.html\u003c/code\u003e is open in the browser, you can test your code in the console: calling \u003ccode\u003esubmitData()\u003c/code\u003e in the console should cause an id number to appear on the page.\u003c/p\u003e\n\u003ch3\u003eTest 3 - Handle Errors\u003c/h3\u003e\n\u003cp\u003eFor this final test, after the two \u003ccode\u003ethen()\u003c/code\u003e calls on your \u003ccode\u003efetch()\u003c/code\u003e request, add a \u003ccode\u003ecatch()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen writing the callback function for your \u003ccode\u003ecatch()\u003c/code\u003e, expect to receive an object on error with a property, \u003ccode\u003emessage\u003c/code\u003e, containing info about what went wrong. Write code to append this message to the DOM when \u003ccode\u003ecatch()\u003c/code\u003e is called.\u003c/p\u003e\n\u003ch3\u003eTest 4 - Return the Fetch Chain\u003c/h3\u003e\n\u003cp\u003eAn amazing feature of \u003ccode\u003efetch()\u003c/code\u003e is that if you \u003cem\u003ereturn\u003c/em\u003e it, \u003cem\u003eother\u003c/em\u003e functions can tack on \u003cem\u003etheir own\u003c/em\u003e \u003ccode\u003ethen()\u003c/code\u003e and \u003ccode\u003ecatch()\u003c/code\u003e calls. For this lab, you will need to return the \u003ccode\u003efetch()\u003c/code\u003e chain from your \u003ccode\u003esubmitData\u003c/code\u003e function to ensure that the tests run correctly.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this lab, we learned how to use \u003ccode\u003efetch\u003c/code\u003e requests to post data to a server. This allows us to override the default behavior of an HTML \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element and have greater control over the behavior of our form when it is submitted. It also enables to improve our users' experience by rendering content without reloading the page.\u003c/p\u003e\n\u003cp\u003eSpecifically, we learned:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIn order to submit a \u003ccode\u003ePOST\u003c/code\u003e request, we call \u003ccode\u003efetch()\u003c/code\u003e and pass it two arguments: the URL we're submitting the request to, and an object containing details about the request.\u003c/li\u003e\n\u003cli\u003eThis 'configuration' object needs to contain three properties: the \u003ccode\u003emethod\u003c/code\u003e (\"POST\" in this case), \u003ccode\u003eheaders\u003c/code\u003e that provide some information about our request, and the \u003ccode\u003ebody\u003c/code\u003e of the request (i.e., the content we want to post).\u003c/li\u003e\n\u003cli\u003eThe body must be \"stringified\" before it can be passed in the request.\u003c/li\u003e\n\u003cli\u003eJust as with a \u003ccode\u003eGET\u003c/code\u003e request, the \u003ccode\u003ePOST\u003c/code\u003e request returns a \u003ccode\u003eResponse\u003c/code\u003e object that can be accessed and used to update the DOM using chained \u003ccode\u003ethen\u003c/code\u003e calls.\u003c/li\u003e\n\u003cli\u003eIn addition to the \u003ccode\u003ethen\u003c/code\u003es, you can also chain a \u003ccode\u003ecatch()\u003c/code\u003e function that will \"handle\" unsuccessful requests.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith this information, you can now use \u003ccode\u003efetch()\u003c/code\u003e — the browser inside your browser's JavaScript environment — to send both \u003ccode\u003eGET\u003c/code\u003e and \u003ccode\u003ePOST\u003c/code\u003e requests! With this knowledge we're ready to stitch together server updates (reads \u003cstrong\u003eand\u003c/strong\u003e updates) with DOM updating and event handling. We're almost ready to build the \"Simple Liker\" from scratch!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3b88a6ccca7d7eba70d432d3fa2b763e","title":"Static Methods Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-oo-static-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-static-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-static-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-oo-static-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite JavaScript \u003ccode\u003estatic\u003c/code\u003e methods\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we are going to practice writing \u003ccode\u003estatic\u003c/code\u003e methods. In JavaScript,\n\u003cem\u003estatic methods\u003c/em\u003e aren't called on on instances of a class, but are called\ndirectly on a class itself.\u003c/p\u003e\n\n\u003ch3\u003eDeclaring a Static Method\u003c/h3\u003e\n\n\u003cp\u003eTo declare a \u003ccode\u003estatic\u003c/code\u003e method, we write the word \u003ccode\u003estatic\u003c/code\u003e inside the class\ndeclaration directly before a method's name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass StaticMethod {\u003cbr\u003e    static methodName() {\u003cbr\u003e        console.log('My method is static!');\u003cbr\u003e    }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause \u003ccode\u003estatic\u003c/code\u003e methods are called directly on the classes themselves, \u003ccode\u003estatic\u003c/code\u003e\nmethods have no access to data stored in specific objects.\u003c/p\u003e\n\n\u003ch3\u003eCalling a \u003ccode\u003eStatic\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eAs the \u003ccode\u003estatic\u003c/code\u003e method is operating on the class, you call the \u003ccode\u003estatic\u003c/code\u003e method\ndirectly on the class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eClassName.methodName();\u003cbr\u003e// Calls the method explicitly on the class name itself and returns the `static` value\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor \u003ccode\u003estatic\u003c/code\u003e methods, \u003ccode\u003ethis\u003c/code\u003e references the class. This means that you can call\na \u003ccode\u003estatic\u003c/code\u003e method from within another \u003ccode\u003estatic\u003c/code\u003e method of the same class using\n\u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou are going to write three \u003ccode\u003estatic\u003c/code\u003e methods in the \u003ccode\u003eFormatter\u003c/code\u003e class. Write\nyour code in the \u003ccode\u003eindex.js\u003c/code\u003e file. Let the tests guide you through the process.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Write a method \u003ccode\u003estatic capitalize\u003c/code\u003e that takes in a string and capitalizes the\nfirst letter.\u003c/li\u003e\n\u003cli\u003e Write a method \u003ccode\u003estatic sanitize\u003c/code\u003e that takes in a string and removes all\nnon-alphanumeric characters except for dashes, single quotes and spaces.\u003c/li\u003e\n\u003cli\u003e Write a method \u003ccode\u003estatic titleize\u003c/code\u003e that takes in a string and capitalizes all\nwords in a sentence except the, a, an, but, of, and, for, at, by, and from; and\nalways capitalizes the first word.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eStatic\u003c/code\u003e methods are useful ways to create utility methods for your data. If you\nhave operation that you need do perform on a batch of data (say, capitalize all\nof the headlines on your website, as above), \u003ccode\u003estatic\u003c/code\u003e methods are your go-to\ntool. Since they are called on the class but don't have access to individual\nobjects, they are somewhat limited in their scope, but can be very powerful in\nthe correct application.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Static_methods\"\u003eStatic Methods\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb185ec7cb1f375b36ccf6feb29a8bf3c","title":"Stitching Together the Three Pillars","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-stitching-together-the-three-pillars\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-stitching-together-the-three-pillars\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-stitching-together-the-three-pillars/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the three essential pillars of front-end web programming\u003c/li\u003e \u003cli\u003eCause a change to given code so that DOM updating effect is seen\u003c/li\u003e \u003cli\u003eCause a change to given code so that server-side behavior is stubbed in\u003c/li\u003e \u003cli\u003eCause a change to given code so that event listening has an effect\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eKnowing what web programming is and how its elements work together conceptually is an essential first step, but in order to help orient our upcoming lessons, let's see it in action. In this lesson we've provided you a simple social media application called \"Simple Liker.\" You'll see several posts which can be \"liked\" by clicking on the heart...well, they \u003cem\u003ecould\u003c/em\u003e be if the critical code hadn't been commented out. This lesson will guide you in uncommenting the critical code so that you restore the \"like\" functionality. In subsequent lessons, you'll learn the skills needed to create the pieces that you'll stitch together in this lesson.\u003c/p\u003e  \u003cp\u003eAlthough this code-along is structured as a lab, you don't need to do anything to get the tests passing. In fact, if you run the one test, you should see that it's already passing. Instead, you just need to follow along with the instructions and pay attention to how the different parts of the code are working together to create the desired functionality.\u003c/p\u003e  \u003ch3\u003eIdentify the Three Essential Pillars of Front-End Web Programming\u003c/h3\u003e  \u003cp\u003eWe've introduced our three essential pillars of front-end web programming:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eManipulating the Document Object Model (DOM)\u003c/li\u003e \u003cli\u003eRecognizing JS events\u003c/li\u003e \u003cli\u003eCommunicating with the server\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWe also described the interaction that we want to make: \"favoriting\" an item on social media to turn an empty heart to red. Now, let's pull it all together and see how it works by walking through some code.\u003c/p\u003e  \u003ch3\u003eCause a Change to Given Code So That DOM Updating Effect Is Seen\u003c/h3\u003e  \u003cp\u003eMeet our app, Simple Liker! It demos the favoriting action we've talked about and alerts you to what is happening at each step of the process. When all is working as it should, the action looks like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e  \u003cp\u003eGo ahead and open up \u003ccode\u003eindex.html\u003c/code\u003e in your browser. To do this, first go to your terminal and make sure you're in the directory where this README lives. If you're on a Mac, run \u003ccode\u003eopen index.html\u003c/code\u003e and if you're using Windows, run \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e. If that doesn't work, you can open the file directly from Chrome. Choose \u003ccode\u003eOpen file...\u003c/code\u003e from the \u003ccode\u003eFile\u003c/code\u003e menu, navigate to the directory where this README is located, and open the file.\u003c/p\u003e  \u003cp\u003eIf you try clicking one of the \"Like\" buttons on the page, your experience will look something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-01.gif\" alt=\"non-working example of favoriting a post\"\u003e\u003c/p\u003e  \u003cp\u003e... which is, nothing happens. That's because we haven't switched on the working code yet. We're going to go through, step by step, find the code that makes each step work, and demo it to see how it looks in the browser.\u003c/p\u003e  \u003cp\u003eOpen up your \u003ccode\u003edemo.js\u003c/code\u003e file and take a look at everything there. Find the comments that begin with \"Step 1.\" Follow the instructions there to un-comment the code that locates the page element we want — in this case, the heart.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/stitching-together-the-three-pillars/step1.gif\" alt=\"demonstration of un-commenting step one\"\u003e\u003c/p\u003e  \u003cp\u003eOnce you uncomment the line of code and refresh the page, you can use the console to verify that the articleHearts variable contains a nodeList with five elements.\u003c/p\u003e  \u003ch3\u003eCause a Change to Given Code So That Server-Side Behavior Is Stubbed in\u003c/h3\u003e  \u003cp\u003eNext, in your \u003ccode\u003edemo.js\u003c/code\u003e file, find the comments describing Step 2, which sets up the mock server communication (our third pillar):\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/stitching-together-the-three-pillars/step2.gif\" alt=\"demonstration of un-commenting step two\"\u003e\u003c/p\u003e  \u003cp\u003eOnce you've uncommented out the code and refreshed the page, try clicking one of the \"Like\" buttons again. You'll see that it's still not working. That's because we've uncommented the code that mocks our communication with the server, but we haven't yet told JavaScript to listen for the \"click\" event.\u003c/p\u003e  \u003ch3\u003eCause a Change to Given Code So That Event Listening Has an Effect\u003c/h3\u003e  \u003cp\u003eFind Step 3 in the commented code. It's time to bring in the second pillar, events:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/stitching-together-the-three-pillars/step3.gif\" alt=\"demonstration of un-commenting step three\"\u003e\u003c/p\u003e  \u003cp\u003eWe've activated all the parts of our code that stitch together the three pillars of front-end web programming. Let's go back to your browser and see what Simple Liker looks like in action. You should now be able to like and unlike each post.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-stitching-together-the-three-pillars/three-pillars-02.gif\" alt=\"working example of favoriting a post\"\u003e\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe're starting to see how the pieces work together now! Which means we're ready to dive into the individual pillars and learn more about how each one functions. We'll start by reviewing how to manipulate the DOM.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge98ccb36e9aff9c59b41fca644cf67fa","title":"Super Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-class-extensions-super-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-super-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-super-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-class-extensions-super-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice using \u003ccode\u003esuper\u003c/code\u003e to extend child class functionality\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we're going to practice the two most common usages of the \u003ccode\u003esuper\u003c/code\u003e\nkeyword.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Define a \u003ccode\u003eTree\u003c/code\u003e class that will act as our parent.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e- A \u003ccode\u003eTree\u003c/code\u003e instance should take in one parameter when created, \u003ccode\u003especies\u003c/code\u003e,\n      and assign this to a property named \u003ccode\u003especies\u003c/code\u003e.\n    - A \u003ccode\u003eTree\u003c/code\u003e should have a static method, \u003ccode\u003edefinition()\u003c/code\u003e, that returns a short\n      definition of all trees.\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; A tree is a perennial plant with an elongated stem, or trunk, supporting\n    \u0026gt; branches and leaves.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Define a \u003ccode\u003eDeciduous\u003c/code\u003e class that extends \u003ccode\u003eTree\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e- A \u003ccode\u003eDeciduous\u003c/code\u003e instance takes two parameters, \u003ccode\u003especies\u003c/code\u003e and \u003ccode\u003ename\u003c/code\u003e. Use\n      \u003ccode\u003esuper()\u003c/code\u003e in the constructor to use the parent class constructor to assign\n      \u003ccode\u003especies\u003c/code\u003e. After \u003ccode\u003esuper()\u003c/code\u003e, assign the \u003ccode\u003ename\u003c/code\u003e parameter to the a \u003ccode\u003ename\u003c/code\u003e\n      property in the \u003ccode\u003eDeciduous\u003c/code\u003e constructor\n    - Create a static method, \u003ccode\u003edefinition()\u003c/code\u003e, that uses \u003ccode\u003esuper\u003c/code\u003e to access\n      \u003ccode\u003edefinition()\u003c/code\u003e from \u003ccode\u003eTree\u003c/code\u003e and add the following to the provide a specific\n      definition for \u003ccode\u003eDeciduous\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; Deciduous trees shed their leaves annually.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Define a \u003ccode\u003eEvergreen\u003c/code\u003e class that extends \u003ccode\u003eTree\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e- An \u003ccode\u003eEvergreen\u003c/code\u003e instance takes two parameters, \u003ccode\u003especies\u003c/code\u003e and \u003ccode\u003ename\u003c/code\u003e. Use\n      \u003ccode\u003esuper()\u003c/code\u003e in the constructor to use the parent class constructor to assign\n      \u003ccode\u003especies\u003c/code\u003e, then assign \u003ccode\u003ename\u003c/code\u003e to a property in the \u003ccode\u003eEvergreen\u003c/code\u003e\n      constructor\n    - Create a static method, \u003ccode\u003edefinition()\u003c/code\u003e, that uses \u003ccode\u003esuper\u003c/code\u003e to access\n      \u003ccode\u003edefinition()\u003c/code\u003e from \u003ccode\u003eTree\u003c/code\u003e and add the following to the provide a specific\n      definition for \u003ccode\u003eEvergreen\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; Evergreens keep their leaves all year round.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static#Examples\"\u003eStatic Methods\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/beginners-guide-to-mobile-web-development/super-and-extends-in-javascript-es6-understanding-the-tough-parts-6120372d3420\"\u003e“Super” and “Extends” In JavaScript ES6 - Understanding The Tough Parts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd797de7ff47f18263fa1046ea48850ab","title":"The JavaScript DOMContentLoaded Event","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-domcontentloaded\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-domcontentloaded/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-domcontentloaded\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-domcontentloaded/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUnderstand why \u003ccode\u003eDOMContentLoaded\u003c/code\u003e is important\u003c/li\u003e\n\u003cli\u003eSet up an event on \u003ccode\u003eDOMContentLoaded\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eAn important part of working with JavaScript is ensuring that your code runs at the right time. Every now and then, you may have to add some extra code to ensure your code doesn't run before the page is ready. Many factors go into determining the \"right time,\" but there are two events that represent two particularly important milestones in terms of page load:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event fires when your page's DOM is fully parsed from the underlying html\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eload\u003c/code\u003e event fires when a resource and all its dependent resources (including CSS and JavaScript) have finished loading\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn this lesson, we'll be focusing on \u003ccode\u003eDOMContentLoaded\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eWhy is DOMContentLoaded Important?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event is the browser's built-in way to indicate when a page's html is loaded into the DOM. It isn't possible to manipulate HTML elements that haven't rendered yet, so trying to manipulate the DOM before the page fully loads can potentially lead to problems.\u003c/p\u003e\n\u003cp\u003eWe need to make sure to wait until \u003cem\u003eafter\u003c/em\u003e the \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event is triggered to safely execute our code. By creating an event listener, we can keep our code from immediately firing when \u003ccode\u003eindex.js\u003c/code\u003e is loaded.\u003c/p\u003e\n\u003ch2\u003eSet Up an Event Listener for DOMContentLoaded\u003c/h2\u003e\n\u003cp\u003eAs always, \u003ccode\u003eaddEventListener\u003c/code\u003e takes a \u003ccode\u003eString\u003c/code\u003e with the name of the event and a \u003cem\u003ecallback function\u003c/em\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"DOMContentLoaded\", function() {\u003cbr\u003e  console.log(\"The DOM has loaded\");\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you put the above code in \u003ccode\u003eindex.js\u003c/code\u003e, 'The DOM has loaded' will not be logged immediately. In fact, you can confirm this yourself by putting a second \u003ccode\u003econsole.log()\u003c/code\u003e \u003cem\u003eoutside\u003c/em\u003e of the event listener callback:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"DOMContentLoaded\", function() {\u003cbr\u003e  console.log(\"The DOM has loaded\");\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003econsole.log(\u003cbr\u003e  \"This console.log() fires when index.js loads - before DOMContentLoaded is triggered\"\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eCode your solution in \u003ccode\u003eindex.js\u003c/code\u003e. First, set up a \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event listener to detect when the HTML page has loaded and the document is ready to be manipulated. Use the event's callback function to target the paragraph element with \u003ccode\u003eid=\"text\"\u003c/code\u003e and replace the text with \"This is really cool!\"\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote:\u003c/em\u003e Using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText\"\u003e\u003ccode\u003einnerText\u003c/code\u003e\u003c/a\u003e property to modify DOM element content will not work for this lab. Use \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\"\u003e\u003ccode\u003etextContent\u003c/code\u003e\u003c/a\u003e or \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\"\u003e\u003ccode\u003einnerHTML\u003c/code\u003e\u003c/a\u003e instead.\u003c/p\u003e\n\u003cp\u003eTest your event in the browser to confirm that it is working.\u003c/p\u003e\n\u003ch2\u003eDOMContentLoaded Does Not Wait For Stylesheets and Images to Load\u003c/h2\u003e\n\u003cp\u003eIt is important to note that the \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event fires once the initial HTML document finishes loading, but does not wait for CSS stylesheets or images to load. In situations where you need \u003cem\u003eeverything\u003c/em\u003e to completely load, use the \u003ccode\u003eload\u003c/code\u003e event instead.\u003c/p\u003e\n\u003cp\u003eWhile both will work, it is often the case that we only need the HTML content to fully load in order to execute our JavaScript. Since images can take some time to load, using the \u003ccode\u003eload\u003c/code\u003e event means visitors of a webpage may see your webpage in its original state for a couple of seconds before any JavaScript fires and updates the DOM.\u003c/p\u003e\n\u003cp\u003eFor a comparison of the difference between \u003ccode\u003eDOMContentLoaded\u003c/code\u003e and \u003ccode\u003eload\u003c/code\u003eed events, \u003ca href=\"http://web.archive.org/web/20150405114023/http://ie.microsoft.com/testdrive/HTML5/DOMContentLoaded/Default.html\"\u003echeck out this example\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eJavaScript provides us the powerful ability to update webpage content without refreshing. We can, for instance, have a page with some basic HTML structure and use JavaScript to fill in the content, enabling the possibility of dynamic webpages.\u003c/p\u003e\n\u003cp\u003eThis sort of action, however, will only work if the HTML content is loaded on the page before the JavaScript is executed. The \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event ensures that our JavaScript code is being executed immediately after the HTML is finished loading.\u003c/p\u003e\n\u003ch2\u003eAddendum\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event is now a widely accepted standard. Modern web development, however, provides us with additional choices for setting up when we want our JavaScript to execute. For example, HTML5 now has a \u003ca href=\"https://www.w3schools.com/tags/att_script_defer.asp\"\u003e\u003ccode\u003edefer\u003c/code\u003e\u003c/a\u003e attribute for use in \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tags:\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003escript\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003esrc\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eindex.js\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003edefer\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003escript\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThis functions in a similar way to \u003ccode\u003eDOMContentLoaded\u003c/code\u003e: the JavaScript code stored in \u003ccode\u003eindex.js\u003c/code\u003e will be loaded up but won't execute until the HTML page completely loads.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded\"\u003eDOMContentLoaded\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.kirupa.com/html5/running_your_code_at_the_right_time.htm\"\u003eRunning Your Code at the Right Time\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g10967eb85f40d10bafcbf4713c87d586","title":"The Lost Context Bug Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-the-lost-context-bug\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-the-lost-context-bug/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-the-lost-context-bug\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-the-lost-context-bug/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eState the cause of the lost context bug\u003c/li\u003e\n\u003cli\u003eUse a \u003ccode\u003ethisArg\u003c/code\u003e to avoid the lost context bug\u003c/li\u003e\n\u003cli\u003eUse a closure to regain access to the lost context\u003c/li\u003e\n\u003cli\u003eUse an arrow function expression to create a function without its own\ncontext\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lessons we've learned about record-oriented programming and\nhow, by using methods like \u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003eapply\u003c/code\u003e, and \u003ccode\u003ebind\u003c/code\u003e, we can change the\ndefault context of a function from the global context (\u003ccode\u003ewindow\u003c/code\u003e in the\nbrowser, \u003ccode\u003eglobal\u003c/code\u003e in NodeJS) as we see fit. That's an awesome power.\u003c/p\u003e\n\n\u003cp\u003eHowever, sometimes the rules of function execution interact in a way that leads\nto \u003cstrong\u003e\u003cem\u003eone particularly surprising bug\u003c/em\u003e\u003c/strong\u003e: \"the lost context bug.\" It's\nimpossible to list \u003cem\u003eall\u003c/em\u003e the places where this bug could be triggered, but if\nyou encounter something \"strange\" like what we describe below, you'll know how\nto proceed.\u003c/p\u003e\n\n\u003ch2\u003eScenario\u003c/h2\u003e\n\n\u003cp\u003eIt's the All-Father Odin's birthday. His sons, Thor and Loki, would like to\nprint him a birthday greeting using JavaScript. They know how to define\n\u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003efunction\u003c/code\u003es, so they've written a simple function that takes an\nconfiguration \u003ccode\u003eObject\u003c/code\u003e as the \u003cem\u003eexecution context\u003c/em\u003e and prints a JavaScript\ngreeting card.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eObject\u003c/code\u003e looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo display this, they wrote the following function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e\u003cbr\u003e    this.signatories.forEach(function(signatory){\u003cbr\u003e        let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis doesn't work as planned. They get an error like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003e/Users/heimdall/git_checkouts/fi/jscontext/unnamed/card.js:20\u003cbr\u003e        let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e                                     ^\u003cbr\u003e\u003cbr\u003eTypeError: Cannot read property 'Thor' of undefined\u003cbr\u003e    at /Users/heimdall/git_checkouts/fi/jscontext/unnamed/card.js:20:38\u003cbr\u003e    at Array.forEach ()\u003cbr\u003e    at Object.printCard (/Users/heimdall/git_checkouts/fi/jscontext/unnamed/card.js:19:22)\u003cbr\u003e    at Object. (/Users/heimdall/git_checkouts/fi/jscontext/unnamed/card.js:25:11)\u003cbr\u003e    at Module._compile (internal/modules/cjs/loader.js:799:30)\u003cbr\u003e    at Object.Module._extensions..js (internal/modules/cjs/loader.js:810:10)\u003cbr\u003e    at Module.load (internal/modules/cjs/loader.js:666:32)\u003cbr\u003e    at tryModuleLoad (internal/modules/cjs/loader.js:606:12)\u003cbr\u003e    at Function.Module._load (internal/modules/cjs/loader.js:598:3)\u003cbr\u003e    at Function.Module.runMain (internal/modules/cjs/loader.js:862:12)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat is going on here?\" A quick debug shows that there \u003cstrong\u003every much\u003c/strong\u003e is a\nproperty called \u003ccode\u003e\"Thor\"\u003c/code\u003e in \u003ccode\u003econfiguration.closing\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econsole.log(configuration.closing.Thor) //=\u0026gt; \"Admiration, respect, and love\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere is one of the most boggling problems in JavaScript: a bug created in the\nshadow of the all-too-easy-to-forget fact that function expressions and\ndeclarations \u003cstrong\u003e\u003cem\u003einside\u003c/em\u003e\u003c/strong\u003e of other functions \u003cstrong\u003e\u003cem\u003edo not automatically\u003c/em\u003e\u003c/strong\u003e use the\nsame context as the outer function. Think about the rules of implicit context\nassignment before reading on.\u003c/p\u003e\n\n\u003ch2\u003eDebugging: Discovering the Nature of the Lost Context Bug\u003c/h2\u003e\n\n\u003cp\u003eAs a first step in getting this code working, let's add some \u003ccode\u003econsole.log()\u003c/code\u003e\ncalls so we can see what \u003ccode\u003ethis\u003c/code\u003e is.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e\u003cbr\u003e    console.log(\"Debug Before forEach: \" + this)\u003cbr\u003e    this.signatories.forEach(function(signatory){\u003cbr\u003e        console.log(\"Debug Inside: \" + this)\u003cbr\u003e        // let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eProduces:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003eDebug Before forEach: [object Object]\u003cbr\u003eDebug Inside: [object Window]\u003cbr\u003eDebug Inside: [object Window]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003econsole.log()\u003c/code\u003e statements reveal the bug. \u003cem\u003eInside\u003c/em\u003e the \u003ccode\u003eforEach\u003c/code\u003e, the\nexecution context \u003cstrong\u003eis not\u003c/strong\u003e the \u003ccode\u003econfiguration\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e we used as a \u003ccode\u003ethis\u003c/code\u003e\nargument when calling the function \u003ccode\u003eprintCard\u003c/code\u003e. Instead, the \u003ccode\u003ethis\u003c/code\u003e \u003cem\u003einside\u003c/em\u003e\nthe function expression passed to \u003ccode\u003eforEach\u003c/code\u003e is the global object (\u003ccode\u003ewindow\u003c/code\u003e or\n\u003ccode\u003eglobal\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eRemember the rules of function invocation. A function defaults to getting the\nglobal scope as \u003cem\u003eexecution context\u003c/em\u003e when it is called without \"anything to the\nleft of a dot.\". It \u003cstrong\u003edoes not\u003c/strong\u003e get its parent function's \u003cem\u003eexecution context\u003c/em\u003e\nautomatically. There are many ways for programmers to solve this problem. The\nthree most common are:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ePass a \u003ccode\u003ethisArg\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eUse a closure\u003c/li\u003e\n\u003cli\u003eUse (something new) the arrow function expression\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eSolution 1:  Use a \u003ccode\u003ethisArg\u003c/code\u003e to avoid the lost context bug\u003c/h2\u003e\n\n\u003cp\u003ePer the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"\u003eforEach documentation\u003c/a\u003e, we could pass a \u003ccode\u003ethisArg\u003c/code\u003e argument to\n\u003ccode\u003eforEach\u003c/code\u003e as its second argument, after the function expression. This\nexplicitly provides a context for the function used inside \u003ccode\u003eforEach\u003c/code\u003e. Doing so\nfixes our bug.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: This pattern works for \u003ccode\u003eforEach\u003c/code\u003e as well as \u003ccode\u003emap\u003c/code\u003e and\nother collection-processing methods. Consult their documentation to\nsee where a \u003ccode\u003ethisArg\u003c/code\u003e is expected.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e\u003cbr\u003e    this.signatories.forEach(function(signatory){\u003cbr\u003e        let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    }, this)\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\u003cbr\u003e\u003cbr\u003e# Prints out:\u003cbr\u003e# Happy Birthday, Odin One-Eye!\u003cbr\u003e# From Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e#\u003cbr\u003e# Love,\u003cbr\u003e# Admiration, respect, and love, Thor\u003cbr\u003e# Your son, Loki\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the call to \u003ccode\u003eforEach\u003c/code\u003e, we tell it to use (for its own context) the context\nthat \u003ccode\u003eprintCard\u003c/code\u003e has as \u003ccode\u003eprintCard\u003c/code\u003e's \u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA slight variation on this idea would be to invoke \u003ccode\u003ebind\u003c/code\u003e on the function\nexpression in the \u003ccode\u003eforEach\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e    let contextBoundForEachExpr = function(signatory){\u003cbr\u003e        let message = `${this.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    }.bind(this)\u003cbr\u003e\u003cbr\u003e    this.signatories.forEach(contextBoundForEachExpr)\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\u003cbr\u003e/*\u003cbr\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003eAdmiration, respect, and love, Thor\u003cbr\u003eYour son, Loki\u003cbr\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the \"Context Lab\" we used this approach to make sure that the reduce\nfunction in \u003ccode\u003eallWagesFor\u003c/code\u003e worked. Take a look at the implementation and see how\n\u003ccode\u003ebind\u003c/code\u003e-ing \u003ccode\u003ereduce\u003c/code\u003e saved you from falling into this bug \u003cem\u003eand\u003c/em\u003e let you use the\npowerful \u003ccode\u003ereduce\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch2\u003eSolution 2: Use a Closure to Regain Access to the Lost Context\u003c/h2\u003e\n\n\u003cp\u003eIn the previous section, we noted that we were going to take the \u003ccode\u003ethis\u003c/code\u003e that\n\u003ccode\u003eprintCard\u003c/code\u003e has access to and re-pass it either as a \u003ccode\u003ethisArg\u003c/code\u003e to \u003ccode\u003eforEach\u003c/code\u003e\n\u003cstrong\u003eor\u003c/strong\u003e provide it as the context for \u003ccode\u003ebind\u003c/code\u003e. Since we have an ability to \"point\nto\" that context, we could assign that value to a variable and leverage\nfunction-level scope and \u003cem\u003eclosures\u003c/em\u003e to regain access to the outer context.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e\u003cbr\u003e    let outerContext = this\u003cbr\u003e\u003cbr\u003e    this.signatories.forEach(function(signatory){\u003cbr\u003e        let message = `${outerContext.closing[signatory]}, ${signatory}`\u003cbr\u003e        console.log(message)\u003cbr\u003e    })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\u003cbr\u003e/*\u003cbr\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003eAdmiration, respect, and love, Thor\u003cbr\u003eYour son, Loki\u003cbr\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMany JavaScript developers define the variable we called \u003ccode\u003eouterContext\u003c/code\u003e by the\nname \u003ccode\u003eself\u003c/code\u003e which sure is confusing for Ruby programmers!  In any case, by\nusing an assignment with \u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003evar\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e, we put the original context\nwithin the function-level scope that the inner function encloses as a closure.\nThis means inside the inner function, we can get \"back\" to the outer function's\ncontext. That's solution number two.\u003c/p\u003e\n\n\u003cp\u003eWhat we would \u003cem\u003ereally\u003c/em\u003e like is for there to be a way to tell the \u003ccode\u003efunction\u003c/code\u003e\ninside of \u003ccode\u003eforEach\u003c/code\u003e to\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cem\u003eNot\u003c/em\u003e declare its own context \u003cstrong\u003ebut also\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eNot\u003c/em\u003e require us to do some extra work with using \u003ccode\u003ebind\u003c/code\u003e or a \u003ccode\u003ethisArg\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn ES6, JavaScript gave us an answer: the \"arrow function expression.\" This is\nour third and most-preferred option. Nevertheless, you will see all the other\napproaches used in framework code (e.g. React) and in other codebases.\u003c/p\u003e\n\n\u003ch2\u003eSolution 3: Use an Arrow Function Expression to Create a Function Without Its Own Context\u003c/h2\u003e\n\n\u003cp\u003eThe arrow function expression (often simply called an \"arrow function\") is yet\nanother way of writing a function expression. They look different from \"old\nstyle\" function expressions, but the \u003cstrong\u003e\u003cem\u003emost important difference\u003c/em\u003e\u003c/strong\u003e is that\nthe arrow function is \u003cstrong\u003e\u003cem\u003eautomatically bound\u003c/em\u003e\u003c/strong\u003e to its parent's context and\ndoes not create a context of its own.\u003c/p\u003e\n\n\u003cp\u003eMany programmers think arrow functions are much more predictable since they\ndo not create their own \u003ccode\u003ethis\u003c/code\u003e during execution and instead \"absorb\" the\ncontext of their enclosing environment.\u003c/p\u003e\n\n\u003cp\u003eSince \u003cem\u003ethe whole point\u003c/em\u003e of an arrow function is to \u003cstrong\u003e\u003cem\u003enot have its own\nexecution context\u003c/em\u003e\u003c/strong\u003e, we should not use \u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003ebind\u003c/code\u003e, or \u003ccode\u003eapply\u003c/code\u003e when\nexecuting them. Most of the time, you'll see them used like anonymous functions\npassed as first-class data into another function See the \u003ccode\u003ereduce\u003c/code\u003e example\nbelow. It's typical.\u003c/p\u003e\n\n\u003cp\u003eAn arrow function looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// The let greeter is merely the assignment, the expression begins at `(`\u003cbr\u003elet greeter = (nameToGreet) =\u0026gt; {\u003cbr\u003e    let message = `Good morning ${nameToGreet}`\u003cbr\u003e    console.log(message)\u003cbr\u003e    return \"Greeted: \" + nameToGreet\u003cbr\u003e}\u003cbr\u003elet result = greeter(\"Max\") //=\u0026gt; \"Greeted: Max\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich, excluding context-switching differences, is the exact same as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet greeter = function(nameToGreet) {\u003cbr\u003e    let message = `Good morning ${nameToGreet}`\u003cbr\u003e    console.log(message)\u003cbr\u003e    return \"Greeted: \" + nameToGreet\u003cbr\u003e}.bind(this)\u003cbr\u003elet result = greeter(\"Max Again\") //=\u0026gt; \"Greeted: Max Again\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause arrow functions are \u003cem\u003eso often used\u003c/em\u003e to take a value, do a single\noperation with it, and return the result, they have two shortcuts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you pass only one argument, you don't have to wrap the single parameter in \u003ccode\u003e()\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIf there is only one expression, you don't need to wrap it in \u003ccode\u003e{}\u003c/code\u003e and the result of that expression is automatically returned.\u003c/li\u003e\n\u003cli\u003eAnti-Shortcut: If you \u003cem\u003eDO\u003c/em\u003e use \u003ccode\u003e{}\u003c/code\u003e, you must explicitly \u003ccode\u003ereturn\u003c/code\u003e the return value\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThus Thor and Loki can fix their problem and wish their father a happy birthday\nmost elegantly with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003elet configuration = {\u003cbr\u003e    frontContent: \"Happy Birthday, Odin One-Eye!\",\u003cbr\u003e    insideContent: \"From Asgard to Nifelheim, you're the best all-father ever.\\n\\nLove,\",\u003cbr\u003e    closing: {\u003cbr\u003e        \"Thor\": \"Admiration, respect, and love\",\u003cbr\u003e        \"Loki\": \"Your son\"\u003cbr\u003e    },\u003cbr\u003e    signatories: [\u003cbr\u003e        \"Thor\",\u003cbr\u003e        \"Loki\"\u003cbr\u003e    ]\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet printCard = function() {\u003cbr\u003e    console.log(this.frontContent)\u003cbr\u003e    console.log(this.insideContent)\u003cbr\u003e    // Wow! Elegant! And notice the arrow function's `this` is the same\u003cbr\u003e    // this that printCard has by virtue of configuration being passed\u003cbr\u003e    // in as a thisArg\u003cbr\u003e    this.signatories.forEach(s =\u0026gt; console.log(`${this.closing[s]}, ${s}`)\u003cbr\u003e    )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eprintCard.call(configuration)\u003cbr\u003e/* OUTPUT:\u003cbr\u003eHappy Birthday, Odin One-Eye!\u003cbr\u003eFrom Asgard to Nifelheim, you're the best all-father ever.\u003cbr\u003e\u003cbr\u003eLove,\u003cbr\u003eAdmiration, respect, and love, Thor\u003cbr\u003eYour son, Loki\u003cbr\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eYou've now learned how to both spot and how to counteract the lost context bug\nusing some very interesting tools. We think of this as a way to help protect\nyou as you start to build your own applications.\u003c/p\u003e\n\n\u003cp\u003eThe arrow function expression that we introduced here is a very important piece\nof syntax. While it lets us type less, and \u003cem\u003eyes\u003c/em\u003e that is a very good thing, its\nmost important feature is that \u003cstrong\u003e\u003cem\u003eit carries its parent's context as its\nown\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith this knowledge, we think you've learned all the skills you're going to\nneed in order to build your own JavaScript library. Enjoy the challenge!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"\u003eforeach\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"\u003eArrow Function\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#No_separate_this\"\u003eMDN On Why Arrow Functions Help Us leverage \u003ccode\u003ethis\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3445ade6edd7760717e72f006261da10","title":"Tic-Tac-Toe with AI","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ttt-with-ai-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ttt-with-ai-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ttt-with-ai-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eBuild a command-line interface (CLI).\u003c/li\u003e \u003cli\u003eCreate a domain model with multiple relating and collaborating objects.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eThe goal of this project is to build a version of Tic-tac-toe with 0-, 1-, and 2-player modes:   - A 0-player game has two computer players playing against each other with no interaction from the user.   - A 1-player game has a human playing against a computer.   - A 2-player game has two human players.\u003c/p\u003e  \u003cp\u003eYou'll be implementing Tic-tac-toe using multiple objects that relate and collaborate, including separate classes for human players and computer players. The computer player class will have some sort of artificial intelligence or logic to make move decisions. Finally, you'll wrap all of this up in a CLI.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eBE CAREFUL\u003c/strong\u003e While you \u003cem\u003emight\u003c/em\u003e be able to re-use some of your code that worked in previous labs, the expectations in \u003cem\u003ethis\u003c/em\u003e lab are higher! This is true to real-life development as well: as our programs get more sophisticated, the code we used to rely on is no longer appropriate.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eWorking together\u003c/h2\u003e  \u003cp\u003eWorking on a software project with another person is not something to be taken lightly. While you are a fantastic solo coder, software development is often a collaborative activity. Just like anything else, there is skill in collaborating on code. In the end, collaborating with another person boils down to three different styles:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ePair - Pair the entire time working linearly together\u003c/li\u003e \u003cli\u003ePass - Each person completes 1 requirement and then passes the project to the other person\u003c/li\u003e \u003cli\u003eParallel - work on different parts at the same time by agreeing on interfaces and stubs and meeting in the middle  \u003cul\u003e \u003cli\u003ePerson A codes the board and the human player class\u003c/li\u003e \u003cli\u003ePerson B creates the game engine, expecting a working board and player with stubs\u003c/li\u003e \u003cli\u003ePerson A creates the computer player\u003c/li\u003e \u003cli\u003eWork together on the AI (It's hard)\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eRemember! The goal at The Flatiron School is not to do, it is to \u003cem\u003elearn\u003c/em\u003e. Make sure you have worked in all three styles of collaboration. We want you to learn how the different styles work. The most important part is that together you and your partner understand every piece of the code.\u003c/p\u003e  \u003ch2\u003eRequirements\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePassing Unit Tests\u003c/li\u003e \u003cli\u003e0, 1, or 2 player Tic-tac-toe.\u003c/li\u003e \u003cli\u003eCommand Line Interface\u003c/li\u003e \u003cli\u003eComputer AI\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eProject Structure\u003c/h2\u003e \u003cpre\u003e\u003ccode\u003e├── Gemfile\u003cbr\u003e├── Gemfile.lock\u003cbr\u003e├── README.md\u003cbr\u003e├── Rakefile\u003cbr\u003e├── bin\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── tictactoe\u003cbr\u003e├── config\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── environment.rb\u003cbr\u003e├── lib\u003cbr\u003e    ├── players\u003cbr\u003e \u0026nbsp;\u0026nbsp;     ├── computer.rb\u003cbr\u003e \u0026nbsp;\u0026nbsp;     └── human.rb\u003cbr\u003e    ├── board.rb\u003cbr\u003e    ├── game.rb\u003cbr\u003e \u0026nbsp;\u0026nbsp; └── player.rb\u003cbr\u003e└── spec\u003cbr\u003e    ├── 01_board_spec.rb\u003cbr\u003e    ├── 02_player_spec.rb\u003cbr\u003e    ├── 03_human_player_spec.rb\u003cbr\u003e    ├── 04_game_spec.rb\u003cbr\u003e    ├── 05_computer_player_spec.rb\u003cbr\u003e    └── spec_helper.rb \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003e\n\u003ccode\u003eGemfile\u003c/code\u003e and \u003ccode\u003econfig/environment.rb\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eThis project is supported by Bundler and includes a \u003ccode\u003eGemfile\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eRun \u003ccode\u003ebundle install\u003c/code\u003e before getting started on the project.\u003c/p\u003e  \u003cp\u003eAs this project has quite a few files, an \u003ccode\u003eenvironment.rb\u003c/code\u003e is included that loads all the code in your project along with Bundler. You do not ever need to edit this file. When you see \u003ccode\u003erequire_relative '../config/environment'\u003c/code\u003e, as in \u003ccode\u003ebin/tictactoe\u003c/code\u003e, that is how your environment and code are loaded.\u003c/p\u003e  \u003ch4\u003e\n\u003ccode\u003elib\u003c/code\u003e - Tic-tac-toe models\u003c/h4\u003e  \u003cp\u003eYou will be implementing Tic-tac-toe through a domain model that uses multiple classes to encapsulate the different logical components and units in Tic-tac-toe.\u003c/p\u003e  \u003ch5\u003e\n\u003ccode\u003eboard.rb\u003c/code\u003e - \u003ccode\u003eBoard\u003c/code\u003e\n\u003c/h5\u003e  \u003cp\u003eThe \u003ccode\u003eBoard\u003c/code\u003e class represents the data and logic of a Tic-tac-toe game board. It has a property, \u003ccode\u003ecells\u003c/code\u003e, that stores the data of the state of the board in an array. The \u003ccode\u003e#reset!\u003c/code\u003e method can reset the state of the cells to what a board should look like at the start of a game, an array with 9 \u003ccode\u003e\" \"\u003c/code\u003e elements.\u003c/p\u003e  \u003cp\u003eWhen a board is initialized, it should start with cells for a new game of Tic-tac-toe. You can and should use \u003ccode\u003e#reset!\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eA board can print its current state with the \u003ccode\u003e#display\u003c/code\u003e method.\u003c/p\u003e  \u003cp\u003eYou'll also build a \u003ccode\u003e#position\u003c/code\u003e method that takes in the user's input in the form of 1-9 strings like \"2\" or \"9\" and looks up the value of the cells at the correct index from the array's perspective. All other methods will take input in the user's perspective of 1-9 strings and use \u003ccode\u003e#position\u003c/code\u003e to look up the value according to the cells' array index.\u003c/p\u003e  \u003cp\u003eSimilarly, you're going to build an \u003ccode\u003e#update\u003c/code\u003e method that represents updating the board when a player makes a move. This method will take two arguments, the first will be the position the user wants to occupy in the form of 1-9 strings that you will need to convert to the board cells' array index, along with the player object making the move. When you update the appropriate index in the cells, you will set it equal to the token of the player object by calling the \u003ccode\u003e#token\u003c/code\u003e method on the player.\u003c/p\u003e  \u003cp\u003eFinally, a board can return values based on its state such as \u003ccode\u003e#full?\u003c/code\u003e when entirely occupied with \"X\" and \"O\"s and a \u003ccode\u003e#turn_count\u003c/code\u003e based on how many positions in the cells array are filled. \u003ccode\u003e#taken?\u003c/code\u003e will return true or false for an individual position. \u003ccode\u003e#valid_move?\u003c/code\u003e will ensure that moves are between 1-9 and not taken.\u003c/p\u003e  \u003ch5\u003e\n\u003ccode\u003eplayer.rb\u003c/code\u003e - \u003ccode\u003ePlayer\u003c/code\u003e\n\u003c/h5\u003e  \u003cp\u003eThe \u003ccode\u003ePlayer\u003c/code\u003e class is not actually a valid player of Tic-tac-toe but rather a root class that will act as an inheritance point for actual player classes such as \u003ccode\u003eHuman \u0026lt; Player\u003c/code\u003e and \u003ccode\u003eComputer \u0026lt; Player\u003c/code\u003e. The \u003ccode\u003ePlayer\u003c/code\u003e root class will define only the most basic properties of a player, that they have a \u003ccode\u003etoken\u003c/code\u003e property that can be set upon initialization.\u003c/p\u003e  \u003cp\u003eEvery player subclass will implement a \u003ccode\u003e#move\u003c/code\u003e method that represents how that type of player makes a move in Tic-tac-toe.\u003c/p\u003e  \u003ch5\u003e'players/human.rb' - \u003ccode\u003ePlayers::Human\u003c/code\u003e\n\u003c/h5\u003e  \u003cp\u003eDefine a class \u003ccode\u003eHuman\u003c/code\u003e that inherits from \u003ccode\u003ePlayer\u003c/code\u003e. This class should be namespaced inside the module \u003ccode\u003ePlayers\u003c/code\u003e because the \u003ccode\u003ehuman.rb\u003c/code\u003e file is inside the \u003ccode\u003eplayers/\u003c/code\u003e directory. This keeps our code nice and tidy.\u003c/p\u003e  \u003cp\u003eThe human player must implement a \u003ccode\u003e#move\u003c/code\u003e method that takes in a \u003ccode\u003eboard\u003c/code\u003e argument and allows a human player to enter a move via the CLI. The method should return the value the user enters. Even though the method accepts a \u003ccode\u003eboard\u003c/code\u003e argument, it does not need to use it.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eNote on namespacing: You'll notice here that if we do \u003ccode\u003ePlayers::Human \u0026lt; Player\u003c/code\u003e our inheritance won't function properly. This is because the \u003ccode\u003ePlayers\u003c/code\u003e module is not yet defined. So to do this, we'll need to do: \u003ccode\u003eruby module Players   class Human \u0026lt; Player     # your code here   end end \u003c/code\u003e Now when you call your Human class, you'll have to call it inside its name space with \u003ccode\u003ePlayers::Human\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch5\u003e\n\u003ccode\u003egame.rb\u003c/code\u003e - \u003ccode\u003eGame\u003c/code\u003e\n\u003c/h5\u003e  \u003cp\u003eThe \u003ccode\u003eGame\u003c/code\u003e class is the main model of the application and represents a singular instance of a Tic-tac-toe session.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eA game has one \u003ccode\u003eBoard\u003c/code\u003e through its \u003ccode\u003eboard\u003c/code\u003e property.\u003c/li\u003e \u003cli\u003eA game has two \u003ccode\u003ePlayer\u003c/code\u003es stored in a \u003ccode\u003eplayer_1\u003c/code\u003e and \u003ccode\u003eplayer_2\u003c/code\u003e property.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003ccode\u003eBoard\u003c/code\u003e and \u003ccode\u003ePlayer\u003c/code\u003e do not directly relate to the \u003ccode\u003eGame\u003c/code\u003e but do collaborate with each other through arguments.\u003c/p\u003e  \u003cp\u003eBeyond providing relationships with players and a board, the \u003ccode\u003eGame\u003c/code\u003e instance must also provide the basic game runtime and logic. These methods relate to the state of the game such as \u003ccode\u003e#current_player\u003c/code\u003e, \u003ccode\u003e#won?\u003c/code\u003e, and \u003ccode\u003e#winner\u003c/code\u003e. The other methods relate to managing a game, like \u003ccode\u003e#start\u003c/code\u003e, \u003ccode\u003e#play\u003c/code\u003e, and \u003ccode\u003e#turn\u003c/code\u003e. The test suite describes the method requirements.\u003c/p\u003e  \u003ch5\u003e'players/computer.rb' - \u003ccode\u003ePlayers::Computer\u003c/code\u003e\n\u003c/h5\u003e  \u003cp\u003eDefine a class \u003ccode\u003ePlayers::Computer\u003c/code\u003e that represents a computer player of Tic-tac-toe. Implement a \u003ccode\u003e#move\u003c/code\u003e method that accepts a board and returns the move the computer wants to make in the form of a 1-9 string. How the computer decides to make that move is up to you but it must be capable of returning a valid move at some point.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef move(board)\u003cbr\u003e  \"1\"\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eReturns a valid move for the first move but after that your program will go into an infinite loop because the computer will constantly try to occupy the \u003ccode\u003e\"1\"\u003c/code\u003e position in the board even though it is already occupied. So don't do that.\u003c/p\u003e  \u003cp\u003eThink about the levels of intelligence you can build into this method. Start with the simplest level of intelligence, and get more and more complicated. Each step of the way you should have a working computer player though.\u003c/p\u003e  \u003cp\u003eRemember, Tic-tac-toe when played perfectly is unwinnable. You should strive to build computer logic that when the computer plays, the game is unwinnable. You can hardcode your logic, things like \"On turn 1 always try to go in the middle if you can\" and if not \"try to go in a corner\" or any logic tree you can think of - there is an algorithm called Min/Max, but it's going to be hard to implement given our current implementation of a Game, so we recommend building something that's a more colloquial or condition-based algorithm.\u003c/p\u003e  \u003ch4\u003e\u003ccode\u003ebin/tictactoe\u003c/code\u003e\u003c/h4\u003e  \u003cp\u003eThe requirements of your CLI are as follows, free for you to implement however you see fit as we provide no tests against the CLI.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eGreet the user with a message.\u003c/li\u003e \u003cli\u003ePrompt the user for what kind of game they want to play, 0,1, or 2 player.\u003c/li\u003e \u003cli\u003eAsk the user for who should go first and be \"X\".\u003c/li\u003e \u003cli\u003eUse the input to correctly initialize a \u003ccode\u003eGame\u003c/code\u003e with the appropriate player types and token values.\u003c/li\u003e \u003cli\u003eWhen the game is over, the CLI should prompt the user if they would like to play again and allow them to choose a new configuration for the game as described above. If the user doesn't want to play again, exit the program.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou can implement this logic within the \u003ccode\u003ebin/tictactoe\u003c/code\u003e directly or encapsulate it within \u003ccode\u003eGame\u003c/code\u003e via a method like \u003ccode\u003e#start\u003c/code\u003e and simply evoke that method in the CLI. There is no wrong way to implement code that works.\u003c/p\u003e  \u003cp\u003eIf you'd like, implement a \"wargames\" game type. When asked what kind of game they want to play or for the number of players, if the user types in \"wargames\", have the computer play itself 100 times and report how many times the game was won. This is not a requirement, it would just be fun. A perfect computer AI should never be able to win, like in the case of thermonuclear war.\u003c/p\u003e  \u003cp\u003eThe rest is up to you and your team. Have fun, implement the spirit of the project, meet the requirements as you interpret them, be creative, and don't worry, there are no wrong answers with code.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge42dd3778e54c04ace1908b6ed2d5406","title":"Using JSON Server and Postman to Mock Client/Server Communication","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-using-json-server-and-postman\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-json-server-and-postman/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-json-server-and-postman\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-using-json-server-and-postman/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSet up JSON Server as a mock backend\u003c/li\u003e\n\u003cli\u003eUse Postman to mimic frontend responses\u003c/li\u003e\n\u003cli\u003ePractice the client/server request/response cycle\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn typical full-stack applications, a frontend (the client) and a backend (the\nserver) work together. The frontend initiates communication, often\neither asking for data or sending some data to be stored. The backend is\nactively listening for these requests, and when one is received, it will do some\nwork for us and send a response back. This response may include requested data,\nor it could include a confirmation that data was stored. This request/response\ncycle is a critical piece of web development and the backbone of most modern\nwebsites.\u003c/p\u003e\n\n\u003cp\u003eIn the next lessons, we'll start to explore the first half of this\nrequest/response cycle — initiating requests from the frontend. Before we start\npracticing in JavaScript, though, it would be helpful if we could explore how\nthis cycle works. Luckily, we have some tools that can mimic both frontend\nrequests and backend responses. For the frontend, we have \u003ca href=\"https://www.postman.com/downloads/\"\u003ePostman\u003c/a\u003e, an\napp that can be used to build requests without writing code. For the backend, we\nhave \u003ca href=\"https://www.npmjs.com/package/json-server\"\u003eJSON Server\u003c/a\u003e, a Node application that mimics the behavior of\na full backend server.\u003c/p\u003e\n\n\u003cp\u003eCombined, we can practice sending requests from Postman to the JSON server and see\nhow the server responds.\u003c/p\u003e\n\n\u003ch2\u003eReview: What is JSON Again?\u003c/h2\u003e\n\n\u003cp\u003eJSON, JavaScript Object Notation, is a \u003cem\u003edata interchange format\u003c/em\u003e. We use JSON to\nsend structured data between frontends and backends. There are a few formats\navailable to handle this task, but JSON has some specific advantages that make\nit a great choice for our purposes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIt is human-readable. JSON data is stored as a \u003ccode\u003eString\u003c/code\u003e, but structured in a\nway that looks very similar to a JavaScript object.\u003c/li\u003e\n\u003cli\u003eIt is easy to convert into a JavaScript object. JavaScript has built-in\nmethods for turning objects into JSON and vice versa. Very handy!\u003c/li\u003e\n\u003cli\u003eDespite having JavaScript in the name, the format is compatible with many\nprogramming languages. Languages like Ruby and Python have their own methods\nfor handling JSON and converting it into object-like data structures.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBelow is an example of what a piece of JSON looks like when sent from client to\nserver (or vice versa):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e'{\"name\": \"Tesla\", \"occupation\": \"Inventor\"}'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe data above is a \u003ccode\u003eString\u003c/code\u003e, but you can see that it contains what looks like\nkey/value pairs. Notice that the keys and values are both wrapped in quotes\nwhile other characters, \u003ccode\u003e{\u003c/code\u003e, \u003ccode\u003e}\u003c/code\u003e, and \u003ccode\u003e:\u003c/code\u003e, are not. This is required syntax for\nJSON. All text-based data, even keys, must be wrapped in quotes within the\nlarger \u003ccode\u003eString\u003c/code\u003e. Numbers are the only exception to this.\u003c/p\u003e\n\n\u003cp\u003eWhen working with JSON, the outside quotes are not always shown. Instead of a\nsingle line like above, we may see JSON like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"name\": \"Tesla\",\u003cbr\u003e  \"occupation\": \"Inventor\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you are curious about JSON syntax, there are many JSON validators online like\n\u003ca href=\"https://jsonlint.com/\"\u003ethis one\u003c/a\u003e that will confirm if your JSON is formatted\ncorrectly.\u003c/p\u003e\n\n\u003ch2\u003eWhat is JSON Server?\u003c/h2\u003e\n\n\u003cp\u003eJSON Server is a freely available Node package that can turn a JSON file on your\ncomputer into mock data storage. When JSON Server is running, we can send\nrequests to get data from storage or add data to it, as though we were talking\nto a server with a database.\u003c/p\u003e\n\n\u003cp\u003eA huge benefit of JSON Server is that we don't have to spend much time setting\nthe mock server up, allowing us to focus on developing the frontend of an\napplication first.\u003c/p\u003e\n\n\u003ch2\u003eSetting up JSON Server\u003c/h2\u003e\n\n\u003cp\u003eTo start using JSON Server, we need to install it, then provide a basic set of\ndata to practice with.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll install JSON Server globally on your machine:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install -g json-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the command above, you should now be able to spin up a mock server from any\ndirectory on your computer. Alternatively, if you remove the \u003ccode\u003e-g\u003c/code\u003e option from\nthis command but are in a folder with a \u003ccode\u003epackage.json\u003c/code\u003e file, \u003ccode\u003ejson-server\u003c/code\u003e will\nbe added as a dependency in the file.\u003c/p\u003e\n\n\u003cp\u003eNext, we'll need to create a file that will act as our data storage.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etouch db.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOpen this file in your text editor and paste in the following content:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"articles\": [\u003cbr\u003e    {\u003cbr\u003e      \"id\": 1,\u003cbr\u003e      \"title\": \"Example Article\",\u003cbr\u003e      \"content\": \"This is an example.\"\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": 2,\u003cbr\u003e      \"title\": \"Second Article\",\u003cbr\u003e      \"content\": \"This is also an example.\"\u003cbr\u003e    }\u003cbr\u003e  ]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've created one top-level key, \u003ccode\u003e\"articles\"\u003c/code\u003e, in our JSON, which points\nto an array. This array contains two elements, both objects with three keys:\n\u003ccode\u003e\"id\"\u003c/code\u003e, \u003ccode\u003e\"title\"\u003c/code\u003e, and \u003ccode\u003e\"content\"\u003c/code\u003e. Our first goal will be to access this data.\u003c/p\u003e\n\n\u003ch2\u003eStart the Server\u003c/h2\u003e\n\n\u003cp\u003eTo start JSON Server, run the following command from the same directory that\n\u003ccode\u003edb.json\u003c/code\u003e is in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejson-server --watch db.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen run, you'll see some messaging about how to access our JSON data. By\ndefault, JSON Server will start up on port \u003ccode\u003e3000\u003c/code\u003e. You should see a notice\nthat you can access the server at \u003ccode\u003ehttp://localhost:3000\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOpen your browser and paste this URL in. If the server is running correctly, you\nshould be presented with a page of information provided by JSON Server. On this\npage, you'll see a \u003cstrong\u003eResources\u003c/strong\u003e section that lists one resource: \u003ccode\u003e/articles\u003c/code\u003e. The\nserver has read the \u003ccode\u003edb.json\u003c/code\u003e file and found our \u003ccode\u003earticles\u003c/code\u003e key, turning it into a\nresource. Click \u003ccode\u003e/articles\u003c/code\u003e and you will be navigated to a new page,\n\u003ccode\u003ehttp://localhost:3000/articles\u003c/code\u003e. Instead of a page of info, you'll see the value\nassociated with \u003ccode\u003earticles\u003c/code\u003e in our data, an array containing two objects:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {\u003cbr\u003e    \"id\": 1,\u003cbr\u003e    \"title\": \"Example Article\",\u003cbr\u003e    \"content\": \"This is an example.\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"title\": \"Second Article\",\u003cbr\u003e    \"content\": \"This is also an example.\"\u003cbr\u003e  }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can go even further — notice the \u003ccode\u003e\"id\"\u003c/code\u003e key that is listed. Instead of just\ngoing to \u003ccode\u003e/articles\u003c/code\u003e, we can append the value of \u003ccode\u003e\"id\"\u003c/code\u003e to the end of the URL:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttp://localhost:3000/articles/1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, instead of an array, we get the object inside of it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 1,\u003cbr\u003e  \"title\": \"Example Article\",\u003cbr\u003e  \"content\": \"This is an example.\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNeat! So what is happening? We won't go into too much detail, but JSON server is\nfollowing \u003ca href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\"\u003eRESTful conventions\u003c/a\u003e. By providing \u003ccode\u003e/articles\u003c/code\u003e followed by \u003ccode\u003e/1\u003c/code\u003e\nin our URL, JSON Server knows we're asking for a resource called \u003ccode\u003earticles\u003c/code\u003e, and\nwithin that resource, we're asking for whatever data has an ID of \u003ccode\u003e1\u003c/code\u003e. The\n\u003ccode\u003earticles\u003c/code\u003e content we store in our JSON file could be in any order. JSON Server\nwill look through and match the request to an ID and return \u003cem\u003ethat\u003c/em\u003e content. If\nwe change to \u003ccode\u003e2\u003c/code\u003e, we'll get the other data we stored in \u003ccode\u003earticles\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLeave JSON server running and we'll move on to the next tool, Postman.\u003c/p\u003e\n\n\u003ch2\u003eWhat is Postman?\u003c/h2\u003e\n\n\u003cp\u003eAs we mentioned, Postman is an application that allows us to mock up frontend\nrequests without writing any JavaScript. With Postman, we can practice sending\nrequests to our JSON Server.\u003c/p\u003e\n\n\u003ch2\u003eSetting up Postman\u003c/h2\u003e\n\n\u003cp\u003eTo get the Postman app, head over to\n\u003ca href=\"https://www.postman.com/downloads/\"\u003ehttps://www.postman.com/downloads/\u003c/a\u003e and click \u003cstrong\u003eDownload the App\u003c/strong\u003e.\nThere is a web version of Postman, but this will not work with our \u003ccode\u003elocalhost\u003c/code\u003e\nserver.\u003c/p\u003e\n\n\u003cp\u003eOnce it's downloaded and installed, open the app. You should see a screen\ninviting you to create an account or sign in. At the bottom of that screen,\nclick the \"Skip and go to the app\" link. On the next screen, you should see a\n\"Get Started\" section on the right side; click the first option: \"Create a\nrequest\". You should then see an input field starting with \u003cstrong\u003eGET\u003c/strong\u003e and\ncontaining the placeholder text \u003cem\u003eEnter request URL\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/get-request-bar.png\" alt=\"Get request bar\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe're now ready to send requests to our server.\u003c/p\u003e\n\n\u003ch2\u003eRetrieving Data from our JSON Server using Postman\u003c/h2\u003e\n\n\u003cp\u003eHere, we'll write in the URL we previously used to get our JSON server data,\n\u003ccode\u003ehttp://localhost:3000/articles/1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/postman-request.png\" alt=\"localhost entered\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce entered, hit the \u003cstrong\u003eSend\u003c/strong\u003e button. If everything is working, you should see\nthe same article data from earlier, an object with three keys: \u003ccode\u003e\"id\"\u003c/code\u003e, \u003ccode\u003e\"title\"\u003c/code\u003e,\nand \u003ccode\u003e\"content\"\u003c/code\u003e. You're now performing the full request/response cycle using our\ntools! Let's explore what is happening.\u003c/p\u003e\n\n\u003cp\u003eWhen you click \u003cstrong\u003eSend\u003c/strong\u003e on Postman, you send a request to the URL you provided.\nThis is a \u003cstrong\u003eGET\u003c/strong\u003e request — a request for data from a resource. Our JSON server\nis actively listening for these requests. If you look at your terminal where\nJSON server is running, you will see that the server has recognized your GET\nrequest, displaying something similar to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGET /articles/1 200 25.666 ms\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eJSON Server sees that this is a GET request. It also notes that the request is\nspecifically for \u003ccode\u003e/articles/1\u003c/code\u003e. \u003ccode\u003e200\u003c/code\u003e is a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eHTTP status code\u003c/a\u003e that\nindicates the request was received, accepted and responded to successfully.\n\u003ccode\u003e25.666 ms\u003c/code\u003e is the amount of time it took to complete the request, in\nmilliseconds. Back in Postman, we can see the response from our server in the\nlower panel and confirm we received what we expected.\u003c/p\u003e\n\n\u003cp\u003eDepending on what we need, we can change out the details of our request. Imagine\nwe are building a local news site containing many articles. Instead of\nrequesting just the article with an ID of \u003ccode\u003e1\u003c/code\u003e, we might just send a request for\n\u003ccode\u003e/articles\u003c/code\u003e and get everything available from the server. In complex webpages,\nwe may send requests to both depending on what page is being accessed — we\nmight have an index page of all article titles, and when a title is clicked,\nwe'd send a request for a single article.\u003c/p\u003e\n\n\u003ch2\u003eSending Data to our JSON Server from Postman\u003c/h2\u003e\n\n\u003cp\u003eWe've now seen how a GET HTTP request works, so let's move on to a POST request.\nPOST requests are used when we want to \u003cem\u003esend data to\u003c/em\u003e a server.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e There are a couple of other HTTP request options for sending data —\nPUT and PATCH — but for simplicity, we'll just focus on POST requests for now.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eContinuing our news site example, let's say we've written a new article and\nwant to add it to the site. A POST request allows us to send the contents of\nthis new article, along with any other details we want to include, like the\ntitle. As long as we've structured the request correctly, JSON Server will\nreceive the request, recognize it as a POST request and attempt to store the\narticle information in the 'database.'\u003c/p\u003e\n\n\u003cp\u003eTo send data to our server, first, we need to switch our Postman request from GET\nto POST. Click on GET beside the URL bar to display a drop-down menu of HTTP\nrequest options and switch over to POST.\u003c/p\u003e\n\n\u003cp\u003eSecond, we need to adjust the URL we're using. In this particular case, we're\nsending content that should become a \u003cem\u003enew\u003c/em\u003e article. Because of this, we don't\nwant to use a specific ID value in the URL. Instead, we'll send a request to\n\u003ccode\u003e/articles\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttp://localhost:3000/articles\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen JSON Server receives the request, it'll recognize it as a POST request and\nautomatically add it to the appropriate resource. It'll also assign an ID for\nus, so we don't need to worry about including one.\u003c/p\u003e\n\n\u003cp\u003eFinally, before we can send our request, we need to provide the data we want to\nsend. In Postman, just below the URL bar, click the \u003cstrong\u003eBody\u003c/strong\u003e tab, then choose\nthe \u003cstrong\u003eraw\u003c/strong\u003e option, and select \u003cstrong\u003eJSON\u003c/strong\u003e from the drop-down menu.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/postman-post.png\" alt=\"postman post\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the code box just below these options, write in the following JSON:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"title\": \"Third Article\",\u003cbr\u003e  \"content\": \"Another example!\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that we don't need to wrap the contents in quotes and left out the ID\nkey/value. Postman will handle these for us.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/postman-post-body.png\" alt=\"postman post example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen ready, click \u003cstrong\u003eSend\u003c/strong\u003e. In the terminal, we should see JSON Server\nrecognizing the request. In Postman, we'll see the server's response in the lower panel:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"title\": \"Third Article\",\u003cbr\u003e  \"content\": \"Another example!\",\u003cbr\u003e  \"id\": 3\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTypically, after a successful POST request, the server will send back the new\ndata as a response. In this case, it sent back what we sent \u003cem\u003eand\u003c/em\u003e included the\nnewly assigned ID.\u003c/p\u003e\n\n\u003cp\u003eAs one final confirmation, navigate to your \u003ccode\u003edb.json\u003c/code\u003e file and open it up. You\nshould see that the file has changed to include your newly submitted content!\nCongratulations, you've persisted data to \u003ccode\u003edb.json\u003c/code\u003e!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAlthough we haven't learned how to build our own backends yet, JSON server can\nact as a placeholder, enabling us to learn the first half of the\nrequest/response cycle without having to worry about a backend. Also,\nbecause JSON Server follows RESTful conventions that are widely used throughout\nthe internet, we'll start to become familiar with how server resources\n\u003cem\u003eshould\u003c/em\u003e be structured long before we create our own.\u003c/p\u003e\n\n\u003cp\u003eWe encourage you to try creating your own resources in \u003ccode\u003edb.json\u003c/code\u003e. A few quick\nnotes about setting resources up:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAny top-level key/value pair (like \u003ccode\u003earticles\u003c/code\u003e in our example) will be\nautomatically treated as a resource we can retrieve and send data to.\u003c/li\u003e\n\u003cli\u003eThe value should be either an array or an object. Try both to see how they\ndiffer!\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith JSON Server, you'll now be able to design frontends that persist data!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.npmjs.com/package/json-server\"\u003eJSON Server\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.postman.com/downloads/\"\u003ePostman\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eHTTP Status Codes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\"\u003eRepresentational State Transfer (REST)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8654391049ac342c336eda1adc7b273c","title":"Using the Array Filter Method","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-filter-method-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-filter-method-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-filter-method-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice using \u003ccode\u003efilter()\u003c/code\u003e to return matching results\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've all probably had the experience of filtering a selection of choices online. When shopping for clothing, we might have selected a single size so that we can consider only the search results we need. Or when ordering food online, we could have customized our results to only show restaurants currently open or offering delivery in our neighborhoods. Since it's such a common need for a user, it's also a common function for a web programmer to run. Fortunately for us, JavaScript provides a built-in \u003ccode\u003efilter()\u003c/code\u003e method.\u003c/p\u003e  \u003ch2\u003eUse \u003ccode\u003efilter()\u003c/code\u003e to Return Matching Results\u003c/h2\u003e  \u003cp\u003eWe have an array of drivers with various information. We need to write functions using the \u003ccode\u003efilter()\u003c/code\u003e method so that PickMeUp Taxi service employees can easily query the data. Run the tests to see what conditions need to be met by each function \u003cem\u003ebefore\u003c/em\u003e you start writing JavaScript code.\u003c/p\u003e  \u003cp\u003eYou'll be writing three functions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003efindMatching\u003c/code\u003e- This function takes an array of drivers' names and a \u003ccode\u003estring\u003c/code\u003e as arguments, and returns the matching list of drivers. The function should be case insensitive.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003efuzzyMatch\u003c/code\u003e - This function takes an array of drivers' names and a \u003ccode\u003estring\u003c/code\u003e as arguments for querying the array, and returns all drivers whose names begin with the provided letters.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003ematchName\u003c/code\u003e - This function takes an array of \u003ccode\u003edriver\u003c/code\u003e objects and a \u003ccode\u003estring\u003c/code\u003e as arguments. Each \u003ccode\u003edriver\u003c/code\u003e object has two properties: \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ehometown\u003c/code\u003e. The function should return each element whose \u003ccode\u003ename\u003c/code\u003e property matches the provided \u003ccode\u003estring\u003c/code\u003e argument.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"\u003eMDN: Array.prototype.filter()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3342930edcf5f1e3f938753cf315dfb0","title":"Using the Array Find Method","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-find-method-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-find-method-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-find-method-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice using \u003ccode\u003efind()\u003c/code\u003e to isolate a specific result\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe have learned that the \u003ccode\u003eindexOf()\u003c/code\u003e and \u003ccode\u003efind()\u003c/code\u003e methods can be used to locate an element in an array, and that they return the \u003cstrong\u003efirst\u003c/strong\u003e element for which the condition is met. (If you instead want a list of \u003cem\u003eall\u003c/em\u003e elements that meet a condition, you would use \u003ccode\u003eArray.prototype.filter()\u003c/code\u003e instead. We'll learn about \u003ccode\u003efilter()\u003c/code\u003e in the next lesson.)\u003c/p\u003e  \u003cp\u003eWe've also learned that the \u003ccode\u003efind()\u003c/code\u003e method takes a \u003cem\u003ecallback function\u003c/em\u003e as its argument. This is a common pattern for the \u003ccode\u003eArray\u003c/code\u003e methods we'll be learning about in this section — in fact, \u003ccode\u003eindexOf()\u003c/code\u003e is the only one that \u003cem\u003edoesn't\u003c/em\u003e take a callback function as an argument. \u003ccode\u003efind()\u003c/code\u003e is one of two \u003ccode\u003eArray\u003c/code\u003e methods that expects the callback function to return either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e (\u003ccode\u003efilter()\u003c/code\u003e is the other one).\u003c/p\u003e  \u003cp\u003eIn this lab, we'll practice using the \u003ccode\u003efind()\u003c/code\u003e method.\u003c/p\u003e  \u003ch2\u003ePractice Using \u003ccode\u003efind()\u003c/code\u003e to Isolate a Specific Result\u003c/h2\u003e  \u003cp\u003eLet's create a function that uses the method \u003ccode\u003efind()\u003c/code\u003e to single out a specific result in game record data for the Kansas City Chiefs football team. We want to find out if, at \u003cem\u003eany\u003c/em\u003e point in the team's existence, they've had a win in the Superbowl. Our data looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst record = [\u003cbr\u003e  {year: \"2018\", result: \"L\"},\u003cbr\u003e  {year: \"2017\", result: \"W\"},\u003cbr\u003e  {year: \"2016\", result: \"N/A\"}\u003cbr\u003e  //...\u003cbr\u003e] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWrite a function called \u003ccode\u003esuperbowlWin()\u003c/code\u003e in \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe function should receive 1 argument, an \u003ccode\u003eArray\u003c/code\u003e of JavaScript \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003cli\u003eEach object has two properties: \u003ccode\u003eyear\u003c/code\u003e and \u003ccode\u003eresult\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIt should use \u003ccode\u003efind()\u003c/code\u003e to test each \u003ccode\u003eObject\u003c/code\u003e to see if the \u003ccode\u003eresult\u003c/code\u003e is \u003ccode\u003e\"W\"\u003c/code\u003e — a win!\u003c/li\u003e \u003cli\u003eIt should return the \u003ccode\u003eyear\u003c/code\u003e when the win occurred (if it occurred at all!)\u003c/li\u003e \u003cli\u003eIf no win is found, it should return, sadly, \u003ccode\u003eundefined\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.find()\u003c/code\u003e is a built-in function in JavaScript which is used to get the value of the first element in the array that satisfies the provided condition. With this, you can quickly check all the elements of the array and return the first match.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"\u003eMDN: Array.prototype.find()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga6ffe91f3776585a2d7551098a30f2a0","title":"Using the Array Map Method","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-1-array-map-method-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-map-method-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-1-array-map-method-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview how the \u003ccode\u003emap()\u003c/code\u003e method works\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003emap()\u003c/code\u003e with \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eDemonstrate \u003ccode\u003emap()\u003c/code\u003e with complex data structures\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs developers, we find ourselves responsible for all sorts of common, but tedious, tasks, such as iterating over arrays. Although a \u003ccode\u003efor\u003c/code\u003e loop will work for these tasks, we can take advantage of a method like \u003ccode\u003emap()\u003c/code\u003e to save ourselves work and to organize and optimize our code, resulting in more readable and understandable functions.\u003c/p\u003e  \u003ch2\u003eReview How the \u003ccode\u003emap()\u003c/code\u003e Method Works\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray.prototype.map()\u003c/code\u003e is a method that iterates over an array and applies a function to each element, modifying it in some way. The result is then returned as a \u003cem\u003enew\u003c/em\u003e array, leaving the original array the same. This is super helpful, because it saves us from having to build out the loop, or create a new array and copy stuff in there. It also leaves the elements in the original array unchanged, which helps protect our code from bugs.\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003emap()\u003c/code\u003e With \u003ccode\u003eArray\u003c/code\u003es\u003c/h2\u003e  \u003cp\u003eAs mentioned above, we use \u003ccode\u003emap()\u003c/code\u003e when we want to perform an action on each element in an \u003ccode\u003eArray\u003c/code\u003e, and \"gather\" the results into a new \u003ccode\u003eArray\u003c/code\u003e. We'll start by looking at how we would build the functionality ourselves, using a \u003ccode\u003efor...of\u003c/code\u003e loop, then show how \u003ccode\u003emap()\u003c/code\u003e can save us work and improve our code.\u003c/p\u003e  \u003cp\u003eWe'll also use this as a chance to demonstrate some of the power of functions in JavaScript. We'll write the code \u003cstrong\u003efour times\u003c/strong\u003e, making it increasingly efficient and \u003cem\u003eexpressive\u003c/em\u003e each time.\u003c/p\u003e  \u003ch3\u003eUsing \u003ccode\u003efor...of\u003c/code\u003e in Place of \u003ccode\u003e.map()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eIn this example, we are using a standard bit of iteration code. The code below recreates the functionality of the native \u003ccode\u003e.map()\u003c/code\u003e method using \u003ccode\u003efor...of\u003c/code\u003e. But because \u003ccode\u003efor...of\u003c/code\u003e (and \u003ccode\u003efor\u003c/code\u003e as well) is a \u003cem\u003egeneral\u003c/em\u003e function that can be used to do lots of things, another programmer would have to examine the loop's inner workings to determine exactly what the code is doing.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst students = [\"harry\", \"ron\", \"hermione\", \"ginevra\"];\u003cbr\u003econst rollCall = [];\u003cbr\u003e\u003cbr\u003efor (const student of students) {\u003cbr\u003e  rollCall.push( student + \" the wizard\" );\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e//=\u0026gt; rollCall = [\"harry the wizard\", \"ron the wizard\", \"hermione the wizard\", \"ginevra the wizard\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we use the \u003ccode\u003e.map()\u003c/code\u003e method, on the other hand, we are saying to other programmers: \"Expect a new array to come out of this after each element is modified in some way!\"\u003c/p\u003e  \u003cp\u003eLet's look at a few different ways to implement the native \u003ccode\u003e.map()\u003c/code\u003e method.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003emap()\u003c/code\u003e With a Function Declaration\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003efunction studentRollCall(student) {\u003cbr\u003e  return student + \" the wizard\";\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst students = [\"harry\", \"ron\", \"hermione\", \"ginevra\"];\u003cbr\u003econst rollCall = students.map(studentRollCall);\u003cbr\u003e//=\u0026gt; rollCall = [\"harry the wizard\", \"ron the wizard\", \"hermione the wizard\", \"ginevra the wizard\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe use \u003ccode\u003emap()\u003c/code\u003e when we want to transform the elements in an array in some way. To do this, we pass a function \u003cem\u003eas an argument\u003c/em\u003e; that function (the callback) is what executes our desired transformation. In JavaScript, arguments can be primitive types like \u003ccode\u003eNumber\u003c/code\u003e or \u003ccode\u003eString\u003c/code\u003e, but they \u003cstrong\u003ecan also be work\u003c/strong\u003e. Very few other programming languages allow that!\u003c/p\u003e  \u003cp\u003eThe iterator function \u003ccode\u003emap()\u003c/code\u003e calls the callback for each element in turn, passing the element as an argument, and stores the return value in a new \u003ccode\u003eArray\u003c/code\u003e. When the iterations are complete, it returns that new array.\u003c/p\u003e  \u003cp\u003eThis code is more \u003cem\u003eexpressive\u003c/em\u003e than the version using \u003ccode\u003efor...of\u003c/code\u003e because as soon as a developer sees that \u003ccode\u003emap()\u003c/code\u003e is being used, they know a lot about what the code is doing.\u003c/p\u003e  \u003cp\u003eNote that this code is using a \u003cem\u003enamed\u003c/em\u003e function as the callback. This is perfectly valid, but the \u003ccode\u003estudentRollCall\u003c/code\u003e function isn't doing much work. We may want to streamline our code a bit more by using a function expression (\"anonymous function\") instead.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003emap()\u003c/code\u003e With a Function Expression\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst students = [\"harry\", \"ron\", \"hermione\", \"ginevra\"];\u003cbr\u003econst rollCall = students.map(function(student) {\u003cbr\u003e  return student + \" the wizard\";\u003cbr\u003e});\u003cbr\u003e//=\u0026gt; rollCall = [\"harry the wizard\", \"ron the wizard\", \"hermione the wizard\", \"ginevra the wizard\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy defining a function expression inline, we're able to tighten up our code without changing its functionality or making it less expressive.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003emap()\u003c/code\u003e With an Arrow Function\u003c/h3\u003e  \u003cp\u003eThanks to arrow functions, we can shorten up the function even more:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// When the parameter list is only one element, we can drop () !\u003cbr\u003econst students = [\"harry\", \"ron\", \"hermione\", \"ginevra\"];\u003cbr\u003econst rollCall = students.map(student =\u0026gt; student + \" the wizard\");\u003cbr\u003e//=\u0026gt; rollCall = [\"harry the wizard\", \"ron the wizard\", \"hermione the wizard\", \"ginevra the wizard\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code now fits on one line! We've pared down all that noisy JavaScript code in the \u003ccode\u003efor...of\u003c/code\u003e version by using \u003ccode\u003emap()\u003c/code\u003e along with more efficient JavaScript syntax. This makes our code even more expressive: that single line of code tells us everything we need to know about what the code is doing.\u003c/p\u003e  \u003ch2\u003eDemonstrate \u003ccode\u003emap()\u003c/code\u003e With Complex Data Structures\u003c/h2\u003e  \u003cp\u003eLet's use the \u003ccode\u003emap()\u003c/code\u003e function on a trickier data structure — a list of objects. To start things off, we have an array of robots. We want to activate all of them. To activate a robot, we need to mark it as such using the \u003ccode\u003eisActivated\u003c/code\u003e boolean, and also double its number of modes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst robots = [\u003cbr\u003e  { name: 'Johnny 5', modes: 5, isActivated: false, },\u003cbr\u003e  { name: 'C3PO', modes: 3, isActivated: false, },\u003cbr\u003e  { name: 'Sonny', modes: 2.5, isActivated: false, },\u003cbr\u003e  { name: 'Baymax', modes: 1.5, isActivated: false, },\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003econst activatedRobots = robots.map( robot =\u0026gt; {\u003cbr\u003e  return Object.assign({}, robot, {\u003cbr\u003e    modes: robot.modes * 2,\u003cbr\u003e    isActivated: true,\u003cbr\u003e  });\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003econsole.log(activatedRobots);\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003e Result:\u003cbr\u003e [\u003cbr\u003e   { name: 'Johnny 5', modes: 10, isActivated: true },\u003cbr\u003e   { name: 'C3PO', modes: 6, isActivated: true },\u003cbr\u003e   { name: 'Sonny', modes: 5, isActivated: true },\u003cbr\u003e   { name: 'Baymax', modes: 3, isActivated: true }\u003cbr\u003e ]\u003cbr\u003e*/ \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe could, of course, accomplish the same thing using a \u003ccode\u003efor\u003c/code\u003e or \u003ccode\u003efor...of\u003c/code\u003e loop, but using the native \u003ccode\u003emap()\u003c/code\u003e function frees us from having to create an empty array, code the looping mechanism, push the modified values into the empty array, and return the modified array at the end. Instead of having to rewrite the iteration code every time we need to modify elements in an array, \u003ccode\u003emap()\u003c/code\u003e allows us to focus all our effort on building the actions we need in our callback function.\u003c/p\u003e  \u003ch2\u003eLab: Using \u003ccode\u003emap()\u003c/code\u003e to Generate a New Array\u003c/h2\u003e  \u003cp\u003eLet's put our newly acquired knowledge of \u003ccode\u003emap()\u003c/code\u003e to use! We just uploaded 10 coding tutorials online, but some of them have inconsistent casing. We want all the titles to be \"title case\", in other words, the first letter of each word should be capitalized. Create a new array containing the names of the tutorials with proper title case formatting. For example, \u003ccode\u003e'what does the this keyword mean?'\u003c/code\u003e should become \u003ccode\u003e'What Does The This Keyword Mean?'\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst tutorials = [\u003cbr\u003e  'what does the this keyword mean?',\u003cbr\u003e  'What is the Constructor OO pattern?',\u003cbr\u003e  'implementing Blockchain Web API',\u003cbr\u003e  'The Test Driven Development Workflow',\u003cbr\u003e  'What is NaN and how Can we Check for it',\u003cbr\u003e  'What is the difference between stopPropagation and preventDefault?',\u003cbr\u003e  'Immutable State and Pure Functions',\u003cbr\u003e  'what is the difference between == and ===?',\u003cbr\u003e  'what is the difference between event capturing and bubbling?',\u003cbr\u003e  'what is JSONP?'\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e This lab is challenging! You will need to iterate through the \u003ccode\u003etutorials\u003c/code\u003e array, modifying the name of each tutorial. To do this, you will \u003cstrong\u003ealso\u003c/strong\u003e need to access and modify each individual word.\u003c/p\u003e  \u003cp\u003eSome questions to consider:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow can we \"iterate\" through individual words in a string?\u003c/li\u003e \u003cli\u003eCan we execute an interation inside an iteration? How?\u003c/li\u003e \u003cli\u003eHow can we capitalize just the first letter in a word?\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eA couple of hints:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eBreak the task into smaller chunks: using the console or a REPL, start by figuring out how to modify one individual element in the \u003ccode\u003etutorials\u003c/code\u003e array. Once you've got that working, then figure out how to update the array itself.\u003c/li\u003e \u003cli\u003eUse Google!!\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003emap()\u003c/code\u003e takes 2 arguments — a callback and the optional context. The callback is called for each value in the original array and the modified value is added to a new array. Its return value is a new array that is the same length as the original array. Using \u003ccode\u003emap()\u003c/code\u003e saves time while making the code simpler and more expressive.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003eMDN: Array.prototype.map()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g213eed366c3e6c2e11f8cf5727339239","title":"Using the Array Reduce Method","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-iterators-fndcl-fnexpr-reduce-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-iterators-fndcl-fnexpr-reduce-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-iterators-fndcl-fnexpr-reduce-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eLearn how the \u003ccode\u003ereduce()\u003c/code\u003e method works\u003c/li\u003e \u003cli\u003eDemonstrate using \u003ccode\u003ereduce()\u003c/code\u003e with a primitive return value\u003c/li\u003e \u003cli\u003eDemonstrate using \u003ccode\u003ereduce()\u003c/code\u003e with an object as the return value\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the world of programming, we often work with lists. Sometimes we want to find or transform elements in a list, but other times we might want to create a single summary value. In this lesson, we'll learn how to use the \u003ccode\u003ereduce()\u003c/code\u003e iterator method to \u003cstrong\u003eaggregate\u003c/strong\u003e a result, i.e., to \u003cem\u003ereduce\u003c/em\u003e a list to a single value. That value can be a string, a number, a boolean, etc.\u003c/p\u003e  \u003cp\u003eTo better understand how \u003ccode\u003ereduce()\u003c/code\u003e works, we'll start by building our own version.\u003c/p\u003e  \u003ch2\u003eLearn How the \u003ccode\u003ereduce()\u003c/code\u003e Method Works\u003c/h2\u003e  \u003cp\u003eLet's say we have a bunch of grocery items in our basket and we want to calculate the total price. Our basket data might look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst products = [\u003cbr\u003e  { name: 'Shampoo', price: 4.99 },\u003cbr\u003e  { name: 'Donuts', price: 7.99 },\u003cbr\u003e  { name: 'Cookies', price: 6.49 },\u003cbr\u003e  { name: 'Bath Gel', price: 13.99 }\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're going to \u003cem\u003ereduce\u003c/em\u003e the array of products to a \u003cem\u003esingle value\u003c/em\u003e: the total price. To do this, we'll create a \u003ccode\u003egetTotalAmountForProducts()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction getTotalAmountForProducts(products) {\u003cbr\u003e  let totalPrice = 0;\u003cbr\u003e\u003cbr\u003e  for (const product of products) {\u003cbr\u003e    totalPrice += product.price;\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  return totalPrice;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econsole.log(getTotalAmountForProducts(products)); // LOG: 33.46 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe first declare a \u003ccode\u003etotalPrice\u003c/code\u003e variable and set its initial value to 0. We then iterate through the products in the basket and add the price of each to the total. When the loop has finished, we return the \u003ccode\u003etotalPrice\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThis is a very basic way to manually add together the prices of the products we want to buy, but it only works for this very specific situation. We could make our solution more abstract by writing a generalized function that accepts two additional arguments: an initial value and a callback function that implements the reduce functionality we want.\u003c/p\u003e  \u003cp\u003eTo see what this might look like, let's count the number of coupons we have lying around the house:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst couponLocations = [\u003cbr\u003e  { room: 'Living room', amount: 5 },\u003cbr\u003e  { room: 'Kitchen', amount: 2 },\u003cbr\u003e  { room: 'Bathroom', amount: 1 },\u003cbr\u003e  { room: 'Master bedroom', amount: 7 }\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003efunction ourReduce(arr, reducer, init) {\u003cbr\u003e    let accum = init;\u003cbr\u003e    for (const element of arr) {\u003cbr\u003e        accum = reducer(accum, element);\u003cbr\u003e    };\u003cbr\u003e    return accum;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction couponCounter(totalAmount, location) {\u003cbr\u003e  return totalAmount + location.amount;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econsole.log(ourReduce(couponLocations, couponCounter, 0)); // LOG: 15 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eourReduce()\u003c/code\u003e accepts three arguments: the array we want to reduce, the callback function or \u003cem\u003ereducer\u003c/em\u003e, and the initial value for our \u003cem\u003eaccumulator\u003c/em\u003e variable. It then iterates over the array, calling the reducer function each time, which returns the updated value of the accumulator. The final value of the accumulator is returned at the end.\u003c/p\u003e  \u003cp\u003eNote that \u003ccode\u003eourReduce()\u003c/code\u003e is generalized: the specifics (the callback function and initial value) have been abstracted out, making our code more flexible. If, for example, we already have three coupons in our hand, we can easily account for that without having to change any code by adjusting the initial value when we call \u003ccode\u003eourReduce()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(ourReduce(couponLocations, couponCounter, 3)); // LOG: 18 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDemonstrate using \u003ccode\u003ereduce()\u003c/code\u003e with a Primitive Return Value\u003c/h2\u003e  \u003cp\u003eWith JavaScript’s native \u003ccode\u003ereduce()\u003c/code\u003e method, we don't need to write our own version. Just like \u003ccode\u003eourReduce\u003c/code\u003e, the \u003ccode\u003ereduce()\u003c/code\u003e method is used when we want to get some information from each element in the collection and gather that information into a final summary value. Let's take the native implementation for a spin with our previous example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(couponLocations.reduce(couponCounter, 0)); // also logs 15! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnother simple numerical example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst doubledAndSummed = [1, 2, 3].reduce(function(accumulator, element){ return element * 2 + accumulator}, 0)\u003cbr\u003e// =\u0026gt; 12 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, as in the previous example, we are calling \u003ccode\u003e.reduce()\u003c/code\u003e on our input array and passing it two arguments: the callback function, and an optional start value for the accumulator (0 in this example). \u003ccode\u003e.reduce()\u003c/code\u003e executes the callback for each element in turn, passing in the current value of the accumulator and the current element each time. The callback updates the value of the accumulator in each iteration, and that updated value is then passed as the first argument to the callback in the next iteration. When there's nothing left to iterate, the final value of the accumulator (the total) is returned.\u003c/p\u003e  \u003cp\u003eThe initialization value is optional, but leaving it out might lead to a real surprise. If no initial value is supplied, the \u003cem\u003efirst element in the array\u003c/em\u003e is used as the starting value. \u003ccode\u003ereduce()\u003c/code\u003e then executes the callback function, passing this starting value and the \u003cem\u003esecond\u003c/em\u003e element of the array as the two arguments. In other words, the code inside the callback \u003cstrong\u003eis never executed\u003c/strong\u003e for the first element in the array. This can lead to unexpected results:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst doubledAndSummed = [1, 2, 3].reduce(function(accumulator, element){ return element * 2 + accumulator})\u003cbr\u003e// =\u0026gt; 11 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn some cases, it won't matter (e.g., if our reducer is simply summing the elements of the input array). However, to be safe, it is best to always pass a start value when calling \u003ccode\u003ereduce()\u003c/code\u003e. Of course, that initial value can be anything we like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst doubledAndSummedFromTen = [1, 2, 3].reduce(function(accumulator, element){ return element * 2 + accumulator}, 10)\u003cbr\u003e// =\u0026gt; 22 \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDemonstrate using \u003ccode\u003ereduce()\u003c/code\u003e with an Object as the Return Value\u003c/h2\u003e  \u003cp\u003eThe output of the \u003ccode\u003ereduce()\u003c/code\u003e method does not need to be a primitive value like a \u003ccode\u003eNumber\u003c/code\u003e or \u003ccode\u003eString\u003c/code\u003e. Let's consider an example that accumulates array values into an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSay we want to create a roster of student wizards assigned to each Hogwarts house. Our start value might look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u003cbr\u003econst hogwartsHouses = {\u003cbr\u003e  \"Slytherin\": [],\u003cbr\u003e  \"Gryffindor\": [],\u003cbr\u003e  \"Hufflepuff\": [],\u003cbr\u003e  \"Ravenclaw\": []\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eImagine we also have a \u003ccode\u003esortingHat\u003c/code\u003e object that includes an \u003ccode\u003eassign()\u003c/code\u003e method. That method takes the name of a student as its argument and returns the name of the house the student should be assigned to. We could call this method directly:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esortingHat.assign(studentName); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut that just returns the name of the assigned house for that one student; it doesn't update our \u003ccode\u003ehogwartsHouses\u003c/code\u003e object.\u003c/p\u003e  \u003cp\u003eTo do that, we can call reduce on our input array (which contains the names of all incoming students), passing a callback function and the start value of \u003ccode\u003ehogwartsHouses\u003c/code\u003e as the arguments. The callback is where we'll push each student name into the appropriate house:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eincomingStudents.reduce(function(houses, student) { houses[sortingHat.assign(student)].push(student)}, hogwartsHouses) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's break this down: \u003ccode\u003e.reduce()\u003c/code\u003e executes the callback for each student name in turn. Inside the callback, the \u003ccode\u003esortingHat.assign()\u003c/code\u003e method is called with the current student name as its argument. \u003ccode\u003eassign()\u003c/code\u003e returns the name of a Hogwarts house, which is then used as the key to access the correct array in the \u003ccode\u003ehogwartsHouses\u003c/code\u003e object and push the student's name into it. The iteration then continues to the next element in the array, passing the next student name and the updated value of \u003ccode\u003ehogwartsHouses\u003c/code\u003e as the arguments. Once \u003ccode\u003ereduce()\u003c/code\u003e has iterated through all the students in \u003ccode\u003eincomingStudents\u003c/code\u003e, it returns the final value of \u003ccode\u003ehogwartsHouses\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThen we can then access the list of students in any Hogwarts house:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ehogwartsHouses[\"Gryffindor\"] //=\u0026gt; [hermioneGranger, ronWeasley, harryPotter] \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eLab: Use \u003ccode\u003ereduce()\u003c/code\u003e to Create a Single Aggregate of All Items in a List\u003c/h2\u003e  \u003cp\u003eLet's say we are hard at work in the battery factory. We've assembled several batches of batteries today. Let's count how many assembled batteries we ended up with.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreate a new variable called \u003ccode\u003etotalBatteries\u003c/code\u003e, which holds the sum of all of the battery amounts in the \u003ccode\u003ebatteryBatches\u003c/code\u003e array. (Note that the \u003ccode\u003ebatteryBatches\u003c/code\u003e variable has been provided for you in \u003ccode\u003eindex.js\u003c/code\u003e.) Naturally, you should use \u003ccode\u003ereduce()\u003c/code\u003e for this!\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith \u003ccode\u003ereduce()\u003c/code\u003e, we are able to quickly get a single summary value from the elements in an array. \u003ccode\u003ereduce()\u003c/code\u003e — like the other iterator methods we've learned about in this section — can greatly cut down the amount of time spent recreating common functionality. It can also make our code more efficient and expressive.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\"\u003eMDN: Array.prototype.reduce()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[{"exportId":"g6543cad463046fd2e440bf5678d83020","title":"Discussion Questions: Events","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-events\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-events\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-events/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecall the different types of JavaScript Events\u003c/li\u003e \u003cli\u003eIdentify when the \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event will trigger\u003c/li\u003e \u003cli\u003eImplement a callback attached to an event handler\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise\u003c/h2\u003e  \u003cp\u003eTake a look at each of the code samples below. For each sample, work with your group to answer the following questions.\u003c/p\u003e  \u003col\u003e \u003cli\u003eWhat does each line of code do?\u003c/li\u003e \u003cli\u003eHow does this piece of code work?\u003c/li\u003e \u003cli\u003eGiven this code sample, what can you learn or describe about JavaScript\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eExample 1\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notify\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003e\u003cbr\u003econst button = document.getElementById(\"notify\")\u003cbr\u003ebutton.addEventListener('click', function(){\u003cbr\u003e  console.log(\"Printing a Message!\")\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 2\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notify\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003e\u003cbr\u003econst button = document.getElementById(\"notify\")\u003cbr\u003ebutton.addEventListener('mouseover', function(){\u003cbr\u003e  console.log(\"Printing a Message!\")\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 3\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notify\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003e\u003cbr\u003econst button = document.getElementById(\"notify\")\u003cbr\u003ebutton.addEventListener('mouseover', function(){\u003cbr\u003e  console.log(\"Printing a Message!\")\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 4\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notify\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003edocument.addEventListener(\"DOMContentLoaded\", function(){\u003cbr\u003e  const button = document.getElementById(\"notify\")\u003cbr\u003e  button.addEventListener('mouseover', function(){\u003cbr\u003e    console.log(\"Printing a Message!\")\u003cbr\u003e  })\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 5\u003c/h3\u003e  \u003cp\u003eOops. Looks like this developer made some mistakes typing. Identify the mistakes.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// index.html ...\u003cbr\u003e\u0026lt;script src=\"https://raw.githubusercontent.com/learn-co-curriculum/fewpjs-discussion-questions-events/master/index.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;button id=\"notifiable\"\u0026gt;Click Me!\u0026lt;/button\u0026gt;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// index.js\u003cbr\u003edocument.addListenerEvent(\"DOMContentLoaded\", function(){\u003cbr\u003e  const button = document.getElementById(\"notifliable\")\u003cbr\u003e  button.addListenerEvent('click', function(){\u003cbr\u003e    console.log(\"Printing a Message!\")\u003cbr\u003e  })\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"gf698bad77d7abd974fb9d88a90c25e46","title":"Discussion Questions: Thinking in Types","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-thinking-in-types\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-thinking-in-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-thinking-in-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecall the datatypes in JavaScript\u003c/li\u003e \u003cli\u003eIdentify the types of different data\u003c/li\u003e \u003cli\u003eIdentify the types of input and output of functions and operators\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eJS Data Types Review Questions\u003c/h2\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eWhat are the basic data types in JavaScript? Fill in the table of types below with descriptions of the types and the operators that work on them.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eObject\u003c/code\u003e is the basic data type that we use to build other, more specialized 'types' of data. Name some of the ways that \u003ccode\u003eObject\u003c/code\u003e is used in JavaScript (e.g. what other types are really \u003ccode\u003eObject\u003c/code\u003e underneath).\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eExercise - Thinking in Types\u003c/h2\u003e  \u003cp\u003eWhen writing a function, it's often helpful to start by considering the inputs and the output. In particular, knowing the data type of the inputs and the data type of the outputs lets you know what kinds of operations are allowed on those arguments. They also hint at what the 'right' operations to do are.\u003c/p\u003e  \u003cp\u003eFor the following functions, fill in the table with the types of the inputs and the types of the outputs.\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eFunction\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003efunction addFive(number) { return number + 5}\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003efunction sum(A, B) { return A + B }\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003efunction concat(A, B) { return \"\" + A + B }\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003edocument.querySelector\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ewindow.fetch\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch3\u003e\"Shapes\" of \u003ccode\u003eObject\u003c/code\u003es\u003c/h3\u003e  \u003cp\u003eMany functions operate on \u003ccode\u003eObject\u003c/code\u003e types that need to have particular keys. In such cases, it's useful to name the 'shapes' of \u003ccode\u003eObject\u003c/code\u003e that functions expect. You might say that a 'Person' is an \u003ccode\u003eObject\u003c/code\u003e that has keys 'name' and 'age'. You might write:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// Person: {\u003cbr\u003e//  name: string,\u003cbr\u003e//  age: number,\u003cbr\u003e// } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eto represent the 'shape' of a Person.\u003c/p\u003e  \u003cp\u003eWhen you have functions like the following, you can use the shorthand to write the type of the input and output.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction getName(person) {\u003cbr\u003e  return person.name;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction getAge(person) {\u003cbr\u003e  return person.age;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction makePerson(name, age) {\u003cbr\u003e  return {\u003cbr\u003e    name: name,\u003cbr\u003e    age: age\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction birthday(person) {\u003cbr\u003e  person.age += 1;\u003cbr\u003e  return person;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// Point: {\u003cbr\u003e// x: number\u003cbr\u003e// y: number\u003cbr\u003e// name: string\u003cbr\u003e//}\u003cbr\u003e\u003cbr\u003efunction getDistance(pointA, pointB) {\u003cbr\u003e  return Math.sqrt((pointA.x - pointB.x) ** 2 + (pointA.y - pointB.y) ** 2);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFill in the table using the 'shape' shorthand\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eFunction\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetName\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetAge\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003emakePerson\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ebirthday\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetDistance\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch3\u003eFunction Signatures\u003c/h3\u003e  \u003cp\u003eIt's often conventional to write the 'signature' of a function to concisely capture the function's name, the names and types of the arguments, and the type of the return value. For the \u003ccode\u003egetDistance\u003c/code\u003e function above, the signature might be written as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// getDistance(pointA: Point, pointB: Point): number \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003e:\u003c/code\u003e is used to indicate that the type is 'about' the preciding name. In \u003ccode\u003epointA: Point\u003c/code\u003e, \u003ccode\u003epointA\u003c/code\u003e is a \u003ccode\u003ePoint\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eReading this function signature out loud, you would say\u003c/p\u003e  \u003cp\u003e\u0026gt; \u003ccode\u003egetDistance\u003c/code\u003e is a function that takes in Points pointA and pointB and returns a number.\u003c/p\u003e  \u003cp\u003eFor practice, add the function signature to the functions in the table.\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eFunction\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003cth\u003efunction signature\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetName\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetAge\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003emakePerson\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ebirthday\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003egetDistance\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch3\u003eOperators as 'Functions'\u003c/h3\u003e  \u003cp\u003eYou can think of many operators as if they were functions. They take in inputs and evaluate to an output.\u003c/p\u003e  \u003cp\u003eFor the following operators, fill in the types of the inputs and outputs. Following the example, try to write out a function signature, as if the operator was a function.\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eOperator\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003cth\u003efunction signature\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e*\u003c/td\u003e \u003ctd\u003enumber, number\u003c/td\u003e \u003ctd\u003enumber\u003c/td\u003e \u003ctd\u003emultiply(a: number, b: number): number\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e+ (string)\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e+ (number)\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e-\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e^\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e**\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\\\u003c/td\u003e \u003ctd\u003e\\\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u0026amp;\u0026amp;\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch3\u003eFunctions that take in functions as arguments\u003c/h3\u003e  \u003cp\u003eSome functions take in functions as arguments ('callback functions'). If those functions will be called with particular types of arguments, it's helpful to specify the type of function that will be passed in.\u003c/p\u003e  \u003cp\u003e\u0026gt; Note: you may see the word \u003ccode\u003evoid\u003c/code\u003e meaning 'this function does not return anything'\u003c/p\u003e  \u003cp\u003eFill in the rest of the table.\u003c/p\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eFunction\u003c/th\u003e \u003cth\u003etypes of inputs\u003c/th\u003e \u003cth\u003etype of output\u003c/th\u003e \u003cth\u003efunction signature\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eEventTarget.addEventListener\u003c/code\u003e\u003c/td\u003e \u003ctd\u003estring, handler(e: Event): void\u003c/td\u003e \u003ctd\u003evoid\u003c/td\u003e \u003ctd\u003eaddEventListener(type: string, handler: function): void\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ewindow.setTimeout\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eArray.prototype.map\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eArray.prototype.find\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eArray.prototype.filter\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eArray.prototype.reduce\u003c/code\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g3c8ec8b37903b7cea15c7d23891dce77","title":"Discussion Questions: AJAX","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ajax-discussion-question\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ajax-discussion-question\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ajax-discussion-question/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify synchronous and asynchronous code\u003c/li\u003e \u003cli\u003eDescribe the process of communicating with the server\u003c/li\u003e \u003cli\u003eProcess data successfully returned from fetch()\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise\u003c/h2\u003e  \u003ch3\u003eQuestion 1\u003c/h3\u003e  \u003cp\u003eGiven the following code list the order of console.logs:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(\"Hello\")\u003cbr\u003e\u003cbr\u003efetch('https://randomuser.me/api/')\u003cbr\u003e  .then( res =\u0026gt; res.json() )\u003cbr\u003e  .then( data =\u0026gt; {\u003cbr\u003e    console.log(\"Hi\") \u003cbr\u003e  })\u003cbr\u003e\u003cbr\u003econsole.log(\"Sup?\") \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eQuestion 2\u003c/h3\u003e  \u003cp\u003eWhen fetchData is executed what will be console logged?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction fetchData(){\u003cbr\u003e        let data = fetch('https://randomuser.me/api/')\u003cbr\u003e          .then( res =\u0026gt; res.json() )\u003cbr\u003e          .then( res =\u0026gt; res )\u003cbr\u003e        console.log(data)   \u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efetchData() \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat will be console logged when the following code is run? Why?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction fetchData(){\u003cbr\u003e        let data = fetch('https://randomuser.me/api/')\u003cbr\u003e          .then( res =\u0026gt; res.json() )\u003cbr\u003e          .then( json =\u0026gt; console.log(json) )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efetchData() \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat will be console logged when the following code is run? Why?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction fetchData(){\u003cbr\u003e        let data = fetch('https://randomuser.me/api/')\u003cbr\u003e          .then( res =\u0026gt; res.json() )\u003cbr\u003e          .then( console.log )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efetchData() \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eQuestion 3\u003c/h3\u003e  \u003cp\u003eIn your own words: what does asynchronous mean?\u003c/p\u003e  \u003ch3\u003eQuestion 4\u003c/h3\u003e  \u003cp\u003eWrite out the request and response cycle. What is its purpose? How does it work?\u003c/p\u003e  \u003ch3\u003eQuestion 5\u003c/h3\u003e  \u003cp\u003eCheck out the JSON you get from making a GET request to \u003ca href=\"https://randomuser.me/api/\"\u003ethis\u003c/a\u003e url (\u003ca href=\"https://randomuser.me/api/\"\u003ehttps://randomuser.me/api/\u003c/a\u003e).\u003c/p\u003e  \u003cp\u003eOpen up the Github repository for this reading and view the provided \u003ccode\u003esrc/index.html\u003c/code\u003e file in the browser. In \u003ccode\u003esrc/index.js\u003c/code\u003e, make an AJAX request to that url when the button is clicked and append the retrieved information to the DOM. Use the labels to append the right data in the appropriate h4's, h3's and img tags.\u003c/p\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g9dcd3413bd6eda35184c560abba719de","title":"Discussion Questions: Arrow Functions","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"arrow-functions-discussion-questions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/arrow-functions-discussion-questions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/arrow-functions-discussion-questions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eArrow functions are a cool new feature of ES6. They introduce a different syntax and carry slightly different behavior than function expressions.  \u003c/p\u003e  \u003cp\u003eTake a look at the following code examples and return values with your table partners. Without looking anything up, see if you can deduce the differences and similarities in how arrow functions behave. \u003c/p\u003e  \u003ch3\u003eExamples\u003c/h3\u003e  \u003ch3\u003eArrow Function Shortcuts\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst playMusic = function (music) {\u003cbr\u003e  return \"Playing some \" + music\u003cbr\u003e}\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = (music) =\u0026gt; {\u003cbr\u003e  return \"Playing some \" + music\u003cbr\u003e}\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\"\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = music =\u0026gt; {\u003cbr\u003e  return \"Playing some \" + music\u003cbr\u003e}\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\"\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = music =\u0026gt; {\u003cbr\u003e  \"Playing some \" + music\u003cbr\u003e}\u003cbr\u003eplayMusic(\"Jazz\") // undefined \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = music =\u0026gt;  \"Playing some \" + music\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst playMusic = music =\u0026gt;  (\u003cbr\u003e  \"Playing some \" + music\u003cbr\u003e )\u003cbr\u003eplayMusic(\"Jazz\") // \"Playing some Jazz\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst readBooks = (book1, book2) =\u0026gt; {\u003cbr\u003e  return `I read '${book1}' and '${book2}'`\u003cbr\u003e}\u003cbr\u003ereadBooks(\"The Old Man and the Sea\", \"1984\") // \"I read 'The Old Man and the Sea' and '1984'\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst readBooks = (book1, book2) =\u0026gt;  `I read '${book1}' and '${book2}'`\u003cbr\u003ereadBooks(\"The Old Man and the Sea\", \"1984\") // \"I read 'The Old Man and the Sea' and '1984'\" \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst readBooks = book1, book2 =\u0026gt;  `I read '${book1}' and '${book2}'` // Syntax Error  \u003c/code\u003e\u003c/pre\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"gc94651a032446a8b2d297e6ca8535df0","title":"Discussion Questions: JS and the DOM","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-intro-to-dom-js\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-intro-to-dom-js\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-intro-to-dom-js/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview the Relationship between HTML, CSS, and JavaScript\u003c/li\u003e \u003cli\u003eDefine the DOM\u003c/li\u003e \u003cli\u003eDescribe how the DOM can be manipulated with DevTools\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eQuestions: Frontend File Setup\u003c/h2\u003e  \u003cp\u003eAnswer the following questions with your group:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow do you link a JavaScript file to an HTML document?\u003c/li\u003e \u003cli\u003eHow do you link a CSS file to an HTML document?\u003c/li\u003e \u003cli\u003eWhat are the roles of HTML, CSS, and JavaScript on a webpage?\u003c/li\u003e \u003cli\u003eWhat is the DOM? How is it related to HTML, CSS, and JavaScript?\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise: Basic Frontend File Setup\u003c/h2\u003e  \u003cp\u003eCreate the basic frontend file setup in a new folder. You should have:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ean html file \u003ccode\u003eindex.html\u003c/code\u003e with a header and a paragraph\u003c/li\u003e \u003cli\u003ea css file \u003ccode\u003estyle.css\u003c/code\u003e with a single rule changing something about the display of the elements\u003c/li\u003e \u003cli\u003ea js file \u003ccode\u003eindex.js\u003c/code\u003e with a single statement logging \"Hello, world\" to the console\u003c/li\u003e \u003cli\u003etags linking the css and the javascript into your html file\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eOpen the index.html file and verify that the CSS and JS are linked to your files and running.\u003c/p\u003e  \u003ch2\u003eGroup Exploration: Chrome DevTools\u003c/h2\u003e  \u003cp\u003eChrome's Developer Tools are powerful tools for inspecting and debugging frontend applications. With your group, explore the DevTools for your new frontend project and answer the following questions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow do you open the Developer Tools?\u003c/li\u003e \u003cli\u003eHow do you log different values from your JavaScript program to the Console tab? How do you log multiple values at once?\u003c/li\u003e \u003cli\u003eHow do you use JavaScript's \u003ccode\u003edebugger\u003c/code\u003e keyword?\u003c/li\u003e \u003cli\u003eHow do you highlight an element in the DOM from the Elements tab?\u003c/li\u003e \u003cli\u003eHow do you find the DOM representation of an element that's displayed on the page? (Hint: Check the mouse-in-square button in the top navigation bar of the DevTools)\u003c/li\u003e \u003cli\u003eHow do you change the content that appears on the page using the Elements tab?\u003c/li\u003e \u003cli\u003eWhat do each of the Elements, Console, Sources, and Network tabs show you?\u003c/li\u003e \u003c/ul\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"gc829042d182e00111647f4ca21dda8c9","title":"Discussion Questions: Execution Context","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-advanced-functions-discussion-question-execution-context\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-discussion-question-execution-context\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-advanced-functions-discussion-question-execution-context/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain JavaScript execution context in terms of English language patterns\u003c/li\u003e \u003cli\u003ePredict behavior of JavaScript's \u003ccode\u003ethis\u003c/code\u003e keyword\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise: Context in Language\u003c/h2\u003e  \u003cp\u003eIn conversation, we use pronouns to 'stand in' for the nouns they refer to. In order to understand sentences that take advantage of this 'language feature', speakers need to be able to infer the meaning \u003cem\u003efrom the context\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eFor the following example phrases, figure out what the \u003cstrong\u003ebolded pronoun\u003c/strong\u003e refers to:\u003c/p\u003e  \u003cp\u003e\u0026gt; 🎵 Oh, \u003cstrong\u003eI\u003c/strong\u003e just can't wait to be king! 🎵\u003c/p\u003e  \u003cp\u003e\u0026gt; All the world's a stage, and all the men and women merely players: \u003cstrong\u003ethey\u003c/strong\u003e have their exits and their entrances. [Shakespeare, As You Like It]\u003c/p\u003e  \u003cp\u003e\u0026gt; Every building is designed around the movements of people: \u003cstrong\u003ethey\u003c/strong\u003e have their exits and their entrances.\u003c/p\u003e  \u003cp\u003e\u0026gt; \u003cstrong\u003eThis\u003c/strong\u003e weekend we are going to visit Grandma\u003c/p\u003e  \u003cp\u003e\u0026gt; \"Hello, who is \u003cstrong\u003ethis\u003c/strong\u003e?\"\u003c/p\u003e  \u003ch3\u003eContext in Language Discussion Questions\u003c/h3\u003e  \u003cp\u003eIn English, you are able to follow certain (unconscious) rules to determine what a particular pronoun refers to.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eThe phrase \"\u003cstrong\u003ethey\u003c/strong\u003e have their exits and their entrances\" referred to a different \u003cstrong\u003ethey\u003c/strong\u003e in the two different sentences. What let you know what the pronoun referred to?\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWhat rules does the JavaScript engine use to infer the meaning of \u003ccode\u003ethis\u003c/code\u003e?\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u0026gt; Note: Interpreting the phrase \"Hello, who is \u003cstrong\u003ethis\u003c/strong\u003e?\" in English follows similar rules to the way the JavaScript engine determines the meaning of \u003ccode\u003ethis\u003c/code\u003e. It's based on the \u003cem\u003ecaller\u003c/em\u003e (unless another rule applies). You might keep this example in mind if you're trying to remember how JavaScript's \u003ccode\u003ethis\u003c/code\u003e rules work.\u003c/p\u003e  \u003ch2\u003ePredicting the behavior of JavaScript's \u003ccode\u003ethis\u003c/code\u003e keyword\u003c/h2\u003e  \u003cp\u003eIn your groups, for each of the following snippets, predict the output. Then, run the sample code and check if your answer was right. If you predicted wrong, try to figure out why the code behaved differently from what you expected.\u003c/p\u003e  \u003cp\u003ePay close attention - the rules aren't always what you think at first glance.\u003c/p\u003e  \u003ch3\u003eExample 1\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003evar telephone = {\u003cbr\u003e  origin: \"home phone\",\u003cbr\u003e  answer: function() {\u003cbr\u003e    console.log(`Hello, ${this.origin} called the function`);\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003etelephone.answer(); \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 2\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003evar telephone = {\u003cbr\u003e  origin: \"home phone\",\u003cbr\u003e  answer: function() {\u003cbr\u003e    console.log(`Hello, ${this.origin} called the function`);\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eanswer = telephone.answer;\u003cbr\u003eanswer(); \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 3\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003evar telephone = {\u003cbr\u003e  answer: function() {\u003cbr\u003e    console.log(`Hello, ${this.origin} called the function`);\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003evar cellphone = {\u003cbr\u003e  origin: \"cell phone\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003ecellphone.answer = telephone.answer;\u003cbr\u003ecellphone.answer(); \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 4\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003evar telephone = {\u003cbr\u003e  origin: \"home phone\",\u003cbr\u003e  answer: () =\u0026gt; {\u003cbr\u003e    console.log(`Hello, ${this.origin} called the function`);\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003etelephone.answer(); \u003c/code\u003e\u003c/pre\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g207e72228ebde0766c4f510089cbd5d2","title":"Discussion Questions: ES6 Features","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-es6-features\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-es6-features\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-es6-features/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eInterpret feature documentation\u003c/li\u003e \u003cli\u003eRecognize syntactic sugar\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eES6 Feature Review Questions\u003c/h2\u003e  \u003ch3\u003eSummary of Features\u003c/h3\u003e  \u003cp\u003eRead the \u003ca href=\"https://github.com/lukehoban/es6features#readme\"\u003eSummary of ES6 Features\u003c/a\u003e\u003c/p\u003e  \u003cp\u003eAs you read, keep several running lists:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eterms and concepts you don't recognize or don't understand\u003c/li\u003e \u003cli\u003eshorthand syntax for code that you've written in the past week\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDon't feel the need to understand what all of the language features mean right now - since you have the list of features you don't understand, you can return later to read more.\u003c/p\u003e  \u003ch3\u003eComparison of ES6 Features\u003c/h3\u003e  \u003cp\u003eNext, open the explorable \u003ca href=\"http://es6-features.org\"\u003eComparison of ES6 Features\u003c/a\u003e. Each person in your group should choose one feature to explore. After 10 minutes of exploration, you'll take turns explaining the feature to your teammates. You should be able to speak to\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe syntax of the new feature\u003c/li\u003e \u003cli\u003eWhat the feature is for\u003c/li\u003e \u003cli\u003eWhat syntax the feature replaces or is a shorthand for\u003c/li\u003e \u003cli\u003eSome example uses of the feature\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eGood features to choose:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eTemplate Literals\u003c/li\u003e \u003cli\u003eScoping\u003c/li\u003e \u003cli\u003eConstants\u003c/li\u003e \u003cli\u003eExtended Parameter Handling\u003c/li\u003e \u003cli\u003eEnhanced Object Properties\u003c/li\u003e \u003cli\u003eDestructuring Assignment\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eGroup Discussion\u003c/h2\u003e  \u003col\u003e \u003cli\u003eCompare your lists of terms you don't recognize. Do you as a group have explanations for features that you did not individually?\u003c/li\u003e \u003cli\u003eFor the feature you chose, explain the feature to your group.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eFurther Reading\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://tc39.github.io/process-document/\"\u003eTC39 Process\u003c/a\u003e - how does the ECMAScript standard get updated?\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://github.com/tc39/proposals\"\u003eTC39 Proposals\u003c/a\u003e - what is the status of proposals for changes to the ECMAScript standard?\u003c/li\u003e \u003c/ul\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g55db90ad1462b097493e996081d9cd8a","title":"Discussion Questions: Client-Server Communication","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"fewpjs-discussion-questions-client-server-communication-ii\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-client-server-communication-ii\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/fewpjs-discussion-questions-client-server-communication-ii/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain what the \u003ccode\u003efetch\u003c/code\u003e function is used for\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efetch\u003c/code\u003e to retrieve data from a server\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eExercise\u003c/h2\u003e  \u003cp\u003eTake a look at each of the code samples below. Each example will show you some code, as well as either the return value of what is logged to the console.\u003c/p\u003e  \u003col\u003e \u003cli\u003eHow does this piece of code work?\u003c/li\u003e \u003cli\u003eWhy does the code do what it does?\u003c/li\u003e \u003cli\u003eGiven this code sample, what can you learn or describe about JavaScript\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eExample 1\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst url = \"https://data.cityofnewyork.us/api/views/p94q-8hxh\" // CityBike Data from data.gov\u003cbr\u003econst data = fetch(url)\u003cbr\u003e\u003cbr\u003econsole.log(data) // Promise\u0026nbsp;{\u0026lt;pending\u0026gt;} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 2\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst url = \"https://data.cityofnewyork.us/api/views/p94q-8hxh\" // CityBike Data from data.gov\u003cbr\u003efetch(url).then(console.log)\u003cbr\u003e// Response\u0026nbsp;{type: \"cors\", url: \"https://data.cityofnewyork.us/api/views/p94q-8hxh\", redirected: false, status: 200, ok: true,\u0026nbsp;…} \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eExample 3\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003econst url = \"https://data.cityofnewyork.us/api/views/p94q-8hxh\" // CityBike Data from data.gov\u003cbr\u003efetch(url)\u003cbr\u003e  .then(function(response){\u003cbr\u003e    return response.json()\u003cbr\u003e  }).then(console.log)\u003cbr\u003e// {id: \"p94q-8hxh\", name: \"Citi Bike Live Station Feed (JSON)\", attribution: \"CitiBike\", attributionLink: \"http://citibikenyc.com/stations/json\", averageRating: 0,\u0026nbsp;…}``` \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eBonus\u003c/h3\u003e  \u003cp\u003eHow would you implement a function called \u003ccode\u003egetJSON\u003c/code\u003e so that the below code works as outlined?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst url = \"https://data.cityofnewyork.us/api/views/p94q-8hxh\" // CityBike Data from data.gov\u003cbr\u003e\u003cbr\u003egetJSON(url).then(console.log)\u003cbr\u003e// {id: \"p94q-8hxh\", name: \"Citi Bike Live Station Feed (JSON)\", attribution: \"CitiBike\", attributionLink: \"http://citibikenyc.com/stations/json\", averageRating: 0,\u0026nbsp;…}`` \u003c/code\u003e\u003c/pre\u003e","lockAt":null,"unlockAt":null,"graded":false}],"quizzes":[{"exportId":"ge598ddcc6b2aa4b36c1a15769dd06e14","title":"Exit Ticket - Communicating with the Server I","type":"Quizzes::Quiz","content":"","assignmentExportId":"g69843234f20af58212540c12d338de37","questionCount":1,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3ef7a7521c3043b900604b1865194cd9","title":"Exit Ticket - Communicating with the Server II","type":"Quizzes::Quiz","content":"","assignmentExportId":"g5a23ce0614a19f4c6295810be5db8ebc","questionCount":1,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5f45f4c12d55d3d0af490d144bbfd125","title":"Exit Ticket - Data Structures in JS","type":"Quizzes::Quiz","content":"","assignmentExportId":"gfd6b9385d3f517a771a598f89714bc1c","questionCount":1,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g4df7c6a5fe142b73c956f50422017107","title":"Exit Ticket - DOM and Events","type":"Quizzes::Quiz","content":"","assignmentExportId":"gda6decb9d8c0d21b44b1e3c6eb0d25c1","questionCount":2,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":2.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gedf70eef7197db060ac6612ccae89a1f","title":"Exit Ticket - request-response","type":"Quizzes::Quiz","content":"","assignmentExportId":"g368ab4f750471b7e93d8280d9140aa19","questionCount":1,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g46e99fcec12bec5a8e0858abe2cdf853","title":"P1 Quiz1 - JS Fundamentals","type":"Quizzes::Quiz","content":"","assignmentExportId":"gab37382c356f0f29f8dbdbe7b4103a4e","questionCount":9,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":9.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g06298dfee037bbc34186e60c454eb69c","title":"P1 Quiz2 - Functions in JS","type":"Quizzes::Quiz","content":"","assignmentExportId":"gfcd2dd86335e0769cd4d0266679e240c","questionCount":16,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":16.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"files":[{"type":"file","name":"code-challenge.bundle","size":4463,"files":null}]}