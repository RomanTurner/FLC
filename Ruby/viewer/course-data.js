window.COURSE_DATA = {"language":"en","lastDownload":"2021-07-06T11:52:05-04:00","title":"Phase 3","modules":[{"id":22123,"name":"Discussion Questions","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"g9ef0d88ccd32a4416fadae20a3723d52","items":[{"id":205546,"title":"Discussion: Ruby Fundamentals Review","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-ruby-fundamentals-review\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-ruby-fundamentals-review\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-ruby-fundamentals-review/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eTake 30 minutes and answer the following questions together with your group. Take turns playing around with the code provided in Pry or IRB.\u003c/p\u003e  \u003ch2\u003eQuestions\u003c/h2\u003e  \u003cp\u003e1 . What does the below method return?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef greet(name)\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\u003cbr\u003egreet(\"Steven\") #=\u0026gt; ? \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e2 . What does this method return?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef love_this_veggie?(vegetable)\u003cbr\u003e  if vegetable == \"broccoli\"\u003cbr\u003e    \"Nah, thanks\"\u003cbr\u003e  else\u003cbr\u003e    \"I love it!\"\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e3 . How would you select all of the words that start with the letter \"a\" from the below array?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[\"apple\", \"pear\", \"face\", \"champagne\", \"palm tree\", \"aardvark\", \"pineapple\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e4 . Write a method that takes in an argument of a sentence and returns the number of words in the sentence\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eword_count(\"Hi, isn't this a great and interesting sentence??\")\u003cbr\u003e # =\u0026gt; 8 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e5 . What will the following method return?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef friendly_greeting(name=nil)\u003cbr\u003e name ||= \"friend\"\u003cbr\u003e puts \"Hey there, #{name}\"\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e6 . What will the following \u003ccode\u003eputs\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebest_animal = \"cat\"\u003cbr\u003efavorite_animal = best_animal\u003cbr\u003eputs favorite_animal\u003cbr\u003e# =\u0026gt; ? \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e7 . What will the following \u003ccode\u003eputs\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef my_favorite_animal\u003cbr\u003e  \"cat\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ebest_animal = my_favorite_animal\u003cbr\u003e\u003cbr\u003eputs best_animal \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e8 . What error, if any, will the following code raise?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"Blink\" + 182 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e9 . How would you \u003ccode\u003eputs\u003c/code\u003e out any and all foods that are delicious?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efoods = {\"pie\" =\u0026gt; \"delicious\", \"broccoli\" =\u0026gt; \"not delicious\",\u003cbr\u003e\"carrots\" =\u0026gt; \"not delicious\", \"apples\" =\u0026gt; \"delicious\",\u003cbr\u003e\"peanut butter\" =\u0026gt; \"delicious\"} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e10 . Delete all elements of the \u003ccode\u003efoods\u003c/code\u003e hash that are \u003cem\u003enot\u003c/em\u003e delicious.\u003c/p\u003e  \u003cp\u003e11 . What is the return value of this method? ```ruby   character_names = [\"Daenerys Targaryen\", \"Jon Snow\" ,\"Arya Stark\", \"Tyrion Lannister\", \"Sansa Stark\", \"Cersei Lannister\", \"Margaery Tyrell\"]\u003c/p\u003e  \u003cp\u003edef downcase\u003cem\u003eall(array\u003c/em\u003eof\u003cem\u003estrings)     array\u003c/em\u003eof\u003cem\u003estrings.each do |one\u003c/em\u003estring|       one_string.downcase     end   end ```\u003c/p\u003e  \u003cp\u003e12 . Write a method that \u003ccode\u003eputs\u003c/code\u003e out a random Agent Cooper quote. \u003ccode\u003eruby   cooper = {       \"name\" =\u0026amp;gt; \"Dale Bartholomew Cooper\",       \"co-workers\"=\u0026amp;gt; [\"Diane\", \"Sheriff Harry S. Truman\"],       \"favorite_drink\" =\u0026amp;gt; \"Coffee\",       \"Quotes\" =\u0026amp;gt; [\"Damn fine cup of coffee\", \"Diane...\", \"This must be where pies go when they die\", \"That's what you do in a town where a yellow light still means slow down, not go faster.\", \"Every day, once a day, give yourself a present\", \"I have no idea where this will lead us, but I have a definite feeling it will be a place both wonderful and strange.\"]   } \u003c/code\u003e\u003c/p\u003e ","exportId":"g19f03f264693c862946d84906ab3cc96"},{"id":205548,"title":"Discussion: Object Orientation In Ruby","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-object-orientation-in-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-object-orientation-in-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-object-orientation-in-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eTake 30 minutes and answer the following questions together with your group. Take turns playing around with the code provided in Pry or IRB.\u003c/p\u003e\n\u003ch2\u003eQuestions\u003c/h2\u003e\n\u003cp\u003e1 . If the \u003ccode\u003eAnimal\u003c/code\u003e class is defined like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Animal\u003cbr\u003e\u003cbr\u003e  def species\u003cbr\u003e    \"cat\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow would you:\u003c/p\u003e\n\u003col type=\"a\"\u003e\n\u003cli\u003eMake a new instance of Animal?\u003c/li\u003e\n\u003cli\u003eputs out to the terminal, the species of that new Animal instance?\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e2 . Although we all know that cats are the best species, not all animals are cats (unfortunately). How could you change the \u003ccode\u003eAnimal\u003c/code\u003e class so that an instance of \u003ccode\u003eanimal\u003c/code\u003e can have its species set to any species at all?\u003c/p\u003e\n\u003cp\u003e3 . We have the following class, and the following two instances of that class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Animal\u003cbr\u003e\u003cbr\u003e  def species\u003cbr\u003e    \"cat\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003emaru = Animal.new\u003cbr\u003ehanna = Animal.new \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGiven the above, what will the following return? Why?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emaru == hanna \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e4 . Given the following class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Animal\u003cbr\u003e\u003cbr\u003e  def species \u003cbr\u003e    my_species = \"cat\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def say_species\u003cbr\u003e    puts \"Hi! I'm a #{my_species}\"\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat will happen when we invoke the following code?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emaru = Animal.new\u003cbr\u003emaru.say_species \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIs it broken? Why? How can you fix it?\u003c/p\u003e\n\u003cp\u003e5 . Reverse engineer this code (i.e., write the class that will make the code work as invoked below):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efrederick = Animal.new(\"bull\")\u003cbr\u003efrederick.species\u003cbr\u003e# =\u0026gt; \"bull\" \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e How can you instantiate, or \u003cem\u003einitialize\u003c/em\u003e, an instance of a class with a given value? What kind of variable would you use so that that value can be shared across instance methods within a class?\u003c/p\u003e\n\u003cp\u003e6 . Given the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Animal\u003cbr\u003e\u003cbr\u003e  def initialize(species)\u003cbr\u003e    @species = species\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003elil_bub = Animal.new(\"cat\") \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat is the relationship between \u003ccode\u003elil_bub\u003c/code\u003e and the \u003ccode\u003eAnimal\u003c/code\u003e class?\u003c/p\u003e","exportId":"g58637643c868b02be174ab5d175f5c62"},{"id":205552,"title":"Discussion: Collections and Classes","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-collections-and-classes\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-collections-and-classes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-collections-and-classes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eAs a group, go through each of the question files. Pick one member of the group to display the code on your table's monitor. Your group's goal is to code out, or write down, the answer to each question asked. Take turns answering each question and try to talk through your thought process while solving the problem. Finally, when your group is finished, open a pull request for your answers. Happy Coding!\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eView this repository on Github to see the additional files with the questions\u003c/strong\u003e\u003c/p\u003e ","exportId":"gb03ecdba5948938d5d9bb54afbfb2690"},{"id":205554,"title":"Discussion: Class Inheritance in Ruby","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-class-inheritance-in-ruby\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-class-inheritance-in-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-class-inheritance-in-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eThis activity will have you look at some code samples and reason about what's happening. You'll see what the return value of the method call is - your job is to answer, 'why?'\u003c/p\u003e  \u003cp\u003eWork through these problems with the people at your tables!\u003c/p\u003e  \u003cp\u003eFollow the instructions here:  \u003ca href=\"https://github.com/StevenNunez/chicken_Ser\"\u003ehttps://github.com/StevenNunez/chicken_Ser\u003c/a\u003e\u003c/p\u003e ","exportId":"g7942030c78f3f86e0032a51725deffd4"},{"id":205563,"title":"Discussion: Active Record","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-active-record\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-active-record\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-active-record/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003ePart One - Reading the Documentation\u003c/h2\u003e  \u003cp\u003eLooking at Documentation is an important part of programming. You don't have to memorize anything, but you should get familiar with the types of information you can find in different docs. For this exercise, using the ActiveRecord documentation \u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html#retrieving-objects-from-the-database\"\u003ehere\u003c/a\u003e, take a look at the following methods:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003ccode\u003efind\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.find_by\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.where\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.all\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.first\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.destroy\u003c/code\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWith your table mates and answer the following questions about each methods\u003c/p\u003e  \u003col\u003e \u003cli\u003eWhat argument or arguments does the method take?\u003c/li\u003e \u003cli\u003eWhat type of object does the method return?\u003c/li\u003e \u003cli\u003eWhat happens if none of the parameters match? (i.e. what if \u003ccode\u003eTweet.find(5)\u003c/code\u003e can't find that tweet? How about \u003ccode\u003eTweet.find_by(id: 6)\u003c/code\u003e? \u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003ePart Two - Name that SQL!\u003c/h2\u003e  \u003cp\u003ePretend that you have a \u003ccode\u003etweets\u003c/code\u003e table with two columns - \u003ccode\u003emessage\u003c/code\u003e and \u003ccode\u003euser_id\u003c/code\u003e. Given the code below, write in a notebook or on a whiteboard what SQL statements will fire when the following methods are called? \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Tweet \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003e\n\u003ccode\u003eTweet.all\u003c/code\u003e \u003c/li\u003e \u003cli\u003e\u003ccode\u003eTweet.find(5)\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eTweet.find_by(user_id: 7)\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eTweet.where(user_id: 7)\u003c/code\u003e \u003c/li\u003e \u003cli\u003e\u003ccode\u003eTweet.create(user_id: 5, message: 'making some coffee')\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eTweet.destroy(7)\u003c/code\u003e \u003c/li\u003e \u003c/ol\u003e ","exportId":"g7a8c34afce04b7169d1a3bd2ad7ad16a"}]},{"id":21879,"name":"Procedural Ruby: Variables and Methods","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ga1623e455c403cc617975f62c5fc9b12","items":[{"id":203654,"title":"Variables","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"variable-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/variable-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/variable-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/variable-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a variable.\u003c/li\u003e\n\u003cli\u003eCreate and reassign variables.\u003c/li\u003e\n\u003cli\u003eDefine pass-by-value as it relates to variables.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ieYmBf67u7A\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003e\u003ca href=\"http://learn-co-videos.s3.amazonaws.com/ruby/about-variables-ruby.mp4\"\u003eDownload MP4\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand variables, you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e\n\n\u003cp\u003eIf you would like to code along you can use: \u003ca href=\"https://repl.it/\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eVariables in Ruby\u003c/h2\u003e\n\n\u003cp\u003eLet's dive right in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efirst_number = 7\u003cbr\u003esecond_number = 14\u003cbr\u003e\u003cbr\u003esum = first_number + second_number\u003cbr\u003e\u003cbr\u003eputs sum\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe code above will print '21'.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrent_president = \"Barack Obama\"\u003cbr\u003eputs \"In 2016, the president was #{current_president}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code will print \u003ccode\u003eIn 2016, the president was Barack Obama.\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The syntax of \u003ccode\u003e#{current_president}\u003c/code\u003e simply injects the value of the\nvariable \u003ccode\u003ecurrent_president\u003c/code\u003e into the string. This is called \u003ca href=\"http://stackoverflow.com/questions/10076579/string-concatenation-vs-interpolation-in-ruby\"\u003eInterpolation\u003c/a\u003e\nand we'll cover it later -- in this case, you can think of it as \u003ccode\u003e\"In 2016,\nthe president was \" + current_president + \".\"\u003c/code\u003e where you are simply adding\ntogether multiple strings.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode\u003efirst_number\u003c/code\u003e, \u003ccode\u003esecond_number\u003c/code\u003e, \u003ccode\u003esum\u003c/code\u003e, and \u003ccode\u003ecurrent_president\u003c/code\u003e are all \u003cstrong\u003evariables\u003c/strong\u003e.  Much like in math, variables are words or characters that hold values. In algebra, however, variables are only placeholders for numbers. In Ruby, a variable can point to almost any type of value including numbers, strings, arrays, and hashes.\u003c/p\u003e\n\n\u003ch2\u003eWhat is a Variable\u003c/h2\u003e\n\n\u003cp\u003eAs the examples above show, variables allow us to store information. We tell our computer to set aside some space to hold that information so we can retrieve it later. A variable is the location where the information resides, when we need it we know just where to look.\u003c/p\u003e\n\n\u003ch4\u003eA Variable has a Name\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003ei\u003cbr\u003eresult\u003cbr\u003euser1\u003cbr\u003ebrkfstCereal\u003cbr\u003eall_words_in_the_dictionary\u003cbr\u003eCountryOfOrigin\u003cbr\u003eFIRST_NAME\u003cbr\u003eage\u003cbr\u003elongest_word\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese would all be valid variable names in Ruby. They would not all be good variable names. There is strong convention among Rubyists to use what is known as \u003cem\u003esnake case\u003c/em\u003e \u003ccode\u003ethis_is_an_example_of_snake_case\u003c/code\u003e words are separated by underscores.  This is opposed to \u003cem\u003ecamel case\u003c/em\u003e\n\u003ccode\u003ethisIsAnExampleOfCamelCase\u003c/code\u003e where upcased characters indicate word breaks.\u003c/p\u003e\n\n\u003cp\u003eVariable names should start with a lowercase letter. A variable that begins with an uppercase letter is known as a \u003cstrong\u003econstant\u003c/strong\u003e and has different characteristics.\u003c/p\u003e\n\n\u003cp\u003eThere are also some rules that mark invalid variable names:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# X Invalid X\u003cbr\u003e1st_place\u003cbr\u003eend\u003cbr\u003edanny's_age   \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA Ruby variable cannot start with a number, be a Ruby reserved word, or have punctuation or space characters.\u003c/p\u003e\n\n\u003ch4\u003eA Variable has a Value\u003c/h4\u003e\n\n\u003cp\u003eA variable's name is like a label on a container. Its value is what is stored inside that container. The name points to the value. Above, \u003ccode\u003ecurrent_president\u003c/code\u003e holds onto the value \"Barack Obama\" and \u003ccode\u003efirst_number\u003c/code\u003e has the value of the number 7. As we will see, the value of a variable can change even when its name stays the same.\u003c/p\u003e\n\n\u003ch4\u003eA Variable has a Type\u003c/h4\u003e\n\n\u003cp\u003eA variable's type is the type of the value it holds. Ruby is what is known as a \u003cem\u003edynamically typed\u003c/em\u003e language. That means the value of a variable can change its type and does not need to be explicitly and permanently defined. There is nothing stopping you from changing the value of \u003ccode\u003esum\u003c/code\u003e, which now is the number 21, to the string \"whatever I want\". \u003c/p\u003e\n\n\u003cp\u003eIt is also a \u003cem\u003estrongly typed\u003c/em\u003e language. This means a variable will never be automatically \u003cem\u003ecoerced\u003c/em\u003e to another type without you explicitly changing the type. Adding two numbers will return a number, 2 + 2 returns 4; adding two strings will return a string, \"2\" + \"2\" returns \"22\"; adding a number and a string will raise an error, 2 + \"2\" raises a \u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen you are building larger programs it is important to have in mind the type of the value that a variable refers to.\u003c/p\u003e\n\n\u003ch2\u003eCreating Variables\u003c/h2\u003e\n\n\u003cp\u003eVariables are assigned values using \u003ccode\u003e=\u003c/code\u003e (\"equal sign\"), called the assignment operator.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrent_president = \"Barack Obama\"\u003cbr\u003eputs \"In 2016, the president was #{current_president}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eReassigning Variables\u003c/h2\u003e\n\n\u003cp\u003eNow the variable \u003ccode\u003ecurrent_president\u003c/code\u003e is equal to the string Barack Obama. Let's say somehow Stephen Colbert got elected as president in the 2016 election. To update \u003ccode\u003ecurrent_president\u003c/code\u003e, you would just reassign the variable much in the same way that you first defined it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrent_president = \"Barack Obama\"\u003cbr\u003eputs \"In 2016, the president was #{current_president}.\"\u003cbr\u003e\u003cbr\u003ecurrent_president = \"Stephen Colbert\"\u003cbr\u003eputs \"Now, it being the year 2017, the president is #{current_president}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will print out:  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eIn 2016, the president was Barack Obama.\u003cbr\u003eNow, it being the year 2017, the president is Stephen Colbert.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eVariable Example\u003c/h2\u003e\n\n\u003cp\u003eWithin this repository is a file named \u003ccode\u003evariables.rb\u003c/code\u003e with some examples you can read and play with. \u003ca href=\"https://github.com/learn-co-curriculum/variable-readme/archive/1.0.0.zip\"\u003eDownload the Source Files\u003c/a\u003e for this lesson to see how it behaves.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e'This is data, it is a string. Strings start and end with  \" '\u003cbr\u003e\u003cbr\u003e\"Part of being data, or a string, is that ruby doesn't interpret it.\"\u003cbr\u003e\u003cbr\u003eputs 1+1\u003cbr\u003eputs \"1+1\"\u003cbr\u003e\u003cbr\u003eexample = \"The word 'example' is equal to this sentence, it's a named variable.\"\u003cbr\u003e\u003cbr\u003eputs example\u003cbr\u003eputs example\u003cbr\u003eputs example\u003cbr\u003e\u003cbr\u003eputs \"variables are any previously undefined word that\"\u003cbr\u003eputs \"starts with a lowercase letter.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning this file will print:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2\u003cbr\u003e1+1\u003cbr\u003eThe word 'example' is equal to this sentence, it's a named variable.\u003cbr\u003eThe word 'example' is equal to this sentence, it's a named variable.\u003cbr\u003eThe word 'example' is equal to this sentence, it's a named variable.\u003cbr\u003evariables are any previously undefined word that\u003cbr\u003estarts with a lowercase letter.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eBonus: 'Pass-By-Value'\u003c/h2\u003e\n\n\u003cp\u003eWe have seen that the variable itself, the location where information is stored, is distinct from the value stored at that location. Let's try something out to demonstrate this. We'll first declare a new variable with an original value, then do something to change that value, and finally we'll take a peek at our variable again.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Open up IRB and follow along\u003cbr\u003esound = \"squeak\"\u003cbr\u003e\u003cbr\u003e# We can peek at the value of sound by typing its name\u003cbr\u003esound\u003cbr\u003e# =\u0026gt; \"squeak\"\u003cbr\u003e\u003cbr\u003esound.upcase\u003cbr\u003e# =\u0026gt; \"SQUEAK\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, the moment of suspense has arrived! Now if we type \u003ccode\u003esound\u003c/code\u003e again what do you think its value will be?\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esound\u003cbr\u003e# =\u0026gt; \"squeak\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHmmm... \u003ccode\u003esound\u003c/code\u003e is still pointing to the original lowercased value. What does this tell us? When \u003ccode\u003eupcase\u003c/code\u003e did its thing to the variable, what MUST \u003ccode\u003esound\u003c/code\u003e have handed over to \u003ccode\u003eupcase\u003c/code\u003e for us to see this result?\u003c/p\u003e\n\n\u003cp\u003eOnly its \u003cem\u003evalue\u003c/em\u003e. In fact it must have made a \u003cem\u003ecopy of that value\u003c/em\u003e that \u003ccode\u003eupcase\u003c/code\u003e could operate on while still holding onto the original unaltered value. If this process did not happen the value 'squeak' wouldn't exist for us to look up and we'd only be able to see 'SQUEAK'.\u003c/p\u003e\n\n\u003cp\u003eThis is what we mean by pass-by-value. A variable makes a copy of the value it holds and passes the copy over to something else that alters or changes it. The alternative process is known as pass-by-reference. Here, changes to a variable would alter what is stored in the actual location it refers to. After the process was complete the variable would be holding a new and different value.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://zetcode.com/lang/rubytutorial/variables/\"\u003eZetCode Ruby Variables\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Variables_and_Constants\"\u003eWikibooks: Ruby Programming/Syntax/Variables and Constants\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"variables"},{"id":203655,"title":"Variable Assignment","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-variable-assignment\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-variable-assignment/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-variable-assignment\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-variable-assignment/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eAssign a local variable.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou will assign a local variable named \u003ccode\u003egreeting\u003c/code\u003e that is equal to \u003ccode\u003e\"Hello World\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou should first make sure the test suite is running correctly by running \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUpon the first run of the test suite you should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) ./variable.rb defined a local variable called greeting and set it equal to 'Hello World'\u003cbr\u003e     Failure/Error: greeting = get_variable_from_file('./variable.rb', \"greeting\")\u003cbr\u003e     NameError:\u003cbr\u003e       local variable `greeting' not defined in ./variable.rb.\u003cbr\u003e     # ./spec/spec_helper.rb:14:in `rescue in get_variable_from_file'\u003cbr\u003e     # ./spec/spec_helper.rb:11:in `get_variable_from_file'\u003cbr\u003e     # ./spec/variable_spec.rb:5:in `block (2 levels) in '\u003cbr\u003e\u003cbr\u003eFinished in 0.00075 seconds (files took 0.0839 seconds to load)\u003cbr\u003e1 example, 1 failure\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo solve this test failure, create a local variable \u003ccode\u003egreeting\u003c/code\u003e in the \u003ccode\u003evariable.rb\u003c/code\u003e file. Set \u003ccode\u003egreeting\u003c/code\u003e equal to the string \u003ccode\u003e\"Hello World\"\u003c/code\u003e. Run \u003ccode\u003elearn test\u003c/code\u003e to see if you did this correctly.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://pine.fm/LearnToProgram/chap_03.html\"\u003eLearn to Program\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://blog.teamtreehouse.com/an-introduction-to-rspec\"\u003eIntroduction to RSpec\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g0d37f4bac162ef4f7bd221263038e268"},{"id":203656,"title":"String Interpolation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"interpolation-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/interpolation-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/interpolation-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/interpolation-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover when and how to use string interpolation. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eInterpolate variables into strings \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhen to Use String Interpolation\u003c/h2\u003e\n\n\u003cp\u003eYou're a party planner for Beyonce's 35th birthday and you're using Ruby to help you out with the arrangements. There is a variable called \u003ccode\u003enum_of_attendees\u003c/code\u003e and since she's very popular, this variable points to the integer 547. You try and print the value of \u003ccode\u003enum_of_attendees\u003c/code\u003e to the screen with the code below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"There are num_of_attendees people coming to Beyonce's birthday party.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou expect this to print \"There are 547 people coming to Beyonce's birthday party\" but instead it prints \"There are num_of_attendees people coming to Beyonce's birthday party.\" Why is this?\u003c/p\u003e\n\n\u003cp\u003eWell, that's because variables need to be \u003cstrong\u003einterpolated\u003c/strong\u003e inside a string to get their value, and not just referenced by their name, to print to the screen. \u003c/p\u003e\n\n\u003ch2\u003eHow You Interpolate Variables into Strings\u003c/h2\u003e\n\n\u003cp\u003eTo interpolate, you wrap the variable like \u003ccode\u003e#{this}\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eLet's try again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"There are #{num_of_attendees} people coming to Beyonce's birthday party.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis prints \u003ccode\u003eThere are 547 people coming to Beyonce's birthday party.\u003c/code\u003e. Yay!\u003c/p\u003e\n\n\u003ch2\u003eAdditional Practice\u003c/h2\u003e\n\n\u003cp\u003eLet's drop into IRB and copy and paste the code from the following example. \u003c/p\u003e\n\n\u003cp\u003eLet's say you have a super hard question on your biology test asking you to identify the technical term for a group of flamingos. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eanswer = \"\u0026lt; fill in your answer here \u0026gt;\"\u003cbr\u003eputs \"A group of flamingos is called a #{answer}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, set the \u003ccode\u003eanswer\u003c/code\u003e variable equal to \u003ccode\u003e\"flamboyance\"\u003c/code\u003e and run the following code in IRB: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eanswer = \"flamboyance\"\u003cbr\u003eputs \"A group of flamingos is called a #{answer}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis prints \u003ccode\u003eA group of flamingos is called a flamboyance.\u003c/code\u003e to the screen.\u003c/p\u003e\n\n\u003cp\u003eNote that here you're declaring the variable \u003ccode\u003eanswer\u003c/code\u003e before calling \u003ccode\u003eputs\u003c/code\u003e. You need to do it in this order, because our program is read by the computer sequentially. When your computer gets to \u003ccode\u003e#{answer}\u003c/code\u003e, it won't know what that is if \u003ccode\u003eanswer\u003c/code\u003e isn't defined yet.\u003c/p\u003e\n\n\u003ch2\u003eAnother Way to Interpolate Variables into Strings\u003c/h2\u003e\n\n\u003cp\u003eSome Rubyists write this another way, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eanswer = \"Flamboyance\"\u003cbr\u003eputs \"A group of flamingos is called a \" + answer + \".\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere's debate about the best practice but most people here think the first way looks nicer and is easier for your fellow programmers to read.\u003c/p\u003e\n\n\u003ch4\u003eNote:\u003c/h4\u003e\n\n\u003cp\u003eInterpolation will only work on Strings wrapped in double quotes \u003ccode\u003e\"\"\u003c/code\u003e. Single quotes: \u003ccode\u003e''\u003c/code\u003e \u003cstrong\u003edo not support string interpolation\u003c/strong\u003e, so running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eanswer = 'Flamboyance'\u003cbr\u003eputs 'A group of flamingos is called a #{answer}.'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWill just print \u003ccode\u003eA group of flamingos is called a #{answer}.\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you were committed to using single quotes in such a case, it would be the right time to use the alternative method (\u003ccode\u003e'A group of flamingos is called a ' + answer + '.'\u003c/code\u003e) which would work just fine.\u003c/p\u003e","exportId":"string-interpolation"},{"id":203657,"title":"Methods","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-methods-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-methods-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-methods-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-methods-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll introduce methods, distinguish them from data types, and\ncover how to create and execute them in your Ruby program.\u003c/p\u003e\n\n\u003cp\u003eYou can follow along using IRB by typing \u003ccode\u003eirb\u003c/code\u003e in your terminal and copying the\nprovided code examples. Alternatively, in the \u003ccode\u003elib\u003c/code\u003e folder, there is also a\nfile, \u003ccode\u003eexample.rb\u003c/code\u003e, that you can use to copy the code examples into. You can run\nthis file from the lesson's main directory by typing \u003ccode\u003eruby lib/example.rb\u003c/code\u003e to\nsee what it produces.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how methods can define new routines and procedures for our code.\u003c/li\u003e\n\u003cli\u003eDefine a method with the \u003ccode\u003edef\u003c/code\u003e keyword, supply the method's body, and close\nthe method definition with the \u003ccode\u003eend\u003c/code\u003e keyword.\u003c/li\u003e\n\u003cli\u003eInvoke a method by calling it by name.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eVideo\u003c/h3\u003e\n\n\u003cp\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/njJB-fuE-qE?rel=0\u0026amp;modestbranding=1\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=njJB-fuE-qE\"\u003eIntroduction to Ruby Methods\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003eWhy Use Methods\u003c/h3\u003e\n\n\u003cp\u003eMethods define a new thing that your program can do. Variables are a mechanism\nto teach your Ruby program about data; methods teach your Ruby program about a\nnew routine or behavior it can use. Variables are like nouns, methods are like\nverbs.\u003c/p\u003e\n\n\u003cp\u003eFor example, imagine needing to say \"Hello World!\" ten times. You might do something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephrase = \"Hello World!\"\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat works pretty well. You made use of a variable to encapsulate the data you\nwanted to print and then the next ten lines literally print the phrase.\u003c/p\u003e\n\n\u003cp\u003eNow imagine later in your program you again want to say \"Hello World!\" ten\ntimes. The entire program would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephrase = \"Hello World!\"\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003e\u003cbr\u003e# ... The rest of the program\u003cbr\u003e\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have to repeat the literal procedure for printing the value of \u003ccode\u003ephrase\u003c/code\u003e ten\ntimes. If variables encapsulate and abstract data, methods encapsulate and\nabstract procedure. Instead of literally \u003ccode\u003eputs phrase\u003c/code\u003e ten times, we can instead\nbuild a method—a little machine that does exactly that whenever we want.\u003c/p\u003e\n\n\u003cp\u003eThe method would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef say_hello_world_ten_times\u003cbr\u003e  phrase = \"Hello World!\"\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, when we use the bareword \u003ccode\u003esay_hello_world_ten_times\u003c/code\u003e in our program, it\nwill invoke the method, running the code within the method. So the script above,\nsaying hello ten times, doing other things, then saying hello ten times again\ncould be rewritten as this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef say_hello_world_ten_times\u003cbr\u003e  phrase = \"Hello World!\"\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esay_hello_world_ten_times\u003cbr\u003e\u003cbr\u003e# ... The rest of the program\u003cbr\u003e\u003cbr\u003esay_hello_world_ten_times\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's way cleaner and follows the code principle \"Don't Repeat Yourself\" or\nDRY. We abstract the action or procedure of putting \"Hello World!\" ten times\ninto a method. By defining the method  \u003ccode\u003esay_hello_world_ten_times\u003c/code\u003e once, we can\n\"call\" or \"invoke\" the method as many times as we want in the future. Let's look\nat methods in greater detail.\u003c/p\u003e\n\n\u003ch3\u003eDefining a Method\u003c/h3\u003e\n\n\u003cp\u003eYou can define a method in Ruby with the \u003ccode\u003edef\u003c/code\u003e keyword. A method's name can\nbegin with any lowercase letter. Here's a quick example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting # Method Signature\u003cbr\u003e  puts \"Hello World\" # Method Body\u003cbr\u003eend # Method Closing\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: In the snippet above, we are using the \u003ccode\u003e#\u003c/code\u003e in a different way than\nwe've seen before. Here we are using it to put comments inside our code. Ruby\nwill see the \u003ccode\u003e#\u003c/code\u003e in the line of code (without the rest of the syntax required\nfor string interpolation) and will not interpret anything that follows. You can\nuse \u003ccode\u003e#\u003c/code\u003e in this way to add comments or clarifications to your code, either at\nthe end of a line of code as shown above or on a line by themselves. You can\nalso use it to \"comment out\" code (by putting \u003ccode\u003e#\u003c/code\u003e at the beginning of each line)\nif you want to keep the code from executing temporarily. This can come in handy\nduring debugging.\u003c/p\u003e\n\n\u003cp\u003eThe first line in the code snippet above, \u003ccode\u003edef greeting\u003c/code\u003e, is called the method\nsignature, it defines the basic properties of the method including the name of\nthe method, \u003ccode\u003egreeting\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOnce you 'open' a method definition with the \u003ccode\u003edef\u003c/code\u003e keyword, all subsequent lines\nin your program are considered the method's body, the actual procedure or code\nthat your method will run every time it's called.\u003c/p\u003e\n\n\u003cp\u003eYou must terminate every opening \u003ccode\u003edef\u003c/code\u003e of a method with a corresponding \u003ccode\u003eend\u003c/code\u003e in\norder to close the method body. If you don't correctly \u003ccode\u003eend\u003c/code\u003e a method, your\nprogram will have unexpected results or break entirely because of a syntax\nerror. A good practice is to define the method and then immediately close it\nbefore programming anything into the method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  # Leave a line break for the method body\u003cbr\u003eend # Immediately close the method.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we set up the method's structure first, ensuring a proper termination\nbefore adding any other complexity.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: It's also a great practice to indent methods correctly. The body of\na method should be indented two (2) spaces, placing it visually within the\nmethod. When you \u003ccode\u003eend\u003c/code\u003e the method, go back to the same indentation of the\n\u003ccode\u003edef\u003c/code\u003e, aligning the opening and closing of the method visually. Then you can\neasily define the body of the method and never worry about forgetting to \u003ccode\u003eend\u003c/code\u003e\nthe method.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\" # Now code the body of the method.\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInvoking a Method\u003c/h3\u003e\n\n\u003cp\u003eOnce you define a method, you can execute the method whenever you want by using\nthe method name in your code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting # Executing the method by name\u003cbr\u003e#=\u0026gt; \"Hello World\"\u003cbr\u003e\u003cbr\u003egreeting # Executing the method again\u003cbr\u003e#=\u0026gt; \"Hello World\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If you have been using IRB so far, exit out of it before continuing.\nThe remaining portion of this lesson involves bash commands you will need to\nenter into the terminal.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's try making a method we can use over and over. Make a new file called\n\u003ccode\u003egreeting.rb\u003c/code\u003e (you can use: \u003ccode\u003etouch greeting.rb\u003c/code\u003e from your terminal). Put the\nfollowing code in it:\u003c/p\u003e\n\n\u003cp\u003eFile: \u003ccode\u003egreeting.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSave your file and run it with \u003ccode\u003eruby greeting.rb\u003c/code\u003e. You'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ruby greeting.rb\u003cbr\u003e$\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou'll notice that when you run your program, nothing happens. Your program\nsuccessfully defined the method but it never executed it. Just because you built\na machine doesn't mean that you turned it on. Update your \u003ccode\u003egreeting.rb\u003c/code\u003e to\nentirely read:\u003c/p\u003e\n\n\u003cp\u003eFile: \u003ccode\u003egreeting.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSave your file and run it with \u003ccode\u003eruby greeting.rb\u003c/code\u003e. You'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ruby greeting.rb\u003cbr\u003eHello World\u003cbr\u003e$\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow your program actually executed the program. Update the code again to\nentirely read:\u003c/p\u003e\n\n\u003cp\u003eFile: \u003ccode\u003egreeting.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting\u003cbr\u003egreeting\u003cbr\u003egreeting\u003cbr\u003egreeting\u003cbr\u003egreeting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSave your file and run it with \u003ccode\u003eruby greeting.rb\u003c/code\u003e. You'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ruby greeting.rb\u003cbr\u003eHello World\u003cbr\u003eHello World\u003cbr\u003eHello World\u003cbr\u003eHello World\u003cbr\u003eHello World\u003cbr\u003e$\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe bareword \u003ccode\u003egreeting\u003c/code\u003e will execute the body of the defined method.\u003c/p\u003e\n\n\u003ch4\u003eWriting Code vs Reading About Code\u003c/h4\u003e\n\n\u003cp\u003eLet's end by talking briefly about one additional use of \u003ccode\u003e#\u003c/code\u003e. Programmers love\nconventions, or agreed upon rules that help them talk to each other about code.\nA common syntax convention for Ruby methods is to preface them with a \u003ccode\u003e#\u003c/code\u003e, and\nin subsequent lessons, you might see method names written with a \u003ccode\u003e#\u003c/code\u003e in front of\nthem. For example, if a method is named 'greeting', rubyists will often refer to \nit as \u003ccode\u003e#greeting\u003c/code\u003e. This is so that other rubyists can instantly recognize it as \na method, as opposed to a variable or a bareword or a class. But remember that \nwhen you write it in your code, it should be \u003ccode\u003egreeting\u003c/code\u003e and not \u003ccode\u003e#greeting\u003c/code\u003e.\u003c/p\u003e","exportId":"ga0633055c830f526bd79f9970690236d"},{"id":203658,"title":"Method Parameters","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-arguments-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-arguments-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-arguments-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-arguments-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover how to define a method, and how to add and use parameters within methods.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how parameters reference actual values supplied to a method\u003c/li\u003e\n\u003cli\u003eDefine methods that accept single parameters\u003c/li\u003e\n\u003cli\u003eDefine methods that accept multiple parameters\u003c/li\u003e\n\u003cli\u003eInvoke a method with all required parameters\u003c/li\u003e\n\u003cli\u003eUse a method's parameters within the body of the method\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003cp\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FJztnY9E854?rel=0\u0026amp;modestbranding=1\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=FJztnY9E854\"\u003eRuby Method Parameters\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eUnderstanding Parameters\u003c/h2\u003e\n\n\u003cp\u003eImagine needing to build a method that greets a person. We could code something\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hi, Ruby programmer!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method, when called, will print out to the terminal, the string \n\u003ccode\u003e\"Hi, Ruby programmer!\"\u003c/code\u003e. Try it out, open an IRB session by running \u003ccode\u003eirb\u003c/code\u003e from\nyour command line. Once you're in your IRB shell, paste in the code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hi, Ruby programmer!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// ♥ irb\u003cbr\u003e2.2.1 :001 \u0026gt; def greeting\u003cbr\u003e2.2.1 :002?\u0026gt;   puts \"Hi, Ruby programmer!\"\u003cbr\u003e2.2.1 :003?\u0026gt;   end\u003cbr\u003e =\u0026gt; :greeting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou've now defined the method. Notice that it did not execute. Type the\nfollowing into IRB to execute your method: \u003ccode\u003egreeting\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2.2.1 :004 \u0026gt; greeting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHi, Ruby programmer!\u003cbr\u003e =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs amazing as this method is, it's still pretty literal. It hard-codes, or\ndirectly specifies, the name of the person we are greeting as \u003ccode\u003e\"Ruby\nprogrammer\"\u003c/code\u003e. If we wanted to build a method that can greet \u003cem\u003eanyone\u003c/em\u003e, even\nPython programmers, we'd have to re-implement the majority of the original logic\nfrom \u003ccode\u003egreeting\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting_python\u003cbr\u003e  puts \"Hello, Python programmer!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice the only things that changed are the method name and the language name\n\u003ccode\u003e\"Python\"\u003c/code\u003e in the body of the method. It's as though that information should be\nspecifiable or configurable when you call the method, otherwise we'd have to\nbuild every permutation of the method. In other words, we'd have to re-write the\nmethod for every single person we want to greet. We want our method to be more\ndynamic, more abstract, \u003cem\u003emore re-usable\u003c/em\u003e. It should maintain the elements that\nwill always be the same, no matter who we greet, and allow us to change, or swap\nout, the name of the person we are greeting. This is dynamic, as opposed to\n\"hard-coded\".\u003c/p\u003e\n\n\u003cp\u003eGood news, that's exactly what method parameters are for:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, we define our method to take in a parameter by following the method name\nwith parentheses enclosing a variable name: \u003ccode\u003egreeting(name)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen, we use \u003cstrong\u003estring interpolation\u003c/strong\u003e inside the method body to \u003ccode\u003eputs\u003c/code\u003e out a\ngreeting using whatever \u003ccode\u003ename\u003c/code\u003e was passed into the parameter when the method is\ncalled. String interpolation allows users to use a Ruby variable to render a\nvalue inside of a string. In other words, if we have a variable, \u003ccode\u003ename\u003c/code\u003e, that\npoints to a value of \u003ccode\u003e\"Sophie\"\u003c/code\u003e, string interpolation will let us use that\n\u003ccode\u003ename\u003c/code\u003e variable inside a string to render, or \u003ccode\u003eputs\u003c/code\u003e out, a string that contains\nthe word \u003ccode\u003e\"Sophie\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo interpolate a variable into a string, wrap that variable name inside curly\nbraces, preceded by a pound sign: \u003ccode\u003e#{variable_name}\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's call our method and see it in action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Sophie\")\u003cbr\u003e# \u0026gt; Hello, Sophie!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Ian\")\u003cbr\u003e# \u0026gt; Hello, Ian!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take a closer look at how to add parameters to our methods.\u003c/p\u003e\n\n\u003ch2\u003eDefining Method Parameters\u003c/h2\u003e\n\n\u003cp\u003eTo add parameters to a method, you specify them in the method signature — the\nline that starts with \u003ccode\u003edef\u003c/code\u003e. Simply add parentheses after the name of the method\nand create a placeholder name for your parameter.\u003c/p\u003e\n\n\u003cp\u003eFor example, if I want to write a method called \u003ccode\u003egreeting_a_person\u003c/code\u003e that accepts\na parameter of a person's name, I would do it like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    #method name      #parameter\u003cbr\u003edef greeting_a_person(name)\u003cbr\u003e  \"Hello #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eParameters create new local variables that can be used within the method. When\nyou name a parameter, you are defining what bare word you want to use to access\nthat data, just like when you create a variable. Parameters follow the same rules\nas local variables: they can be any word that starts with a lowercase letter and\nthey should be as descriptive of the data as possible.\u003c/p\u003e\n\n\u003cp\u003eIn our \u003ccode\u003e#greeting\u003c/code\u003e method example, we are saying: When you call the \u003ccode\u003e#greeting\u003c/code\u003e\nmethod with an \u003cstrong\u003eargument\u003c/strong\u003e of \u003ccode\u003e\"Sophie\"\u003c/code\u003e, set a variable \u003ccode\u003ename\u003c/code\u003e equal to the\nvalue of \u003ccode\u003e\"Sophie\"\u003c/code\u003e. When we call  the \u003ccode\u003e#greeting\u003c/code\u003e method with an argument of\n\u003ccode\u003e\"Ian\"\u003c/code\u003e, set a variable \u003ccode\u003ename\u003c/code\u003e equal to \u003ccode\u003e\"Ian\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWait, \u003cem\u003eargument?\u003c/em\u003e Well, you see... when we're \u003cem\u003edefining\u003c/em\u003e a method, we use the term\nparameter to refer to a value passed in to the method. When \u003cem\u003ecalling\u003c/em\u003e the method\nand passing in a value, the value passed in is referred to as an argument. Don't\nworry if you mix the two up (we do too sometimes); it is a minor semantic\ndifference.  We are just pointing this out as it will become relevant in a\nmoment.\u003c/p\u003e\n\n\u003ch3\u003eDefining Methods with Multiple Parameters\u003c/h3\u003e\n\n\u003cp\u003eYou can define a method to accept as many parameters as you want. Let's try\ncreating a method that accepts two parameters: a person's name and their\nprogramming language of choice.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  # method name      first_parameter, second_parameter\u003cbr\u003edef greeting_programmer(name, language)\u003cbr\u003e  puts \"Hello, #{name}. We heard you are a great #{language} programmer.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting_programmer(\"Sophie\", \"Ruby\")\u003cbr\u003e# \u0026gt; Hello, Sophie. We heard you are a great Ruby programmer.\u003cbr\u003e\u003cbr\u003egreeting_programmer(\"Steven\", \"Elixir\")\u003cbr\u003e# \u0026gt; Hello, Steven. We heard you are a great Elixir programmer.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo accept multiple parameters, simply separate the bare words in the parameter\nlist with commas.\u003c/p\u003e\n\n\u003ch3\u003eRequired Parameters\u003c/h3\u003e\n\n\u003cp\u003eOnce you define parameters for a method, they become required when you invoke or\ncall the method. If you define a method that accepts a singular parameter, when\nyou call that method, you must supply a value, otherwise, you get an\n\u003ccode\u003eArgumentError\u003c/code\u003e. Here's an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}!\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting # I explicitly call the method without a value for the argument `name`\u003cbr\u003e# \u0026gt; ArgumentError: wrong number of arguments (0 for 1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAh, here is where Ruby is being specific semantically. The error is called\n\u003ccode\u003eArgumentError\u003c/code\u003e because Ruby is expecting an \u003cem\u003eargument\u003c/em\u003e to be passed  to\n\u003ccode\u003e#greeting\u003c/code\u003e. It expects this because the method definition includes a parameter.\u003c/p\u003e\n\n\u003cp\u003eIn Ruby, all arguments are required when you invoke the method. You can't define\na method to accept a parameter and call the method without an argument.\nAdditionally, a method defined to accept one parameter will raise an error if\ncalled with more than one argument.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}!\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting(\"Sophie\", \"Ruby\") # The method accepts 1 argument and I supplied 2.\u003cbr\u003e# \u0026gt; ArgumentError: wrong number of arguments (2 for 1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy default, all parameters defined in a method are required in order to correctly\ninvoke (or \"call\", or \"execute\") that method.\u003c/p\u003e\n\n\u003ch2\u003eUsing Parameters in Methods\u003c/h2\u003e\n\n\u003cp\u003eNow that we know how to define a method with parameters, let's take a closer look\nat using those parameters, that data, within the method. Once again, our greeting\nmethod;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we define a method with parameters we are defining a bareword that we can\nuse to reference the actual value supplied to the method upon invocation. We\nbuilt a method that will greet a specified person. In order to write code in our\nmethod to actually greet any given person, we need a placeholder — a way to refer\nto a generic person's name. This is a parameter.\u003c/p\u003e\n\n\u003cp\u003eWhen we build that method we might ask ourselves, \"who is this method designed\nto greet?\". The answer is \"anyone, it doesn't matter.\" That's what makes the\nmethod abstract, the detail of who it greets is hidden until the method is\nactually invoked: \u003ccode\u003egreeting(\"Sophie\")\u003c/code\u003e. Only then do we know that the method\ngreets Sophie. The value of \u003ccode\u003ename\u003c/code\u003e is only supplied upon invocation.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe bareword, in this case \u003ccode\u003ename\u003c/code\u003e, that we use as the parameter's name in the\nmethod signature becomes a local variable within the method.\u003c/strong\u003e Through that\nvariable we can reference the value of the parameter supplied at invocation.\u003c/p\u003e\n\n\u003cp\u003eWith the code above, when we say: \u003ccode\u003egreeting(\"Sophie\")\u003c/code\u003e, the value of the\nparameter \u003ccode\u003ename\u003c/code\u003e is \u003ccode\u003e\"Sophie\"\u003c/code\u003e. During the particular runtime invoked by\n\u003ccode\u003egreeting(\"Sophie\")\u003c/code\u003e, any reference to \u003ccode\u003ename\u003c/code\u003e will have the value of \u003ccode\u003e\"Sophie\"\u003c/code\u003e,\nallowing the method to behave as intended.\u003c/p\u003e\n\n\u003cp\u003eSimilarly, when we say: \u003ccode\u003egreeting(\"Ian\")\u003c/code\u003e, the value of the parameter \u003ccode\u003ename\u003c/code\u003e is\n\u003ccode\u003e\"Ian\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eMethod parameters simply create local variables for you to refer to the value\nused when the method is actually invoked.\u003c/p\u003e\n\n\u003ch2\u003eA Note on Calling Methods\u003c/h2\u003e\n\n\u003cp\u003eIn the above examples, we're calling methods with parentheses, e.g.,\n\u003ccode\u003egreeting('Sophie')\u003c/code\u003e. But you can also omit the parentheses: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen a method takes a parameter, omitting the parentheses is generally\nconsidered bad style, as it's a bit more difficult to understand what's going\non. However, when you want to call a method without any parameters, e.g.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef say_hi\u003cbr\u003e  puts \"Hi!\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esay_hi\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eomitting the parentheses helps to clear things up. You might also see some\nDomain Specific Languages (DSLs) that prefer to omit parentheses. You've\nprobably already seen a little bit of RSpec's DSL, for example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe \"MyRubyThing\" do\u003cbr\u003e  it \"runs\" do\u003cbr\u003e    # test here\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003edescribe\u003c/code\u003e and \u003ccode\u003eit\u003c/code\u003e are just methods — the above could have been written\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe(\"MyRubyThing\") do\u003cbr\u003e  it(\"runs\") do\u003cbr\u003e    # test here\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ebut I think you'll agree that it looks nicer (and is easier to read) without the\nparentheses.\u003c/p\u003e","exportId":"method-parameters"},{"id":203659,"title":"Method Parameters Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"method-arguments-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/method-arguments-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-arguments-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-arguments-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eDefine a method that takes in an argument and uses that argument in the\nmethod body.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDefine a method that takes in two arguments and uses both arguments in the\nmethod body.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou'll be coding your methods in \u003ccode\u003elib/introduction.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#introduction\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eWe'll be using our test errors to guide us through the requirements for this lab, so let's run the test suite to get started. To do that, run \u003ccode\u003elearn test\u003c/code\u003e in your terminal. Let's take a look at the first error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) #introduction takes in an argument of a name and puts out a phrase with that name using string interpolation\u003cbr\u003e     Failure/Error: expect{introduction(\"Josh\")}.to output(\"Hi, my name is Josh.\\n\").to_stdout\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `introduction' for #\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (3 levels) in '\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (2 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWow, that's a lot of information. The important part for us though is the line that tells us \u003cem\u003ewhat kind of error\u003c/em\u003e we are experiencing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNoMethodError:\u003cbr\u003e       undefined method `introduction`\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooks like our test is expecting to test a method called \u003ccode\u003e#introduction\u003c/code\u003e. Let's define that method in \u003ccode\u003elib/introduction.rb\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/introduction.rb\u003cbr\u003e\u003cbr\u003edef introduction\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we'll run our test suite again. You should see the following error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) #introduction takes in an argument of a name and puts out a phrase with that name using string interpolation\u003cbr\u003e     Failure/Error:\u003cbr\u003e       def introduction\u003cbr\u003e       end\u003cbr\u003e\u003cbr\u003e     ArgumentError:\u003cbr\u003e       wrong number of arguments (given 1, expected 0)\u003cbr\u003e     # ./lib/introduction.rb:1:in `introduction'\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (3 levels) in '\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (2 levels) in '\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce again the important part of this error message is the part where the type\nof error is described:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArgumentError:\u003cbr\u003e       wrong number of arguments (given 1, expected 0)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have an ArgumentError. The test is trying to call our \u003ccode\u003e#introduction\u003c/code\u003e\nmethod with an argument (notice it says \u003ccode\u003egiven 1\u003c/code\u003e) but we haven't defined our method\nto take in any arguments, the \u003ccode\u003eexpected 0\u003c/code\u003e part of the error message.\u003c/p\u003e\n\n\u003cp\u003eLet's fix that now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/introduction.rb\u003cbr\u003e\u003cbr\u003edef introduction(name)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test again and you'll see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) #introduction takes in an argument of a name and puts out a phrase with that name using string interpolation\u003cbr\u003e     Failure/Error: expect{introduction(\"Josh\")}.to output(\"Hi, my name is Josh.\\n\").to_stdout\u003cbr\u003e\u003cbr\u003e       expected block to output \"Hi, my name is Josh.\\n\" to stdout, but output nothing\u003cbr\u003e       Diff:\u003cbr\u003e       @@ -1,2 +1 @@\u003cbr\u003e       -Hi, my name is Josh.\u003cbr\u003e\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (2 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow the important part of our error message is here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpected block to output \"Hi, my name is Josh.\\n\" to stdout, but output nothing\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur test is expecting our method to \u003ccode\u003eputs\u003c/code\u003e out the exact phrase, using the value\nof the \u003ccode\u003ename\u003c/code\u003e argument that the method is called with.\u003c/p\u003e\n\n\u003cp\u003eLet's fix that:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/introduction.rb\u003cbr\u003e\u003cbr\u003edef introduction(name)\u003cbr\u003e  puts \"Hi, my name is #{name}.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test again and we should be passing the first of our two tests. Use the\ntest output and the procedure we just followed to get the second test passing.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#introduction_with_language\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eDefine a method, \u003ccode\u003e#introduction_with_language\u003c/code\u003e that takes in two arguments,\n\u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elanguage\u003c/code\u003e and outputs the phrase: `\"Hi, my name is #{name} and I am\nlearning to program in #{language}.\"\u003c/p\u003e","exportId":"g73e5099a8cad78b9696e078aaf796e50"},{"id":203660,"title":"Default Arguments","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"methods-default-arguments\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/methods-default-arguments/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/methods-default-arguments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/methods-default-arguments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll introduce methods that take in optional arguments and cover why they're important to programming. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a method to take in optional arguments by assigning a default value. \u003c/li\u003e\n\u003cli\u003eCall a method with and without its optional arguments. \u003c/li\u003e\n\u003cli\u003eDefine a method that takes in both required and optional arguments.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Optional Arguments?\u003c/h2\u003e\n\n\u003cp\u003eWe should constantly strive for our code to be dynamic and flexible. As programmers, we are lazy (which is a virtue). Consequently, we want the code we write to be re-usable. \u003c/p\u003e\n\n\u003cp\u003eIf we define a method, \u003ccode\u003e#greeting\u003c/code\u003e, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello, Ruby programmer!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have to re-define or re-write that method every time we'd like to use it to greet someone else who might not be a Ruby programmer. Since that's way too much work for us,  we'll define our method to take in an \u003cem\u003eargument\u003c/em\u003e of someone's name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our method is flexible and dynamic. It can be used again and again to greet different people. \u003c/p\u003e\n\n\u003cp\u003eBut what if we don't know the name of the person we are trying to greet? We can make this method even more flexible by making the \u003ccode\u003ename\u003c/code\u003e argument optional. We do this by using optional, or default, arguments. \u003c/p\u003e\n\n\u003ch2\u003eDefault Arguments\u003c/h2\u003e\n\n\u003cp\u003eIn order to define a method that optionally takes in an argument, we define our method to take in an argument with a \u003cstrong\u003edefault value\u003c/strong\u003e. By defining our method with default arguments, we make it possible to call the method with optional arguments, i.e. with or without arguments. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#             assigning a default value\u003cbr\u003edef greeting(name = \"Ruby programmer\")\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn our argument list, \u003ccode\u003e(name = \"Ruby programmer\")\u003c/code\u003e, we simply assign the argument \u003ccode\u003ename\u003c/code\u003e a default value of \u003ccode\u003e\"Ruby programmer\"\u003c/code\u003e. By doing so, we are really saying:\u003c/p\u003e\n\n\u003cp\u003eIf the method is invoked without any arguments, i.e. like this: \u003ccode\u003egreeting\u003c/code\u003e, Ruby will assume the value of the \u003ccode\u003ename\u003c/code\u003e variable inside the method to be \u003ccode\u003e\"Ruby programmer\"\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eHowever, if the method is invoked with an argument, \u003ccode\u003egreeting(\"Sophie\")\u003c/code\u003e, Ruby will assign the variable \u003ccode\u003ename\u003c/code\u003e to the string \u003ccode\u003e\"Sophie\"\u003c/code\u003e inside the method. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting\u003cbr\u003e# \u0026gt; Hello, Ruby programmer!\u003cbr\u003e\u003cbr\u003egreeting(\"Sophie\")\u003cbr\u003e# \u0026gt; Hello, Sophie!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith default arguments, our once simple machine becomes profoundly useful and abstract.\u003c/p\u003e\n\n\u003ch2\u003eAdding Default Arguments\u003c/h2\u003e\n\n\u003cp\u003eDefault arguments are easy to add, you simply assign them a default value with \u003ccode\u003e=\u003c/code\u003e (\"equals\") in the argument list. There's no limit to the number of arguments that you can make default.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name=\"Ruby programmer\", language=\"Ruby\")\u003cbr\u003e  puts \"Hello, #{name}. We heard you are a great #{language} programmer.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take a look at the different ways we can call this method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting\u003cbr\u003e# \u0026gt; Hello, Ruby programmer. We heard you are a great Ruby programmer. \u003cbr\u003e\u003cbr\u003egreeting(\"Sophie\")\u003cbr\u003e# \u0026gt; Hello, Sophie. We heard you are a great Ruby programmer. \u003cbr\u003e\u003cbr\u003egreeting(\"Steven\", \"Elixir\")\u003cbr\u003e# \u0026gt; Hello, Steven. We heard you are a great Elixir programmer.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUsing Default Argument and Required Arguments\u003c/h2\u003e\n\n\u003cp\u003eIt is possible to define a method that takes in both required and default arguments. To do so, however, we must place the default argument at the end of the argument list in the method definition. \u003c/p\u003e\n\n\u003cp\u003eTake a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name, language=\"Ruby\")\u003cbr\u003e  puts \"Hello, #{name}. We heard you are a great #{language} programmer.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's call our \u003ccode\u003e#greeting\u003c/code\u003e method with and without an explicit \u003ccode\u003elanguage\u003c/code\u003e argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Sophie\", \"Ember.js\")\u003cbr\u003e# \u0026gt; Hello, Sophie. We heard you are a great Ember.js programmer. \u003cbr\u003e\u003cbr\u003egreeting(\"Dan\")\u003cbr\u003e# \u0026gt; Hello, Dan. We heard you are a great Ruby programmer.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt works! Why must we place the default argument at the end of the argument list?\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at what would happen if we didn't:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(language=\"Ruby\", name)\u003cbr\u003e  puts \"Hello, #{name}. We heard you are a great #{language} programmer.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, what happens when we try to call our method without an explicit \u003ccode\u003elanguage\u003c/code\u003e argument?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Sophie\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou might expect it to break. Or you might expect it to think that the \u003ccode\u003elanguage\u003c/code\u003e variable is being set equal to \u003ccode\u003e\"Sophie\"\u003c/code\u003e in this method call. \u003c/p\u003e\n\n\u003cp\u003eNeither of those things will happen. The method will work as we intended because Ruby is smart and has a few tricks up its sleeve to help determine what method arguments are being used where in a method's body. \u003c/p\u003e\n\n\u003cp\u003eHowever, defining the default argument first is confusing. We can understand this from our very reasonable expectations that the above method invocation would break. For this reason, it is conventional to place any default arguments at the end of an argument list when defining a method that takes in both required and default arguments. \u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eMethod arguments, both required and optional, make methods powerfully abstract and dynamic machines that are easy to build yet very flexible and adaptable to different situations and requirements. Get used to defining methods with required and default arguments and calling them correctly.\u003c/p\u003e","exportId":"default-arguments"},{"id":203661,"title":"Say Hello - Default Arguments Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"say-hello-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/say-hello-ruby/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/say-hello-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/say-hello-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild a method that can be called with an optional argument by defining that method with a default argument.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou will build a method called \u003ccode\u003esay_hello\u003c/code\u003e. This method should accept the argument of a person's name. It then should print \u003ccode\u003e\"Hello \"\u003c/code\u003e with the name followed by an exclamation point (don't forget that space after the \"Hello\"). For instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# I call on the method, say_hello, and give it the string \"Gabriela\" \u003cbr\u003esay_hello(\"Gabriela\")\u003cbr\u003e\u003cbr\u003e# The method prints this text to the screen:\u003cbr\u003eHello Gabriela!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere is one more thing this method should do: if you call on this method and forget to give it the name of a person, it should just say, \u003ccode\u003e\"Hello Ruby Programmer!\"\u003c/code\u003e. Use a default argument to accomplish this!\u003c/p\u003e\n\n\u003ch2\u003eSteps\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRun \u003ccode\u003elearn test\u003c/code\u003e to see where you stand. \n\n\u003cul\u003e\n\u003cli\u003eYou probably got two NoMethodErrors. This means the test was looking for a method called \u003ccode\u003esay_hello\u003c/code\u003e but couldn't find it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDefine the method in \u003ccode\u003esay_hello.rb\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eRun \u003ccode\u003elearn test\u003c/code\u003e again. Are you getting a different error? If you haven't seen this error, guess what it's trying to tell you then Google it with the word \"ruby\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGet all the tests to pass!\u003c/li\u003e\n\u003cli\u003eOnce all of the tests are passing, use \u003ccode\u003elearn submit\u003c/code\u003e to submit your lab. \u003c/li\u003e\n\u003c/ol\u003e","exportId":"g0163b243905c41fc9ad2d0d2a2b43335"},{"id":203662,"title":"Puts Print and Return","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"puts-print-and-return-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/puts-print-and-return-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/puts-print-and-return-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/puts-print-and-return-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover how the \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003ecommands display Ruby code to the console, and then explain the concept of return values in Ruby.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine and distinguish \u003ccode\u003eputs\u003c/code\u003e from \u003ccode\u003eprint\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIdentify implicit return values in Ruby syntax.\u003c/li\u003e\n\u003cli\u003eDistinguish between the display outputs of \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003efrom their return values.\u003c/li\u003e\n\u003cli\u003eUse the explicit \u003ccode\u003ereturn\u003c/code\u003e keyword.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003e\n\u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eputs\u003c/code\u003e (short for \"out\u003cstrong\u003eput s\u003c/strong\u003etring\") and \u003ccode\u003eprint\u003c/code\u003e commands are both used to display in the console the results of evaluating Ruby code. The primary difference between them is that \u003ccode\u003eputs\u003c/code\u003e adds a new line after executing, and \u003ccode\u003eprint\u003c/code\u003e does not.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e3.times { print \"Hello!\" }\u003cbr\u003e# \u0026gt; Hello!Hello!Hello!\u003cbr\u003e\u003cbr\u003e3.times { puts \"Hello!\" }\u003cbr\u003e# \u0026gt; Hello!\u003cbr\u003e# \u0026gt; Hello!\u003cbr\u003e# \u0026gt; Hello!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy default, Ruby doesn't display any output. The methods \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e are a great way to explicitly tell the program to display specific information. Without these printing methods, Ruby will read the line, but not print anything out.\u003c/p\u003e\n\n\u003ch3\u003eBonus: How Puts and Print put and print\u003c/h3\u003e\n\n\u003cp\u003eHow do the \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e methods actually output text to your console? They use the \u003ccode\u003e$stdout\u003c/code\u003e global variable provided to us by Ruby. (You don't need to worry about writing global variables right now.) For the purposes of understanding how \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e work, we just need to understand the following:\u003c/p\u003e\n\n\u003cp\u003eRuby uses the \u003ccode\u003e$stdout\u003c/code\u003e global variable to communicate with your computers standard output stream (this happens through various other intermediaries which we won't delve into now). So in a basic sense, \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e actually use the \u003ccode\u003e$stdout\u003c/code\u003e variable to send the information to the output stream on your computer which communicates with your operating system and outputs that information to the console.\u003c/p\u003e\n\n\u003cp\u003eYou can absolutely employ \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e without understanding everything that was just described. But if you do understand it, then you now have a basic sense of what is happening under the hood of these methods.\u003c/p\u003e\n\n\u003ch2\u003eReturning Values\u003c/h2\u003e\n\n\u003cp\u003eWhile methods like \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e allow us to output to the console, this is different from Ruby's concept of a \u003cem\u003ereturn value\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eA return value is the data returned to the program by the execution of a method, the assignment of a variable, actually...\u003c/p\u003e\n\n\u003cp\u003eEverything in Ruby has a return value!\u003c/p\u003e\n\n\u003cp\u003eFor instance:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003eCode\u003c/th\u003e\n    \u003cth\u003eReturn Value\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\"Hello world\"\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e\"Hello world\"\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e6 + 3\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e9\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003epresident = \"Obama\"\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e\"Obama\"\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003etotal = 6 + 3\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e9\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eputs \"hello world\"\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003enil\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eprint \"hello world\"\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003enil\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eYou may notice that the \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e methods, when run in IRB, print values on the screen and then display a line like this: \u003ccode\u003e=\u0026gt; nil\u003c/code\u003e. This is because \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e may print the value you want, but instead of \u003cem\u003ereturning\u003c/em\u003e that value, they return \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eReturn Values of Methods\u003c/h3\u003e\n\n\u003cp\u003eMethods are like vending machines. When you use a vending machine you just put in two arguments, the number (C7) and your money. We already know how to use arguments, but then your vending machine might do two things. One, it will make a noise saying that everything worked, beep beep. Then it gives you the soda. The soda is the return type. But those beeps? Are you able to do anything with them? Nope! That's like puts: it just tells you stuff and then goes into the ether! Gone forever.\u003c/p\u003e\n\n\u003cp\u003eEvery method in Ruby returns a value by default. This returned value will be the value of the last statement.\u003c/p\u003e\n\n\u003cp\u003eFor example, let's look at this method called \u003ccode\u003erestaurant\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef restaurant\u003cbr\u003e  restaurant_name = \"Guy's American Kitchen \u0026amp; Bar\"\u003cbr\u003e  cuisine = \"american\"\u003cbr\u003e  motto = \"Welcome to Flavor Town!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe return value of the \u003ccode\u003erestaurant\u003c/code\u003e method is \u003ccode\u003e\"Welcome to Flavor Town!\"\u003c/code\u003e because that was the last statement evaluated.\u003c/p\u003e\n\n\u003cp\u003eSay you're the best chef in the world, Guy Fieri. To make a method that just prints your name and returns \u003ccode\u003enil\u003c/code\u003e, you could write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef print_name\u003cbr\u003e  puts \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo write a method that returns your name but doesn't print anything, you could write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef return_name\u003cbr\u003e  \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo both print and return your name, you could write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef print_and_return_name\u003cbr\u003e  puts \"Guy Fieri\"\u003cbr\u003e  \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you accidentally switched the order of the lines inside the method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef broken_print_and_return_name\u003cbr\u003e  \"Guy Fieri\"\u003cbr\u003e  puts \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe method would instead print \"Guy Fieri\" and return \u003ccode\u003enil\u003c/code\u003e. This is because the last line that was evaluated was \u003ccode\u003eputs ...\u003c/code\u003e and the return value of a \u003ccode\u003eputs\u003c/code\u003e, as seen in the table above, is always \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eThe Return Keyword\u003c/h4\u003e\n\n\u003cp\u003eThere is one other way to return a value from a method and that is to use the \u003ccode\u003ereturn\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef stylish_chef\u003cbr\u003e  best_hairstyle = \"Guy Fieri\"\u003cbr\u003e  return \"Martha Stewart\"\u003cbr\u003e  \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat do you expect the return value of the above method to be? Go into IRB, copy and paste the above method and call it. Go on, I'll wait.\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003eYou may have expected the return value to be \"Guy Fieri\". His name is the last line of the method and it is true that he does have the best style (you can't beat sunglasses on the back of the head, sorry).\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eHowever\u003c/em\u003e, the return value of the above method is actually \u003ccode\u003e=\u0026gt; Martha Stewart\u003c/code\u003e! (Note: if you aren't getting \"Martha Stewart\" as the return value remember you need to call the method in IRB.)\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ereturn\u003c/code\u003e keyword will disrupt the execution of your method. If you employ it, your method will return whatever you have explicitly told it to (in this case, \u003ccode\u003e\"Martha Stewart\"\u003c/code\u003e), and terminate.\u003c/p\u003e\n\n\u003cp\u003eThe explicit use of the \u003ccode\u003ereturn\u003c/code\u003e keyword is generally avoided by many Rubyists, but there are instances where you might want to use \u003ccode\u003ereturn\u003c/code\u003e instead of relying on implicit returns. In the following method, we create a variable \u003ccode\u003ename\u003c/code\u003e. For fun, let's see the name reversed. The method \u003ccode\u003eputs\u003c/code\u003e out the reversed name; however, because we use \u003ccode\u003ereturn\u003c/code\u003e, the return value of the method will be the original name unchanged.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef change_my_name\u003cbr\u003e  name = \"Frank\"\u003cbr\u003e  puts name.reverse\u003cbr\u003e  return name\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along Exercise: Practicing Return Values\u003c/h3\u003e\n\n\u003cp\u003eLet's try it out once more together. In your terminal, drop into IRB. Then, follow the steps below:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eIn IRB, type: \u003ccode\u003e6 + 3\u003c/code\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou should see a return value of \u003ccode\u003e=\u0026gt; 9\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNow, set a variable \u003ccode\u003etotal\u003c/code\u003e equal to \u003ccode\u003e6 + 3\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou've just \u003cem\u003estored\u003c/em\u003e the return value of adding \u003ccode\u003e6\u003c/code\u003e and \u003ccode\u003e3\u003c/code\u003e and you can now grab that return value \u003ccode\u003e9\u003c/code\u003e by referencing the \u003ccode\u003etotal\u003c/code\u003e variable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSet another variable, \u003ccode\u003enew_total\u003c/code\u003e equal to \u003ccode\u003etotal + 10\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou should see a return value of \u003ccode\u003e19\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCopy and paste the below method definitions in IRB and hit \u003ccode\u003ereturn\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003eFirst Method\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef print_one_plus_one\u003cbr\u003e  puts 1+1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprint_one_plus_one #this invokes the method\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eYou should see the following output:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2\u003cbr\u003e=\u0026gt; nil\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the first method, the method outputs \u003ccode\u003e2\u003c/code\u003e to the terminal then returns \u003ccode\u003enil\u003c/code\u003e, because \u003ccode\u003eputs\u003c/code\u003e always returns \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eSecond Method\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef one_plus_one\u003cbr\u003e  1+1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eone_plus_one #this invokes the method\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eYou should see the following output:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e =\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the second method, the method simply returns the value of \u003ccode\u003e1+1\u003c/code\u003e, which is \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWhy Return Values Matter\u003c/h3\u003e\n\n\u003cp\u003eReturn values are how different parts of your program communicate with one another. You don't have to worry too much about this for now, but as you start to build more complicated programs, you'll find that the return value of one method might be operated on by a subsequent method.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a very basic example. Earlier, in IRB, we set a variable \u003ccode\u003etotal\u003c/code\u003e equal to the return value of adding \u003ccode\u003e6 + 3\u003c/code\u003e. First, return to IRB. Then re-create your \u003ccode\u003etotal\u003c/code\u003e variable as the sum of \u003ccode\u003e6 + 3\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOn the next line, execute \u003ccode\u003etotal + 17\u003c/code\u003e. You should see a return value of \u003ccode\u003e=\u0026gt; 26\u003c/code\u003e. Thus, the return value of one operation (\u003ccode\u003e6 + 3\u003c/code\u003e) was used to execute further operations (the addition of \u003ccode\u003e17\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eAs we've just done, you'll find that we will often store return values in variables so that we can use them later.\u003c/p\u003e","exportId":"puts-print-and-return"},{"id":203663,"title":"Parrot Lab - Methods and Return Values Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"parrot-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/parrot-ruby/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/parrot-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/parrot-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Define a method that accepts arguments.\u003c/li\u003e\n\u003cli\u003e Create a default argument.\u003c/li\u003e\n\u003cli\u003e Practice returning a value.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab you'll be defining a method called \u003ccode\u003e#parrot\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#parrot\u003c/code\u003e method should accept an argument of a string and both \u003ccode\u003e#puts\u003c/code\u003e out\nthat string \u003cem\u003eand\u003c/em\u003e return the string at the end of the method.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#parrot\u003c/code\u003e method should have a default argument of \u003ccode\u003e\"Squawk!\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eThis lab is explicitly testing your ability to control the return value of a\nmethod, not just what it does, but what it returns. Remember, return values are\nimportant. Ask yourself? what is the return value of \u003ccode\u003e#puts\u003c/code\u003e?\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.skorks.com/2009/08/method-arguments-in-ruby/\"\u003eSkorks Blog - Arguments With Default Value\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g189bd235addb2a25464fbf640725cb0e"},{"id":203664,"title":"Debugging with Pry","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"debugging-with-pry\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/debugging-with-pry/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/debugging-with-pry\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/debugging-with-pry/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover Pry, a type of REPL, and discuss how to install and use it to debug\na program.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how Pry is a more flexible REPL than IRB.\u003c/li\u003e\n\u003cli\u003eInstall Pry on your computer (already installed for IDE users).\u003c/li\u003e\n\u003cli\u003eDebug a program using binding.pry within the body of your file.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat Is a REPL?\u003c/h2\u003e\n\n\u003cp\u003eYou've already been introduced to REPLs through using IRB (Interactive Ruby).\nREPL stands for \u003cem\u003eRead, Evaluate, Print, Loop\u003c/em\u003e. It is an interactive programming\nenvironment that takes a user's input, evaluates it and returns the result to\nthe user.\u003c/p\u003e\n\n\u003cp\u003eRuby installs with its own REPL, which is IRB, that you've already been using.\nEvery time you type \u003ccode\u003eirb\u003c/code\u003e into your terminal, you're entering into a REPL.\u003c/p\u003e\n\n\u003ch2\u003eWhat Is Pry?\u003c/h2\u003e\n\n\u003cp\u003ePry is another Ruby REPL with some added functionality. When you enter IRB, you\nare entering a brand new interactive environment. Any code you want to play with\nin IRB, you have to write in IRB or copy and paste into IRB. Pry, on the other\nhand, is like a REPL that you can inject into your program.\u003c/p\u003e\n\n\u003cp\u003ePry is far more flexible than IRB. Once you install the Pry library (via the Pry\ngem—we'll walk through installation in a bit), you can use a \u003ccode\u003ebinding.pry\u003c/code\u003e\nanywhere in your code.\u003c/p\u003e\n\n\u003ch2\u003eWait... What's 'binding'?\u003c/h2\u003e\n\n\u003cp\u003eBinding is a built-in ruby class whose objects can encapsulate the context of\nyour current scope (variables, methods etc.), and retain them for use outside of\nthat context.\u003c/p\u003e\n\n\u003cp\u003eCalling \u003ccode\u003ebinding.pry\u003c/code\u003e is essentially 'prying' into the current binding or\ncontext of the code, from outside your file.\u003c/p\u003e\n\n\u003cp\u003eSo when you place the line \u003ccode\u003ebinding.pry\u003c/code\u003e in your code, that line will get\ninterpreted at runtime (as your program is executed). When the interpreter hits\nthat line, your program will actually \u003cem\u003efreeze\u003c/em\u003e and your terminal will turn into\na REPL that exists right in the middle of your program, wherever you added the\n\u003ccode\u003ebinding.pry\u003c/code\u003e line.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look. In this repository, you'll see a file called\n\u003ccode\u003epry_is_awesome.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInstructions Part I\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eFork and clone this repository.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eInstall Pry on your computer by navigating to your home directory (\u003ccode\u003ecd ~\u003c/code\u003e in\nyour terminal) and execute \u003ccode\u003egem install pry\u003c/code\u003e. (You don't need to do this if\nyou are working in the IDE.)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLook at the code in \u003ccode\u003elib/pry_is_awesome.rb\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYou should see the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003edef prying_into_the_method\u003cbr\u003e    inside_the_method = \"We're inside the method\"\u003cbr\u003e    puts inside_the_method\u003cbr\u003e    puts \"We're about to stop because of pry!\"\u003cbr\u003e    binding.pry\u003cbr\u003e    this_variable_hasnt_been_interpreted_yet = \"The program froze before it could read me!\" \u003cbr\u003e    puts this_variable_hasnt_been_interpreted_yet\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprying_into_the_method\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we are requiring \u003ccode\u003epry\u003c/code\u003e, \u003cem\u003ewhich you must do to use pry\u003c/em\u003e, defining a method,\nand then calling that method.\u003c/p\u003e\n\n\u003cp\u003eIn the directory of this repo, in your terminal, run the file by typing \u003ccode\u003eruby\nlib/pry_is_awesome.rb\u003c/code\u003e. Now, look at your terminal. You should see something\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  3: def prying_into_the_method\u003cbr\u003e     4:     inside_the_method = \"We're inside the method\"\u003cbr\u003e     5:     puts inside_the_method\u003cbr\u003e     6:     puts \"We're about to stop because of pry!\"\u003cbr\u003e     7:     binding.pry\u003cbr\u003e =\u0026gt;  8:     this_variable_hasnt_been_interpreted_yet = \"The program froze before it could read me!\"\u003cbr\u003e     9:     puts this_variable_hasnt_been_interpreted_yet\u003cbr\u003e    10: end\u003cbr\u003e[1] pry(main)\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou have frozen your program \u003cem\u003eas it executes\u003c/em\u003e and are now inside a REPL \u003cem\u003einside\nyour program\u003c/em\u003e. You basically just stopped time! How cool is that?\u003c/p\u003e\n\n\u003cp\u003eIn the terminal, in your pry console, type the variable name \u003ccode\u003einside_the_method\u003c/code\u003e\nand hit enter. You should see a return value of \u003ccode\u003e\"We're inside the method\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eYou are able to explore the data \u003cem\u003einside\u003c/em\u003e the method in which you've placed your\nbinding.\u003c/p\u003e\n\n\u003cp\u003eNow, in the terminal, in your pry console, type the variable name\n\u003ccode\u003ethis_variable_hasnt_been_interpreted_yet\u003c/code\u003e. You should see a return value of\n\u003ccode\u003enil\u003c/code\u003e. That's because the binding you placed on line 7 actually froze the\nprogram on line 7 and the variable you just called hasn't been interpreted yet.\nConsequently, our REPL doesn't know about it.\u003c/p\u003e\n\n\u003cp\u003eNow, in the terminal, type \u003ccode\u003eexit\u003c/code\u003e, and you'll leave your pry console and the\nprogram will continue to execute.\u003c/p\u003e\n\n\u003ch2\u003eInstructions Part II: Using Pry to Debug\u003c/h2\u003e\n\n\u003cp\u003eIn addition to \u003cem\u003eexploring\u003c/em\u003e code inside Pry, you can also manipulate variables\nand try code out. This is where Pry really becomes helpful for debugging. If you\nhave a method that isn't doing what it's supposed to do, instead of making\nchanges in your text editor and running the tests over and over until you get it\nworking, you can put a binding in your code and try things out. Once you've\nfigured out how to fix the problem, you then update the code in your text editor\naccordingly.\u003c/p\u003e\n\n\u003cp\u003eLet's walk through an example together. In this repository that you've forked\nand cloned down onto your computer, you'll see a \u003ccode\u003espec\u003c/code\u003e folder containing a file\n\u003ccode\u003epry_debugging_spec.rb\u003c/code\u003e. This is a test for the file \u003ccode\u003elib/pry_debugging.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003epry_debugging.rb\u003c/code\u003e, we have a broken method. Run \u003ccode\u003elearn test\u003c/code\u003e to see the\nfailing test. You should see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1) #plus_two takes in a number as an argument and returns the sum of that number and 2\u003cbr\u003e     Failure/Error: expect(plus_two(3)).to eq(5)\u003cbr\u003e\u003cbr\u003e       expected: 5\u003cbr\u003e            got: 3\u003cbr\u003e\u003cbr\u003e       (compared using ==)\u003cbr\u003e     # ./spec/pry_debugging_spec.rb:6:in `block (2 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo what's happening? In the second line (the line starting with\n\u003ccode\u003eFailure/Error\u003c/code\u003e), we can see that the test is calling the \u003ccode\u003eplus_two\u003c/code\u003e method and\npassing in \u003ccode\u003e3\u003c/code\u003e as an argument. Below that we can see that the test is expecting\n\u003ccode\u003e5\u003c/code\u003e to be returned, but that \u003ccode\u003e3\u003c/code\u003e is being returned instead. We remember that the\nreturn value of a method in Ruby is generally the value of the last line of the\nmethod, in this case, \u003ccode\u003enum\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef plus_two(num)\u003cbr\u003e    num + 2\u003cbr\u003e    num\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo while our method is adding 2 to \u003ccode\u003enum\u003c/code\u003e on the second line, it appears that it\nis not \u003cem\u003eupdating\u003c/em\u003e \u003ccode\u003enum\u003c/code\u003e. We have Pry required at the top of our\n\u003ccode\u003espec/pry_debugging_spec.rb\u003c/code\u003e file so we can use it to verify this. Let's place a\n\u003ccode\u003ebinding.pry\u003c/code\u003e in our code, right after that line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef plus_two(num)\u003cbr\u003e    num + 2\u003cbr\u003e    binding.pry\u003cbr\u003e    num\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, run the test suite again and drop into your Pry console. Your terminal\nshould look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFrom: /Users/sophiedebenedetto/Desktop/Dev/Ruby-Methods_and_Variables/pry-readme/lib/pry_debugging.rb @ line 4 Object#plus_two:\u003cbr\u003e\u003cbr\u003e    1: def plus_two(num)\u003cbr\u003e    2:  num + 2\u003cbr\u003e    3:  binding.pry\u003cbr\u003e =\u0026gt; 4:  num\u003cbr\u003e    5: end\u003cbr\u003e\u003cbr\u003e[1] pry(#)\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's check our current return value by typing \u003ccode\u003enum\u003c/code\u003e at the Pry prompt. You\nshould see something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1] pry(#)\u0026gt; num\u003cbr\u003e=\u0026gt; 3\u003cbr\u003e[2] pry(#)\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy checking the value of the variable inside our pry console, we can confirm\nthat \u003ccode\u003enum\u003c/code\u003e is still equal to \u003ccode\u003e3\u003c/code\u003e and, as a result, the method is returning \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHow can we modify the code on line 2 so that the method behaves in the expected\nway? We need to \u003cem\u003eupdate\u003c/em\u003e the value of our \u003ccode\u003enum\u003c/code\u003e variable so that it's equal to\nthe sum of itself and 2. Play around inside your Pry console: try code that you\nthink will update \u003ccode\u003enum\u003c/code\u003e as needed, then check the value of \u003ccode\u003enum\u003c/code\u003e to see if it\nworked. Once you figure it out you can type \u003ccode\u003eexit\u003c/code\u003e in your terminal to get out\nof Pry, update the code in your text editor, and rerun the test to verify it's\npassing. Be sure to remove the \u003ccode\u003ebinding.pry\u003c/code\u003e!\u003c/p\u003e\n\n\u003cp\u003eIt can take a little while to get the hang of using Pry so don't worry if it's\nstill a little confusing. As you start working with more complex methods and\ndata structures, you'll find it can be a very helpful tool.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://pry.github.io/\"\u003ePry documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/elimerrell/debugging-with-pry-a-beginners-guide-3p99\"\u003eDebugging with Pry: A Beginner's Guide\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g62f4023e43e688cc2cf02738f5023118"},{"id":203665,"title":"Method Scope","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"method-scope\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/method-scope/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-scope\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-scope/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll introduce the concepts of method scope and variable scope. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how scope prevents you from accidentally overwriting previous work.\u003c/li\u003e\n\u003cli\u003eDifferentiate between the functionality of local variables created inside and outside of methods. \u003c/li\u003e\n\u003cli\u003eDefine methods that pass variables in as arguments.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eVariable Names and Scope\u003c/h2\u003e\n\n\u003cp\u003eNaming variables is hard, but it is important. We need our code to be as descriptive as possible. Any other developer reading over one of our programs should be able to understand what our code does. A big part of this is having variable (and method) names that are sensible and descriptive. \u003c/p\u003e\n\n\u003cp\u003eOur variable names should be descriptive of what they hold, but they should also be concise. This can be difficult to achieve. You might even be worrying that you'll run out of unique, descriptive and concise variable names. Don't worry though, all programming languages have what is called \u003cstrong\u003escope\u003c/strong\u003e. Scope means that not all variables exist everywhere in a program. If they did, then a variable that you'd be writing in file A could accidentally overwrite a variable made by your friend in file B. Having a scope for variables allows you to have greater confidence that you aren't overwriting someone else's work when you create variables.\u003c/p\u003e\n\n\u003ch2\u003eWhat is Scope?\u003c/h2\u003e\n\n\u003cp\u003eMethods in ruby create their own scope. \"Scope\" refers to the areas of your program in which certain data is available to you. \u003cstrong\u003eAny local variable created outside of a method will be unavailable inside of a method. In addition, local variables created inside of a method (i.e. in between the \u003ccode\u003edef\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e keywords of a method) 'fall out of scope' once you're outside the method.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the following example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename = \"Joe\"\u003cbr\u003e\u003cbr\u003edef greeting(name)\u003cbr\u003e   puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this code snippet, we have a variable, \u003ccode\u003ename\u003c/code\u003e, set equal to a string, \u003ccode\u003e\"Joe\"\u003c/code\u003e. Then we define a method, \u003ccode\u003e#greeting\u003c/code\u003e,  that takes in an argument of name. Are the \u003ccode\u003ename\u003c/code\u003e variable that is set equal to \u003ccode\u003e\"Joe\"\u003c/code\u003e and the \u003ccode\u003ename\u003c/code\u003e variable we are using as a parameter (or argument) for our \u003ccode\u003e#greeting\u003c/code\u003e method definition the same? Let's see. \u003c/p\u003e\n\n\u003cp\u003eIf we call our greeting method in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Sophie\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat do we expect to be outputted to the terminal?\u003c/p\u003e\n\n\u003cp\u003eIn this case, the above method invocation would \u003ccode\u003eputs\u003c/code\u003e out \u003ccode\u003eHello, Sophie\u003c/code\u003e to the terminal. It is true that we are setting a variable, \u003ccode\u003ename\u003c/code\u003e, equal to \u003ccode\u003e\"Joe\"\u003c/code\u003e in this code snippet. But we are not using \u003cem\u003ethat\u003c/em\u003e variable anywhere else in our code. The \u003ccode\u003ename\u003c/code\u003e argument of the \u003ccode\u003e#greeting\u003c/code\u003e method is just a placeholder. It means: when we call the \u003ccode\u003e#greeting\u003c/code\u003e method with an argument of, say, \u003ccode\u003e\"Sophie\"\u003c/code\u003e, set the variable \u003ccode\u003ename\u003c/code\u003e \u003cem\u003einside of the method\u003c/em\u003e equal to that string argument. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e variable inside of the \u003ccode\u003e#greeting\u003c/code\u003e method is different from the \u003ccode\u003ename\u003c/code\u003e variable that we set equal to \u003ccode\u003e\"Joe\"\u003c/code\u003e outside of the method. The \u003ccode\u003e#greeting\u003c/code\u003e method has its own scope, and variables inside of it don't know about variables outside of it and vice versa. \u003c/p\u003e\n\n\u003ch2\u003eMethod Scope in Ruby\u003c/h2\u003e\n\n\u003cp\u003eThink of a method as a castle. The \u003ccode\u003edef\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e keywords are like the gates that keep out the barbarian hordes, dragons, etc. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevil_monster = \"Bowser\"\u003cbr\u003e\u003cbr\u003edef princess_peaches_castle\u003cbr\u003e  puts \"#{evil_monster} is trying to kidnap Princess Peach!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've defined the variable \u003ccode\u003eevil_monster\u003c/code\u003e \u003cem\u003eoutside\u003c/em\u003e of the method, \u003ccode\u003eprincess_peaches_castle\u003c/code\u003e. Then, we try to call on the \u003ccode\u003eevil_monster\u003c/code\u003e variable inside that method. Watch what happens when we invoke the method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprincess_peaches_castle\u003cbr\u003e# \u0026gt; NameError: undefined local variable or method `evil_monster' for main:Object\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eevil_monster\u003c/code\u003e variable is out of scope for this method. The method can't access it \u003cstrong\u003eunless we pass it in as an argument\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf we define our method to accept an argument, we can pass our variable into the method and the method will be able to operate on/use that variable. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevil_monster = \"Bowser\"\u003cbr\u003e\u003cbr\u003edef princess_peaches_castle(evil_monster)\u003cbr\u003e  puts \"#{evil_monster} is trying to kidnap Princess Peach!\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprincess_peaches_castle(evil_monster)\u003cbr\u003e# \u0026gt; \"Bowser is trying to kidnap Princess Peach!\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe method call, which happens outside the method itself, has access to our \u003ccode\u003eevil_monster\u003c/code\u003e variable. We can therefore make the value stored in \u003ccode\u003eevil_monster\u003c/code\u003e available to \u003ccode\u003eprincess_peaches_castle\u003c/code\u003e by passing it as an argument when we call the method. So now Mario can start his adventure.\u003c/p\u003e\n\n\u003cp\u003eSo far, we've seen that variables defined outside of methods are not available inside methods (unless we pass them in as arguments). This works the other way around as well: variables defined inside of methods are not available outside of those methods. Let's take a look. \u003c/p\u003e\n\n\u003cp\u003eIf we define the following method to include a local variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef practicing_method_scope\u003cbr\u003e  im_trapped_in_the_method = \"You can't access me outside this method!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTrying to access that variable elsewhere in our program, \u003cem\u003eoutside of this method\u003c/em\u003e, will raise the following error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eim_trapped_in_the_method\u003cbr\u003e#=\u0026gt; NameError: undefined local variable or method `im_trapped_in_the_method' for main:Object\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eRemember: A variable defined inside a method can't leave that method. It is not available to your program outside of the method. A variable defined outside of a method can only be made available to the code inside the method if you pass that variable in to the method as an argument. \u003c/p\u003e","exportId":"method-scope"},{"id":203666,"title":"Method Scope Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"method-scope-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/method-scope-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-scope-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-scope-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a method that takes in an argument and pass a variable in as that argument.\u003c/li\u003e\n\u003cli\u003eUnderstand that a variable defined inside a method cannot be used outside of that method.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003ePart I: Passing a Variable Into a Method\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/catch_phrase.rb\u003c/code\u003e. You should see the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef catch_phrase\u003cbr\u003e  puts phrase\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that the method is trying to \u003ccode\u003eputs\u003c/code\u003e out a variable called \u003ccode\u003ephrase\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the test for this method in \u003ccode\u003espec/catch_phrase_spec.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe \"#catch_phrase\" do\u003cbr\u003e  it \"puts out a catch phrase\" do\u003cbr\u003e    phrase = \"It's-a me, Mario!\"\u003cbr\u003e    expect{catch_phrase}.to output(\"It's-a me, Mario!\\n\").to_stdout\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo ahead and run the test for this method only by typing \u003ccode\u003erspec\nspec/catch_phrase_spec.rb\u003c/code\u003e into your terminal in the directory of this lab. You\nshould see the following error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNameError:\u003cbr\u003e  undefined local variable or method `phrase' for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis error is occurring because the code inside the \u003ccode\u003e#catch_phrase\u003c/code\u003e method is\ntrying to use the \u003ccode\u003ephrase\u003c/code\u003e variable \u003cstrong\u003ebut\u003c/strong\u003e it's not present inside the \u003cem\u003escope\u003c/em\u003e\nof the \u003ccode\u003e#catch_phrase\u003c/code\u003e method. \u003cstrong\u003eIt is out of scope.\u003c/strong\u003e Let's fix it!\u003c/p\u003e\n\n\u003cp\u003eWe need to pass \u003ccode\u003ephrase\u003c/code\u003e into our \u003ccode\u003e#catch_phrase\u003c/code\u003e as an argument. Let's do it:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRe-define the \u003ccode\u003e#catch_phrase\u003c/code\u003e method to take in an argument of a phrase.\u003c/li\u003e\n\u003cli\u003eChange the test in \u003ccode\u003espec/catch_phrase_spec.rb\u003c/code\u003e to match the following:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003erequire \"spec_helper\"\u003cbr\u003edescribe \"#catch_phrase\" do\u003cbr\u003e  it \"puts out a catch phrase\" do\u003cbr\u003e    phrase = \"It's-a me, Mario!\"\u003cbr\u003e    expect{catch_phrase(phrase)}.to output(\"It's-a me, Mario!\\n\").to_stdout\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003ePart II: Understanding Method Scope\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/rescue_princess_peach.rb\u003c/code\u003e and take a look at the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef rescue_princess_peach\u003cbr\u003e  status = \"rescued\"\u003cbr\u003e  puts \"Hooray! Mario has rescued Princess Peach.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the body of this method is setting a variable, \u003ccode\u003estatus\u003c/code\u003e equal to a\nvalue of \u003ccode\u003e\"rescued\"\u003c/code\u003e. Do you think we will be able to access this variable\noutside of the method? Let's find out!\u003c/p\u003e\n\n\u003cp\u003e1 . Un-comment the lines below in your \u003ccode\u003elib/rescue_princess_peach.rb\u003c/code\u003e file. You\ncan do this by removing the \u003ccode\u003e#\u003c/code\u003e at the front of each line.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erescue_princess_peach\u003cbr\u003eputs status\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e2 . Run the file with \u003ccode\u003eruby lib/rescue_princess_peach.rb\u003c/code\u003e in your terminal. You should see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHooray! Mario has rescued Princess Peach.\u003cbr\u003elib/rescue_princess_peach.rb:9:in `': undefined local variable or method `status' for main:Object (NameError)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe are getting a \u003ccode\u003eNameError\u003c/code\u003e because \u003ccode\u003estatus\u003c/code\u003e is undefined. Wait a minute, you\nmight be wondering. Didn't we define \u003ccode\u003estatus\u003c/code\u003e inside the\n\u003ccode\u003e#rescue_princess_peach\u003c/code\u003e method? We did, but \u003cstrong\u003evariables defined inside a\nmethod are not available outside of that method\u003c/strong\u003e. They are only available\nwithin the \u003ccode\u003escope\u003c/code\u003e of that method.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eGo back and comment out lines 8 and 9 of \u003ccode\u003erescue_princess_peach.rb\u003c/code\u003e by\nadding back the \u003ccode\u003e#\u003c/code\u003es.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eRun the test suite and you'll see that we are passing all of our tests. If you\nopen up the \u003ccode\u003espec/rescue_princess_peach_spec.rb\u003c/code\u003e file, you'll see the following\ntest:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire \"spec_helper\"\u003cbr\u003e\u003cbr\u003edescribe \"#rescue_princess_peach\" do\u003cbr\u003e  it \"outputs a message and sets a variable, status, that is not available outside of this method\" do\u003cbr\u003e    expect{rescue_princess_peach}.to output(\"Hooray! Mario has rescued Princess Peach.\\n\").to_stdout\u003cbr\u003e    expect{puts status}.to raise_error(NameError)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice the last expectation of our test: \u003ccode\u003eexpect{puts status}.to\nraise_error(NameError)\u003c/code\u003e. We expect any attempt to use the \u003ccode\u003estatus\u003c/code\u003e variable to\nbe met with a \u003ccode\u003eNameError\u003c/code\u003e. Our program, outside of the\n\u003ccode\u003e#rescue_princess_peach\u003c/code\u003emethod, just doesn't know what it is.\u003c/p\u003e","exportId":"ga612b519fd0d449fe2786e4a415487e8"}]},{"id":21880,"name":"Procedural Ruby: Booleans","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g8d6f6743563e461f0f682dd7868d31a7","items":[{"id":203667,"title":"Truthiness","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"truthiness-in-ruby-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/truthiness-in-ruby-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/truthiness-in-ruby-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/truthiness-in-ruby-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll explain the significance of truthiness in programming and\nidentify boolean values in Ruby.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine control flow and how Boolean values help in implementing it in\nprogramming.\u003c/li\u003e\n\u003cli\u003eList what is truthy and falsey in Ruby.\u003c/li\u003e\n\u003cli\u003eUse the double bang operator to determine truthiness in Ruby.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://upload.wikimedia.org/wikipedia/en/thumb/8/85/Truthiness.png/300px-Truthiness.png\" alt=\"Truthiness\"\u003e\u003c/p\u003e\n\n\u003cp\u003eMany programming languages, including Ruby, have native boolean (true or false)\ndata types. In Ruby they're expressed directly as \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eThis is not the case in all languages. In Python, boolean values\nare capitalized,\u003c/em\u003e \u003ccode\u003eTrue\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003eFalse\u003c/code\u003e, \u003cem\u003ewhile in Objective-C they are different\nwords\u003c/em\u003e \u003ccode\u003eYES\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003eNO\u003c/code\u003e. \u003cem\u003eHowever, they all represent the same concept of\nBoolean logic.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThese boolean values come in handy in programming when we want to implement\ncontrol flow. Control flow is the idea that we can tell our program to execute\ncertain lines of code based upon certain conditions.\u003c/p\u003e\n\n\u003ch3\u003eBooleans and Flow Control\u003c/h3\u003e\n\n\u003cp\u003eFor example, \u003cem\u003eif\u003c/em\u003e I am tired, then I will take a nap. Otherwise, I will keep\nreading this insightful and informative readme. You could also invert the\nperspective like in this example:\u003c/p\u003e\n\n\u003cp\u003eIf it is \u003cem\u003etrue\u003c/em\u003e that I am tired, then I will take a nap. If it is \u003cem\u003efalse\u003c/em\u003e that I\nam tired, then I won't take a nap.\u003c/p\u003e\n\n\u003cp\u003eFlow control is predicated on these true-or-false boolean values. The adjectives\n\"truthy\" and \"falsey\" are a programming convention for describing the \u003cem\u003estate\u003c/em\u003e of\nbeing true and the \u003cem\u003estate\u003c/em\u003e of being false.\u003c/p\u003e\n\n\u003cp\u003eWhat this example amounts to is this: we want to be able to use non-boolean\nvalues (like strings or integers) in a boolean context; we want to be able to\nsay, \"\u003cem\u003eif\u003c/em\u003e a certain statement \u003cem\u003eevaluates\u003c/em\u003e to true (or is \"truthy\"), then\nexecute these certain lines of code.\"\u003c/p\u003e\n\n\u003cp\u003eConsequently, Ruby must have a way of determining what counts as true at a given\nmoment—or what is \"truthy\" versus what is \"falsey\".\u003c/p\u003e\n\n\u003cp\u003eRemember, don't worry about understanding control flow and implementing it right\nnow. This is just to provide some background about why we care about the concept\nof truthiness in Ruby.\u003c/p\u003e\n\n\u003ch2\u003eWhat Is 'truthy' and 'falsey' in Ruby?\u003c/h2\u003e\n\n\u003cp\u003eProgramming languages are software, too! That means the people who built Ruby\nhad to decide what is truthy and what is falsey. Different languages make\ndifferent decisions.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIn Ruby only false and nil are falsey. Everything else is truthy (yes, even 0 is truthy).\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eBecome familiar with the following chart:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003eValue\u003c/th\u003e\n    \u003cth\u003eTruthy?\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003e0\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\"\"\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e[]\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\"hello\"\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003enil\u003c/td\u003e\n    \u003ctd\u003eno\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e6.7\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eTRUE\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003efalse\u003c/td\u003e\n    \u003ctd\u003eno\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFALSE\u003c/td\u003e\n    \u003ctd\u003eno\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e[1,2]\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{:hi=\u0026gt;\"there\"\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eYou get the idea!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e Even an empty string, \u003ccode\u003e\"\"\u003c/code\u003e, is truthy! This might seem kind of\nstrange, but it will make more sense once we learn more about object\norientation. For now, keep in mind that even an empty string is an instance of\nthe String class. Again, that sentence might not mean a lot to you right now,\nbut it will soon...\u003c/p\u003e\n\n\u003ch3\u003eBonus: Determining Truthiness\u003c/h3\u003e\n\n\u003cp\u003eIf you forget to memorize this handy chart, there is a trick you can use to\ndetermine if a value is truthy or falsey. A \u003cstrong\u003esingle bang operator\u003c/strong\u003e, \u003ccode\u003e!\u003c/code\u003e, will\nnegate the boolean value it is placed in front of. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!true  #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!false #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe double bang operator:\u003c/strong\u003e A \"double-bang operator\" (\u003ccode\u003e!!\u003c/code\u003e) will return \u003ccode\u003etrue\u003c/code\u003e\nor \u003ccode\u003efalse\u003c/code\u003e based on whether a value is truthy or falsey to begin with.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!!\"hello\" #=\u0026gt; true\u003cbr\u003e\u003cbr\u003e!!nil #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://gist.github.com/jfarmer/\"\u003eJFarmer's Gists\u003c/a\u003e - \u003ca href=\"https://gist.github.com/jfarmer/2647362\"\u003eTruthy and Falsey in Ruby\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"truthiness"},{"id":203668,"title":"Booleans","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"booleans-ruby-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/booleans-ruby-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/booleans-ruby-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/booleans-ruby-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eReview the concept of boolean values.\u003c/li\u003e\n\u003cli\u003eUse boolean operators and identify their return values.\u003c/li\u003e\n\u003cli\u003eUse comparison operators and identify their return values.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBooleans\u003c/h2\u003e\n\n\u003cp\u003eWe've already learned a bit about the boolean (true-or-false) data type. In Ruby, a boolean refers to a value of either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, both of which are defined as their very own data types. Every appearance, or instance, of \u003ccode\u003etrue\u003c/code\u003e in a Ruby program is an instance of \u003ccode\u003eTrueClass\u003c/code\u003e, while every appearance of \u003ccode\u003efalse\u003c/code\u003e is an instance of \u003ccode\u003eFalseClass\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor now, we don't need to understand the concept of classes in depth. Just know that classes serve as templates for Ruby objects. Think of \u003ccode\u003eTrueClass\u003c/code\u003e and \u003ccode\u003eFalseClass\u003c/code\u003e like cookie cutters––there is a \u003ccode\u003eTrueClass\u003c/code\u003e cookie cutter and a \u003ccode\u003eFalseClass\u003c/code\u003e cookie cutter and every appearance of \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e is like a cookie made with its respective cookie cutter.\u003c/p\u003e\n\n\u003ch2\u003eBoolean Operators\u003c/h2\u003e\n\n\u003cp\u003eHow do we create boolean values in a Ruby program? Well, you can actually type \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e \u003cem\u003eor\u003c/em\u003e we can write statements that \u003cem\u003ereturn\u003c/em\u003e \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Now that we understand the concept of \"truthiness\"—that certain types of data are \"truthy\" and certain others are \"falsey\"—we can understand how to write such statements.\u003c/p\u003e\n\n\u003cp\u003eWe already know that Strings are one type of data that are truthy. Drop into IRB and use \u003ccode\u003e!!\u003c/code\u003e (the \"double-bang operator\") to determine that the string \u003ccode\u003e\"hi\"\u003c/code\u003e is truthy:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!!\"hi\" #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote:\u003c/em\u003e You may see a warning regarding String literals when you run the above code. Ignore it! Ruby is just reminding us that it is a little strange to use the literal string \u003ccode\u003e\"hi\"\u003c/code\u003e in a statement, instead of saving it to a variable first. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estring = \"hi\"\u003cbr\u003e!!string #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe used the literal string in this example though to highlight the \"truthy\" nature of strings.\u003c/p\u003e\n\n\u003cp\u003eIn the next unit, we will learn how to use the native truthiness of data types like strings to write statements that return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFirst, we're going to learn how to use \u003cstrong\u003eboolean operators\u003c/strong\u003e to write statements that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWhat are Boolean Operators?\u003c/h3\u003e\n\n\u003cp\u003eBoolean operators are really methods which means that they have return values. What do they return? \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e of course!\u003c/p\u003e\n\n\u003cp\u003eIn Ruby there are three main boolean operators:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e!\u003c/code\u003e (\"single-bang\") which represents \"NOT\",\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (\"double-ampersand\") which represents \"AND\", and\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e||\u003c/code\u003e (\"double-pipe\") which represents \"OR\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor an \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (\"and\") to evaluate to \u003ccode\u003etrue\u003c/code\u003e, both values of either side of the symbol must evaluate to \u003ccode\u003etrue\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etrue \u0026amp;\u0026amp; true #=\u0026gt; true\u003cbr\u003e\u003cbr\u003etrue \u0026amp;\u0026amp; false #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor an \u003ccode\u003e||\u003c/code\u003e (\"or\") to evaluate to \u003ccode\u003etrue\u003c/code\u003e, only one value on either side of the symbol must evaluate to \u003ccode\u003etrue\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efalse || true #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, a \u003ccode\u003e!\u003c/code\u003e (\"not\") reverses the logical state of its operand: if a condition is \u003ccode\u003etrue\u003c/code\u003e, then \u003ccode\u003e!\u003c/code\u003e will make it \u003ccode\u003efalse\u003c/code\u003e; if it is \u003ccode\u003efalse\u003c/code\u003e, then \u003ccode\u003e!\u003c/code\u003e will make it \u003ccode\u003etrue\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!true #=\u0026gt; false\u003cbr\u003e\u003cbr\u003e!false #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eComparison Operators\u003c/h2\u003e\n\n\u003cp\u003eTo check if two values are equal, we use the \u003cem\u003ecomparison operator\u003c/em\u003e represented with \u003ccode\u003e==\u003c/code\u003e (\"double-equal-sign\"). If two values are equal, then the statement will return \u003ccode\u003etrue\u003c/code\u003e. If they are not equal, then it will return \u003ccode\u003efalse\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 == 1 #=\u0026gt; true\u003cbr\u003e\u003cbr\u003e1 == 7 #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e \u003cem\u003eThe comparison operator\u003c/em\u003e \u003ccode\u003e==\u003c/code\u003e \u003cem\u003eis distinct from the assignment operator\u003c/em\u003e \u003ccode\u003e=\u003c/code\u003e \u003cem\u003ethat is used to set a variable equal to a value. Mistaking these for each other is a common cause of unexpected behavior.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eMore Comparison Operators\u003c/h2\u003e\n\n\u003cp\u003eRuby is good at comparing things. For instance, it knows that \u003ccode\u003e14\u003c/code\u003e is larger than \u003ccode\u003e3\u003c/code\u003e. Let's see that in action.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e14 \u0026gt; 3 #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, \u003ccode\u003e14\u003c/code\u003e is larger than \u003ccode\u003e3\u003c/code\u003e, so Ruby evaluates this to \u003ccode\u003etrue\u003c/code\u003e. Comparisons in Ruby always evaluate to \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe commonly used comparison operators are:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003eOperator\u003c/th\u003e\n    \u003cth\u003eOperation\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e==\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the values of the two operands are \u003cem\u003eequal\u003c/em\u003e, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e!=\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the values of the two operands are \u003cem\u003enot equal\u003c/em\u003e, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e  \n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the value of the left operand is \u003cem\u003egreater than\u003c/em\u003e the value of the right operand, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the value of the left operand is \u003cem\u003eless than\u003c/em\u003e the value of the right operand, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the value of the left operand is \u003cem\u003egreater than or equal to\u003c/em\u003e the value of the right operand, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the value of the left operand is \u003cem\u003eless than or equal to\u003c/em\u003e the value of the right operand, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eRuby can compare a lot more than just numbers. It can also compare strings:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"yellow\" == \"yellow\" #=\u0026gt;true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd variables with known values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy_mood = \"happy\"\u003cbr\u003e\u003cbr\u003emy_mood == \"happy\" #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt can also compare variables against other variables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eeaster_eggs = 16\u003cbr\u003educklings = 3\u003cbr\u003e\u003cbr\u003eeaster_eggs \u0026gt; ducklings #=\u0026gt; true\u003cbr\u003e\u003cbr\u003educklings \u0026gt;= easter_eggs #=\u0026gt; false\u003cbr\u003e\u003cbr\u003educklings == easter_eggs #=\u0026gt; false\u003cbr\u003e\u003cbr\u003e# if you call class on a variable, you can see if it's a string, an integer, etc.\u003cbr\u003e\u003cbr\u003educklings.class #=\u0026gt; Fixnum\u003cbr\u003eeaster_eggs.class #=\u0026gt; Fixnum\u003cbr\u003educklings.class == easter_eggs.class #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eComparison operators are essential to developing logical flow.\u003c/p\u003e","exportId":"booleans"}]},{"id":21881,"name":"Procedural Ruby: Logic and Conditionals","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g432bd1e45a8e1f2d5a214fdb813581ba","items":[{"id":203669,"title":"Conditionals","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"conditional-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/conditional-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/conditional-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/conditional-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine control flow for when a Ruby program is executed.\u003c/li\u003e\n\u003cli\u003eImplement control flow in different ways.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, and \u003ccode\u003eelsif\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003cp\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dcNgPOZCaBk\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=dcNgPOZCaBk\"\u003eRuby Conditionals\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eDefine Control Flow\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA control flow construct is a language feature which disrupts the normal\nprogression to the next statement and conditionally or unconditionally\nbranches to another location in source code.\n— \u003ca href=\"http://blog.rubybestpractices.com/posts/rklemme/004-Control_Flow.html\"\u003eRobert Klemme\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn other words, control flow lets you tell your program what code to execute\nconditionally. As humans, we actually enact flow control \u003cem\u003eevery day\u003c/em\u003e. For\ninstance, if you are hungry, you will go and get a snack. Otherwise, you'll stay\nput and continue to read this awesome readme.\u003c/p\u003e\n\n\u003cp\u003eControl flow is an important part of Ruby programming and web development. In\nthe context of a web application, for example, you can easily think of content\nor functionality on a website you've visited that is only available to a user\n\u003cem\u003eif\u003c/em\u003e that user is logged in.\u003c/p\u003e\n\n\u003ch2\u003eImplementing Control Flow\u003c/h2\u003e\n\n\u003cp\u003eThere are several ways to tell your program to conditionally execute certain\ncode, the basic forms of which are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, and \u003ccode\u003eelsif\u003c/code\u003e statements,\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecase\u003c/code\u003e statements,\u003c/li\u003e\n\u003cli\u003eloops.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this reading, we're going to discuss the first group of these \"conditional\"\nstatements: \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, and \u003ccode\u003eelsif\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUse IRB, copying the provided code snippets, to follow along in this lesson.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eif\u003c/code\u003e Statements\u003c/h3\u003e\n\n\u003cp\u003eOne of the most common ways to enact control flow is the \u003ccode\u003eif\u003c/code\u003e statement.\nWhatever block of code that follows the \u003ccode\u003eif\u003c/code\u003e statement will get evaluated\n— i.e. read and enacted by the computer. If this evaluation of the \u003ccode\u003eif\u003c/code\u003e\nstatement results in \u003ccode\u003etrue\u003c/code\u003e, then the code through to the associated \u003ccode\u003eend\u003c/code\u003e\nstatement will run.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a few examples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif 5 \u0026gt; 2\u003cbr\u003e  print \"5 is greater than 2\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe code above will print \"5 is greater than 2\" because the \u003ccode\u003eif\u003c/code\u003e statement\nevaluates as \u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMeanwhile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif 2 \u0026gt; 5\u003cbr\u003e  puts \"2 is greater than 5\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe code above will not print anything because the \u003ccode\u003eif\u003c/code\u003e statement evaluates as \u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo what if we want our program to print something \u003cem\u003eelse\u003c/em\u003e when the \u003ccode\u003eif\u003c/code\u003e condition\nevaluates as \u003ccode\u003efalse\u003c/code\u003e?\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003eelse\u003c/code\u003e Keyword\u003c/h3\u003e\n\n\u003cp\u003eTo accomplish this, we can follow an \u003ccode\u003eif\u003c/code\u003e statement with an \u003ccode\u003eelse\u003c/code\u003e statement. Take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif false\u003cbr\u003e   puts \"This will never get printed because the above\u003cbr\u003e     statement evaluates to false.\"\u003cbr\u003eelse\u003cbr\u003e   puts \"This will get printed!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn \u003ccode\u003eelse\u003c/code\u003e statement sets a \"default\" condition for when your \u003ccode\u003eif\u003c/code\u003e statement's\nconditional evaluates as \u003ccode\u003efalse\u003c/code\u003e. Every condition that doesn't evaluate as\n\u003ccode\u003etrue\u003c/code\u003e will instead pass through the \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\n\u003ch4\u003eFurther Examples\u003c/h4\u003e\n\n\u003cp\u003eSo far, we've seen \u003ccode\u003eif\u003c/code\u003e statements that rely on the explicit use of the \u003ccode\u003etrue\u003c/code\u003e\nand \u003ccode\u003efalse\u003c/code\u003e booleans. Let's look at some examples that require a little more\nthought.\u003c/p\u003e\n\n\u003ch5\u003eExample 1\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003eif 6 + 3 == 9\u003cbr\u003e  puts \"Giraffes have no vocal cords.\"\u003cbr\u003eend\u003cbr\u003e#=\u0026gt; \"Giraffes have no vocal cords.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe code above will print \u003ccode\u003eGiraffes have no vocal cords.\u003c/code\u003e Since \u003ccode\u003e6 + 3\u003c/code\u003e equals\n\u003ccode\u003e9\u003c/code\u003e (i.e. \u003ccode\u003e9\u003c/code\u003e is equal to \u003ccode\u003e9\u003c/code\u003e), the \u003ccode\u003eif\u003c/code\u003e statement's conditional evaluates as\n\u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e \u003cem\u003eRemember that the comparative operator\u003c/em\u003e \u003ccode\u003e==\u003c/code\u003e \u003cem\u003e(\"double-equals\") is\nused to check equality. This is distinct from the assignment operator\u003c/em\u003e\n\u003ccode\u003e=\u003c/code\u003e \u003cem\u003e(\"single-equals\"), which is used to set the value of a variable.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch5\u003eExample 2\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003eif 6 + 3 \u0026lt; 5\u003cbr\u003e  puts \"The hummingbird is the only animal that can fly backwards\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe code above will not print anything because \u003ccode\u003e6 + 3\u003c/code\u003e, which is equivalent to\n\u003ccode\u003e9\u003c/code\u003e, is \u003cem\u003enot\u003c/em\u003e less than \u003ccode\u003e5\u003c/code\u003e, making the \u003ccode\u003eif\u003c/code\u003e statement's conditional evaluate\nas \u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch5\u003eExample 3\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003edog = \"satisfied\"\u003cbr\u003e\u003cbr\u003eif dog == \"hungry\"\u003cbr\u003e  puts \"Refilling food bowl.\"\u003cbr\u003eelse\u003cbr\u003e  puts \"Reading newspaper.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e#=\u0026gt; \"Reading newspaper.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\n\u003ccode\u003eelsif\u003c/code\u003e Statements\u003c/h3\u003e\n\n\u003cp\u003eSometimes, we want to control the flow of our program based on more than one\ncondition. For example, if I am hungry, then I will get a snack. If I am\nthirsty, then I will get a drink of water. Otherwise, I will stay here and\ncontinue learning more about control flow.\u003c/p\u003e\n\n\u003cp\u003eWe can add additional layers of complexity to our \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e statements by\nusing the \u003ccode\u003eelsif\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003cp\u003eLet's add an \u003ccode\u003eelsif\u003c/code\u003e statement to Example 3 from above:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog = \"thirsty\"\u003cbr\u003e\u003cbr\u003eif dog == \"hungry\"\u003cbr\u003e  puts \"Refilling food bowl.\"\u003cbr\u003eelsif dog == \"thirsty\"\u003cbr\u003e  puts \"Refilling water bowl.\"\u003cbr\u003eelse\u003cbr\u003e  puts \"Reading newspaper.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e#=\u0026gt; \"Refilling water bowl.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can cascade as many \u003ccode\u003eelsif\u003c/code\u003e statements as we wish, however \u003ccode\u003eelsif\u003c/code\u003e statements\ncan only be used following an \u003ccode\u003eif\u003c/code\u003e statement, and must precede the associated\n\u003ccode\u003eelse\u003c/code\u003e statement (if used).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog = \"cuddly\"\u003cbr\u003e\u003cbr\u003eif dog == \"hungry\"\u003cbr\u003e  puts \"Refilling food bowl.\"\u003cbr\u003eelsif dog == \"thirsty\"\u003cbr\u003e  puts \"Refilling water bowl.\"\u003cbr\u003eelsif dog == \"playful\"\u003cbr\u003e  puts \"Playing tug-of-war.\"\u003cbr\u003eelsif dog == \"cuddly\"\u003cbr\u003e  puts \"Snuggling.\"\u003cbr\u003eelse\u003cbr\u003e  puts \"Reading newspaper.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e#=\u0026gt; \"Snuggling.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we learned how to use control flow to execute code\nconditionally. Specifically, we learned:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003ehow to use an \u003ccode\u003eif\u003c/code\u003e statement to execute code only if a certain condition is\ntrue\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ewe can \u003cem\u003eoptionally\u003c/em\u003e use one or more \u003ccode\u003eelsif\u003c/code\u003e statements if we need to\ncheck multiple conditions and execute different code for each of them\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ewe can \u003cem\u003eoptionally\u003c/em\u003e use an \u003ccode\u003eelse\u003c/code\u003e statement if we want to specify\n\"default\" code that should execute if the condition(s) we are checking\nall evaluate as false\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ethe order of the statements must be: \u003ccode\u003eif\u003c/code\u003e first, followed by any \u003ccode\u003eelsif\u003c/code\u003es,\nand \u003ccode\u003eelse\u003c/code\u003e, if used, last\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThat's all for now — we'll discuss \u003ccode\u003ecase\u003c/code\u003e statements and looping in upcoming\nlessons.\u003c/p\u003e","exportId":"conditionals"},{"id":203670,"title":"Speaking Grandma - Control Flow Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"speaking-grandma\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/speaking-grandma/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/speaking-grandma\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/speaking-grandma/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eControl flow by using \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements.\u003c/li\u003e\n\u003cli\u003eManipulate strings correctly.\u003c/li\u003e\n\u003cli\u003eEvaluate the type case of a string.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this lab.\u003c/li\u003e\n\u003cli\u003eRun the test suite using either the \u003ccode\u003erspec\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e command. You'll be coding your solution in \u003ccode\u003egrandma.rb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWrite a \u003ccode\u003espeak_to_grandma\u003c/code\u003e method. \n\n\u003cul\u003e\n\u003cli\u003eThe method should take in a string argument containing a phrase and check to see if the phrase is written in all uppercase: if it isn't, then grandma can't hear you. She should then respond with (return) \u003ccode\u003eHUH?! SPEAK UP, SONNY!\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIf you shout at her (i.e. call the method with a string argument containing a phrase that \u003cem\u003eis\u003c/em\u003e all uppercase, then she \u003cem\u003ecan\u003c/em\u003e hear you (or at least she thinks that she can) and should respond with (return) \u003ccode\u003eNO, NOT SINCE 1938!\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eHowever, if the phrase is \u003cem\u003eexactly\u003c/em\u003e equal to: \u003ccode\u003e\"I LOVE YOU GRANDMA!\"\u003c/code\u003e, then Grandma is very pleased and definitely hears that! and should repond with (return) \u003ccode\u003eI LOVE YOU TOO PUMPKIN!\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eA few things to think about:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou'll need to use \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements to implement the logic of grandma responding with the appropriate string based on whether or not you speak to her in all uppercase, and/or whether you express your love. \u003c/li\u003e\n\u003cli\u003eThink about how we can check to see if a string is all uppercase. Reference the information below on manipulating strings. \u003c/li\u003e\n\u003cli\u003eThink about the response as a return value.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eManipulating Strings\u003c/h2\u003e\n\n\u003cp\u003eOne of the things you'll need to determine is if the argument that the \u003ccode\u003espeak_to_grandma\u003c/code\u003e method takes in is formatted a certain way (all uppercase).\u003c/p\u003e\n\n\u003cp\u003eThere are many methods on the \u003ca href=\"http://www.ruby-doc.org/core-2.1.4/String.html\"\u003eString class\u003c/a\u003e that manipulate strings. Let's take a look at a few:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"Hello World\".upcase\u003cbr\u003e#=\u0026gt; \"HELLO WORLD\"\u003cbr\u003e\"Hello World\".reverse\u003cbr\u003e#=\u0026gt; \"dlroW olleH\" \u003cbr\u003e\"Hello World\".downcase\u003cbr\u003e#=\u0026gt; \"hello world\" \u003cbr\u003e\"Hello World\".capitalize\u003cbr\u003e#=\u0026gt; \"Hello world\" \u003cbr\u003e\"Hello World\".swapcase\u003cbr\u003e#=\u0026gt; \"hELLO wORLD\" \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich one can we use to check that the argument string (i.e. what you're saying to Grandma) is all uppercase? You can use the comparison operator (\u003ccode\u003e==\u003c/code\u003e) to determine if the string you pass into your method call as an argument \u003cem\u003ematches\u003c/em\u003e (\"is equal to\") that same string, but in uppercase form.\u003c/p\u003e\n\n\u003cp\u003eOn that same note, we can also use the comparison operator to check and see if the string matches \u003ccode\u003e\"I LOVE YOU GRANDMA!\"\u003c/code\u003e\u003c/p\u003e","exportId":"g166f287c96138ca3d4f30bca9c3ff24b"},{"id":203671,"title":"Operattors","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"operators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/operators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/operators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/operators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the ternary operator (\u003ccode\u003e?:\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eUnderstand when to use the ternary operator\u003c/li\u003e\n\u003cli\u003eUnderstand the use of statement modifiers\u003c/li\u003e\n\u003cli\u003eReview using comparison operators and boolean operators.\u003c/li\u003e\n\u003cli\u003ePractice implementing control flow using \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eReviewing Operations\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be combining our knowledge of operators (like comparison and boolean operators) with our new understanding of control flow using \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements. \u003c/p\u003e\n\n\u003cp\u003eThis lab will require you to use the comparison operators (\u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e==\u003c/code\u003e, etc.) and boolean operators that you learned about in the previous unit.\u003c/p\u003e\n\n\u003cp\u003eThis lab will require you to use a new operator that you haven't been introduced to before: the ternary operator.\u003c/p\u003e\n\n\u003ch2\u003eThe Ternary Operator \u003ccode\u003e?:\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe ternary operator (\u003ccode\u003e?:\u003c/code\u003e) is another type of comparison operator that is used in the context of \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e statements. Its best use case is to replace a simple \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statement where you're basically saying: if this is true do something; if it's false do something else. If you have an \u003ccode\u003eif\u003c/code\u003e statement that requires an \u003ccode\u003eelsif\u003c/code\u003e, a ternary operator is not the best choice. \u003c/p\u003e\n\n\u003cp\u003eLet's take this \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statement pair and express it with a ternary operator instead: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eage = 1\u003cbr\u003e\u003cbr\u003eif age \u0026lt; 2\u003cbr\u003e   \"baby\"\u003cbr\u003eelse\u003cbr\u003e   \"not a baby\"\u003cbr\u003eend \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember that if the condition associated with the \u003ccode\u003eif\u003c/code\u003e statement returns \u003ccode\u003etrue\u003c/code\u003e, then the code underneath the conditional line will execute. If it fails however, then the code underneath the \u003ccode\u003eelse\u003c/code\u003e will execute. In the above example, the value of the \u003ccode\u003eage\u003c/code\u003e variable is \u003ccode\u003e1\u003c/code\u003e; since this is less than \u003ccode\u003e2\u003c/code\u003e, the conditional will evaluate as \u003ccode\u003etrue\u003c/code\u003e and will then return the string \u003ccode\u003e\"baby\"\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the same code using the ternary operator: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eage = 1\u003cbr\u003e\u003cbr\u003eage \u0026lt; 2 ? \"baby\" : \"not a baby\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow does this work? In the above statement, the code before the \u003ccode\u003e?\u003c/code\u003e (\"question mark\") is evaluated as a boolean expression. If it returns true, the code on the left side of the \u003ccode\u003e:\u003c/code\u003e (\"colon\") will run, otherwise the code on the right will run. \u003c/p\u003e\n\n\u003cp\u003eIt's a way of expressing an \u003ccode\u003eif\u003c/code\u003e and an \u003ccode\u003eelse\u003c/code\u003e statement together on one line in this format:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econditional ? action_if_true : action_if_false\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eWhy Use the Ternary Operator?\u003c/h2\u003e\n\n\u003cp\u003eThe ternary operator has a few things going for it. First of all, as Rubyists, we like to think about design. Is our code needlessly complex? Are our methods too long? Is our code self-explanatory––i.e., can someone reading it easily understand what it does? These are good questions to keep in mind as you learn to build more and more complicated programs. In fact, Ruby is a language that lends itself particularly well to elegant design. There are many design patterns that you'll learn about later on in this course, but for now, just keep the above questions in mind. \u003c/p\u003e\n\n\u003cp\u003eOur first implementation of our are-you-a-baby? program required six lines of code. Using the ternary operator, we were able to implement the same behavior in only two lines! That's a great piece of refactoring!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eA Note on Usage:\u003c/strong\u003e \u003cem\u003eWe use the ternary operator in a case like the one here when the\u003c/em\u003e \u003ccode\u003eif\u003c/code\u003e \u003cem\u003e\u0026amp;\u003c/em\u003e \u003ccode\u003eelse\u003c/code\u003e \u003cem\u003estatement pair that we would otherwise construct is\u003c/em\u003e \u003cstrong\u003every simple.\u003c/strong\u003e \u003cem\u003eIf your situation requires\u003c/em\u003e \u003ccode\u003eif\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003eelsif\u003c/code\u003e \u003cem\u003estatements, then the switching is too complex for the ternary operator making it inappropriate to use.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eStatement Modifiers\u003c/h2\u003e\n\n\u003cp\u003eRuby has a useful feature called a statement modifier that allows you to put a conditional at the end of a statement. For example, let's consider this statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"Hey, it's 2015!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, we don't want to say \"Hey, it's 2015!\" every time this code is run. We only want to say it's 2015 if it's actually 2015. This is a good case for an \u003ccode\u003eif\u003c/code\u003e statement modifier.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethis_year = Time.now.year\u003cbr\u003eputs \"Hey, it's 2015!\" if this_year == 2015\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, with the statement modifier \u003ccode\u003eif this_year == 2015\u003c/code\u003e we are only putting it if the year is, in fact, 2015.\u003c/p\u003e\n\n\u003cp\u003eWe can also use \u003ccode\u003eunless\u003c/code\u003e in a statement modifier as well. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethis_year = Time.now.year\u003cbr\u003eputs \"Hey, it's not 2015!\" unless this_year == 2015\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this lab. \u003c/li\u003e\n\u003cli\u003eRun the test suite in your terminal and check out the error messages and expectations in the spec file. You'll be coding your solutions in \u003ccode\u003elib/operations.rb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe first method, \u003ccode\u003eunsafe?\u003c/code\u003e will take in an argument of a speed and return true if the speed is unsafe and false if it is safe. \n\n\u003cul\u003e\n\u003cli\u003eUse an \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statement pair to build the \u003ccode\u003eunsafe?\u003c/code\u003e method. It should return \u003ccode\u003etrue\u003c/code\u003e if the speed is either below \u003ccode\u003e40\u003c/code\u003e or above \u003ccode\u003e60\u003c/code\u003e. \u003cem\u003eGoing 30 mph on the freeway would be unsafe, as would going 95 mph. Going 50 miles per hour, however, would return \u003ccode\u003efalse\u003c/code\u003e as that's within the \"safe\" range.\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e Build the method \u003ccode\u003enot_safe?\u003c/code\u003e that is a version of your previous \u003ccode\u003eunsafe?\u003c/code\u003e method but use the ternary operator (\u003ccode\u003e?:\u003c/code\u003e) instead of an \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statement pair.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eA Debugging Reminder:\u003c/strong\u003e You can interact with your methods by typing \u003ccode\u003erequire 'pry'\u003c/code\u003e at the top of your file, running \u003ccode\u003egem install pry\u003c/code\u003e in the terminal, and then placing the line \u003ccode\u003ebinding.pry\u003c/code\u003e inside the method that you want to play around with. Then, when you run the test suite using \u003ccode\u003elearn test\u003c/code\u003e in your terminal, your program will freeze when it hits the binding and you'll be able to explore your method inside your console.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.techotopia.com/index.php/Ruby_Operators\"\u003eRuby Operators\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://stackoverflow.com/a/4252945\"\u003eStack Overflow - Ternary Operators\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gc21949a16b1f6fcb095a1d8570ab9454"},{"id":203672,"title":"Case Statements","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"case-statements-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/case-statements-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/case-statements-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/case-statements-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives:\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDistinguish a \u003ccode\u003ecase\u003c/code\u003e statement from other patterns of flow control.\u003c/li\u003e\n\u003cli\u003eIdentify when to use a \u003ccode\u003ecase\u003c/code\u003e statement.\u003c/li\u003e\n\u003cli\u003eWrite a \u003ccode\u003ecase\u003c/code\u003e statement\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is a \u003ccode\u003ecase\u003c/code\u003e Statement?\u003c/h2\u003e\n\n\u003cp\u003eA case statement is a powerful tool to test for certain conditions. They are used to run multiple conditions against one value. There are three basic steps to creating a case statement. First, we'll need a value. Second, we'll want one or more conditions to compare to the value. Third, we'll add the code we want to run if that condition is met. Let's walk through these steps in more detail below.\u003c/p\u003e\n\n\u003ch3\u003eWhy Use a \u003ccode\u003ecase\u003c/code\u003e Statement?\u003c/h3\u003e\n\n\u003cp\u003eIn the previous lessons, we've learned about using \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements to enact flow control in our programs. Let's look at an example of using \u003ccode\u003eif\u003c/code\u003e statements that would benefit from being refactored to use a \u003ccode\u003ecase\u003c/code\u003e statement instead. \u003c/p\u003e\n\n\u003cp\u003eLet's say we have a program that sets a \u003ccode\u003ename\u003c/code\u003e variable equal to a person's name. Our program needs to execute certain code depending on what that person's name is. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename = \"Alice\"\u003cbr\u003e\u003cbr\u003eif name == \"Alice\"\u003cbr\u003e  puts \"Hello, Alice!\"\u003cbr\u003eelsif name == \"The White Rabbit\"\u003cbr\u003e  puts \"Don't be late, White Rabbit\"\u003cbr\u003eelsif name == \"The Mad Hatter\"\u003cbr\u003e  puts \"Welcome to the tea party, Mad Hatter\"\u003cbr\u003eelsif name == \"The Queen of Hearts\"\u003cbr\u003e  puts \"Please don't chop off my head!\"\u003cbr\u003eelse\u003cbr\u003e  puts \"Whoooo are you?\"\u003cbr\u003eend \u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove we are using many \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelsif\u003c/code\u003e statements to check if the value of our name variable matches a particular string by using the comparative operator (\u003ccode\u003e==\u003c/code\u003e) in each one. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e \u003cem\u003eRemember that the assignment operator (\u003c/em\u003e\u003ccode\u003e=\u003c/code\u003e\u003cem\u003e) is distinct from the comparative operator (\u003c/em\u003e\u003ccode\u003e==\u003c/code\u003e\u003cem\u003e).\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelsif\u003c/code\u003e statements in this manner creates \"code smell\"—a piece of code that is needlessly complex or difficult to read. Not only are we using a lot of \u003ccode\u003eif\u003c/code\u003e statements, but we are being repetitive in our use of the comparative operator (\u003ccode\u003e==\u003c/code\u003e). We can eliminate this \"code odor\" by refactoring our flow control to use a \u003ccode\u003ecase\u003c/code\u003e statement instead. The \u003ccode\u003ecase\u003c/code\u003e statement will allow us to run multiple conditions against the same value, meaning that we can check the \u003ccode\u003ename\u003c/code\u003e variable against a variety of conditions without repeating our use of the comparative operator (\u003ccode\u003e==\u003c/code\u003e) in each one. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecase name \u003cbr\u003e\u003cbr\u003e  when \"Alice\"\u003cbr\u003e    puts \"Hello, Alice!\"\u003cbr\u003e  when \"The White Rabbit\"\u003cbr\u003e    puts \"Don't be late, White Rabbit\"\u003cbr\u003e  when \"The Mad Hatter\"\u003cbr\u003e    puts \"Welcome to the tea party, Mad Hatter\"\u003cbr\u003e  when \"The Queen of Hearts\"\u003cbr\u003e    puts \"Please don't chop off my head!\"\u003cbr\u003e  else \u003cbr\u003e    puts \"Whoooo are you?\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eWriting a \u003ccode\u003ecase\u003c/code\u003e Statement\u003c/h3\u003e\n\n\u003cp\u003eNow that we understand \u003cem\u003ewhen\u003c/em\u003e to use a \u003ccode\u003ecase\u003c/code\u003e statement in place of a series of \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelsif\u003c/code\u003e statements, let's look at \u003cem\u003ehow\u003c/em\u003e to build a \u003ccode\u003ecase\u003c/code\u003e statement from scratch. \u003c/p\u003e\n\n\u003ch4\u003eStep 1: Create a Value\u003c/h4\u003e\n\n\u003cp\u003eA case statement starts with the \u003ccode\u003ecase\u003c/code\u003e keyword followed by a value to test.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecase greeting\u003cbr\u003e# ...\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eStep 2: Create the Conditions\u003c/h4\u003e\n\n\u003cp\u003eNext, the \u003ccode\u003ewhen\u003c/code\u003e keyword is followed by a condition.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecase greeting\u003cbr\u003e  when \"unfriendly_greeting\"\u003cbr\u003e    #...\u003cbr\u003e  when \"friendly_greeting\"\u003cbr\u003e    #...\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eStep 3: Add the Code\u003c/h4\u003e\n\n\u003cp\u003eThe functionality that we wish to happen when the condition is met is placed on an indented line directly under the \u003ccode\u003ewhen\u003c/code\u003e line. Let's define the behavior:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting = \"friendly_greeting\"\u003cbr\u003e\u003cbr\u003ecase greeting\u003cbr\u003e  when \"unfriendly_greeting\"\u003cbr\u003e    puts \"What do you want!?\"\u003cbr\u003e  when \"friendly_greeting\"\u003cbr\u003e    puts \"Hi! How are you?\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5\u003eAdvanced: How does it work?\u003c/h5\u003e\n\n\u003cp\u003eUnder the hood, \u003ccode\u003ecase\u003c/code\u003e statements actually evaluate their \u003ccode\u003ewhen\u003c/code\u003e conditionals by implicitly using the \"case equality operator\"; the case equality operator is otherwise represented by \u003ccode\u003e===\u003c/code\u003e (\"threequals\") sign. While \u003ccode\u003ecase\u003c/code\u003e can be used to replace the comparison operator in a situation like the first example in this reading, it's doing something slightly different. \u003ca href=\"http://stackoverflow.com/questions/3422223/vs-in-ruby?lq=1\"\u003eRead more about === here.\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSimilar to the comparison operations above, the \u003ccode\u003ewhen\u003c/code\u003e statement evaluates to a boolean value by using the \u003ccode\u003ecase\u003c/code\u003e value at the start of the \u003ccode\u003ecase\u003c/code\u003e statement and the value following the \u003ccode\u003ewhen\u003c/code\u003e keyword. If this \u003ccode\u003ewhen\u003c/code\u003e condition evaluates to \u003ccode\u003efalse\u003c/code\u003e, then the indented code beneath that condition is skipped; if it evaluates to \u003ccode\u003etrue\u003c/code\u003e, then the indented code beneath it is executed.\u003c/p\u003e\n\n\u003cp\u003eIn the above case, Ruby compares the \u003ccode\u003ecase\u003c/code\u003e value to the two \u003ccode\u003ewhen\u003c/code\u003e conditions; \u003ccode\u003e\"friendly_greeting\" === \"unfriendly_greeting\"\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, so \u003ccode\u003eputs \"What do you want!?\"\u003c/code\u003e is \u003cem\u003enot\u003c/em\u003e run; however, \u003ccode\u003e\"friendly_greeting\" === \"friendly_greeting\"\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, so \u003ccode\u003eputs \"Hi! How are you?\"\u003c/code\u003e \u003cem\u003eis\u003c/em\u003e run.\u003c/p\u003e\n\n\u003cp\u003eIt is not necessary at this point to understand the distinction between the comparative operator (\u003ccode\u003e==\u003c/code\u003e) and the case comparison operator (\u003ccode\u003e===\u003c/code\u003e). Just realize that there \u003cem\u003eis\u003c/em\u003e a distinction, even though the usages relevant to you right now will be similar.\u003c/p\u003e\n\n\u003ch2\u003eExample 1: Weather\u003c/h2\u003e\n\n\u003cp\u003eIn this example, we set the \u003ccode\u003ecurrent_weather\u003c/code\u003e to \u003ccode\u003e\"raining\"\u003c/code\u003e. Next, we use \u003ccode\u003ewhen\u003c/code\u003e statements to describe a list of possible matches. Since \u003ccode\u003ecurrent_weather === \"raining\"\u003c/code\u003e we'd expect this code to put \u003ccode\u003e\"grab an umbrella\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrent_weather = \"raining\"\u003cbr\u003e\u003cbr\u003ecase current_weather\u003cbr\u003e  when \"sunny\"\u003cbr\u003e    puts \"grab some sunscreen!\"\u003cbr\u003e  when \"raining\"\u003cbr\u003e    puts \"grab an umbrella\"\u003cbr\u003e  when \"snowing\"\u003cbr\u003e    puts \"bundle up\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eExample 2: Grades\u003c/h2\u003e\n\n\u003cp\u003eThis example requires a basic understanding of \u003ccode\u003egets.chomp\u003c/code\u003e. It allows us to get a user's input, and use it in our code. \u003ca href=\"http://stackoverflow.com/questions/23193813/how-does-gets-and-gets-chomp-in-ruby-work\"\u003eRead more on what it does here.\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHere, we are prompting the user to input a student's grade. Based on that \u003ccode\u003egrade\u003c/code\u003e, the program then prints out the string associated with the matching condition. If the user enters \"A\", then \u003ccode\u003egrade = \"A\"\u003c/code\u003e. Since \u003ccode\u003egrade === \"A\"\u003c/code\u003e, Ruby will print \u003ccode\u003eGood job, Homestar!\u003c/code\u003e to the screen. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprint \"Enter your grade: \"\u003cbr\u003egrade = gets.chomp\u003cbr\u003e\u003cbr\u003ecase grade\u003cbr\u003e  when \"A\"\u003cbr\u003e    puts \"Good job, Homestar!\"\u003cbr\u003e  when \"B\"\u003cbr\u003e    puts \"You can totally do better!\"\u003cbr\u003e  when \"C\"\u003cbr\u003e    puts \"Find a mentor to help you!\"\u003cbr\u003e  else\u003cbr\u003e    puts \"You're just making that up!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e","exportId":"case-statements"}]},{"id":21882,"name":"Procedural Ruby: Looping","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g3d81c09847a2996d59490eaad2743e77","items":[{"id":203673,"title":"Introduction to Looping","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eAbstraction and Repetition in Programming\u003c/h2\u003e\n\n\u003cp\u003eAs programmers, we are lazy. This isn't a bad thing. It means we strive for efficiency in every way. If we can get our program to behave in a certain way or carry out a certain task with fewer lines of code, we do it. We think of our code like an artist thinks of their paintings or an architect thinks of their buildings. We want the programs we write to be beautiful. That means they should be simple and eloquent. \u003c/p\u003e\n\n\u003cp\u003eWhat does it mean to write code that is both efficient and eloquent? It means we rely on abstraction. A method is a form of abstraction. \u003c/p\u003e\n\n\u003cp\u003eFor example, let's say we have a program that we want to greet a given user. We could do so with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"Hello, program user.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code is literal. It greets some un-identified user with the title \u003ccode\u003e\"program user\"\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eIn order to greet someone else later on, we would have to re-write the above code, changing the title of the person we are greeting:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"Hello, someone else.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNot only do we have to repeat the same line of code again and again, changing one consistent thing about it each time, but the use of the line of code above isn't descriptive of the job we are trying to accomplish. \u003c/p\u003e\n\n\u003cp\u003eThis line of code has a responsibility, its responsibility is to greet the user. But in order to understand that, you have to read the text that we are \u003ccode\u003eputs\u003c/code\u003e-ing out and really think about it. \u003c/p\u003e\n\n\u003cp\u003eWe can make this code eloquent, i.e. expressive of the job it is trying to accomplish, and re-usable and flexible by wrapping it in a method that takes an argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greet_user(name)\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have a method name that expresses the job or responsibility of the code it contains \u003cem\u003eand\u003c/em\u003e we have a way to re-use the same bit of code again and again, throughout our program, simply by calling the method. \u003c/p\u003e\n\n\u003cp\u003eRepetition and abstraction in programming go hand-in-hand. It's hard to imagine a program that must carry out a certain responsibilty or do a certain job \u003cem\u003eonly once\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou might be writing code for a game that must ask the user for input again and again, until they either win or lose. You might need to send a user of a web application updates about their account repeatedly. You might need to do something as simple as \u003ccode\u003eputs\u003c/code\u003e out some text to the terminal a specified number of times. \u003c/p\u003e\n\n\u003cp\u003eAll of these scenarios, and many more, can be accomplished with a programming construct called \u003cstrong\u003elooping\u003c/strong\u003e. \u003c/p\u003e\n\n\u003ch2\u003eLooping\u003c/h2\u003e\n\n\u003cp\u003eImagine a scenario in which we are writing a program that needs to \u003ccode\u003eputs\u003c/code\u003e out a greeting to the user a certain number of times, let's say ten times. \u003c/p\u003e\n\n\u003cp\u003eWe might accomplish it like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repititive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis implementation has a couple of obvious drawbacks. First, I had to manually type that line of code ten times, which goes against my lazy programmer nature. Secondly, are you sure I typed it ten times? Go ahead and count, I'll wait. \u003c/p\u003e\n\n\u003cp\u003eIt's there eleven times! Another drawback: you need to very closely examine each line to make sure they are in fact identical. In fact, there is a discrepancy in the set of lines above. Can you spot it?\u003c/p\u003e\n\n\u003cp\u003eCode like the snippet above is hard to maintain, but, above all, it is not eloquent. It doesn't immediately convey the task it is responsible for carrying out to the person reading it. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLoops\u003c/strong\u003e, however, allow us to tell our program to do the same thing over and over with just a few simple, clear, and easy to understand lines. \u003c/p\u003e\n\n\u003cp\u003eThere are a number of different looping constructs available to us. In other words, there are a few different types of looping methods and implementation that we will learn. The basic principle, though, is that looping allows us to \u003cstrong\u003eabstract\u003c/strong\u003e away the actual mechanics of enacting the same, or similar, lines of code a certain number of times. Instead of explicitly telling our program to \u003ccode\u003eputs\u003c/code\u003e out a phrase ten times, we can use a loop like this one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e10.times do \u003cbr\u003e  puts \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopy and paste the above code snippet into IRB in your terminal and hit \u003ccode\u003eenter\u003c/code\u003e. You should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003e# =\u0026gt; 10 \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRegardless of whether we understand how the code above works, we can see the advantages it has over our first implementation. First, we are able to achieve the same result as our first implementation with far fewer lines of code. Secondly, it eliminates the room for error that manually typing out \u003ccode\u003eputs \"Hi! Welcome to my very repetitive program\"\u003c/code\u003e allows. \u003c/p\u003e\n\n\u003cp\u003eLastly, it clearly conveys to the reader exactly what it will accomplish. It reads like this \"ten times do \u003ccode\u003eputs\u003c/code\u003e out this phrase to the terminal\". This is abstract, rather than the explicit typing of ten lines of identical code, which is literal. And this is eloquent, because it speaks for itself. \u003c/p\u003e","exportId":"introduction-to-looping"},{"id":203674,"title":"Looping","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIntroduce the concept of a basic \u003ccode\u003eloop\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIntroduce the \u003ccode\u003ebreak\u003c/code\u003e keyword.\u003c/li\u003e\n\u003cli\u003eIntroduce the concept of an incrementing counter.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebreak\u003c/code\u003e out of a \u003ccode\u003eloop\u003c/code\u003e based on a \u003ccode\u003ecounter\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThere are a number of different ways to accomplish looping––the task of telling\nour program to do something a certain number of times. Here, we'll be looking at\nthe most basic way to build a loop: using the \u003ccode\u003eloop\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch2\u003eThe \u003ccode\u003eloop\u003c/code\u003e Keyword\u003c/h2\u003e\n\n\u003cp\u003eThe first looping construct that we'll discuss is \u003ccode\u003eloop\u003c/code\u003e. This is the simplest\nlooping construct that we have in Ruby. It simply executes a block (the code\nthat is between the \u003ccode\u003edo\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e keywords). Try this in IRB in your Terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eloop do\u003cbr\u003e  puts \"I have found the Time Machine!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will output \u003ccode\u003eI have found the Time Machine!\u003c/code\u003e an infinite number of times in\nyour Terminal. Typically, you can use \u003ccode\u003eControl\u003c/code\u003e+\u003ccode\u003eC\u003c/code\u003e to break out of the loop in\nyour terminal, but in IRB this is not the case. Exit the terminal session to\nbreak the infinite loop.\u003c/p\u003e\n\n\u003cp\u003eLoops start with the \u003ccode\u003eloop\u003c/code\u003e keyword and are opened by the following \u003ccode\u003edo\u003c/code\u003e and\n\u003ccode\u003eend\u003c/code\u003e block. All the code that goes inside the \u003ccode\u003edo\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e is considered the\nloop's body or block; that's the code that will execute on repeat.\u003c/p\u003e\n\n\u003ch2\u003eStopping Loops with Break and Counters\u003c/h2\u003e\n\n\u003cp\u003eInfinite loops will break our program. The \u003ccode\u003eloop\u003c/code\u003e keyword alone will create an\ninfinite loop. Generally, we want to loop only a certain number of times. We can\nuse the \u003ccode\u003ebreak\u003c/code\u003e keyword inside the body of the loop to exit or abort the loop\nand continue with the rest of our code. Consider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eloop do\u003cbr\u003e  puts \"You'll see this exactly once.\"\u003cbr\u003e  break # Exit the Loop\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eputs \"And the Loop is Done\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur loop starts, it prints our message, and then the next line of code, \u003ccode\u003ebreak\u003c/code\u003e\nwill actually end the loop. A loop that only runs once isn't useful. Neither is\na loop that runs forever. So how do we actually build a useful loop, say, that\nruns exactly 10 times? Well first, we need a counter. Then we need to\nconditionally break out of the loop when the counter reaches 10. Then we need to\nincrement the counter at every iteration (or execution of the loop).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecounter = 0 # Start our counter at 0, we have never run the loop\u003cbr\u003eloop do # Start our loop\u003cbr\u003e  # increment our counter by 1 and set it equal to the sum of its current value, plus 1. \u003cbr\u003e  counter = counter + 1\u003cbr\u003e\u003cbr\u003e  # Do Something\u003cbr\u003e  puts \"Iteration #{counter} of the loop\"\u003cbr\u003e\u003cbr\u003e  if counter \u0026gt;= 10 # If our counter is 10 or more\u003cbr\u003e    break # Stop the loop\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you copy this to IRB you'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eIteration 1 of the loop\u003cbr\u003eIteration 2 of the loop\u003cbr\u003eIteration 3 of the loop\u003cbr\u003eIteration 4 of the loop\u003cbr\u003eIteration 5 of the loop\u003cbr\u003eIteration 6 of the loop\u003cbr\u003eIteration 7 of the loop\u003cbr\u003eIteration 8 of the loop\u003cbr\u003eIteration 9 of the loop\u003cbr\u003eIteration 10 of the loop\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is a common basic loop. With this construct we can \u003ccode\u003ebreak\u003c/code\u003e a \u003ccode\u003eloop\u003c/code\u003e based\non any condition, but the iteration count is a very common condition for\nstopping the loop.\u003c/p\u003e\n\n\u003ch2\u003eAdvanced: The Add-And-Assignment (or Plus-Equals) Operator \u003ccode\u003e+=\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAbove, we use the addition operator (\u003ccode\u003e+\u003c/code\u003e) and the assignment operator \u003ccode\u003e=\u003c/code\u003e\nseparately to reset the \u003ccode\u003ecounter\u003c/code\u003e variable to the sum of its old value, plus\none, every time we repeat the loop. The add-and-assignment operator combines the\nfunctionality of the addition operator \u003cem\u003eand\u003c/em\u003e the assignment operator. For\nexample, let's say that our favorite cat Maru has just had a birthday:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eadorable_cat = \"Maru\"\u003cbr\u003eage = 7\u003cbr\u003e\u003cbr\u003e# you've just had a birthday! add one year to your age:\u003cbr\u003eage = 7 + 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take another look at our \u003ccode\u003eage\u003c/code\u003e variable and the operation of incrementing\nit by \u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eage = 7\u003cbr\u003e# age starts at 7 and will get incremented after the birthday\u003cbr\u003eage = age + 1\u003cbr\u003eage #=\u0026gt; 8\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we have one variable, \u003ccode\u003eage\u003c/code\u003e which starts at \u003ccode\u003e7\u003c/code\u003e. Then, we reassign \u003ccode\u003eage\u003c/code\u003e\nto hold the original value of \u003ccode\u003eage\u003c/code\u003e plus \u003ccode\u003e1\u003c/code\u003e. \u003ccode\u003eage + 1\u003c/code\u003e is evaluated first,\nreturning \u003ccode\u003e8\u003c/code\u003e, and then we are assigning the result of that expression\n(everything on the right of \u003ccode\u003eage =\u003c/code\u003e, which again is \u003ccode\u003eage + 1\u003c/code\u003e, which just means\n\u003ccode\u003e8\u003c/code\u003e), as the new value for \u003ccode\u003eage\u003c/code\u003e. We can make this even more elegant by using\nthe add-and-assignment operator \u003ccode\u003e+=\u003c/code\u003e instead:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eage = 7\u003cbr\u003eage += 1\u003cbr\u003eage #=\u0026gt; 8\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, \u003ccode\u003e+=\u003c/code\u003e serves the purpose of the above line: \u003ccode\u003eage = age + 1\u003c/code\u003e. It's simply\ncondensing that action. It adds a numerical value (or other variable) to a\nnumerical variable, and reassigns that variable to hold the sum of that\nvariable's original value plus the added value (or other variable).\u003c/p\u003e\n\n\u003cp\u003eWhen we use \u003ccode\u003e+=\u003c/code\u003e, we call this action \"incrementing\". We are adding a new\nincrement to a known value. Why is that useful? For looping.\u003c/p\u003e\n\n\u003cp\u003eLet's re-write our loop from earlier, this time using the \u003ccode\u003e+=\u003c/code\u003e operator:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecounter = 0\u003cbr\u003e\u003cbr\u003eloop do \u003cbr\u003e  counter += 1\u003cbr\u003e  puts \"Iteration #{counter} of the loop\"\u003cbr\u003e  if counter \u0026gt;= 10 \u003cbr\u003e    break\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you copy this to IRB you'll see the same output as above:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eIteration 1 of the loop\u003cbr\u003eIteration 2 of the loop\u003cbr\u003eIteration 3 of the loop\u003cbr\u003eIteration 4 of the loop\u003cbr\u003eIteration 5 of the loop\u003cbr\u003eIteration 6 of the loop\u003cbr\u003eIteration 7 of the loop\u003cbr\u003eIteration 8 of the loop\u003cbr\u003eIteration 9 of the loop\u003cbr\u003eIteration 10 of the loop\n\u003c/code\u003e\u003c/pre\u003e","exportId":"looping"},{"id":203675,"title":"Looping Continued","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-loop\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-loop/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-loop\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-loop/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand how the \u003ccode\u003eloop\u003c/code\u003e construct works\u003c/li\u003e\n\u003cli\u003eBuild a method that utilizes the \u003ccode\u003eloop\u003c/code\u003e construct\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThe first looping construct that we'll discuss is \u003ccode\u003eloop\u003c/code\u003e. This is the simplest\nlooping construct that we have in Ruby. It simply executes a block (the code\nthat is between the \u003ccode\u003edo\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e keywords). Try this in IRB in your Terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eloop do\u003cbr\u003e  puts \"I have found the Time Machine!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will output \u003ccode\u003eI have found the Time Machine!\u003c/code\u003e an infinite number of times in\nyour Terminal. Use \u003ccode\u003eControl\u003c/code\u003e+\u003ccode\u003eC\u003c/code\u003e to break out of the loop in your terminal.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis is the first in a series of short exercises to help you get the hang of\nlooping constructs.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThere are no tests for this lab, so code your solution in \u003ccode\u003elooping.rb\u003c/code\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIt's your first class in driving school and you're trying to remember important\nrules of the road. Fill out the content of the method \u003ccode\u003elooping\u003c/code\u003e to contain a \u003ccode\u003eloop\u003c/code\u003e\nthat \u003ccode\u003eputs\u003c/code\u003e the phrase \u003ccode\u003e\"Never pass a school bus if it has flashing red lights\"\u003c/code\u003e\n an infinite number of times.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBeneath your method definition, call your method by typing the name of the\n method, \u003ccode\u003elooping\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003col\u003e\n\u003cli\u003eThen, run the file by typing \u003ccode\u003eruby looping.rb\u003c/code\u003e in your terminal from the\ndirectory of this lab. You'll be stuck in an infinite levitation loop! Hit\n\u003ccode\u003eControl\u003c/code\u003e+\u003ccode\u003eC\u003c/code\u003e to exit the infinite loop.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"looping-continued"},{"id":203676,"title":"Looping with Times","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-times\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-times/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-times\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-times/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the \u003ccode\u003etimes\u003c/code\u003e construct and how it implements looping\u003c/li\u003e\n\u003cli\u003eBuild a method using \u003ccode\u003etimes\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThe next construct in our list is \u003ccode\u003etimes\u003c/code\u003e. There are two important distinctions to be mindful of when using \u003ccode\u003etimes\u003c/code\u003e. The first one is that it has to be called on an Integer (like \u003ccode\u003e1\u003c/code\u003e or \u003ccode\u003e10000\u003c/code\u003e). The second is that it executes the block a certain number of times, which is dependent on the number that it's called on. Let's look at the example below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e5.times do\u003cbr\u003e  puts \"Penguins like to jump off icebergs!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis outputs \u003ccode\u003ePenguins like to jump off icebergs!\u003c/code\u003e five times in your Terminal.\u003c/p\u003e\n\n\u003ch2\u003eExamples\u003c/h2\u003e\n\n\u003ch3\u003eBasic \u003ccode\u003etimes\u003c/code\u003e Example: Dinner Party\u003c/h3\u003e\n\n\u003cp\u003eLet's take a look at some more complex examples: \u003c/p\u003e\n\n\u003cp\u003eYou just had a wildly successful dinner party with seven of your very best friends. Then they went home and left you with \u003cem\u003eall\u003c/em\u003e of the dishes. They will \u003cem\u003enot\u003c/em\u003e be invited back. \u003c/p\u003e\n\n\u003cp\u003eLet's clean those dishes using the \u003ccode\u003etimes\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e7.times do \u003cbr\u003e  puts \"I am doing the dishes left by my former friends.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e\u003cbr\u003e# =\u0026gt; 7 (return value)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eIntermediate \u003ccode\u003etimes\u003c/code\u003e Example: Crime Spree\u003c/h3\u003e\n\n\u003cp\u003eOkay, that's fine, but all we did was print some text––what if we wanted to change the value of a variable within a loop? Let's see how that works: \u003c/p\u003e\n\n\u003cp\u003eYou are a jewel thief who has stolen one hundred (100) very valuable jewels (you are a really good jewel thief). But now you need to unload your stolen jewels from your bag into the safe in your secret hideout!  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejewels_in_bag = 100\u003cbr\u003e\u003cbr\u003e3.times do \u003cbr\u003e  puts \"Hiding 10 stolen jewels.\"\u003cbr\u003e  jewels_in_bag = jewels_in_bag - 10\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e# =\u0026gt; 3 (return value)\u003cbr\u003e\u003cbr\u003eputs \"We have #{jewels_in_bag} jewels still to hide!\"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"We have 70 jewels still to hide!\"\u003cbr\u003e\u003cbr\u003e# =\u0026gt; nil (return value)\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eAdvanced \u003ccode\u003etimes\u003c/code\u003e Example\u003c/h4\u003e\n\n\u003cp\u003eThis is fun and all, but so far we've only printed text within the block of code within the loop. What if we wanted to do something more, say, keep track of the number of jewels we are hiding \u003cem\u003eas we hide them\u003c/em\u003e? \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejewels_in_bag = 100\u003cbr\u003e\u003cbr\u003e3.times do \u003cbr\u003e  puts \"Hiding 10 stolen jewels.\"\u003cbr\u003e  jewels_in_bag = jewels_in_bag - 10\u003cbr\u003e  puts \"Now there are only #{jewels_in_bag} jewels left to hide!\"\u003cbr\u003eend\u003cbr\u003e# =\u0026gt; 3 (return value)\u003cbr\u003e\u003cbr\u003eputs \"We have #{jewels_in_bag} jewels still to hide!\"\u003cbr\u003e# =\u0026gt; nil (return value)\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Now there are only 90 jewels left to hide!\"\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Now there are only 80 jewels left to hide!\"\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Now there are only 70 jewels left to hide!\"\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"We have 70 jewels still to hide!\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUsing the \u003ccode\u003etimes\u003c/code\u003e method\u003c/h2\u003e\n\n\u003cp\u003eWe're still struggling to master that levitation charm. Since we need to keep practicing, let's write some code that allows us to \u003ccode\u003eputs\u003c/code\u003e the phrase \"Wingardium Leviosa\" only seven times (instead of infinitely, like when we used just a plain \u003ccode\u003eloop\u003c/code\u003e construct).\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this lab.\u003c/li\u003e\n\u003cli\u003eRun the test suite with the \u003ccode\u003elearn test\u003c/code\u003e command. \u003c/li\u003e\n\u003cli\u003eYou'll be coding your solution in \u003ccode\u003etimes.rb\u003c/code\u003e: \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003eFill out the content of the \u003ccode\u003eusing_times\u003c/code\u003e method so that calling it will \u003ccode\u003eputs\u003c/code\u003e the desired phrase, \u003ccode\u003e\"Wingardium Leviosa\"\u003c/code\u003e seven times by using the \u003ccode\u003etimes\u003c/code\u003e keyword.\u003cbr\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gd926a7a79b2ac1f316d542cdb3365631"},{"id":203677,"title":"Looping with While and Until","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"while-and-until-looping-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/while-and-until-looping-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/while-and-until-looping-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/while-and-until-looping-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe the \u003ccode\u003ewhile\u003c/code\u003e construct and how it implements looping\u003c/li\u003e\n\u003cli\u003eDescribe the \u003ccode\u003euntil\u003c/code\u003e looping construct \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003e\u003ccode\u003ewhile\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003ewhile\u003c/code\u003e construct is a little different from the loop construct that we looked at earlier. The \u003ccode\u003ewhile\u003c/code\u003e construct will keep executing a block as long as a specific condition is \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a long and repetitiously-counting code that uses \u003ccode\u003eif\u003c/code\u003e statements to count from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e20\u003c/code\u003e and outputs \"The current number is less than 20.\" if so. Well, we can refactor that into simple, readable, \u003cem\u003eshort\u003c/em\u003e code with the \u003ccode\u003ewhile\u003c/code\u003e construct:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecounter = 0\u003cbr\u003ewhile counter \u0026lt; 20\u003cbr\u003e  puts \"The current number is less than 20.\"\u003cbr\u003e  counter += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThink about the above code like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e While it is true that the variable \u003ccode\u003ecounter\u003c/code\u003e is set to a value that is less than \u003ccode\u003e20\u003c/code\u003e, execute the code in the block.\u003c/li\u003e\n\u003cli\u003e Inside the block, \u003ccode\u003eputs\u003c/code\u003e a phrase, and increment the counter by one.\u003c/li\u003e\n\u003cli\u003e Go back to the top! Check to see if the \u003ccode\u003ecounter\u003c/code\u003e is less than \u003ccode\u003e20\u003c/code\u003e. If it is true that the value is less than \u003ccode\u003e20\u003c/code\u003e, go back into the block. Otherwise, break out of the loop and don't execute the code inside the loop.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe can achieve all of that with just a few lines of code utilizing a \u003ccode\u003ewhile\u003c/code\u003e construct. Go ahead and copy and paste the above code in irb. \u003c/p\u003e\n\n\u003ch2\u003eExamples\u003c/h2\u003e\n\n\u003ch3\u003eBasic \u003ccode\u003ewhile\u003c/code\u003e Example: Hot Dog Eating Contest\u003c/h3\u003e\n\n\u003cp\u003eLet's say you are a world famous competitive eater participating in the Coney Island Nathan's Hot Dog Eating Contest in Brooklyn, NY. You're kind of new to the competitive eating game though, so you only have the capacity for seven (7) hot dogs.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enum_of_hotdogs_eaten = 0\u003cbr\u003e# =\u0026gt; 0 (return value)\u003cbr\u003e\u003cbr\u003ewhile num_of_hotdogs_eaten \u0026lt; 7\u003cbr\u003e  num_of_hotdogs_eaten += 1\u003cbr\u003e  puts \"You have now eaten #{num_of_hotdogs_eaten} hot dog(s).\"\u003cbr\u003eend\u003cbr\u003e# =\u0026gt; nil (return value)\u003cbr\u003e\u003cbr\u003eputs \"You ate a total of #{num_of_hotdogs_eaten} hot dogs!\"\u003cbr\u003e# =\u0026gt; nil (return value)\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"You have now eaten 1 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 2 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 3 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 4 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 5 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 6 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 7 hot dog(s).\"\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"You ate a total of 7 hot dogs!\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003e\u003ccode\u003euntil\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eUntil\u003c/code\u003e is simply the inverse of a \u003ccode\u003ewhile\u003c/code\u003e loop. An \u003ccode\u003euntil\u003c/code\u003e keyword will keep executing a block \u003cem\u003euntil a specific condition is true\u003c/em\u003e. In other words, the block of code following \u003ccode\u003euntil\u003c/code\u003e will execute while the condition is false. One helpful way to think about it is to read \u003ccode\u003euntil\u003c/code\u003e as \"if not\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecounter = 0\u003cbr\u003euntil counter == 20\u003cbr\u003e  puts \"The current number is less than 20.\"\u003cbr\u003e  counter += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe counter once again starts at \u003ccode\u003e0\u003c/code\u003e. If it is \u003cem\u003enot\u003c/em\u003e true that the counter is equal to \u003ccode\u003e20\u003c/code\u003e, the program will execute the code in the block.\u003c/li\u003e\n\u003cli\u003eInside the block, we will \u003ccode\u003eputs\u003c/code\u003e a phrase and increment the counter by \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThen, the program will go back to the top of the \u003ccode\u003euntil\u003c/code\u003e loop and once again check to see if the counter is equal to \u003ccode\u003e20\u003c/code\u003e. If it is \u003cem\u003enot\u003c/em\u003e true that the counter is equal to \u003ccode\u003e20\u003c/code\u003e, then the program will continue executing the code in the block. Otherwise, the program will break out of the loop.\u003c/li\u003e\n\u003c/ul\u003e","exportId":"looping-with-while-and-until"},{"id":203678,"title":"While and Until Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-while-until\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-while-until/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-while-until\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-while-until/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild a method that uses \u003ccode\u003ewhile\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild a method that uses \u003ccode\u003euntil\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003ewhile\u003c/code\u003e and \u003ccode\u003euntil\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eIt's our first year at Hogwarts and we're struggling to master the levitation charm, \"Wingardium Leviosa\". Currently, we have a levitation force of \u003ccode\u003e6\u003c/code\u003e. We need to have a levitation force of \u003ccode\u003e10\u003c/code\u003e in order to actually levitate that feather.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll write a while loop that will continue to \u003ccode\u003eputs\u003c/code\u003e the phrase \"Wingardium Leviosa\" while our levitation force is less than \u003ccode\u003e10\u003c/code\u003e. Every time we \u003ccode\u003eputs\u003c/code\u003e that phrase, we should increment our levitation force by \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen, we'll solve this again by using an \u003ccode\u003euntil\u003c/code\u003e loop. It will \u003ccode\u003eputs\u003c/code\u003e the phrase \"Wingardium Leviosa\" until the levitation force is equal to \u003ccode\u003e10\u003c/code\u003e, incrementing the levitation force by \u003ccode\u003e1\u003c/code\u003e each time we \u003ccode\u003eputs\u003c/code\u003e the phrase.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eRun the test suite in this lab to get started.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLet's get the first test passing by coding our solution in \u003ccode\u003ewhile.rb\u003c/code\u003e:\nFill out the content of the \u003ccode\u003eusing_while\u003c/code\u003e method so that calling it will \u003ccode\u003eputs\u003c/code\u003e the desired phrase while your levitation force is less than \u003ccode\u003e10\u003c/code\u003e. Remember, every time you \u003ccode\u003eputs\u003c/code\u003e the phrase, you should increment your levitation force by \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLet's get the second test passing by coding our solution in \u003ccode\u003euntil.rb\u003c/code\u003e:\nFill out the content of the \u003ccode\u003eusing_until\u003c/code\u003e method to \u003ccode\u003eputs\u003c/code\u003e the desired phrase, \"Wingardium Leviosa\", until our levitation force equals \u003ccode\u003e10\u003c/code\u003e. Remember, every time you \u003ccode\u003eputs\u003c/code\u003e the phrase, you should increment your levitation force by \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eHint: If you get stuck an infinite loop when you run your tests or your code, you can abort the test run or code by pressing \u003ccode\u003eCONTROL+C\u003c/code\u003e on your keyboard.\u003c/strong\u003e\u003c/p\u003e","exportId":"g96becea17d18d9c30ee2b8a88625a13a"},{"id":203679,"title":"Countdown to Midnight Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"countdown-to-midnight\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/countdown-to-midnight/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/countdown-to-midnight\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/countdown-to-midnight/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice building a \u003ccode\u003ewhile\u003c/code\u003e loop\u003c/li\u003e\n\u003cli\u003ePractice using the subtract-and-assign operator (\u003ccode\u003e-=\u003c/code\u003e)—the inverse of the add-and-assign operator (\u003ccode\u003e+=\u003c/code\u003e). \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eReview\u003c/h2\u003e\n\n\u003ch4\u003eOn \u003ccode\u003ewhile\u003c/code\u003e Loops\u003c/h4\u003e\n\n\u003cp\u003eThis lab is going to test your skills in writing \u003ccode\u003ewhile\u003c/code\u003e loops. Remember, a \u003ccode\u003ewhile\u003c/code\u003e loop will execute your block of code only \u003cem\u003ewhile\u003c/em\u003e your defined conditional evaluates as \u003ccode\u003etrue\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eFor example, this script:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ex = 1\u003cbr\u003ewhile x \u0026lt; 10\u003cbr\u003e  puts \"#{x} is less than 10\"\u003cbr\u003e  x += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWill print this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 is less than 10\u003cbr\u003e2 is less than 10\u003cbr\u003e3 is less than 10\u003cbr\u003e4 is less than 10\u003cbr\u003e5 is less than 10\u003cbr\u003e6 is less than 10\u003cbr\u003e7 is less than 10\u003cbr\u003e8 is less than 10\u003cbr\u003e9 is less than 10\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd return \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eString Interpolation\u003c/h4\u003e\n\n\u003cp\u003eUsing the \u003ccode\u003e#{}\u003c/code\u003e is called interpolation. In this case, it's going to actually print out the value of \u003ccode\u003ex\u003c/code\u003e. If we just wrote \u003ccode\u003eputs \"x is less than 10\"\u003c/code\u003e it would print out the letter 'x' instead of the number \u003ccode\u003ex\u003c/code\u003e is representing.\u003c/p\u003e\n\n\u003ch4\u003eThe Add-And-Assign Operator (\u003ccode\u003e+=\u003c/code\u003e)\u003c/h4\u003e\n\n\u003cp\u003eThis is a shorthand useful for incrementing, or \"stepping up\", values. It's an operator that adds the submitting value to the value of \u003ccode\u003ex\u003c/code\u003e. In the example above \u003ccode\u003ex\u003c/code\u003e begins with a value of \u003ccode\u003e1\u003c/code\u003e, and is incremented by \u003ccode\u003e1\u003c/code\u003e each time the \u003ccode\u003ewhile\u003c/code\u003e loop runs. The line \u003ccode\u003ex += 1\u003c/code\u003e is the same as the line \u003ccode\u003ex = x + 1\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eThe loop is going to stop executing as soon as \u003ccode\u003ex\u003c/code\u003e hits \u003ccode\u003e10\u003c/code\u003e, since that was the condition that we set.\u003c/p\u003e\n\n\u003ch4\u003eThe Subtract-And-Assign Operator (\u003ccode\u003e-=\u003c/code\u003e)\u003c/h4\u003e\n\n\u003cp\u003eWe can also use the subtract-and-assign operator (\u003ccode\u003e-=\u003c/code\u003e) which instead \u003cem\u003esubtracts\u003c/em\u003e the submitted value from the given variable and reassigns that variable to the resulting difference.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this lab. \u003c/li\u003e\n\u003cli\u003eOpen it in your IDE and run the test suite. You'll be coding your solution in \u003ccode\u003ecountdown.rb\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a method that takes in an integer argument and uses a while loop to countdown from that integer to \u003ccode\u003e1\u003c/code\u003e, outputting \u003ccode\u003e\"#{number} SECOND(S)!\"\u003c/code\u003e in each iteration of the loop. The method should return \u003ccode\u003e\"HAPPY NEW YEAR!\"\u003c/code\u003e after the loop finishes. \u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eIn Ruby, a method will return the very last line of code that it executes.\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003eOur Ruby program executes so quickly that it doesn't actually count down at the speed of one second per number. See if you can make the loop pause for one second each trip around (\u003ca href=\"http://stackoverflow.com/questions/1329967/tell-ruby-program-to-wait-some-amount-of-time\"\u003ehint\u003c/a\u003e). Write this in a new method called \u003ccode\u003ecountdown_with_sleep\u003c/code\u003e that also takes one integer argument for the countdown.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gd9e12abf6787232c9d531f7478c574d2"}]},{"id":21883,"name":"Procedural Ruby: Arrays","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ga6786bff434deb1d25a5080ef59d4bbe","items":[{"id":203680,"title":"Introduction to Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine arrays in Ruby. \u003c/li\u003e\n\u003cli\u003eLearn why arrays are useful. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is an Array?\u003c/h2\u003e\n\n\u003cp\u003eImagine you are going apple picking. It's a beautiful fall day and you're picking apple after apple. However, you only have two hands. You're holding 2, 3, 4, even 5 apples but you just can't carry any more. Luckily, you've brought along a basket to contain your apples. \u003c/p\u003e\n\n\u003cp\u003eAn array is like a basket––it is a container for a collection of data. Let's take a closer look with the help of the following example.\u003c/p\u003e\n\n\u003cp\u003eSo far, we've used variables to store information. For example, I could create a variable called \u003ccode\u003emy_name\u003c/code\u003e and set it equal to my name: \u003ccode\u003emy_name = \"Severus Snape\"\u003c/code\u003e. However, variables only allow us to store one piece of information at a time. \u003c/p\u003e\n\n\u003cp\u003eWhat if my boss, Headmaster Dumbledore, asks me to deliver the names of all of my students? I could create a bunch of variables like this: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudent1 = \"Harry Potter\"\u003cbr\u003estudent2 = \"Ron Weasley\"\u003cbr\u003estudent3 = \"Hermione Granger\"\u003cbr\u003estudent4 = \"Draco Malfoy\"\u003cbr\u003e\u003cbr\u003eetc...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, I could write a program that passes around these variables \u003cem\u003eone at a time\u003c/em\u003e. This seems messy though. I could easily forget about a student, for example. Or need to create a new student and then have to hunt through my program for every place I ever passed around all of these individual variables. \u003c/p\u003e\n\n\u003cp\u003eIf this was real life, Professor Snape would probably just write down all the students in list form and hand that list to Dumbledore. Well, in Ruby, we can do the same thing using an array.\u003c/p\u003e\n\n\u003ch3\u003eArray Definition\u003c/h3\u003e\n\n\u003cp\u003eAn array is like a list but in code form. It is a way for your program to store pieces of data as a \u003cem\u003ecollection\u003c/em\u003e. Arrays can contain any data types in any combination––strings, integers, other arrays, hashes, etc. \u003c/p\u003e\n\n\u003cp\u003eArrays are declared by listing variable names or literals separated by commas (\u003ccode\u003e,\u003c/code\u003e) and wrapped in square brackets \u003ccode\u003e[]\u003c/code\u003e. To save our four students from above into an array, we write that in our code like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudents = [\"Harry Potter\", \"Ron Weasley\", \"Hermione Granger\", \"Draco Malfoy\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eWhy Use Arrays\u003c/h2\u003e\n\n\u003cp\u003eArrays store information in list form. It's hard to imagine a program you will write in which you \u003cem\u003ewon't\u003c/em\u003e be dealing with collections of data. Whether you're making a command line game or writing a large-scale web application with many users, data is the name of the game. You may need to list the players of your game and their scores, you may need to list the users of your application. You might have an application that connects doctors and their patients and therefore lists the patients of an individual doctor. This list goes on (pun intended). \u003c/p\u003e\n\n\u003cp\u003eArrays allow us to store a collection of information in one organized place. Arrays can be named, i.e. set equal to a variable, and we can access data from an array, add data to an array or change the data that is already stored in an array. \u003c/p\u003e","exportId":"introduction-to-arrays"},{"id":203681,"title":"Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lesson will give a deeper dive on how to create, manipulate, and retrieve data from arrays.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate and populate an array.\u003c/li\u003e\n\u003cli\u003eAdd items to an array using different methods.\u003c/li\u003e\n\u003cli\u003eRemove items from an array using different methods.\u003c/li\u003e\n\u003cli\u003eOperate on an array using the sort, reverse, and include methods.\u003c/li\u003e\n\u003cli\u003eIdentify elements in an array based on their index number.\u003c/li\u003e\n\u003cli\u003eRetrieve items from an array.\u003c/li\u003e\n\u003cli\u003eReference the Ruby documentation on arrays.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003cp\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/W0Q_AyfolRw\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=W0Q_AyfolRw\"\u003eIntro to Ruby Arrays\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eCreating an Array\u003c/h2\u003e\n\n\u003cp\u003eThere are a few different ways to make a new array. You can use the literal constructor or the class constructor.\u003c/p\u003e\n\n\u003ch5\u003eThe Literal Constructor\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003emy_array = []\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5\u003eThe Class Constructor\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003emy_array = Array.new\u003cbr\u003e# =\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eDon't worry about the class constructor right now. We'll learn much more about this later on. We're introducing it briefly here because you may encounter this syntax if you read through other resources you might find online.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eTo make an array that isn't empty, you can separate each item, known as an element, by a \u003ccode\u003e,\u003c/code\u003e (\"comma\") and wrap all the elements inside \u003ccode\u003e[]\u003c/code\u003e (\"square brackets\").\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epuppies = [\"bulldog\", \"terrier\", \"poodle\"]\u003cbr\u003e# =\u0026gt; [\"bulldog\", \"terrier\", \"poodle\"]\u003cbr\u003e\u003cbr\u003erandom_numbers = [ 2, 5, 6, 8, 30050]\u003cbr\u003e# =\u0026gt; [ 2, 5, 6, 8, 30050]\u003cbr\u003e\u003cbr\u003emixed = [\"this\", \"array\", 7, 20, \"has\", 45, \"integers\", \"\u0026amp;\", \"strings\", 309]\u003cbr\u003e# =\u0026gt; [\"this\", \"array\", 7, 20, \"has\", 45, \"integers\", \"\u0026amp;\", \"strings\", 309]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is possible to create an array that contains disparate data types. In other words, you could create an array like the one above, that stores both strings and integers. This is generally discouraged, however. It's best to keep your arrays populated with only one kind of element.\u003c/p\u003e\n\n\u003ch2\u003eAdding Items to an Array\u003c/h2\u003e\n\n\u003cp\u003eIf an array is a storage container for a list of data, then we can imagine adding and removing individual items. Let's take a look at how we can add elements to an array.\u003c/p\u003e\n\n\u003ch3\u003eShovel Method\u003c/h3\u003e\n\n\u003cp\u003eThe shovel method employs the \"shovel\" operator (\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e) and allows you to add (\"shovel\") items onto the \u003cem\u003eend\u003c/em\u003e of an array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003e\u003cbr\u003efamous_cats \u0026lt;\u0026lt; \"nala cat\"\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"lil' bub\", \"grumpy cat\", \"Maru\", \"nala cat\"]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eThe\u003c/em\u003e \u003ccode\u003e.inspect\u003c/code\u003e \u003cem\u003emethod returns a string containing a human-readable representation of an object. In this case, the list of the strings held in the array.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe shovel method (\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e) is the preferred syntax for adding elements to an array, however you might see other methods used in examples online:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.push\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eCalling \u003ccode\u003e.push\u003c/code\u003e on an array with an argument will add that element to the \u003cem\u003eend\u003c/em\u003e of the array. It has the same effect as the shovel method explained above:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003e\u003cbr\u003efamous_cats.push(\"nala cat\")\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"lil' bub\", \"grumpy cat\", \"Maru\", \"nala cat\"]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003e.unshift\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eTo add an element to the \u003cem\u003efront\u003c/em\u003e of an array, you can call the \u003ccode\u003e.unshift\u003c/code\u003e method on it with an argument of the element you wish to add:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003e\u003cbr\u003efamous_cats.unshift(\"nala cat\")\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"nala cat\", \"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eRemoving Items From an Array\u003c/h2\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.pop\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eCalling \u003ccode\u003e.pop\u003c/code\u003e on an array will remove the \u003cem\u003elast\u003c/em\u003e item from the \u003cem\u003eend\u003c/em\u003e of the array. The \u003ccode\u003e.pop\u003c/code\u003e method will also supply the removed element as its return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003emaru_cat = famous_cats.pop\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"lil' bub\", \"grumpy cat\"]\u003cbr\u003eputs maru_cat\u003cbr\u003e# =\u0026gt; Maru\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003e.shift\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eCalling \u003ccode\u003e.shift\u003c/code\u003e on an array will remove the \u003cem\u003efirst\u003c/em\u003e item from the \u003cem\u003efront\u003c/em\u003e of the array. The \u003ccode\u003e.shift\u003c/code\u003e method will also supply the removed element as a return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003elil_bub = famous_cats.shift\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"grumpy cat\", \"Maru\"]\u003cbr\u003eputs lil_bub\u003cbr\u003e# =\u0026gt; lil' bub\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote:\u003c/em\u003e If you want to remove items that are not at the beginning or end of an array, use the \u003ca href=\"http://docs.ruby-lang.org/en/2.0.0/Array.html#method-i-delete_at\"\u003eRuby documentation\u003c/a\u003e to figure out how.\u003c/p\u003e\n\n\u003ch2\u003eRetrieving Items from Array\u003c/h2\u003e\n\n\u003cp\u003eWhen you write out a list on a notepad, you typically write each item on its own line. Whether or not the list is explicitly numbered, the list has a numerology to it based on the sequence of the lines that the items are listed upon.\u003c/p\u003e\n\n\u003cp\u003eJust like the items in our notepad lists, elements in an array are associated with a number that represents their order. In programming, this number is called an \u003cstrong\u003eindex\u003c/strong\u003e. While humans typically start their lists at \"1\", arrays begin their indexes at \u003ccode\u003e0\u003c/code\u003e (zero). So, the first item in an array will always be \"at index \u003ccode\u003e0\u003c/code\u003e\". If we have an array of famous (fictional) cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"Cheshire Cat\", \"Puss in Boots\", \"Garfield\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\"Cheshire Cat\"\u003c/code\u003e is at index \u003ccode\u003e0\u003c/code\u003e in the array, \u003ccode\u003e\"Puss in Boots\"\u003c/code\u003e is  a index \u003ccode\u003e1\u003c/code\u003e, and \u003ccode\u003e\"Garfield\"\u003c/code\u003e is at index \u003ccode\u003e2\u003c/code\u003e. Indexes will always be \u003cem\u003eone less\u003c/em\u003e than the \u003cstrong\u003ecount\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo access one of these items in the \u003ccode\u003efamous_cats\u003c/code\u003e array, we can type the name of the array immediately followed by the relevant index number wrapped in square brackets (\u003ccode\u003e[]\u003c/code\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats =  [\"Cheshire Cat\", \"Puss in Boots\", \"Garfield\"]\u003cbr\u003e\u003cbr\u003efamous_cats[1]\u003cbr\u003e# =\u0026gt; \"Puss in Boots\"\u003cbr\u003e\u003cbr\u003efamous_cats[0]\u003cbr\u003e# =\u0026gt; \"Cheshire Cat\"\u003cbr\u003e\u003cbr\u003efamous_cats[2]\u003cbr\u003e# =\u0026gt; \"Garfield\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also access array elements by using negative index numbers. The last item of an array is considered to be stored at an index of \u003ccode\u003e-1\u003c/code\u003e. Let's give it a shot:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats[-1]\u003cbr\u003e# =\u0026gt; \"Garfield\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eBonus: Using Methods\u003c/h4\u003e\n\n\u003cp\u003eWe can also use the \u003ccode\u003e#first\u003c/code\u003e method on an array to access the first element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats.first\u003cbr\u003e# =\u0026gt; \"Cheshire Cat\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use the \u003ccode\u003e#last\u003c/code\u003e method to access the last element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats.last\u003cbr\u003e# =\u0026gt; \"Garfield\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eA Note on Index Numbers\u003c/h4\u003e\n\n\u003cp\u003eWhat happens when we try to access the element stored in an index that doesn't exist? In other words, let's say we have our \u003ccode\u003efamous_cats\u003c/code\u003e array that contains three elements. That means that our array contains an element at indexes \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, and \u003ccode\u003e2\u003c/code\u003e. What happens if we try to access an element at index \u003ccode\u003e3\u003c/code\u003e? An index element that doesn't exist.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats[3]\u003cbr\u003e# =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt returns \u003ccode\u003enil\u003c/code\u003e!\u003c/p\u003e\n\n\u003ch4\u003eAdvanced: Finding An Element's Index With \u003ccode\u003e.index()\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eTo discover the index number of an element within an array, we can use the \u003ccode\u003e.index()\u003c/code\u003e method. Calling \u003ccode\u003e.index()\u003c/code\u003e on an array with an argument inside the parentheses will return the \u003cem\u003efirst\u003c/em\u003e index number of an element matching that argument. If no elements match the argument, then this method will return \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"Cheshire Cat\", \"Puss in Boots\", \"Garfield\"]\u003cbr\u003e\u003cbr\u003efamous_cats.index(\"Puss in Boots\")\u003cbr\u003e# =\u0026gt; 1\u003cbr\u003e\u003cbr\u003efamous_cats.index(\"Maru\")\u003cbr\u003e# =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is not an operation you will perform very often. Arrays are used to store data and usually you will use the index number of an item to access it, not the other way around.\u003c/p\u003e","exportId":"arrays"},{"id":203682,"title":"Array CRUD Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-CRUD-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-CRUD-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-CRUD-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-CRUD-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you will create arrays, add data to arrays, remove data from arrays and retrieve data from arrays.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a new array that contains data as well as a new array that is empty.\u003c/li\u003e\n\u003cli\u003eAdd an element to the end of an array.\u003c/li\u003e\n\u003cli\u003eAdd an element to the front of an array.\u003c/li\u003e\n\u003cli\u003eRemove an element from the front of an array.\u003c/li\u003e\n\u003cli\u003eRemove an element from the end of an array.\u003c/li\u003e\n\u003cli\u003eRetrieve data from a specific array index.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we will be coding the solutions for each of the above tasks in the body of a method. In \u003ccode\u003elib/array_crud.rb\u003c/code\u003e we've defined a series of methods for you, each of which is responsible for one of the tasks above. Your job is to write the code in the body of each method to get the test passing.\u003c/p\u003e\n\n\u003cp\u003eLet's go through the first challenge together.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#create_an_empty_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eLet's run our test suite to get started. Run the tests one at a time with the \u003ccode\u003elearn test --fail-fast\u003c/code\u003e command in your terminal.\u003c/p\u003e\n\n\u003cp\u003eIf we do so, we'll see our first failure:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-10-26%20at%202.05.07%20PM.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOur test is telling us that we are expected to code the content of our \u003ccode\u003e#create_an_empty_array\u003c/code\u003e method such that a new, empty array is created and returned. Our test \u003ccode\u003eexpected\u003c/code\u003e an empty array, \u003ccode\u003e[]\u003c/code\u003e, but got \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/array_crud.rb\u003c/code\u003e and check out the \u003ccode\u003e#create_an_empty_array\u003c/code\u003e method. It's empty! Let's write the code that will get the test passing.\u003c/p\u003e\n\n\u003cp\u003eWe'll use the literal constructor to make a new array with nothing in it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef create_an_empty_array\u003cbr\u003e  []\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test suite again and we should be passing that first test.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#create_an_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should use the literal constructor to create a new array, just like we did above. This time, however, create an array that contains four elements. The four elements can be any elements of your choosing, as long as there are only four of them.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#add_element_to_end_of_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in two arguments, an array and the element we want to add to it. Use the \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e (shovel) method or the \u003ccode\u003e#push\u003c/code\u003e method to add that element to the end of the new array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#add_element_to_start_of_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in two arguments, an array and the element we want to add to it. Use the \u003ccode\u003e#unshift\u003c/code\u003e method to add that element to the start of that array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#remove_element_from_end_of_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in one argument, the array on which we want to operate. Use the \u003ccode\u003e#pop\u003c/code\u003e method to remove the last item from the array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#remove_element_from_start_of_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in one argument, the array on which we want to operate. Use the \u003ccode\u003e#shift\u003c/code\u003e method to remove the first item from the array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#retrieve_element_from_index\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in two arguments, an array and the index number whose element we want to retrieve. Use the \u003ccode\u003e[]\u003c/code\u003e, bracket method, to return the element stored at that index number of the given array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#retrieve_first_element_from_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in one argument, the array from which we want to retrieve an element. Use \u003ccode\u003e[]\u003c/code\u003e notation to return the value stored at the first index of the array. Remember that arrays are zero-indexed. This means that the first index number is \u003ccode\u003e0\u003c/code\u003e and it counts up from there. So, the first element of an array is stored at index \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#retrieve_last_element_from_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in one argument, the array from which we want to retrieve an element. There are a number of ways to do this, but we recommend using the \u003ccode\u003e[]\u003c/code\u003e method with the following hint:\u003c/p\u003e\n\n\u003cp\u003eThe last element of an array is considered to be stored at an index of \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e","exportId":"g1b792008703bfd98720d404669c77b04"},{"id":203683,"title":"Array Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-methods-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-methods-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-methods-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-methods-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lesson will present some useful methods you can use when working with arrays.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eSort arrays with the sort method\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFind the first and last elements of an array\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFind the size of an array\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFind if an element is in the array with the include? method\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWorking With Arrays\u003c/h2\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.sort\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method rearranges the contents of the array by sorting them. For strings,\nthis means alphabetically, for numerical values, this means from smallest number\nto highest number.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e ​\u003cem\u003eThe\u003c/em\u003e​ \u003ccode\u003e.sort\u003c/code\u003e ​\u003cem\u003emethod works by implicitly comparing elements\nwith the \"spaceship\" operator\u003c/em\u003e​ \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e ​\u003cem\u003e(because it looks like a flying saucer,\nswoosh!) and moving them accordingly.\u003c/em\u003e​\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"maru\"]\u003cbr\u003efamous_cats.sort\u003cbr\u003e  =\u0026gt; [\"grumpy cat\", \"lil' bub\", \"maru\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOne thing to be aware of is that the return value of \u003ccode\u003efamous_cats\u003c/code\u003e remains\nunchanged after using the \u003ccode\u003esort\u003c/code\u003e method on it. Meaning if you call \u003ccode\u003efamous_cats\u003c/code\u003e\nagain after the sort, it will still return \u003ccode\u003e[\"lil' bub\", \"grumpy cat\", \"maru\"]\u003c/code\u003e,\nnot the previously sorted array.\u003c/p\u003e\n\n\u003cp\u003eBecause \u003ccode\u003esort\u003c/code\u003e returns a new array, we generally store it into another variable.\nSo we would do \u003ccode\u003esorted_cats = famous_cats.sort\u003c/code\u003e. Now we have two copies of the\narray. One unsorted (\u003ccode\u003efamous_cats\u003c/code\u003e) and one sorted (\u003ccode\u003esorted_cats\u003c/code\u003e). If you don't\ncare about the unsorted version of the array you can call \u003ccode\u003esort!\u003c/code\u003e. This will\nsort the existing array without requiring you to save the return into a new\nvariable. You'll notice the \u003ccode\u003e!\u003c/code\u003e. It's a ruby convention that a method with the\n\u003ccode\u003e!\u003c/code\u003e will do the operation in place. It will modify the receiver of the method\n(AKA the thing to the left of the dot).\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.reverse\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method reverses an array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_wizards = [\"Dumbledore\", \"Gandalf\", \"Merlin\"]\u003cbr\u003efamous_wizards.reverse\u003cbr\u003e  =\u0026gt; [\"Merlin\", \"Gandalf\", \"Dumbledore\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly to \u003ccode\u003esort!\u003c/code\u003e, you can call \u003ccode\u003ereverse!\u003c/code\u003e, again modifying the receiver of\nthe method in place.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.include?\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will return a boolean of whether or not the array contains (or\n​\u003cem\u003eincludes\u003c/em\u003e​) the element submitted to it inside the parentheses:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003efamous_cats.include?(\"Garfield\")\u003cbr\u003e  =\u0026gt; false\u003cbr\u003efamous_cats.include?(\"Maru\")\u003cbr\u003e  =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince we are just returning \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, the receiver of the method,\n\u003ccode\u003efamous_cats\u003c/code\u003e, remains unchanged.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.first\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will return the first element of the array, as its name suggests.\nAgain, it does not change the return value of the original array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003efamous_cats.first\u003cbr\u003e  =\u0026gt; \"lil' bub\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003e.last\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will return the last element of the array, as its name suggests.\nAgain, it does not change the original array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003efamous_cats.last\u003cbr\u003e  =\u0026gt; \"Maru\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003e.size\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will return the number of elements in the array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003efamous_cats.size\u003cbr\u003e  =\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven though arrays start with a 0 \u003ccode\u003eindex\u003c/code\u003e, this method returns the actual number\nof elements, starting from 1.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Be aware that all of the methods we have covered in this reading are\ncase sensitive. For example, \u003ccode\u003ereverse\u003c/code\u003e not \u003ccode\u003eReverse\u003c/code\u003e.\u003c/p\u003e","exportId":"array-methods"},{"id":203684,"title":"Array Methods Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you will call methods on arrays, like \u003ccode\u003e#sort\u003c/code\u003e and \u003ccode\u003e#include?\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDetermine if an array contains a particular element using the \u003ccode\u003e#include?\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eSort an array using the \u003ccode\u003e#sort\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eReverse the contents of an array using the \u003ccode\u003e#reverse\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eFind the first and last elements in an array using the \u003ccode\u003e#first\u003c/code\u003e and \u003ccode\u003e#last\u003c/code\u003e methods.\u003c/li\u003e\n\u003cli\u003eDetermine the size, or length, of an array using the \u003ccode\u003e#size\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we will be coding the solutions for each of the above tasks in the body of a method. In \u003ccode\u003elib/array_methods.rb\u003c/code\u003e we've defined a series of methods for you, each of which is responsible for one of the tasks above. Your job is to write the code in the body of each method to get the tests passing.\u003c/p\u003e\n\n\u003cp\u003eEach method takes in an argument of an array. You will call the appropriate method, such as \u003ccode\u003e#include?\u003c/code\u003e or \u003ccode\u003e#first\u003c/code\u003e, on that array to get the test passing.\u003c/p\u003e\n\n\u003cp\u003eThis lab is test-driven so run \u003ccode\u003elearn test\u003c/code\u003e to get started and use the test output to guide you.\u003c/p\u003e\n\n\u003cp\u003eWe'll do the first one together:\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_include\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in two arguments: an array and an element. The test is expecting the \u003ccode\u003e#using_include\u003c/code\u003e method to return \u003ccode\u003etrue\u003c/code\u003e if the array contains that element and \u003ccode\u003efalse\u003c/code\u003e if it doesn't.\u003c/p\u003e\n\n\u003cp\u003eWe already know about a method that does just that: \u003ccode\u003e#include?\u003c/code\u003e. This method is called on an array and takes in an argument of an element. It returns \u003ccode\u003etrue\u003c/code\u003e if the array contains that element and \u003ccode\u003efalse\u003c/code\u003e if it does not.\u003c/p\u003e\n\n\u003cp\u003eLet's get our test passing with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/array_methods.rb\u003cbr\u003e\u003cbr\u003edef using_include(array, element)\u003cbr\u003e  array.include?(element)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun your test suite again, and you should be passing the first one.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_sort\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the array, sorted in ascending order. Use the \u003ccode\u003e#sort\u003c/code\u003e method on the array to get this test passing.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_reverse\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the array with the contents in reverse order. Use the \u003ccode\u003e#reverse\u003c/code\u003e method on the array to get this test passing.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_first\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the first element of that array. Try to get this test passing without using the \u003ccode\u003e[]\u003c/code\u003e method. Use the \u003ccode\u003e#first\u003c/code\u003e method instead.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_last\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the last element of that array. Try to get this test passing without using the \u003ccode\u003e[]\u003c/code\u003e method. Use the \u003ccode\u003e#last\u003c/code\u003e method instead.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_size\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the size, or length, of that array. Use the \u003ccode\u003e#size\u003c/code\u003e method on that array to get this test passing.\u003c/p\u003e","exportId":"gd9a92f9e8811b447caec943adcaec547"}]},{"id":21884,"name":"Procedural Ruby: Iteration","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gd103f0c8350d87b3592c53bfb3c62251","items":[{"id":203685,"title":"Iterators and Abstraction","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"iterators-and-abstraction-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/iterators-and-abstraction-ruby/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/iterators-and-abstraction-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/iterators-and-abstraction-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cimg src=\"http://ironboard-curriculum-content.s3.amazonaws.com/web-development/abstraction-bull.jpg\" alt=\"Picasso on Abstraction\"\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eNotice that the details of the bull are removed  and the image is still identifiably a bull.\u003c/em\u003e\u003cbr\u003e\n— Pablo Picasso, on Abstraction.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the concept of iteration \u003c/li\u003e\n\u003cli\u003eUnderstand simple iteration or looping\u003c/li\u003e\n\u003cli\u003eGet an introduction to complex iteration\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIteration vs. Looping\u003c/h2\u003e\n\n\u003cp\u003eIn previous readings we discussed the four loop types, \u003ccode\u003eloop\u003c/code\u003e, \u003ccode\u003etimes\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, and \u003ccode\u003euntil\u003c/code\u003e. Now we're going to discuss the difference between looping and iteration. \u003cstrong\u003eLooping\u003c/strong\u003e occurs when you tell your program to do something a certain number of times. \u003cstrong\u003eIteration\u003c/strong\u003e occurs when you have a collection of data (for example, an array), and you operate on each member of that collection. \u003c/p\u003e\n\n\u003cp\u003eFor example, if I tell my program to print out the phrase \"I love programming!\" five times, that's \u003cem\u003elooping\u003c/em\u003e. If I tell my program to enumerate over the array \u003ccode\u003e[1, 2, 3, 4, 5]\u003c/code\u003e and add \u003ccode\u003e10\u003c/code\u003e to each number, that's \u003cem\u003eiteration\u003c/em\u003e. \u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003eloop\u003c/code\u003e - The Least Abstract\u003c/h2\u003e\n\n\u003cp\u003eLet's talk about the algorithm required to go through all the individual items in a set.\u003c/p\u003e\n\n\u003cp\u003eImagine having a basket with ten (10) apples in it. What would you need to do to make sure that you took out all of the apples? You might think that it's enough to take an apple out of the basket one at a time. But that's not necessarily complete—at a certain point there will be no more apples in the basket; you will need to keep track of that or else you might never stop reaching in for more apples. The solution turns out to be a little more complex than it seemed at first; it might look like something like this:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eKeep track of how many apples there are in the basket.\u003c/li\u003e\n\u003cli\u003eKeep track of how many apples you have taken out of the basket.\u003c/li\u003e\n\u003cli\u003eStart a loop.\u003c/li\u003e\n\u003cli\u003eIf the count of apples you take out is less than the count of apples originally in the basket, take one out and increment the count of apples taken out by one.\u003c/li\u003e\n\u003cli\u003eIf the count of apples taken out is NOT less than the count of apples originally in the basket, then break out of the loop.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis will ensure that we take out all the apples and never reach into the basket once it's been emptied of apples.\u003c/p\u003e\n\n\u003cp\u003eIn Ruby, we might implement the above pseudocode into our code similar to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebasket = [\"apple 1\",\"apple 2\",\"apple 3\",\"apple 4\",\"apple 5\",\"apple 6\",\"apple 7\",\"apple 8\",\"apple 9\",\"apple 10\"]\u003cbr\u003e\u003cbr\u003eapples_in_basket = basket.size # Step 1\u003cbr\u003eapples_taken_out = 0 # Step 2\u003cbr\u003e\u003cbr\u003eloop do # Step 3\u003cbr\u003e    if apples_taken_out \u0026lt; apples_in_basket \u003cbr\u003e        # Step 4\u003cbr\u003e        puts \"Taking out #{basket[apples_taken_out]}\"\u003cbr\u003e        apples_taken_out += 1\u003cbr\u003e    else\u003cbr\u003e        # Step 5\u003cbr\u003e        break\u003cbr\u003e    end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo that's the least abstract implementation of the algorithm. All the details are there, every step is accounted for explicitly in the code. We won't change the algorithm, we'll just look at more abstract implementations.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003ewhile\u003c/code\u003e - A Little More Abstract\u003c/h2\u003e\n\n\u003cp\u003eThe goal of abstraction is to remove details.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebasket = [\"apple 1\",\"apple 2\",\"apple 3\",\"apple 4\",\"apple 5\",\"apple 6\",\"apple 7\",\"apple 8\",\"apple 9\",\"apple 10\"]\u003cbr\u003e\u003cbr\u003eapples_in_basket = basket.size # Step 1\u003cbr\u003eapples_taken_out = 0 # Step 2\u003cbr\u003e\u003cbr\u003e# Step 3 + 4\u003cbr\u003ewhile apples_taken_out \u0026lt; apples_in_basket\u003cbr\u003e    puts \"Taking out #{basket[apples_taken_out]}\"\u003cbr\u003e    apples_taken_out += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat we did here first was combine two steps 3 and 4 into a \u003ccode\u003ewhile\u003c/code\u003e loop—initializing a cycle of behavior based upon a condition, which is what the word \u003ccode\u003ewhile\u003c/code\u003e means both in Ruby and in English. Abstraction didn't make our code less clear, it rather made our code \"absolutely precise\". Brevity for the sake of brevity is silly, but our goal is to always express ourselves as clearly and honestly as possible. Because our loop is conditional from the start by using the \u003ccode\u003ewhile\u003c/code\u003e loop construct, we don't need to explicitly break out of it; this makes step 5 implicit.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003eeach\u003c/code\u003e - The Most Abstract\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eBeing abstract is something profoundly different from being vague.... The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise.\u003cbr\u003e\n— Edsger Dijkstra\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003ebasket = [\"apple 1\",\"apple 2\",\"apple 3\",\"apple 4\",\"apple 5\",\"apple 6\",\"apple 7\",\"apple 8\",\"apple 9\",\"apple 10\"]\u003cbr\u003e\u003cbr\u003e# Step 1,2,3,4,5 as one, abstractly\u003cbr\u003ebasket.each do |apple|\u003cbr\u003e  puts \"Taking out #{apple}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we see the full power of the Ruby iterators. To quote Kent Beck, \"you don't use 3-4 lines to express iteration, you use one word.\" If you mean each apple, just say \u003cem\u003eeach apple\u003c/em\u003e. All the details of the algorithm are removed and replaced with the intention of our code, not the implementation of the algorithm.\u003c/p\u003e\n\n\u003cp\u003eDon't worry if you're not fully grasping \u003ccode\u003eeach\u003c/code\u003e. We'll cover this more in depth in subsequent lessons. \u003c/p\u003e","exportId":"iterators-and-abstraction"},{"id":203686,"title":"Introduction to Ruby Iterators","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-ruby-iterators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/intro-to-ruby-iterators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-ruby-iterators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-ruby-iterators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the difference between looping and iterating.\u003c/li\u003e\n\u003cli\u003eLearn how to pass a block to an iterator.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edo;end\u003c/code\u003e block syntax.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e{ }\u003c/code\u003e block syntax.\u003c/li\u003e\n\u003cli\u003eCapture a value yielded to the block by the iterator in \u003ccode\u003e| |\u003c/code\u003e (pipes).\u003c/li\u003e\n\u003cli\u003eUse a captured yield value within the iterator's block.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eLooping vs. Iteration\u003c/h2\u003e\n\n\u003cp\u003eLooping is a programming construct that allows you to tell your program to do something a certain number of times, or until a certain condition is met. It is a mechanism to repeat a selection of code.\u003c/p\u003e\n\n\u003cp\u003eIteration, on the other hand, is a way to operate on a collection object, like an array, and do something with each element in that collection.\u003c/p\u003e\n\n\u003cp\u003eLet's say that we are writing a program to annoy our little brother. We don't want to annoy him \u003cem\u003etoo much\u003c/em\u003e though, or else we might get grounded. So, our program, when it runs, will \u003ccode\u003e#puts\u003c/code\u003e \"Stop hitting yourself!\" seven times, and then stop. For a task like this, in which we need to perform a task a certain, discrete number of times, we would use a loop.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e7.times do\u003cbr\u003e  puts \"Stop hitting yourself!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we want to output the phrase only \u003cem\u003euntil\u003c/em\u003e our little brother calls out \"Mommmm!!\"? We can stick with a loop construct like \u003ccode\u003ewhile\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einput = \"\"\u003cbr\u003ewhile input != \"Mommmm!!\"\u003cbr\u003e  puts \"Stop hitting yourself!\"\u003cbr\u003e  input = gets.chomp\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, what if we have three little brothers: Tom, Tim and Jim, and we want to output \"Stop hitting yourself, #{little brother's name}!\" once for each brother? Let's try that out using a loop with the \u003ccode\u003ewhile\u003c/code\u003e construct:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tom\", \"Tim\", \"Jim\"]\u003cbr\u003e\u003cbr\u003ecount = 0\u003cbr\u003ewhile count \u0026lt;= brothers.length-1\u003cbr\u003e  puts \"Stop hitting yourself #{brothers[count]}!\"\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn order to output a simple phrase using each brother's name from our collection with a \u003ccode\u003ewhile\u003c/code\u003e loop we need to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEstablish a counter\u003c/li\u003e\n\u003cli\u003eSet the condition for the \u003ccode\u003ewhile\u003c/code\u003e loop\u003c/li\u003e\n\u003cli\u003eRead data out of the array by index using the counter\u003c/li\u003e\n\u003cli\u003eIncrement the counter at the bottom of the loop\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThat's a lot of code to accomplish such a simple task. In fact, a loop isn't a good tool for this job. Since we are now operating on a collection of data and seeking to \u003cem\u003edo something\u003c/em\u003e with each element of that collection, we want to use an \u003cstrong\u003eiterator\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIterators are methods that you can call on a collection, like an array, to loop over each member of that collection and do something to or with that member of the collection. Let's take a look in the next section.\u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003e#each\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#each\u003c/code\u003e method is a prime example of an iterator. Here's a boilerplate example of its usage:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprimary_colors = [\"Red\", \"Yellow\", \"Blue\"]\u003cbr\u003eprimary_colors.each do |color|\u003cbr\u003e  puts \"Primary Color #{color} is #{color.length} letters long.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003e#each\u003c/code\u003e is called on the collection \u003ccode\u003eprimary_colors\u003c/code\u003e, which is an array containing 3 individual strings.\u003c/p\u003e\n\n\u003cp\u003eA block is passed to \u003ccode\u003e#each\u003c/code\u003e, opened by the code that starts with \u003ccode\u003edo\u003c/code\u003e and closed by the \u003ccode\u003eend\u003c/code\u003e. Every \u003ccode\u003edo\u003c/code\u003e needs a closing \u003ccode\u003eend\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprimary_colors = [\"Red\", \"Yellow\", \"Blue\"]\u003cbr\u003eprimary_colors.each do |color| # do begins a block\u003cbr\u003e  # the lines between the do/end are the block's body\u003cbr\u003e  puts \"Primary Color #{color} is #{color.length} letters long.\"\u003cbr\u003eend # end terminates the block\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe output from this code is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePrimary Color Red is 3 letters long.\u003cbr\u003ePrimary Color Yellow is 6 letters long.\u003cbr\u003ePrimary Color Blue is 4 letters long.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that the block passed to \u003ccode\u003eeach\u003c/code\u003e is executed once for each element in the original collection. If there were 5 colors in \u003ccode\u003eprimary_colors\u003c/code\u003e, the block would have run 5 times. We call each run, each execution, of the block passed to the iterator (\u003ccode\u003e#each\u003c/code\u003e in this case), an iteration. It's a word used to refer to each 'step', or each 'execution', of a block. An iteration is the singular execution of a sequence of code (that we call a block) within a loop.\u003c/p\u003e\n\n\u003cp\u003eWhen we iterate over a collection of elements using \u003ccode\u003e#each\u003c/code\u003e (and also in other iterators and enumerables we'll soon learn about), the iterator \u003ccode\u003e#each\u003c/code\u003e yields each element one at a time to every iteration via a variable declared with the opening of the block.\u003c/p\u003e\n\n\u003cp\u003eAfter the opening \u003ccode\u003edo\u003c/code\u003e of our code above, we see \u003ccode\u003e|color|\u003c/code\u003e. \u003ccode\u003e|\u003c/code\u003e is called a pipe. After \u003ccode\u003edo\u003c/code\u003e, we declare a local variable \u003ccode\u003ecolor\u003c/code\u003e by enclosing it in \u003ccode\u003e| |\u003c/code\u003e pipes. This variable's value is automatically assigned the element from the array for the current iteration. So on the first iteration of the \u003ccode\u003eeach\u003c/code\u003e above, the variable \u003ccode\u003ecolor\u003c/code\u003e would be equal to \u003ccode\u003e\"Red\"\u003c/code\u003e. But on the next iteration of the block, \u003ccode\u003ecolor\u003c/code\u003e will be reassigned the value of the next element in the \u003ccode\u003eprimary_colors\u003c/code\u003e array, \u003ccode\u003e\"Yellow\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a closer look at some of these concepts.\u003c/p\u003e\n\n\u003ch3\u003eWhat is a block?\u003c/h3\u003e\n\n\u003cp\u003eA block is a chunk of code between braces, \u003ccode\u003e{ }\u003c/code\u003e or between \u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003eend\u003c/code\u003e keywords that you can pass to a method almost exactly like you can pass an argument to a method. There are some methods, like iterator methods, that can be called \u003cem\u003ewith a block\u003c/em\u003e, i.e. accompanied by a block denoted with \u003ccode\u003e{ }\u003c/code\u003e or \u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003eend\u003c/code\u003e. Such a method would run and pass, or yield, data to the code in the block for that code to operate on or do something with.\u003c/p\u003e\n\n\u003cp\u003eBlocks are part of what make the Ruby language special, powerful, and loved.\u003c/p\u003e\n\n\u003ch3\u003eWhat are the \u003ccode\u003e| |\u003c/code\u003e?\u003c/h3\u003e\n\n\u003cp\u003eThose are called \"pipes\". When invoking an iterator like \u003ccode\u003e#each\u003c/code\u003e, the variable name inside the pipes acts as an argument that is being passed into the block. The iterator will pass, or yield, each element of the collection on which it is called to the block. Each element, as it gets passed into the block, will be equal to the variable name inside the pipes. Think of it like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCall, or run, the code in the block once for each element of the collection.\u003c/li\u003e\n\u003cli\u003ePass a single element of the collection into the block every time the code in the block is called, or run. Start with the first element in the collection, and then move on to the second element, then the third, etc.\u003c/li\u003e\n\u003cli\u003eEvery time you call the code in the block and pass in an element from the collection, set the variable name from between the pipes equal to that element.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is exactly what happens when you define a method to accept an argument and then call that method with a real argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef hi_there(name)\u003cbr\u003e  puts \"Hi, #{name}\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ehi_there(\"Sophie\") # \u0026gt; \"Hi, Sophie\"\u003cbr\u003e# =\u0026gt; nil \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThink of the variable between the pipes like the \u003ccode\u003ename\u003c/code\u003e variable we are using to define our argument.\u003c/p\u003e\n\n\u003cp\u003eThe variable name inside the pipes is more or less arbitrary. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ebrothers.each do |brother|\u003cbr\u003e  puts \"Stop hitting yourself #{brother}!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWill output the same thing as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ebrothers.each do |hippo|\u003cbr\u003e  puts \"Stop hitting yourself #{hippo}!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStop hitting yourself Tim!\u003cbr\u003eStop hitting yourself Tom!\u003cbr\u003eStop hitting yourself Jim!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe should, however, be reasonable and sensical when we name our variables. If your collection is called \u003ccode\u003ebrothers\u003c/code\u003e, name the variable between the pipes \u003ccode\u003ebrother\u003c/code\u003e. If your collection is called \u003ccode\u003eapples\u003c/code\u003e, name your variable \u003ccode\u003eapple\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eA Closer Look\u003c/h3\u003e\n\n\u003cp\u003eLet's revisit our example from above and break it down, step by step:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ebrothers.each do |brother|\u003cbr\u003e  puts \"Stop hitting yourself #{brother}!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, the \u003ccode\u003e#each\u003c/code\u003e method takes each element of the \u003ccode\u003ebrothers\u003c/code\u003e array, one at a time, and passes, or \u003cstrong\u003eyields\u003c/strong\u003e, it into the block of code between the \u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003eend\u003c/code\u003e keywords. It makes each element of the array available to the block by assigning it to the variable \u003ccode\u003ebrother\u003c/code\u003e. It does so by placing that variable name in between the pipes \u003ccode\u003e| |\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn summary, \u003ccode\u003e#each\u003c/code\u003e yields each item of the collection on which it is called to the block with which it is called. It keeps track of which element of the collection it is manipulating as it moves through the collection. During the first step of the iteration, \u003ccode\u003e#each\u003c/code\u003e will yield the first array element to the block. At that point in time, inside the block, \u003ccode\u003ebrother\u003c/code\u003e will equal \"Tim\". During the second step of the iteration, \u003ccode\u003ebrother\u003c/code\u003e will equal \"Tom\" and so on.\u003c/p\u003e\n\n\u003cp\u003eIterators like \u003ccode\u003e#each\u003c/code\u003e are smart – they don't need a separate counter variable and manual incrementation of that variable to know how many times to do something. They use the number of items in the collection on which they are called to determine how many times they will do something.\u003c/p\u003e\n\n\u003cp\u003eLet's set a \u003ccode\u003ecounter\u003c/code\u003e variable and manually increment it in order to see the \u003ccode\u003e#each\u003c/code\u003e method in action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ecounter = 1\u003cbr\u003ebrothers.each do |brother|\u003cbr\u003e  puts \"This is loop number #{counter}\"\u003cbr\u003e  puts \"Stop hitting yourself #{brother}!\"\u003cbr\u003e  counter += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopy and paste the above code into IRB. You should see this output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThis is loop number 1\u003cbr\u003eStop hitting yourself Tim!\u003cbr\u003eThis is loop number 2\u003cbr\u003eStop hitting yourself Tom!\u003cbr\u003eThis is loop number 3\u003cbr\u003eStop hitting yourself Jim!\u003cbr\u003e#=\u0026gt; [\"Tim\", \"Tom\", \"Jim\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee that, during loop number 1, the string \"Tim\" was yielded to the block and the variable name \u003ccode\u003ebrother\u003c/code\u003e, when interpolated into the string we \u003ccode\u003e#puts\u003c/code\u003eed out, was set equal to \"Tim\". During loop number 2, the same thing happened with \"Tom\", and during loop number 3, the same thing happened with \"Jim\". There was no loop number four because the \u003ccode\u003e#each\u003c/code\u003e iterator operated on each member of the array on which it was called and then stopped.\u003c/p\u003e\n\n\u003ch3\u003eA Note on Return Values\u003c/h3\u003e\n\n\u003cp\u003eDifferent iterators have different return values. Notice that the return value of the call to \u003ccode\u003e#each\u003c/code\u003e above returned \u003ccode\u003e[\"Tim\", \"Tom\", \"Jim\"]\u003c/code\u003e – the original array. The \u003ccode\u003e#each\u003c/code\u003e method will always return the original collection on which it was called.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e{ }\u003c/code\u003e Syntax\u003c/h3\u003e\n\n\u003cp\u003eAnother way of establishing a code block that you may encounter is to use curly brackets, \u003ccode\u003e{ }\u003c/code\u003e, instead of the \u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003eend\u003c/code\u003e keywords. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ebrothers.each{|brother| puts \"Stop hitting yourself #{brother}!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is appropriate to use the \u003ccode\u003e{ }\u003c/code\u003e syntax when the code in the block is short and can fit on one line.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBoth loops and iterators are powerful tools in Ruby, but they're not right for every job. Loops are useful when you need to tell your program to do something a certain number of times or to do something based on a certain condition. Iterators are useful for operating on a collection of objects, and even performing complex operations on the members of that collection. Because iterators are called with blocks, it's easy to carry out complex logic or tasks using each individual member of a collection of objects.\u003c/p\u003e","exportId":"introduction-to-ruby-iterators"},{"id":203687,"title":"Square Array Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"square_array\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/square_array/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/square_array\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/square_array/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice iterating over an array using the \u003ccode\u003e.each\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003ePractice operating on each element of an array.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou will build a method, \u003ccode\u003esquare_array\u003c/code\u003e, that squares each element in an array of numbers and returns a new array of these squared numbers. Use an iterator and implement your own logic, \u003cem\u003edon't\u003c/em\u003e use any built-in array methods other than \u003ccode\u003e.each\u003c/code\u003e (e.g. \u003ccode\u003e.collect\u003c/code\u003e, \u003ccode\u003e.inject\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eA couple of questions that you can ask yourself are: \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat is the return value of calling \u003ccode\u003e.each\u003c/code\u003e on an array?\u003c/li\u003e\n\u003cli\u003eHow can I operate on each element of an array and also collect or store those elements?\u003c/li\u003e\n\u003cli\u003eHow can I square a number? \u003cstrong\u003eHint:\u003c/strong\u003e There is more than one way to do it! You can use the exponent operator (Google Ruby's exponent operator to learn how it works) or you can use simple math. Refer back to the earlier lesson on math if you need a refresher.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAdvanced\u003c/h2\u003e\n\n\u003cp\u003eOnce you have the tests passing, see if you can implement this with a higher level iterator such as \u003ccode\u003e.collect\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eExpectation Examples\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003enumbers = [1,2,3]\u003cbr\u003e\u003cbr\u003esquare_array(numbers)\u003cbr\u003e# =\u0026gt; [1,4,9])\u003cbr\u003e\u003cbr\u003enew_numbers = [9,10,16,25]\u003cbr\u003e\u003cbr\u003esquare_array(new_numbers)\u003cbr\u003e# =\u0026gt; [81,100,256,625]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://www.ruby-doc.org/core-2.1.2/\"\u003eRuby Docs\u003c/a\u003e - \u003ca href=\"https://ruby-doc.org/core-2.6.3/Array.html#method-i-each\"\u003eEach Method\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g6eef5ee91d7628b5922c0004880bc9c2"},{"id":203688,"title":"Badges and Schedules Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"badges-and-schedules\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/badges-and-schedules/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/badges-and-schedules\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/badges-and-schedules/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine methods that use iteration and control the return values of those methods.\u003c/li\u003e\n\u003cli\u003eDefine methods that call other methods.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab you'll be learning how to iterate through an array and output the\nresults in different ways. Write your code in the \u003ccode\u003econference_badges.rb\u003c/code\u003e file\nand you can run the test suite using the \u003ccode\u003elearn test\u003c/code\u003e command.\u003c/p\u003e\n\n\u003ch3\u003eCreate a \u003ccode\u003ebadge_maker\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eYou're hosting a conference and need to print badges for the speakers. Each\nbadge should read: \u003ccode\u003e\"Hello, my name is _____.\"\u003c/code\u003e Write a \u003ccode\u003ebadge_maker\u003c/code\u003e method that,\nwhen provided a person's name, will create and return this message. E.g.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebadge_maker(\"Arel\")\u003cbr\u003e=\u0026gt; \"Hello, my name is Arel.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCreate a \u003ccode\u003ebatch_badge_creator\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eOnce the list of speakers for your conference has been finalized you'll want to\nget the badges printed for all of your speakers.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a \u003ccode\u003ebatch_badge_creator\u003c/code\u003e method that takes an array of names as an\nargument and returns an array of badge messages.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCreate an \u003ccode\u003eassign_rooms\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eYou just realized that you also need to give each speaker a room assignment.\nWrite a method called \u003ccode\u003eassign_rooms\u003c/code\u003e that takes the list of speakers and assigns\neach speaker to a room. Make sure that each room only has one speaker.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eYou have rooms 1-7.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ereturn a list of room assignments in the form of: \"Hello, _____! You'll\nbe assigned to room _____!\"\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cem\u003eHint\u003c/em\u003e: Think about how you will assign a room number to each person. Array\nitems are indexed, meaning that you can access each element by its index\nnumber. When you are iterating through an array, you can keep track of the\nindex number of the current iteration using an enumerator method called\n\u003ca href=\"http://ruby-doc.org/core-2.2.2/Enumerable.html#method-i-each_with_index\"\u003e\u003ccode\u003eeach_with_index\u003c/code\u003e\u003c/a\u003e or a closely related method called \u003ca href=\"https://stackoverflow.com/questions/20258086/difference-between-each-with-index-and-each-with-index-in-ruby\"\u003e\u003ccode\u003e.with_index\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cem\u003eHint\u003c/em\u003e: Remember that the return value of the \u003ccode\u003eeach\u003c/code\u003e (or \u003ccode\u003eeach_with_index\u003c/code\u003e)\nmethod is the original array that you are calling it on. What we need to do\nhere is iterate through the array containing the list of speakers, create the\nroom assignment strings for each speaker, and return a \u003cem\u003enew\u003c/em\u003e array containing\nthe messages. There is an enumerator method that does just that. Google or use\n\u003ca href=\"http://docs.ruby-lang.org/en/2.0.0/Enumerable.html\"\u003eRuby Docs\u003c/a\u003e to find the\ncorrect method.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCreate a \u003ccode\u003eprinter\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eNow you have to tell the printer what to print. Create a method called \u003ccode\u003eprinter\u003c/code\u003e\nthat will output first the results of the \u003ccode\u003ebatch_badge_creator\u003c/code\u003e method and then\nof the \u003ccode\u003eassign_rooms\u003c/code\u003e method to the screen.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eHint\u003c/em\u003e: Remember that methods can call other methods. If the return value of\n\u003ccode\u003eassign_rooms\u003c/code\u003e is an array of room assignments, how can you print out each\nassignment? You'll need to iterate over your array of room assignments in\norder to \u003ccode\u003eputs\u003c/code\u003e out each individual assignment.\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g6d18d8e99ce852eb648faa1f16409a53"},{"id":203689,"title":"Oxford Comma Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oxford-comma\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/oxford-comma/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oxford-comma\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oxford-comma/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIterate over array elements.\u003c/li\u003e\n\u003cli\u003eUse various methods to manipulate arrays and strings.\u003c/li\u003e\n\u003cli\u003eConvert data types.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConverting Types\u003c/h2\u003e\n\n\u003cp\u003eIn Ruby, there are a few methods available to us for converting data types. For\nexample, it is possible to convert a string to an array, an array into a string,\nor a range into an array, among other conversions. You can learn more about\nconversion \u003ca href=\"http://www.dotnetperls.com/convert-ruby\"\u003ehere\u003c/a\u003e, but for now we'll\njust take a look at a few.\u003c/p\u003e\n\n\u003ch4\u003eString to Array\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.split\u003c/code\u003e method will convert a string into an array. The \u003ccode\u003e.split\u003c/code\u003e method\ntakes an argument of the character in the string on which you want to split it.\nFor example, if we have a string that contains a comma-separated list of items:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\"hippo,giraffe,monkey,horse\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can call \u003ccode\u003e.split\u003c/code\u003e on it, with an argument of a \u003ccode\u003e,\u003c/code\u003e (\"comma\") to get an array\nof animal names:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"hippo,giraffe,monkey,horse\".split(\",\")\u003cbr\u003e  =\u0026gt; [\"hippo\", \"giraffe\", \"monkey\", \"horse\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eRange to Array\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.to_a\u003c/code\u003e method, when called on a range, can convert a range of numbers to an\narray:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(1..10).to_a\u003cbr\u003e  =\u0026gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eArray to String\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.join\u003c/code\u003e method, when called on an array, will convert it into a string. This\nmethod takes in an optional string argument containing either a character or a\nset of characters that will be inserted between each array element, as they are\nassembled into a string.\u003c/p\u003e\n\n\u003cp\u003eFor example, calling \u003ccode\u003e.join\u003c/code\u003e with \u003cem\u003eno\u003c/em\u003e argument will create a string out of the\narray's elements by placing each one directly adjacent to the next one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"a\", \"b\", \"c\"].join\u003cbr\u003e  =\u0026gt; \"abc\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut calling \u003ccode\u003e.join\u003c/code\u003e on the same array and giving it an argument of a \u003ccode\u003e\" :-) \"\u003c/code\u003e\n(\"smiley face\") will place an occurrence of that string, (i.e. the smiley face)\nbetween each letter:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"a\", \"b\", \"c\"].join(\" :-) \")\u003cbr\u003e  =\u0026gt; \"a :-) b :-) c\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eFork and clone this lab.\u003c/li\u003e\n\u003cli\u003eWrite a method \u003ccode\u003eoxford_comma\u003c/code\u003e that takes an array of string elements as an\nargument and converts it into a string using the \u003ca href=\"http://en.wikipedia.org/wiki/Serial_comma\"\u003eOxford\ncomma\u003c/a\u003e. For example, the array\n\u003ccode\u003e[\"fiddleheads\",\"okra\",\"kohlrabi\"]\u003c/code\u003e should get converted to the string\n\u003ccode\u003e\"fiddleheads, okra, and kohlrabi\"\u003c/code\u003e.\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eYou will need to refer to the section above about converting arrays into strings, but note that coding this method will involve a couple of extra challenges.\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eRemember, strings can be operated on very similarly to arrays. For instance, you can add elements to the end of strings with the\u003c/em\u003e \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e \u003cem\u003e(\"shovel\") method just like you can with arrays.\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003elearn test\u003c/code\u003e and read through the errors to see the specific cases your\nmethod will need to handle.\u003c/li\u003e\n\u003cli\u003eThis might be a challenging lab, so take your time using Google and playing\naround with your code. Good luck and have fun!\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://en.wikipedia.org\"\u003eWikipedia\u003c/a\u003e - \u003ca href=\"http://en.wikipedia.org/wiki/Serial_comma\"\u003eSerial Comma\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.dotnetperls.com/convert-ruby\"\u003eDot Net Perls - Convert\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"ga8f20427aa24045a672062c08cc036a2"},{"id":203690,"title":"Deli Counter Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"deli-counter\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/deli-counter/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/deli-counter\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/deli-counter/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice building methods that use iteration and controlling their return values.\u003c/li\u003e\n\u003cli\u003ePractice manipulating arrays (adding elements, removing elements, etc.).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe local deli is putting in a new computerized queue to keep track of their customers and improve productivity. At the beginning of the day, the deli is empty so the queue should be represented by an empty array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekatz_deli = []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWrite all of your code in \u003ccode\u003edeli_counter.rb\u003c/code\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eBuild the \u003ccode\u003eline\u003c/code\u003e method that shows everyone their current place in the line. If there is nobody in line, it should say \u003ccode\u003e\"The line is currently empty.\"\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuild a method that a new customer will use when entering the deli. The \u003ccode\u003etake_a_number\u003c/code\u003e method should accept two arguments, the array for the current line of people (\u003ccode\u003ekatz_deli\u003c/code\u003e), and a string containing the name of the person joining the end of the line. The method should call out (\u003ccode\u003eputs\u003c/code\u003e) the person's name along with their position in line. \u003cstrong\u003eTop-Tip:\u003c/strong\u003e \u003cem\u003eRemember that people like to count from\u003c/em\u003e \u003ccode\u003e1\u003c/code\u003e\u003cem\u003e, not from\u003c/em\u003e \u003ccode\u003e0\u003c/code\u003e \u003cem\u003e(\"zero\") like computers.\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuild the \u003ccode\u003enow_serving\u003c/code\u003e method which should call out (i.e. \u003ccode\u003eputs\u003c/code\u003e) the next person in line and then remove them from the front. If there is nobody in line, it should call out (\u003ccode\u003eputs\u003c/code\u003e) that \u003ccode\u003e\"There is nobody waiting to be served!\"\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eExample usage:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  katz_deli = []\u003cbr\u003e\u003cbr\u003e  take_a_number(katz_deli, \"Ada\") #=\u0026gt; Welcome, Ada. You are number 1 in line.\u003cbr\u003e  take_a_number(katz_deli, \"Grace\") #=\u0026gt; Welcome, Grace. You are number 2 in line.\u003cbr\u003e  take_a_number(katz_deli, \"Kent\") #=\u0026gt; Welcome, Kent. You are number 3 in line.\u003cbr\u003e\u003cbr\u003e  line(katz_deli) #=\u0026gt; \"The line is currently: 1. Ada 2. Grace 3. Kent\"\u003cbr\u003e\u003cbr\u003e  now_serving(katz_deli) #=\u0026gt; \"Currently serving Ada.\"\u003cbr\u003e\u003cbr\u003e  line(katz_deli) #=\u0026gt; \"The line is currently: 1. Grace 2. Kent\"\u003cbr\u003e\u003cbr\u003e  take_a_number(katz_deli, \"Matz\") #=\u0026gt; Welcome, Matz. You are number 3 in line.\u003cbr\u003e\u003cbr\u003e  line(katz_deli) #=\u0026gt; \"The line is currently: 1. Grace 2. Kent 3. Matz\"\u003cbr\u003e\u003cbr\u003e  now_serving(katz_deli) #=\u0026gt; \"Currently serving Grace.\"\u003cbr\u003e\u003cbr\u003e  line(katz_deli) #=\u0026gt; \"The line is currently: 1. Kent 2. Matz\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e Review adding and removing elements from an array as well as iterating with index numbers. Also, many of the methods to add and remove elements from an array can also be used to add and remove elements to a string. This will help you solve the lab.\u003c/p\u003e","exportId":"ga0b77f6b8142f210275e6e38ffe919ac"},{"id":203691,"title":"Each vs Collect","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"each-vs-collect-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/each-vs-collect-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/each-vs-collect-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/each-vs-collect-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIdentify the return values of the \u003ccode\u003eeach\u003c/code\u003e and \u003ccode\u003ecollect\u003c/code\u003e methods.\u003c/li\u003e\n\u003cli\u003eImplement the \u003ccode\u003eeach\u003c/code\u003e and \u003ccode\u003ecollect\u003c/code\u003e methods.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lesson will give a deeper dive on how to use the \u003ccode\u003eeach\u003c/code\u003e and \u003ccode\u003ecollect\u003c/code\u003e methods.\u003c/p\u003e\n\n\u003cp\u003eFor our examples we will be building a \u003ccode\u003ehamburger\u003c/code\u003e method that takes an array of \u003ccode\u003etoppings\u003c/code\u003e as an argument.\u003c/p\u003e\n\n\u003ch3\u003eWhat we want our methods to do\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eTake in an array of hamburger toppings.\u003c/li\u003e\n\u003cli\u003eIterate through each topping, one at a time.\u003c/li\u003e\n\u003cli\u003eManipulate that data (do something to it).\u003c/li\u003e\n\u003cli\u003eReturn the manipulated data.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eEach\u003c/h2\u003e\n\n\u003cp\u003eThe most important thing to remember about \u003ccode\u003eeach\u003c/code\u003e is that it does not change the return value. It implicitly returns the original array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etoppings = [\"pickles\", \"mushrooms\", \"bacon\"]\u003cbr\u003e\u003cbr\u003edef hamburger(toppings)\u003cbr\u003e  toppings.each do |topping|\u003cbr\u003e    puts \"I love #{topping} on my burgers!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eThis method will print:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eI love pickles on my burgers!\u003cbr\u003eI love mushrooms on my burgers!\u003cbr\u003eI love bacon on my burgers!\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eBut the return value is still:\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003e[\"pickles\", \"mushrooms\", \"bacon\"]\u003c/code\u003e\u003c/p\u003e\n\n\u003ch4\u003eIf we want a different return value, we have to explicitly tell it to do so.\u003c/h4\u003e\n\n\u003cp\u003eIn this version of our burger method we set an empty array called \u003ccode\u003emy_statements\u003c/code\u003e, which we will then explicitly return after we finish our loop.\nInside our \u003ccode\u003eeach\u003c/code\u003e statement loop, we manipulate each topping by interpolating it inside a string. We then push that string into our \u003ccode\u003emy_statements\u003c/code\u003e array.\nAfter we iterate over each topping in our array, we return the new \u003ccode\u003emy_statements\u003c/code\u003e array.\u003c/p\u003e\n\n\u003cp\u003eYou'll notice that since the \u003ccode\u003eeach\u003c/code\u003e doesn't return the thing we want, we have to add an extra line at the end that returns the \u003ccode\u003emy_statements\u003c/code\u003e array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef hamburger(toppings)\u003cbr\u003e  my_statements = []\u003cbr\u003e  toppings.each do |topping|\u003cbr\u003e    my_statements \u0026lt;\u0026lt; \"I love #{topping} on my burgers!\"\u003cbr\u003e  end\u003cbr\u003e  my_statements\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eOur new return value:\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e[\"I love pickles on my burgers!\",\u003cbr\u003e \"I love mushrooms on my burgers!\",\u003cbr\u003e \"I love bacon on my burgers!\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, if we do want a different return value, there is a handy method called \u003ccode\u003emap\u003c/code\u003e, also known as \u003ccode\u003ecollect\u003c/code\u003e. These methods are abstractions of our \u003ccode\u003eeach\u003c/code\u003e method. An abstraction is the process of taking away or removing characteristics from something in order to reduce it to a set of essential characteristics. Let's take a look at a few examples.\u003c/p\u003e\n\n\u003ch2\u003eMap \u0026amp; Collect\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003etoppings = [\"pickles\", \"mushrooms\", \"bacon\"]\u003cbr\u003e\u003cbr\u003edef hamburger(toppings)\u003cbr\u003e  toppings.map do |topping|\u003cbr\u003e    puts \"I love #{topping} on my burgers!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003ecollect\u003c/code\u003e are the same thing, this can be expressed exactly the same way with \u003ccode\u003ecollect\u003c/code\u003e, like the following.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etoppings = [\"pickles\", \"mushrooms\", \"bacon\"]\u003cbr\u003e\u003cbr\u003edef hamburger(toppings)\u003cbr\u003e  toppings.collect do |topping|\u003cbr\u003e    puts \"I love #{topping} on my burgers!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eThis method will print:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eI love pickles on my burgers!\u003cbr\u003eI love mushrooms on my burgers!\u003cbr\u003eI love bacon on my burgers!\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eThis method will return:\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003e[nil, nil, nil]\u003c/code\u003e\u003c/p\u003e\n\n\u003ch4\u003eWhy does it return nil?\u003c/h4\u003e\n\n\u003cp\u003eIf you look inside our \u003ccode\u003emap\u003c/code\u003e loop, you will see that we are using \u003ccode\u003eputs\u003c/code\u003e, which always has a \u003ccode\u003enil\u003c/code\u003e return value. What this is telling us is that our return value is indeed being changed by \u003ccode\u003emap\u003c/code\u003e. Let's look at another example.\u003c/p\u003e\n\n\u003cp\u003eHere we are no longer using \u003ccode\u003eputs\u003c/code\u003e, but instead implicitly returning what is inside our block. Again showing that \u003ccode\u003emap\u003c/code\u003e will give us a new return value based on the logic inside our block.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef hamburger(toppings)\u003cbr\u003e  toppings.collect do |topping|\u003cbr\u003e    \"I love #{topping} on my burgers\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eOur new return value:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003e[\"I love pickles on my burgers\",\u003cbr\u003e \"I love mushrooms on my burgers\",\u003cbr\u003e \"I love bacon on my burgers\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eTakeaway:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you want the transformations to be reflected in the return value use \u003ccode\u003emap\u003c/code\u003e or \u003ccode\u003ecollect\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIf you want to return the original return value use \u003ccode\u003eeach\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e","exportId":"each-vs-collect"},{"id":203692,"title":"Reverse Each Word Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"reverse-each-word\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/reverse-each-word/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/reverse-each-word\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/reverse-each-word/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the return value of the each method\u003c/li\u003e\n\u003cli\u003eUse the .collect method\u003c/li\u003e\n\u003cli\u003eUnderstand the return value of the .collect method\u003c/li\u003e\n\u003cli\u003eUse the return of collect for further operation\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eWrite a method called \u003ccode\u003ereverse_each_word\u003c/code\u003e that takes in a string argument of a sentence and returns that same sentence with each word reversed in place.\u003c/p\u003e\n\n\u003cp\u003eFirst solve it using \u003ccode\u003e.each\u003c/code\u003e Then utilize the same method using \u003ccode\u003e.collect\u003c/code\u003e to see the difference.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereverse_each_word(\"Hello there, and how are you?\")\u003cbr\u003e  #=\u0026gt; \"olleH ,ereht dna woh era ?uoy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eYou can't use an enumerator on a string, so how can we turn our string into an array?\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eHow can we reverse each word and return those altered words? Remember that\u003c/em\u003e \u003ccode\u003e.each\u003c/code\u003e \u003cem\u003ereturns the original array but other enumerators don't.\u003c/em\u003e\u003c/p\u003e","exportId":"ga6b5fae58c918a3aa3758719bba020b3"},{"id":203693,"title":"Boolean Enumerables","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-boolean-enumerables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-boolean-enumerables/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-boolean-enumerables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-boolean-enumerables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand return values for enumerators.\u003c/li\u003e\n\u003cli\u003eUse true/false expressions within a block.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#all?\u003c/code\u003e enumerator to create a true/false return value.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#none?\u003c/code\u003e enumerator to create a true/false return value.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#any?\u003c/code\u003e enumerator to create a true/false return value.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#include?\u003c/code\u003e enumerator to create a true/false return value.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWhen we are iterating over objects in a collection like with \u003ccode\u003e#each\u003c/code\u003e we generally don't care about the return values.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"Red\", \"Yellow\", \"Blue\"].each do |color|\u003cbr\u003e  puts \"There are #{color.length} letters in #{color}\"\u003cbr\u003eend #=\u0026gt; [\"Red\", \"Yellow\", \"Blue\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you run this code in IRB, you'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e001:0 \u0026gt; [\"Red\", \"Yellow\", \"Blue\"].each do |color|\u003cbr\u003e?\u0026gt;        puts \"There are #{color.length} letters in #{color}\"\u003cbr\u003e003:1 \u0026gt; end\u003cbr\u003e\u003cbr\u003eThere are 3 letters in Red\u003cbr\u003eThere are 6 letters in Yellow\u003cbr\u003eThere are 4 letters in Blue\u003cbr\u003e=\u0026gt; [\"Red\", \"Yellow\", \"Blue\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can see the block did what we intended it to do, it printed our output. You'll notice the last line also indicates that the \u003ccode\u003e#each\u003c/code\u003e method also returned a value. All expressions in ruby must return a value. When you use \u003ccode\u003e#each\u003c/code\u003e on a collection, the return value is always the original collection. Nothing you do inside the block you pass \u003ccode\u003e#each\u003c/code\u003e will ever change the return value. But that's not always the case. With other enumerator methods, the return value of the method is very much dependent on the block.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#all?\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eImagine wanting to know if all the numbers in an array are odd. You could use each with something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eall_odd = true\u003cbr\u003e[1,2,3].each do |number|\u003cbr\u003e  if number.even? # Will evaluate to false for 1, true for 2, false for 3\u003cbr\u003e    all_odd = false\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003eall_odd #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat works, the end value of \u003ccode\u003eall_odd\u003c/code\u003e will be false because \u003ccode\u003e2\u003c/code\u003e  flipped the \u003ccode\u003eall_odd\u003c/code\u003e variable to false. However, something so simple - checking if all the elements in this array are odd - isn't being expressed clearly. Worse than our code not expressing our intention is that our code requires us to maintain variable state, \u003ccode\u003eall_odd\u003c/code\u003e, which can easily lead to errors (say if some other piece of code accidentally changes that variable value).\u003c/p\u003e\n\n\u003cp\u003eConsider the following example using \u003ccode\u003e#all?\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eall_odd = [1,3].all? do |number|\u003cbr\u003e  number.odd? # Will evaluate to true for 1, true for 3\u003cbr\u003eend #=\u0026gt; true\u003cbr\u003eall_odd #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe rule for the \u003ccode\u003e#all?\u003c/code\u003e enumerator is that the block passed to it must return \u003ccode\u003etrue\u003c/code\u003e for every iteration for the entire \u003ccode\u003e#all?\u003c/code\u003e expression or method to return \u003ccode\u003etrue\u003c/code\u003e. If we introduce an even number to the collection, the return value will change.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eall_odd = [1,2,3].all? do |number|\u003cbr\u003e  number.odd? # Will evaluate to true for 1, false for 2, true for 3\u003cbr\u003eend #=\u0026gt; false\u003cbr\u003eall_odd #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's the rule for \u003ccode\u003e#all?\u003c/code\u003e - every iteration, every loop of the block must return \u003ccode\u003etrue\u003c/code\u003e. When the block encounters the value \u003ccode\u003e2\u003c/code\u003e for \u003ccode\u003enumber\u003c/code\u003e, it will run the expression \u003ccode\u003e2.odd?\u003c/code\u003e which will return \u003ccode\u003efalse\u003c/code\u003e. Because there was at least one iteration of the block that had a \u003ccode\u003efalse\u003c/code\u003e return value, the entire \u003ccode\u003e#all?\u003c/code\u003e expression returns \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#none?\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eImagine the opposite of \u003ccode\u003e#all?\u003c/code\u003e, a method \u003ccode\u003e#none?\u003c/code\u003e, where we are interested in none of the elements in a collection producing a true expression within the block passed to \u003ccode\u003e#none?\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,3].none?{|i| i.even?} #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe entire expression \u003ccode\u003e#none?\u003c/code\u003e returns true because none of those numbers will produce a \u003ccode\u003etrue\u003c/code\u003e expression when asked within the block if they are even. Compare the code above to the code required to test that condition using \u003ccode\u003e#each\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enone_even = true\u003cbr\u003e[1,3].each do |i|\u003cbr\u003e  if i.even?\u003cbr\u003e    none_even = false\u003cbr\u003e  end\u003cbr\u003eend #=\u0026gt; [1,3] because `#each` always returns the original collection\u003cbr\u003enone_even #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese high-level boolean enumerators like \u003ccode\u003e#all?\u003c/code\u003e and \u003ccode\u003e#none?\u003c/code\u003e are way cleaner for evaluating elements in a collection for \u003ccode\u003etrue\u003c/code\u003e/\u003ccode\u003efalse\u003c/code\u003e conditions.\u003c/p\u003e\n\n\u003cp\u003eTo recap, if \u003cem\u003eany\u003c/em\u003e of the elements in the collection evaluate to \u003ccode\u003etrue\u003c/code\u003e when passed to the block, \u003ccode\u003e#none?\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e. If \u003cem\u003enone\u003c/em\u003e of the elements evaluate to \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003e#none?\u003c/code\u003e will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#any?\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eSometimes you want to be a bit more forgiving than \u003ccode\u003e#all?\u003c/code\u003e or \u003ccode\u003e#none?\u003c/code\u003e and just ensure that at least one element in a collection will create a \u003ccode\u003etrue\u003c/code\u003e expression within the block passed. \u003ccode\u003e#any?\u003c/code\u003e is perfect for this. The \u003ccode\u003e#any?\u003c/code\u003e enumerator will return true if at least one iteration of the block evaluates to true, but false if none of them do.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,100].any?{|i| i \u0026gt; 99} #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e#any?\u003c/code\u003e expression above will return \u003ccode\u003etrue\u003c/code\u003e because at least one element, \u003ccode\u003e100\u003c/code\u003e, will produce a \u003ccode\u003etrue\u003c/code\u003e evaluation in the block.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#include?\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWhereas \u003ccode\u003e#any?\u003c/code\u003e is useful for evaluating the truthiness of the logic of a block, \u003ccode\u003e#include?\u003c/code\u003e is helpful if you'd like to merely compare actual contents of a known value.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e#include?\u003c/code\u003e will return \u003ccode\u003etrue\u003c/code\u003e if the given element exists in the object. If it doesn't find a match, it will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe_numbers = [4,8,15,16,23,42]\u003cbr\u003ethe_numbers.include?(42)   #=\u0026gt; true\u003cbr\u003ethe_numbers.include?(6)   #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e#include?\u003c/code\u003e expression first returns \u003ccode\u003etrue\u003c/code\u003e because \u003ccode\u003ethe_numbers[5] == 42\u003c/code\u003e. When it is run with \u003ccode\u003e6\u003c/code\u003e, it will evaluate to \u003ccode\u003efalse\u003c/code\u003e since that item is not present in the array.\u003c/p\u003e","exportId":"boolean-enumerables"},{"id":203694,"title":"Search Enumerables","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-search-enumerators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-search-enumerators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-search-enumerators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-search-enumerators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand return values for enumerators.\u003c/li\u003e\n\u003cli\u003eUse a truthy or falsey evaluation in a block.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e#select\u003c/code\u003e to select matching elements from a collection based on a block.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e#detect\u003c/code\u003e to find a matching element from a collection based on a block.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e#reject\u003c/code\u003e to filter matching elements from a collection based on a block. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eEvery method in ruby must return a value. When we iterate or enumerate over a collection with \u003ccode\u003e#each\u003c/code\u003e, the return value is always the original collection. This is an example of a static return value, no matter what we do with \u003ccode\u003e#each\u003c/code\u003e, it will always return the same object that received the call to \u003ccode\u003e#each\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"Red\", \"Yellow\", \"Blue\"].each do |color|\u003cbr\u003e  puts \"There are #{color.length} letters in #{color}\"\u003cbr\u003eend #=\u0026gt; [\"Red\", \"Yellow\", \"Blue\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOften we want to search for elements in a collection based on a condition. Imagine wanting to find all even numbers in a collection of numbers using \u003ccode\u003e#each\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ematches = []\u003cbr\u003e[1,2,3,4,5].each do |i|\u003cbr\u003e  matches \u0026lt;\u0026lt; i if i.even? # add i to the matches array if it is even\u003cbr\u003eend #=\u0026gt; [1,2,3,4,5]\u003cbr\u003ematches #=\u0026gt; [2,4]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eImplementing a selection routine with a low-level enumerator like \u003ccode\u003e#each\u003c/code\u003e is costly in a few ways.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWe have to hang on to the matches within the local array \u003ccode\u003ematches\u003c/code\u003e.\nProgrammers use the phrase \u003cstrong\u003emaintain state\u003c/strong\u003e to refer to this task. Cars\ncan be in a state like \"Reverse, Drive, Neutral\". Our \u003ccode\u003ematches\u003c/code\u003e array has\nstates of \"Empty, \u003ccode\u003e[2]\u003c/code\u003e, \u003ccode\u003e[2,4]\u003c/code\u003e\".\u003c/li\u003e\n\u003cli\u003eOur block is complicated with conditional logic that can be implicit with a better enumerator.\u003c/li\u003e\n\u003cli\u003eOur code lacks intention and clear semantics. If we mean, \u003ccode\u003e#find_all\u003c/code\u003e or \u003ccode\u003e#select\u003c/code\u003e, why don't we just say that?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003e\u003ccode\u003e#select\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWhen you evoke \u003ccode\u003e#select\u003c/code\u003e on a collection, the return value will be a new array containing all the elements of the collection that cause the block passed to \u003ccode\u003e#select\u003c/code\u003e to return true. That means for each iteration, if the block evaluates to true, the element yielded to that iteration will be kept in the return value array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3,4,5].select do |number|\u003cbr\u003e  number.even?\u003cbr\u003eend #=\u0026gt; [2,4]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the first iteration of the block above, \u003ccode\u003enumber\u003c/code\u003e will be assigned the value \u003ccode\u003e1\u003c/code\u003e. Because \u003ccode\u003e1.even?\u003c/code\u003e will return false, \u003ccode\u003e1\u003c/code\u003e \u003cstrong\u003ewill not\u003c/strong\u003e be in the return array for this call to \u003ccode\u003e#select\u003c/code\u003e (same for \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e5\u003c/code\u003e). In the second iteration, \u003ccode\u003enumber\u003c/code\u003e will be \u003ccode\u003e2\u003c/code\u003e. Because \u003ccode\u003e2.even?\u003c/code\u003e will return true, \u003ccode\u003e2\u003c/code\u003e \u003cstrong\u003ewill\u003c/strong\u003e be in the return array (same for \u003ccode\u003e4\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eYou can see the clarity and expressiveness of this syntax in the short block from below.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3,4,5].select{|i| i.odd?} #=\u0026gt; [1,3,5]\u003cbr\u003e\u003cbr\u003e[1,2,3].select{|i| i.is_a?(String)} #=\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that if no element makes the block evaluate to \u003ccode\u003etrue\u003c/code\u003e, an empty array is returned.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003e#detect\u003c/code\u003e or \u003ccode\u003e#find\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003eNOTE: \u003ccode\u003edetect\u003c/code\u003e and \u003ccode\u003efind\u003c/code\u003e are two names for the same method. For every example below we'll use \u003ccode\u003edetect\u003c/code\u003e, but you can use them interchangeably.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eWhereas \u003ccode\u003e#select\u003c/code\u003e will return all elements from the original collection that cause the block to evaluate to true, \u003ccode\u003e#detect\u003c/code\u003e will only return the first element that makes the block true.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3].detect{|i| i.odd?} #=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3].find{|i| i.odd?} #=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, even though both \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e3\u003c/code\u003e would cause the block to evaluate to true, because \u003ccode\u003e1\u003c/code\u003e is first in the array, it alone is returned.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3,4].detect{|i| i.even?} #=\u0026gt; 2\u003cbr\u003e[1,2,3,4].detect{|i| i.is_a?(String)} #=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice also that \u003ccode\u003e#detect\u003c/code\u003e will always return a single object where \u003ccode\u003e#select\u003c/code\u003e will always return an array.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#reject\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003e#reject\u003c/code\u003e will return an array with the elements for which the block is false.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2].reject{|i| i.even?} #=\u0026gt; [1]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003e#select\u003c/code\u003e, \u003ccode\u003e#detect\u003c/code\u003e, and \u003ccode\u003e#reject\u003c/code\u003e are part of a family of search and filter type enumerators whose purpose is to help you refine a collection to only matching elements. They are way easier to manage than using lower-level methods like \u003ccode\u003e#each\u003c/code\u003e and create meaningful return values based on expressions in a block.\u003c/p\u003e\n\n\u003ch2\u003eVideo Review\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=t2A6xPbh0I8\u0026amp;feature=youtu.be\"\u003eYield and Enumerables\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"search-enumerables"},{"id":203695,"title":"Cartoon Collections Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cartoon-collections\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/cartoon-collections/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cartoon-collections\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cartoon-collections/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eCartoon Collections\u003c/h2\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eGet familiar iterating through arrays with enumerator methods like\n\u003ccode\u003e.collect\u003c/code\u003e or \u003ccode\u003e.map\u003c/code\u003e, \u003ccode\u003e.find\u003c/code\u003e, and \u003ccode\u003e.include?\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eBuild methods and control their return values.\u003c/li\u003e\n\u003cli\u003ePractice control flow with \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThere are four methods to complete in this lab:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e \u003ccode\u003eroll_call_dwarves\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e \u003ccode\u003esummon_captain_planet\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e \u003ccode\u003elong_planeteer_calls\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e \u003ccode\u003efind_the_cheese\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003eMethod 1 — \u003ccode\u003eroll_call_dwarves\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/web-dev-readme-photos/cartoon-collections/dwarves.jpg\" alt=\"dwarves\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis method should accept an array of dwarf names, for instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"Doc\", \"Dopey\", \"Bashful\", \"Grumpy\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should then print out each name, in number order, using \u003ccode\u003eputs\u003c/code\u003e. The print-out\nshould look like this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003col\u003e\n\u003cli\u003e Doc\u003c/li\u003e\n\u003cli\u003e Dopey\u003c/li\u003e\n\u003cli\u003e Bashful\u003c/li\u003e\n\u003cli\u003e Grumpy\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLook into the \u003ca href=\"http://ruby-doc.org/core/Enumerable.html#method-i-each_with_index\"\u003e\u003ccode\u003eeach_with_index\u003c/code\u003e\u003c/a\u003e method.\u003c/p\u003e\n\n\u003cp\u003eOnce the test for this method is passing, move on to the next method.\u003c/p\u003e\n\n\u003ch4\u003eMethod 2 — \u003ccode\u003esummon_captain_planet\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/web-dev-readme-photos/cartoon-collections/captain-planet.jpeg\" alt=\"captain-planet\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis method should accept an array argument of planeteer calls that will look\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eplaneteer_calls = [\"earth\", \"wind\", \"fire\", \"water\", \"heart\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should then capitalize each element and add an exclamation point at the end.\nThe return value of this method should be an array, in this example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esummon_captain_planet(planeteer_calls)\u003cbr\u003e#=\u0026gt; [\"Earth!\", \"Wind!\", \"Fire!\", \"Water!\", \"Heart!\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e.map\u003c/code\u003e or \u003ccode\u003e.collect\u003c/code\u003e method might be appropriate for this task, take a look\nat it \u003ca href=\"http://stackoverflow.com/a/12084555/2890716\"\u003ehere\u003c/a\u003e and \u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-map\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eOnce the test for this method is passing, move on to the next method, long\nplaneteer calls.\u003c/p\u003e\n\n\u003ch4\u003eMethod 3 — \u003ccode\u003elong_planeteer_calls\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003elong_planeteer_calls\u003c/code\u003e method should accept an array of calls. The method\nshould tell us if any of the calls are longer than four characters. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshort_words = [\"puff\", \"go\", \"two\"]\u003cbr\u003elong_planeteer_calls(short_words)\u003cbr\u003e#=\u0026gt; false\u003cbr\u003e\u003cbr\u003eassorted_words = [\"two\", \"go\", \"industrious\", \"bop\"]\u003cbr\u003elong_planeteer_calls(assorted_words)\u003cbr\u003e#=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice the return value of this method is either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, depending on\nthe array it was given as an argument.\u003c/p\u003e\n\n\u003cp\u003eCheckout the \u003ca href=\"http://ruby-doc.org/core/Array.html\"\u003eRuby docs on arrays\u003c/a\u003e for a hint.\u003c/p\u003e\n\n\u003cp\u003eOnce the test for this method is passing, move on to the last method.\u003c/p\u003e\n\n\u003ch4\u003eMethod 4 — \u003ccode\u003efind_the_cheese\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/web-dev-readme-photos/cartoon-collections/cheese.jpg\" alt=\"dancing-mice\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003efind_the_cheese\u003c/code\u003e method should accept an array of strings. It should then\nlook through these strings to find and return the first string that is a type of\ncheese. The types of cheese that appear are \u003ccode\u003e\"cheddar\"\u003c/code\u003e, \u003ccode\u003e\"gouda\"\u003c/code\u003e, and\n\u003ccode\u003e\"camembert\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esnacks = [\"crackers\", \"gouda\", \"thyme\"]\u003cbr\u003efind_the_cheese(snacks)\u003cbr\u003e#=\u0026gt; \"gouda\"\u003cbr\u003e\u003cbr\u003esoup = [\"tomato soup\", \"cheddar\", \"oyster crackers\", \"gouda\"]\u003cbr\u003efind_the_cheese(soup)\u003cbr\u003e#=\u0026gt; \"cheddar\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf, sadly, a list of ingredients does not include cheese, return \u003ccode\u003enil\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eingredients = [\"garlic\", \"rosemary\", \"bread\"]\u003cbr\u003efind_the_cheese(ingredients)\u003cbr\u003e#=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can assume that all strings will be lowercase. Take a look at the\n\u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-include-3F\"\u003e\u003ccode\u003e.include\u003c/code\u003e\u003c/a\u003e method for a hint. This method asks you to return a string\nvalue instead of printing it so keep that in mind.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"http://ruby-doc.org/core/Enumerable.html#method-i-each_with_index\"\u003e\u003ccode\u003e.each_with_index\u003c/code\u003e method\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eThe \u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-map\"\u003e\u003ccode\u003e.map\u003c/code\u003e method\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eThe \u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-include-3F\"\u003e\u003ccode\u003e.include\u003c/code\u003e method\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g07a1445500508e6e48733e24d69fc5af"},{"id":203696,"title":"Finding Prime Numbers Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prime-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prime-ruby/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prime-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prime-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice iteration and looping.\u003c/li\u003e\n\u003cli\u003ePractice defining methods and controlling return values.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this repository. Run the test suite to learn what is required of you. \u003c/p\u003e\n\n\u003cp\u003eYou'll be defining a method, \u003ccode\u003eprime?()\u003c/code\u003e, that takes in an integer argument and returns a boolean of whether or not that integer is a prime number.\u003c/p\u003e\n\n\u003cp\u003eA few things to think about:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat defines an integer as a prime number? Research algorithms for how to determine if a number is prime.\u003c/li\u003e\n\u003cli\u003eHow do you create a range of numbers? How do you turn a range into an array so that it can be iterated over?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRequirements:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDo not use any other Ruby library. You must build a method that can verify whether a number is prime. Don't \u003ccode\u003erequire 'math'\u003c/code\u003e and just piggyback off their implementation of prime number.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAdvanced\u003c/h2\u003e\n\n\u003cp\u003eThink about the efficiency of your algorithm. How many iterations does it do? Look into Benchmarking in Ruby and profile a few different approaches to implementing \u003ccode\u003eprime?()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://rubylearning.com/blog/2013/06/19/how-do-i-benchmark-ruby-code/\"\u003eBasic Benchmarking in Ruby\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://en.wikipedia.org/\"\u003eWikipedia\u003c/a\u003e - \u003ca href=\"http://en.wikipedia.org/wiki/Prime_number\"\u003ePrime number\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gb0e3ed2190c99f154642b1c306ecb66a"},{"id":203697,"title":"Sorting Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sorting-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sorting-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sorting-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sorting-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIntroduce the usefulness of sorting data.\u003c/li\u003e\n\u003cli\u003eIntroduce how the basic Ruby \u003ccode\u003esort\u003c/code\u003e method works under the hood.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSorting collections of data is a very common task in programming. As a developer, you can imagine being confronted with the need to sort items by price, or emails by their position in the alphabet, for example. There are a number of ways to execute sorting in Ruby. Here we'll discuss one basic example and learn how to sort a list of words.\u003c/p\u003e\n\n\u003ch2\u003eDinner Party Example\u003c/h2\u003e\n\n\u003cp\u003eYou are a famous chef hired to cater a dinner party for the President of Programlandia. Mr. President has his quirks and he'd like for you to print the dinner menu by listing the dishes in alphabetical order. Unfortunately, you weren't prepared for this request and you already have a list of dishes that are \u003cem\u003enot\u003c/em\u003e alphabetized.  \u003c/p\u003e\n\n\u003cp\u003eSo, we have a program that contains a variable, \u003ccode\u003edishes\u003c/code\u003e, that points to an array of your delicious dishes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edishes = [\"steak\", \"apple pie\", \"vegetable soup\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eComparing Strings\u003c/h3\u003e\n\n\u003cp\u003eWe need to sort the dishes in this array into alphabetical order. We've already learned about comparison operators like \u003ccode\u003e\u0026gt;\u003c/code\u003e (\"greater than\") and \u003ccode\u003e\u0026lt;\u003c/code\u003e (\"less than\") and used them on numbers. These operators work on strings too. If we compare strings using these operators, the comparison operator will look at the first letter of each string and compare their locations in the alphabet. Letters later in the alphabet are considered \u003cem\u003egreater than\u003c/em\u003e letters earlier in the alphabet. For example:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\"zoo\" \u0026gt; \"apple\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWill return\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003etrue\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003eThe \u003ccode\u003e.sort\u003c/code\u003e method\u003c/h2\u003e\n\n\u003cp\u003eIn order to sort our list of dishes, we will have to iterate over the array and compare every set of items. So far, when we've iterated with methods like \u003ccode\u003e.each\u003c/code\u003e or \u003ccode\u003e.collect\u003c/code\u003e, we iterate over \u003cem\u003eone element of the collection\u003c/em\u003e at a time. Now, in order to compare the elements in our array to one another, we need an enumerator that allows us to yield two elements at once. That's where the \u003ccode\u003e.sort\u003c/code\u003e method comes in.\u003c/p\u003e\n\n\u003cp\u003eThe sort method yields to a block with two elements. That block is the comparator, so it should compare the two elements and return 0 if they are the same, -1 if the first is less than the second, and 1 if the first is greater than the second\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at a basic example using an array of numbers:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [7, 3, 1, 2, 6, 5]\u003cbr\u003e\u003cbr\u003earray.sort do |a, b|\u003cbr\u003e  if a == b\u003cbr\u003e    0\u003cbr\u003e  elsif a \u0026lt; b\u003cbr\u003e    -1\u003cbr\u003e  elsif a \u0026gt; b\u003cbr\u003e    1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOther enumerator methods like \u003ccode\u003e.each\u003c/code\u003e we call like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray.each do |num|\u003cbr\u003e    puts num\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e.each\u003c/code\u003e method starts at the beginning of the array and passes each item \u003cem\u003eone at a time\u003c/em\u003e to the code in the block (the code in between \u003ccode\u003edo\u003c/code\u003e...\u003ccode\u003eend\u003c/code\u003e). We see \u003ccode\u003e.each\u003c/code\u003e passing each element of the array to the block here: \u003ccode\u003e|num|\u003c/code\u003e, by placing a placeholder for each element in between the pipes (\u003ccode\u003e| |\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.sort\u003c/code\u003e method is different. It passes elements \u003cem\u003etwo at a time\u003c/em\u003e into the block, and compares those two elements inside the block with our \u003ccode\u003eif\u003c/code\u003e \u0026amp; \u003ccode\u003eelsif\u003c/code\u003e logic:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e are equal, the block will return \u003ccode\u003e0\u003c/code\u003e, and \u003ccode\u003e.sort\u003c/code\u003e will leave them in their current places.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003ea\u003c/code\u003e is less than \u003ccode\u003eb\u003c/code\u003e and belongs before it, the block will return \u003ccode\u003e-1\u003c/code\u003e and \u003ccode\u003e.sort\u003c/code\u003e will once again leave them in their current places (because \u003ccode\u003ea\u003c/code\u003e is already before \u003ccode\u003eb\u003c/code\u003e.)\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eb\u003c/code\u003e and belongs after it, the block will return \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e.sort\u003c/code\u003e will switch the locations of \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e.\u003cbr\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTherefore, when we call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [7, 3, 1, 2, 6, 5]\u003cbr\u003e\u003cbr\u003earray.sort do |a, b|\u003cbr\u003e  if a == b\u003cbr\u003e    0\u003cbr\u003e  elsif a \u0026lt; b\u003cbr\u003e    -1\u003cbr\u003e  elsif a \u0026gt; b\u003cbr\u003e    1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first time through the collection, \u003ccode\u003e.sort\u003c/code\u003e passes \u003ccode\u003e7\u003c/code\u003e and \u003ccode\u003e3\u003c/code\u003e into the block and compares them, since 7 is greater than 3, it switches the location of those two elements. If we were to look at the array after going through just one iteration of \u003ccode\u003e.sort\u003c/code\u003e, it would look like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e[3, 7, 1, 2, 6, 5]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eOn the second pass through the array, \u003ccode\u003e.sort\u003c/code\u003e yields the next two items to the block, in this case \u003ccode\u003e7\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e. It compares them in the same way, makes any necessary changes to the location of the items in the array, and then moves on to the next pair.\u003c/p\u003e\n\n\u003ch2\u003eRuby Abstraction: The Spaceship Operator\u003c/h2\u003e\n\n\u003cp\u003eNow that we have an understanding of how \u003ccode\u003e.sort\u003c/code\u003e works, we can introduce a level of abstraction by using the \"spaceship operator\" (\u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e). The spaceship operator, also called the \u003cstrong\u003ecombined comparison operator\u003c/strong\u003e,\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ereturns \u003ccode\u003e0\u003c/code\u003e if the first operand equals the second,\u003c/li\u003e\n\u003cli\u003ereturns \u003ccode\u003e-1\u003c/code\u003e if the first operand is less than the second, and\u003c/li\u003e\n\u003cli\u003ereturns \u003ccode\u003e1\u003c/code\u003e if the first operand is greater than the second.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo, instead of utilizing \u003ccode\u003eif\u003c/code\u003e \u0026amp; \u003ccode\u003eelsif\u003c/code\u003e logic like we did above, we can simply call \u003ccode\u003e.sort\u003c/code\u003e with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [7, 3, 1, 2, 6, 5]\u003cbr\u003e\u003cbr\u003earray.sort do |a, b|\u003cbr\u003e  a \u0026lt;=\u0026gt; b\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e#  =\u0026gt; [1, 2, 3, 5, 6, 7]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSorting our dinner party menu\u003c/h2\u003e\n\n\u003cp\u003eNow that we understand how strings are compared and how \u003ccode\u003e.sort\u003c/code\u003e works, we're ready to sort our dinner party menu from the earlier example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edishes = [\"steak\", \"apple pie\", \"vegetable soup\"]\u003cbr\u003e\u003cbr\u003edishes.sort do |a, b|\u003cbr\u003e    a \u0026lt;=\u0026gt; b\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e # =\u0026gt; [\"apple pie\", \"steak\", \"vegetable soup\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it—the menu is alphabetized! Now, let's take it a step further.\u003c/p\u003e\n\n\u003ch2\u003eRuby Abstraction: \u003ccode\u003e.sort\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eDrop into IRB and enter the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edishes = [\"steak\", \"apple pie\", \"vegetable soup\"]\u003cbr\u003e\u003cbr\u003edishes.sort\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should return : \u003ccode\u003e[\"apple pie\", \"steak\", \"vegetable soup\"]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSimply calling \u003ccode\u003e.sort\u003c/code\u003e has the desired effect. It implicity executes the code we used in the block in the above example. But now we understand \u003cem\u003ehow\u003c/em\u003e sort works, not just \u003cem\u003ewhat\u003c/em\u003e it does.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eBy default, the \u003ccode\u003e.sort\u003c/code\u003e method is case sensitive. It will prioritize strings that are capitalized.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eThink about customizing a sorting method. Since\u003c/em\u003e \u003ccode\u003e.sort\u003c/code\u003e \u003cem\u003etakes a block, can we tell\u003c/em\u003e \u003ccode\u003e.sort\u003c/code\u003e \u003cem\u003eto sort in reverse alphabetical order? In other words, can we sort a collection of data from greatest to least?\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.dotnetperls.com/sort-ruby\"\u003eDot Net Pearls - Sort Ruby\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://ruby-doc.org/core-2.2.0/Array.html#method-i-sort\"\u003eRuby Docs - Array - sort\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=kPRA0W1kECg\"\u003eWatch sorting happen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.sorting-algorithms.com/\"\u003eCompare different sorting algorithms\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"sorting-arrays"},{"id":203698,"title":"Collections Practice Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"collections_practice\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/collections_practice/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/collections_practice\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/collections_practice/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBecome proficient at manipulating arrays\u003c/li\u003e\n\u003cli\u003ePractice using higher level Ruby enumerators like \u003ccode\u003e.collect\u003c/code\u003e and \u003ccode\u003e.sort\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe goal of this lab is to become proficient at manipulating arrays.  Try experimenting with the built in Ruby methods as well as implementing your own logic to solve these.  Write methods that solve each of the rspec tests.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 1: \u003ccode\u003e#sort_array_asc\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esort_array_asc\u003c/code\u003e that takes in an array of integers and returns a copy of the array with the integers in ascending order.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 2: \u003ccode\u003e#sort_array_desc\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esort_array_desc\u003c/code\u003e that takes in an array of integers and returns a copy of the array with the integers in descending order. Remember that \u003ccode\u003e.sort\u003c/code\u003e takes a block in which you can specify how you want your array sorted.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 3: \u003ccode\u003e#sort_array_char_count\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esort_array_char_count\u003c/code\u003e that takes in an array of strings and returns a copy of the array with the strings ordered in ascending order by length. Remember that \u003ccode\u003e.sort\u003c/code\u003e takes a block in which you can specify how you want your array sorted.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 4: \u003ccode\u003e#swap_elements\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003eswap_elements\u003c/code\u003e that takes in an array and swaps the second and third elements. Remember that array indices start at \u003ccode\u003e0\u003c/code\u003e, so the second element has an index of \u003ccode\u003e1\u003c/code\u003e and the third element has an index of \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eTry building a method\u003c/em\u003e \u003ccode\u003eswap_elements_from_to\u003c/code\u003e \u003cem\u003ethat takes in three arguments,\u003c/em\u003e \u003ccode\u003earray, index, destination_index\u003c/code\u003e\u003cem\u003e, that will allow you to specify the index of the element you would like to move to a new index. So:\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eswap_elements_from_to([\"a\", \"b\", \"c\"],0,2) #=\u0026gt; [\"c\", \"b\", \"a\"]\u003cbr\u003eswap_elements_from_to([\"a\", \"b\", \"c\"],2,1) #=\u0026gt; [\"a\", \"c\", \"b\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced #2:\u003c/strong\u003e \u003cem\u003eTry writing test coverage for it!\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eQuestion 5: \u003ccode\u003e#reverse_array\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003ereverse_array\u003c/code\u003e that takes in an array of integers and returns a copy of the array with the elements in reverse order.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 6: \u003ccode\u003e#kesha_maker\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method called \u003ccode\u003ekesha_maker\u003c/code\u003e that takes in an array of strings and replaces the third character in each string with a \u003ccode\u003e$\u003c/code\u003e (\"dollar sign\")—Ke$ha style. Use the \u003ccode\u003e.each\u003c/code\u003e method to iterate and build a new array to return at the end of your method, just like we did in the \"My Each\" lab.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 7: \u003ccode\u003e#find_a\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003efind_a\u003c/code\u003e that returns all the strings in the array passed to it that \u003ccode\u003estart_with?\u003c/code\u003e (\u003cstrong\u003ehint\u003c/strong\u003e) the letter \u003ccode\u003e\"a\"\u003c/code\u003e. You'll want to use a high level iterator for this that finds, selects, or detects elements based on a condition.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 8: \u003ccode\u003e#sum_array\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esum_array\u003c/code\u003e that adds together all of the integers in the array and returns their sum.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eTry using the\u003c/em\u003e \u003ccode\u003e.inject\u003c/code\u003e \u003cem\u003emethod here.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eQuestion 9: \u003ccode\u003e#add_s\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method that adds an \u003ccode\u003e\"s\"\u003c/code\u003e to each word in the array except for the second element in the array (\"feet\" is already plural).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eIterators in Ruby are chainable, see if you can use\u003c/em\u003e \u003ccode\u003e.each_with_index\u003c/code\u003e \u003cem\u003ein addition to\u003c/em\u003e \u003ccode\u003e.collect\u003c/code\u003e \u003cem\u003eto solve this one in an elegant way. What happens if you write:\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2].each_with_index.collect{|element, index| }\n\u003c/code\u003e\u003c/pre\u003e","exportId":"g83ef469c171c7ef08629316298118934"}]},{"id":21885,"name":"Procedural Ruby: Hashes","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g7fa504253dd9691f592c93a442bded79","items":[{"id":203699,"title":"Introduction to Hashes","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-introduction-to-hashes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-introduction-to-hashes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-introduction-to-hashes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-introduction-to-hashes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a Ruby hash\u003c/li\u003e\n\u003cli\u003eDefine hash keys\u003c/li\u003e\n\u003cli\u003eDefine hash values\u003c/li\u003e\n\u003cli\u003eCreate a Hash using its implicit (\"Hash-Literal\") form\u003c/li\u003e\n\u003cli\u003eCreate a Hash with \u003ccode\u003eHash.new\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eUp until this point, we've stored our data in a list form using arrays. An\narray is like a numbered list. It stores a group of items which are accessible\nvia their location, or index number, in the list. A \u003ccode\u003eHash\u003c/code\u003e, in comparison, is a\n\"lookup table\" like a dictionary.\u003c/p\u003e\n\n\u003cp\u003eImagine a grocery list: you need to go to the store and buy milk, eggs and\nbread. You could store your list like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries = [\"milk\", \"eggs\", \"bread\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut now let's say we wanted to \"look up\" the prices of these items. We could\nwrite:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprices = [3.00, 2.15, 2.35] # milk, eggs, bread prices\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut wait, why not write this as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprices = [2.35, 3.00, 2.15]  # bread, milk, eggs prices\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWell, that's perfectly \u003cem\u003elegal\u003c/em\u003e as well to Ruby. But what we want is a way to\nassociate the word \u003ccode\u003e\"milk\"\u003c/code\u003e to the price \u003ccode\u003e3.00\u003c/code\u003e. A code comment isn't a strong\nenough bond between the \u003ccode\u003eString\u003c/code\u003e (grocery item) and the \u003ccode\u003eFloat\u003c/code\u003e (price). When\nyou need to associate a value with a lookup \"\u003cem\u003ekey\u003c/em\u003e\", you want a \u003ccode\u003eHash\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHashes allow us to store named, or associated, data. Think of a dictionary or\nan address book. This allows us to store more complex collections of\ninformation than the arrays we've seen so far. With a hash, we can associate\nitem names to prices.\u003c/p\u003e\n\n\u003ch2\u003eDefine a Ruby Hash\u003c/h2\u003e\n\n\u003cp\u003eA \u003cem\u003ehash\u003c/em\u003e is a collection of data that is separated into pairs of keys and\nvalues. Each key/value pair makes up one unit in the hash. The entire collection\nof key/value pairs, which are comma separated, is enclosed in curly braces \u003ccode\u003e{}\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"key\" =\u0026gt; \"value\", \"another_key\" =\u0026gt; \"another value\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, the \u003ccode\u003eString\u003c/code\u003e \u003ccode\u003e\"key\"\u003c/code\u003e is the key to the value \u003ccode\u003e\"value\"\u003c/code\u003e. The\nkey \u003ccode\u003e\"another_key\"\u003c/code\u003e is used to \"point to\" the \u003ccode\u003eString\u003c/code\u003e value, \u003ccode\u003e\"another_value\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cimg width=\"500\" alt=\"Hash structure with key and value labeled\" src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/introduction-to-hashes/Image_14_HashStructure.png\"\u003e \n\u003c/p\u003e\n\n\u003cp\u003eAs with Arrays, you can use white space to make it more friendly for humans to\nread:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"key\" =\u0026gt; \"value\",\u003cbr\u003e  \"another_key\" =\u0026gt; \"another value\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember just a moment ago we were asking how to associate a grocery item to a\nprice? Here's how a \u003ccode\u003eHash\u003c/code\u003e allows us to do that:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprices = {\u003cbr\u003e\"bread\" =\u0026gt; 2.35,\u003cbr\u003e\"milk\" =\u0026gt;  3.00,\u003cbr\u003e\"eggs\" =\u0026gt;  2.15\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe relationship between a \u003cem\u003ekey\u003c/em\u003e (or lookup name) and its associated value is\nindicated by using the \u003ccode\u003e=\u0026gt;\u003c/code\u003e symbol (sometimes lovingly referred to as a\n\"hash-rocket\").\u003c/p\u003e\n\n\u003ch2\u003eDefine Hash Keys\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003eKeys\u003c/em\u003e are the things we \"look up\" with. In our grocery prices example, the\nkeys are the \u003ccode\u003eString\u003c/code\u003es \u003ccode\u003e\"bread\"\u003c/code\u003e, \u003ccode\u003e\"milk\"\u003c/code\u003e, and \u003ccode\u003e\"eggs\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eHash\u003c/code\u003e keys can be any type of data but most of the time we use\n\u003ca href=\"https://ruby-doc.org/core-2.5.0/String.html\"\u003eStrings\u003c/a\u003e (as seen in the grocery/prices example) or\n\u003ca href=\"https://ruby-doc.org/core-2.5.0/Symbol.html\"\u003eSymbols\u003c/a\u003e like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{:name =\u0026gt; \"John Henry\", :occupation =\u0026gt; \"Steel-driving man\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSomewhat confusingly, Ruby has \u003cstrong\u003eanother\u003c/strong\u003e syntax for writing \u003ccode\u003eHash\u003c/code\u003ees that\nhave a \u003ccode\u003eSymbol\u003c/code\u003e as key. We call \u003ccode\u003eHash\u003c/code\u003ees defined this way \"JSON (pronounced\n'Jay-Sawn') \u003ccode\u003eHash\u003c/code\u003ees.\"\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{name: \"John Henry\", occupation: \"Steel-driving Man\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou'll definitely see both when you do research online, so you need to\nrecognize both.  Ruby gained \"JSON Hashes\" in order to increase its ability to\nshare data with JavaScript (the JS in JSON stands for JavaScript). It's a great\nidea, but (sorry!) it's a little confusing when you're starting out.\u003c/p\u003e\n\n\u003cp\u003eMost of the time, for keys, Rubyists prefer \u003ca href=\"https://ruby-doc.org/core-2.5.0/Symbol.html\"\u003eSymbols\u003c/a\u003e (there are\nperformance reasons that we'll cover elsewhere).\u003c/p\u003e\n\n\u003cp\u003eFor comparison, here's the same hash written using \u003ccode\u003eString\u003c/code\u003es as the key:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"name\" =\u0026gt; \"John Henry\", \"occupation\" =\u0026gt; \"Steel-driving man\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eDefine Hash Values\u003c/h2\u003e\n\n\u003cp\u003eHash values are the bits of data that are returned when we give a \u003ccode\u003eHash\u003c/code\u003e a\n\u003cem\u003ekey\u003c/em\u003e to use to do a look up. The values in the grocery / prices example are:\n\u003ccode\u003e2.35\u003c/code\u003e, \u003ccode\u003e3.00\u003c/code\u003e, and \u003ccode\u003e2.15\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eKeys\u003c/em\u003e are the things we look up by, in our grocery example these are the\n\u003ccode\u003eString\u003c/code\u003es \u003ccode\u003e\"bread\"\u003c/code\u003e, \u003ccode\u003e\"milk\"\u003c/code\u003e, and \u003ccode\u003e\"eggs\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHash values don't need to contain values of all the same type. You can have\n\u003ccode\u003eString\u003c/code\u003es, other scalar data, or even other \u003ccode\u003eArray\u003c/code\u003es or \u003ccode\u003eHash\u003c/code\u003ees!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{:item =\u0026gt; \"banana\", :price =\u0026gt; 0.89, :quantity =\u0026gt; 6, :description =\u0026gt; \"a delicious fruit\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCreate a Hash using its implicit (\"Hash-Literal\") form\u003c/h2\u003e\n\n\u003cp\u003eThe easiest way to create a \u003ccode\u003eHash\u003c/code\u003e is to write it out as we've seen in the\nexamples so far.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew_hash = {\u003cbr\u003e  :created =\u0026gt; Time.now,\u003cbr\u003e  :message =\u0026gt; \"Hello world!\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:created=\u0026gt;2019-04-10 14:05:33 -0400, :message=\u0026gt;\"Hello world!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is what is referred to as the \u003cem\u003eimplicit\u003c/em\u003e or \"\u003ccode\u003eHash\u003c/code\u003e literal\" form. When\nassigning a variable, Ruby will interpret the curly braces on the left hand\nside as a Hash.\u003c/p\u003e\n\n\u003cp\u003eOnce created, we can access this \u003ccode\u003eHash\u003c/code\u003e with our \u003ccode\u003enew_hash\u003c/code\u003e variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew_hash = {\u003cbr\u003e  :created =\u0026gt; Time.now,\u003cbr\u003e  :message =\u0026gt; \"Hello world!\"\u003cbr\u003e}\u003cbr\u003enew_hash\u003cbr\u003e#=\u0026gt; {:created=\u0026gt;2019-04-10 13:42:27 -0400, :message=\u0026gt;\"Hello world!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eMASTER YOUR LEARNING\u003c/strong\u003e: Try writing the sample we just showed you in the\nJSON Hash Style in IRB.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eCreate a Hash with \u003ccode\u003eHash.new\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAlternatively, we can use \u003ccode\u003eHash.new\u003c/code\u003e to create a new hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esecond_new_hash = Hash.new\u003cbr\u003e#=\u0026gt; {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the same as writing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esecond_new_hash = {}\u003cbr\u003e#=\u0026gt; {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe're just getting started with hashes, but hopefully, you can already see why\nthey might be useful. With hashes, we can use hash keys as a way of \u003cem\u003enaming\u003c/em\u003e\nindividual pieces of data. Including multiple key/value pairs allows us to\n\u003cem\u003eassociate\u003c/em\u003e different bits of data, bundling them all up into one object.\u003c/p\u003e\n\n\u003cp\u003eNow that we can create hashes and store data as key/value pairs, in the next\nlesson, we'll look at how we can access, update, and even delete those \"pairs.\"\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/embed/0JSsFQGYaeA\"\u003eIntro to Hashes Video\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/core-2.5.0/Hash.html\"\u003eRuby Hash Class\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"introduction-to-hashes"},{"id":203700,"title":"Reading Values from Hashes","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-reading-values-from-hashes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-reading-values-from-hashes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-reading-values-from-hashes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-reading-values-from-hashes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRetrieve data from hashes\u003c/li\u003e\n\u003cli\u003eHandle a \u003ccode\u003enil\u003c/code\u003e response when no key is found\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we're going to look at how we get values from a hash using\nits keys. If an array is a \u003cstrong\u003elist\u003c/strong\u003e in which we access index items by\ntheir number, a hash is a \u003cstrong\u003edictionary\u003c/strong\u003e in which we access values by their key.\u003c/p\u003e\n\n\u003ch2\u003eRetrieving Data from Hashes\u003c/h2\u003e\n\n\u003cp\u003eRetrieving data from a hash is similar to retrieving data from an array, but\ninstead of giving an array the index number in brackets \u003ccode\u003e[i]\u003c/code\u003e we give a hash the\nname of the key \u003ccode\u003e[key]\u003c/code\u003e. The Hash will return the value associated with the\n\u003cem\u003ekey\u003c/em\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epets = {\"cat\" =\u0026gt; \"Maru\", \"dog\" =\u0026gt; \"Pluto\"}\u003cbr\u003e#=\u0026gt; {\"cat\"=\u0026gt;\"Maru\", \"dog\"=\u0026gt;\"Pluto\"}\u003cbr\u003e\u003cbr\u003epets[\"cat\"]\u003cbr\u003e#=\u0026gt; \"Maru\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003e[]\u003c/code\u003e is referred to as \u003cstrong\u003e\"bracket notation\".\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eKeep in mind, \u003cem\u003ekeys\u003c/em\u003e can be \u003ccode\u003eSymbol\u003c/code\u003es instead of \u003ccode\u003eString\u003c/code\u003es. The \u003ccode\u003eHash\u003c/code\u003e lookup works\njust the same:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emeals = {:breakfast =\u0026gt; \"cereal\", :lunch =\u0026gt; \"peanut butter and jelly sandwich\", :dinner =\u0026gt; \"mushroom risotto\"}\u003cbr\u003e#=\u0026gt; {:breakfast=\u0026gt;\"cereal\", :lunch=\u0026gt;\"peanut butter and jelly sandwich\", :dinner=\u0026gt;\"mushroom risotto\"}\u003cbr\u003e\u003cbr\u003emeals[:breakfast]\u003cbr\u003e#=\u0026gt; \"cereal\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt will \u003cem\u003ealso\u003c/em\u003e work if we use \u003ccode\u003eInteger\u003c/code\u003es for keys. It is important to\nremember that when using the bracket method on a hash, Ruby is not looking for\nthe index like it would in an array. Instead, Ruby is looking for the key that\nmatches whatever is inside the brackets and returns the associated value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehealthy_things = {1 =\u0026gt; \"learn to garden\", 2 =\u0026gt; \"plant seeds\", 10 =\u0026gt; \"eat vegetables\"}\u003cbr\u003e\u003cbr\u003ehealthy_things[10]\u003cbr\u003e#=\u0026gt; \"eat vegetables\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also use variables inside the brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekey = :name\u003cbr\u003e#=\u0026gt; :name\u003cbr\u003e\u003cbr\u003euser_info = {:name =\u0026gt; \"Ada\", :email =\u0026gt; \"ada.lovelace@famous_computer_inventors.com\"}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Ada\", :email=\u0026gt;\"ada.lovelace@famous_computer_inventors.com\"}\u003cbr\u003e\u003cbr\u003euser_info[key]\u003cbr\u003e#=\u0026gt; \"Ada\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eHandle a \u003ccode\u003enil\u003c/code\u003e Response When No Key Is Found\u003c/h2\u003e\n\n\u003cp\u003eIf we use the bracket notation and pass in a value that does not match a key on\nthe hash, Ruby will return \u003ccode\u003enil\u003c/code\u003e by default:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egrocery_items = {:apples =\u0026gt; 10, :pears =\u0026gt; 4, :peaches =\u0026gt; 2, :plums =\u0026gt; 13}\u003cbr\u003e#=\u0026gt; {:apples=\u0026gt;10, :pears=\u0026gt;4, :peaches=\u0026gt;2, :plums=\u0026gt;13}\u003cbr\u003e\u003cbr\u003egrocery_items[:rambutans]\u003cbr\u003e#=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis turns out to be very useful. Remember that in Ruby, \u003ccode\u003enil\u003c/code\u003e is \u003cem\u003efalsy\u003c/em\u003e while\n\u003cstrong\u003eany data type value\u003c/strong\u003e is \u003cem\u003etruthy\u003c/em\u003e (even empty arrays and hashes). This\nbehavior allows us to easily check if a hash has a key/value pair or not as we\ncan use the bracket method in a conditional statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egrocery_items = {:apples =\u0026gt; 10, :pears =\u0026gt; 4, :peaches =\u0026gt; 2, :plums =\u0026gt; 13}\u003cbr\u003e#=\u0026gt; {:apples=\u0026gt;10, :pears=\u0026gt;4, :peaches=\u0026gt;2, :plums=\u0026gt;13}\u003cbr\u003e\u003cbr\u003eif grocery_items[:rambutan]\u003cbr\u003e  puts \"Rambutan present!\"\u003cbr\u003eelse\u003cbr\u003e  puts \"No rambutan.\"\u003cbr\u003eend\u003cbr\u003e# No rambutan.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSTRETCH\u003c/strong\u003e: Look at the documentation for the \u003ccode\u003eHash\u003c/code\u003e class. See if you\ncan find a method that will look up a \u003cem\u003ekey\u003c/em\u003e and will let you specify\nwhat to return if the \u003cem\u003ekey\u003c/em\u003e is not found! The default data types of\nRuby have POWERFUL magic inside of them that's yours to discover. As a hint\nit's a method that a dog might know to respond to :)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eGiven a hash and its keys, we can retrieve all the values present in that hash.\nWe are now able to create hashes as a way to store associated data and can use\nthe bracket method to retrieve that stored data as needed.\u003c/p\u003e","exportId":"reading-values-from-hashes"},{"id":203701,"title":"Using Symbols for Hash Keys","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-using-symbols-for-hash-keys\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-using-symbols-for-hash-keys/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-using-symbols-for-hash-keys\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-using-symbols-for-hash-keys/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eReview the \u003ccode\u003eSymbol\u003c/code\u003e data type\u003c/li\u003e\n\u003cli\u003eRecognize the immutability of symbols\u003c/li\u003e\n\u003cli\u003eCompare the use of symbols and strings as hash keys\u003c/li\u003e\n\u003cli\u003eRecognize Ruby's alternate syntax for hashes with symbols for keys\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe saw that hashes are data structures comprised of key/value pairs. We also saw\nthat we can create hashes simply by writing out key/value pairs wrapped in curly\nbraces:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog_one = {\u003cbr\u003e  :name =\u0026gt; \"Luca\",\u003cbr\u003e  :breed =\u0026gt; \"German Shepherd\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Luca\", :breed=\u0026gt;\"German Shepherd\"}\u003cbr\u003e\u003cbr\u003edog_two = {\u003cbr\u003e  :name =\u0026gt; \"Lola\",\u003cbr\u003e  :breed =\u0026gt; \"Giant Schnauzer\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Lola\", :breed=\u0026gt;\"Giant Schnauzer\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the previous lessons, we mentioned that hash keys can be any data type. You\nalso may have noticed, though, that we quickly switched to using\n\u003ca href=\"https://ruby-doc.org/core-2.6.3/Symbol.html\"\u003e\u003cem\u003esymbols\u003c/em\u003e\u003c/a\u003e for our keys in most of the examples. There is a particular\nreason for this.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we're going to discuss symbols and why they are ideal to use as\nkeys in our hashes. They are so frequently preferred, in fact, that Ruby has an\nalternative syntax for writing hashes with symbols for keys.\u003c/p\u003e\n\n\u003ch2\u003eUsing Symbols for Hash Keys\u003c/h2\u003e\n\n\u003cp\u003eJust to quickly review, \u003ca href=\"https://ruby-doc.org/core-2.6.3/Symbol.html\"\u003esymbols\u003c/a\u003e are a scalar data type. They share some\nsimilarities with strings, but instead of being wrapped in quotations, symbols\nalways start with a colon (\u003ccode\u003e:\u003c/code\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e:i_am_a_symbol\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEvery piece of data, including the symbol above, takes up a small amount of\nmemory on the computer. When we write out a symbol like \u003ccode\u003e:i_am_a_symbol\u003c/code\u003e, Ruby\nallocates some memory to that piece of data. If we write out \u003ccode\u003e:i_am_a_symbol\u003c/code\u003e\nagain somewhere else, Ruby will refer back to that \u003cem\u003esame allocation in memory\u003c/em\u003e.\nWe can actually see this by using a method built in to all core data types\ncalled \u003ccode\u003eobject_id\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e:i_am_a_symbol.object_id\u003cbr\u003e#=\u0026gt; 1525788\u003cbr\u003e:i_am_a_symbol.object_id\u003cbr\u003e#=\u0026gt; 1525788\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEvery time we call \u003ccode\u003e:i_am_a_symbol.object_id\u003c/code\u003e we will get the same integer back.\nThis integer is Ruby's representation of the location in memory where\n\u003ccode\u003e:i_am_a_symbol\u003c/code\u003e is stored.\u003c/p\u003e\n\n\u003cp\u003eWhat happens, though, when we do the same with a string?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"I am a string\".object_id\u003cbr\u003e#=\u0026gt; 70298611796560\u003cbr\u003e\"I am a string\".object_id\u003cbr\u003e#=\u0026gt; 70298611847740\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDifferent integers are returned. Although these strings are identical when\nwritten, \u003cstrong\u003ethey take up separate allocations of memory\u003c/strong\u003e. Every string we write\nis given a \u003cstrong\u003enew\u003c/strong\u003e allocation. This is because string data can change and Ruby\nneeds to take this into account.\u003c/p\u003e\n\n\u003cp\u003eSymbols, unlike strings, \u003cstrong\u003ecannot be changed\u003c/strong\u003e. That is to say, symbols are\n\u003ca href=\"https://en.wikipedia.org/wiki/Immutable_object\"\u003e\u003cem\u003eimmutable\u003c/em\u003e\u003c/a\u003e. They are \u003cem\u003eunique\u003c/em\u003e in Ruby's eyes, and once created,\nalways refer to the same point in memory. This works well for hash keys. Once a\nkey/value pair is defined in a hash, we might change the \u003cem\u003evalue\u003c/em\u003e of the pair,\nbut we will likely never need to change the \u003cem\u003ekey\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's look back at the first example in this lesson:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog_one = {\u003cbr\u003e  :name =\u0026gt; \"Luca\",\u003cbr\u003e  :breed =\u0026gt; \"German Shepherd\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Luca\", :breed=\u0026gt;\"German Shepherd\"}\u003cbr\u003e\u003cbr\u003edog_two = {\u003cbr\u003e  :name =\u0026gt; \"Lola\",\u003cbr\u003e  :breed =\u0026gt; \"Giant Schnauzer\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Lola\", :breed=\u0026gt;\"Giant Schnauzer\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe symbols \u003ccode\u003e:name\u003c/code\u003e and \u003ccode\u003e:breed\u003c/code\u003e are used multiple times in separate hashes, but\nrefer to the \u003cstrong\u003esame allocation in memory\u003c/strong\u003e. As we'll see soon, we sometimes deal\nwith many, many hashes, all with the same keys pointing to different values. If\nwe use strings, in this case, we would create many, many allocations of\nmemory. By using \u003cem\u003esymbols\u003c/em\u003e for our keys, we only use one! For this reason,\nsymbols are almost always the best choice for keys when creating hashes.\u003c/p\u003e\n\n\u003ch2\u003eUsing the Alternate Hash Syntax\u003c/h2\u003e\n\n\u003cp\u003eWhen using symbols for keys, we have the option of using an alternative syntax\nwhen defining a hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog_one = {\u003cbr\u003e  name: \"Luca\",\u003cbr\u003e  breed: \"German Shepherd\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Luca\", :breed=\u0026gt;\"German Shepherd\"}\u003cbr\u003e\u003cbr\u003edog_two = {\u003cbr\u003e  name: \"Lola\",\u003cbr\u003e  breed: \"Giant Schnauzer\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Lola\", :breed=\u0026gt;\"Giant Schnauzer\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA few things have changed. For starters, the symbols \u003ccode\u003e:name\u003c/code\u003e and \u003ccode\u003e:breed\u003c/code\u003e no\nlonger have a colon before them. Instead, they have a colon immediately \u003cem\u003eafter\u003c/em\u003e,\nin place of the hash-rocket.\u003c/p\u003e\n\n\u003cp\u003eThis syntax only works for keys that are symbols but is similar in syntax to\nhow other languages like JavaScript write their key/value pairs.\u003c/p\u003e\n\n\u003cp\u003eWhen displaying a hash, Ruby will still display the old hash-rocket format.\u003c/p\u003e\n\n\u003cp\u003eYou might be wondering, why does this even exist? With the rise in popularity\nof JavaScript, full-stack developers got used to writing the following in\nJavaScript (what JavaScript developers call \"JSON,\" pronounced like \"Jay-sawn\"):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog_two = {\u003cbr\u003e  name: \"Lola\",\u003cbr\u003e  breed: \"Giant Schnauzer\"\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYep, that's valid JavaScript \u003cstrong\u003eand\u003c/strong\u003e valid Ruby! In recent times, when defining\na Hash, it has become more common to use this \"alternate\" format. You'll\ndefinitely see a lot of the old \"hash-rocket\" syntax. Neither is better or\nworse. They're just different ways of expressing the idea of key/value pairs\nwithin a collection.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSymbols are a great choice to use for keys when constructing hashes. Although\nkeys can be made from whatever data type we feel is best, symbols come with\nsome advantages. No matter how many times a symbol is written in your code, Ruby\nwill consider it to be the same thing, allocating just one location in memory\nfor the symbol.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://ruby-doc.org/core-2.6.3/Symbol.html\"\u003eSymbols\u003c/a\u003e\u003c/p\u003e","exportId":"using-symbols-for-hash-keys"},{"id":203702,"title":"Hash Iteration","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-creating-and-updating-hash-key-value-pairs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-creating-and-updating-hash-key-value-pairs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-creating-and-updating-hash-key-value-pairs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-creating-and-updating-hash-key-value-pairs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUpdate hash values\u003c/li\u003e\n\u003cli\u003eAdd keys and values to a hash\u003c/li\u003e\n\u003cli\u003eFind or create a hash value\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhile we're now able to read hash values using keys, currently, when we create\na hash, we're stuck with whatever data was entered in when the hash was created:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson = {\u003cbr\u003e  name: \"Sam\",\u003cbr\u003e  age: 31\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Sam\", :age=\u0026gt;31}\u003cbr\u003e\u003cbr\u003eperson[:age]\u003cbr\u003e#=\u0026gt; 31\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this lesson, we're going to look at modifying and adding data to existing\nhashes. This way, we can create a hash then update it as we need, letting us\nmaintain associations between pieces of data, even if the pieces themselves are\naltered.\u003c/p\u003e\n\n\u003ch2\u003eUpdate Hash Values\u003c/h2\u003e\n\n\u003cp\u003eUpdating hash values is very similar to looking them up. For updating, we use\nthe \u003cstrong\u003ebracket-equals\u003c/strong\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson = {\u003cbr\u003e  name: \"Sam\",\u003cbr\u003e  age: 31\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Sam\", :age=\u0026gt;31}\u003cbr\u003e\u003cbr\u003eperson[:age]\u003cbr\u003e#=\u0026gt; 31\u003cbr\u003e\u003cbr\u003eperson[:age] = 32\u003cbr\u003e#=\u0026gt; 32\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we look back at the entire hash, we see that the value associated with the\n\u003ccode\u003e:age\u003c/code\u003e key has changed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Sam\", :age=\u0026gt;32}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing the bracket-equals method, we can mutate any value stored inside a hash.\nAll we need to know is the associated key.\u003c/p\u003e\n\n\u003ch2\u003eAdd Keys and Values to a Hash\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we saw that using the bracket method and passing in an\ninvalid key returns \u003ccode\u003enil\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson[:hometown]\u003cbr\u003e#=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, what happens when we use an invalid key with the bracket-equals method? When\nRuby discovers that the key is not present on the hash in question, Ruby will\nsimply \u003cem\u003ecreate\u003c/em\u003e a key/value pair on the hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson = {\u003cbr\u003e  name: \"Sam\",\u003cbr\u003e  age: 31\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e# No :hometown key found\u003cbr\u003eperson[:hometown]\u003cbr\u003e#=\u0026gt; nil\u003cbr\u003e\u003cbr\u003e# Because :hometown was not present, Ruby creates the key value pair here\u003cbr\u003eperson[:hometown] = \"Brooklyn, NY\"\u003cbr\u003e#=\u0026gt; \"Brooklyn, NY\"\u003cbr\u003e\u003cbr\u003e# Now, the :hometown key refers to \"Brooklyn, NY\" when used in the brack method\u003cbr\u003eperson[:hometown]\u003cbr\u003e#=\u0026gt; \"Brooklyn, NY\"\u003cbr\u003e\u003cbr\u003e# Our original hash is also mutated\u003cbr\u003eperson\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Sam\", :age=\u0026gt;31, :hometown=\u0026gt;\"Brooklyn, NY\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe general syntax for adding a new value to a hash is:\n\u003ccode\u003ehash[:new_key] = \"New Value\"\u003c/code\u003e. \u003ccode\u003e:new_key\u003c/code\u003e is the literal new key we added to\nthe hash and we assigned the \u003ccode\u003e:new_key\u003c/code\u003e a value of \u003ccode\u003e\"New Value\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eFind or Create a Hash Value\u003c/h2\u003e\n\n\u003cp\u003eWe saw in the last lesson that the bracket method can be used in conditional\nstatements. One common use case of this is having to either find a value or \n\u003cem\u003ecreate\u003c/em\u003e that value. Let's consider what is involved.\u003c/p\u003e\n\n\u003cp\u003eFirst, let's take an example hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest = {\u003cbr\u003e  \"whale bone corset\" =\u0026gt; 5,\u003cbr\u003e  \"porcelain vase\" =\u0026gt; 2,\u003cbr\u003e  \"oil painting\" =\u0026gt; 3,\u003cbr\u003e  \"silverware\" =\u0026gt; 34,\u003cbr\u003e  \"loom\" =\u0026gt; 1\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eImagine the above hash is a manifest for products being shipped, with their\nvalues representing quantity, and our job is to keep a tally as more products\nare counted. A fourth oil painting shows up and we need to add it to the list.\nEasy enough. The hash is small enough that we could just write the following and\nbe done:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest[\"oil painting\"] = 4\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThree paintings previously accounted for, plus one new painting. However, we can\nbe a bit more abstract than that. Is there a way we can quickly increment an\ninteger without having to explicitly know the previous value? Well, we could do\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest[\"oil painting\"] = shipping_manifest[\"oil painting\"] + 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow \u003ccode\u003eshipping_manifest[\"oil painting\"]\u003c/code\u003e will be assigned to whatever it was\npreviously, \u003cem\u003eplus one\u003c/em\u003e. If you recall from the looping lessons in Programming as\nConversation, there is an even shorter way to express this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest[\"oil painting\"] += 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! But wait.. what happens when a \u003cem\u003enew\u003c/em\u003e item is introduced. Say we need to\nship one top hat, which isn't present in the shipping_manifest yet.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest[\"top hat\"] += 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you plug the \u003ccode\u003eshipping_manifest\u003c/code\u003e hash into IRB and try the code snippet above,\nyou'll receive an error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNoMethodError (undefined method `+' for nil:NilClass)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat is happening here is that Ruby can't find \u003ccode\u003eshipping_manifest[\"top hat\"]\u003c/code\u003e.\nBecause of this, it returns \u003ccode\u003enil\u003c/code\u003e. As we know, Ruby doesn't like to combine data\ntypes when it comes to operators. We are effectively writing \u003ccode\u003enil = nil + 1\u003c/code\u003e,\nwhich doesn't make any sense.\u003c/p\u003e\n\n\u003cp\u003eWe can prevent this error from occurring by setting up a conditional and using\nthe bracket method to first look up a key before trying to change it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif shipping_manifest[\"top hat\"]\u003cbr\u003e  shipping_manifest[\"top hat\"] += 1\u003cbr\u003eelse\u003cbr\u003e  puts \"Key not found!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince \u003ccode\u003e\"top hat\"\u003c/code\u003e isn't a key in \u003ccode\u003eshipping_manifest\u003c/code\u003e, the above conditional\nwill \u003ccode\u003eputs\u003c/code\u003e \"Key not found!\" to the terminal rather than cause an error.\u003c/p\u003e\n\n\u003cp\u003eThis still doesn't fully solve the problem. Sure, we can't update something that\nisn't there, but we still want to add a top hat to our shipping manifest.\u003c/p\u003e\n\n\u003cp\u003eInstead of just outputting a message to the terminal, we can handle adding\na key/value pair here.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif shipping_manifest[\"top hat\"]\u003cbr\u003e  shipping_manifest[\"top hat\"] += 1\u003cbr\u003eelse\u003cbr\u003e  shipping_manifest[\"top hat\"] = 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, so reading this in order - if \u003ccode\u003eshipping_manifest[\"top hat\"]\u003c/code\u003e is truthy,\nincrement \u003ccode\u003eshipping_manifest[\"top hat\"]\u003c/code\u003e by one. Else, assign\n\u003ccode\u003eshipping_manifest[\"top hat\"]\u003c/code\u003e to be equal to \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRunning the above conditional once again, the \u003ccode\u003e\"top hat\"\u003c/code\u003e key will\nbe added and set to \u003ccode\u003e1\u003c/code\u003e. Running it again will update \u003ccode\u003e\"top hat\"\u003c/code\u003e to \u003ccode\u003e2\u003c/code\u003e!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSTRETCH\u003c/strong\u003e: If you think that this is a lot of code just to check and test for\n\u003ccode\u003enil\u003c/code\u003e, we agree with you. There's a method on the Hash class that will let you\nlook for a value and set a default if not found.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith the ability to update values and create entirely new key/value pairs, we've\ntackled the core concepts behind Ruby hashes. In the next few lessons, we will\nreinforce these concepts with some lab practice.\u003c/p\u003e","exportId":"hash-iteration"},{"id":203703,"title":"Basic Hashes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-basic-hashes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-basic-hashes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-basic-hashes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-basic-hashes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild simple hashes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIt's time to practice what we've learned about Ruby hashes. In this lab, your\ntask is to implement a set of three methods. Each method will require you to\ncomplete some basic hash creation.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eCode your solutions for the following four methods in the\n\u003ccode\u003elib/intro_to_ruby_hashes_lab.rb\u003c/code\u003e file.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eImplement a method called \u003ccode\u003enew_hash\u003c/code\u003e that creates and returns a new, empty\nhash.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eImplement a method called \u003ccode\u003emy_hash\u003c/code\u003e that returns a valid hash. This hash should\nhave at least one key/value pair of your choice.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eImplement a method called \u003ccode\u003epioneer\u003c/code\u003e that returns a hash. This hash should have a\nkey that is a symbol \u003ccode\u003e:name\u003c/code\u003e and whose value is a string, \u003ccode\u003e'Grace Hopper'\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eImplement a method called \u003ccode\u003eid_hash_generator\u003c/code\u003e that takes in one parameter, an\ninteger. This method should create and return a hash with a key \u003ccode\u003e:id\u003c/code\u003e with\nthe integer as the value.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTry your best to solve these. Use \u003ccode\u003elearn\u003c/code\u003e and follow the test suite messages as\nyou work through your solution and \u003ccode\u003elearn submit\u003c/code\u003e when you're finished with your\nwork. Check out the walkthrough below if you get stuck.\u003c/p\u003e\n\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\n\u003cp\u003eThe four methods we'll be working in are already provided in\n\u003ccode\u003elib/intro_to_ruby_hashes.rb\u003c/code\u003e, so all we need to do is write the implementation\nfor each.\u003c/p\u003e\n\n\u003cp\u003eThe first method, \u003ccode\u003enew_hash\u003c/code\u003e, should return a new, empty hash. The most direct way\nto do this is to write a hash in its implicit form:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef new_hash\u003cbr\u003e  {}\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlternatively, we could explicitly create a new \u003ccode\u003eHash\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef new_hash\u003cbr\u003e  Hash.new\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we don't see this as often.\u003c/p\u003e\n\n\u003cp\u003eWhen first learning to work with hashes, it is common to think we always need to\nassign it to a variable, so your solution might look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef new_hash\u003cbr\u003e  hash = {}\u003cbr\u003e  hash\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr even this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef new_hash\u003cbr\u003e  hash = {}\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile both of these are valid code and return an empty hash, the variable is not\nneeded. All that matters is what gets returned. Because Ruby methods use\nimplicit return, when we create a hash using \u003ccode\u003e{}\u003c/code\u003e, we can return that directly.\u003c/p\u003e\n\n\u003cp\u003eFor the second method, \u003ccode\u003emy_hash\u003c/code\u003e, we will also return a hash. This hash must have some\nkey/value pair included. Your choice.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef my_hash\u003cbr\u003e  { :favorite_color =\u0026gt; \"blue\" }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using symbols for keys, we can write key/value pairs as seen above, or\nwith the alternative syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef my_hash\u003cbr\u003e  { favorite_color: \"blue\" }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor the third method, \u003ccode\u003epioneer\u003c/code\u003e, the task is the same as the previous method.\nExcept this time, the key should be \u003ccode\u003e:name\u003c/code\u003e and the value should be \u003ccode\u003eGrace\nHopper\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef pioneer\u003cbr\u003e  { name: \"Grace Hopper\" }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the final method, \u003ccode\u003eid_hash_generator\u003c/code\u003e, we need to use a parameter. This\nparameter should be assigned to the \u003ccode\u003e:id\u003c/code\u003e key in a hash, and the hash should be\nreturned. Similar to the previous methods, we return a hash, giving it one key.\nThe value will be set to whatever the parameter is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef id_hash_generator(number)\u003cbr\u003e  { id: number }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eHashes are an essential data type that we will use frequently. Now that you've\npracticed the basics of creating hashes, we will practice reading and updating\nthem.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby.about.com/od/rubyfeatures/a/hashes.htm\"\u003eWhat is a Hash in Ruby?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/core-2.5.1/Hash.html\"\u003eRuby Documentation on Hashes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g3004b4a8ad0947bfeb61c43643882ef6"},{"id":203704,"title":"Working with Hashes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-abstracting-work-with-hashes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-abstracting-work-with-hashes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-abstracting-work-with-hashes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-abstracting-work-with-hashes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild simple hashes.\u003c/li\u003e\n\u003cli\u003eAccess and modify data stored in a hash.\u003c/li\u003e\n\u003cli\u003eAdd new data to a hash.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe have created hashes, and now we can move on to practicing reading and updating\nthem. Instead of merely requiring you to access and change hash values, we're\ngoing to incorporate methods to add a bit of abstraction.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e Hashes can be read and updated using brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2.6.1 :001 \u0026gt; my_favorite_stream = { name: 'lofi hip hop radio', location: 'youtube' }\u003cbr\u003e =\u0026gt; {:name=\u0026gt;\"lofi hip hop radio\", :location=\u0026gt;\"youtube\"}\u003cbr\u003e2.6.1 :002 \u0026gt; my_favorite_stream[:name]\u003cbr\u003e =\u0026gt; \"lofi hip hop radio\"\u003cbr\u003e2.6.1 :003 \u0026gt; my_favorite_stream[:name] = \"lofi hip hop radio - beats to relax/study to\"\u003cbr\u003e =\u0026gt; \"lofi hip hop radio - beats to relax/study to\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eCode your solution in the \u003ccode\u003elib/intro_to_ruby_hashes_lab.rb\u003c/code\u003e file located in the main\ndirectory of this lab.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a method called \u003ccode\u003emy_hash_creator\u003c/code\u003e that takes in two parameters. In\nthis method, create and return a hash with one key/value pair, using the first\nparameter as the \u003cem\u003ekey\u003c/em\u003e, and the second parameter as the \u003cem\u003evalue\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :010 \u0026gt; my_hash_creator(:name, \"George\")\u003cbr\u003e    =\u0026gt; {:name=\u0026gt;\"George\"}\u003cbr\u003e   2.6.1 :011 \u0026gt; my_hash_creator(:id, 5)\u003cbr\u003e    =\u0026gt; {:id=\u0026gt;5}\u003cbr\u003e   2.6.1 :012 \u0026gt; my_hash_creator(\"age\", 39)\u003cbr\u003e    =\u0026gt; {\"age\"=\u0026gt;39}\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eCreate a method called \u003ccode\u003eread_from_hash\u003c/code\u003e that takes in two parameters. The first\nparameter is a hash, the second is a key. Used together, they will either\nproduce a value on that hash corresponding to the key, or \u003ccode\u003enil\u003c/code\u003e by default.\nUse these two parameters in conjunction, returning the result.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :013 \u0026gt; hash_to_read = {location: 'New York City', occupation: 'Student'}\u003cbr\u003e    =\u0026gt; {:location=\u0026gt;\"New York City\", :occupation=\u0026gt;\"Cashier\"}\u003cbr\u003e   2.6.1 :014 \u0026gt; read_from_hash(hash_to_read, :location)\u003cbr\u003e    =\u0026gt; \"New York City\"\u003cbr\u003e   2.6.1 :015 \u0026gt; read_from_hash(hash_to_read, :occupation)\u003cbr\u003e    =\u0026gt; \"Student\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eCreate a method called \u003ccode\u003eupdate_counting_hash\u003c/code\u003e that takes in two parameters.\nSimilar to the last method, the first parameter is a hash, and the second is\na key. This time, instead of reading the value, you will need to change it.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe hash provided will have any number of keys, but all values will be\n   integers. The \u003ccode\u003eupdate_counting_hash\u003c/code\u003e method should do one of two things:\n   increment an existing value based on the provided key parameter, or create a\n   new key/value pair using the provided key, setting the value to \u003ccode\u003e1\u003c/code\u003e. So, for\n   example, if we had the following hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :016 \u0026gt; hash_to_change = { apples: 3 }\u003cbr\u003e    =\u0026gt; {:apples=\u0026gt;3}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e..and a provided key, \u003ccode\u003e:apples\u003c/code\u003e, \u003ccode\u003eupdate_counting_hash\u003c/code\u003e should return an updated hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :017 \u0026gt; update_counting_hash(hash_to_change, :apples)\u003cbr\u003e    =\u0026gt; {:apples=\u0026gt;4}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, if the hash was given a key that doesn't exist, like \u003ccode\u003e:oranges\u003c/code\u003e, it\n   should return a hash with that new key set to \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :018 \u0026gt; update_counting_hash(hash_to_change, :oranges)\u003cbr\u003e    =\u0026gt; {:apples=\u0026gt;4, :oranges=\u0026gt;1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTry your best to solve these using \u003ccode\u003elearn\u003c/code\u003e to track your progress. A walkthrough\nis provided below if you get stuck or are curious to learn a bit more.\u003c/p\u003e\n\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\n\u003cp\u003eFor this lab, we're implementing three methods: \u003ccode\u003emy_hash_creator\u003c/code\u003e,\n\u003ccode\u003eread_from_hash\u003c/code\u003e, and \u003ccode\u003eupdate_counting_hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003emy_hash_creator\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor \u003ccode\u003emy_hash_creator\u003c/code\u003e, we need to create a hash using the two parameters\nprovided. We can do this by creating a hash using its implicit form:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef my_hash_creator(key, value)\u003cbr\u003e  { key =\u0026gt; value }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is possible you might have written something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef my_hash_creator(key, value)\u003cbr\u003e  { key: value }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCan you spot the problem with this code? This is the alternate syntax for\n\u003cem\u003esymbols\u003c/em\u003e. We have a \u003cem\u003eparameter\u003c/em\u003e given the name of \u003ccode\u003ekey\u003c/code\u003e, which could be\nwhatever value is passed into the method when called. The code above just\ncreates a symbol, \u003ccode\u003e:key\u003c/code\u003e as the key, regardless of what the \u003ccode\u003ekey\u003c/code\u003e parameter is\nequal to.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eExtra Reading:\u003c/strong\u003e It may seem silly to have a method that creates a hash this\nway. Can't we just build the hash directly? Yes, absolutely. In this example,\nthe resulting hash is small enough that this method would not be useful in a\nreal-world situation. However, this kind of method becomes useful when we want\nto produce many copies of consistently structured hash. For instance, we\nmight want to create a hash of info for every student in a class with the same\nkeys - \u003ccode\u003e:name\u003c/code\u003e, \u003ccode\u003e:age\u003c/code\u003e, \u003ccode\u003e:birthday\u003c/code\u003e, etc... in this case, we could write a\nmethod where we just need to pass in the student's unique info and the method\ntakes care of structuring the data into a hash for us.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\u003ccode\u003eread_from_hash\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor the \u003ccode\u003eread_from_hash\u003c/code\u003e method, we need to use the two parameters, \u003ccode\u003ehash\u003c/code\u003e and\n\u003ccode\u003ekey\u003c/code\u003e to get a value. Like in the example at the beginning of this lesson, we\ncan use brackets to access a particular value from a hash.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef read_from_hash(hash, key)\u003cbr\u003e  hash[key]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the provided key is not found on the hash, \u003ccode\u003enil\u003c/code\u003e is returned.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eExtra Reading:\u003c/strong\u003e Here again, in this particular case, it would be simpler to\nskip the method and just use the hash and key to access a value. A more\nreal-world example: you're working with a hash of weather data that uses\nCelsius, and want to get temperatures in Fahrenheit - you could write a method\nthat reads a value from a hash and returns its converted value without\nmodifying the original hash.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\u003ccode\u003eupdate_counting_hash\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eupdate_counting_hash\u003c/code\u003e method is a bit more complex than the previous two.\nIt needs to take in a hash and a key. If the key is present in the hash, the\nassociated value should be incremented by one. If the key is not present, it\nshould be added to the hash. The newly updated hash should be returned.\u003c/p\u003e\n\n\u003cp\u003eThat this method will do one of two things suggests we will need to use some\nsort of conditional statement dependent on whether or not the key is present on\nthe hash. We can start by writing that out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  if hash[key]\u003cbr\u003e    # the key is present - increment the existing value\u003cbr\u003e  else\u003cbr\u003e    # the key is not present - add the key and assign it the value of 1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the \u003ccode\u003ekey\u003c/code\u003e is present, regardless of its value, we want to add \u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  if hash[key]\u003cbr\u003e    hash[key] = hash[key] + 1  # Alternatively: hash[key] += 1\u003cbr\u003e  else\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf not present, we assign the key:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  if hash[key]\u003cbr\u003e    hash[key] = hash[key] + 1\u003cbr\u003e  else\u003cbr\u003e    hash[key] = 1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, we need to return the updated hash. At the moment, the last line of\ncode executed in this method will either be \u003ccode\u003ehash[key] = hash[key] + 1\u003c/code\u003e or\n\u003ccode\u003ehash[key] = 1\u003c/code\u003e, meaning that the method is implicitly returning whatever one of\nthose lines evaluated to. We add one more line at the end to stop this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  if hash[key]\u003cbr\u003e    hash[key] = hash[key] + 1\u003cbr\u003e  else\u003cbr\u003e    hash[key] = 1\u003cbr\u003e  end\u003cbr\u003e  hash\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could also rewrite this with a ternary:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  hash[key] ? hash[key] += 1 : hash[key] = 1\u003cbr\u003e  hash\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEither is a valid solution.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eHashes are an essential data type that we will use frequently. Now that you've\nseen the basics of creating, reading and updating hashes, we can explore\nsome examples of more complicated structures!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby.about.com/od/rubyfeatures/a/hashes.htm\"\u003eWhat is a Hash in Ruby?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/core-2.5.1/Hash.html\"\u003eRuby Documentation on Hashes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gfa1eb13f7b216ac8b3d3932f3ae83d04"},{"id":203705,"title":"Introduction to Nested Hashes","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-nested-hashes-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how nested hashes can store complex associations of data.\u003c/li\u003e\n\u003cli\u003eDescribe the structure of a nested hash.\u003c/li\u003e\n\u003cli\u003eGive examples of real-world situations that can require nested hashes.\u003c/li\u003e\n\u003cli\u003eRetrieve data from a nested hash.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've seen hashes that store values in associated keys. In the hashes\nwe've built up until now, each key points to a single value. Hashes are very\nuseful, however, because they can be nested within each other. A key in a hash\ncan point to a value that is also a \u003cem\u003ecollection of objects\u003c/em\u003e, i.e. an array or\neven another hash. This is also sometimes referred to as a multidimensional\nhash.\u003c/p\u003e\n\n\u003cp\u003eAs programmers, we strive to write code that models the real world. The programs\nwe write to serve a purpose––whether you're creating a simple command line game or\nan app to help hospitals manage patient data, our code is designed to do a real\njob, like run a game or communicate critical information.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we'll introduce nested, or multidimensional, hashes and explain\nhow they're useful in programming.\u003c/p\u003e\n\n\u003ch2\u003eWhere Will You Find Nested Hashes?\u003c/h2\u003e\n\n\u003cp\u003eNested hashes are a very common way to store and operate on complex associated\ndata in a program. You are likely to encounter them any time you find yourself\nworking with a large collection of information. In particular, you will\nencounter these data structures when working with data you will pull from APIs.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAPI stands for \"Application Programming Interface\" and here refers to the way\nin which organizations, companies, and governments will expose their data to the\npublic for use.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNew York City, for example, has a robust API called NYC Open Data. Developers\ncan connect to this API to find information about city programs, public housing,\nparks, schools, construction, health information––like this collection of\n\u003ca href=\"https://data.cityofnewyork.us/resource/7btz-mnc8.json\"\u003eNYC doctors who participate in project REACH\u003c/a\u003e––you name it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e To view the nested hash data from the NYC Open Data API, linked to\nabove, in an organized and legible way in your browser, use the \u003ca href=\"https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=en-US\"\u003eChrome JSON Viewer extension\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen you send a request for data to such an API, the data you get back from them\nwill be in the form of a nested hash that can contain information about\nthousands of records.\u003c/p\u003e\n\n\u003cp\u003eWe'll learn a lot more about APIs later on in this course. For now, just\nunderstand that nested hashes are a very common occurrence in programming. They\nare used to store complex collections of data and you will encounter them when\nworking with APIs, among other places.\u003c/p\u003e\n\n\u003ch2\u003eNested Hashes Model Real-World Data\u003c/h2\u003e\n\n\u003cp\u003eWe can imagine so many real-world situations and environments in which we are\ndealing with complicated collections of data.\u003c/p\u003e\n\n\u003cp\u003eLet's take, for example, a list of instructors at a school. They can\nbe stored in an array like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstructors = [\"Ian\", \"Johann\", \"Alex\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens when we expand our data collection to include the students as well?\nWe could create yet another array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudents = [\"Andrew\", \"Howard\", \"Terrance\", \"Daniel\", \"Rachel\", \"Natalie\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut both of these groups are part of a larger group, their \u003cem\u003eschool\u003c/em\u003e. We'd like\nto group them together into a collection \u003cem\u003ethat contains both\u003c/em\u003e. But we want to do\nthis in a way that keeps a \"label\" describing each \"sub-collection's\" focus.\nOtherwise, we may accidentally mix up instructors and students!\u003c/p\u003e\n\n\u003cp\u003eHow might we convey that these two arrays are related?\u003c/p\u003e\n\n\u003ch2\u003eOur First Nested Hash\u003c/h2\u003e\n\n\u003cp\u003eWith a nested hash, we can store complex collections of data. In other words, we\ncan store data that is associated with other data via categories and\nsubcategories.\u003c/p\u003e\n\n\u003cp\u003eBoth the \u003ccode\u003estudents\u003c/code\u003e array and the \u003ccode\u003einstructors\u003c/code\u003e array should be associated with\nthe same school. So, we can create a hash, \u003ccode\u003eschool\u003c/code\u003e, that contains keys to\ndenote the \u003ccode\u003einstructors\u003c/code\u003e and \u003ccode\u003estudents\u003c/code\u003e categories. We can point these keys to\nthe arrays that contain our instructors and students respectively.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eschool = {\u003cbr\u003e  instructors: [\"Ian\", \"Johann\", \"Alex\"],\u003cbr\u003e  students: [\"Andrew\", \"Howard\", \"Terrance\", \"Daniel\", \"Rachel\", \"Natalie\"]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, each key in our hash points to a value that is an array.\u003c/p\u003e\n\n\u003cp\u003eNested hashes allow us to further group, or associate, the data we are working\nwith. They help us to deal with situations in which a category or piece of data\nis associated not just to one discrete value, but to a collection of values. In\nsuch a situation, we can create a hash key that points to a value of another\nhash or an array.\u003c/p\u003e\n\n\u003ch2\u003eA Note On Mixing our Collection Types\u003c/h2\u003e\n\n\u003cp\u003eYou may have noticed in the above example that we have a hash in which the value\nof a key is an array.\u003c/p\u003e\n\n\u003cp\u003eUnderstand that arrays and hashes can store \u003cem\u003eany type of data\u003c/em\u003e. In other words,\nthe individual index items of an array can be strings, integers, or even other\narrays and hashes. The same is true of hashes. The values that hash keys point\nto may be strings, integers, and even arrays or hashes.\u003c/p\u003e\n\n\u003cp\u003eIn fact, one of the most common nested data structures you'll see when working\nwith APIs, as discussed above, is an \u003cem\u003earray\u003c/em\u003e of hashes.\u003c/p\u003e\n\n\u003ch2\u003eNesting an Array within a Hash\u003c/h2\u003e\n\n\u003cp\u003eWe'll be building up our own nested hash and operating on such data structures\nin a number of ways over the course of the next few lessons. For now, just read\nthrough the next example and get comfortable looking at a nested hash.\u003c/p\u003e\n\n\u003cp\u003eIn this example, we have a hash, \u003ccode\u003eschool\u003c/code\u003e, which stores some data about\nus. This data is broken down into the categories of \u003ccode\u003e:instructors\u003c/code\u003e, \u003ccode\u003e:students\u003c/code\u003e\nand \u003ccode\u003e:classes\u003c/code\u003e, thanks to our nested hash.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eschool = {\u003cbr\u003e  instructors: [\"Ian\", \"Johann\", \"Alex\"],\u003cbr\u003e  students: [\"Andrew\", \"Howard\", \"Terrance\", \"Daniel\", \"Rachel\", \"Natalie\"],\u003cbr\u003e  classes: [\"Software Engineering\", \"Data Science\"]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above example, each key points to an array of strings. We may not know\nhow to work with nested hashes just yet, but we \u003cem\u003edo\u003c/em\u003e know how to work with\none-dimensional hashes and arrays.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eschool\u003c/code\u003e hash has a key of \u003ccode\u003e:instructors\u003c/code\u003e. The value of that key is an array\nof instructors. In order to access that array, we can use the \u003ccode\u003e[]\u003c/code\u003e method we've\nbeen using all along to grab the values of a particular hash key.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstructors = school[:instructors]\u003cbr\u003e # =\u0026gt; [\"Ian\", \"Johann\", \"Alex\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we set a variable, \u003ccode\u003einstructors\u003c/code\u003e, equal to the return value of calling\n\u003ccode\u003eschool[:instructors]\u003c/code\u003e, which is simply the array of instructors.\u003c/p\u003e\n\n\u003cp\u003eNow, to operate on that collection of instructors, we can simply operate on our\n\u003ccode\u003einstructors\u003c/code\u003e array.\u003c/p\u003e\n\n\u003cp\u003eWhat if I wanted to grab \u003cem\u003ejust the first name\u003c/em\u003e in the instructor's array? We use\nthe same methods for accessing array index items that we've been using all\nalong:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstructors[0]\u003cbr\u003e#  =\u0026gt; \"Ian\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could, alternatively, use more than one set of brackets to find our answer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eschool[:instructors][0]\u003cbr\u003e#  =\u0026gt; \"Ian\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eNesting a Hash within a Hash\u003c/h2\u003e\n\n\u003cp\u003eImagine we're putting together information on various TV show characters, each\nincluding information about a particular TV show character. An individual hash\nfor each character might look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehomer = {name: \"Homer Simpson\", occupation: \"Nuclear Safety Inspector\", hobbies: [\"Watching TV\", \"Eating donuts\"]}\u003cbr\u003ejon = {name: \"Jon Snow\", occupation: \"King in the North\", hobbies: [\"Fighting white walkers\", \"Knowing nothing\"]}\u003cbr\u003efred = {name: \"Mr. Rogers\", occupation: \"Neighbor\", hobbies: [\"Making children feel loved and appreciated\", \"Singing songs\"]}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile each hash is about a different character, they are \u003cem\u003eall\u003c/em\u003e part of a larger\ncollection. We \u003cem\u003ecould\u003c/em\u003e put them in an array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {name: \"Homer Simpson\", occupation: \"Nuclear Safety Inspector\", hobbies: [\"Watching TV\", \"Eating donuts\"]},\u003cbr\u003e  {name: \"Jon Snow\", occupation: \"King in the North\", hobbies: [\"Fighting white walkers\", \"Knowing nothing\"]},\u003cbr\u003e  {name: \"Mr. Rogers\", occupation: \"Neighbor\", hobbies: [\"Making children feel loved and appreciated\", \"Singing songs\"]}\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis seems weird though. There isn't a particular order we need to maintain.\nHaving everything in an array makes it more difficult to find a particular hash,\nsince you will need to know the exact index of that hash to access it. It makes\nmore sense to contain these hashes within another hash.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etv_show_characters = {\u003cbr\u003e  \"Homer Simpson\" =\u0026gt; {name: \"Homer Simpson\", occupation: \"Nuclear Safety Inspector\", hobbies: [\"Watching TV\", \"Eating donuts\"]},\u003cbr\u003e  \"Jon Snow\" =\u0026gt; {name: \"Jon Snow\", occupation: \"King in the North\", hobbies: [\"Fighting white walkers\", \"Knowing nothing\"]},\u003cbr\u003e  \"Mr. Rogers\" =\u0026gt; {name: \"Mr. Rogers\", occupation: \"Neighbor\", hobbies: [\"Making children feel loved and appreciated\", \"Singing songs\"]}\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we've used character names as keys to make it more convenient to access\nour hashes even though this data is already stored in the hashes themselves.\nWith this hash, we can directly look up a particular character's information\njust by using their name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etv_show_characters[\"Homer Simpson\"]\u003cbr\u003e#=\u0026gt; {name: \"Homer Simpson\", occupation: \"Nuclear Safety Inspector\", hobbies: [\"Watching TV\", \"Eating donuts\"]}\u003cbr\u003e\u003cbr\u003etv_show_characters[\"Jon Snow\"][:occupation]\u003cbr\u003e#=\u0026gt; \"King in the North\"\u003cbr\u003e\u003cbr\u003etv_show_characters[\"Mr. Rogers\"][:hobbies][1]\u003cbr\u003e#=\u0026gt; \"Singing songs\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that when accessing nested data, we can use bracket notation multiple\ntimes to go deeper into the data. We can even mix hash keys and array indexes,\nas with \u003ccode\u003etv_show_characters[\"Mr. Rogers\"][:hobbies][1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNested hashes can get pretty complicated. Read through the example in this\nlesson again before moving on. It's okay if you don't understand everything;\njust try to get comfortable reading through the above nested hash.\u003c/p\u003e","exportId":"introduction-to-nested-hashes"},{"id":203706,"title":"Building Nested Hashes Code-Along Part 1","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-building-nested-hashes-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a nested hash.\u003c/li\u003e\n\u003cli\u003eAccess and manipulate data in nested hashes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCode Along Challenge: Epic Tragedy\u003c/h2\u003e\n\n\u003cp\u003eYou're 16 years old and back in high school English class. Luckily for us, our\nteacher is kind of lazy and we get to watch the \u003cem\u003eRomeo and Juliet\u003c/em\u003e movie from\nthe '90s starring Leonardo DiCaprio and Claire Danes.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/RomeoandJuliet5.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBut there's a Romeo and Juliet quiz our teacher has scheduled for us that we\nneed to get ready for. We will definitely be required to answer some questions\non the cast of characters and their attributes and relationships to one another.\nLet's map out that information:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/nested-hashes/Image_7_NestedHash.png\" alt=\"Montague/Capulet Family Tree\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat we have here is a nested data structure. There are different levels or\ntiers of information. On the top tier, we have family names. Beneath that we\nhave key characters, and beneath that we have their attributes. We have an\nadditional layer of the hero/heroine's friends because there are multiple\nfriends. Now that we have a sense of the structure that our collection of\ninformation is taking, we're going to build a nested hash that displays it in\nthe same nested way. Our end result will look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e  :montague =\u0026gt; {\u003cbr\u003e    :patriarch =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Lord Montague\",\u003cbr\u003e      :age =\u0026gt; \"53\"\u003cbr\u003e  },\u003cbr\u003e    :matriarch =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Lady Montague\",\u003cbr\u003e      :age =\u0026gt; \"54\"\u003cbr\u003e  },\u003cbr\u003e    :hero =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Romeo\",\u003cbr\u003e      :age =\u0026gt; \"15\"\u003cbr\u003e  },\u003cbr\u003e    :hero_friends =\u0026gt; [\u003cbr\u003e      {\u003cbr\u003e         :name =\u0026gt; \"Benvolio\",\u003cbr\u003e         :age =\u0026gt; \"17\",\u003cbr\u003e         :attitude =\u0026gt; \"worried\"\u003cbr\u003e      },\u003cbr\u003e      {\u003cbr\u003e        :name =\u0026gt; \"Mercutio\",\u003cbr\u003e        :age =\u0026gt; \"18\",\u003cbr\u003e        :attitude =\u0026gt; \"hot-headed\"\u003cbr\u003e      }\u003cbr\u003e    ]\u003cbr\u003e  },\u003cbr\u003e  :capulet =\u0026gt; {\u003cbr\u003e    :patriarch =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Lord Capulet\",\u003cbr\u003e      :age =\u0026gt; \"50\"\u003cbr\u003e    },\u003cbr\u003e    :matriarch =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Lady Capulet\",\u003cbr\u003e      :age =\u0026gt; \"51\"\u003cbr\u003e    },\u003cbr\u003e    :heroine =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Juliet\",\u003cbr\u003e      :age =\u0026gt; \"15\",\u003cbr\u003e      :status =\u0026gt; \"alive\"\u003cbr\u003e    },\u003cbr\u003e    :heroine_friends=\u0026gt; [\u003cbr\u003e      {\u003cbr\u003e        :name =\u0026gt; \"Steven\",\u003cbr\u003e        :age =\u0026gt; \"30\",\u003cbr\u003e        :attitude =\u0026gt; \"confused\"\u003cbr\u003e      },\u003cbr\u003e      {\u003cbr\u003e        :name =\u0026gt; \"Nurse\",\u003cbr\u003e        :age =\u0026gt; \"44\",\u003cbr\u003e        :attitude =\u0026gt; \"worried\"\u003cbr\u003e      }\u003cbr\u003e    ]\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You might notice that we are storing ages as strings. That is\nbecause the ages here are not numbers that we need to frequently do math with.\nIf a hash value was a number that we needed to manipulate, then we would store\nit as an integer. For example, if it was the price of an item that we need to\ncalculate the tax on, then the price would be stored as an integer or float.\nOtherwise, it is conventional to store information like a person's age as a\nstring.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eRemember that the \u003ccode\u003ekey: value\u003c/code\u003e syntax is the same as the \u003ccode\u003e:key =\u0026gt; value\u003c/code\u003e syntax\nused above. Get ready to see them both used in different applications and\nsources.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis is a complicated data structure. We're going to build it up one step at a\ntime, so for each challenge, a separate file is provided in \u003ccode\u003elib\u003c/code\u003e. Follow along\nwith the walk-through below. When finished, use \u003ccode\u003elearn\u003c/code\u003e and \u003ccode\u003elearn_submit\u003c/code\u003e to\nregister completion of this lesson.\u003c/p\u003e\n\n\u003ch3\u003eCode Along Challenge I: Family Names\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/first_challenge.rb\u003c/code\u003e, you're going to fill out the content of the\n\u003ccode\u003eepic_tragedy\u003c/code\u003e hash. The first level of our nested hash are the keys for the\nfamily names, \"Montague\" and \"Capulet\". We've made them symbols above, because\nsymbols make better hash keys than strings.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSet the \u003ccode\u003eepic_tragedy\u003c/code\u003e variable equal to a hash with two key/value pairs. The\nkeys should be symbols of the family names (\u003ccode\u003e:montague\u003c/code\u003e and \u003ccode\u003e:capulet\u003c/code\u003e) and the\nvalues should be empty hashes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAt this point, we have a hash that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e  :montague =\u0026gt; {},\u003cbr\u003e  :capulet =\u0026gt; {}\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow it's time to fill out the second level of our hash — the collection of data\nthat constitutes the value hashes of each family name key.\u003c/p\u003e\n\n\u003ch3\u003eCode Along Challenge II: Character Roles\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/second_challenge.rb\u003c/code\u003e, you'll find the hash you built in the previous\nchallenge.\u003c/p\u003e\n\n\u003cp\u003eFill out the empty hash that is the value of the \u003ccode\u003e:montague\u003c/code\u003e key. There are four\nkeys in this hash:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:patriarch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:matriarch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:hero\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:hero_friends\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe first three of these keys point to the value of an empty hash. The fourth key\n\u003ccode\u003e:hero_friends\u003c/code\u003e has the value of an empty array.\u003c/p\u003e\n\n\u003cp\u003eThen, do the same for the empty hash that is the value of the \u003ccode\u003e:capulet\u003c/code\u003e key.\nThis time, your keys are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:patriarch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:matriarch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:heroine\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:heroine_friends\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe values are the same as described above. Once you get this test passing, you\nshould have a hash that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e   :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {},\u003cbr\u003e      :matriarch =\u0026gt; {},\u003cbr\u003e      :hero =\u0026gt; {},\u003cbr\u003e      :hero_friends =\u0026gt; []\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {},\u003cbr\u003e      :matriarch =\u0026gt; {},\u003cbr\u003e      :heroine =\u0026gt; {},\u003cbr\u003e      :heroine_friends =\u0026gt; []\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we're ready to fill out the empty hashes that constitute the values for the\n\u003ccode\u003e:patriarch\u003c/code\u003e, \u003ccode\u003e:matriarch\u003c/code\u003e and \u003ccode\u003e:hero\u003c/code\u003e/\u003ccode\u003e:heroine\u003c/code\u003e keys, nested inside the family\nname keys of our epic \u003ccode\u003eepic_tragedy hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eCode Along Challenge III: Character Attributes\u003c/h3\u003e\n\n\u003cp\u003eAccording to the diagram that we saw at the very beginning of this exercise,\neach character has a set of attributes. Matriarch and Patriarchs have a name and\nan age. The hero and heroine each have a name, age and status.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/third_challenge\u003c/code\u003e, you'll find the hash that you built in the previous\nchallenge. Fill out the empty hashes that are the values of the \u003ccode\u003e:patriarch\u003c/code\u003e,\n\u003ccode\u003e:matriarch\u003c/code\u003e, and \u003ccode\u003e:hero\u003c/code\u003e/\u003ccode\u003e:heroine\u003c/code\u003e keys with the following key/value pairs.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe Montague \u003ccode\u003e:patriarch\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Lord Montague\" and\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"53\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Montague \u003ccode\u003e:matriarch\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Lady Montague\" and\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"54\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Montague \u003ccode\u003e:hero\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Romeo\",\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"15\", and\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:status\u003c/code\u003e of \"alive\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Capulet \u003ccode\u003e:patriarch\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Lord Capulet\" and\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"50\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Capulet \u003ccode\u003e:matriarch\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Lady Capulet\" and\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"51\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Capulet \u003ccode\u003e:heroine\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Juliet\",\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"15\", and\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:status\u003c/code\u003e of \"alive\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOnce you get this test passing, you should have the following hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e   :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; []\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; []\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe're almost done. Our hero and heroine have two friends each. That constitutes\na collection of friends. Since they each have a collection of friends, it makes\nsense to collect those friends in an array. Since each friend will have his or\nher own attributes (name, age, etc), our array will be \u003cem\u003ean array of hashes\u003c/em\u003e!\u003c/p\u003e\n\n\u003ch3\u003eCode Along Challenge IV: Nesting Friends and Attributes\u003c/h3\u003e\n\n\u003cp\u003eThe values of the \u003ccode\u003e:hero_friends\u003c/code\u003e and \u003ccode\u003e:heroine_friends\u003c/code\u003e keys currently point to\nempty arrays. Why arrays? Well, we know that an individual person can be\nrepresented by a hash. However, our hero and heroine have multiple friends. So,\nwe need a way to store their friends in list-form. Luckily for us, that's just\nwhat arrays are for.\u003c/p\u003e\n\n\u003cp\u003eFill out these empty arrays with a series of hashes that will contain key/value\npairs describing these friends.\u003c/p\u003e\n\n\u003cp\u003eThe hero's two friends are Benvolio and Mercutio. So, the \u003ccode\u003e:hero_friends\u003c/code\u003e array\nwill contain two hashes. Each of these two hashes has the following three keys:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:name\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:age\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:attitude\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe hero's first friend has\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea name of \"Benvolio\",\u003c/li\u003e\n\u003cli\u003ean age of \"17\", and\u003c/li\u003e\n\u003cli\u003ean attitude of \"worried\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe hero's second friend has\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea name of \"Mercutio\",\u003c/li\u003e\n\u003cli\u003ean age of \"18\", and\u003c/li\u003e\n\u003cli\u003ean attitude of \"hot-headed\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe heroine's two friends are Steven and Nurse. So, the \u003ccode\u003e:heroine_friends\u003c/code\u003e array\nwill contain two hashes. Each of these two hashes has the following three keys:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:name\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:age\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:attitude\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe heroine's first friend has\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea name of \"Steven\",\u003c/li\u003e\n\u003cli\u003ean age of \"30\", and\u003c/li\u003e\n\u003cli\u003ean attitude of \"confused\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe heroine's second friend has\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea name of \"Nurse\",\u003c/li\u003e\n\u003cli\u003ean age of \"44\", and\u003c/li\u003e\n\u003cli\u003ean attitude of \"worried\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOnce you get this test passing, your hash should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e   :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; [\u003cbr\u003e         {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e         {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e      ]\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; [\u003cbr\u003e          {name: \"Steven\", age: \"30\", attitude: \"confused\"},\u003cbr\u003e          {name: \"Nurse\", age: \"44\", attitude: \"worried\"}\u003cbr\u003e      ]\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNested hashes can be very complex! However, their structure is very consistent.\nOnce data is contained within a hash, as long as we have the right keys, we can\naccess data from anywhere on the hash, no matter how deeply nested the data is.\u003c/p\u003e\n\n\u003cp\u003eGood night, good night! parting is such sweet sorrow, That I shall say good\nnight till it be morrow.\u003c/p\u003e","exportId":"gd552bf91e2f25211c9601cc0e35b773a"},{"id":203707,"title":"Building Nested Hashes Code-Along Part 2","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-building-nested-hashes-code-along-part-2\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along-part-2/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along-part-2\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along-part-2/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAccess and manipulate data in nested hashes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eEpic Tragedy Returned\u003c/h2\u003e\n\n\u003cp\u003eWe are going to continue with our previous example of Shakespearean works. This\ntime, we will spare you the literature lesson - the nested hashes of characters\nare provided this time. Your task will be to access and modify those hashes.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch2\u003eManipulating A Hash\u003c/h2\u003e\n\n\u003cp\u003eIn previous lessons, we learned that you can access a value in a hash like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehash = {first: \"first value!\", second: \"second value!\"}\u003cbr\u003e\u003cbr\u003ehash[:first]\u003cbr\u003e#  =\u0026gt; \"first value!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo access the values in a nested hash, we simply tack on additional keys,\nuntil we have the last key that points to the value we want to access.\u003c/p\u003e\n\n\u003cp\u003eFor example, if we had the following hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e  :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; [\u003cbr\u003e         {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e         {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e      ]\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; [\u003cbr\u003e        {name: \"Steven\", age: \"30\", attitude: \"confused\"},\u003cbr\u003e        {name: \"Nurse\", age: \"44\", attitude: \"worried\"}\u003cbr\u003e      ]\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo access the Montague patriarch's name, we use the hash name, \u003ccode\u003eepic_tragedy\u003c/code\u003e,\nfollowed by a chained list of all of the key names that precede the value of his\nname, enclosed in brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:patriarch][:name]\u003cbr\u003e#  =\u0026gt; \"Lord Montague\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can even use this method to change the value of a particular key. If we\nwanted to reset the Montague patriarch's name to \"Michael Jordan\", we would do\nit in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:patriarch][:name] = \"Michael Jordan\"\u003cbr\u003e\u003cbr\u003eputs epic_tragedy\u003cbr\u003e\u003cbr\u003e#  =\u0026gt;\u003cbr\u003e{\u003cbr\u003e   :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Michael Jordan\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; [\u003cbr\u003e        {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e        {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e      ]\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; [\u003cbr\u003e        {name: \"Steven\", age: \"30\", attitude: \"confused\"},\u003cbr\u003e        {name: \"Nurse\", age: \"44\", attitude: \"worried\"}\u003cbr\u003e      ]\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/nested-hashes/Image_8_NestedHash.png\" alt=\"Montague/Capulet Family Tree w/ Michael Jordan\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eArrays in Hashes\u003c/h2\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eepic_tragedy\u003c/code\u003e hash, both the \u003ccode\u003e:montague\u003c/code\u003e and \u003ccode\u003e:capulet\u003c/code\u003e nested hashes\ncontain arrays, \u003ccode\u003e:hero_friends\u003c/code\u003e and \u003ccode\u003eheroine_friends\u003c/code\u003e. Similar to how we chain\nmultiple keys in brackets to access nested hashes, we can also chain brackets\nwith integers for nested arrays. For instance, if we wanted to access the hash\ncontaining Mercutio's information, we would need to access the second element in\nthe \u003ccode\u003e:hero_friends\u003c/code\u003e array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero_friends][1]\u003cbr\u003e#  =\u0026gt; {:name=\u0026gt;\"Mercutio\", :age=\u0026gt;\"18\", :attitude=\u0026gt;\"hot-headed\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd if we wanted to go further, we can continue to chain brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero_friends][1][:name]\u003cbr\u003e#  =\u0026gt; \"Mercutio\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eChallenge\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/updating_nested_hashes.rb\u003c/code\u003e, your task is to finish two methods,\n\u003ccode\u003eupdate_status\u003c/code\u003e and \u003ccode\u003eadd_characters\u003c/code\u003e. In each, a hash is provided that need to\nbe modified. Rather than directly change the hash, try to write a programmatic\nsolution for modifying the hash content.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003eupdate_status\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eFor the \u003ccode\u003eupdate_status\u003c/code\u003e method,  you'll see an \u003ccode\u003eepic_tragedy\u003c/code\u003e hash is provided.\nWe've come to the end of the epic tragedy of Romeo and Juliet. At this point in\nthe story, Romeo and Juliet are — as in every good tragedy — quite dead.\u003c/p\u003e\n\n\u003cp\u003eAdd code to the \u003ccode\u003eupdate_status\u003c/code\u003e method to change the status of our hero Romeo\nand our heroine Juliet from \"alive\" to \"dead\".\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003efix_roles\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn the second method for this lab, \u003ccode\u003eadd_characters\u003c/code\u003e, we are starting again with\nan \u003ccode\u003eepic_tragedy\u003c/code\u003e hash. This time your task is to add some nested content into\nthe hash. We want to shout out some of the important characters from the play\nthat aren't a part of either family. Alongside \u003ccode\u003e:montague\u003c/code\u003e and \u003ccode\u003e:capulet\u003c/code\u003e, add a\nthird key to \u003ccode\u003eepic_tragedy\u003c/code\u003e, \u003ccode\u003e:additional_characters\u003c/code\u003e. This key should point to\nan array.\u003c/p\u003e\n\n\u003cp\u003eInside this array, add \u003cstrong\u003etwo hashes\u003c/strong\u003e. Each hash should contain a single key,\n\u003ccode\u003e:name\u003c/code\u003e. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFor the first hash, assign \u003ccode\u003e\"Prince Escalus\"\u003c/code\u003e as the \u003ccode\u003e:name\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eFor the  second  hash, assign \u003ccode\u003e\"Apothecary\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e to track your progress and \u003ccode\u003elearn submit\u003c/code\u003e when you've finished your\nwork. A walkthrough is provided below, but try to first solve these as best you\ncan.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNested hashes can be very complex! However, their structure is very consistent.\nOnce data is contained within a hash, as long as we have the right keys, we can\naccess data from anywhere on the hash, no matter how deeply nested the data is.\u003c/p\u003e\n\n\u003cp\u003eGood night, good night! parting is such sweet sorrow, That I shall say good\nnight till it be morrow.\u003c/p\u003e\n\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\n\u003ch3\u003e\u003ccode\u003eupdate_status\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor \u003ccode\u003eupdate_status\u003c/code\u003e,  we're given the following array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e  :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; [\u003cbr\u003e        {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e        {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e      ]\u003cbr\u003e  },\u003cbr\u003e  :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; [\u003cbr\u003e      {name: \"Steven\", age: \"30\", attitude: \"confused\"},\u003cbr\u003e      {name: \"Nurse\", age: \"44\", attitude: \"worried\"}\u003cbr\u003e      ]\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe  need to change the \u003ccode\u003e:status\u003c/code\u003e of Romeo and Juliet to \u003ccode\u003e\"dead\"\u003c/code\u003e. The first step\nwould be to find a way to \u003cem\u003eaccess\u003c/em\u003e status.  We can read the hash above and see\nwhat needs to change (and change it directly), but the task is to think of a\nprogrammatic solution.\u003c/p\u003e\n\n\u003cp\u003eFor Romeo, we see that the \u003ccode\u003eepic_tragedy\u003c/code\u003e hash contains a \u003ccode\u003e:montague\u003c/code\u003e key\npointing to a nested hash. We can start by accessing this nested hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague]\u003cbr\u003e # =\u0026gt; {\u003cbr\u003e #      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e #      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e #      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e #      :hero_friends =\u0026gt; [\u003cbr\u003e #        {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e #        {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e #      ]\u003cbr\u003e #    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis hash contains a \u003ccode\u003e:hero\u003c/code\u003e key, which points to\nanother hash. We can chain brackets and add this key to previous code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero]\u003cbr\u003e # =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is in \u003cem\u003ethis\u003c/em\u003e hash that the \u003ccode\u003e:status\u003c/code\u003e key is present. We'll chain another\nbracket, this time for \u003ccode\u003e:status\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero][:status]\u003cbr\u003e # =\u0026gt; \"alive\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we can access \u003ccode\u003e:status\u003c/code\u003e, we can modify it by assigning it a different\nvalue, in our case, \u003ccode\u003e\"dead\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero][:status] = \"dead\"\u003cbr\u003e # =\u0026gt; \"dead\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor Juliet, we follow the same process using the \u003ccode\u003e:capulet\u003c/code\u003e and \u003ccode\u003e:heroine\u003c/code\u003e keys\ninstead.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eadd_characters\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor the second method, we are again given an \u003ccode\u003eepic_tragedy\u003c/code\u003e hash (don't worry\nthat Romeo and Juliet are still alive, we're not testing for that). This time,\nwe need to add an \u003ccode\u003e:additional_characters\u003c/code\u003e key to the hash. This key should\npoint to an array of two hashes, each with a \u003ccode\u003e:name\u003c/code\u003e key. The first name will be\n\u003ccode\u003e\"Prince Escalus\"\u003c/code\u003e, and the second will be \u003ccode\u003e\"Apothecary\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSimilar to changing a value in a hash, we can add a key/value pair by providing\nboth the key we want to add and the value it should point to. If the key doesn't\nexist, it will be created.\u003c/p\u003e\n\n\u003cp\u003eWe can first add the key and assign it to an empty array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters] = []\u003cbr\u003e # =\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe next step would be to add the two hashes. We might do this with variables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprince = { name: \"Prince Escalus\" }\u003cbr\u003eapothecary = { name: \"Apothecary\" }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd then push these into the array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters] \u0026lt;\u0026lt; prince\u003cbr\u003eepic_tragedy[:additional_characters] \u0026lt;\u0026lt; apothecary\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we can skip over the variables entirely and go straight to pushing the\nhashes when they're created:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters] \u0026lt;\u0026lt; { name: \"Prince Escalus\" }\u003cbr\u003eepic_tragedy[:additional_characters] \u0026lt;\u0026lt; { name: \"Apothecary\" }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr we could assign these hashes using chained brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters][0] = { name: \"Prince Escalus\" }\u003cbr\u003eepic_tragedy[:additional_characters][1] = { name: \"Apothecary\" }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAny of these options will work. It is also perfectly valid to compose the\ncreation of both hashes when creating the array they are in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters] = [\u003cbr\u003e  { name: \"Prince Escalus\" },\u003cbr\u003e  { name: \"Apothecary\" }\u003cbr\u003e]\u003cbr\u003e # =\u0026gt; [{:name=\u0026gt;\"Prince Escalus\"}, {:name=\u0026gt;\"Apothecary\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expression above will handle everything needed for the \u003ccode\u003eadd_characters\u003c/code\u003e\nmethod.\u003c/p\u003e","exportId":"g02480f3d8d7450f000d0070f55fee067"},{"id":203708,"title":"Building Nested Hashes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-building-nested-hashes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a nested hash\u003c/li\u003e\n\u003cli\u003eAdd key/value pairs in a nested hash\u003c/li\u003e\n\u003cli\u003eUpdate key/value pairs in a nested hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we will practice constructing deeply-nested \u003ccode\u003eHash\u003c/code\u003e. This means\nthat we'll have a \u003ccode\u003eHash\u003c/code\u003e that contains a \u003ccode\u003eHash\u003c/code\u003e inside of it. Those \"interior\"\nor \"inner\" \u003ccode\u003eHash\u003c/code\u003ees might \u003cem\u003ethemselves\u003c/em\u003e contain \u003ccode\u003eHash\u003c/code\u003ees.\u003c/p\u003e\n\n\u003cp\u003eAs a reminder, this might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Greatly abbreviated!\u003cbr\u003ecountries_and_capitals_of_the_world = {\u003cbr\u003e  :north_america =\u0026gt; {\u003cbr\u003e    \"Canada\" =\u0026gt; {\u003cbr\u003e      :capital =\u0026gt; \"Ottawa\",\u003cbr\u003e      :capital_climate =\u0026gt; \"Kőppen Dfb\"\u003cbr\u003e    },\u003cbr\u003e    \"USA\" =\u0026gt; {\u003cbr\u003e      :capital =\u0026gt; \"Washington D.C.\",\u003cbr\u003e      :capital_climate =\u0026gt; \"Kőppen Cfa\"\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  :africa =\u0026gt; {\u003cbr\u003e    \"Ghana\" =\u0026gt; {\u003cbr\u003e      :capital =\u0026gt; \"Accra\",\u003cbr\u003e      :capital_climate =\u0026gt; \"Kőppen Aw\"\u003cbr\u003e    },\u003cbr\u003e    \"Nigeria\" =\u0026gt; {\u003cbr\u003e      :capital =\u0026gt; \"Abuja\",\u003cbr\u003e      :capital_climate =\u0026gt; \"Kőppen Aw\"\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe will work through this lab by filling out the \u003cem\u003eimplementation\u003c/em\u003e of four\nmethods. Each method will return a \u003ccode\u003eHash\u003c/code\u003e that is \u003cstrong\u003e\u003cem\u003elocally defined\u003c/em\u003e\u003c/strong\u003e within\nthat method's implementation. The comments in \u003ccode\u003e./intro_to_ruby_hashes_lab.rb\u003c/code\u003e\nand the results of running the tests will guide you.\u003c/p\u003e\n\n\u003ch3\u003eProcess\u003c/h3\u003e\n\n\u003cp\u003eWe're going to write the implementation of 4 methods to gradually build out a\ndeeply nested hash:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebase_hash\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emonopoly_with_second_tier\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emonopoly_with_third_tier\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emonopoly_with_fourth_tier\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor the second, third and fourth methods, we'll be updating the hash we created\nin the previous method, only one tier deeper into the hash.\u003c/p\u003e\n\n\u003cp\u003eThis means that after successfully implementing the first method, \u003ccode\u003ebash_hash\u003c/code\u003e,\ncopy your solution into \u003ccode\u003emonopoly_with_second_tier\u003c/code\u003e. There are some additional\nexpectations for the \u003ccode\u003emonopoly_with_second_tier\u003c/code\u003e, so what you just copied won't\n\u003cem\u003equite\u003c/em\u003e work. Modify the hash until you're passing all the tests for this second\nmethod. Repeate this process by copying this solution into\n\u003ccode\u003emonopoly_with_third_tier\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis lab has a detailed set of tests to guide you, so use \u003ccode\u003elearn\u003c/code\u003e to get\nadditional information on what is required.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ebash_hash\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should do the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ereturn a hash with one key called \u003ccode\u003e:railroads\u003c/code\u003e that points to an empty hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003emonopoly_with_second_tier\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method builds on the hash returned by \u003ccode\u003ebase_hash\u003c/code\u003e, updating the nested\n\u003ccode\u003e:railroads\u003c/code\u003e hash so that it includes\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea key called \u003ccode\u003e:pieces\u003c/code\u003e set to \u003ccode\u003e4\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ea key called \u003ccode\u003e:rent_in_dollars\u003c/code\u003e set to an empty hash\u003c/li\u003e\n\u003cli\u003ea key called \u003ccode\u003e:names\u003c/code\u003e set to an empty hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003emonopoly_with_third_tier\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method builds on the hash returned by monopoly\u003cem\u003ewith\u003c/em\u003esecond\u003cem\u003etier updating\nthe nested `:rent\u003c/em\u003ein_dollars` hash so that it includes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:one_piece_owned\u003c/code\u003e key set to \u003ccode\u003e25\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:two_pieces_owned\u003c/code\u003e key set to \u003ccode\u003e50\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:three_pieces_owned\u003c/code\u003e key set to \u003ccode\u003e100\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:four_pieces_owned\u003c/code\u003e key set to \u003ccode\u003e200\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn addition, this method should also update the nested \u003ccode\u003e:names\u003c/code\u003e hash so that it includes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:reading_railroad\u003c/code\u003e key that points to an empty hash\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:pennsylvania_railroad\u003c/code\u003e key that points to an empty hash\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:b_and_o_railroad\u003c/code\u003e key that points to an empty hash\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:shortline_railroad\u003c/code\u003e key that points to an empty hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003emonopoly_with_fourth_tier\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method builds on the hash returned by monopoly\u003cem\u003ewith\u003c/em\u003ethird_tier, updating\neach of the nested hashes inside the \u003ccode\u003e:names\u003c/code\u003e hash so that\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethe hash assigned to \u003ccode\u003e:reading_railroad\u003c/code\u003e includes a \u003ccode\u003e:mortgage_value\u003c/code\u003e key set\nto \u003ccode\u003e100\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ethe hash assigned to \u003ccode\u003e:pennsylvania_railroad\u003c/code\u003e includes a \u003ccode\u003e:mortgage_value\u003c/code\u003e key set to \u003ccode\u003e200\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ethe hash assigned to \u003ccode\u003e:b_and_o_railroad\u003c/code\u003e includes a \u003ccode\u003e:mortgage_value\u003c/code\u003e key set to \u003ccode\u003e400\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ethe hash assigned to \u003ccode\u003e:shortline_railroad\u003c/code\u003e includes a \u003ccode\u003e:mortgage_value\u003c/code\u003e key set to \u003ccode\u003e800\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf you get stumped, we've included the final \u003ccode\u003eHash\u003c/code\u003e in the\nfile \u003ccode\u003efinal_hash.rb\u003c/code\u003e in this repository.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ePATTERN FOR LEARNING\u003c/strong\u003e: We've seen many students take the final answer and\npare it down to get the tests passing. This is not a good path to mastering\nthis concept. The path that requires work in programming, at the gym, or in\nrelationships creates the most benefit. Passing tests now is not as valuable\nas understanding these concepts later.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations! You've built a pretty complex \u003ccode\u003eHash\u003c/code\u003e with nesting. This should\nprove to you that there's very little in this world that \u003cem\u003ecan't\u003c/em\u003e be modeled\nwith nesting of \u003ccode\u003eHash\u003c/code\u003ees, scalar values, and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby-doc.org/core-2.5.0/Hash.html\"\u003eRuby Documentation on Hashes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://ruby.about.com/od/rubyfeatures/a/hashes.htm\"\u003eWhat is a Hash in Ruby?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g77706b22896b0ace277c93dfe0a3a32c"},{"id":203709,"title":"Nested Hashes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-nested-hashes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAccess data from a nested hash\u003c/li\u003e\n\u003cli\u003eAdd data to and change data within a nested hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow that we've seen some examples of nested hashes, the next step is to get more\ncomfortable with using them. In this lab, we're going to practice accessing and\nupdating data within a nested hash and review what we've covered so far.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be filling out the content of a series of methods that we've\ndefined for you. All of the methods expect you to operate on the\n\u003ccode\u003eprogrammer_hash\u003c/code\u003e object, which is already defined and included in the body of\neach method.\u003c/p\u003e\n\n\u003cp\u003eUse the comments in \u003ccode\u003enested.rb\u003c/code\u003e and test suite to guide you. Each test is\ndesigned to tell you how to pass it.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that you are expected to get these tests to pass by adding or\nchanging information in the hash \u003cem\u003eprogrammatically\u003c/em\u003e. In other words, if you're\nasked to, for example, change the value of a specific hash key, \u003cem\u003edon't just\nre-write the hash with the new value!\u003c/em\u003e Use the methods we've learned and\npracticed in previous lessons.\u003c/p\u003e\n\n\u003cp\u003eTo quickly review, here is an example of adding data to a hash\nprogrammatically:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# good example\u003cbr\u003e\u003cbr\u003emy_hash = {first: \"I'm first!\", second: \"I'm second!\"}\u003cbr\u003emy_hash[:third] = \"I'm third!\"\u003cbr\u003e\u003cbr\u003eputs my_hash\u003cbr\u003e# \u0026gt; {first: \"I'm first!\", second: \"I'm second!\", third: \"I'm third!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eChanging a hash by simply re-defining it is not the goal of this lab:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# bad example\u003cbr\u003e\u003cbr\u003emy_hash = {first: \"I'm first!\", second: \"I'm second!\"}\u003cbr\u003emy_hash = {first: \"I'm first!\", second: \"I'm second!\", third: \"I'm third!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e In some of these methods, you will need to alter \u003ccode\u003eprogrammer_hash\u003c/code\u003e,\nthen make sure to \u003cem\u003ereturn\u003c/em\u003e the entire hash, not just the altered value.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ehopper\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should return the value of the \u003ccode\u003e:grace_hopper\u003c/code\u003e key inside\n\u003ccode\u003eprogrammer_hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ealan_kay_is_known_for\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should return what Alan Kay is known for.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003edennis_ritchies_language\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should return the language that Dennis Ritchie is known for.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The \u003ccode\u003e:languages\u003c/code\u003e keys inside \u003ccode\u003eprogrammer_hash\u003c/code\u003e each store an array. In\nthis case, the test is looking for the value stored in that array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eadding_matz\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should return a modified \u003ccode\u003eprogrammer_hash\u003c/code\u003e to honor Matz, the\ncreator of Ruby. Update the hash so that:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethere is a \u003ccode\u003e:yukihiro_matsumoto\u003c/code\u003e key alongside \u003ccode\u003e:grace_hopper\u003c/code\u003e, \u003ccode\u003e:alan_kay\u003c/code\u003e,\nand \u003ccode\u003e:dennis_ritchie\u003c/code\u003e set to a hash\u003c/li\u003e\n\u003cli\u003ethis nested hash contains \u003ccode\u003e:known_for\u003c/code\u003e and  \u003ccode\u003e:languages\u003c/code\u003e keys like the others\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMatz is known for \u003ccode\u003e\"Ruby\"\u003c/code\u003e, but his languages should be \u003ccode\u003e\"LISP\"\u003c/code\u003e and \u003ccode\u003e\"C\"\u003c/code\u003e.\nReturn the entire updated hash.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003echanging_alan\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should update what Alan Kay is known for to \u003ccode\u003e\"GUI\"\u003c/code\u003e and return the\nupdated \u003ccode\u003eprogrammer_hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eadding_to_dennis\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should add \u003ccode\u003e\"Assembly\"\u003c/code\u003e to Dennis Ritchie's languages array and\nreturn the updated \u003ccode\u003eprogrammer_hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAdding and updating data in a nested hash is just like adding and updating an\nordinary hash. If we know the structure, it is just a matter of using the right\ncombination of keys.\u003c/p\u003e\n\n\u003cp\u003eAs we see examples of more complex data structures, we'll start to encounter\nsituations where we aren't 100% of the structure of a hash. This is one reason\nwhy getting familiar with programmatically changing hash data is critical - we\nwon't always be able to \u003cem\u003esee\u003c/em\u003e the hash we're changing. Instead, we'll have to\nwrite logic that and correctly handles accessing and updating hash data in a\nmore abstracted way.\u003c/p\u003e","exportId":"g486fe338d877e0a4e62e1f73e2fca637"}]},{"id":21886,"name":"Procedural Ruby: Working with Data Structures","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gdfaf471db2bbb9e78b2ed14fdca0af7e","items":[{"id":203710,"title":"Working with Nested Data Structures","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWelcome to \"Programming as Collaboration.\" In this series of lessons, we're\ngoing to collaborate with the computer to discover \u003cem\u003einsights\u003c/em\u003e buried in complex\nnested data structures (NDS). Complex nested data structures are things like\n\u003ccode\u003eArrays\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e or \u003ccode\u003eHashes\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e of \u003ccode\u003eHashes\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe italicized \u003cem\u003einsight\u003c/em\u003e because we want to emphasize something very important.\nThere's a difference between raw data and conclusions drawn from that data. When\nprocessed correctly, data can teach us many things. The conclusions we extract\nfrom data with programming are called \u003cem\u003einsights\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a data-into-insight example form history.  In 1854, the physician\nJohn Snow recorded data identifying which Londoners in and about Broad Street\nhad contracted cholera. He thus had an initial data set, something very close to\na nested data structure. Snow then tested multiple hypotheses against the data,\nbut the one that fit the data best was this: cholera was being spread via an\ninfected pump in the neighborhood. This event is called \"In the\n\u003ca href=\"https://en.wikipedia.org/wiki/1854_Broad_Street_cholera_outbreak\"\u003e1854 Broad Street Cholera\u003c/a\u003e.\"\u003c/p\u003e\n\n\u003cp\u003eIt marks the birth of epidemiology and, in truth, the discipline that would come\nto be called \"data science.\"\u003c/p\u003e\n\n\u003ch2\u003eNDS into Insight\u003c/h2\u003e\n\n\u003cp\u003eIn the study of the cholera outbreak, we can see Snow's method:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRaw data\n\n\u003cul\u003e\n\u003cli\u003ehouseholds with death by cholera\u003c/li\u003e\n\u003cli\u003ewater source by households with death\u003c/li\u003e\n\u003cli\u003ewater source by households without death\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHuman Effort\n\n\u003cul\u003e\n\u003cli\u003e\"Is there a common water source for households suffering cholera death?\"\u003c/li\u003e\n\u003cli\u003e\"Do households that don't use the Broad Street water pump avoid cholera\ndeath?\"\u003c/li\u003e\n\u003cli\u003e\"Why do individuals who work at the nearby brewery seem immune to cholera?\"\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eInsight\u003c/em\u003e: \u003cstrong\u003eThe Broad Street pump is spreading disease! And the brewery\nworkers avoid it by drinking low-alcohol beer all day!\u003c/strong\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe work ahead of us looks a lot like John Snow's method:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRaw data in the form of an NDS\n\n\u003cul\u003e\n\u003cli\u003eProvided from our databases, or\u003c/li\u003e\n\u003cli\u003eProvided by a third party\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eForm hypotheses and write code to provide results from the NDS\u003c/li\u003e\n\u003cli\u003eDiscover \u003cem\u003einsights\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTransforming raw data, usually held in complex nested data structures, to\n\u003cem\u003einsights\u003c/em\u003e is one of the most essential roles programmers fulfill in\nbusinesses. These \u003cem\u003einsights\u003c/em\u003e help us decide where to (or not to) build a\nwarehouse, evaluate whether an investment is likely to be positive or negative,\nbuild alternative major-league baseball staffing strategies (\"\u003ca href=\"https://grantland.com/features/the-economics-moneyball/\"\u003eMoneyball\u003c/a\u003e\"),\nor even, in the case of the \u003ca href=\"https://en.wikipedia.org/wiki/1854_Broad_Street_cholera_outbreak\"\u003e1854 outbreak\u003c/a\u003e, \u003cem\u003esave lives\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eThe Road Ahead\u003c/h2\u003e\n\n\u003cp\u003eOur efforts will be divided into two phases:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn to build and evaluate complex NDS' so that we can work with them\u003c/li\u003e\n\u003cli\u003eIdentify a process for writing programs that process NDS' into insights\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNested data structures are tools for representing complex information in a way\nthat humans can read and that computers can process. Reading them and\nprocessing them allows us to create \u003cem\u003einsights\u003c/em\u003e that improve our lives.\u003c/p\u003e\n\n\u003cp\u003eThe remainder of this module will train up our skill in working with NDS with\nthe collaboration of a computer to produce insight.\u003c/p\u003e\n\n\u003cp\u003eTo start, we'll introduce some of the simplest nested data structures. These\nstructures tend to be nested together to build complex data structures, so it's\nhelpful to understand them in isolation. The four we'll be digging into in the\nnext several lessons are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es (AoA)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees (AoH)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es (HoA)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees (HoH)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhile you might have seen these nested data structures before, these lessons use\nmore technical and more precise language to describe them. Additionally, we\ndiscuss them with focus on how we are going to process them. Based on our\nhistorical data, Flatiron students have often encountered difficulty moving from\n\"I understand these structures\" to \"I know how to work with these structures.\"\nDon't lose this opportunity to make sure you know how to turn your knowledge\ninto \u003cem\u003einsight\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's get started!\u003c/p\u003e","exportId":"working-with-nested-data-structures"},{"id":203711,"title":"Nested Arrays","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-lab-1\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-lab-1/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-lab-1\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-lab-1/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRecognize vocabulary term: \"array of array\" or (\"AoA\")\u003c/li\u003e\n\u003cli\u003eRecognize that \"arrays of arrays\" are grids or coordinate systems\u003c/li\u003e\n\u003cli\u003eCreate a nested \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRead scalar data from an array of arrays\u003c/li\u003e\n\u003cli\u003eModify scalar data in an array of arrays\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003ch3\u003eKey Image: Coordinate Grid\u003c/h3\u003e\n\n\u003cp\u003eTo help you when reading the rest of this lesson, keep in mind that an Array of\nArrays (or a matrix) is well expressed by a \u003cstrong\u003e\u003cem\u003egrid\u003c/em\u003e\u003c/strong\u003e. Here are some examples\nto get your mind ready.\u003c/p\u003e\n\n\u003cp\u003eThink about those vending machines where you select the item you want by finding\nits coordinates and entering them in on a keypad.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/vending_grid.png\" alt=\"Grid-based vending machine\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThink about chess boards where each square has a row and column coordinate\naccording to Stamma's algebraic notation for chess:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/chess_grid.png\" alt=\"Chessboard with Stamma's Notation\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThink about latitude and longitude uniquely identifying a place on a map.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/nyc_latlong_sm.png\" alt=\"Map + LatLong\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003ePhoto credit: Mike C. Valdivia on Unsplash\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3\u003eFrom Array to Array of Array\u003c/h3\u003e\n\n\u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is like a list but in code form. It is a way for your program to\nstore pieces of data as elements in a collection. Arrays can contain any\ncombination of data types -- \u003ccode\u003eBoolean\u003c/code\u003es, \u003ccode\u003eInteger\u003c/code\u003es, \u003ccode\u003eStrings\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's imagine an \u003ccode\u003eArray\u003c/code\u003e as a \u003cstrong\u003esingle\u003c/strong\u003e long shelf with books on it. The shelf\nis like the \u003ccode\u003eArray\u003c/code\u003e and each book is an element of it.  We can refer to books by\nsaying things like the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eHouse of Leaves\u003c/em\u003e is the \u003cstrong\u003ethird\u003c/strong\u003e book from the \u003cstrong\u003eleft-most edge\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eThe best Latin grammar book is the \u003cstrong\u003esecond\u003c/strong\u003e book from the \u003cstrong\u003eleft-most edge\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003ezeroth\u003c/strong\u003e book from the \u003cstrong\u003eleft-most edge\u003c/strong\u003e (i.e. the first book) is Hegel's \u003cem\u003ePhenomenology\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut what if we had \u003cem\u003emultiple\u003c/em\u003e bookshelves that we stacked on top of each other?\nIt would look a bit more like our \"key image,\" the grid. We call a piece of\nfurniture that holds books in a grid-like arrangement a \"bookcase.\"\u003c/p\u003e\n\n\u003cp\u003eTo refer to a book, we provide \u003cstrong\u003e\u003cem\u003etwo pieces of information\u003c/em\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWhich shelf from the bottom\u003c/li\u003e\n\u003cli\u003eWhat distance from the left\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThus we'd say:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eKafka on the Shore\u003c/em\u003e is:\n\n\u003col\u003e\n\u003cli\u003eOn the shelf that's 3rd from the bottom of the bookcase and\u003c/li\u003e\n\u003cli\u003eis second from the left-most edge.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd the books from our previous single shelf would need more data provided. Imagining a bookshelf where the bottom shelf is in the zeroth position.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eHouse of Leaves\u003c/em\u003e is on the zeroth shelf from the bottom, the \u003cstrong\u003ethird\u003c/strong\u003e book\nfrom the left-most edge\u003c/li\u003e\n\u003cli\u003eThe best Latin grammar book is on the zeroth shelf from the bottom, the\n\u003cstrong\u003esecond\u003c/strong\u003e book from the left-most edge\u003c/li\u003e\n\u003cli\u003eOn the zeroth shelf from the bottom at the \u003cstrong\u003ezeroth\u003c/strong\u003e book from the left-most\nedge (i.e. the first book) you will find Hegel's \u003cem\u003ePhenomenology\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDraw it out for yourself if you're unsure, but this matches our key image: a\n\u003cstrong\u003e\u003cem\u003egrid\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere's how an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es creates a grid:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/nested_array.png\" alt=\"AoA to Grid\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRecognize Vocabulary Term: \"Array of Array\"\u003c/h2\u003e\n\n\u003cp\u003eNested Arrays have been an important tool for thinking about data for a long\ntime. In fact, this idea is older than computers and is at least as old as the\nPharaonic Egypt. As such, there are lots of words that mean \"Array of Arrays.\"\nHere's a quick reference. You don't need to memorize these, but if you're trying\nto model a problem as a programmer, you might see someone use these words.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003e2-D\u003c/strong\u003e array: \"Two dimensional Array:\" another word for a nested array\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eMultidimensional Array\u003c/strong\u003e: 3-D arrays are also possible (\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003e\nof \u003ccode\u003eArray\u003c/code\u003e). This results in the category known as \"Multidimensional\nArrays\"\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eAoA\u003c/strong\u003e: \u003cstrong\u003eA\u003c/strong\u003erray \u003cstrong\u003eo\u003c/strong\u003ef \u003cstrong\u003eA\u003c/strong\u003erray: another word for an nested array\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ecell\u003c/strong\u003e or \u003cstrong\u003ecel\u003c/strong\u003e: the coordinate element inside of an \u003ccode\u003eArray\u003c/code\u003e that itself\nis inside another \u003ccode\u003eArray\u003c/code\u003e; alternatively, it's what's in the \u003cstrong\u003egrid\u003c/strong\u003e at the\nintersection of two coordinates\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egrid\u003c/strong\u003e: Another word for \"array of arrays\"; the key image of an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003einner \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e: Since we're making \u003ccode\u003eArray\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es the \u003ccode\u003eArray\u003c/code\u003es\ncontained by the outer-most \u003ccode\u003eArray\u003c/code\u003e can be called \"inner arrays\"\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eouter \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e: See \"inner \u003ccode\u003eArray\u003c/code\u003e\"\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ematrix\u003c/strong\u003e: Yet another word for an Array of Arrays\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\u003ccode\u003eX\u003c/code\u003e by \u003ccode\u003eY\u003c/code\u003e array\u003c/strong\u003e: An array that contains \u003ccode\u003eY\u003c/code\u003e-many many rows with \u003ccode\u003eX\u003c/code\u003e-many\nelements in it. It defines the size of a matrix's maximum space (or, \"area\")\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eRecognize that \"Arrays of Arrays\" Are Grids or Coordinate Systems\u003c/h2\u003e\n\n\u003cp\u003eYou might have noticed from our bookcase example, that finding a book in a\ntwo-dimensional \u003ccode\u003eArray\u003c/code\u003e required us to pass two integers or coordinates.\u003c/p\u003e\n\n\u003cp\u003eAnywhere where humans might see a grid (latitude/longitude as coordinates on a\nmap, the Cartesian coordinate system for graphing, \u003ccode\u003eB9\u003c/code\u003e as the coordinate of a\nsnack in a vending machine), it's very likely the grid would be stored in a\ncomputer in a 2-D matrix.\u003c/p\u003e\n\n\u003cp\u003eApplications of nested \u003ccode\u003eArrays\u003c/code\u003e are many:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eKeeping track of the kids' names on the \"hand-hold ropes\" at a museum (5 kids\nper rope, 5 ropes per class, maximum 25 kids per field trip)\u003c/li\u003e\n\u003cli\u003eThe latest fantasy video game (The dungeon is a 10 by 10 matrix of rooms. When\nthe player activates, load the character in room (2, 3) where\n\u003ccode\u003edungeon_map[2][3]\u003c/code\u003e points to the \u003ccode\u003eString\u003c/code\u003e: \u003ccode\u003e\"The Throne Room\"\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eTetris-like games and its children (When the block rests, visit each row and\ncount whether every element in the row is status \"filled.\" If all cells are\nfilled, remove the row)\u003c/li\u003e\n\u003cli\u003eArt. Filling in colors in a simple matrix is how \"sprite\" art is created. The\nbeloved original Nintendo Mario or the hero Link from \"Legend of Zelda\" were\nboth simple colored cells within a matrix\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreate a Nested \u003ccode\u003eArray\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eLet's make a spice rack (a bookcase, but for spices):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Simple 1-D arrays\u003cbr\u003eshelf_1 = [\"Mace\", \"Ginger\", \"Marjoram\"]\u003cbr\u003eshelf_2 = [\"Paprika\", \"Fajita Mix\", \"Coriander\"]\u003cbr\u003eshelf_3 = [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e\u003cbr\u003espice_rack = [\u003cbr\u003e  shelf_1,\u003cbr\u003e  shelf_2,\u003cbr\u003e  shelf_3,\u003cbr\u003e] # =\u0026gt; [[\"Mace\", \"Ginger\", \"Marjoram\"], [\"Paprika\", \"Fajita Mix\", \"Coriander\"], [\"Parsley\", \"Sage\", \"Rosemary\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we don't need to use \u003ccode\u003eshelf_1\u003c/code\u003e, \u003ccode\u003eshelf_2\u003c/code\u003e, \u003ccode\u003eshelf_3\u003c/code\u003e, then we don't need to\nassign them before nesting them in \u003ccode\u003espice_rack\u003c/code\u003e.  We can write a nested \u003ccode\u003eArray\u003c/code\u003e\nusing \u003ccode\u003eArray\u003c/code\u003e literal formatting:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# 2-D Array all in one go\u003cbr\u003espice_rack = [[\"Mace\", \"Ginger\", \"Marjoram\"], [\"Paprika\", \"Fajita Mix\", \"Coriander\"], [\"Parsley\", \"Sage\", \"Rosemary\"]]\u003cbr\u003e\u003cbr\u003e# Same as above, but using whitespace to make it easier for humans to read\u003cbr\u003e\u003cbr\u003espice_rack_pretty = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marjoram\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince Ruby doesn't care about whitespace, so we'd advise you to write a 2-D\n\u003ccode\u003eArray\u003c/code\u003e like \u003ccode\u003espice_rack_pretty\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eRead Scalar Data From a Nested Array\u003c/h2\u003e\n\n\u003cp\u003eOne of the defining features of 2-D \u003ccode\u003eArray\u003c/code\u003es is that we use coordinates to\ntarget unique elements in a \u003cstrong\u003e\u003cem\u003egrid\u003c/em\u003e\u003c/strong\u003e. To read an element from a nested\n\u003ccode\u003eArray\u003c/code\u003e, simply provide the coordinates.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e    # 0        1          2\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marjoram\"],             # 0\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],    # 1\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]            # 2\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003espice_rack[0] #=\u0026gt;  [\"Mace\", \"Ginger\", \"Marjoram\"]\u003cbr\u003espice_rack[0][1] #=\u0026gt; \"Ginger\"\u003cbr\u003espice_rack[1][1] #=\u0026gt; \"Fajita Mix\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first set of brackets refers to the row of the nested Array.  The second set\nof brackets refer to the element within that row.\u003c/p\u003e\n\n\u003ch2\u003eModify Scalar Data In an Array of Arrays\u003c/h2\u003e\n\n\u003cp\u003eThe same technique of using coordinates applies both to reading and\nmodification. If you can \"target\" an element you can read it or update it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e    # 0        1          2\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marjoram\"],             # 0\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],    # 1\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]            # 2\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003espice_rack[1][1] #=\u0026gt; \"Fajita Mix\" (it's not really a spice)\u003cbr\u003espice_rack[1][1] = \"Cumin\" #=\u0026gt; \"Cumin\"\u003cbr\u003espice_rack[1][1] #=\u0026gt; \"Cumin\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eLab\u003c/h2\u003e\n\n\u003cp\u003eTime to apply our knowledgeo of the \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es nested data structure.\u003c/p\u003e\n\n\u003cp\u003eTake a look at \u003ccode\u003elib/nested_array.rb\u003c/code\u003e and complete the provided methods. Your\ntask is to nest two arrays within another array, as well as to access and\nchange information in those arrays.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations, you've learned to use your first nested data structure: the\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es (or \"matrix,\" or \"coordinate grid\"). You've seen that you\ncan build them by building \u003ccode\u003eArray\u003c/code\u003es filled with variables that point to other\n\u003ccode\u003eArray\u003c/code\u003es, or that you can use \u003ccode\u003eArray\u003c/code\u003e literal notation to build them out. You've\nseen that you can use coordinates to look up elements in the matrix as well as\nupdate those elements. In the lab associated with this material, you'll have a\nchance to make sure you've understood the basics.\u003c/p\u003e","exportId":"geae18a35d20ac62e2fa8a83b27867f2e"},{"id":203712,"title":"Iterating Through Nested Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-iteration\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDisplay the cells in an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eTraverse \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es to produce a single value\u003c/li\u003e\n\u003cli\u003eTraverse \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es to produce a new nested data structure\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen we started this module, we mentioned that we often use nested data\nstructures as a \"base\" from which to do data processing. \u003ccode\u003eArray\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es\nis our first milestone in learning to work with nested data.\u003c/p\u003e\n\n\u003cp\u003eIn the next few labs, we're going to pick out three specific types of\nprocessing to practice:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDisplaying the nested structure\u003c/li\u003e\n\u003cli\u003eTransforming the nested structure into a new structure (a collection)\u003c/li\u003e\n\u003cli\u003eTransforming the nested structure into a result (a single thing, usually a number)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn all three examples, we will use loops to traverse the entire data structure.\u003c/p\u003e\n\n\u003ch2\u003eReview Looping Through Arrays\u003c/h2\u003e\n\n\u003cp\u003eIn previous lessons, we looked at how to traverse an array using a \u003ccode\u003ewhile\u003c/code\u003e loop.\nLet's look at a few examples. Most of the examples used a variable that would\nincrement every time the loop code executed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [\"a\", \"b\", \"c\", \"d\"]\u003cbr\u003e\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  # code to work on the array would go here\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we wanted to output every element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [100, 300, 50, 450]\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  puts array[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAny simple array can be displayed using this method.\u003c/p\u003e\n\n\u003cp\u003eIf we wanted to \u003cem\u003emodify\u003c/em\u003e each element, we would change \u003ccode\u003eputs array[count]\u003c/code\u003e. Say, for\ninstance, we want to perform some math operation on each element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [100, 300, 50, 450]\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  array[count] = array[count] * array[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003earray\u003cbr\u003e # =\u0026gt; [10000, 90000, 2500, 202500]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe code above alters each element in the original array, replacing each\nvalue with the square of itself. If we didn't want to modify the original, we\ncan collect the result of each operation in a new array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [100, 300, 50, 450]\u003cbr\u003eresults_array = []\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  results_array \u0026lt;\u0026lt; array[count] * array[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eresults_array\u003cbr\u003e # =\u0026gt; [10000, 90000, 2500, 202500]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, \u003ccode\u003earray\u003c/code\u003e is kept as is, but the square of each of its elements is added to\n\u003ccode\u003eresults_array\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFinally, if we wanted to derive a single value from an array of elements, we\nmodify a variable on each loop rather than adding to a new collection. If we\nwanted to sum our array values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [100, 300, 50, 450]\u003cbr\u003esum = 0\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  sum = sum + array[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esum\u003cbr\u003e # =\u0026gt; 900\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've \u003cem\u003ereduced\u003c/em\u003e the array down to a single value.\u003c/p\u003e\n\n\u003ch2\u003eLooping Through Nested Arrays\u003c/h2\u003e\n\n\u003cp\u003eConsider the following array of arrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays = [\u003cbr\u003e  [1, 2, 3],\u003cbr\u003e  [4, 5, 6],\u003cbr\u003e  [7, 8, 9]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we wanted to print out each nested array manually, we would write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays[0]\u003cbr\u003e # =\u0026gt; [1, 2, 3]\u003cbr\u003earray_of_arrays[1]\u003cbr\u003e # =\u0026gt; [4, 5, 6]\u003cbr\u003earray_of_arrays[2]\u003cbr\u003e # =\u0026gt; [7, 8, 9]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we wanted to print the elements in each array, we could add a second set of brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays[0][0]\u003cbr\u003e # =\u0026gt; 1\u003cbr\u003earray_of_arrays[0][1]\u003cbr\u003e # =\u0026gt; 2\u003cbr\u003earray_of_arrays[0][2]\u003cbr\u003e # =\u0026gt; 3\u003cbr\u003earray_of_arrays[1][0]\u003cbr\u003e # =\u0026gt; 4\u003cbr\u003earray_of_arrays[1][1]\u003cbr\u003e # =\u0026gt; 5\u003cbr\u003earray_of_arrays[1][2]\u003cbr\u003e # =\u0026gt; 6\u003cbr\u003earray_of_arrays[2][0]\u003cbr\u003e # =\u0026gt; 7\u003cbr\u003earray_of_arrays[2][2]\u003cbr\u003e # =\u0026gt; 8\u003cbr\u003earray_of_arrays[2][3]\u003cbr\u003e # =\u0026gt; 9\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile this works fine, it requires specific, concrete code. If one of these\narrays had more or less than three elements, we would have to change our code to\naccount for it. Using \u003ccode\u003ewhile\u003c/code\u003e loops solves this.\u003c/p\u003e\n\n\u003cp\u003eWhen looping through an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es data structure, we add a second\n\u003ccode\u003ewhile\u003c/code\u003e loop. First, we start with a single loop:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e  p array_of_arrays[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above code will output each nested array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1, 2, 3]\u003cbr\u003e[4, 5, 6]\u003cbr\u003e[7, 8, 9]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Using \u003ccode\u003ep\u003c/code\u003e will display each array, but \u003ccode\u003eputs\u003c/code\u003e will output all the\nvalues inside those arrays!  We use \u003ccode\u003ep\u003c/code\u003e here to make the output a little\nclearer.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWith a single loop like this, we can access each of the nested arrays. At this\npoint, we \u003cem\u003ecould\u003c/em\u003e create a sort of hybrid between looping and directly accessing\nvalues:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e  p array_of_arrays[count][0]\u003cbr\u003e  p array_of_arrays[count][1]\u003cbr\u003e  p array_of_arrays[count][2]\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis prints out each value from each nested array, but still requires specific\ncode - \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, and \u003ccode\u003e2\u003c/code\u003e, the exact indices of the array elements. Instead, we\ncan use a second \u003ccode\u003ewhile\u003c/code\u003e loop:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e  p array_of_arrays[count]\u003cbr\u003e\u003cbr\u003e  inner_count = 0\u003cbr\u003e  while inner_count \u0026lt; array_of_arrays[count].length do\u003cbr\u003e    p array_of_arrays[count][inner_count]\u003cbr\u003e    inner_count += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice we've left in the original \u003ccode\u003ep\u003c/code\u003e statement to show each outer loop. This\ncode outputs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1, 2, 3]\u003cbr\u003e1\u003cbr\u003e2\u003cbr\u003e3\u003cbr\u003e[4, 5, 6]\u003cbr\u003e4\u003cbr\u003e5\u003cbr\u003e6\u003cbr\u003e[7, 8, 9]\u003cbr\u003e7\u003cbr\u003e8\u003cbr\u003e9\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a moment to try and visualize what is happening. Every time the outer\n\u003ccode\u003ewhile\u003c/code\u003e loop executes, the inner \u003ccode\u003ewhile\u003c/code\u003e loop runs three times. Stepping\nthrough one loop:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethe outer \u003ccode\u003ewhile\u003c/code\u003e loop executes because \u003ccode\u003ecount\u003c/code\u003e is less than the length\nof \u003ccode\u003earray_of_arrays\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ep array_of_arrays[count]\u003c/code\u003e is called, which prints the entire first nested array\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003einner_count\u003c/code\u003e is assigned to \u003ccode\u003e0\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ethe inner \u003ccode\u003ewhile\u003c/code\u003e loop executes because \u003ccode\u003einner_count\u003c/code\u003e is less than the length\nof the \u003cstrong\u003efirst\u003c/strong\u003e nested array, \u003ccode\u003earray_of_arrays[count]\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ep array_of_arrays[count][inner_count]\u003c/code\u003e is called, printing the \u003cem\u003efirst\u003c/em\u003e value\nof the first nested array because \u003ccode\u003ecount\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003einner_count\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003einner_count\u003c/code\u003e is incremented and now equals \u003ccode\u003e1\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ethe inner \u003ccode\u003ewhile\u003c/code\u003e loop executes because \u003ccode\u003einner_count\u003c/code\u003e is less than the length\nof the \u003cstrong\u003efirst\u003c/strong\u003e nested array, \u003ccode\u003earray_of_arrays[count]\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ep array_of_arrays[count][inner_count]\u003c/code\u003e is called, printing the \u003cem\u003esecond\u003c/em\u003e value\nof the first nested array because \u003ccode\u003ecount\u003c/code\u003e is still \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003einner_count\u003c/code\u003e is \u003ccode\u003e1\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003einner_count\u003c/code\u003e is incremented and now equals \u003ccode\u003e2\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ethe inner \u003ccode\u003ewhile\u003c/code\u003e loop executes because \u003ccode\u003einner_count\u003c/code\u003e is less than the length\nof the \u003cstrong\u003efirst\u003c/strong\u003e nested array, \u003ccode\u003earray_of_arrays[count]\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ep array_of_arrays[count][inner_count]\u003c/code\u003e is called, printing the \u003cem\u003ethird\u003c/em\u003e value\nof the first nested array because \u003ccode\u003ecount\u003c/code\u003e is still \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003einner_count\u003c/code\u003e is \u003ccode\u003e2\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003einner_count\u003c/code\u003e is incremented and now equals \u003ccode\u003e3\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ethe inner \u003ccode\u003ewhile\u003c/code\u003e loop does not execute because \u003ccode\u003einner_count\u003c/code\u003e is now equal to\nthe length of the first nested array\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecount\u003c/code\u003e is incremented and now equals \u003ccode\u003e1\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis process happens two more times, looping through the second and third nested\narrays.\u003c/p\u003e\n\n\u003ch2\u003eMapping Nested Arrays\u003c/h2\u003e\n\n\u003cp\u003eWe displayed nested content, now let's try to collect it. Given the same array of\narrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays = [\u003cbr\u003e  [1, 2, 3],\u003cbr\u003e  [4, 5, 6],\u003cbr\u003e  [7, 8, 9]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we wanted to collect all the values of each nested array into a single\narray?\u003c/p\u003e\n\n\u003cp\u003eFirst, we create a variable, \u003ccode\u003eresults_array\u003c/code\u003e, the new array we want. Then, we\nbuild two \u003ccode\u003ewhile\u003c/code\u003e loops again. Instead of outputting each element in each\nnested array, we'll just push it into the \u003ccode\u003eresults_array\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003eresults_array = [] # new array\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e\u003cbr\u003e  inner_count = 0\u003cbr\u003e  while inner_count \u0026lt; array_of_arrays[count].length do\u003cbr\u003e    results_array \u0026lt;\u0026lt; array_of_arrays[count][inner_count] # pushes every element into an array\u003cbr\u003e    inner_count += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eresults_array\u003cbr\u003e # =\u0026gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a moment to think about how this code executes step by step again.\u003c/p\u003e\n\n\u003ch2\u003eReducing Values in Nested Arrays\u003c/h2\u003e\n\n\u003cp\u003eIn a similar fashion to mapping over an array, reducing requires a variable to\ncontain an accumulated result. If we wanted the sum of all of these nested\nvalues, we would replace the array from last time with an integer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003esum = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e\u003cbr\u003e  inner_count = 0\u003cbr\u003e  while inner_count \u0026lt; array_of_arrays[count].length do\u003cbr\u003e    sum = sum + array_of_arrays[count][inner_count] # adds the element's value to sum and sets sum\u003cbr\u003e    inner_count += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esum\u003cbr\u003e # =\u0026gt; 45\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, like the others, we access the values inside a nested array\nusing chained brackets, \u003ccode\u003e[count]\u003c/code\u003e and \u003ccode\u003e[inner_count]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eUsing two \u003ccode\u003ewhile\u003c/code\u003e loops, we were able to display, collect, and reduce a set of\nnested arrays. The exact design of the loops required for this sort of task is\ndependent on the data structure you are working with. An \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003e of\n\u003ccode\u003eArray\u003c/code\u003es, for instance, would need \u003cem\u003ethree\u003c/em\u003e loops.\u003c/p\u003e\n\n\u003cp\u003eThe critical takeaway here, though, is that we can draw out the information we want\nfrom data structures by iterating over them with basic loops. This sort of task\nis so common that Ruby has built-in methods to handle the work like \u003ca href=\"https://ruby-doc.org/core-2.5.0/Array.html#method-i-each\"\u003e\u003ccode\u003eeach\u003c/code\u003e\u003c/a\u003e,\n\u003ca href=\"https://ruby-doc.org/core-2.5.0/Array.html#method-i-map\"\u003e\u003ccode\u003emap\u003c/code\u003e\u003c/a\u003e, and \u003ca href=\"https://ruby-doc.org/core-2.5.0/Array.html#method-i-sum\"\u003e\u003ccode\u003esum\u003c/code\u003e\u003c/a\u003e that we can apply directly to arrays. We will learn\nthese methods soon, but remember that at their cores, they are all based on\nsimple loops.\u003c/p\u003e","exportId":"iterating-through-nested-arrays"},{"id":203713,"title":"Display Data from an Array of Arrays Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-iteration-lab-part-1\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-1/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-1\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-1/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDisplay the cells in an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to practice what we reviewed in the previous lesson -\ndisplaying content from an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eWe're going to give you a bit of \"reference code.\" Reference code is code that's\na little generic. It probably doesn't solve any \u003cem\u003ereal\u003c/em\u003e problem, but which is\nkept intentionally \u003cstrong\u003e\u003cem\u003every simple\u003c/em\u003e\u003c/strong\u003e so that you can see how it might be adapted\nto your particular need. Some people call these \"reference implementations.\"\u003c/p\u003e\n\n\u003ch2\u003eDisplay the Cells in an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es\u003c/h2\u003e\n\n\u003cp\u003eIt's not often we say this, but this next bit of code is worth memorizing.\nIf you want to learn to speak any human language, it's a good idea to learn the\ngrammar, grow your vocabulary and talk with native speakers as much as\npossible.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBut\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThat takes years, and, in a pinch, you should \u003cem\u003ereally know\u003c/em\u003e how to ask for\nfood, water, emergency services, and a bathroom. Even if you don't understand\nwhat's happening grammatically, having a few \"stock phrases\" in times of need\nis helpful.  The following code is a good \"stock phrase.\"\u003c/p\u003e\n\n\u003cp\u003eAssuming the following AoA:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe display it like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003erow_index = 0\u003cbr\u003ewhile row_index \u0026lt; spice_rack.count do\u003cbr\u003e  element_index = 0\u003cbr\u003e  while element_index \u0026lt; spice_rack[row_index].count do\u003cbr\u003e    p spice_rack[row_index][element_index]\u003cbr\u003e    element_index += 1\u003cbr\u003e  end\u003cbr\u003e  row_index += 1\u003cbr\u003eend #=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis prints out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePosh\u003cbr\u003eScary\u003cbr\u003eSporty\u003cbr\u003ePaprika\u003cbr\u003eFajita Mix\u003cbr\u003eCoriander\u003cbr\u003eParsley\u003cbr\u003eSage\u003cbr\u003eRosemary\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis \"formula\" can be expanded and changed. Maybe you want something more\ndescriptive than \u003ccode\u003erow_index\u003c/code\u003e or \u003ccode\u003eelement_index\u003c/code\u003e index. Or, perhaps, you need to\nadjust behavior slightly. That's fine! But if you're not sure how to start,\nthis is always a good start and will get you un-stuck!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this lab, your task is to write the implementation for one method,\n\u003ccode\u003efind_even_values\u003c/code\u003e. Write your code in \u003ccode\u003elib/iteration_with_loops.rb\u003c/code\u003e using the\nguidance in the comments there and below.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003efind_even_values\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method is already defined but does not contain any code. It should accept\nan array of arrays as a parameter. Your task is to iterate over the AoA to\naccess the elements of each nested array and print out every even number\npresent. So, given the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays = [\u003cbr\u003e  [1,2,3],\u003cbr\u003e  [4,5,6],\u003cbr\u003e  [7,8,9]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003efind_even_values(array_of_arrays)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expected output would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2\u003cbr\u003e4\u003cbr\u003e6\u003cbr\u003e8\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUse \u003ccode\u003elearn\u003c/code\u003e to check your solution and \u003ccode\u003elearn submit\u003c/code\u003e to submit it. Try to solve\nthis on your own first, but if you get stuck, a walkthrough is provided below.\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\n\u003cp\u003eOur solution is going to be similar to the first example provided in this\nlesson, but before we get there, let's look at solving this for a single array\nof arrays using specific, concrete code. If we had the following array of arrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays = [\u003cbr\u003e  [1,2,3],\u003cbr\u003e  [4,5,6],\u003cbr\u003e  [7,8,9]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we only wanted to print out even values, a specific solution could be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep array_of_arrays[0][1]\u003cbr\u003e # =\u0026gt; 2\u003cbr\u003ep array_of_arrays[1][0]\u003cbr\u003e # =\u0026gt; 4\u003cbr\u003ep array_of_arrays[1][2]\u003cbr\u003e # =\u0026gt; 6\u003cbr\u003ep array_of_arrays[2][1]\u003cbr\u003e # =\u0026gt; 8\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see which values are even, and go straight to printing only those. What\nif we had this exact structure (an array of three arrays, each with three\nelement), but we couldn't see the values contained?\u003c/p\u003e\n\n\u003cp\u003eWe would have to check every element using a conditional statement. \u003ca href=\"https://ruby-doc.org/core-2.7.0/Integer.html\"\u003eIntegers\u003c/a\u003e\nin Ruby have a built-in methods to tell if something is even or odd - \u003ccode\u003e.even?\u003c/code\u003e\nand \u003ccode\u003e.odd?\u003c/code\u003e. We can use this to determine whether or not a value should be\nprinted:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif array_of_arrays[0][0].even?\u003cbr\u003e p array_of_arrays[0][0]\u003cbr\u003eend\u003cbr\u003eif array_of_arrays[0][1].even?\u003cbr\u003e p array_of_arrays[0][1]\u003cbr\u003eend\u003cbr\u003eif array_of_arrays[0][2].even?\u003cbr\u003e p array_of_arrays[0][2]\u003cbr\u003eend\u003cbr\u003eif array_of_arrays[1][0].even?\u003cbr\u003e p array_of_arrays[1][0]\u003cbr\u003eend\u003cbr\u003eif array_of_arrays[1][1].even?\u003cbr\u003e p array_of_arrays[1][1]\u003cbr\u003eend\u003cbr\u003e# etc...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, regardless of the elements contained, we would be able to print out only\nthe even values.\u003c/p\u003e\n\n\u003cp\u003eThis code still relies on the assumption that the array of arrays is structured\nprecisely how we expect. When writing a looping solution, the implementation for\ndeciding whether or not to print a value is going to be like we see above.\nLoops, however, abstract away the specific indices being used.\u003c/p\u003e\n\n\u003cp\u003eTo implement a looping solution, first, we'll start with a generic double loop:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef find_even_values(src)\u003cbr\u003e  row_index = 0\u003cbr\u003e  while row_index \u0026lt; src.count do\u003cbr\u003e    element_index = 0\u003cbr\u003e    while element_index \u0026lt; src[row_index].count do\u003cbr\u003e      # inside this loop, src[row_index][element_index] will access the current element\u003cbr\u003e      element_index += 1\u003cbr\u003e    end\u003cbr\u003e    row_index += 1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe know thata the \u003ccode\u003esrc\u003c/code\u003e parameter is an array of arrays, so we can use\n\u003ccode\u003esrc.count\u003c/code\u003e to get the length of the outer array and compare it to \u003ccode\u003erow_index\u003c/code\u003e\nwhen setting up the first \u003ccode\u003ewhile\u003c/code\u003e loop. Inside this loop, we create a second\nvariable, \u003ccode\u003eelement_index\u003c/code\u003e. Every time the outer loop runs, \u003ccode\u003eelement_index\u003c/code\u003e is\nset to \u003ccode\u003e0\u003c/code\u003e. When setting up the inner \u003ccode\u003ewhile\u003c/code\u003e loop, we use\n\u003ccode\u003esrc[row_index].count\u003c/code\u003e. This gives us the length of the current nested array\nwe're working with.\u003c/p\u003e\n\n\u003cp\u003eInside this second \u003ccode\u003ewhile\u003c/code\u003e loop, we can access nested values with\n\u003ccode\u003esrc[row_index][element_index]\u003c/code\u003e. To output only even values, here is where we\nwill put a conditional statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef find_even_values(src)\u003cbr\u003e  row_index = 0\u003cbr\u003e  while row_index \u0026lt; src.count do\u003cbr\u003e    element_index = 0\u003cbr\u003e    while element_index \u0026lt; src[row_index].count do\u003cbr\u003e      if src[row_index][element_index].even?\u003cbr\u003e        p src[row_index][element_index]\u003cbr\u003e      end\u003cbr\u003e      element_index += 1\u003cbr\u003e    end\u003cbr\u003e    row_index += 1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eUsing loops with an array of arrays, we can access every value regardless of how\nmany nested arrays are present and how long each nested array is. We will see\nall sorts of data structures, arrays of arrays of arrays, hashes of arrays,\narrays of hashes of arrays, etc... to work with each, we will need a slightly\ncustomized loop implementation. An array of array of arrays, for instance, would\nrequire \u003cem\u003ethree\u003c/em\u003e \u003ccode\u003ewhile\u003c/code\u003e loops. Once we've worked out the particular\nimplementation, though, we gain a powerful tool in working with data!\u003c/p\u003e","exportId":"gf392e0d8c8c10f456c8d8b8903c1de66"},{"id":203714,"title":"Extract Data from an Array of Arrays Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-iteration-lab-part-2\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-2/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-2\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-2/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to extract some information from a nested data\nstructure. We will again be using an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es and two \u003ccode\u003ewhile\u003c/code\u003e loops\nto handle the iteration. However, this time, you will need to collect specific\nvalues and return them in a new array.\u003c/p\u003e\n\n\u003ch2\u003eTraverse \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es to Produce a New Data Structure\u003c/h2\u003e\n\n\u003cp\u003eThe same \"formula\" that we suggested in the last lab can easily be adapted for\ndoing work other than \u003ccode\u003eputs\u003c/code\u003e-ing things. Let's say we wanted to gather all the\nelements that start with \u003ccode\u003eP\u003c/code\u003e into a new array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003eouter_results = []\u003cbr\u003erow_index = 0\u003cbr\u003ewhile row_index \u0026lt; spice_rack.count do\u003cbr\u003e  element_index = 0\u003cbr\u003e  while element_index \u0026lt; spice_rack[row_index].count do\u003cbr\u003e    # How to read the following line of code:\u003cbr\u003e    #   Array at row_index\u003cbr\u003e    #   Element of the inner array at element_index\u003cbr\u003e    #   The first character of that element...\u003cbr\u003e    if spice_rack[row_index][element_index][0] == \"P\"\u003cbr\u003e      outer_results \u0026lt;\u0026lt; spice_rack[row_index][element_index]\u003cbr\u003e    end\u003cbr\u003e    element_index += 1\u003cbr\u003e  end\u003cbr\u003e  row_index += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eouter_results #=\u0026gt;  [\"Posh\", \"Paprika\", \"Parsley\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe might say we are \u003cem\u003efiltering\u003c/em\u003e the values in this data structure. When you\nlearn Ruby's Enumerable methods in just a little while, remembering this name\nwill help a lot!\u003c/p\u003e\n\n\u003cp\u003eA slight variation on this code will allow us to \u003cem\u003ecompare\u003c/em\u003e values - handy for\nwhen we need to do things like find a maximum or minimum value. Say, for\ninstance, we wanted to collect the longest string in each nested array from our\nprevious example. Instead of using a conditional to check for \u003ccode\u003e\"P\"\u003c/code\u003e, we could\nuse a variable to keep track of the longest string.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003eouter_results = []\u003cbr\u003erow_index = 0\u003cbr\u003ewhile row_index \u0026lt; spice_rack.count do\u003cbr\u003e  element_index = 0\u003cbr\u003e  longest_string_element = \"\"\u003cbr\u003e  while element_index \u0026lt; spice_rack[row_index].count do\u003cbr\u003e\u003cbr\u003e    # Array at row_index\u003cbr\u003e    # Element of the inner array at element_index\u003cbr\u003e    # If the length of the current element is greater than the length of longest_string_element\u003cbr\u003e    # Set longest_string_element to the current element\u003cbr\u003e    if spice_rack[row_index][element_index].length \u0026gt; longest_string_element.length\u003cbr\u003e      longest_string_element = spice_rack[row_index][element_index]\u003cbr\u003e    end\u003cbr\u003e    element_index += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # We have to check every element in each inner array, so after the loop finishes\u003cbr\u003e  # The current value of longest_string_element is pushed into outer_results\u003cbr\u003e  outer_results \u0026lt;\u0026lt; longest_string_element\u003cbr\u003e  row_index += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eouter_results # =\u0026gt; [\"Sporty\", \"Fajita Mix\", \"Rosemary\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this lab, imagine you are working with a bit of weather data - you have the\nhourly local temperatures for the last seven days in an array of arrays, and you\nwould like to find the low temperature for each day.\u003c/p\u003e\n\n\u003cp\u003eWrite a method, \u003ccode\u003efind_min_in_nested_arrays\u003c/code\u003e that can take in an array of arrays\nof integers. This method should collect the minimum value in each nested array\ninto a new array and return it. If we had the following data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_daily_temperatures = [\u003cbr\u003e  [19, 21, 24, 26, 30, 34, 37, 39, 40, 45, 48, 50, 55, 60, 63, 59, 49, 45, 40, 39, 34, 32, 25, 18],\u003cbr\u003e  [17, 18, 22, 26, 31, 35, 38, 40, 43, 45, 49, 52, 55, 61, 60, 59, 55, 49, 45, 38, 32, 30, 24, 19],\u003cbr\u003e  [13, 15, 20, 23, 33, 37, 39, 41, 45, 48, 50, 53, 57, 62, 61, 58, 52, 48, 44, 36, 35, 31, 23, 20],\u003cbr\u003e  [19, 20, 25, 28, 30, 35, 38, 40, 41, 46, 48, 51, 56, 60, 59, 55, 50, 45, 43, 39, 36, 34, 25, 24],\u003cbr\u003e  [21, 25, 28, 30, 35, 41, 47, 49, 50, 55, 56, 57, 58, 64, 63, 58, 49, 44, 42, 36, 33, 33, 27, 20],\u003cbr\u003e  [25, 29, 30, 36, 39, 45, 49, 50, 52, 57, 58, 59, 60, 66, 65, 59, 54, 49, 45, 40, 36, 30, 26, 24],\u003cbr\u003e  [30, 36, 38, 39, 40, 45, 47, 49, 50, 59, 60, 60, 65, 63, 61, 56, 49, 43, 40, 39, 35, 32, 23, 22],\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we passed in into our method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efind_min_in_nested_arrays(array_of_daily_temperatures)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe should expect to get the following array in return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[18, 17, 13, 19, 20, 24, 22]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUse \u003ccode\u003elearn\u003c/code\u003e to check your solution and \u003ccode\u003elearn submit\u003c/code\u003e to submit your work.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSometimes data is not in a format that is useful to us. Sometimes, there is so much data, it\nwould be difficult to visually extract information out. Mapping over data structures and extracting\nwhat we want is a very helpful ability in these situations. We can turn data into what we need and\nshape it in a way that suits us.\u003c/p\u003e","exportId":"g7d3c552344496bf249ccdeb776f7e822"},{"id":203715,"title":"Reduce Data from an Array of Arrays Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-iteration-lab-part-3\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-3/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-3\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-3/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFor the final lab on traversing \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es, we're going to apply the\ndouble \u003ccode\u003ewhile\u003c/code\u003e loop to find a single value.\u003c/p\u003e\n\n\u003ch2\u003eTraverse \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es to Produce a Single Value\u003c/h2\u003e\n\n\u003cp\u003eAnother variant on traversing nested Arrays is traversing the matrix and\naccumulating all the values. Let's imagine that someone created a grid\nrepresenting a guessing game. In each cell of the grid, the games makers have put\nsome amount of cash. Let's sum up all the possible values to determine how much\nmoney is in the grid.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eguessing_game_grid = [\u003cbr\u003e [1, 2, 1, 7, 3],\u003cbr\u003e [2, 100, 15, 4, 18],\u003cbr\u003e [15, 16, 99, 1, 2, 11]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003etotal = 0\u003cbr\u003erow_index = 0\u003cbr\u003ewhile row_index \u0026lt; guessing_game_grid.count do\u003cbr\u003e  element_index = 0\u003cbr\u003e  while element_index \u0026lt; guessing_game_grid[row_index].count do\u003cbr\u003e    total += guessing_game_grid[row_index][element_index]\u003cbr\u003e    element_index += 1\u003cbr\u003e  end\u003cbr\u003e  row_index += 1\u003cbr\u003eend\u003cbr\u003etotal #=\u0026gt; 297\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis pattern is known as reduction because you're going to reduce a nested data\nstructure to a single value. As you learn Ruby's Enumerable methods, remembering\nthis name will help a lot!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be working with a mix of data types - nested arrays with\nstrings and numbers. We need to extract out the strings from this data, ignoring\nthe numbers.\u003c/p\u003e\n\n\u003cp\u003eWrite a method, \u003ccode\u003ejoin_nested_strings\u003c/code\u003e, that can take in an array of arrays of\nintegers \u003cem\u003eand\u003c/em\u003e strings. This method should iterate over each nested array,\ncombining all the strings into a single string value.\u003c/p\u003e\n\n\u003cp\u003eFor example, given the code below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emixed_data = [\u003cbr\u003e  [\"The\", 4, \"quick\"],\u003cbr\u003e  [-1, \"brown\", \"fox\", 30],\u003cbr\u003e  [\"studied\", 101, 233, \"Ruby\"]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003ejoin_nested_strings(mixed_data)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe should expect the following returned:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"The quick brown fox studied Ruby\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Don't worry if your resulting string has an extra space at the end -\nthe tests will ignore it.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe've seen examples of methods like \u003ccode\u003e.join\u003c/code\u003e that combine arrays of strings, but\nin this situation, we need something more customizable. We were able to take a\nset of 'dirty' data and reduce it down to a single value, something that \u003ccode\u003e.join\u003c/code\u003e\nwould not be able to accomplish on its own.\u003c/p\u003e\n\n\u003cp\u003eYou may have noticed that when we're discussing nested data structures - a lot of\nthe concepts we are introducing are things we've seen in regular arrays. At the\ncore of our implementations, we're performing operations that we're familiar\nwith - using conditional statements, combining values, pushing data into arrays,\netc... We're incorporating these basic tasks with loops to produce custom data\ntools.\u003c/p\u003e","exportId":"gfbd3d06c8ed1828a7d6b9bb7797aa4da"},{"id":203716,"title":"Nested Arrays Addendum","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-addendum\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-addendum/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-addendum\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-addendum/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize that coordinate assignments grow nested \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eRecognize single-coordinate access of \u003ccode\u003eArray\u003c/code\u003es returns an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow that you've had a chance to get familiar with the basics of working with\nnested \u003ccode\u003eArray\u003c/code\u003es or \"matrices\" (the plural of \"matrix\"), or \"AoAs,\" let's cover\na \"funny\" case.\u003c/p\u003e\n\n\u003ch2\u003eRecognize That Coordinate Assignments Grow Nested \u003ccode\u003eArray\u003c/code\u003es\u003c/h2\u003e\n\n\u003cp\u003eGiven the following Ruby code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],          \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"], \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]         \u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou're clear now that we can update by saying \u003ccode\u003espice_rack[1][1] = \"Extract of\nPizza\"\u003c/code\u003e. But what would happen if we said \u003ccode\u003espice_rack[1][100] = \"Poodle\nDinner\"\u003c/code\u003e. What would \u003ccode\u003espice_rack\u003c/code\u003e look like then?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTRY IT OUT IN IRB\u003c/em\u003e\u003c/strong\u003e. We can't emphasize this behavior enough. Programmers,\nwhen they reach head-scratchers like this, always ask IRB to teach them. Your\nlearning will not gel as well if you do not take this step. Don't set your\nlearning backwards!\u003c/p\u003e\n\n\u003cp\u003eAs we hope you discovered, we \u003cstrong\u003ecan\u003c/strong\u003e add at \u003cem\u003eany\u003c/em\u003e coordinate pair. If the\nelement you need add needs the inner \u003ccode\u003eArray\u003c/code\u003e to \"grow\" in order to accommodate\nit, Ruby will \"grow\" the \u003ccode\u003eArray\u003c/code\u003e and fill in the \"in-between\" values with\n\u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],             \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],    \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]            \u003cbr\u003e]\u003cbr\u003espice_rack[1][10] = \"Cucumber Water\"\u003cbr\u003espice_rack #=\u0026gt; [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\", nil, nil, nil, nil, nil, nil, nil, \"Cucumber Water\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eRecognize Single-coordinate Access of \u003ccode\u003eArray\u003c/code\u003es Returns an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThis isn't a new fact, but some students forget that the inner \u003ccode\u003eArray\u003c/code\u003es are\n\u003cstrong\u003e\u003cem\u003estill \u003ccode\u003eArray\u003c/code\u003es\u003c/em\u003e\u003c/strong\u003e upon which we can do all the usual stuff we already know\nhow to do on \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eAs such, you can use operators like \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e (\"shovel\") on an inner \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],          \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"], \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]         \u003cbr\u003e]\u003cbr\u003e\u003cbr\u003espice_rack[2] \u0026lt;\u0026lt; \"Saffron\" #=\u0026gt; [\"Parsley\", \"Sage\", \"Rosemary\", \"Saffron\"]\u003cbr\u003e\u003cbr\u003espice_rack #=\u0026gt; [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],          \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"], \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\", \"Saffron\"]         \u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly, if you want to replace a whole \u003ccode\u003eArray\u003c/code\u003e within the containing\n\u003ccode\u003eArray\u003c/code\u003e, you can do so by using one coordinate.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],          \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"], \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]         \u003cbr\u003e]\u003cbr\u003e\u003cbr\u003e# Spice up your life!\u003cbr\u003espice_rack[0] = [\"Posh\", \"Scary\", \"Sporty\", \"Baby\", \"Ginger\"]\u003cbr\u003e\u003cbr\u003espice_rack #=\u0026gt; [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\", \"Baby\", \"Ginger\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eKeep in mind, if a matrix starts off with the same number of rows and elements\n(\"is square\"), there's nothing wrong with breaking that, if you need. Ruby\nwon't complain.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe've covered two \"tangent\" topics about working with nested arrays. We've seen\nthese ideas occasionally cause bugs for learners (\"Wait, what? How did all\nthose \u003ccode\u003enil\u003c/code\u003es get in there?\"). Or we've seen learners get stuck because they\nstop thinking of inner \u003ccode\u003eArray\u003c/code\u003es as the \u003ccode\u003eArray\u003c/code\u003es they already know and love.\nThey get all tangled up in the coordinate syntax and forget what they already\nknow.\u003c/p\u003e","exportId":"nested-arrays-addendum"},{"id":203717,"title":"Working with an Array of Hashes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-hashes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-hashes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-hashes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-hashes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRecognize vocabulary term: \"array of hashes\" (\"AoH\")\u003c/li\u003e\n\u003cli\u003eRecognize that \"arrays of hashes\" are contact lists or spreadsheets\u003c/li\u003e\n\u003cli\u003eCreate an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees\u003c/li\u003e\n\u003cli\u003eRead scalar data from an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees\u003c/li\u003e\n\u003cli\u003eModify scalar data in an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHaving worked with \u003ccode\u003eArray\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es, you're going to be pleasantly\nsurprised that most of the syntax works exactly the same between \"arrays of\narrays\" to \"arrays of hashes.\"\u003c/p\u003e\n\n\u003ch3\u003eKey Image: Contact List or Spreadsheet\u003c/h3\u003e\n\n\u003cp\u003eTo help you when reading the rest of this lesson, keep in mind that an \u003ccode\u003eArray\u003c/code\u003e of\n\u003ccode\u003eHash\u003c/code\u003ees is well expressed by a contact list (or, if you're old enough, a\nRolodex). Take a card, add some standard fields to it (first name, family name,\nphone number, fax number, email address, etc.) and fill the fields in. Take\nanother card and do the same. Take another card and do the same. Those three\ncards could go in an \u003ccode\u003eArray\u003c/code\u003e, an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees.\u003c/p\u003e\n\n\u003cp\u003eIf you think about a contact list, it's also easy to export it to a spreadsheet\nlike a Google Sheet or an Excel Sheet. You could take the fields on the card\nand make them the columns across the top of the spreadsheet. Then for each\nmember of the contact list you could make a new row for it.\u003c/p\u003e\n\n\u003cp\u003eOftentimes when a business friend who doesn't know how to code asks for\nprogramming help, they'll want to give us data out of a spreadsheet. Our first\nmove is to turn that spreadsheet into an AoH.\u003c/p\u003e\n\n\u003ch3\u003eFrom Hash to Array of Hashes\u003c/h3\u003e\n\n\u003cp\u003eRecall that a \u003ccode\u003eHash\u003c/code\u003e is like a table, but in code form. It is a way for your\nprogram to store pairs of data as elements in a collection.\u003c/p\u003e\n\n\u003cp\u003eWe call names in a \u003ccode\u003eHash\u003c/code\u003e that we use to point to data, \u003cem\u003ekeys\u003c/em\u003e. By providing a\n\u003ccode\u003eHash\u003c/code\u003e name and a \u003cem\u003ekey\u003c/em\u003e, we can uniquely identify a \u003cem\u003evalue\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eMultiple \u003ccode\u003eHash\u003c/code\u003ees inside of an Array would mean you could find the zeroth,\nfirst, second, etc. element of that \u003ccode\u003eArray\u003c/code\u003e and get back a little dictionary.\nYou could then ask that dictionary for the \u003ccode\u003e:family_name\u003c/code\u003e field's content and\nget back \"Smith\" or \"Huang\" or \"Dayal.\"\u003c/p\u003e\n\n\u003ch2\u003eRecognize Vocabulary Term: \"Array of Hashes\"\u003c/h2\u003e\n\n\u003cp\u003eNested \u003ccode\u003eHash\u003c/code\u003ees have been common data structures since at least Alexandrian\nEgypt (the library there famously had books of locations of books). As such,\nthere are lots of words that mean \"Array of Hashes.\" Here's a quick reference.\nYou don't need to memorize these, but if you're trying to model a problem as a\nprogrammer, you might see someone use these words.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eAoH\u003c/strong\u003e: \u003cstrong\u003eA\u003c/strong\u003erray \u003cstrong\u003eo\u003c/strong\u003ef \u003cstrong\u003eH\u003c/strong\u003eashes\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003efield\u003c/strong\u003e: The key / value pair of a Hash e.g. \"the \u003ccode\u003e:family_name\u003c/code\u003e field\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreate an AoH\u003c/h2\u003e\n\n\u003cp\u003eLet's make a simple list of our favorite directors\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Simple Hashes\u003cbr\u003e\u003cbr\u003edirector_1 = {\u003cbr\u003e  name: \"Ida Lupino\",\u003cbr\u003e  favorite_movie: \"The Hitch-Hiker\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edirector_2 = {\u003cbr\u003e  name: \"Orson Welles\",\u003cbr\u003e  favorite_movie: \"Citizen Kane\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edirector_3 = {\u003cbr\u003e  name: \"Andrej Tarkovsky\",\u003cbr\u003e  favorite_movie: \"Solaris\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilm_fest = [\u003cbr\u003e  director_1,\u003cbr\u003e  director_2,\u003cbr\u003e  director_3,\u003cbr\u003e] # =\u0026gt; [{:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}, {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"}, {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we don't need to use \u003ccode\u003edirector_1\u003c/code\u003e, \u003ccode\u003edirector_2\u003c/code\u003e, \u003ccode\u003edirector_3\u003c/code\u003e, then we don't\nneed to assign them before nesting them in \u003ccode\u003efilm_fest\u003c/code\u003e  We can write a nested\nAoH using literal formatting:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# AoH in one go\u003cbr\u003efilm_fest = [{:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}, {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"}, {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}]\u003cbr\u003e\u003cbr\u003e# Same as above, but using whitespace to make it easier for humans to read\u003cbr\u003e\u003cbr\u003efilm_fest = [\u003cbr\u003e  {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"},\u003cbr\u003e  {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"},\u003cbr\u003e  {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}\u003cbr\u003e]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince Ruby doesn't care about whitespace, we'd advise you to write an AoH like\nthe second example.\u003c/p\u003e\n\n\u003cp\u003eTake a moment to reflect, can you \"see\" the spreadsheet there in the Array\nliteral? There's more repetition than you'd see in a real spreadsheet, but the\nidea of intersecting coordinates between an order (\u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e) and a\nkey (\u003ccode\u003e:name\u003c/code\u003e or \u003ccode\u003e:favorite_movie\u003c/code\u003e) should feel a little bit like a spreadsheet.\u003c/p\u003e\n\n\u003cp\u003eIt's good to keep those coordinates in mind as we start trying to retrieve\nvalues in this next section!\u003c/p\u003e\n\n\u003ch2\u003eRead Scalar Data From a Nested Hash\u003c/h2\u003e\n\n\u003cp\u003eOne of the defining features of AoHs is that we use coordinates to target\nunique elements as if they were in a grid where one part of the coordinate is a\nnumber and the other is a \u003ccode\u003eHash\u003c/code\u003e key. To read an element from a nested \u003ccode\u003eArray\u003c/code\u003e,\nsimply provide the coordinates.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edirectors = [\u003cbr\u003e  {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"},\u003cbr\u003e  {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"},\u003cbr\u003e  {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003edirectors[0] #=\u0026gt; {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}\u003cbr\u003edirectors[0][:name] #=\u0026gt; \"Ida Lupino\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first set of brackets refers to the \"row\" of \"spreadsheet\" of the AoH.  The\nsecond set of brackets refer to the \u003ccode\u003ekey\u003c/code\u003e used to get a \u003cem\u003evalue\u003c/em\u003e out of the\n\u003ccode\u003eHash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eModify Scalar Data In an Array of Hashes\u003c/h2\u003e\n\n\u003cp\u003eThe same technique of using coordinates applies both to reading and\nmodification. If you can \"target\" an element you can read it or update it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edirectors = [\u003cbr\u003e  {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"},\u003cbr\u003e  {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"},\u003cbr\u003e  {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003edirectors[0] #=\u0026gt; {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}\u003cbr\u003edirectors[0][:name] #=\u0026gt; \"Ida Lupino\"\u003cbr\u003edirectors[0][:name] = \"John Ford\" #=\u0026gt; \"John Ford\" \u003cbr\u003edirectors[0][:favorite_movie] = \"The Grapes of Wrath\" #=\u0026gt; \"The Grapes of Wrath\" \u003cbr\u003edirectors[0] #=\u0026gt; {:name=\u0026gt;\"John Ford\", :favorite_movie=\u0026gt;\"The Grapes of Wrath\" }\u003cbr\u003edirectors #=\u0026gt; =\u0026gt; [{:name=\u0026gt;\"John Ford\", :favorite_movie=\u0026gt;\"The Grapes of Wrath\"}, {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"}, {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can also replace inner \u003ccode\u003eHash\u003c/code\u003ees with new \u003ccode\u003eHash\u003c/code\u003ees:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edirectors = [\u003cbr\u003e  {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"},\u003cbr\u003e  {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"},\u003cbr\u003e  {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003edirectors[1] = { name: \"Cecil B. DeMille\", favorite_movie: \"Samson and Delilah\" }\u003cbr\u003edirectors #=\u0026gt; =\u0026gt; [{:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}, {:name=\u0026gt;\"Cecil B. DeMille\", :favorite_movie=\u0026gt;\"Samson and Delilah\"}, {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations, you've learned to use your second nested data structure: the\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees. You've seen that you can build them by building \u003ccode\u003eArray\u003c/code\u003es\nfilled with variables that point to \u003ccode\u003eHash\u003c/code\u003ees, or that you can use literal\nnotation to build them out.\u003c/p\u003e\n\n\u003cp\u003eYou've seen that you can use coordinates to look up elements in the AoH as well\nas update those elements. In the lab associated with this material, you'll have\na chance to make sure you've understood the basics.\u003c/p\u003e","exportId":"g826fcc697ade27aef984e56e2c08ed8e"},{"id":203718,"title":"Nested Structures Continued","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-structures\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-structures/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-structures\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-structures/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify that nested structures can be mixed\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've spent the last few lessons learning about a couple of basic nested structures:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es, or \"AoA\"\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees, or \"AoH\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn addition to these, we also have other basic structures:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees, or \"HoH\"\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es, or \"HoA\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou may not have worked with each structure yet, but you should be able to map out\nexamples of each of the above.\u003c/p\u003e\n\n\u003cp\u003eBy using these basic nested data structures, we've gained a foundation for\nmodeling many things in the world: vending machines, fictional characters,\nthe genealogy of a Hollywood family, and a medical record result-set.\u003c/p\u003e\n\n\u003cp\u003eBut brace yourself, here comes something astounding:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWe can nest nested data structures in other nested data structures\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eYour \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHashes\u003c/code\u003e (AoH) can have keys that point to \u003ccode\u003eArray\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es\n(AoA). Or your nested node structure of \u003ccode\u003eHash\u003c/code\u003ees of \u003ccode\u003eHash\u003c/code\u003ees (HoH) can have a\nkey that points to an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees (AoH). By using this mix-and-match\nprinciple, our NDS' can become very complex!\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we're going to walk you through an improved vending\nmachine model. Get a pen and some paper so that you can draw\npictures to help drive these points home. Using sketches will really\nhelp you \"get it.\" This is why developers in professional settings are\nalways sketching their NDS' whiteboards. It really works!\u003c/p\u003e\n\n\u003ch2\u003eDescribe a Physical Vending Machine\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/vending_grid.png\" alt=\"Grid-based vending machine\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe other week we saw a vending machine in a hospital waiting room. After\nswiping your credit card or using your phone's wallet, you entered a \u003cstrong\u003egrid\ncoordinate\u003c/strong\u003e.  At each intersection (coordinate) in the vending machine, there\nwas a \"spinner.\" Pay attention to this noun, \"spinner.\" We're going to use it a\nlot in the coming lessons. It's a device that looks like a corkscrew. It\n\u003cstrong\u003eholds multiple snack packages\u003c/strong\u003e in it.  When you've paid, the spinner spins\nand pushes the front-most snack off of the corkscrew \"spinner.\" The snack then\nfalls to a retrieval box.\u003c/p\u003e\n\n\u003cp\u003eOn each snack's packaging a price and a name.\u003c/p\u003e\n\n\u003cp\u003eWe've preferred to stick with \u003ccode\u003e:price\u003c/code\u003e and \u003ccode\u003e:name\u003c/code\u003e. We've also chosen to keep\nthe price value simple integers for clarity.\u003c/p\u003e\n\n\u003ch2\u003eIdentify that Nested Structures Can Be Mixed\u003c/h2\u003e\n\n\u003cp\u003eUltimately, in order to model a real grid-based vending machine (\u003ccode\u003eC20\u003c/code\u003e is a candy\nbar off of a spinner of gum packages, \u003ccode\u003eB50\u003c/code\u003e is a drink off of a spinner of\ndrinks), we think the right NDS is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArray of Array\n...of Array\n...of Hashes\n.....with keys `:name` and `:price` where\n.......:name points to a `String`\n.......:price points to an `Integer` price\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eYour\u003c/em\u003e Model May Vary\u003c/strong\u003e: It's certainly true that there are many other\ndetails that we could record in this model. Nutritional value, brand,\nmanufacturer, etc.\u003c/p\u003e\n\n\u003cp\u003eIf you think each coordinate should be a \u003ccode\u003eHash\u003c/code\u003e with a \u003ccode\u003e:price\u003c/code\u003e and an\n\u003ccode\u003eArray\u003c/code\u003e of snacks, that also might be entirely appropriate. Discussion of how\nto model an NDS is what developers spend a great number of their meetings and\npair programming sessions discussing!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe're giving you the answer so that you can think about how this might work for\nyourself. Draw it out on paper and see if you can predict how our explanation\nwill work. Teach your friend, your cat, or your imaginary friend Hogarth how \u003cstrong\u003e\u003cem\u003eyou\u003c/em\u003e\u003c/strong\u003e\nthink things work \u003cstrong\u003eand then\u003c/strong\u003e read the explanation below. Don't lose this chance\nto train your brain!\u003c/p\u003e\n\n\u003ch3\u003eExplain the Entire Vending Machine from the Top Down\u003c/h3\u003e\n\n\u003cpre\u003eWe have a coordinate grid. That's an AoA\nIn each coordinate, there's a \"spinner\" with multiple snacks\nEach snack has two important facts associated with it, a :name String and a :price\nInteger\n\u003c/pre\u003e\n\n\u003ch3\u003eExplain the Entire Vending Machine from the Bottom Up\u003c/h3\u003e\n\n\u003cp\u003eHere's a bottom-up view of the NDS:\u003c/p\u003e\n\n\u003cpre\u003eA price of the snack represented as an `Integer`\nEach snack has a name stored as a `String`\nEach snack collects those facts in a `Hash` that has keys `:name` and `:price`.\n\nMultiple snacks are stored in an indexed collection, an `Array`, that represents\nthe \"spinner\" device. Each \"spinner\" is accessible by a coordinate within an AoA \"grid.\"\nThe vending machine is the super-container AoA.\n\u003c/pre\u003e\n\n\u003cp\u003eWhichever approach feels more natural to you, feel free to use it. Sometimes\nour brains find a logical \"foothold\" while working bottom-up. Sometimes our\nbrains are thinking in a big-picture sense first. Either way is OK!\u003c/p\u003e\n\n\u003ch3\u003eShow the Data Structure as Ruby Code\u003c/h3\u003e\n\n\u003cp\u003eA real version of this data structure is the following. We've included the\nstructure, as well as a few Ruby commands, to get some sample data out of\nthe NDS.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evending_machine = [[[{:name=\u0026gt;\"Vanilla Cookies\", :price=\u0026gt;3},\u003cbr\u003e   {:name=\u0026gt;\"Pistachio Cookies\", :price=\u0026gt;3},\u003cbr\u003e   {:name=\u0026gt;\"Chocolate Cookies\", :price=\u0026gt;3},\u003cbr\u003e   {:name=\u0026gt;\"Chocolate Chip Cookies\", :price=\u0026gt;3}],\u003cbr\u003e  [{:name=\u0026gt;\"Tooth-Melters\", :price=\u0026gt;12},\u003cbr\u003e   {:name=\u0026gt;\"Tooth-Destroyers\", :price=\u0026gt;12},\u003cbr\u003e   {:name=\u0026gt;\"Enamel Eaters\", :price=\u0026gt;12},\u003cbr\u003e   {:name=\u0026gt;\"Dentist's Nightmare\", :price=\u0026gt;20}],\u003cbr\u003e  [{:name=\u0026gt;\"Gummy Sour Apple\", :price=\u0026gt;3},\u003cbr\u003e   {:name=\u0026gt;\"Gummy Apple\", :price=\u0026gt;5},\u003cbr\u003e   {:name=\u0026gt;\"Gummy Moldy Apple\", :price=\u0026gt;1}]],\u003cbr\u003e [[{:name=\u0026gt;\"Grape Drink\", :price=\u0026gt;1},\u003cbr\u003e   {:name=\u0026gt;\"Orange Drink\", :price=\u0026gt;1},\u003cbr\u003e   {:name=\u0026gt;\"Pineapple Drink\", :price=\u0026gt;1}],\u003cbr\u003e  [{:name=\u0026gt;\"Mints\", :price=\u0026gt;13},\u003cbr\u003e   {:name=\u0026gt;\"Curiously Toxic Mints\", :price=\u0026gt;1000},\u003cbr\u003e   {:name=\u0026gt;\"US Mints\", :price=\u0026gt;99}]]] #=\u0026gt; [[[{:name=\u0026gt;\"Vanilla Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Pistachio Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Chocolate Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Chocolate Chip Cookies\", :price=\u0026gt;3}], [{:name=\u0026gt;\"Tooth-Melters\", :price=\u0026gt;12}, {:name=\u0026gt;\"Tooth-Destroyers\", :price=\u0026gt;12}, {:name=\u0026gt;\"Enamel Eaters\", :price=\u0026gt;12}, {:name=\u0026gt;\"Dentist's Nightmare\", :price=\u0026gt;20}], [{:name=\u0026gt;\"Gummy Sour Apple\", :price=\u0026gt;3}, {:name=\u0026gt;\"Gummy Apple\", :price=\u0026gt;5}, {:name=\u0026gt;\"Gummy Moldy Apple\", :price=\u0026gt;1}]], [[{:name=\u0026gt;\"Grape Drink\", :price=\u0026gt;1}, {:name=\u0026gt;\"Orange Drink\", :price=\u0026gt;1}, {:name=\u0026gt;\"Pineapple Drink\", :price=\u0026gt;1}], [{:name=\u0026gt;\"Mints\", :price=\u0026gt;13}, {:name=\u0026gt;\"Curiously Toxic Mints\", :price=\u0026gt;1000}, {:name=\u0026gt;\"US Mints\", :price=\u0026gt;99}]]]\u003cbr\u003e\u003cbr\u003e# Get a \"spinner\"\u003cbr\u003evending_machine[0][0] #=\u0026gt; [{:name=\u0026gt;\"Vanilla Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Pistachio Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Chocolate Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Chocolate Chip Cookies\", :price=\u0026gt;3}]\u003cbr\u003e\u003cbr\u003e# Get a spinner's first snack\u003cbr\u003evending_machine[1][1][0] #=\u0026gt; {:name=\u0026gt;\"Mints\", :price=\u0026gt;13}\u003cbr\u003e\u003cbr\u003e# Get a spinner's first snack's price value\u003cbr\u003evending_machine[1][1][0][:price] #=\u0026gt; 13\u003cbr\u003e\u003cbr\u003e# Work with a single snack\u003cbr\u003etest_snack = vending_machine[0][1][0]\u003cbr\u003etest_snack[:price] #=\u0026gt; 12\u003cbr\u003etest_snack[:name] #=\u0026gt; \"Tooth-Melters\"\u003cbr\u003e\u003cbr\u003e# Print out some fun data\u003cbr\u003eputs \"I'm definitely thinking about buying #{test_snack[:name]} and sharing my $#{test_snack[:price]} investment\"\u003cbr\u003e#=\u0026gt; I'm definitely thinking about buying Tooth-Melters and sharing my $12 investment\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eNext Step: Working with the Nested Data Structure\u003c/h3\u003e\n\n\u003cp\u003eRecall the opening lesson of this section. We described John Snow building up\ncomplex maps to discover who had died during a cholera outbreak in\nmid-19\u003csup\u003eth\u003c/sup\u003e century London. At this point, we can build an NDS that\nrepresents a series of facts just as John Snow's surveys did.\u003c/p\u003e\n\n\u003cp\u003eBut that's not \u003cem\u003einsight\u003c/em\u003e. \u003cem\u003eInsight\u003c/em\u003e is when we pair data structures and Ruby\nprogramming to provide answers that enlighten us as \u003cem\u003ehumans\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo let's choose an \u003cem\u003einsight\u003c/em\u003e to pursue that will help guide the rest of this\nmodule.  Our guiding \u003cem\u003einsight\u003c/em\u003e question for the next several lessons is this:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWhat is the total retail value of all the snacks in this vending machine?\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNDS' serve to help us model complex data structures. As you seek to model the\nreal world, you'll build hybrids of the four simple data structures we taught\nyou. In time, you'll find ways to make lookups and updates in those structures\nfaster. Programs that excel at updating and retrieving information from data\nstructures are called \u003cem\u003edatabases\u003c/em\u003e. We didn't want to scare you, but learning to\nbuild NDS' is your first step toward learning to write \u003cem\u003edatabases\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLater you'll learn how to store your NDS outside of your Ruby code (typically\nin a \"data file\"), but for now it's OK to keep the data you work on and the\ncode with which you work on it in the same file.\u003c/p\u003e\n\n\u003cp\u003e...By the way, the total value is $\u003ccode\u003e1192\u003c/code\u003e in the vending machine.  Let's\nfind out how to calculate that \u003cem\u003einsight\u003c/em\u003e.\u003c/p\u003e","exportId":"nested-structures-continued"},{"id":203719,"title":"Nested Data Structures to Insights","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nds-to-insights\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nds-to-insights/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nds-to-insights\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nds-to-insights/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBy now you've seen the power of nested data structures (NDS) to represent the\nworld around us. NDS are giant collections of facts, like an encyclopedia. We\nhave to take the knowledge from an encyclopedia and do work with those facts to\ncreate new \u003cem\u003einsights\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example, by researching Colombia, the history of soccer, and South American\nhistory, we can write a report about \"Soccer in South America.\" We can\n\u003cem\u003esynthesize\u003c/em\u003e facts into \u003cem\u003einsight\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe do the same with NDS. By applying code to NDS, we can \u003cem\u003esynthesize\u003c/em\u003e insights\nfrom the raw facts contained in the NDS.\u003c/p\u003e\n\n\u003cp\u003eHere are some examples:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\"What's the average age of people in the NDS representing a class of students?\"\u003c/li\u003e\n\u003cli\u003e\"How many pieces of candy are in this vending machine?\"\u003c/li\u003e\n\u003cli\u003e\"In what year will most of my employees reach retirement age so I can plan\n401K contributions?\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut sometimes it can be downright scary to get started. You get a big old blob\nof \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003e literals and you get stuck. Never\nfear!  In this lesson, we're going to show you a process that will help you get\nstarted whenever you have an NDS that you need to process for insights.\u003c/p\u003e\n\n\u003ch2\u003eNDS to Insight Strategy\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the NDS\n\n\u003cul\u003e\n\u003cli\u003e\"Pretty-Print\" NDS with \u003ccode\u003epp\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eHome-Grown Pretty-Print NDS\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e[]\u003c/code\u003e to verify your understanding from Step 1\n\n\u003cul\u003e\n\u003cli\u003ePrint values to verify your understanding\u003c/li\u003e\n\u003cli\u003eLeave code comments and documentation for yourself\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWrap uses of \u003ccode\u003e[]\u003c/code\u003e from Step 2 into new methods\n\n\u003cul\u003e\n\u003cli\u003eCreate simple methods with meaningful names (\"First-Order Methods\")\u003c/li\u003e\n\u003cli\u003eEnsure \"First-Order Methods\" use arguments to create flexibility\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSee-saw between bottom-up and top-down method writing\n\n\u003cul\u003e\n\u003cli\u003eWrite a method that provides an insight e.g. \u003ccode\u003eoldest_student\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eEvaluate your First Order Methods\u003c/li\u003e\n\u003cli\u003eCan you use your First-Order Methods to build the insight method's\nimplementation?\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eYES\u003c/strong\u003e: Great! Your method is done!\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eNO\u003c/strong\u003e: Build a new method that combines \u003cem\u003eother\u003c/em\u003e methods to get closer to what the insight method needs. Repeat step 4\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eInsight method provides an insight! We're done!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe'll explain all these terms in the strategy in the coming lessons.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eLearning Strategy\u003c/strong\u003e: Read over the strategy and see if you can formulate\nquestions you expect us to answer example. Cognitive research suggests that\n\u003cem\u003eyou\u003c/em\u003e learn more when you have an overview that you don't fully understand\nthat you expect us to fill in!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe recommend printing this list out and keep it handy as you complete labs that\nrequire you to transform NDS' into \u003cem\u003einsights\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn Renaissance Florence, a large block of marble sat for twenty-six years,\nunfinished. Rain, sun, snow, it sat because no one was brave enough to face\nsuch an enormous task.  It took a person of courage and conviction to make that\nfirst chip in it. His name was Michaelangelo Buonarotti. \"The Giant\" became the\nmasterpiece, \"David.\"\u003c/p\u003e\n\n\u003cp\u003eStarting large programs that center on huge NDS can feel like facing \"The\nGiant.\" This process gives you the confidence to make the first chip.\u003c/p\u003e\n\n\u003cp\u003eAt Flatiron School, we've seen that most students get the basics of programming\neasily: variables, statements, loops, all that. But what stymies \u003cstrong\u003e\u003cem\u003eall\u003c/em\u003e\u003c/strong\u003e\ndevelopers — all \u003cem\u003ecreators\u003c/em\u003e as the story of \"The Giant\" demonstrates\n— is not being able to get started. This strategy is designed to help you\nget over that initial activation cliff and get on your way.\u003c/p\u003e\n\n\u003cp\u003eWhile it might feel silly to think this carefully about process, we can promise\nyou that students who have process don't get overwhelmed and give up before\nthey've even begun. Take this process seriously, and you'll find yourself\nvaccinated against \"getting started\" anxiety!\u003c/p\u003e\n\n\u003cp\u003eLet's learn to make masterpieces.\u003c/p\u003e","exportId":"nested-data-structures-to-insights"},{"id":203720,"title":"Iterating Over Nested Hashes","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"nested-hash-iteration\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIterate over a nested hash\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIterating Over Nested Hashes\u003c/h2\u003e\n\n\u003cp\u003eAt this point you should be familiar with iterating over hashes that have one\nlevel — a series of key/value pairs on a single tier. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejon_snow = {\u003cbr\u003e  name: \"Jon\",\u003cbr\u003e  email: \"jon_snow@thewall.we\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens when we want to iterate over a multidimensional hash like the one\nbelow? Let's iterate over our nested hash one level at a time; iterating over\nthe first level of our hash would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts = {\u003cbr\u003e  \"Jon Snow\" =\u0026gt; {\u003cbr\u003e    name: \"Jon\",\u003cbr\u003e    email: \"jon_snow@thewall.we\",\u003cbr\u003e    favorite_ice_cream_flavors: [\"chocolate\", \"vanilla\", \"mint chip\"],\u003cbr\u003e    knows: nil\u003cbr\u003e  },\u003cbr\u003e  \"Freddy Mercury\" =\u0026gt; {\u003cbr\u003e    name: \"Freddy\",\u003cbr\u003e    email: \"freddy@mercury.com\",\u003cbr\u003e    favorite_ice_cream_flavors: [\"strawberry\", \"cookie dough\", \"mint chip\"]\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econtacts.each do |person, data|\u003cbr\u003e  puts \"#{person}: #{data}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eJon Snow:\u003cbr\u003e{ :name=\u0026gt;\"Jon\",\u003cbr\u003e  :email=\u0026gt;\"jon_snow@thewall.we\",\u003cbr\u003e  :favorite_ice_cream_flavors=\u0026gt;[\"chocolate\", \"vanilla\", \"mint chip\"],\u003cbr\u003e  :knows=\u0026gt;nil\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eFreddy Mercury:\u003cbr\u003e{ :name=\u0026gt;\"Freddy\",\u003cbr\u003e:email=\u0026gt;\"freddy@mercury.com\",\u003cbr\u003e:favorite_ice_cream_flavors=\u0026gt;[\"strawberry\", \"cookie dough\", \"mint chip\"]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn the first level, the keys are our contacts' names, \"Jon Snow\" and \"Freddy\nMercury\", and our values are the hashes that contain a series of key/value pairs\ndescribing them.\u003c/p\u003e\n\n\u003cp\u003eLet's iterate over the second level of our \u003ccode\u003econtacts\u003c/code\u003e hash. In order to access\nthe key/value pairs of the second tier (i.e. the name, email, and other data\nabout each contact), we need to iterate \u003cem\u003edown into\u003c/em\u003e that level. So, we pick up\nwhere we left off with the previous iteration and we keep going:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, data|\u003cbr\u003e  #at this level, \"person\" is Jon Snow or Freddy Mercury and \"data\" is a hash of\u003cbr\u003e  #key/value pairs to iterate over the \"data\" hash, we can use the following line:\u003cbr\u003e\u003cbr\u003e  data.each do |attribute, value|\u003cbr\u003e    puts \"#{attribute}: #{value}\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat should output the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003ename: Jon\u003cbr\u003eemail: jon_snow@thewall.we\u003cbr\u003efavorite_ice_cream_flavors: [\"chocolate\", \"vanilla\", \"mint chip\"]\u003cbr\u003eknows: nil\u003cbr\u003e\u003cbr\u003ename: Freddy\u003cbr\u003eemail: freddy@mercury.com\u003cbr\u003efavorite_ice_cream_flavors: [\"strawberry\", \"cookie dough\", \"mint chip\"]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take it one step further and print out \u003cem\u003ejust the favorite ice cream\nflavors\u003c/em\u003e. Once again, we'll need to iterate down into that level of the hash,\nthen we can access the favorite ice cream array and print out the flavors:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, data|\u003cbr\u003e  #at this level, \"person\" is Jon Snow or Freddy and \"data\" is a hash of\u003cbr\u003e  #key/value pairs to iterate over the \"data\" hash, we can use the following\u003cbr\u003e  #line:\u003cbr\u003e\u003cbr\u003e  data.each do |attribute, value|\u003cbr\u003e    #at this level, \"attribute\" describes the key of :name, :email,\u003cbr\u003e    #:favorite_ice_cream_flavors, or :knows we need to first check and see if\u003cbr\u003e    #the key is :favorite_ice_cream_flavors, if it is, that means the VALUE is\u003cbr\u003e    #an array that we can iterate over to print out each element\u003cbr\u003e\u003cbr\u003e    if attribute == :favorite_ice_cream_flavors\u003cbr\u003e      value.each do |flavor|\u003cbr\u003e        # here, each index element in an ice cream flavor string\u003cbr\u003e        puts \"#{flavor}\"\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003echocolate\u003cbr\u003evanilla\u003cbr\u003emint chip\u003cbr\u003estrawberry\u003cbr\u003ecookie dough\u003cbr\u003emint chip\n\u003c/code\u003e\u003c/pre\u003e","exportId":"iterating-over-nested-hashes"},{"id":203721,"title":"Manipulating Nested Hashes Code-Along","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"nested-hash-iteration-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration-code-along/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIterate through a nested hash\u003c/li\u003e\n\u003cli\u003eModify the correct element in a nested hash\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Nested Hashes Matter\u003c/h2\u003e\n\n\u003cp\u003eSo much of what we do in programming involves storing data in hashes. Often the\nhashes that we will encounter will have more than one level. As we get into the\nweb, this will become abundantly clear. To build programs in the future, we'll\nabsolutely need to get comfortable working with hashes. Let's get started!\u003c/p\u003e\n\n\u003ch2\u003eCode Along Exercise\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lab. You'll be coding your solution in \u003ccode\u003elib/contacts.rb\u003c/code\u003e.\nYou'll be manipulating the following \u003ccode\u003eHash\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts = {\u003cbr\u003e  \"Jon Snow\" =\u0026gt; {\u003cbr\u003e    name: \"Jon\",\u003cbr\u003e    email: \"jon_snow@thewall.we\",\u003cbr\u003e    favorite_ice_cream_flavors: [\"chocolate\", \"vanilla\"]\u003cbr\u003e  },\u003cbr\u003e  \"Freddy Mercury\" =\u0026gt; {\u003cbr\u003e    name: \"Freddy\",\u003cbr\u003e    email: \"freddy@mercury.com\",\u003cbr\u003e    favorite_ice_cream_flavors: [\"strawberry\", \"cookie dough\", \"mint chip\"]\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour good buddy Freddy Mercury has recently developed a strawberry allergy! You\nneed to delete \u003ccode\u003e\"strawberry\"\u003c/code\u003e from his list of favorite ice cream flavors in the\n\u003ccode\u003eremove_strawberry\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eIterate over the \u003ccode\u003econtacts\u003c/code\u003e hash and when you reach the key\n\u003ccode\u003e:favorite_ice_cream_flavors\u003c/code\u003e, remove \u003ccode\u003e\"strawberry\"\u003c/code\u003e from the Array of Freddy's\nfavorite ice cream flavors.\u003c/p\u003e\n\n\u003cp\u003eThere are at least two ways you can accomplish this, and for this codealong,\nwe'll work with the second way.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eYou can directly iterate over the hash that is the value of the \u003ccode\u003e\"Freddy\nMercury\"\u003c/code\u003e key by calling an enumerator method in \u003ccode\u003econtacts[\"Freddy Mercury\"]\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou can set a conditional to iterate through the hash for \u003ccode\u003eFreddy Mercury\u003c/code\u003e \nonly; when you reach the appropriate level, check to see if the key \u003ccode\u003e==\u003c/code\u003e \n(\"is equal to\") \u003ccode\u003e:favorite_ice_cream_flavors\u003c/code\u003e. If it is, check to see if the \narray of flavors contains \u003ccode\u003e\"strawberry\"\u003c/code\u003e. If it does, then delete it from the \n\u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003eStep 1: Iterate over the first level\u003c/h4\u003e\n\n\u003cp\u003eInside the \u003ccode\u003eremove_strawberry\u003c/code\u003e method, let's take our first dive into the\ncontacts \u003ccode\u003eHash\u003c/code\u003e. Then we'll use \u003ccode\u003ebinding.pry\u003c/code\u003e to see where we are.\u003c/p\u003e\n\n\u003cp\u003eWe are going to first iterate over the top level of the \u003ccode\u003eHash\u003c/code\u003e where the keys\nshould be the person and the values should be a \u003ccode\u003eHash\u003c/code\u003e  of details about the\nperson.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote on variable naming:\u003c/strong\u003e This process will be remarkably easier if you name\nyour variables to accurately reflect the data they represent. For now, when the\nvalue we're iterating over is another hash, we will explicitly add a \u003ccode\u003e_hash\u003c/code\u003e to\nthe end of the variable name (E.G. \u003ccode\u003econtact_details_hash\u003c/code\u003e below).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, contact_details_hash|\u003cbr\u003e  binding.pry\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can enter the \u003ccode\u003epry\u003c/code\u003e in one of two ways: by running \u003ccode\u003elearn test\u003c/code\u003e or by\nrunning \u003ccode\u003eruby lib/contacts.rb\u003c/code\u003e. We'll use \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's run \u003ccode\u003elearn test\u003c/code\u003e in the terminal and, at the \u003ccode\u003epry\u003c/code\u003e prompt, check that \nour defined variables (\u003ccode\u003eperson\u003c/code\u003e and \u003ccode\u003econtact_details_hash\u003c/code\u003e) match our \nexpectations.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; person\u003cbr\u003e=\u0026gt; \"Jon Snow\"\u003cbr\u003e\u003cbr\u003e\u0026gt; contact_details_hash\u003cbr\u003e=\u0026gt; {:name=\u0026gt;\"Jon\", :email=\u0026gt;\"jon_snow@thewall.we\", :favorite_ice_cream_flavors=\u0026gt;[\"chocolate\", \"vanilla\"]}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExcellent! They do!\u003c/p\u003e\n\n\u003cp\u003eType \u003ccode\u003eexit\u003c/code\u003e while in \u003ccode\u003epry\u003c/code\u003e to continue. The \u003ccode\u003epry\u003c/code\u003e should trigger a second time \nbecause we have \u003cem\u003etwo\u003c/em\u003e contacts. You can verify that we're in the second loop \nthrough our hash by checking the values of \u003ccode\u003eperson\u003c/code\u003e and \u003ccode\u003edata\u003c/code\u003e at the \u003ccode\u003epry\u003c/code\u003e \nprompt. \u003c/p\u003e\n\n\u003cp\u003eTyping \u003ccode\u003eexit\u003c/code\u003e now will end the loop and exit \u003ccode\u003epry\u003c/code\u003e since we've finished \niterating through our contacts. It will also display the results of the test, \nwhich we haven't passed just yet.\u003c/p\u003e\n\n\u003ch4\u003eStep 2. Iterate over the second level\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, contact_details_hash|\u003cbr\u003e  if person == \"Freddy Mercury\"\u003cbr\u003e    contact_details_hash.each do |attribute, data|\u003cbr\u003e      binding.pry\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAgain, let's jump into our \u003ccode\u003ebinding.pry\u003c/code\u003e using \u003ccode\u003elearn test\u003c/code\u003e. We can verify\nthat we've found the record for Freddy Mercury by checking the values\nof our variables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; attribute\u003cbr\u003e=\u0026gt; :name\u003cbr\u003e\u003cbr\u003e\u0026gt; data\u003cbr\u003e=\u0026gt; \"Freddy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore we move on, you will need to exit \u003ccode\u003epry\u003c/code\u003e again so you can see the\nresults of the new code we'll be writing in Step 3. We are now inside the \nloop through the attributes. Because there are three of them, we will need \nto run \u003ccode\u003eexit\u003c/code\u003e three times to finish the loop and exit \u003ccode\u003epry\u003c/code\u003e. Alternatively, \nyou can run \u003ccode\u003eexit!\u003c/code\u003e or \u003ccode\u003e!!!\u003c/code\u003e at any time to exit out of \u003ccode\u003epry\u003c/code\u003e entirely.\u003c/p\u003e\n\n\u003ch4\u003eStep 3. Locate the element we're looking for\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, contact_details_hash|\u003cbr\u003e  if person == \"Freddy Mercury\"\u003cbr\u003e    contact_details_hash.each do |attribute, data|\u003cbr\u003e      if attribute == :favorite_ice_cream_flavors\u003cbr\u003e        binding.pry\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis time we are still iterating through the attributes but we've added a\nconditional so the \u003ccode\u003epry\u003c/code\u003e will only hit when the attribute is equal to\n\u003ccode\u003e:favorite_ice_cream_flavors\u003c/code\u003e. If we check the value of \u003ccode\u003edata\u003c/code\u003e in our \nbinding, we should see the array containing Freddy's favorite flavors.\u003c/p\u003e\n\n\u003ch4\u003eStep 4. Update the hash\u003c/h4\u003e\n\n\u003cp\u003eLastly, we will use \u003ccode\u003edelete_if\u003c/code\u003e to iterate through the ice cream array and\nremove any element that matches \"strawberry\". Recall that \u003ccode\u003edata\u003c/code\u003e is the array\ncontaining Freddy's favorite ice cream flavors. \u003ccode\u003edelete_if\u003c/code\u003e will iterate through\nthe array, check each element to see if it is equal to \"strawberry\", and delete \nthe key/value pair if the block returns \u003ccode\u003etrue\u003c/code\u003e. \u003ca href=\"https://docs.ruby-lang.org/en/2.0.0/Hash.html#method-i-delete_if\"\u003eLearn more about it in the ruby \ndocs.\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, contact_details_hash|\u003cbr\u003e  if person == \"Freddy Mercury\"\u003cbr\u003e    contact_details_hash.each do |attribute, data|\u003cbr\u003e      if attribute == :favorite_ice_cream_flavors\u003cbr\u003e        data.delete_if {|ice_cream| ice_cream == \"strawberry\"}\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe full method should now be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef remove_strawberry(contacts)\u003cbr\u003e  contacts.each do |person, contact_details_hash|\u003cbr\u003e    if person == \"Freddy Mercury\"\u003cbr\u003e      contact_details_hash.each do |attribute, data|\u003cbr\u003e        if attribute == :favorite_ice_cream_flavors\u003cbr\u003e          data.delete_if {|ice_cream| ice_cream == \"strawberry\"}\u003cbr\u003e        end\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCongrats! You made it. Test that your method works by running \u003ccode\u003eruby\nbin/contacts\u003c/code\u003e in the terminal. It should output the hash without strawberry ice\ncream. Also, be sure to run the specs to make sure they pass.\u003c/p\u003e","exportId":"gc55b6ccef10de7b662ed9a697c68d35a"},{"id":203722,"title":"Higher Level Hash Methods","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"other-hash-methods-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/other-hash-methods-code-along/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/other-hash-methods-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/other-hash-methods-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the \u003ccode\u003e#values\u003c/code\u003e method to return the values in a hash\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#keys\u003c/code\u003e method to return the keys in a hash\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#min\u003c/code\u003e method to return the minimum value of hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's learn some interesting methods we can call on hashes. Previously, you were asked to iterate over a hash and collect the key that pointed to the lowest value. We asked you not to use some of the higher level hash methods there. Now, we're going to learn a few tricks that can make a task like that much easier.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#values\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eYou can collect all of the values in a hash with the \u003ccode\u003e#values\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries = {fruit: \"Banana\", vegetable: \"Broccoli\", dessert: \"Cookie\"}\u003cbr\u003e\u003cbr\u003egroceries.values\u003cbr\u003e#  =\u0026gt; [\"Banana\", \"Broccoli\", \"Cookie\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that the \u003ccode\u003e#values\u003c/code\u003e method returns an array of the values of the keys in the hash.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#keys\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method, not surprisingly, returns an array containing all of the keys in the hash that \u003ccode\u003e#keys\u003c/code\u003e has been called on:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries = {fruit: \"Banana\", vegetable: \"Broccoli\", dessert: \"Cookie\"}\u003cbr\u003e\u003cbr\u003egroceries.keys\u003cbr\u003e#  =\u0026gt; [:fruit, :vegetable, :dessert]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003e#min\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eYou can use the \u003ccode\u003e#min\u003c/code\u003e method on a hash to return the key/value \u003cem\u003epair\u003c/em\u003e whose key is the \u003cstrong\u003elowest\u003c/strong\u003e value. What return type can return two different things? Arrays!:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters = {a: 1, b: 2}\u003cbr\u003e\u003cbr\u003eletters.min\u003cbr\u003e#  =\u0026gt; [:a, 1]\u003cbr\u003e\u003cbr\u003ealphabetical_order = {c: 100, d: 1}\u003cbr\u003ealphabetical_order.min\u003cbr\u003e#  =\u0026gt; [c:, 100] # Because the key :c is lower than :d in alphabetical order.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese are only a few of the many helpful methods out there. Be sure to check out the \u003ca href=\"http://ruby-doc.org/core/Hash.html\"\u003eRuby Docs on Hashes\u003c/a\u003e to learn more.\u003c/p\u003e\n\n\u003cp\u003eLet's practice before you move on to the next challenge:\u003c/p\u003e\n\n\u003ch2\u003eCode Along: Manipulating Nested Hashes\u003c/h2\u003e\n\n\u003cp\u003eYou'll be coding your solution to this challenge in \u003ccode\u003elib/values.rb\u003c/code\u003e, \u003ccode\u003elib/keys.rb\u003c/code\u003e, and \u003ccode\u003elib/min.rb\u003c/code\u003e. We have a nested hash of grocery items.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries = {\u003cbr\u003e  dairy: [\"milk\", \"yogurt\", \"cheese\"],\u003cbr\u003e  vegetable: [\"carrots\", \"broccoli\", \"cucumbers\"],\u003cbr\u003e  meat: [\"chicken\", \"steak\", \"salmon\"],\u003cbr\u003e  grains: [\"rice\", \"pasta\"]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eChallenge 1: Return the keys\u003c/h2\u003e\n\n\u003cp\u003eUse the \u003ccode\u003e#keys\u003c/code\u003e method to collect all of the keys of the hash. This one is simple enough.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries.keys\u003cbr\u003e#=\u0026gt; [:dairy, :vegetable, :meat, :grains]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter you have written the correct code in \u003ccode\u003elib/keys\u003c/code\u003e, check the return value of your method by running \u003ccode\u003eruby bin/keys\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003ch2\u003eChallenge 2: Return the values\u003c/h2\u003e\n\n\u003cp\u003eUse the \u003ccode\u003e#values\u003c/code\u003e method to collect all of the values of the grocery type keys (\u003ccode\u003e:dairy\u003c/code\u003e, \u003ccode\u003e:vegetables\u003c/code\u003e, \u003ccode\u003e:meat\u003c/code\u003e, \u003ccode\u003e:grains\u003c/code\u003e). The method should return a \u003cem\u003eone-dimensional\u003c/em\u003e (or \"flat\") array that \u003cem\u003eonly\u003c/em\u003e includes the values (groceries such as \"milk\" and \"carrots\") without their keys.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e What happens when you call \u003ccode\u003e#values\u003c/code\u003e on a nested hash? What is the return value? How can you \u003cem\u003eflatten\u003c/em\u003e an array of arrays? Make sure to use \u003ccode\u003ebinding.pry\u003c/code\u003e to help you solve this one.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries.values\u003cbr\u003e#=\u0026gt; [[\"milk\", \"yogurt\", \"cheese\"], [\"carrots\", \"broccoli\", \"cucumbers\"], [\"chicken\", \"steak\", \"salmon\"], [\"rice\", \"pasta\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, to get all the values in a flat array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries.values.flatten\u003cbr\u003e#=\u0026gt; [\"milk\", \"yogurt\", \"cheese\", \"carrots\", \"broccoli\", \"cucumbers\", \"chicken\", \"steak\", \"salmon\", \"rice\", \"pasta\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter you have written the correct code in \u003ccode\u003elib/values\u003c/code\u003e, check the return value of your method by running \u003ccode\u003eruby bin/values\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003ch2\u003eChallenge 3: Return the min\u003c/h2\u003e\n\n\u003cp\u003eUse the \u003ccode\u003e#min\u003c/code\u003e method to collect the value that comes first alphabetically (\"broccoli\").\u003c/p\u003e\n\n\u003ch3\u003eStep 1. Grab all the grocery values\u003c/h3\u003e\n\n\u003cp\u003eLucky for us, we already did this in Challenge 2. If we call, \u003ccode\u003egroceries.values.flatten\u003c/code\u003e we should get back: \u003ccode\u003e[\"milk\", \"yogurt\", \"cheese\", \"carrots\", \"broccoli\", \"cucumbers\", \"chicken\", \"steak\", \"salmon\", \"rice\", \"pasta\"]\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eStep 2. Get the minimum value\u003c/h3\u003e\n\n\u003cp\u003eSimply calling \u003ccode\u003e#min\u003c/code\u003e on what we did in Step 1 should do the trick:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries.values.flatten.min\u003cbr\u003e#=\u0026gt; \"broccoli\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter you have written the correct code in \u003ccode\u003elib/min\u003c/code\u003e, check the return value of your method by running \u003ccode\u003eruby bin/min\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003cp\u003eNote: \u003ccode\u003e#min\u003c/code\u003e will also work for the entire hash. Play around in pry to see what is returned when you call \u003ccode\u003egroceries.min\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby-doc.org/core/Hash.html\"\u003eRuby Docs on Hashes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g0ba407ff4efc069f2f001a95ed8795ed"},{"id":203723,"title":"Iterating Over Hashes - Apples and Holidays Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"apples-and-holidays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/apples-and-holidays/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/apples-and-holidays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/apples-and-holidays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIterate over nested, or multidimensional, hashes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eThe Holiday Suppliers\u003c/h2\u003e\n\n\u003ch3\u003eInstructions\u003c/h3\u003e\n\n\u003cp\u003eYou have a bunch of decorations for various holidays organized by season.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eholiday_supplies = {\u003cbr\u003e  :winter =\u0026gt; {\u003cbr\u003e    :christmas =\u0026gt; [\"Lights\", \"Wreath\"],\u003cbr\u003e    :new_years =\u0026gt; [\"Party Hats\"]\u003cbr\u003e  },\u003cbr\u003e  :summer =\u0026gt; {\u003cbr\u003e    :fourth_of_july =\u0026gt; [\"Fireworks\", \"BBQ\"]\u003cbr\u003e  },\u003cbr\u003e  :fall =\u0026gt; {\u003cbr\u003e    :thanksgiving =\u0026gt; [\"Turkey\"]\u003cbr\u003e  },\u003cbr\u003e  :spring =\u0026gt; {\u003cbr\u003e    :memorial_day =\u0026gt; [\"BBQ\"]\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWrite your methods in \u003ccode\u003elib/holiday.rb\u003c/code\u003e; use the comments in each method as\nguides.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a method that returns the second supply for the Fourth of July. For\nexample:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003edef second_supply_for_fourth_of_july(holiday_supplies)\u003cbr\u003e  holiday_supplies[:summer][:fourth_of_july][1]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWrite a method that adds a supply to both Winter holidays.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWrite a method that adds a supply to Memorial Day.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWrite a method that adds a new holiday and its associated supplies to any\nseason.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWrite a method to collect all Winter supplies from all the winter holidays.\nFor example:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003ewinter_supplies(holiday_supplies) #=\u0026gt; [\"Lights\", \"Wreath\", etc]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWrite a method that uses a loop to list out all the supplies you have for each\nholiday and the season. Use string manipulation to get your output to match\nwhat the test is expecting.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHere are a few helpful tips:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOur hash keys are symbols. We need to convert them into strings. Use the\n\u003ccode\u003e.to_s\u003c/code\u003e method on a symbol to convert it into a string.\u003c/li\u003e\n\u003cli\u003eLook closely at the output string that the test is expecting. You'll notice\nthat it expects holiday names, like \"New Years\", to have both words\ncapitalized. Ruby has a \u003ccode\u003e.capitalize\u003c/code\u003e method that you can call on a string.\n\u003cstrong\u003eBut, note:\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e.capitalize\u003c/code\u003e returns the capitalized string but \u003cem\u003edoesn't change\u003c/em\u003e the\noriginal string. So, when you call on that same string in the future, it\n\u003cem\u003eisn't capitalized!\u003c/em\u003e You can capitalize a string for now and evermore by\nusing the bang operator (\u003ccode\u003e!\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eYou'll need to capitalize \u003cem\u003eboth words\u003c/em\u003e in a given holiday's name. If you\ncall \u003ccode\u003e\"new years\".capitalize!\u003c/code\u003e, it will return \u003ccode\u003e\"New years\"\u003c/code\u003e. In order to\ncapitalize \u003cem\u003eboth\u003c/em\u003e words, you'll need to \u003ccode\u003e.split\u003c/code\u003e the string into an array\nand iterate over that array to \u003ccode\u003e.capitalize!\u003c/code\u003e each word in it. Then, you'll\nneed to \u003ccode\u003e.join\u003c/code\u003e the array back into a string.\u003c/li\u003e\n\u003cli\u003eIf you're unfamiliar with the methods mentioned above, look them up in the\nRuby documentation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eExample of expected output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWinter:\u003cbr\u003e  Christmas: Lights, Wreath\u003cbr\u003e  New Years: Party Hats\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWrite a method to collect all holidays with \"BBQ\" in the supply array. The\nmethod should behave as seen below:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eholidays_with_bbqs(holiday_supplies)\u003cbr\u003e#=\u0026gt; [:fourth_of_july, :memorial_day]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e This is a challenging lab, so remember to use Pry, Google, and the Flatiron School community to help you get the tests passing.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://stackoverflow.com/questions/5544858/accessing-elements-of-nested-hashes-in-ruby\"\u003eStackOverflow: Accessing Elements of Nested Hashes in Ruby\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://blog.honeybadger.io/advanced-ruby-hash-techniques/\"\u003ehoneybadger - Advanced Ruby Hash Techniques\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g0f1e3880f1f691661289e5d0091da0b7"}]},{"id":21887,"name":"Introduction to Object-Orientation in Ruby","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gdbb1466fabf2292bd4846f2687b86111","items":[{"id":203724,"title":"Introduction to Object-Oriented Ruby","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-introduction-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eObject-oriented programming (OOP) is a type of programming based on the concept\nof \"objects\", which can contain data, in the form of fields (often known as\nattributes or properties), and code, in the form of procedures (often known as\nmethods). OOP is all about being able to structure code so that its\nfunctionality can be shared throughout the application. This is opposed to\nprocedural programming (PP), in which you build programs in sequential order and\ncall methods when you want shared behavior between pages in the application.\u003c/p\u003e\n\n\u003cp\u003eWe'll be discussing these basics of OOP in Ruby:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLocal variables and instance variables\u003c/li\u003e\n\u003cli\u003eInstance methods\u003c/li\u003e\n\u003cli\u003eSetting instance variables from initialize\u003c/li\u003e\n\u003cli\u003eGlobal variables\u003c/li\u003e\n\u003cli\u003eVariable scope\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003enew\u003c/code\u003e class method\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRuby is a powerful object-oriented language used by popular applications. In the\nupcoming lessons we'll build the foundational knowledge of OOP to be well on\nyour way to developing your own!\u003c/p\u003e","exportId":"introduction-to-object-oriented-ruby"},{"id":203725,"title":"Defining Object-Orientation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-defining-object-orientation\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-defining-object-orientation/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-defining-object-orientation\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-defining-object-orientation/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll introduce the concept of Object-Oriented Programming (OOP)\u003c/p\u003e\n\n\u003ch2\u003eObject-Oriented Programming (OOP)\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003eAn object-oriented approach to application development makes programs more intuitive to design, faster to develop, more amenable to modification, and easier to understand.\u003c/em\u003e\u003cbr\u003e\n—\u003ca href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/OOP_ObjC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005149-CH1-SW2\"\u003e\u003cem\u003eObject-Oriented Programming with Objective-C\u003c/em\u003e\u003c/a\u003e, Apple Inc.\u003c/p\u003e\n\n\u003cp\u003eIt's natural to wonder, \"how can a string of ones and zeroes be referred to as an 'object'?\" The use of the word \"object\" is an abstraction of thought. An \"object\" in code has no more physical form than does a word in any human language. Sure, words have physical representations: speaking a word causes air to vibrate in a sound wave, ink on a page can be shaped into symbols that represent the word, a meaning can be pointed at or mimed out; but none of these are the word itself. Human language is a system of abstraction: it communicates the \u003cem\u003eidea\u003c/em\u003e of a thing, but not the thing itself.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/en/b/b9/MagrittePipe.jpg\" alt=\"\"\u003e\u003cbr\u003e\nTranslation: \"This is not a pipe.\" - \u003ca href=\"https://en.wikipedia.org/wiki/The_Treachery_of_Images\"\u003e\u003cem\u003eThe Treachery of Images\u003c/em\u003e\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/Ren%C3%A9_Magritte\"\u003eRené Magritte\u003c/a\u003e, 1927  \u003c/p\u003e\n\n\u003cp\u003eThis image of a pipe is no more a pipe than the word \"pipe\" is a pipe; in the same way, a code object named \u003ccode\u003epipe\u003c/code\u003e is not a pipe, but only another form of representing a pipe.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAs humans, we’re constantly faced with myriad facts and impressions that we must make sense of. To do so, we must abstract underlying structure away from surface details and discover the fundamental relations at work. Abstractions reveal causes and effects, expose patterns and frameworks, and separate what’s important from what’s not. Object orientation provides an abstraction of the data on which you operate; moreover, it provides a concrete grouping between the data and the operations you can perform with the data—in effect giving the data behavior.\u003cbr\u003e\n—\u003ca href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/OOP_ObjC/Articles/ooOOP.html#//apple_ref/doc/uid/TP40005149-CH8-SW3\"\u003e\u003cem\u003eObject-Oriented Programming with Objective-C\u003c/em\u003e\u003c/a\u003e, Apple Inc.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA code object representing a water pipe (instead of a smoking pipe) might contain values for \u003ccode\u003elength\u003c/code\u003e, \u003ccode\u003ediameter\u003c/code\u003e, \u003ccode\u003ematerial\u003c/code\u003e, and \u003ccode\u003emanufacturer\u003c/code\u003e. The bundling of these individual pieces of information together begins to form a larger whole.\u003c/p\u003e\n\n\u003cp\u003eObject-Oriented Programming, however, does more than just bundle up individual pieces of data that represent a \"thing\" — it also bundles customized functions that can be performed \u003cem\u003eon\u003c/em\u003e that data. These are called \u003cstrong\u003emethods\u003c/strong\u003e: behaviors that an object performs upon its internal data and even upon other code objects.\u003c/p\u003e\n\n\u003cp\u003eAn object in code is a thing with all the data and all the logic required to complete a task. Objects are models and metaphors for the problems we solve in code.\u003c/p\u003e\n\n\u003cp\u003eObject-oriented programming was born from the trend of making digital lives reflect our real lives. In the 1970's, \u003ca href=\"https://en.wikipedia.org/wiki/Adele_Goldberg_%28computer_scientist%29\"\u003eAdele Goldberg\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Alan_Kay\"\u003eAlan Kay\u003c/a\u003e developed an object-oriented language at Xerox PARC called SmallTalk, which was used in the first personal computer.\u003c/p\u003e\n\n\u003cp\u003eRuby comes with a few types of Objects to get us started, things like \u003ccode\u003eInteger\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eArray\u003c/code\u003e, etc. We call these base types of Objects \"Primitives.\" But what if we wanted to create a new type in our programming universe, a new kind of object for our code? That's what the \u003ccode\u003eclass\u003c/code\u003e keyword and object orientation allows us to do.\u003c/p\u003e","exportId":"defining-object-orientation"},{"id":203727,"title":"Classes and Instances","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-classes-and-instances\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe a Ruby class and how it creates objects\u003c/li\u003e\n\u003cli\u003eDescribe a Ruby instance\u003c/li\u003e\n\u003cli\u003eCreate an instance of a class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eDefining a Class\u003c/h2\u003e\n\n\u003cp\u003eLet's say we are building a dog walking app. Our app's users might be dog\nwalkers and dog owners and they can use the app to manage the dog walks. Such an\napp would need to store information about a potentially large number of dogs.\u003c/p\u003e\n\n\u003cp\u003eOur program needs to have a way to bundle up and operate on all the information\nabout a particular dog. And, our program needs to be able to do this again and\nagain. And, once more, we'll need our program to be able to create \u003cem\u003enew\u003c/em\u003e bundles\nof information regarding individual dogs every time a new dog is added to the\napp.\u003c/p\u003e\n\n\u003cp\u003eHow can we tell our Ruby program to deal with these dogs? Well, we can write a\n\u003ccode\u003eDog\u003c/code\u003e class that produces individual dog objects, each of which contains all the\ninformation and behaviors of an individual dog.\u003c/p\u003e\n\n\u003cp\u003eThink of a class like a blueprint that defines how to build an object. The\n\u003ccode\u003eDog\u003c/code\u003e class is different from an individual dog just as the blueprints that show\nhow to build a house are not the actual house. A Ruby class both contains the\ninstructions for creating new objects and has the ability to create those\nobjects. Calling \u003ccode\u003e.new\u003c/code\u003e on the \u003ccode\u003eDog\u003c/code\u003e class is like getting a brand new dog\nobject from an assembly line which produces a series of similar dog objects\nbased on the same \u003ccode\u003eDog\u003c/code\u003e template.\u003c/p\u003e\n\n\u003cp\u003eHere's what our \u003ccode\u003eDog\u003c/code\u003e class would look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  # some code to describe a dog\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eDog\u003c/code\u003e class is defined with the \u003ccode\u003eclass\u003c/code\u003e keyword, followed by the class name\nand closed with an \u003ccode\u003eend\u003c/code\u003e. The body of this class is between the \u003ccode\u003eclass\u003c/code\u003e and\n\u003ccode\u003eend\u003c/code\u003e keywords.\u003c/p\u003e\n\n\u003cp\u003eClass names begin with capital letters because they are stored in Ruby\nconstants. If your class name contains two words, the name should be CamelCased,\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MyClass\u003cbr\u003e  # some code all about your awesome class\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this code alone, we can now make new dogs!\u003c/p\u003e\n\n\u003ch2\u003eCreating Instances of Classes\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the code sample above, once we've defined our \u003ccode\u003eDog\u003c/code\u003e class with the \u003ccode\u003eclass\u003c/code\u003e\nkeyword, we immediately can bring to life new individual dogs, the variable\n\u003ccode\u003efido\u003c/code\u003e which points to a new instance of a dog.\u003c/p\u003e\n\n\u003cp\u003eOn the \u003ccode\u003eDog\u003c/code\u003e class, we call the \u003ccode\u003e.new\u003c/code\u003e method and that will \u003cstrong\u003einstantiate\u003c/strong\u003e a\nnew dog.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstantiate\u003c/strong\u003e means bringing a new object to life, a new individual, like a\nparticular dog, like Snoopy or Lassie or Rover. Each particular dog is an\nindividual that was \u003cstrong\u003einstantiated\u003c/strong\u003e when we called \u003ccode\u003eDog.new\u003c/code\u003e to birth it into\nour world of programming.\u003c/p\u003e\n\n\u003cp\u003eWe call these individuals, each specific dog or version of our class,\n\u003cstrong\u003einstances\u003c/strong\u003e. An \u003cstrong\u003einstance\u003c/strong\u003e is a single occurrence of an object.\n\u003cstrong\u003eInstances\u003c/strong\u003e refer to the individual objects produced from the class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido #=\u0026gt; #\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new\u003cbr\u003esnoopy #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003esnoopy\u003c/code\u003e and \u003ccode\u003efido\u003c/code\u003e are two different variables pointing at separate instances\nof the \u003ccode\u003eDog\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003eDifferent Instances are Different Objects\u003c/h3\u003e\n\n\u003cp\u003eLet's make three dogs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido #=\u0026gt; #\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new\u003cbr\u003esnoopy #=\u0026gt; #\u003cbr\u003e\u003cbr\u003elassie = Dog.new\u003cbr\u003elassie #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that every time you make an instance of a class, Ruby tells you that the\nreturn value is something that looks like \u003ccode\u003e#\u0026lt;Dog:0x007fc52c2cc588\u0026gt;\u003c/code\u003e. This syntax\nis called Ruby Object Notation and it's just the default way that Ruby\ncommunicates to you that you are dealing with an object or instance of a\nparticular class. The \u003ccode\u003eDog:0x007fc52c2cc588\u003c/code\u003e tells you that the object is an\ninstance of \u003ccode\u003eDog\u003c/code\u003e and the \u003ccode\u003e0x007fc52c2cc588\u003c/code\u003e is called its object identifier and\nit basically means this is where the object lives inside your computer.\u003c/p\u003e\n\n\u003cp\u003eEach of these instances is totally unique, even though they are all born from\n\u003ccode\u003eDog\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido #=\u0026gt; #\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new\u003cbr\u003esnoopy #=\u0026gt; #\u003cbr\u003e\u003cbr\u003esnoopy == fido #=\u0026gt; false - these dogs are not the same.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eClasses are the blueprints that define the behavior and information our objects\nwill contain. They let us manufacture and instantiate new instances.\u003c/p\u003e","exportId":"classes-and-instances"},{"id":203728,"title":"Classes and Instances Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-classes-and-instances-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine new Ruby classes with the \u003ccode\u003eclass\u003c/code\u003e keyword.\u003c/li\u003e\n\u003cli\u003eInstantiate instances of a \u003ccode\u003eclass\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lab is all about defining classes and instantiating instances.\u003c/p\u003e\n\n\u003ch3\u003e1. Define \u003ccode\u003eDog\u003c/code\u003e in \u003ccode\u003elib/dog.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eOpen \u003ccode\u003elib/dog.rb\u003c/code\u003e and add a class definition for a \u003ccode\u003eDog\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003e2. Make 3 dogs in \u003ccode\u003elib/dog.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eUnder your \u003ccode\u003eDog\u003c/code\u003e class definition, create three dogs in local variables, \u003ccode\u003efido\u003c/code\u003e, \u003ccode\u003esnoopy\u003c/code\u003e, and \u003ccode\u003elassie\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e3. Define a \u003ccode\u003ePerson\u003c/code\u003e in \u003ccode\u003elib/person.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eOpen \u003ccode\u003elib/person.rb\u003c/code\u003e and add a class definition for a \u003ccode\u003ePerson\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003e4. Make 2 people in \u003ccode\u003elib/person.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eUnder your \u003ccode\u003ePerson\u003c/code\u003e class definition, create two people in local variables, \u003ccode\u003eadele_goldberg\u003c/code\u003e and \u003ccode\u003ealan_kay\u003c/code\u003e\u003c/p\u003e","exportId":"ge2dff3b4e4d762ebb575b402d05ac9ca"},{"id":203729,"title":"Instance Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-instance-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe an instance method.\u003c/li\u003e\n\u003cli\u003eCall instance methods on an object.\u003c/li\u003e\n\u003cli\u003eBuild instance methods for an object.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eThe Behavior of Objects\u003c/h2\u003e\n\n\u003cp\u003eWe know that classes act as a factory for our objects, capable of instantiating new instances.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut what can this instance of a dog stored in the local variable \u003ccode\u003efido\u003c/code\u003e do? In fact, how do we even ask this object to do something?\u003c/p\u003e\n\n\u003ch3\u003eDot Notation\u003c/h3\u003e\n\n\u003cp\u003eWe send objects messages asking them to perform an operation or task through a syntax known as \"Dot Notation\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new #=\u0026gt; #\u003cbr\u003e\u003cbr\u003efido.object_id #=\u0026gt; 70173135795280\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example above, we send the \u003ccode\u003efido\u003c/code\u003e instance a message \u003ccode\u003eobject_id\u003c/code\u003e by separating the receiving object, \u003ccode\u003efido\u003c/code\u003e and the message, \u003ccode\u003eobject_id\u003c/code\u003e by a dot (\u003ccode\u003e.\u003c/code\u003e). When we send an object a message through dot notation, we are evoking the corresponding method on the object. We are calling the \u003ccode\u003eobject_id\u003c/code\u003e method on \u003ccode\u003efido\u003c/code\u003e. (Note: the \u003ccode\u003eobject_id\u003c/code\u003e you get if you test out the above code will be different.)\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#object_id\u003c/code\u003e method simply tells you the object's identifier in your computer's memory (the place where all things live in your computer).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages. - Alan Kay\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn dot notation, we call the object that received the method message the \"receiver\" and we call the method the \"message\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# The receiver is this very string      # reverse is the message\u003cbr\u003e\"Strings are instances and objects too\".reverse\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInstance Methods\u003c/h3\u003e\n\n\u003cp\u003eAll objects respond to methods and messages, like \u003ccode\u003e#object_id\u003c/code\u003e in the example above. One interesting method provided is the \u003ccode\u003e#methods\u003c/code\u003e method that returns an array of all the methods and messages an object responds to. We can evoke this method via dot-notation. One of the great things you can ask every object in Ruby is \"What methods do you respond to?\"\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido.methods\u003cbr\u003e#=\u0026gt; [:psych_to_yaml, :to_yaml, :to_yaml_properties, :local_methods, :try, :nil?,\u003cbr\u003e# :===, :=~, :!~, :eql?, :hash, :\u0026lt;=\u0026gt;, :class, :singleton_class, :clone, :dup,\u003cbr\u003e# :itself, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :freeze,\u003cbr\u003e# :frozen?, :to_s, :inspect, :methods, :singleton_methods, :protected_methods,\u003cbr\u003e# :private_methods, :public_methods, :instance_variables,\u003cbr\u003e# :instance_variable_get, :instance_variable_set, :instance_variable_defined?,\u003cbr\u003e# :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :tap, :send,\u003cbr\u003e# :public_send, :respond_to?, :extend, :display, :method, :public_method,\u003cbr\u003e# :singleton_method, :define_singleton_method, :object_id, :to_enum, :enum_for,\u003cbr\u003e# :==, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, out of the box, our objects can do a lot of things. Where these things come from and what they do are not so important right now because all of that functionality is very low level and not interesting to our Dogs.\u003c/p\u003e\n\n\u003ch3\u003eBuilding Your Own Instance Methods\u003c/h3\u003e\n\n\u003cp\u003eHow do we add our own methods to our classes? In our Dog example, can we teach our Dog a new trick? Can we teach our Dog to bark for example?\u003c/p\u003e\n\n\u003cp\u003eWe can. We're used to defining methods already with the \u003ccode\u003edef\u003c/code\u003e keyword. If we place this method definition within the body of a class, that method becomes a specific behavior of instances of that class, not a generic procedure we can just call whenever we want.\u003c/p\u003e\n\n\u003cp\u003eWe call the methods defined within the object's class \u003cstrong\u003eInstance Methods\u003c/strong\u003e because they are methods that belong to any instance of the class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  # Class body\u003cbr\u003e\u003cbr\u003e  # Instance Method Definition\u003cbr\u003e  def bark\u003cbr\u003e    puts \"Woof!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido.bark #=\u0026gt; \"Woof!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy defining \u003ccode\u003e#bark\u003c/code\u003e within the \u003ccode\u003eDog\u003c/code\u003e class, \u003ccode\u003ebark\u003c/code\u003e becomes a method of all instances of Dogs. If we make more dogs, they can all bark.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def bark\u003cbr\u003e    puts \"Woof!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido.bark #=\u0026gt; \"Woof!\"\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new\u003cbr\u003esnoopy.bark #=\u0026gt; \"Woof!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eObjects can only do what we teach them to do via the code we write and the methods we define. For example, currently, Dogs do not know how to sit.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def bark\u003cbr\u003e    puts \"Woof!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido.bark #=\u0026gt; \"Woof!\"\u003cbr\u003efido.sit #=\u0026gt; NoMethodError: undefined method `sit' for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the same manner, instance methods, the methods that belong to particular instances of particular classes, are not globally evocable like procedural methods. They cannot be called without an instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def bark\u003cbr\u003e    puts \"Woof!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003e\u003cbr\u003e# Let's try just calling bark without fido\u003cbr\u003ebark #=\u0026gt; NameError: undefined local variable or method `bark' for main:Object\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eClasses as Blueprints\u003c/h3\u003e\n\n\u003cp\u003eThe ability to define methods and behaviors in our classes for our instances makes Ruby classes behave not just as factories, capable of instantiating new individual instances, but also as a blueprint, defining what those instances can do.\u003c/p\u003e","exportId":"instance-methods"},{"id":203730,"title":"Instance Methods Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-instance-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a class.\u003c/li\u003e\n\u003cli\u003eBuild instance methods for the class.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we will practice defining classes and building instance methods\ninside them. Specifically, you are going to be adding 2 instance methods to a\n\u003ccode\u003eDog\u003c/code\u003e and \u003ccode\u003ePerson\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eOpen this lab clicking the \"Fork\" button, cloning, and running your tests with \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e1. Define \u003ccode\u003eDog\u003c/code\u003e in \u003ccode\u003elib/dog.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eOpen \u003ccode\u003elib/dog.rb\u003c/code\u003e and add a class definition for a \u003ccode\u003eDog\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003e2. Define \u003ccode\u003e#bark\u003c/code\u003e in \u003ccode\u003eDog\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an instance method \u003ccode\u003e#bark\u003c/code\u003e to your \u003ccode\u003eDog\u003c/code\u003e class in \u003ccode\u003elib/dog.rb\u003c/code\u003e that will puts \u003ccode\u003e\"Woof!\"\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003e3. Define \u003ccode\u003e#sit\u003c/code\u003e in \u003ccode\u003eDog\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an instance method \u003ccode\u003e#sit\u003c/code\u003e to your \u003ccode\u003eDog\u003c/code\u003e class in \u003ccode\u003elib/dog.rb\u003c/code\u003e that will puts\n\u003ccode\u003e\"The Dog is sitting\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e4. Define a \u003ccode\u003ePerson\u003c/code\u003e in \u003ccode\u003elib/person.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eOpen \u003ccode\u003elib/person.rb\u003c/code\u003e and add a class definition for a \u003ccode\u003ePerson\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003e5. Define \u003ccode\u003e#talk\u003c/code\u003e in \u003ccode\u003ePerson\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an instance method \u003ccode\u003e#talk\u003c/code\u003e to your \u003ccode\u003ePerson\u003c/code\u003e class in \u003ccode\u003elib/person.rb\u003c/code\u003e that\nwill puts \u003ccode\u003e\"Hello World!\"\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003e6. Define \u003ccode\u003e#walk\u003c/code\u003e in \u003ccode\u003ePerson\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an instance method \u003ccode\u003e#walk\u003c/code\u003e to your \u003ccode\u003ePerson\u003c/code\u003e class in \u003ccode\u003elib/person.rb\u003c/code\u003e that\nwill puts \u003ccode\u003e\"The Person is walking\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen you're done, submit the lab with \u003ccode\u003elearn submit\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith all tests passing, you have successfully written multiple instance methods\nand \u003cem\u003etwo\u003c/em\u003e different classes!\u003c/p\u003e\n\n\u003ch3\u003eAdditional Note on Lab Testing\u003c/h3\u003e\n\n\u003cp\u003eIn this lab, we asked that you code your two classes in separate \u003ccode\u003edog.rb\u003c/code\u003e and\n\u003ccode\u003eperson.rb\u003c/code\u003e files. You could, in theory, code both classes in the same file, or\neven \u003cem\u003ecode them in opposite files\u003c/em\u003e and still pass all tests. Why do you think that is?\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003eWhen the tests are run in this lab, RSpec loads both the \u003ccode\u003edog.rb\u003c/code\u003e and\n\u003ccode\u003eperson.rb\u003c/code\u003e files (this happens in the first two lines of \u003ccode\u003espec/spec_helper.rb\u003c/code\u003e\n\u003ca href=\"https://apidock.com/ruby/Kernel/require_relative\"\u003eusing \u003ccode\u003erequire_relative\u003c/code\u003e\u003c/a\u003e). As long as you place your classes in one of the\nfiles that RSpec loads, the tests will have access to them.\u003c/p\u003e\n\n\u003cp\u003eWhile it isn't enforced, we do encourage you to separate classes into\nindividual, accurately named files. In a larger application, you might not\nalways need to load the \u003ccode\u003eDog\u003c/code\u003e class when loading the \u003ccode\u003ePerson\u003c/code\u003e class. As classes\nget larger, it also becomes easier to manage your code if you know each file\ncontains \u003cem\u003eone\u003c/em\u003e class. Keeping to these conventions makes it easier in the future\nto go back and read code you've previously written. \u003c/p\u003e","exportId":"ga7cce6915a3311fb4542bf8ac7ab7b4f"},{"id":203731,"title":"Instance Variables Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-instance-variables-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-variables-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-variables-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-variables-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine instance variables.\u003c/li\u003e\n\u003cli\u003eDistinguish instance variables from local variables.\u003c/li\u003e\n\u003cli\u003eDescribe how instance variables give objects attributes and properties.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWhen we build objects through our own classes we know we can add behavior to the objects through instance methods. But how do we give our objects data? For example, how would we teach a dog what its name is? Or what breed it is? How do we put data inside of an instance of an object so that each dog can have its own name and own breed? How do we give objects attributes or properties?\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eRun your tests with \u003ccode\u003elearn test\u003c/code\u003e to get an overview of what we are trying to do. Then follow along below for how to get your tests to pass.\u003c/p\u003e\n\n\u003ch2\u003eWhat is an instance variable?\u003c/h2\u003e\n\n\u003cp\u003eWe've been working with variables for a while now. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebro_greeting = \"Sup, bro?\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe code above sets a variable, \u003ccode\u003ebro_greeting\u003c/code\u003e, equal to the string \u003ccode\u003e\"Sup, bro?\"\u003c/code\u003e. Now we can use that variable to read and operate on that string.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebro_greeting #=\u0026gt; \"Sup, bro?\"\u003cbr\u003e\u003cbr\u003ebro_greeting.upcase #=\u0026gt; \"SUP, BRO?\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ebro_greeting\u003c/code\u003e variable is what's known as a \u003cstrong\u003elocal variable\u003c/strong\u003e, so named because it can only be accessed in a specific, local environment.\u003c/p\u003e\n\n\u003cp\u003eA local variable that is defined inside one method, for example, cannot be accessed by another method. In order to get around this limitation, we can use \u003cstrong\u003einstance variables\u003c/strong\u003e inside our Ruby classes.\u003c/p\u003e\n\n\u003cp\u003eAn \u003cstrong\u003einstance variable\u003c/strong\u003e is a variable that is accessible in any instance method in a particular instance of a class.\u003c/p\u003e\n\n\u003ch2\u003eWe need instance variables\u003c/h2\u003e\n\n\u003cp\u003eLet's say we have a class called \u003ccode\u003eDog\u003c/code\u003e that is responsible for producing individual dog objects. We want each dog to be able to have a name and show its name. So we need to write some methods:\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003edog.rb\u003c/code\u003e inside the \u003ccode\u003elib\u003c/code\u003e folder. This is where we'll create our Dog class. Type in the following code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def name=(dog_name)\u003cbr\u003e    this_dogs_name = dog_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    this_dogs_name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we've defined two instance methods, the \u003ccode\u003ename=\u003c/code\u003e, or \"name equals\" method, and the \u003ccode\u003ename\u003c/code\u003e method. The first method takes in an argument of a dog's name and sets that argument equal to a variable, \u003ccode\u003ethis_dogs_name\u003c/code\u003e. The second method is responsible for reporting, or reading the name. The methods act as mechanisms to expose data from inside of the object to the outside world.\u003c/p\u003e\n\n\u003cp\u003eOur two methods therefore are responsible for \"setting\" and \"getting\" an individual dog's name.\u003c/p\u003e\n\n\u003cp\u003eHere's the functionality we want to achieve:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elassie = Dog.new\u003cbr\u003elassie.name = \"Lassie\"\u003cbr\u003e\u003cbr\u003elassie.name #=\u0026gt; \"Lassie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur new dog instance should be assigned a name and know its name.\u003c/p\u003e\n\n\u003cp\u003eIn your \u003ccode\u003edog.rb\u003c/code\u003e file add the above code. This should create a new dog instance, give it a name (Lassie) and try to access- or read- its name.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e again. You should see an error message, with the following snippet inside it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e `name': undefined local variable or method `this_dogs_name''\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh. Looks like the \u003ccode\u003e#name\u003c/code\u003e method doesn't know about the \u003ccode\u003ethis_dogs_name\u003c/code\u003e variable from the \u003ccode\u003e#name=\u003c/code\u003e method. That is because \u003ccode\u003ethis_dogs_name\u003c/code\u003e is a \u003cstrong\u003elocal variable\u003c/strong\u003e. A local variable has a \u003cstrong\u003elocal scope\u003c/strong\u003e. That means that it cannot be accessed outside of the method in which it is defined.\u003c/p\u003e\n\n\u003ch2\u003eImplementing instance variables\u003c/h2\u003e\n\n\u003cp\u003eWe define an instance variable by prefacing the variable name with an \u003ccode\u003e@\u003c/code\u003e symbol.\u003c/p\u003e\n\n\u003cp\u003eInstance variables are bound to an instance of a class. That means that the value held by an instance variable is specific to whatever instance of the class it happens to belong to. Instance variables hold information about an instance, usually an attribute of that instance, and can be called on throughout the class, without needing to be passed into other methods as arguments (as would be the case with local variables).\u003c/p\u003e\n\n\u003cp\u003eLet's refactor our \u003ccode\u003eDog\u003c/code\u003e class to use an instance variable instead of a local variable to set and get an individual dog's name.\u003c/p\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003edog.rb\u003c/code\u003e and change the \u003ccode\u003eDog\u003c/code\u003e class in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e\u003cbr\u003e  def name=(dogs_name)\u003cbr\u003e    @this_dogs_name = dogs_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    @this_dogs_name\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003elassie = Dog.new\u003cbr\u003elassie.name = \"Lassie\"\u003cbr\u003e\u003cbr\u003eputs lassie.name\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e again and your tests should now be passing.\u003c/p\u003e\n\n\u003cp\u003eWhy did it work? Inside the \u003ccode\u003e#name=\u003c/code\u003e method, we set the value of \u003ccode\u003e@this_dogs_name\u003c/code\u003e equal to whatever string is passed in as an argument. Then, we are able to call on that same instance variable in a totally separate method, the \u003ccode\u003e#name\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAs we dive deeper into object-oriented Ruby, we'll be using instance variables frequently to pass information around the instance methods of a class. Think of instance variables as the containers for instance-specific information. The ability of instance variables to store information and be accessible within different instance methods is one of the things that makes it possible for us to create similar but unique objects in object-oriented Ruby.\u003c/p\u003e","exportId":"g63b6d160efa1c43447a3edde0b0cddfb"},{"id":203732,"title":"Object Initialization","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-object-initialization\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWhat is the \u003ccode\u003e#initialize\u003c/code\u003e method?\u003c/li\u003e\n\u003cli\u003eHow does it work?\u003c/li\u003e\n\u003cli\u003eWhat do we use it for?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstantiating Instances of Classes\u003c/h2\u003e\n\n\u003cp\u003eWe've already seen new instances of classes being created with the \u003ccode\u003e#new\u003c/code\u003e method. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe code above creates a new instance of the \u003ccode\u003eDog\u003c/code\u003e class and sets that object equal to a variable, \u003ccode\u003esnoopy\u003c/code\u003e. If we want to give our dog a breed, we have to use the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def breed=(breed)\u003cbr\u003e    @breed = breed\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def breed\u003cbr\u003e    @breed\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new #=\u0026gt; #\u003cbr\u003esnoopy.breed #=\u0026gt; nil\u003cbr\u003esnoopy.breed = \"Beagle\"\u003cbr\u003esnoopy.breed #=\u0026gt; \"Beagle\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, most dogs are born \u003cem\u003ewith\u003c/em\u003e a breed, not assigned a breed afterwards. How can we model the behavior of dogs being born with a breed in our \u003ccode\u003eDog\u003c/code\u003e class? If only there was a way for us to assign an individual dog a breed automatically upon creation, or instantiation.\u003c/p\u003e\n\n\u003cp\u003eLucky for us, there is! It's called the \u003ccode\u003e#initialize\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch2\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e Method\u003c/h2\u003e\n\n\u003cp\u003eWe already know that any Ruby class can produce new instances of itself, via the \u003ccode\u003e\u0026lt;Class Name\u0026gt;.new\u003c/code\u003e method, whether or not that class has an \u003ccode\u003e#initialize\u003c/code\u003e method. However, if we want each instance of our class to be created with certain attributes, we must define an \u003ccode\u003e#initialize\u003c/code\u003e method. An \u003ccode\u003e#initialize\u003c/code\u003e method is a method that is called automatically whenever \u003ccode\u003e#new\u003c/code\u003e is used.\u003c/p\u003e\n\n\u003cp\u003eLet's define an \u003ccode\u003e#initialize\u003c/code\u003e method that takes in an argument of a dog's breed and sets a \u003ccode\u003e@breed\u003c/code\u003e variable equal to that argument. In other words, let's define our \u003ccode\u003e#initialize\u003c/code\u003e method to contain the functionality of the \u003ccode\u003e#breed=\u003c/code\u003e method, so that a dog instance will get a breed assigned to it right away when it is created, without us having to explicitly use the \u003ccode\u003e#breed=\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch3\u003eDefining an \u003ccode\u003e#initialize\u003c/code\u003e method\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def initialize(breed)\u003cbr\u003e    @breed = breed\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def breed=(breed)\u003cbr\u003e    @breed = breed\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def breed\u003cbr\u003e    @breed\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we can call \u003ccode\u003e#new\u003c/code\u003e like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elassie = Dog.new(\"Collie\")\u003cbr\u003e\u003cbr\u003elassie.breed #=\u0026gt; \"Collie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eHow does it work?\u003c/h3\u003e\n\n\u003cp\u003eWhen \u003ccode\u003e#new\u003c/code\u003e is called with an argument, it will pass that argument (or arguments) to the \u003ccode\u003e#initialize\u003c/code\u003e method and invoke that method. The code in \u003ccode\u003e#initialize\u003c/code\u003e will then run, using any arguments from \u003ccode\u003e#new\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe initialize method is automatically invoked every time the \u003ccode\u003e#new\u003c/code\u003e method is used to create a new instance of the class.\u003c/p\u003e\n\n\u003cp\u003eYou can also think of the initialize method as a constructor method. A constructor method is invoked upon the creation of an instance of a class and used to help define the instance of that class.\u003c/p\u003e\n\n\u003cp\u003eSo, because of how we defined our initialize method, every time you type \u003ccode\u003eDog.new(\"some breed\")\u003c/code\u003e, a new dog instance is created that has a breed of \"some breed\" (i.e. whatever string you give the \u003ccode\u003e#new\u003c/code\u003e method).\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=UysgBTrJoTc\"\u003eVideo Review- Intro to OO\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"object-initialization"},{"id":203733,"title":"Object Initialization Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-object-initialization-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a class with a custom initialize routine.\u003c/li\u003e\n\u003cli\u003eSet instance variable attributes from initialize.\u003c/li\u003e\n\u003cli\u003eInclude a default argument for an initialize argument.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eYou're going to be building a \u003ccode\u003ePerson\u003c/code\u003e class that accepts a person's name when a\nperson is initialized. You're also going to be building a \u003ccode\u003eDog\u003c/code\u003e class that\naccepts a dog's name and breed on initialization. If no value for the dog's\nbreed is provided, it should default to \u003ccode\u003e\"Mutt\"\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eOpen this lab by clicking the \"Fork\" button, cloning, and running the tests with \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003e1. \u003ccode\u003ePerson#initialize\u003c/code\u003e with a Name\u003c/h4\u003e\n\n\u003cp\u003eDefine a \u003ccode\u003ePerson\u003c/code\u003e class in \u003ccode\u003elib/person.rb\u003c/code\u003e that provides an \u003ccode\u003e#initialize\u003c/code\u003e method\nthat accepts an argument for the person's name. That argument should be stored\nwithin a \u003ccode\u003e@name\u003c/code\u003e instance variable.\u003c/p\u003e\n\n\u003ch4\u003e2. \u003ccode\u003eDog#initialize\u003c/code\u003e with Name and Breed defaulting to \"Mutt\"\u003c/h4\u003e\n\n\u003cp\u003eDefine a \u003ccode\u003eDog\u003c/code\u003e class in \u003ccode\u003elib/dog.rb\u003c/code\u003e that provides an \u003ccode\u003e#initialize\u003c/code\u003e method that\naccepts an argument for the dog's name. That argument should be stored within a\n\u003ccode\u003e@name\u003c/code\u003e instance variable.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, \u003ccode\u003eDog#initialize\u003c/code\u003e should accept a second optional argument for the\ndog's breed stored in an instance variable \u003ccode\u003e@breed\u003c/code\u003e. When none is provided, it\nshould default to \"Mutt\".\u003c/p\u003e\n\n\u003cp\u003eSubmit your solution with \u003ccode\u003elearn submit\u003c/code\u003e.\u003c/p\u003e","exportId":"gf0d310355ccc5e44aae6f6d2b3083863"},{"id":203735,"title":"Introduction to Object-Oriented in Ruby Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-introduction-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow we should have a basic grasp on object-oriented programming. As discussed in\nthis module, we should have an understanding of the concept of \"objects\" that\ncan contain data and/or code, such as attributes and methods.\u003c/p\u003e\n\n\u003cp\u003eIn this module we explained the concept of local variables and instance\nvariables, as well as instance methods. We can now set instance variables from\nour \u003ccode\u003e#initialize\u003c/code\u003e method and have been introduced to global and variable scope.\u003c/p\u003e\n\n\u003cp\u003eWhat we will be able to achieve is shared functionality throughout the application\nas needed. You're well on our way to having enough knowledge of OOP to develop\nyour own fully functional applications!\u003c/p\u003e","exportId":"introduction-to-object-oriented-in-ruby-conclusion"}]},{"id":21888,"name":"Topics in OO - Building Complex Class Objects in Ruby","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gb5680598e62a44e0123098b8c3b585cd","items":[{"id":203736,"title":"Introduction to Complex Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-complex-objects-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eAs we covered previously, we use classes as blueprints for objects. These\nobjects are the basic building blocks of Ruby code. We have introduced using\ninstance methods, variables, and attribute accessors independently. Now we'll\nfocus on using them in combination to build an object-oriented program.\u003c/p\u003e\n\n\u003cp\u003eIn the following lessons we'll explain these concepts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat code design is\u003c/li\u003e\n\u003cli\u003eBasic code design principles that object-oriented programmers employ\u003c/li\u003e\n\u003cli\u003eThe concept of a domain model\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBy combining the different concepts we've learned, we can use classes to model\nthe intricacies of real-world domains and systems!\u003c/p\u003e","exportId":"introduction-to-complex-objects"},{"id":203737,"title":"Complex Objects - Putting the Pieces Together","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-complex-objects-putting-the-pieces-together\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-putting-the-pieces-together/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-putting-the-pieces-together\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-putting-the-pieces-together/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eThis lab will walk you, step by step, through the basics of programming a\nsimple\u003ccode\u003eBook\u003c/code\u003e class. We've covered many of the concepts in this lab over a series\nof lessons. Now it is time to put everything togetheer. Once you've completed\nthe tutorial, you should know enough to complete a similar object-oriented\nproblem on your own.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRead through the tutorial, following along as you go.\u003c/li\u003e\n\u003cli\u003eOnce you've finished, make the tests in \u003ccode\u003espec/01_book_spec.rb\u003c/code\u003e pass. Run only\nthose tests by typing \u003ccode\u003elearn spec/01_book_spec.rb\u003c/code\u003e on your command line.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eTutorial\u003c/h2\u003e\n\n\u003cp\u003eObject-oriented programming, or OOP, is an extremely useful programming paradigm\nin which we can organize our code according to how real-world objects might\ninteract with one another. We can wrap properties/data and behavior up in\nclasses, and then create instances, or individual \"members\", of those classes\nthat can interact with one another.\u003c/p\u003e\n\n\u003cp\u003eOne common misperception about OOP is that everything MUST model the \u003cem\u003ereal\nworld\u003c/em\u003e. If we limit our objects to things in the real world, the limitations\nwill start jumping out at us.\u003c/p\u003e\n\n\u003cp\u003eImagine a phone call between 2 people. Sure, the PEOPLE are real, but what about\nthe phone call? If we think about the phone call through OOP, we can model it\ntoo! A phone call has a \u003ccode\u003ecaller\u003c/code\u003e and a \u003ccode\u003ereceiver\u003c/code\u003e, a \u003ccode\u003eduration\u003c/code\u003e, and even a\n\u003ccode\u003ecost_per_minute\u003c/code\u003e. In the \u003cem\u003ereal world\u003c/em\u003e, it's not a real thing, but in OOP IT IS!\u003c/p\u003e\n\n\u003cp\u003eIn this tutorial, our goal is to create a simple \u003ccode\u003eBook\u003c/code\u003e class. We'll want it to\nhave properties like a title, an author, a page count, etc. We'd also like the\nclass to somehow be able to keep track of all of the genres of all of the Books\nwe create. Finally, we'll give our books the total non-sensical ability to turn\ntheir own pages.\u003c/p\u003e\n\n\u003ch3\u003eSet Up\u003c/h3\u003e\n\n\u003cp\u003eThe project directory structure is pretty much set up for us already. We have a\n\u003ccode\u003espec\u003c/code\u003e folder that contains our tests, and we have a \u003ccode\u003ebook.rb\u003c/code\u003e file in the 'lib'\ndirectory that we'll actually be coding in.\u003c/p\u003e\n\n\u003cp\u003eWhenever the tutorial says to 'run the specs', you should type the following\ninto your command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elearn spec/01_book_spec.rb\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will run only the tests that we are interested in completing for this\ntutorial.\u003c/p\u003e\n\n\u003cp\u003eReady?\u003c/p\u003e\n\n\u003ch3\u003eRunning the Tests\u003c/h3\u003e\n\n\u003cp\u003eLet's run the tests for the first time, and see what our first failure is. The\noutput in your terminal should be something similar to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book ::new gets initialized with a title\u003cbr\u003e     Failure/Error: expect{Book.new(\"And Then There Were None\")}.to_not raise_error\u003cbr\u003e       expected no Exception, got # with backtrace:\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `block (4 levels) in '\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `block (3 levels) in '\u003cbr\u003e     # ./spec/01_book_spec.rb:6:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis looks kind of overwhelming, but the phrase \u003ccode\u003euninitialized constant Book\u003c/code\u003e\nholds the answer: we need to define our Book class!\u003c/p\u003e\n\n\u003ch3\u003eDefining the Book Class\u003c/h3\u003e\n\n\u003cp\u003eTo create a new class in Ruby, we use the \u003ccode\u003eclass\u003c/code\u003e keyword, followed by the name\nof a class starting with a capital letter. Let's define an empty \u003ccode\u003eBook\u003c/code\u003e class in\n\u003ccode\u003ebook.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNot too hard, right? Let's run those tests again and see what happens:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book ::new gets initialized with a title\u003cbr\u003e     Failure/Error: expect{Book.new(\"And Then There Were None\")}.to_not raise_error\u003cbr\u003e       expected no Exception, got # with backtrace:\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `initialize'\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `new'\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `block (4 levels) in '\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `block (3 levels) in '\u003cbr\u003e     # ./spec/01_book_spec.rb:6:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHmm...an argument error? That's weird. In the test it looks like we're trying to\ninitialize a new book (create a new book) using the following line of code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eBook.new(\"And Then There Were None\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, I have no clue what \"And Then There Were None\" is in the context of our\nBook class, but what this is telling us is that somehow our Book needs to accept\nan argument on initialization.\u003c/p\u003e\n\n\u003cp\u003eI'm going to go out on a limb and guess that \"And Then There Were None\" is a\ntitle, so let's agree to call that argument \u003ccode\u003etitle\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHow exactly do we pass an argument in on initialization, though? Enter the\n\u003ccode\u003einitialize\u003c/code\u003e method!\u003c/p\u003e\n\n\u003ch3\u003eInitialize\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003einitialize\u003c/code\u003e method is what is known as a \"hook\" or a \"callback\". In other\nwords, it is a method that gets triggered automatically when something else\nhappens. In the case of \u003ccode\u003einitialize\u003c/code\u003e, it gets triggered when we call \u003ccode\u003e.new\u003c/code\u003e on a\nclass. It also happens to be the method that we can pass arguments to when\ninitializing a new instance of a class.\u003c/p\u003e\n\n\u003cp\u003eLet's add an initialize method to our book class, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'll figure out what we need to do with \u003ccode\u003etitle\u003c/code\u003e in just a minute, but for now,\nall we should remember is that the \u003ccode\u003einitialize\u003c/code\u003e method is a place that we'll\nprobably be doing some setup in. Cool?\u003c/p\u003e\n\n\u003cp\u003eLet's run those tests again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book properties has a title\u003cbr\u003e     Failure/Error: expect(book.title).to eq(\"And Then There Were None\")\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `title' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:14:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHey, look! That test passed, and we're on to a different one!\u003c/p\u003e\n\n\u003ch3\u003eGiving a Book a Title\u003c/h3\u003e\n\n\u003cp\u003eIt looks like we don't have a method \u003ccode\u003etitle\u003c/code\u003e for our book. We know how to fix\nthis error... we're just writing Ruby, after all. Let's write a \u003ccode\u003etitle\u003c/code\u003e method\nin our \u003ccode\u003eBook\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd if we run the specs again, we see this output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book properties has a title\u003cbr\u003e     Failure/Error: expect(book.title).to eq(\"And Then There Were None\")\u003cbr\u003e\u003cbr\u003e       expected: \"And Then There Were None\"\u003cbr\u003e            got: nil\u003cbr\u003e\u003cbr\u003e       (compared using ==)\u003cbr\u003e     # ./spec/01_book_spec.rb:14:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, it seems like, if I'm reading the test correctly, we are initializing a book\nwith \"And Then There Were None\" as an argument, and then magically, when we call\n\u003ccode\u003etitle\u003c/code\u003e on that book, it should return \"And Then There Were None\".\u003c/p\u003e\n\n\u003cp\u003eThis means that somewhere between calling \u003ccode\u003e.new\u003c/code\u003e and \u003ccode\u003e.title\u003c/code\u003e, our book is\nsomehow getting assigned a title. Where \u003cem\u003emust\u003c/em\u003e that be happening, then?\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003einitialize\u003c/code\u003e method! It really can't happen anywhere else.\u003c/p\u003e\n\n\u003ch3\u003eInstance Variables\u003c/h3\u003e\n\n\u003cp\u003eThis is where instance variables come into play. Instance variables are preceded\nwith an \"@\" symbol, and are in scope within an instance of a class. This means\nthat any method within an instance has access to any instance variable. This is\nawesome, because within our instances, we don't need to worry about passing\nvariables around. Sweet, huh?\u003c/p\u003e\n\n\u003cp\u003eYou can also, sort of, think of instance variables as properties of any\nparticular instance of a class. Our book seems to have a \u003ccode\u003etitle\u003c/code\u003e property, so\nlet's create a \u003ccode\u003e@title\u003c/code\u003e instance variable for it! We'll do that in the\ninitialize method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEasy as pie. Run those specs again and let's see what happens:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book properties has a title\u003cbr\u003e     Failure/Error: expect(book.title).to eq(\"And Then There Were None\")\u003cbr\u003e\u003cbr\u003e       expected: \"And Then There Were None\"\u003cbr\u003e            got: nil\u003cbr\u003e\u003cbr\u003e       (compared using ==)\u003cbr\u003e     # ./spec/01_book_spec.rb:14:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHmm...that looks awfully familiar. It seems like our \u003ccode\u003etitle\u003c/code\u003e method is still\nreturning \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut, wait. Didn't we just set an instance variable, or property, in our\ninitialize method?\u003c/p\u003e\n\n\u003cp\u003eWe did, but we forgot to, you know, use it in any way. If, when we call \u003ccode\u003e.title\u003c/code\u003e\non a Book instance, we're interested in its title property, maybe we should just\nreturn that property, or instance variable, in that method?\u003c/p\u003e\n\n\u003cp\u003eLet's do that (the difference is in the \u003ccode\u003etitle\u003c/code\u003e method):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the specs, and boom! New error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book properties has an author name\u003cbr\u003e     Failure/Error: book.author = \"Agatha Christie\"\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `author=' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:18:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSetter Methods\u003c/h3\u003e\n\n\u003cp\u003eThat's a weird looking \"undefined method\" error. It says we have no \u003ccode\u003eauthor=\u003c/code\u003e\nmethod.\u003c/p\u003e\n\n\u003cp\u003eWhat? That's gotta be a mistake, right? Nope.\u003c/p\u003e\n\n\u003cp\u003eLet's step back for a second. That \u003ccode\u003etitle\u003c/code\u003e method we wrote before is what is\ncalled a \"getter\". We call it this because, well, it \"gets\" a property for us.\nBut what happens if we want to, say, \u003cem\u003eset\u003c/em\u003e a property, or an instance variable?\nThis is where \"setters\" come into play.\u003c/p\u003e\n\n\u003cp\u003eSetters are methods that allow us to set instance variables. It seems weird, but\nthey all are named like this: \u003ccode\u003eproperty=\u003c/code\u003e. This is because Ruby gives us a nice\nbit of syntactic sugar that allows us to use these methods like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstance.property = \"something\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCool, huh?\u003c/p\u003e\n\n\u003cp\u003eSo if we want to give our books an author, they need to also have a setter\nmethod for author. Let's add one to our class. And, since we know all about\ninstance variables, let's go ahead and set an instance variable, \u003ccode\u003e@author\u003c/code\u003e\nwithin that method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens if we run the specs now?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book properties has an author name\u003cbr\u003e     Failure/Error: expect(book.author).to eq(\"Agatha Christie\")\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `author' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:19:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSetters and Getters Usually (well, sometimes, mostly, kinda) Come in Pairs\u003c/h3\u003e\n\n\u003cp\u003eNow it looks like we're missing an \u003ccode\u003eauthor\u003c/code\u003e method. Just like with \u003ccode\u003etitle\u003c/code\u003e, if\nwe want to access a property of our book, we need a getter for that property.\nFor this reason, getters and setters tend to come in pairs. This is definitely\nnot a hard and fast rule, but for our purposes now, it's a general rule of thumb\nwe can live by.\u003c/p\u003e\n\n\u003cp\u003eLet's go ahead and add the \"getter\" for \u003ccode\u003eauthor\u003c/code\u003e to our book:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd another run of the tests gives us this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book properties has a page count\u003cbr\u003e     Failure/Error: book.page_count = 272\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `page_count=' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:23:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHey, look! We know how to fix this! It looks like our model (class) needs a\nsetter (and probably a getter) for \u003ccode\u003epage_count\u003c/code\u003e. Let's add both of those now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count=(num)\u003cbr\u003e    @page_count = num\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count\u003cbr\u003e    @page_count\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnother run of the specs gives us a very similar error for \u003ccode\u003egenre=\u003c/code\u003e. Let's also\nadd a setter and a getter for that property:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count=(num)\u003cbr\u003e    @page_count = num\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count\u003cbr\u003e    @page_count\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre=(genre)\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre\u003cbr\u003e    @genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun \u003ccode\u003elearn spec/01_book_spec.rb\u003c/code\u003e now, and we get the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book #turn_page can turn the page\u003cbr\u003e     Failure/Error: book.turn_page\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `turn_page' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:37:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eGiving Our Classes Behavior\u003c/h3\u003e\n\n\u003cp\u003eSo, this is pretty silly. Books can't turn their own pages, but we'll use the\nmissing \u003ccode\u003eturn_page\u003c/code\u003e method to demonstrate that we don't only give our classes\nproperties.\u003c/p\u003e\n\n\u003cp\u003eLike I said above, OOP gives us the opportunity to encapsulate both data \u003cem\u003eand\u003c/em\u003e\nbehavior within our classes. Here, we want to be able to make our books turn\ntheir pages.\u003c/p\u003e\n\n\u003cp\u003eHow do we give our books a behavior? Well, we give them methods that do stuff!\nSo, let's give our book a \u003ccode\u003eturn_page\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count=(num)\u003cbr\u003e    @page_count = num\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count\u003cbr\u003e    @page_count\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre=(genre)\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre\u003cbr\u003e    @genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick run of the tests gives us this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book #turn_page can turn the page\u003cbr\u003e     Failure/Error: expect($stdout).to receive(:puts).with(\"Flipping the page...wow, you read fast!\")\u003cbr\u003e       (#).puts(\"Flipping the page...wow, you read fast!\")\u003cbr\u003e           expected: 1 time with arguments: (\"Flipping the page...wow, you read fast!\")\u003cbr\u003e           received: 0 times with arguments: (\"Flipping the page...wow, you read fast!\")\u003cbr\u003e     # ./spec/01_book_spec.rb:35:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt looks like our \u003ccode\u003eturn_page\u003c/code\u003e method doesn't really need to \u003cem\u003edo\u003c/em\u003e much aside from\nprint something to the screen. So, to make the test pass, let's add a \u003ccode\u003eputs\u003c/code\u003e\nstatement to our \u003ccode\u003eturn_page\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count=(num)\u003cbr\u003e    @page_count = num\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count\u003cbr\u003e    @page_count\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre=(genre)\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre\u003cbr\u003e    @genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis means that we can very easily tell our books to turn the page, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebook = Book.new(\"Some Title\")\u003cbr\u003ebook.turn_page\u003cbr\u003e# =\u0026gt; \"Flipping the page...wow, you read fast!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the tests, and, boom! All the tests pass!\u003c/p\u003e\n\n\u003ch3\u003eFinal Steps\u003c/h3\u003e\n\n\u003cp\u003eSo, yay! We've passed the tests, but our simple class is looking kind of, umm,\nlong, no?\u003c/p\u003e\n\n\u003cp\u003eWe seem to have a bunch of setters and getters that look really, really similar\naside from their name. There's got to be a better way.\u003c/p\u003e\n\n\u003cp\u003eAnd there is!\u003c/p\u003e\n\n\u003ch4\u003eAttribute Accessors and Attribute Readers\u003c/h4\u003e\n\n\u003cp\u003eThis is where Attribute Accessors and Attribute Readers come into play. (There\nare also Attribute Writers, but we don't need them for this tutorial.)\u003c/p\u003e\n\n\u003cp\u003eThis is a really simplistic explanation, but here's what they do:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAttribute Readers\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAttribute readers give us a getter, or reader, for free.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn other words, if we have an attribute reader (\u003ccode\u003eattr_reader\u003c/code\u003e) for \u003ccode\u003e:name\u003c/code\u003e, Ruby will create a \u003ccode\u003ename\u003c/code\u003e method for us.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003col\u003e\n\u003cli\u003eAttribute Accessors\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAttribute accessors give us both a getter and a setter for free!\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn other words, if we have an attribute accessor (\u003ccode\u003eattr_accessor\u003c/code\u003e) for \u003ccode\u003e:name\u003c/code\u003e, Ruby will create both \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ename=\u003c/code\u003e methods for us.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe can really, really simplify our code now! Since the \u003ccode\u003eauthor\u003c/code\u003e, \u003ccode\u003epage_count\u003c/code\u003e,\nand \u003ccode\u003egenre\u003c/code\u003e setters or getters do not do anything special (they just set\nproperties), we can turn those into \u003ccode\u003eattr_accessors\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  attr_accessor :author, :page_count, :genre\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur \u003ccode\u003etitle\u003c/code\u003e reader (or getter) is also super basic, so let's add an\n\u003ccode\u003eattr_reader\u003c/code\u003e for it. Remember, this will give us a getter method for free!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  attr_accessor :author, :page_count, :genre\u003cbr\u003e  attr_reader :title\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eWrap Up\u003c/h3\u003e\n\n\u003cp\u003eAnd there you have it! We created a pretty simple Book class that has a bunch of\nproperties, and even turns its own page! Now it's your turn to try some of this\non your own.\u003c/p\u003e\n\n\u003ch2\u003eShoe Class\u003c/h2\u003e\n\n\u003cp\u003eOpen \u003ccode\u003espec/02_shoe_spec.rb\u003c/code\u003e and start making the tests pass. Write your code in\n\u003ccode\u003eshoe.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo run the specs, type \u003ccode\u003elearn spec/02_shoe_spec.rb\u003c/code\u003e on your command line.\u003c/p\u003e\n\n\u003cp\u003eHappy coding!\u003c/p\u003e","exportId":"g46203ba98efcce0dd221d36cb56e7932"},{"id":203739,"title":"OO Design Principles","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-complex-objects-design-principles\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-design-principles/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-design-principles\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-design-principles/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine \"design\" in the context of coding.\u003c/li\u003e\n\u003cli\u003eExplain why design principles are important for you as a programmer.\u003c/li\u003e\n\u003cli\u003eLearn some of the basic design principles that object-oriented programmers employ.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is Code Design and Why Implement It?\u003c/h2\u003e\n\n\u003cp\u003eA program's \u003cem\u003edesign\u003c/em\u003e refers to the manner in which you, the programmer, organize\nand arrange the code of which it is constituted. The manner in which you arrange\nyour code may seem incidental to the overarching objective of writing code that\n\u003cem\u003eworks\u003c/em\u003e, of creating a program that behaves as you want and need it to.\nImplementing design principles, however, is not incidental to writing working\ncode, it is the manner in which you will ensure that the code you write will\ncontinue to work in the future.\u003c/p\u003e\n\n\u003cp\u003eAs programmers, we must code for the future. What does that mean? It means that,\ninevitably, our programs will grow and require change. Let's say you wrote a\nsuper cool web application that becomes wildly popular––how will your program\nchange to accommodate more users and more traffic and the needs of those users?\nOn the other hand, let's say you build an amazing application for a client who\nthen changes their mind about an important feature. What do you do? Scrap all of\nyour work and begin again? By writing code that is flexible and accommodates\nchange, you won't have to.\u003c/p\u003e\n\n\u003cp\u003eThere is another reason why we value design principles as object-oriented\nprogrammers — our own happiness. Especially as Rubyists, working in a\nlanguage specifically designed to be a pleasure to work with, we care about\nmaking programs that are a pleasure to code and a pleasure for others to work\nwith.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e... we need to focus on humans, on how humans care about doing programming or operating the application of the machines.\u003c/p\u003e\n\n\u003cp\u003e-Yukihiro Matsumoto,  \u003cem\u003eThe Philosophy of Ruby, A Conversation with Yukihiro Matsumoto, Part I\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs programmers, we combine the functions of inventors and artists and the code\nwe write should be designed to function well, be flexible to accommodate future\nchange, and be organized in a sensical, logical, even beautiful way. In the\nwords of Sandi Metz, author of Practical Object-Oriented Design in Ruby\n(POODR),\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWe are modern craftspeople, building structures that make up present-day reality, and no less than bricklayers or bridge builders, we take justifiable pride in our accomplishments.\u003c/p\u003e\n\n\u003cp\u003e-Sandi Metz, \u003cem\u003ePractical Object-Oriented Design in Ruby\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eBasic Design Principles\u003c/h2\u003e\n\n\u003cp\u003eThe study of and refinement of the principles of object-oriented design will\ntake place over decades of a programmer's life and career. This reading is meant\nto function as a very basic introduction to the what and why of object-oriented\ndesign. Here, we'll briefly discuss some of the basic principles. Keep these\nprinciples in mind as you continue to learn more about object-oriented Ruby and\nrevisit them in your future work.\u003c/p\u003e\n\n\u003ch3\u003eWhat are Object-Oriented Design Principles?\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDesign is not the act of following a fixed set of rules, it’s a journey along a\nbranching path wherein earlier choices close off some options and open access\nto others. During design you wander through a maze of requirements where every\njuncture represents a decision point that has consequences for the future. Just\nas a sculptor has chisels and files, an object-oriented designer has tools\n— principles and patterns.\u003c/p\u003e\n\n\u003cp\u003e-Sandi Metz, \u003cem\u003ePrinciples of Object-Oriented Design\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eThe Single Responsibility Principle and Separation of Concerns\u003c/h3\u003e\n\n\u003cp\u003eThe single responsibility principle is the idea that classes in object-oriented\nprogramming should have one job, one responsibility, and their services (i.e.,\nmethods) should be narrowly aligned with that responsibility. This principle\ngoes hand in hand with the separation of concerns — the idea that the\nvarious responsibilities, or concerns, of a computer program should be separated\nout into discrete sections.\u003c/p\u003e\n\n\u003cp\u003eLet's take the example of an online shopping web application. Such an\napplication has a number of jobs to handle: we need to have users that sign in\nand purchase items, we have the items themselves that we are selling, we likely\nhave a shopping cart as well. We could develop an application that takes care of\nall of these jobs in the following manner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MyStore\u003cbr\u003e\u003cbr\u003e  def sign_in(user)\u003cbr\u003e    @user = user\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def current_user\u003cbr\u003e    @user\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def item(item)\u003cbr\u003e    @item = item\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def item_price=(item, price)\u003cbr\u003e    @item_price = price\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  def shopping_cart\u003cbr\u003e    @shopping_cart = []\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_item_to_cart(item)\u003cbr\u003e    @shopping_cart \u0026lt;\u0026lt; item\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, our code starts to deteriorate relatively quickly. How can we\ngive an item a price? How can we retrieve that price later? What happens when\nour program needs to grow to accommodate a feature like coupons? Will we\ncontinue to add code to this one file? What happens if our program breaks? How\nwill we determine which of our many methods is responsible for the bug?\u003c/p\u003e\n\n\u003cp\u003eInstead, we want to separate the concerns, or responsibilities, of such an\napplication, wrapping each concern in its own class that produces its own\nobjects. We could write a \u003ccode\u003eUser\u003c/code\u003e class, an \u003ccode\u003eItem\u003c/code\u003e class and a \u003ccode\u003eShoppingCart\u003c/code\u003e\nclass. The \u003ccode\u003eUser\u003c/code\u003e class should be responsible for assigning a user a name and\nother details and signing a user in and out. The \u003ccode\u003eItem\u003c/code\u003e class should have\nmethods that describe an item's attributes, including its price. The\n\u003ccode\u003eShoppingCart\u003c/code\u003e class can collect individual item objects and total their price\nat the time of checkout. By creating classes with their own responsibilities, we\ncreate an application that is organized, logical, and accommodates future\nchange. We also create a program that doesn't give us a headache to even look\nat.\u003c/p\u003e\n\n\u003ch3\u003eAbstraction and Don't Repeat Yourself (DRY)\u003c/h3\u003e\n\n\u003cp\u003eAnother basic OO principle is that of DRY. If you find yourself repeating the\nsame lines of code again and again, that is a good candidate for refactoring. As\nprogrammers, we are lazy (in a good way!), we are always looking for ways to\nachieve the desired behavior by writing less code, and we hate to repeat\nourselves. Let's take a look at an example by revisiting our online shopping\napplication.\u003c/p\u003e\n\n\u003cp\u003eLately, our client has been offering a variety of discounts. At the time of\ncheckout, a user can tell our application that they have a 10, 25, or 50 percent\ndiscount. So, our program needs to determine if a user has a discount and then\napply it, if present. Let's take a look at the \u003ccode\u003echeckout\u003c/code\u003e method of our\n\u003ccode\u003eShoppingCart\u003c/code\u003e class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef checkout(discount=0)\u003cbr\u003e  total = 0\u003cbr\u003e  #the shopping_cart method holds an array of all the user's items\u003cbr\u003e  shopping_cart.each do |item|\u003cbr\u003e    total += item.price\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  if discount == 10\u003cbr\u003e    total = total - total * 10 / 100.00\u003cbr\u003e  elsif discount == 20\u003cbr\u003e    total = total - total * 20 / 100.00\u003cbr\u003e  elsif discount == 50\u003cbr\u003e    total = total - total * 50 / 100.00\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  total\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above method, we are using an if/elsif statement to determine what kind\nof discount a user has, if any, and then doing some math to calculate the\nappropriate total. In order to take a discount into account, we are using six\nlines of code every time we check out a user! That's a lot of repetition.\nAdditionally, what if our application needs to apply coupons to a user's total\n\u003cem\u003ebefore\u003c/em\u003e they check out? Maybe our client has decided to give their users 20% on\ntheir current total if they refer a friend to the site. We would have to use the\nsame if/elsif statement elsewhere in our code. That's a lot of code to\nconstantly re-type.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e If you find yourself copy/pasting the same lines of code more than\nthree times in order to re-use it throughout your program, consider it a \"code\nsmell\". A code smell is a sign that you should refactor.\u003c/p\u003e\n\n\u003cp\u003eLet's refactor this by creating a \u003ccode\u003ecoupon\u003c/code\u003e attr_accessor. Then, our checkout\nmethod can simply use the coupon method to help it calculate the user's total:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass ShoppingCart\u003cbr\u003e  attr_accessor :coupon\u003cbr\u003e\u003cbr\u003e  def checkout\u003cbr\u003e    total = 0\u003cbr\u003e    #the shopping_cart method holds an array of all the user's items\u003cbr\u003e    shopping_cart.each do |item|\u003cbr\u003e      total += item.price\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    if coupon\u003cbr\u003e      total = total - total * coupon / 100.00\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    total\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've achieved the same behavior with less code. This refactor has the added\nbenefit of being \u003cem\u003eflexible\u003c/em\u003e, meaning it will accommodate future change. If our\nclient decides to add a new type of coupon, a 23% off discount, the coupon\nmethod, having \u003cem\u003eabstracted\u003c/em\u003e away the value of the coupon, will still work. This\nis the benefit of abstraction, and we prefer abstracting out attributes by\nwrapping them inside methods over having our code rely on literal values.  \u003c/p\u003e\n\n\u003cp\u003eOur new \u003ccode\u003ecoupon\u003c/code\u003e method is what is referred to as a \u003cstrong\u003ehelper method\u003c/strong\u003e. It\nfunctions to assist our \u003ccode\u003echeckout\u003c/code\u003e method and is called inside the checkout\nmethod.\u003c/p\u003e\n\n\u003ch3\u003eLine Limits on Methods and Classes\u003c/h3\u003e\n\n\u003cp\u003eAnother OO principle states that methods should not exceed 5 lines of code and\nclasses should not exceed 100. While these principles are not hard and fast\nrules, they should guide us whenever possible. We should always be on the\nlookout for ways to pare down our code. Let's take another look at our\n\u003ccode\u003echeckout\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef checkout\u003cbr\u003e    total = 0\u003cbr\u003e    #the shopping_cart method holds an array of all the user's items\u003cbr\u003e    shopping_cart.each do |item|\u003cbr\u003e      total += item.price\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    if coupon\u003cbr\u003e      total = total - total * coupon / 100.00\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    total\u003cbr\u003e\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we are trying to collect the prices of every item in our cart. We\nare doing so by creating a new variable, \u003ccode\u003etotal\u003c/code\u003e, setting it equal to 0,\niterating over the array of items and incrementing the \u003ccode\u003etotal\u003c/code\u003e by the price of\neach item. That's a lot of code! This code has what we might term a \"code smell\"\n— we are using several lines of code just to find the sum of a set of\nnumbers. This seems like a simple and common task that shouldn't require this\nmuch work.\u003c/p\u003e\n\n\u003cp\u003eSure enough, a quick google search of \"sum an array of values ruby\" returns some\ninfo on the\n\u003ca href=\"http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-inject\"\u003e\u003ccode\u003einject\u003c/code\u003e method\u003c/a\u003e.\nLet's implement our refactor:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef checkout\u003cbr\u003e  total = shopping_cart.inject {|sum, item| sum + item.price}\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThis has been a very brief intro into the what, why and how of design principles\nin object-oriented Ruby. These principles are meant to guide you, not limit you.\nThese principles are also just the very tip of the OO design iceberg. You'll\nlearn more about design over the remainder of this course and you'll learn even\nmore about design over the course of the rest of your programming life. Check\nout the resource below, Sandi Metz's book on object-oriented design, to go\ndeeper. This book is a great resource. It is highly respected among\nobject-oriented Rubyists and you'll likely encounter the principles she\ndiscusses in your professional programming life. Even if you don't read it all\nnow, try the first few chapters and then go deeper into it after you've learned\nmore.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.poodr.com/\"\u003ePrinciples of Object-Oriented Design in Ruby, an Agile Primer - Sandi Metz\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"oo-design-principles"},{"id":203740,"title":"Complex Objects Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-complex-objects-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this section, we have learned that classes act as blueprints for objects.\nWhen we define a class, we decide what attributes and behaviors (methods) should\nbe associated with the objects. Then when instances of the class are created \nthey have those state and behavioral properties.\u003c/p\u003e\n\n\u003cp\u003eWe worked through a few tasks such as:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eCreating a domain model with different types of object associations\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWriting instance methods that manipulate nested data structures\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuilding a fully functional object-oriented program\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe also introduced code design principles that object-oriented programmers\ncommonly use. With this knowledge, we are able to use the domain model to write\nmaintainable code in larger scale applications.\u003c/p\u003e","exportId":"complex-objects-conclusion"}]},{"id":21889,"name":"Topics in OO - Object Attributes","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g0d3cc6703a9c8af2609cc4113e2b69e5","items":[{"id":203741,"title":"Object Attributes","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-object-attributes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse methods to abstract or wrap the attributes of an object.\u003c/li\u003e\n\u003cli\u003eExplain the difference between a setter and a getter method.\u003c/li\u003e\n\u003cli\u003eBuild and use setter and getter methods\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've learned how to build classes and even how to give our classes instance methods. Now, we can add the special method \u003ccode\u003einitialize\u003c/code\u003e, which will require certain arguments to be passed when instantiating the class to provide it with initial data. In this example, our Person class has an instance method, \u003ccode\u003e#name\u003c/code\u003e, that is set each time a new Person class is created. This \u003ccode\u003ename\u003c/code\u003e method can be called on an instance of Person (an individual person object) and return that person's name.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    @name\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ekanye = Person.new(\"Kanye\")\u003cbr\u003ekanye.name #=\u0026gt; \"Kanye\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut wait! Kanye has decided he wants to be referred to as \"Yeezy\". Kanye is a huge star so we should probably do what he says. However, as it currently stands, we don't have a way to re-assign Kanye's name. Let's see what happens when we try:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye.name = \"Yeezy\" \u003cbr\u003e#=\u0026gt; NoMethodError: undefined method `name=' for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe get a no method error! Kanye's name change is just one example of the many common situations in which we might want to alter the information or attributes associated with a given object. Let's move on to the next section to learn how to add that functionality to our classes.\u003c/p\u003e\n\n\u003ch2\u003eSetter vs. Getter Methods\u003c/h2\u003e\n\n\u003cp\u003eOur Person class' \u003ccode\u003e#name\u003c/code\u003e method is referred to as a \u003cstrong\u003e\"getter\"\u003c/strong\u003e or reader method. It returns information stored in an instance variable. In order to make a person's name attribute writable, we need to define a \u003cstrong\u003e\"setter\"\u003c/strong\u003e or writer method.\u003c/p\u003e\n\n\u003ch3\u003eDefining a Setter Method\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    @name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name=(new_name)\u003cbr\u003e    @name = new_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA setter method is defined with an \u003ccode\u003e=\u003c/code\u003e, equals sign, appended to the name of the method. The \u003ccode\u003e=\u003c/code\u003e is followed by the \u003ccode\u003e(argument_name)\u003c/code\u003e. Now that we've defined our setter method on the Person class, we can change Kanye's name.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The syntax highlighting may make it look like\nthe \u003ccode\u003e=\u003c/code\u003e sign in \u003ccode\u003ename=\u003c/code\u003e is separate from the name of the definition,\nbut \u003cstrong\u003eit is not\u003c/strong\u003e. The \u003ccode\u003e=\u003c/code\u003e is a necessary piece. Adding it in allows \nus to write \u003ccode\u003ekanye.name = \"Yeezy\"\u003c/code\u003e but this is a bit of syntatic \nsugar. Writing \u003ccode\u003ekanye.name=(\"Yeezy\")\u003c/code\u003e is also a valid way to use \nthis setter method.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eCalling a Setter Method\u003c/h3\u003e\n\n\u003cp\u003eTo call a setter method, you use the \u003ccode\u003e.\u003c/code\u003e notation (dot notation) to call the method and set it equal to a new value.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye = Person.new(\"Kanye\")\u003cbr\u003e\u003cbr\u003ekanye.name\u003cbr\u003e  =\u0026gt; \"Kanye\"\u003cbr\u003e\u003cbr\u003ekanye.name = \"Yeezy\"\u003cbr\u003ekanye.name\u003cbr\u003e  =\u0026gt; \"Yeezy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break it down. We:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eInstantiate a Person instance and name him \"Kanye\".\u003c/li\u003e\n\u003cli\u003eCall our getter method, \u003ccode\u003e#name\u003c/code\u003e to return his name, \u003ccode\u003e\"Kanye\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eCall our setter method \u003ccode\u003e#name=\u003c/code\u003e to change his name to \"Yeezy\"\u003c/li\u003e\n\u003cli\u003eCall our getter method again and see that \u003ccode\u003ekanye\u003c/code\u003e's name is now \u003ccode\u003e\"Yeezy\"\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can also call a setter method like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye.name=(\"Yeezy\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we prefer the first notation.\u003c/p\u003e\n\n\u003ch2\u003eThe Abstraction of Instance Methods\u003c/h2\u003e\n\n\u003cp\u003eIn Ruby, it is possible to simply set an instance variable with the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye.instance_variable_set(:@name, \"Yeezy\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is also possible to simply retrieve an instance variable from an object with the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye.instance_variable_get(:@name)\u003cbr\u003e  =\u0026gt; \"Yeezy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eSince this is the case, why do we even use instance setter and getter methods?\u003c/strong\u003e In fact, there are a number of reasons:\u003c/p\u003e\n\n\u003ch3\u003eSyntactic Vinegar vs. Syntactic Sugar\u003c/h3\u003e\n\n\u003cp\u003eThe first reason is a stylistic one but it is important. As object-oriented Rubyists, we care about our program's readability and design. The above method is ugly. It places a verb at the end of the method name. The weird grammar of this method should remind us not to use it.  (This technique of purposely naming methods in a hard to use manner is called syntactic vinegar.)  \u003c/p\u003e\n\n\u003ch3\u003eExposing Literal Variables vs. Abstracting Attributes\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003einstance_variable_set\u003c/code\u003e method depends on a literal, concrete variable, \u003ccode\u003e@name\u003c/code\u003e. It exposes it directly to the person executing our code. This is bad practice because it forces our program to rely directly on the \u003ccode\u003e@name\u003c/code\u003e variable. Why is this so terrible? Let's take a look at the following use case:\u003c/p\u003e\n\n\u003cp\u003eFor example, Kanye (who by the way has commissioned you to write this amazing Person class program) has decided that our program should store both a first and last name. Let's do a quick refactor of our Person class.\u003c/p\u003e\n\n\u003cp\u003eWe'll initialize our \u003ccode\u003ePerson\u003c/code\u003e instances with both a first and last name.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  def initialize(first_name, last_name)\u003cbr\u003e    @first_name = first_name\u003cbr\u003e    @last_name = last_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  #...\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this change, our program does more than just make Kanye happy. It has some added functionality. We could imagine collecting all of our instances of \u003ccode\u003ePerson\u003c/code\u003e and sorting them by last name, for example.\u003c/p\u003e\n\n\u003cp\u003eBUT, now, any other part of our program that was calling \u003ccode\u003einstance_variable_get(:@name)\u003c/code\u003e is broken! Additionally, any part of our program that is calling \u003ccode\u003einstance_variable_set(:@name)\u003c/code\u003e isn't taking advantage of our new first name and last name functionality. Any attempt to change a person's name with \u003ccode\u003einstance_variable_set(:@name)\u003c/code\u003e wouldn't \u003cem\u003ereally\u003c/em\u003e change their name, because it wouldn't touch the \u003ccode\u003e@first_name\u003c/code\u003e and \u003ccode\u003e@last_name\u003c/code\u003evariables set with our \u003ccode\u003einitialize\u003c/code\u003e method. It would just give them a \u003ccode\u003e@name\u003c/code\u003e variable set to a different value than the \u003ccode\u003e@first_name\u003c/code\u003e and \u003ccode\u003e@last_name\u003c/code\u003e variables. That would get confusing, fast.\u003c/p\u003e\n\n\u003cp\u003eAllowing our code to rely on an instance variable directly created a program that \u003cem\u003eis not flexible\u003c/em\u003e. If our program contains multiple occurrences of \u003ccode\u003einstance_variable_get(:@name)\u003c/code\u003e and \u003ccode\u003einstance_variable_set(:@name)\u003c/code\u003e, we would have to hunt down each and every one and change them to accommodate our shift to using both a first and a last name.\u003c/p\u003e\n\n\u003cp\u003eInstead of writing code that depends on instance (or any type of) variables, we write \u003cem\u003emethods\u003c/em\u003e that contain instance variables. This is a form of abstraction, whereas the instance variable \u003ccode\u003e@name\u003c/code\u003e is a literal value. The literal value reference, the variable \u003ccode\u003e@name\u003c/code\u003e, may change as our application grows and we want our application to seamlessly accommodate that change.\u003c/p\u003e\n\n\u003cp\u003eLet's create our abstraction: the \u003ccode\u003e#name=\u003c/code\u003e and \u003ccode\u003e#name\u003c/code\u003e setter and getter instance methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  def initialize(first_name, last_name)\u003cbr\u003e    @first_name = first_name\u003cbr\u003e    @last_name = last_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name=(full_name)\u003cbr\u003e    first_name, last_name = full_name.split\u003cbr\u003e    @first_name = first_name\u003cbr\u003e    @last_name = last_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    \"#{@first_name} #{@last_name}\".strip\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNow, even if the content of the \u003ccode\u003e#name\u003c/code\u003e method changes, for example, Kanye changes his mind again and wants to be referred to only as \"Yeezy\" (using our interface this change would be \u003ccode\u003ekanye.name = \"Yeezy\"\u003c/code\u003e), the interface, how our application uses that content, remains constant.\u003c/strong\u003e In other words, we can change the content of these methods according to our needs, without needing to hunt down every appearance of them in our program and change them as well, like we would need to do with our \u003ccode\u003einstance_method_set\u003c/code\u003e and \u003ccode\u003einstance_method_get\u003c/code\u003e usages.\u003c/p\u003e\n\n\u003ch2\u003eComing Up\u003c/h2\u003e\n\n\u003cp\u003eIn the following lab, you'll be defining your own class and setter and getter methods. Then, we'll discuss yet another level of abstraction dealing with these method types.\u003c/p\u003e","exportId":"object-attributes"},{"id":203742,"title":"Object Attributes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-object-attributes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine ruby classes.\u003c/li\u003e\n\u003cli\u003eDefine methods that read from and write to instance variables.\u003c/li\u003e\n\u003cli\u003eCreate object properties using methods and instance variables.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lab is all about using instance variables within a class to create methods that represent attributes or properties of an object.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGet started with this lab by clicking the \"Fork\" button, cloning, and running \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003eDog\u003c/code\u003e and \u003ccode\u003elib/dog.rb\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003ch3\u003eGive a Dog a Name\u003c/h3\u003e\n\n\u003cp\u003eYou'll be teaching \u003ccode\u003eDog\u003c/code\u003e about their names through two methods, \u003ccode\u003e#name\u003c/code\u003e, and \u003ccode\u003e#name=\u003c/code\u003e that read and write to a corresponding instance variable \u003ccode\u003e@name\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eGive a Dog a Breed\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-fundamentals/object-attributes-lab/Image_142_CommonDogBreeds.png\" alt=\"Dog Breeds\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou'll be teaching \u003ccode\u003eDog\u003c/code\u003e about their breed through two methods, \u003ccode\u003e#breed\u003c/code\u003e, and \u003ccode\u003e#breed=\u003c/code\u003e that read and write to a corresponding instance variable \u003ccode\u003e@breed\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003ePerson\u003c/code\u003e and \u003ccode\u003elib/person.rb\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003ch3\u003eGive a Person a Name\u003c/h3\u003e\n\n\u003cp\u003eYou'll be teaching \u003ccode\u003ePerson\u003c/code\u003e about their names through two methods, \u003ccode\u003e#name\u003c/code\u003e, and \u003ccode\u003e#name=\u003c/code\u003e that read and write to a corresponding instance variable \u003ccode\u003e@name\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eGive a Person a Job\u003c/h3\u003e\n\n\u003cp\u003eYou'll be teaching \u003ccode\u003ePerson\u003c/code\u003e about their jobs through two methods, \u003ccode\u003e#job\u003c/code\u003e, and \u003ccode\u003e#job=\u003c/code\u003e that read and write to a corresponding instance variable \u003ccode\u003e@job\u003c/code\u003e.\u003c/p\u003e","exportId":"g2efc6da50d7a094e362bcd7dce5a6599"},{"id":203743,"title":"Attribute Accessors","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-attribute-accessors\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn the definition of a macro.\u003c/li\u003e\n\u003cli\u003eSee how macros can abstract away the explicitly defined setter and getter methods in a Ruby class.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is a Macro?\u003c/h2\u003e\n\n\u003cp\u003eNormally when you write a method you are manipulating and returning some kind of data.  This (kind of useless) method takes an integer and returns an integer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef plus_three(num)\u003cbr\u003e  num + 3\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRuby's \u003ccode\u003e#map\u003c/code\u003e method is called on an enumerable and returns an array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emantra = [\"Don't\", \"Repeat\", \"Yourself\"]\u003cbr\u003e\u003cbr\u003emantra.map do |word|\u003cbr\u003e  word[0]\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e# =\u0026gt; [\"D\", \"R\", \"Y\"] \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn Ruby a macro is like a method, just some code, that instead of returning a Ruby datatype returns more Ruby code! This code will get executed along with all the other code you have written when you run your program.  In this lab we will be using a macro, again think of this as a method, to write the definitions of other methods, crazy!  \u003c/p\u003e\n\n\u003cp\u003eThe implementation of macros is considered metaprogramming––the writing of programs that operate on other programs. Metaprogramming is a powerful tool. It can make our lives easier by automating repetitive tasks or providing something like a mini-language inside of another programming language that has the benefits of being concise and descriptive. \u003c/p\u003e\n\n\u003cp\u003eIf this sounds complicated, the answer is it can be—though it doesn't need to be. A danger of metaprogramming is that it can result in very hard to follow code that obscures what is actually happening.\u003c/p\u003e\n\n\u003cp\u003eBelow we'll implement macros to abstract away the manual, explicit definition of setter and getter methods in a Ruby class.\u003c/p\u003e\n\n\u003ch2\u003eAttribute Readers, Writers and Accessors\u003c/h2\u003e\n\n\u003cp\u003eIn object-oriented Ruby, there is a strong convention to have a setter and a getter method that pertain to the same attribute. For example, a \u003ccode\u003e.name\u003c/code\u003e getter and a \u003ccode\u003e.name=\u003c/code\u003e setter on our Person class. Because this pattern is so common, we find ourselves making these manual setter and getter definitions again and again. As Rubyists, we are lazy, and this is a virtue. If we can achieve the same result with less code, we'll do it.\u003c/p\u003e\n\n\u003cp\u003eCheck out the example below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  attr_reader :name\u003cbr\u003e  attr_writer :name\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eattr_reader\u003c/code\u003e macro, followed by the attribute name \u003ccode\u003e:name\u003c/code\u003e, \u003cem\u003ecreated a getter method for us\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eattr_writer\u003c/code\u003e macro, followed by the attribute name \u003ccode\u003e:name\u003c/code\u003e, \u003cem\u003ecreated a setter method for us\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe can now do the following, without explicitly defining a \u003ccode\u003e.name\u003c/code\u003e or \u003ccode\u003e.name=\u003c/code\u003e method ourselves:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejay_z = Person.new\u003cbr\u003ejay_z.name = \"Shawn Carter\"\u003cbr\u003ejay_z.name\u003cbr\u003e  =\u0026gt; \"Shawn Carter\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's compare a \u003ccode\u003ePerson\u003c/code\u003e class that uses macros to one that uses explicit setter and getter methods:\u003c/p\u003e\n\n\u003ch4\u003eMacros\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_writer :name\u003cbr\u003e  attr_reader :name\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eExplicit Method Definitions\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  def name=(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    @name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eAttribute Accessors\u003c/h4\u003e\n\n\u003cp\u003eIf we know that we are going to be reading and writing to the \u003ccode\u003ename\u003c/code\u003e attribute on our \u003ccode\u003ePerson\u003c/code\u003e class, we can use another macro called an attribute accessor.\u003c/p\u003e\n\n\u003cp\u003eSo this code...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_writer :name\u003cbr\u003e  attr_reader :name\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...can now be written like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe now have access to reader and writer methods from one macro!\u003c/p\u003e\n\n\u003ch4\u003eUsing Macros is Usually Better\u003c/h4\u003e\n\n\u003cp\u003eThe usage of macros is preferred over the explicit definition of setter and getter methods, \u003cem\u003eunless you need to customize the implementation of a method\u003c/em\u003e, like in our previous lesson when we defined \u003ccode\u003e.name\u003c/code\u003e as returning the first and last name variables combined.\u003c/p\u003e\n\n\u003cp\u003eTo understand why, simply look at the code above. Which class would you rather write? The longer one, or the shorter one?\u003c/p\u003e\n\n\u003cp\u003eWhen opening up a class, \u003ccode\u003eattr_accessor\u003c/code\u003e (along with \u003ccode\u003eattr_writer\u003c/code\u003e and \u003ccode\u003eattr_reader\u003c/code\u003e) allow you to get a high level overview of the class right from the start.\u003c/p\u003e\n\n\u003cp\u003eAs developers we spend more time reading rather than writing code, so it's important that the code we write be clear, concise and eloquent. We want to be kind to our future selves (when we come back to the programs we've written) and to other developers who will work with our code. \u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=ab11lJJKm8M\"\u003eVideo Review- Object Properties\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","exportId":"attribute-accessors"},{"id":203744,"title":"Attribute Accessors Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-attribute-accessors-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice defining a class\u003c/li\u003e\n\u003cli\u003eUse macros to create setter and getter methods\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-fundamentals/attribute-accessors-lab/Image_137_CatInaBox%28B%29.jpg\" alt=\"Image by Dominic Albers from Pixabay\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be creating a Cat class. Every instance of a Cat should have\na name and be able to meow. In other words, I should be able to do:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emaru = Cat.new\u003cbr\u003emaru.name = \"Maru\"\u003cbr\u003e\u003cbr\u003emaru.name\u003cbr\u003e# =\u0026gt; \"Maru\"\u003cbr\u003e\u003cbr\u003emaru.meow\u003cbr\u003e# \"meow!\"\u003cbr\u003e# =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eRun the test suite to get started. You'll be writing all your code in the \u003ccode\u003elib/meowing_cat.rb\u003c/code\u003e file.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a class, called Cat.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eattr_accessor\u003c/code\u003e macro to create a setter and getter method for a cat's name.\u003c/li\u003e\n\u003cli\u003eWrite a method, \u003ccode\u003e.meow\u003c/code\u003e, that outputs \"meow!\" to the terminal using the \u003ccode\u003eputs\u003c/code\u003e method when called on an instance of Cat.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g22910e3f6c2fc9f1304203283fb3059e"},{"id":203745,"title":"Email Parser Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-email-parser-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-email-parser-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-email-parser-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-email-parser-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice defining a class and using an \u003ccode\u003eattr_accessor\u003c/code\u003e to create setter and\ngetter methods\u003c/li\u003e\n\u003cli\u003eUse TDD to write working code\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eYou will be writing an \u003ccode\u003eEmailAddressParser\u003c/code\u003e class that gets initialized with a string\nof emails.\u003c/p\u003e\n\n\u003cp\u003eYour job is to parse those email addresses into a useful array using an instance\nmethod, \u003ccode\u003eparse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eI should be able to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eemail_addresses = \"john@doe.com, person@somewhere.org\"\u003cbr\u003eparser = EmailAddressParser.new(email_addresses)\u003cbr\u003e\u003cbr\u003eparser.parse\u003cbr\u003e# =\u0026gt; [\"john@doe.com\", \"person@somewhere.org\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should be able to initialize with a list of email addresses either separated\nwith spaces \u003cem\u003eor\u003c/em\u003e separated with commas. The \u003ccode\u003eparse\u003c/code\u003e method should, additionally,\nonly return unique addresses.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis lab is test-driven, so run the test suite to get started and use the test\noutput to get the program working.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow will you control for parsing a list of email addresses that is \u003cem\u003eeither\u003c/em\u003e\ncomma separated \u003cem\u003eor\u003c/em\u003e separated by a white space?\u003c/li\u003e\n\u003cli\u003eUse an \u003ccode\u003eattr_accessor\u003c/code\u003e to set and get the list of email addresses\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gbcdbb8a67d25959120b1e094544f7021"},{"id":203746,"title":"Anagram Detector Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"anagram-detector\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/anagram-detector/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/anagram-detector\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/anagram-detector/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Build a class with an initialize method and use an \u003ccode\u003eattr_accessor\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eYou will write a program that, given a word and a list of possible\n\u003ca href=\"http://www.dictionary.com/browse/anagram\"\u003eanagrams\u003c/a\u003e, selects the correct one(s).\u003c/p\u003e\n\n\u003cp\u003eYour class, \u003ccode\u003eAnagram\u003c/code\u003e should take a word on initialization, and instances should\nrespond to a \u003ccode\u003ematch\u003c/code\u003e method that takes an array of possible anagrams. It should\nreturn all matches in an array. If no matches exist, it should return an empty\narray.\u003c/p\u003e\n\n\u003cp\u003eIn other words, given: \u003ccode\u003e\"listen\"\u003c/code\u003e and \u003ccode\u003e%w(enlists google inlets banana)\u003c/code\u003e the\nprogram should return \u003ccode\u003e[\"inlets\"]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elisten = Anagram.new(\"listen\")\u003cbr\u003elisten.match(%w(enlists google inlets banana))\u003cbr\u003e\u003cbr\u003e# =\u0026gt; [\"inlets\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e \u003ca href=\"http://stackoverflow.com/questions/1274675/ruby-what-does-warray-mean\"\u003e\u003ccode\u003e%w(some words)\u003c/code\u003e\u003c/a\u003e is simply a shortcut for\ninstantiating an array with items in it!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eOnce again, this lab is test-driven. Run the test suite to get started. Remember\nthat you can use the \u003ccode\u003elearn/rspec --fail-fast\u003c/code\u003e option to run the tests only up\nuntil the first failure, in order to work progressively through the tests.\u003c/p\u003e\n\n\u003cp\u003eWrite your solution in \u003ccode\u003eanagram.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eUse an \u003ccode\u003eattr_accessor\u003c/code\u003e to create a setter and getter method for the word that\nthe Anagram class instances are initialized with.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHow will you determine if one word is an anagram for another?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou'll need to iterate over the array of words that the \u003ccode\u003e.match\u003c/code\u003e method\ntakes as an argument. You will compare each word of that array to the word\nthat the Anagram class is initialized with.\u003c/li\u003e\n\u003cli\u003eTo determine if they are anagrams, try determining if they are composed of\nthe same letters. Remember that you can split a word into an array of letters\nusing \u003ccode\u003esome_word.split(\"\")\u003c/code\u003e. You can compare two arrays using the \u003ccode\u003e==\u003c/code\u003e. For\nexample:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e[1, 2, 3] == [1, 2, 3]\u003cbr\u003e=\u0026gt; true\u003cbr\u003e\u003cbr\u003e[1, 3, 2] == [1, 2, 3]\u003cbr\u003e=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTwo arrays are equal if they contain the same elements, in the same order.\nRemember that you can \u003ccode\u003e.sort\u003c/code\u003e an array's elements. This will help in your\ncomparison:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1, 3, 2].sort == [3, 2, 1].sort\u003cbr\u003e=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://stackoverflow.com/\"\u003eStackOverflow\u003c/a\u003e - \u003ca href=\"http://stackoverflow.com/questions/1274675/ruby-what-does-warray-mean\"\u003eRuby: what does %w(array) mean?\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"ge3cb9c1f92560615736ca372c5297f62"}]},{"id":21890,"name":"Topics in OO - Self in Ruby","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g54a24b7685e8f0d91537698834cc93a8","items":[{"id":203747,"title":"Introduction to Self","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFor newly developing Rubyists, \u003ccode\u003eself\u003c/code\u003e can be a bit baffling. You've learned\nabout the concept of the class, and that each object in Ruby has one. The\nkeyword \u003ccode\u003eself\u003c/code\u003e is a special variable that points to the object that \"owns\" the\ncurrently executing code. You can think of it as a Ruby program asking, \"who am\nI right now?\". Ruby is using the concept of \u003ccode\u003eself\u003c/code\u003e to determine which execution\ncontext to use at any point in the program.\u003c/p\u003e\n\n\u003cp\u003eIn these few lessons, we'll demonstrate:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow the \u003ccode\u003eself\u003c/code\u003e keyword works\u003c/li\u003e\n\u003cli\u003eHow to use \u003ccode\u003eself\u003c/code\u003e within an instance method to refer to the class instance on\nwhich that method is being called\u003c/li\u003e\n\u003cli\u003eThe concept of monkey patching\u003c/li\u003e\n\u003cli\u003eHow to use \u003ccode\u003eattr_accessor\u003c/code\u003e, \u003ccode\u003eattr_reader\u003c/code\u003e, and \u003ccode\u003eattr_writer\u003c/code\u003e as needed\u003c/li\u003e\n\u003cli\u003eHow to implement monkey patching with a class that you've created\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, we're going to talk about how to use \u003ccode\u003eself\u003c/code\u003e, and how to apply\n\u003ccode\u003eself\u003c/code\u003e in a variety of situations.\u003c/p\u003e","exportId":"introduction-to-self"},{"id":203748,"title":"Self Basics","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the concept of self-awareness in object-oriented programming. \u003c/li\u003e\n\u003cli\u003eUnderstand how the \u003ccode\u003eself\u003c/code\u003e keyword works.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eself\u003c/code\u003e within an instance method to refer to the class instance on which that method is being called. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen we create a class, each new instance of a class is considered to be an object. An object is a bundle of code that contains both characteristics and behaviors. \u003c/p\u003e\n\n\u003cp\u003eFor example, if we create a \u003ccode\u003eDog\u003c/code\u003e class like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def bark\u003cbr\u003e    \"Woof!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could create a new instance of \u003ccode\u003eDog\u003c/code\u003e like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido = Dog.new(\"Fido\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could then access Fido's name like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido.name\u003cbr\u003e  =\u0026gt; \"Fido\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eor tell Fido to bark like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido.bark\u003cbr\u003e  =\u0026gt; \"Woof!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFido, the individual dog that we created, has a number of methods we can call on it that will reveal its attributes, like Fido's name, and enact certain behaviors, like barking. \u003c/p\u003e\n\n\u003cp\u003eIf an object, like \u003ccode\u003efido\u003c/code\u003e, is a neat package of attributes and behaviors, does an object know about itself? In other words, does each individual object we create have the ability to enact behaviors \u003cem\u003eon itself\u003c/em\u003e, instead of in isolation, like our \u003ccode\u003e#bark\u003c/code\u003e method?\u003c/p\u003e\n\n\u003cp\u003eIn fact, every object is aware of itself and we can define methods in which we tell objects to operate on themselves. We do so using the \u003ccode\u003eself\u003c/code\u003e keyword, inside the body of an instance method, to refer to the very same object the method is being called on. \u003c/p\u003e\n\n\u003cp\u003eThis is where the analogy of our objects as being alive really resonates. Every object is, quite literally, self aware. \u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003eself\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eTry this:\u003c/p\u003e\n\n\u003cp\u003eCopy and paste the following code into IRB:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def showing_self\u003cbr\u003e    puts self\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have our \u003ccode\u003eDog\u003c/code\u003e class ready to go, copy and paste the following method invocations into IRB:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido = Dog.new\u003cbr\u003efido.showing_self\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe call to \u003ccode\u003e#showing_self\u003c/code\u003e should output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow does this work? Inside the \u003ccode\u003e#showing_self\u003c/code\u003e method we use the \u003ccode\u003eself\u003c/code\u003e keyword. The \u003ccode\u003eself\u003c/code\u003e keyword refers to the instance, or object, that the \u003ccode\u003e#showing_self\u003c/code\u003e method is being called on. \u003c/p\u003e\n\n\u003cp\u003eSo, when we call \u003ccode\u003e#showing_self\u003c/code\u003e on \u003ccode\u003efido\u003c/code\u003e, the method will \u003ccode\u003eputs\u003c/code\u003e out to the terminal the \u003ccode\u003eDog\u003c/code\u003e instance that is \u003ccode\u003efido\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch2\u003eOperating on \u003ccode\u003eself\u003c/code\u003e in an Instance Method\u003c/h2\u003e\n\n\u003cp\u003eLet's say that Fido here is getting adopted. Fido's new owner is Sophie. Let's write an \u003ccode\u003eattr_accessor\u003c/code\u003e on our \u003ccode\u003eDog\u003c/code\u003e for the owner attribute. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :owner\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can set Fido's \u003ccode\u003eowner\u003c/code\u003e attribute equal to the string of \u003ccode\u003e\"Sophie\"\u003c/code\u003e. The name of his new owner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido.owner = \"Sophie\"\u003cbr\u003e\u003cbr\u003efido.owner\u003cbr\u003e  =\u0026gt; \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, Fido now knows the name of his owner. Let's think about the situation in which \u003ccode\u003efido\u003c/code\u003e gets a new owner. This would occur at the moment in which \u003ccode\u003efido\u003c/code\u003e is adopted. \u003c/p\u003e\n\n\u003cp\u003eTo represent this with code, we could write an \u003ccode\u003e#adopted\u003c/code\u003e method like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef adopted(dog, owner_name)\u003cbr\u003e  dog.owner = owner_name\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have a method that takes in two arguments, an instance of the \u003ccode\u003eDog\u003c/code\u003e class and an owner's name. We could call our method like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eadopted(fido, \"Sophie\")\u003cbr\u003e\u003cbr\u003e# now we can ask Fido who his owner is:\u003cbr\u003e\u003cbr\u003efido.owner\u003cbr\u003e  =\u0026gt; \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, the beauty of object-oriented programming is that we can encapsulate, or wrap up, attributes and behaviors into one object. Instead of writing a method that is not associated to any particular object and that takes in certain objects as arguments, we can simply teach our \u003ccode\u003eDog\u003c/code\u003e instances how to get adopted.\u003c/p\u003e\n\n\u003cp\u003eLet's refactor our code above into an instance method on the \u003ccode\u003eDog\u003c/code\u003e class. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :owner\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def bark\u003cbr\u003e    \"Woof!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def get_adopted(owner_name)\u003cbr\u003e    self.owner = owner_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we use the \u003ccode\u003eself\u003c/code\u003e keyword inside of the \u003ccode\u003e#get_adopted\u003c/code\u003e instance method to refer to whichever dog this method is being called on. We set that dog's \u003ccode\u003eowner\u003c/code\u003e property equal to the new owner's name by calling the \u003ccode\u003e#owner=\u003c/code\u003e method on \u003ccode\u003eself\u003c/code\u003e inside the method body. \u003c/p\u003e\n\n\u003cp\u003eThink about it: if \u003ccode\u003eself\u003c/code\u003e refers to the object on which the method is being called, and if that object is an instance of the \u003ccode\u003eDog\u003c/code\u003e class, then we can call any of our other instance methods on \u003ccode\u003eself\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/\"\u003eMetaprogramming in Ruby\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"self-basics"},{"id":203749,"title":"Counting Sentences Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-count-sentences-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-count-sentences-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-count-sentences-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-count-sentences-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice defining instance methods on a class.\u003c/li\u003e\n\u003cli\u003ePractice defining instance methods that use the self keyword to operate on the object on which the method is being called.\u003c/li\u003e\n\u003cli\u003eLearn about monkey patching.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be adding a few instance methods to Ruby's \u003ccode\u003eString\u003c/code\u003e class. We generally want to avoid altering built-in classes (especially if we are working with other people), but in this case, we're not overwriting any methods, and it's a good exercise in OO programming. The practice of adding methods to or altering Ruby's built in classes is called monkey patching. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eString\u003c/code\u003e class is just like any other class that we might define, such as a \u003ccode\u003eDog\u003c/code\u003e class or a \u003ccode\u003ePerson\u003c/code\u003e class. The \u003ccode\u003eString\u003c/code\u003e class, however, is native to, or included in, Ruby. So, we can add or change methods in the \u003ccode\u003eString\u003c/code\u003e class just like we would in any of the classes that we define ourselves. \u003c/p\u003e\n\n\u003ch3\u003eMonkey Patching\u003c/h3\u003e\n\n\u003cp\u003eMonkey patching is the practice of adding methods to or altering Ruby's core classes. Monkey patching is dangerous! What if, for example, you decide to monkey patch Ruby's String class to produce a quick-fix that shortens a certain section of code in your program. Then, months later, you run into major bugs as a result, or some of your collaborators don't know about your monkey patch and develop bugs of their own that they don't know the origin of? For reasons like these, monkey patching should be considered very, very carefully. We're going to do it today, just for fun, but you do want to avoid doing it when working on your own programs. \u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou'll be coding your solution in \u003ccode\u003elib/count_sentences.rb\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#sentence?\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eDefine this instance method to return \u003ccode\u003etrue\u003c/code\u003e if the string you are calling it on ends in a period and false if it does not. \u003c/p\u003e\n\n\u003cp\u003eYou will need to use the \u003ccode\u003eself\u003c/code\u003e keyword in the body of this method to refer to the string on which the method is being called. You can use the \u003ccode\u003e#end_with?\u003c/code\u003e method to determine what the final character in a string is. \u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"HI!\".end_with?(\"!\")\u003cbr\u003e  =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCall the \u003ccode\u003eend_with?\u003c/code\u003e method on \u003ccode\u003eself\u003c/code\u003e inside of your \u003ccode\u003e#sentence?\u003c/code\u003e method. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#question?\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis instance method should use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the string on which it is being called. This method should return true if a string ends with a question mark and false if it does not. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003eexclamation?\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis instance method should use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the string on which it is being called. This method should return true if a string ends with an exclamation mark and false if it does not. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#count_sentences\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eWhat we'd like to be able to do is call a \u003ccode\u003ecount_sentences\u003c/code\u003e method on a string, and get back a, well, count of sentences in that string. In other words:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"This is a string! It has three sentences. Right?\".count_sentences\u003cbr\u003e# =\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour \u003ccode\u003e#count_sentences\u003c/code\u003e method should use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the string on which it is called. \u003c/p\u003e\n\n\u003cp\u003eThink about the steps you need to go through to enact the desired behavior:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://ruby-doc.org/core-2.2.0/String.html#method-i-split\"\u003e\u003ccode\u003esplit\u003c/code\u003e\u003c/a\u003e the string on any and all periods, question marks and exclamation marks. \u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://ruby-doc.org/core-2.2.0/Array.html#method-i-count\"\u003e\u003ccode\u003ecount\u003c/code\u003e\u003c/a\u003e the number of elements that results from that \u003ccode\u003esplit\u003c/code\u003e. \u003c/li\u003e\n\u003cli\u003eRemember to consider edge cases such as the following sentence: \u003ccode\u003e\"This, well, is a sentence. This is too!! And so is this, I think? Woo...\"\u003c/code\u003e. What would happen if we split this sentence on the punctuation characters? We would end up with an array that contains empty strings as well as strings containing sentences. How would you eliminate empty strings from an array? We recommend placing \u003ccode\u003erequire 'pry'\u003c/code\u003e on the top of the file and placing a \u003ccode\u003ebinding.pry\u003c/code\u003e inside of the \u003ccode\u003e#count_sentences\u003c/code\u003e method to help you get this test passing. \u003c/li\u003e\n\u003c/ul\u003e","exportId":"g86809c235d7ebc9f8ca7e8b83d43550c"},{"id":203750,"title":"OO Person Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-person-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-person-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-person-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-person-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/web-dev-readme-photos/oo-labs/people.jpg\" alt=\"people\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eGain proficiency instantiating a class.\u003c/li\u003e\n\u003cli\u003eGain ability to discern when to implement \u003ccode\u003eattr_accessor\u003c/code\u003e, \u003ccode\u003eattr_reader\u003c/code\u003e,  and \u003ccode\u003eattr_writer\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eGain ability to discern when to define your own \u003ccode\u003eattr_reader\u003c/code\u003e (getter) and \u003ccode\u003eattr_writer\u003c/code\u003e (setter) methods.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eTo practice object oriented programming (OOP), you're going to create a Person class. Each instance of the \u003ccode\u003ePerson\u003c/code\u003e class will have the ability to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eget paid/receive payments\u003c/li\u003e\n\u003cli\u003etake a bath\u003c/li\u003e\n\u003cli\u003ecall a friend\u003c/li\u003e\n\u003cli\u003estart a conversation\u003c/li\u003e\n\u003cli\u003estate if they are happy and/or clean\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst you need to create a person class that is initialized with a name that cannot be changed.\u003c/li\u003e\n\u003cli\u003eEach instance of class \u003ccode\u003ePerson\u003c/code\u003eshould be able to remember their name\u003c/li\u003e\n\u003cli\u003eEach instance of  class \u003ccode\u003ePerson\u003c/code\u003e should start with $25 in their bank accounts\u003c/li\u003e\n\u003cli\u003eEach instance of  class \u003ccode\u003ePerson\u003c/code\u003e should start with eight happiness points\u003c/li\u003e\n\u003cli\u003eEach instance of  class \u003ccode\u003ePerson\u003c/code\u003e should start with eight hygiene points\u003c/li\u003e\n\u003cli\u003eThe happiness and hygiene points should be able to change, however the maximum and minimum points for both happiness and hygiene should be 10 and  0 respectively\u003c/li\u003e\n\u003cli\u003eThe amount in the bank account should also be able to change, though it has no max or min.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch5\u003eNon-attribute defining instance methods\u003c/h5\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eclean?\u003c/code\u003e and \u003ccode\u003ehappy?\u003c/code\u003e methods are pretty similiar: they should return \u003ccode\u003etrue\u003c/code\u003e if the happiness or hygiene points exceed seven. Otherwise they should return false.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eget_paid\u003c/code\u003e method should accept a salary amount and add this to the person's bank account. Then the method should return the string \"all about the benjamins\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003etake_bath\u003c/code\u003e method should increment the person's hygiene points by four and return the string \"♪ Rub-a-dub just relaxing in the tub ♫\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003ework_out\u003c/code\u003e method should increment the person's happiness by two points, decrease their hygiene by three points, and return the Queen lyrics, \"♪ another one bites the dust ♫\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003ecall_friend\u003c/code\u003e method should accept another instance of the Person class, or \"friend\". The method should increment the caller and the callee's happiness points by three. If Stella calls her friend Felix, the method should return \"Hi Felix! It's Stella. How are you?\"\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFinally, the \u003ccode\u003estart_conversation\u003c/code\u003e method should accept two arguments, the person to start a conversation with and the topic of conversation.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf the topic is politics, both people get sadder and the method returns \"blah blah partisan blah lobbyist\".\u003c/li\u003e\n\u003cli\u003eIf the topic is weather, both people get a little happier and the method returns \"blah blah sun blah rain\".\u003c/li\u003e\n\u003cli\u003eIf the topic is not politics or weather, their happiness points don't change and the method returns \"blah blah blah blah blah\".\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g8352a2697a574eb4dee889434f0512f7"},{"id":203752,"title":"Self Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis module has revealed to you the mysteries of Ruby's \u003ccode\u003eself\u003c/code\u003e keyword. Remember\nthat you can think of \u003ccode\u003eself\u003c/code\u003e as a Ruby program asking the question: \"Who am I\nright now?\" It's a special variable that points to the object associated with\nthe code we're currently executing. We walked through how to use it properly. We\nexplored the concept of \"monkey patching,\" the practice of adding methods to or\naltering Ruby's core classes—which is a great thing to know, but be careful\nabout using it in your programs! We also covered how to use \u003ccode\u003eattr_accessor\u003c/code\u003e,\n\u003ccode\u003eattr_reader\u003c/code\u003e, and \u003ccode\u003eattr_writer\u003c/code\u003e as needed.\u003c/p\u003e\n\n\u003cp\u003eThe concept of Ruby's \u003ccode\u003eself\u003c/code\u003e might be an initially confusing one, but, armed\nwith the knowledge and experience you've gained over the past several lessons,\nyou're prepared to implement it in a variety of future situations.\u003c/p\u003e","exportId":"self-conclusion"}]},{"id":21891,"name":"Topics in OO - Class Variables and Methods in Ruby","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g635d4d3d9e6dc4b5a20be61ee5cac5b4","items":[{"id":203753,"title":"Introduction to Class Variables and Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eClasses are like the skeleton from which individual objects are created. When\nyou make use of classes you can reuse code rather than writing similar code over\nand over again. This makes code more readable and \u003cem\u003e\"DRY\"\u003c/em\u003e (\u003cstrong\u003eD\u003c/strong\u003eon’t \u003cstrong\u003eR\u003c/strong\u003eepeat\n\u003cstrong\u003eY\u003c/strong\u003eourself).\u003c/p\u003e\n\n\u003cp\u003eSo far, we've primarily created instance methods and instance variables for our\nindividual objects to use. However, we can also create class methods and\nvariables. Class variables are used to store values related to a class rather\nthan a particular instance. Class methods are similarly used for implementing\nbehavior that is related to a class in general rather than an instance.\u003c/p\u003e\n\n\u003cp\u003eIn the next several lessons we'll be taking a look at:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow to recognize a class constant\u003c/li\u003e\n\u003cli\u003eUtilizing class constants\u003c/li\u003e\n\u003cli\u003eKnowing when to use attr_accessor vs creating the methods manually\u003c/li\u003e\n\u003cli\u003eUse cases for defining private and protected methods\u003c/li\u003e\n\u003cli\u003eThe difference between public, private, and protected methods\u003c/li\u003e\n\u003cli\u003eUsing class variables to keep track of data pertaining to a class\u003c/li\u003e\n\u003cli\u003eThe concept of remembrance in object-oriented programming\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAt a glance, you might assume class variables work like instance variables;\nhowever, this is not the case. In this section, we'll distinguish the difference\nbetween class methods and variables and when to use them.\u003c/p\u003e\n\n\u003cp\u003eIf at any point you need a refresher on different types of Ruby variables, \u003ca href=\"https://medium.com/swlh/hitchhikers-guide-to-ruby-variables-1b4cf83d540c\"\u003echeck this blog post\u003c/a\u003e.\u003c/p\u003e","exportId":"introduction-to-class-variables-and-methods"},{"id":203754,"title":"Class Variables and Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-and-class-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a class variable. \u003c/li\u003e\n\u003cli\u003eDefine a class method. \u003c/li\u003e\n\u003cli\u003eUnderstand why and when to use class variables and methods. \u003c/li\u003e\n\u003cli\u003eUnderstand the scope of class variables and class methods. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction: Classes are Objects Too\u003c/h2\u003e\n\n\u003cp\u003eAll objects are bundles of data and logic––or attributes and behavior. We understand this to be true of instances of a class. Each instance contains attributes or properties as well as methods that can enact behaviors. \u003c/p\u003e\n\n\u003cp\u003eFor example, let's say we have a class, \u003ccode\u003eAlbum\u003c/code\u003e. Every individual album instance should have a release date attribute. To accomplish this, we'll define an instance variable, \u003ccode\u003e@release_date\u003c/code\u003e and an instance method \u003ccode\u003e#release_date\u003c/code\u003e that exposes or reveals that variable. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Album\u003cbr\u003e\u003cbr\u003e  def release_date=(date)\u003cbr\u003e    @release_date = date\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def release_date\u003cbr\u003e    @release_date\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have an instance variable, \u003ccode\u003e@release_date\u003c/code\u003e, which can be set equal to a value using the \u003ccode\u003erelease_date=()\u003c/code\u003e method, a setter method. Then, we have a getter method \u003ccode\u003erelease_date\u003c/code\u003e that returns the value of \u003ccode\u003e@release_date\u003c/code\u003e. Now, we can execute the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ealbum = Album.new\u003cbr\u003ealbum.release_date = 1991\u003cbr\u003ealbum.release_date \u003cbr\u003e  # =\u0026gt; 1991\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat you might not know, however, is that the \u003ccode\u003eAlbum\u003c/code\u003e class itself is also an object. If our definition of an object is a bundle of code that contains attributes and behaviors, then the entire \u003ccode\u003eAlbum\u003c/code\u003e class itself absolutely qualifies. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eAlbum\u003c/code\u003e class can have its own variables and methods. We call these class variables and class methods. \u003c/p\u003e\n\n\u003ch2\u003eWhy Use Class Variables and Methods\u003c/h2\u003e\n\n\u003cp\u003eLet's say you wanted to keep a counter for how many albums you had in your music collection. That way, you can brag to your friends about what a music aficionado you are. The current code in our \u003ccode\u003eAlbum\u003c/code\u003e class has no way to keep such a count. Looks like we will have to write some code to accommodate this new feature of our program.\u003c/p\u003e\n\n\u003cp\u003eWhen it comes to adding new features or functionalities to our code, we start out by asking a question: whose responsibility is it to enact this behavior or functionality? \u003c/p\u003e\n\n\u003cp\u003eRight now, our program is pretty simple. We have an \u003ccode\u003eAlbum\u003c/code\u003e class and we have album instances. So, is it the responsibility of an individual album to keep a count of all of the other albums? Or is it the responsibility of the \u003ccode\u003eAlbum\u003c/code\u003e class, which actually produces the individual albums, to keep a running count? I think we can agree that it \u003cem\u003eisn't\u003c/em\u003e the job of the individual albums, but the job of the \u003ccode\u003eAlbum\u003c/code\u003e class to keep a count of all of the instances it produces. \u003c/p\u003e\n\n\u003cp\u003eNow that we've decided whose job it is to enact the \"keep a count of all albums\" behavior, we can talk about \u003cem\u003ehow\u003c/em\u003e we enact that behavior. \u003c/p\u003e\n\n\u003cp\u003eWe do so with the use of class variables and methods. Our goal is to be able to ask the \u003ccode\u003eAlbum\u003c/code\u003e class: \"how many albums have you produced?\" When we ask an object to tell us something about itself, we use methods. It would be great if we could do something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAlbum.count\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand return the number of existing albums. Let's build out this capability now. \u003c/p\u003e\n\n\u003ch2\u003eBuilding Class Methods and Using Class Variables\u003c/h2\u003e\n\n\u003cp\u003eAn instance variable is responsible for holding information regarding an instance of a class and is accessible only to that instance of the class. A class variable is accessible to the entire class––it has \u003cstrong\u003eclass scope\u003c/strong\u003e. A class method is a method that is called on the class itself, not on the instances of that class. Class variables store information regarding the class as a whole and class methods enact behaviors that belong to the whole class, not just to individual instances of that class. \u003c/p\u003e\n\n\u003ch3\u003eDefining a class variable\u003c/h3\u003e\n\n\u003cp\u003eA class variable looks like this: \u003ccode\u003e@@variable_name\u003c/code\u003e. Just like an instance or a local variable, you can set it equal to any type of data. \u003c/p\u003e\n\n\u003cp\u003eLet's create a class variable, \u003ccode\u003e@@album_count\u003c/code\u003e and set it equal to \u003ccode\u003e0\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Album\u003cbr\u003e\u003cbr\u003e  @@album_count = 0\u003cbr\u003e\u003cbr\u003e  def release_date=(date)\u003cbr\u003e    @release_date = date\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def release_date\u003cbr\u003e    @release_date\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now we have a class variable to store our count of albums in. We can't yet access that variable from outside of our class though. How can we expose the contents of that variable? With a class method. \u003c/p\u003e\n\n\u003ch3\u003eDefining a class method\u003c/h3\u003e\n\n\u003cp\u003eA class method is defined like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef self.class_method_name\u003cbr\u003e  # some code\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, the \u003ccode\u003eself\u003c/code\u003e keyword refers to the entire class itself, \u003cem\u003enot to an instance of the class\u003c/em\u003e. In this case, we are inside the class only, not inside an instance method of that class. So, we are in the class scope, not the instance scope. \u003c/p\u003e\n\n\u003cp\u003eLet's define a class method \u003ccode\u003e.count\u003c/code\u003e that returns the current count of albums. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Album\u003cbr\u003e  @@album_count = 0\u003cbr\u003e\u003cbr\u003e  def self.count\u003cbr\u003e    @@album_count\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now if we call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAlbum.count\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt will return \u003ccode\u003e0\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eOperating on a class variable inside an instance method\u003c/h3\u003e\n\n\u003cp\u003eCurrently, however, our \u003ccode\u003e@@album_count\u003c/code\u003e is stuck at \u003ccode\u003e0\u003c/code\u003e. When and how should we increment it? The count of albums should go up as soon as a new album is created, or initialized. We can hook into this moment in time in our \u003ccode\u003e#initialize\u003c/code\u003e method. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Album\u003cbr\u003e  @@album_count = 0 \u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    @@album_count += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.count\u003cbr\u003e    @@album_count\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we are using the \u003ccode\u003e@@album_count\u003c/code\u003e class variable, inside of our \u003ccode\u003e#initialize\u003c/code\u003e method, which is an instance method. We are saying: when a new album is created, access the \u003ccode\u003e@@album_count\u003c/code\u003e class variable and increment its value by 1. \u003c/p\u003e\n\n\u003cp\u003eWe can access our class variables anywhere in our class: in both class and instance methods. \u003c/p\u003e\n\n\u003cp\u003eNow our code should behave in the following manner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAlbum.new\u003cbr\u003eAlbum.new\u003cbr\u003eAlbum.new\u003cbr\u003e\u003cbr\u003eAlbum.count\u003cbr\u003e  # =\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf at any point you need a refresher on different types of Ruby variables, \u003ca href=\"https://medium.com/swlh/hitchhikers-guide-to-ruby-variables-1b4cf83d540c\"\u003echeck this blog post\u003c/a\u003e.\u003c/p\u003e","exportId":"class-variables-and-methods"},{"id":203755,"title":"Class Variables and Class Methods Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-and-class-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse class variables to keep track of data pertaining to a class.\u003c/li\u003e\n\u003cli\u003eDefine class methods to expose data pertaining to a class.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be dealing with a \u003ccode\u003eSong\u003c/code\u003e class. The \u003ccode\u003eSong\u003c/code\u003e class can produce individual songs. Each song has a name, an artist and a genre. We need our \u003ccode\u003eSong\u003c/code\u003e class to be able to keep track of the number of songs that it creates.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.count\u003cbr\u003e  # =\u0026gt; 30\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe need our \u003ccode\u003eSong\u003c/code\u003e class to be able to show us all of the artists of existing songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.artists\u003cbr\u003e  # =\u0026gt; [\"Jay-Z\", \"Drake\", \"Beyonce\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe need our \u003ccode\u003eSong\u003c/code\u003e class to be able to show us all of the genres of existing songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.genres\u003cbr\u003e  # =\u0026gt; [\"Rap\", \"Pop\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe also need our \u003ccode\u003eSong\u003c/code\u003e class to be able to keep track of the number of songs of each genre it creates.\u003c/p\u003e\n\n\u003cp\u003eIn other words, calling:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.genre_count\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eShould return something like this;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"rap\" =\u0026gt; 5, \"rock\" =\u0026gt; 1, \"country\" =\u0026gt; 3}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLastly, we want our \u003ccode\u003eSong\u003c/code\u003e class to reveal to us the number of songs each artist is responsible for.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.artist_count\u003cbr\u003e  # =\u0026gt; {\"Beyonce\" =\u0026gt; 17, \"Jay-Z\" =\u0026gt; 40}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'll accomplish this with the use of class variables and methods.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine your \u003ccode\u003eSong\u003c/code\u003e class such that an individual song is initialized with a name, artist and genre.\u003c/li\u003e\n\u003cli\u003eThere should be an \u003ccode\u003eattr_accessor\u003c/code\u003e for those three attributes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems = Song.new(\"99 Problems\", \"Jay-Z\", \"rap\")\u003cbr\u003e\u003cbr\u003eninety_nine_problems.name\u003cbr\u003e  # =\u0026gt; \"99 Problems\"\u003cbr\u003e\u003cbr\u003eninety_nine_problems.artist\u003cbr\u003e  # =\u0026gt; \"Jay-Z\"\u003cbr\u003e\u003cbr\u003eninety_nine_problems.genre\u003cbr\u003e  # =\u0026gt; \"rap\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a class variable, \u003ccode\u003e@@count\u003c/code\u003e. We will use this variable to keep track of the number of new songs that are created from the \u003ccode\u003eSong\u003c/code\u003e class. Set this variable equal to \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAt what point should we increment our \u003ccode\u003e@@count\u003c/code\u003e of songs? Whenever a new song is created. Your \u003ccode\u003e#initialize\u003c/code\u003e method should use the \u003ccode\u003e@@count\u003c/code\u003e variable and increment the value of that variable by \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.count\u003c/code\u003e, that returns the total number of songs created.\u003c/li\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.genres\u003c/code\u003e that returns an array of all of the genres of existing songs. This array should contain only unique genres––no duplicates! Think about what you'll need to do to get this method working.\n\n\u003cul\u003e\n\u003cli\u003eYou'll need a class variable, let's call it \u003ccode\u003e@@genres\u003c/code\u003e, that is equal to an empty array.\u003c/li\u003e\n\u003cli\u003eWhen should you add genres to the array? Whenever a new song is created. Your \u003ccode\u003e#initialize\u003c/code\u003e method should add the genre of the song being created to the \u003ccode\u003e@@genres\u003c/code\u003e array. All genres should be added to the array. Control for duplicates when you code your \u003ccode\u003e.genres\u003c/code\u003e class method, not when you add genres to the original \u003ccode\u003e@@genres\u003c/code\u003e array. We will want to know how many songs of each genre have been created. We'll revisit that job a little later on.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.artists\u003c/code\u003e, that returns an array of all of the artists of the existing songs. This array should only contain unique artists––no repeats! Once again think about what you need to do to implement this behavior.\n\n\u003cul\u003e\n\u003cli\u003eYou'll need a class variable, let's call it \u003ccode\u003e@@artists\u003c/code\u003e, that is equal to an empty array.\u003c/li\u003e\n\u003cli\u003eWhen should you add artists to this array? Whenever a new song is intialized. Your \u003ccode\u003e#initialize\u003c/code\u003e method should add artists to the \u003ccode\u003e@@artists\u003c/code\u003e array.  All artists should be added to the array.  Control for duplicates when you code your \u003ccode\u003e.artists\u003c/code\u003e class method, not when you add artists to the original \u003ccode\u003e@@artists\u003c/code\u003e array.  We will want to know how many songs each have been assigned to each artist.  We'll revisit that job a little later on when we write our \u003ccode\u003e.artist_count\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.genre_count\u003c/code\u003e, that returns a hash in which the keys are the names of each genre. Each genre name key should point to a value that is the number of songs that have that genre.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eSong.genre_count\u003cbr\u003e  # =\u0026gt; {\"rap\" =\u0026gt; 5, \"rock\" =\u0026gt; 1, \"country\" =\u0026gt; 3}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis manner of displaying numerical data is called a \u003ca href=\"https://en.wikipedia.org/wiki/Histogram\"\u003ehistogram\u003c/a\u003e. How will you create your histogram? You will need to iterate over the \u003ccode\u003e@@genres\u003c/code\u003e array and populate a hash with the key/value pairs. You will need to check to see if the hash already contains a key of a particular genre. If so, increment the value of that key by one, otherwise, create a new key/value pair.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.artist_count\u003c/code\u003e, that returns a histogram similar to the one above, but for artists rather than genres. \u003c/li\u003e\n\u003c/ul\u003e","exportId":"g8f2fb972913d348e5d5f279f26f1e47f"},{"id":203756,"title":"Class Constants","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-class-constants\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-class-constants/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-class-constants\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-class-constants/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand what a class constant is\u003c/li\u003e\n\u003cli\u003eUse a class constant\u003c/li\u003e\n\u003cli\u003eKnow when to use \u003ccode\u003eattr_accessor\u003c/code\u003e VS creating the methods yourself\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003ePreviously, we saw how to make each individual instance of a class hold on to the information about itself.  A book object, an instance of the \u003ccode\u003eBook\u003c/code\u003e class, knew its own title and author and genre.  Building upon that, you will learn to add functionality that allows a class to hold information from across all the instances of that class that have been created.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRead through the tutorial, following along as you go.\u003c/li\u003e\n\u003cli\u003eOnce you've finished, make the tests in \u003ccode\u003espec/01_book_spec.rb\u003c/code\u003e pass. Run only those tests by typing \u003ccode\u003elearn spec/01_book_spec.rb\u003c/code\u003e on your command line.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eTutorial\u003c/h2\u003e\n\n\u003cp\u003eIn this tutorial, we are given a simple \u003ccode\u003eBook\u003c/code\u003e class that has already been implemented with some basic functionality. It has properties like a title, an author, a page count, etc. Our job is to have the class somehow be able to keep track of all of the genres of all of the Books we create.\u003c/p\u003e\n\n\u003ch3\u003eClass Constants\u003c/h3\u003e\n\n\u003cp\u003eLet's run the tests for the first time, and see what our first failure is. The output in your terminal should be something similar to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book GENRES keeps track of all genres\u003cbr\u003e     Failure/Error: expect(Book::GENRES).to include(genre)\u003cbr\u003e     NameError:\u003cbr\u003e       uninitialized constant Book::GENRES\u003cbr\u003e     # ./spec/01_book_spec.rb:11:in `block (4 levels) in '\u003cbr\u003e     # ./spec/01_book_spec.rb:10:in `each'\u003cbr\u003e     # ./spec/01_book_spec.rb:10:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, so this is new. This syntax, \u003ccode\u003eBook::GENRES\u003c/code\u003e tells us a couple of things. First, whenever we see \u003ccode\u003e::\u003c/code\u003e, it indicates \"name spacing\". In other words, it tells us that the thing on the right side of the colons is a thing defined within the context, or name space, of the thing on the left side of the colons.\u003c/p\u003e\n\n\u003cp\u003eIn this case, this is telling us that there is a constant, \u003ccode\u003eGENRES\u003c/code\u003e (we know it's a constant because it's written in all caps) that is defined within our \u003ccode\u003eBook\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eThis is what is known as a Class Constant.\u003c/p\u003e\n\n\u003cp\u003eClass Constants are available to all instances of a particular class. Whereas instance variables, i.e. title, author, etc., are individual to each instance of a class, class constants are shared among \u003cstrong\u003eall\u003c/strong\u003e instances. They all have access to the same data, and if that data should change for some reason, all instances will know about that change.\u003c/p\u003e\n\n\u003cp\u003eLet's go ahead and define this constant. Since it's plural, I'm going to guess that it should be an array, so I'll start by defining it as an empty array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  attr_accessor :author, :page_count, :genre\u003cbr\u003e  attr_reader :title\u003cbr\u003e\u003cbr\u003e  GENRES = []\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis next error, after running the specs again, though, is kind of weird:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book GENRES keeps track of all genres\u003cbr\u003e     Failure/Error: expect(Book::GENRES).to include(genre)\u003cbr\u003e       expected [] to include \"Thriller\"\u003cbr\u003e     # ./spec/01_book_spec.rb:11:in `block (4 levels) in '\u003cbr\u003e     # ./spec/01_book_spec.rb:10:in `each'\u003cbr\u003e     # ./spec/01_book_spec.rb:10:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe really have no clue how in the world our array would magically contain \"Thriller\", so let's look at the specific test to figure out what's going on. Here's what we have in \u003ccode\u003espec/01_book_spec.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe 'GENRES' do\u003cbr\u003e  it 'keeps track of all genres' do\u003cbr\u003e    genres = [\"Thriller\", \"Science Fiction\", \"Romance\"]\u003cbr\u003e    genres.each_with_index do |genre, i|\u003cbr\u003e      book = Book.new(\"Book_#{i}\")\u003cbr\u003e      book.genre = genre\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    genres.each do |genre|\u003cbr\u003e      expect(Book::GENRES).to include(genre)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, it looks like what's going on is this:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe test is creating a bunch of books.\u003c/li\u003e\n\u003cli\u003eThe test is assigning each of those books a genre.\u003c/li\u003e\n\u003cli\u003eThe test is expecting our GENRES class constant to keep track of those genres.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOk, so let's think about this for a second. Where in that sequence of events can \u003ccode\u003eGENRES\u003c/code\u003e be updated? Well, it can't be in step one. None of the books starts out having a genre. Maybe it happens in step two, but I'm not sure.\u003c/p\u003e\n\n\u003cp\u003eNo, wait...it \u003cem\u003ehas\u003c/em\u003e to happen in step two. After the books are assigned their genres, nothing else happens before the test checks to see that \u003ccode\u003eBook::GENRES\u003c/code\u003e knows about those genres. What does this mean, then?\u003c/p\u003e\n\n\u003cp\u003eIt means that something else needs to happen in our \u003ccode\u003egenre=\u003c/code\u003e method. We need to somehow update our \u003ccode\u003eGENRES\u003c/code\u003e constant in that method. Remember, our \u003ccode\u003egenre=\u003c/code\u003e method (along with our \u003ccode\u003egenre\u003c/code\u003e method) is created by the following line of code: \u003ccode\u003eattr_accessor :genre\u003c/code\u003e. Since we want to add some customization to the method, we'll have to do three things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExplicitly define the \u003ccode\u003egenre=\u003c/code\u003e method, to integrate our class constant into the method\u003c/li\u003e\n\u003cli\u003eRemove the \u003ccode\u003eattr_accessor\u003c/code\u003e for \u003ccode\u003e:genre\u003c/code\u003e since we no longer need to generate a reader AND a writer.\u003c/li\u003e\n\u003cli\u003eAdd an \u003ccode\u003eattr_reader\u003c/code\u003e for \u003ccode\u003e:genre\u003c/code\u003e, since we still want Ruby to generate a reader for us.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSo, let's do that!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  attr_accessor :author, :page_count  # remove the attr_accessor for genre\u003cbr\u003e  attr_reader :title, :genre  # add an attr_reader for genre\u003cbr\u003e\u003cbr\u003e  GENRES = []\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # create the writer for genre and add the logic for the class constant\u003cbr\u003e  def genre=(genre)\u003cbr\u003e    @genre = genre\u003cbr\u003e    GENRES \u0026lt;\u0026lt; genre \u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow all the tests will pass!\nTry to complete the similar exercise below where the \u003ccode\u003eShoe\u003c/code\u003e class can keep track of all of the brands of the different show objects.\u003c/p\u003e\n\n\u003ch2\u003eShoe Class\u003c/h2\u003e\n\n\u003cp\u003eOpen \u003ccode\u003espec/02_shoe_spec.rb\u003c/code\u003e and start making the tests pass. Write your code in \u003ccode\u003eshoe.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo run the specs, type \u003ccode\u003elearn spec/02_shoe_spec.rb\u003c/code\u003e on your command line.\u003c/p\u003e\n\n\u003cp\u003eHappy coding!\u003c/p\u003e","exportId":"g855fff1e296ac436eb6793ae654d0f6e"},{"id":203757,"title":"Private Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-private-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-private-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-private-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-private-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine private methods.\u003c/li\u003e\n\u003cli\u003eUnderstand the context in which you will use such a method.\u003c/li\u003e\n\u003cli\u003eSee how private methods are defined.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBackground: Instance and Class Methods\u003c/h2\u003e\n\n\u003cp\u003eAs we dive deeper into object orientation in Ruby, we've been working with\ndifferent types of methods: instance and class methods. Remember that instance\nmethods are called on instances of a class. Let's make the following class\ncalled \u003ccode\u003eBartender\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bartender\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def intro\u003cbr\u003e    \"Hello, my name is #{name}!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ephil = Bartender.new(\"Phil\")\u003cbr\u003ephil.intro\u003cbr\u003e#=\u0026gt; \"Hello, my name is Phil!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eintro\u003c/code\u003e is an instance method because we can call it on an instance of the\n\u003ccode\u003eBartender\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eAnd class methods we call on the entire class itself, not the instance. Like if\nwe had a method that kept track of all of the new instances of \u003ccode\u003eBartender\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bartender\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  BARTENDERS = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    BARTENDERS \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    BARTENDERS\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def intro\u003cbr\u003e    \"Hello, my name is #{name}!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we're shoveling in every new instance of \u003ccode\u003eBartender\u003c/code\u003e \u003ccode\u003einitialized\u003c/code\u003e into a\nconstant that holds onto all bartenders. Then we have a class method \u003ccode\u003eself.all\u003c/code\u003e,\nwhich we'll call on the class itself to return all of the bartenders.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephil = Bartender.new(\"Phil\")\u003cbr\u003enancy = Bartender.new(\"Nancy\")\u003cbr\u003e\u003cbr\u003eBartender.all\u003cbr\u003e#=\u0026gt; [#, #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePublic vs. Private Methods\u003c/h2\u003e\n\n\u003ch3\u003ePublic Methods\u003c/h3\u003e\n\n\u003cp\u003eWe've already been writing public methods: \u003ccode\u003eintro\u003c/code\u003e and \u003ccode\u003eself.all\u003c/code\u003e. We can call\nthem from outside the scope of the class declaration, like on the instance of\nthe class or the class itself. Public methods are called by an explicit\nreceiver: the instance of \u003ccode\u003ephil\u003c/code\u003e explicitly receives the method \u003ccode\u003eintro\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003ePrivate Methods\u003c/h3\u003e\n\n\u003cp\u003ePrivate methods cannot be called by an explicit receiver. What does that mean?\nIt means we can only call private methods within the context of the defining\nclass: the receiver of a private method is always \u003ccode\u003eself\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWhy Use Private Methods?\u003c/h3\u003e\n\n\u003cp\u003ePrivate methods are a way of encapsulating functionality within a class. For\nexample, a bartender can make a drink at a customer's request. Part of the\nprocess of making a drink includes choosing liquors, mixers, garnish, and\nstirring everything together. As a customer, you're permitted to ask the\nbartender for a drink (from a menu of options), but you can't instruct him or\nher on each step. The smaller steps that make up the bartender's job can be\nconsidered private methods.\u003c/p\u003e\n\n\u003cp\u003ePrivate methods also signal to other developers that this method is \u003cem\u003edepended\u003c/em\u003e\non by other methods in your program. It signals that they should beware of\nremoving such a method for fear of breaking other parts of the program that they\nmay not realize rely on it.\u003c/p\u003e\n\n\u003ch3\u003eBuilding Private Methods\u003c/h3\u003e\n\n\u003cp\u003eWe've already written a private method in our \u003ccode\u003eBartender\u003c/code\u003e class: \u003ccode\u003einitialize\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephil.initialize\u003cbr\u003e#=\u0026gt;NoMethodError: private method `initialize' called for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePrivate methods, aside from initialize, are usually written with the word\n\u003ccode\u003eprivate\u003c/code\u003e above them. Let's make a private method called \u003ccode\u003echoose_liquor\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWe'll also create a public method \u003ccode\u003emake_drink\u003c/code\u003e that calls on \u003ccode\u003echoose_liquor\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bartender\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  BARTENDERS = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    BARTENDERS \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    BARTENDERS\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def intro\u003cbr\u003e    \"Hello, my name is #{name}!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_drink\u003cbr\u003e    @cocktail_ingredients = []\u003cbr\u003e    choose_liquor\u003cbr\u003e    choose_mixer\u003cbr\u003e    choose_garnish\u003cbr\u003e    return \"Here is your drink. It contains #{@cocktail_ingredients}\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def choose_liquor\u003cbr\u003e    @cocktail_ingredients.push(\"whiskey\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def choose_mixer\u003cbr\u003e    @cocktail_ingredients.push(\"vermouth\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def choose_garnish\u003cbr\u003e    @cocktail_ingredients.push(\"olives\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we try to call \u003ccode\u003e#choose_liquor\u003c/code\u003e with an instance of a bartender, we get an error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephil.choose_liquor\u003cbr\u003e# NoMethodError: private method `choose_liquor' called for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAgain, private methods cannot be called by an explicit receiver. Because \u003ccode\u003ephil\u003c/code\u003e\nis the explicit receiver of \u003ccode\u003echoose_liquor\u003c/code\u003e, the method errors out.\u003c/p\u003e\n\n\u003cp\u003eHowever, if we call \u003ccode\u003emake_drink\u003c/code\u003e, the \u003ccode\u003echoose_liquor\u003c/code\u003e method works. What gives?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephil.make_drink\u003cbr\u003e# Here is your drink. It contains [\"whiskey\", \"vermouth\", \"olives\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003echoose_liquor\u003c/code\u003e method was called without any receiver. Ruby sees the\nmissing receiver and assumes it to be self, or the current object. When\n\u003ccode\u003echoose_liquor\u003c/code\u003e is called, self is an instance of Bartender. Only a Bartender\nobject can tell itself to choose a liquor, a mixer, and a garnish. Phil can tell\nhimself to choose a liquor, garnish, etc., but we cannot instruct Phil to do so.\nPrivate methods restrict an outsider from calling methods that belong to an\nobject. However, we, as customers, are free to ask a bartender to make us a\ndrink (\u003ccode\u003emake_drink\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Prior to version 2.7 of Ruby, if we tried to call our private methods\nfrom \u003ccode\u003e#make_drink\u003c/code\u003e using \u003ccode\u003eself\u003c/code\u003e (e.g., \u003ccode\u003eself.choose_liquor\u003c/code\u003e rather than just\n\u003ccode\u003echoose_liquor\u003c/code\u003e), we would get that same 'private method' error. However,\nbeginning with version 2.7 of Ruby, private methods can be called from other\nmethods in the Class with or without the \u003ccode\u003eself\u003c/code\u003e keyword.\u003c/p\u003e","exportId":"private-methods"},{"id":203758,"title":"Class Variables and Methods Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn the past module, we got to know some essential aspects of programming in\nRuby: class variables and methods. You can do a quick check of the list of\ntopics we covered:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow to recognize a class constant\u003c/li\u003e\n\u003cli\u003eHow to utilize class constants\u003c/li\u003e\n\u003cli\u003eHow to know when to use \u003ccode\u003eattr_accessor\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eHow to know when to define private methods\u003c/li\u003e\n\u003cli\u003eThe difference between public and private methods\u003c/li\u003e\n\u003cli\u003eHow to use class variables to keep track of a class's data\u003c/li\u003e\n\u003cli\u003eThe concept of remembrance in object-oriented programming\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThat's a lot! But now you've seen how it all works and how you can use it to\nlevel up your Ruby programming.\u003c/p\u003e","exportId":"class-variables-and-methods-conclusion"}]},{"id":21892,"name":"Topics in OO - Advanced Class Methods in Ruby","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g7fea410313a2319cfc9e1df31aa06c49","items":[{"id":203759,"title":"Introduction to Advanced Class Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-advanced-class-methods-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've learned about building complex class objects, the \u003ccode\u003eself\u003c/code\u003e keyword, and class\nvariables and methods. We'll continue to expand on building out classes by\nintroducing these concepts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuilding custom class constructors\u003c/li\u003e\n\u003cli\u003eBuilding class finders\u003c/li\u003e\n\u003cli\u003eBuild class operators\u003c/li\u003e\n\u003cli\u003eImplementing a class method which creates instances of its own class\u003c/li\u003e\n\u003cli\u003eUsing class variables to keep track of data pertaining to a class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, we'll be focusing on building out more complex object-oriented\nRuby programs that combine the concepts we've discussed thus far.\u003c/p\u003e","exportId":"introduction-to-advanced-class-methods"},{"id":203760,"title":"Remembering Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-remembering-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-remembering-objects/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-remembering-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-remembering-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Explain the concept of remembrance in object-oriented programming.\u003c/li\u003e\n\u003cli\u003e Use class variables to remember, or store, instances of a class that are produced.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's say we're building a command line game in which players play various\nrounds until a final tally determines the winner. Or creating an app in which we\nwant to store a list of all of the users who sign up. Or building a program that\nhelps users track and store the passwords for their various accounts.\u003c/p\u003e\n\n\u003cp\u003eIn all of these situations, and many more we can imagine, our application needs\na way to store or remember a collection of class instances. Whether they are\ninstances of a \u003ccode\u003eGame\u003c/code\u003e, \u003ccode\u003eUser\u003c/code\u003e or \u003ccode\u003ePassword\u003c/code\u003e class, all of these examples would\nrequire our program to keep track of instances that are created.\u003c/p\u003e\n\n\u003cp\u003eLuckily for us, Ruby allows us to do so by using class variables to store new\ninstances as soon as they are created. Let's take a look together.\u003c/p\u003e\n\n\u003ch2\u003eUsing class variables to store instances of a class\u003c/h2\u003e\n\n\u003cp\u003eImagine we are building an app that manages a user's music. Our app should keep\ntrack of all of the songs a user enters and allow our user to browse their\nexisting songs.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the following class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this code, we can create a new song like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling = Song.new(\"Hotline Bling\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's go ahead and create another song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethriller = Song.new(\"Thriller\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh. Our user wants to browse their songs now and select one to play.\nCurrently, our code in the \u003ccode\u003eSong\u003c/code\u003e class has no way to keep track of the songs we\njust created and display them back to the user.\u003c/p\u003e\n\n\u003ch3\u003eCreating the Class Variable\u003c/h3\u003e\n\n\u003cp\u003eLet's take a step back and think about the concept of responsibility. Whose job\nis it to know about \u003cem\u003eevery instance of the \u003ccode\u003eSong\u003c/code\u003e class\u003c/em\u003e? We have two choices\nright now: an instance of the song class or the \u003ccode\u003eSong\u003c/code\u003e class itself.\u003c/p\u003e\n\n\u003cp\u003eIt is not the responsibility of an individual song to know about all of the\nother songs. Keeping track of all of the songs that it creates, however, fits\nright into the purview of the Song class.\u003c/p\u003e\n\n\u003cp\u003eSo, how can we tell the \u003ccode\u003eSong\u003c/code\u003e class to keep track of every instance that it\ncreates? We use a class variable.\u003c/p\u003e\n\n\u003cp\u003eLet's create a class variable, \u003ccode\u003e@@all\u003c/code\u003e, that will store every instance of the\n\u003ccode\u003eSong\u003c/code\u003e class. Recall that \u003ccode\u003e@@\u003c/code\u003e before a variable name is how we define a class\nvariable.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we set our class variable equal to an empty array. Arrays are\nperfect for storing lists of data, so we'll use an array to store our lists of\n\u003ccode\u003eSong\u003c/code\u003e instances.\u003c/p\u003e\n\n\u003cp\u003eNow that our class is \u003cem\u003eset up\u003c/em\u003e to store the instances that it produces, we have\nto ask: \u003cem\u003ehow\u003c/em\u003e does it store these instances?\u003c/p\u003e\n\n\u003ch4\u003eAdding Instances to the \u003ccode\u003e@@all\u003c/code\u003e Array\u003c/h4\u003e\n\n\u003cp\u003eBefore we can answer this question, we should ask another. \u003cem\u003eWhen\u003c/em\u003e should the\n\u003ccode\u003eSong\u003c/code\u003e class become aware of, or store, an instance of itself?\u003c/p\u003e\n\n\u003cp\u003eThis should happen at the time on instantiation––when a new song gets created,\nit should be immediately stored by our \u003ccode\u003eSong\u003c/code\u003e class' \u003ccode\u003e@@all\u003c/code\u003eclass variable.\u003c/p\u003e\n\n\u003cp\u003eWe can implement this by simply adding the new instance that gets created into\nthe array stored in \u003ccode\u003e@@all\u003c/code\u003e \u003cem\u003einside our \u003ccode\u003e#initialize\u003c/code\u003e method.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn \u003ccode\u003e#initialize\u003c/code\u003e we use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the new object that has\njust been created by \u003ccode\u003e#new\u003c/code\u003e. Remember that when \u003ccode\u003e#new\u003c/code\u003e is called, it creates a\nnew instance of the class and then calls \u003ccode\u003e#initialize\u003c/code\u003e on that new instance. So,\n\u003ccode\u003e#initialize\u003c/code\u003e is technically an instance method. Inside an instance method we\nare in what is called \u003cstrong\u003emethod scope\u003c/strong\u003e and \u003ccode\u003eself\u003c/code\u003e will refer to whichever\ninstance the method is being called on.\u003c/p\u003e\n\n\u003cp\u003eWe push \u003ccode\u003eself\u003c/code\u003e into the array that is stored in \u003ccode\u003e@@all\u003c/code\u003e. In this way, the\n\u003ccode\u003e@@all\u003c/code\u003e class variable will point to an ever-growing array that contains every\ninstance of the \u003ccode\u003eSong\u003c/code\u003e class that gets created.\u003c/p\u003e\n\n\u003ch4\u003eOur Code in Action\u003c/h4\u003e\n\n\u003cp\u003eLet's see what happens when we actually execute the code we've written:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems = Song.new(\"99 Problems\")\u003cbr\u003ethriller = Song.new(\"Thriller\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we've created some songs, let's ask our \u003ccode\u003eSong\u003c/code\u003e class to show us all of\nthe instances that we just created:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.all\u003cbr\u003e  =\u0026gt; NoMethodError: undefined method 'all' for Song:Class\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh, looks like we don't have a class method to access the contents of the\n\u003ccode\u003e@@all\u003c/code\u003e array. Just like how we've built reader methods that expose the value of\ninstance variables, we need to build a method that will expose, or make\naccessible outside of the class, the value of a class variable.\u003c/p\u003e\n\n\u003cp\u003eLet's build one now.\u003c/p\u003e\n\n\u003ch4\u003eBuilding a Class Method to Access a Class Variable\u003c/h4\u003e\n\n\u003cp\u003eLet's call our class method \u003ccode\u003e#all\u003c/code\u003e. All it needs to do is return the \u003ccode\u003e@@all\u003c/code\u003e\nvariable. Remember that the last line of any method in Ruby is automatically\n\u003cem\u003ereturned\u003c/em\u003e. So simply putting \u003ccode\u003e@@all\u003c/code\u003e in \u003ccode\u003eself.all\u003c/code\u003e is that method's purpose.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRecall that to define a \u003cstrong\u003eclass\u003c/strong\u003e method we use the \u003ccode\u003edef self.method_name\u003c/code\u003e\nsyntax. The \u003ccode\u003eself.\u003c/code\u003e before the method name is a reminder that the method will\nnot be running on \u003cem\u003ea\u003c/em\u003e particular \u003ccode\u003eSong\u003c/code\u003e instance, but will be acting as the\nfactory from which all \u003ccode\u003eSong\u003c/code\u003es are made: the \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eWith a new method defined, we can try again to call our class method on the\n\u003ccode\u003eSong\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.all\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should output something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eirb(main):020:0\u0026gt; Song.all\u003cbr\u003e=\u0026gt; [#, #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eBuilding off of \u003ccode\u003eall\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eImplement a class method called \u003ccode\u003eprint_all_song_names\u003c/code\u003e which prints out all the\nnames of the \u003ccode\u003eSong\u003c/code\u003es that the class knows about. Use the \u003ccode\u003eall\u003c/code\u003e class method and\nbuild off of it!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe did it! We used a class variable to store a collection of instances of that\nclass. We added new instances to this storage container every time a new\ninstance was created with the help of the \u003ccode\u003eself\u003c/code\u003e keyword in our \u003ccode\u003e#initialize\u003c/code\u003e\nmethod. Lastly, we wrote a class method to access and print out the name of\neach song instance stored in our class variable.\u003c/p\u003e","exportId":"remembering-objects"},{"id":203761,"title":"OO Puppy Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-advanced-class-methods-puppy-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-puppy-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-puppy-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-puppy-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse a class variable to keep track of every instance of a class that is\ncreated.\u003c/li\u003e\n\u003cli\u003eWrite a class method to access the list of all instances of a class, stored in\na class variable.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThe government has decided to start tracking every new puppy that is born, just\nlike we track every new child who is born with a birth certificate. Because\nyou're such a notoriously skilled programmer, you've been hired by the newly\nminted United States Department of Canines to write a program that will do just\nthat.\u003c/p\u003e\n\n\u003cp\u003eYou need to write a program that stores each new puppy that is born. You will\nwrite a \u003ccode\u003eDog\u003c/code\u003e class that initializes with a name and also stores each new\ninstance of \u003ccode\u003eDog\u003c/code\u003e that is instantiated.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eCode your solution in \u003ccode\u003elib/dog.rb\u003c/code\u003e, using the test error messages from running\n\u003ccode\u003elearn test\u003c/code\u003e as a guide to your solution.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eCreate a class variable \u003ccode\u003e@@all\u003c/code\u003e set to an empty array inside your class. This\narray is the storage container for each instance of a \u003ccode\u003eDog\u003c/code\u003e that gets\ncreated. In other words, every puppy that is born should get pushed into this\narray at the moment of instantiation––in the \u003ccode\u003e#initialize\u003c/code\u003e method! Use the\n\u003ccode\u003eself\u003c/code\u003e keyword inside the \u003ccode\u003e#initialize\u003c/code\u003e method to refer to the new dog you are\ntrying to store in your \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWrite a class method, \u003ccode\u003e.all\u003c/code\u003e, that reads this variable. From inside the \u003ccode\u003eDog\u003c/code\u003e\nclass, we can access the \u003ccode\u003e@@all\u003c/code\u003e class variable, but whenever we might be\ninteracting with our \u003ccode\u003eDog\u003c/code\u003e class from the outside, this \u003ccode\u003e.all\u003c/code\u003e class method acts\nas our direct interface to the \u003ccode\u003e@@all\u003c/code\u003e variable.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou will need to write a class method, \u003ccode\u003e.print_all\u003c/code\u003e, that iterates over all of\nthe individual dogs stored in the \u003ccode\u003e@@all\u003c/code\u003e array and \u003ccode\u003eputs\u003c/code\u003e out their name to the\nterminal.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNow that we've gotten these methods written out, it is time to do a bit of\nrefactoring. Rather than pushing \u003ccode\u003eself\u003c/code\u003e into the \u003ccode\u003e@@all\u003c/code\u003e variable inside of\n\u003ccode\u003e#initialize\u003c/code\u003e, let's extract this action into its own method. Call this method\n\u003ccode\u003e#save\u003c/code\u003e. The method should handle the task of pushing \u003ccode\u003eself\u003c/code\u003e into \u003ccode\u003e@@all\u003c/code\u003e.\nOnce written, update your code in \u003ccode\u003e#initialize\u003c/code\u003e so that it uses \u003ccode\u003e#save\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere is one method that we'll talk about together:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.clear_all\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eWhat happens if we want to clear out our list of existing dogs? It is not at all\nuncommon to want to \"reset\" or \"restart\" our program. You'll be building a class\nmethod, \u003ccode\u003e.clear_all\u003c/code\u003e, that does just that. This method should operate on the\n\u003ccode\u003e@@all\u003c/code\u003e array of existing dogs and empty that array. \u003cstrong\u003eHint:\u003c/strong\u003e look up the\n\u003ccode\u003eArray#clear\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch3\u003eA Note on Testing\u003c/h3\u003e\n\n\u003cp\u003eIn the test suite, you'll see this code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpect(Dog.class_variable_get(:@@all)).to match([])\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we are using the \u003ccode\u003e.class_variable_get(name_of_class_variable)\u003c/code\u003e method on\nthe \u003ccode\u003eDog\u003c/code\u003e class. This method introspects on the class on which it is called and\nretrieves the value of the class variable passed into the method as an argument.\nWe use it here in the test suite to check that you do in fact set a class\nvariable, \u003ccode\u003e@@all\u003c/code\u003e, equal to an empty array and that you fill that array up with\nnew dogs as they are instantiated.\u003c/p\u003e","exportId":"gfa4d6ea9e42e7a2f623890ff1f1debe1"},{"id":203762,"title":"Advanced Class Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-advanced-class-methods-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-advanced-class-methods-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-advanced-class-methods-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-advanced-class-methods-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild class finders\u003c/li\u003e\n\u003cli\u003eBuild class constructors\u003c/li\u003e\n\u003cli\u003eBuild class operators\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eAdvanced Class Methods\u003c/h2\u003e\n\n\u003cp\u003eConsider the method \u003ccode\u003e.all\u003c/code\u003e on the \u003ccode\u003eSong\u003c/code\u003e class, \u003ccode\u003eSong.all\u003c/code\u003e. This method acts as\na reader for the \u003ccode\u003e@@all\u003c/code\u003e class variable. This method \u003cem\u003eexposes\u003c/em\u003e this piece of\ndata to the rest of our application. Class methods provide an interface for the\ndata held within a class. This data, stored in a class variable, would otherwise\nbe inaccessible outside of the class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eself.all\u003c/code\u003e is a class method for reading the data stored in the class\nvariable\u003ccode\u003e@@all\u003c/code\u003e. This is a \u003cem\u003eclass\u003c/em\u003e reader, very similar to an \u003cem\u003einstance\u003c/em\u003e reader\nmethod that reads an instance property:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etim = Person.new(\"Tim\")\u003cbr\u003etim.name #=\u0026gt; \"Tim\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat else can class methods help us with? What other common class-level\nfunctionality can be exposed through class methods?\u003c/p\u003e\n\n\u003ch2\u003eClass Finders\u003c/h2\u003e\n\n\u003cp\u003eImagine a \u003ccode\u003ePerson\u003c/code\u003e class that provides access to all of its instances through\n\u003ccode\u003ePerson.all\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egrace_hopper = Person.new(\"Grace Hopper\")\u003cbr\u003esandi_metz = Person.new(\"Sandi Metz\")\u003cbr\u003e\u003cbr\u003ePerson.all #=\u0026gt; [#,\u003cbr\u003e                #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow might you find a specific person by name given this \u003ccode\u003ePerson\u003c/code\u003e model?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.new(\"Grace Hopper\")\u003cbr\u003ePerson.new(\"Sandi Metz\")\u003cbr\u003e\u003cbr\u003esandi_metz = Person.all.find{|person| person.name == \"Sandi Metz\"}\u003cbr\u003esandi_metz #=\u0026gt; #\u003cbr\u003e\u003cbr\u003egrace_hopper = Person.all.find{|person| person.name == \"Grace Hopper\"}\u003cbr\u003egrace_hopper #=\u0026gt; #\u003cbr\u003e\u003cbr\u003eavi_flombaum = Person.all.find{|person| person.name == \"Avi Flombaum\"}\u003cbr\u003eavi_flombaum #=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEvery time your application requires you to find a particular person by name,\nyou will have to use \u003ccode\u003e#find\u003c/code\u003e, passing in the appropriate block. This stinks!\nImagine how unsustainable it will get to write out \u003ccode\u003ePerson.all.find\u003c/code\u003e over and\nover as your application grows.\u003c/p\u003e\n\n\u003ch2\u003eThere's Gotta Be a Better Way!\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/xsATxBQfeKHCg/giphy.gif\" alt=\"Home Video Infomercial GIF\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eInstead of writing \u003ccode\u003e#find\u003c/code\u003e every time we want to \u003cem\u003esearch\u003c/em\u003e for an object, we can\n\u003cstrong\u003eencapsulate\u003c/strong\u003e this logic into a class method, like \u003ccode\u003ePerson.find_by_name\u003c/code\u003e.\nInstead of writing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePerson.find{|p| p.name == \"Grace Hopper\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eevery single time we need to search, we can simply teach our \u003ccode\u003ePerson\u003c/code\u003e class\n\u003cem\u003ehow\u003c/em\u003e to search by defining a class method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    @@all.find{|person| person.name == name}\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.new(\"Grace Hopper\")\u003cbr\u003ePerson.new(\"Sandi Metz\")\u003cbr\u003e\u003cbr\u003esandi_metz = Person.find_by_name(\"Sandi Metz\")\u003cbr\u003esandi_metz #=\u0026gt; #\u003cbr\u003e\u003cbr\u003egrace_hopper = Person.find_by_name(\"Grace Hopper\")\u003cbr\u003egrace_hopper #=\u0026gt; #\u003cbr\u003e\u003cbr\u003eavi_flombaum = Person.find_by_name(\"Avi Flombaum\")\u003cbr\u003eavi_flombaum #=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe call class methods like \u003ccode\u003ePerson.find_by_name\u003c/code\u003e 'finders'. Finder class methods\nare responsible for finding instances based on some property or condition.\u003c/p\u003e\n\n\u003ch4\u003eSlight Digression on Abstraction:\u003c/h4\u003e\n\n\u003cp\u003eBut we can improve the code above slightly. Code that relies on abstraction is\nmore maintainable and extendable over time. In general, we advance as a species\nand a civilization when technology provides an abstraction for us to use instead\nof the literal implementation. When you want light, you don't need to start a\nfire, you can just flick a light switch. \u003cem\u003eThis is an \u003cstrong\u003eabstraction\u003c/strong\u003e\u003c/em\u003e. We\npromise. If creating and using abstractions have gotten people this far, we\nshould probably continue embracing that design principle in our code.\u003c/p\u003e\n\n\u003ch4\u003eCool Tangent but What Can We Abstract Away Here?\u003c/h4\u003e\n\n\u003cp\u003eOur current implementation of \u003ccode\u003ePerson.find_by_name\u003c/code\u003e reads the instance data for\nthe class \u003cstrong\u003edirectly\u003c/strong\u003e out of the class variable \u003ccode\u003e@@all\u003c/code\u003e. Would this break if we\nneed to rename the \u003ccode\u003e@@all\u003c/code\u003e variable? What if it makes more sense to call it\n\u003ccode\u003e@@people\u003c/code\u003e? Every method that relies on that literal variable name —\n\u003ccode\u003ePerson.all\u003c/code\u003e, \u003ccode\u003ePerson.find_by_name\u003c/code\u003e, etc. — would break, and we'd have to\nupdate all of our methods to read from the new variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@people = [] # changed from @@all\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@people \u0026lt;\u0026lt; self # changed from @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@people # changed from @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    @@people.find{|person| person.name == name}\u003cbr\u003e    # changed from @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eVariable names are a very low-level abstraction. They are like making light by\nfire. Methods that read out of a variable provide an abstraction for the literal\nvariable name. Using a reader method is almost always better and more reliable\nthan using the variable.\u003c/p\u003e\n\n\u003cp\u003eWe already have a method to read \u003ccode\u003e@@people\u003c/code\u003e, \u003ccode\u003ePerson.all\u003c/code\u003e, so why not use that\nmethod in \u003ccode\u003ePerson.find_by_name\u003c/code\u003e? Within a class method, how do we call another\nclass method? What is the scope of the class method? What is self? \u003cstrong\u003eThe class\nitself\u003c/strong\u003e. Consider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@people = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    # self in the initialize method is our new instance\u003cbr\u003e    # self.class is Person\u003cbr\u003e    # self.class.all == Person.all\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@people\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    self.all.find{|person| person.name == name}\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo what's happening in our \u003ccode\u003e#initialize\u003c/code\u003e method now? Recall that \u003ccode\u003e#initialize\u003c/code\u003e\nis an instance method, so \u003ccode\u003eself\u003c/code\u003e will refer to an instance, not the entire\nclass. In order to access \u003ccode\u003ePerson.all\u003c/code\u003e, we need to go from the instance, \u003ccode\u003eself\u003c/code\u003e,\nto its class by using \u003ccode\u003eself.class\u003c/code\u003e. So using \u003ccode\u003eself.class.all \u0026lt;\u0026lt; self\u003c/code\u003e is the\nsame as using \u003ccode\u003e@@people \u0026lt;\u0026lt; self\u003c/code\u003e, but we have abstracted away the use of the\nvariable.\u003c/p\u003e\n\n\u003cp\u003eIf the variable \u003ccode\u003e@@people\u003c/code\u003e changes names, we only have to update it in one\nplace, the \u003ccode\u003ePerson.all\u003c/code\u003e reader. All code that relies on that method still works.\n1 conceptual change -\u0026gt; 1 line-of-code (LOC) change. Nice.\u003c/p\u003e\n\n\u003cp\u003eIn addition to improving the maintainability of our code, class methods also\nprovide a more readable API for the rest of our application. Consider just one\nmore time the difference in seeing the following two lines littered throughout\nyour code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePerson.all.find{|p| p.name == \"Ada Lovelace\"}\u003cbr\u003e# literal implementation, no abstraction or encapsulation\u003cbr\u003e# our program would be littered with this\u003cbr\u003e\u003cbr\u003ePerson.find_by_name(\"Ada Lovelace\")\u003cbr\u003e# abstract implementation with logic entirely encapsulated.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhenever we use \u003ccode\u003ePerson.find_by_name\u003c/code\u003e the intention of our code is clear.\nInstead of iterating over an array, our code reads clearly. Instead of\ndescribing the implementation of finding a person by name, our code simply says\nwhat it is doing, not how. You want to build objects that provide a semantic and\nobvious API, or interface. Methods that reveal what the object will do, not how\nit does that. Always hide the how and show the what.\u003c/p\u003e\n\n\u003cp\u003eFinders are just one example of a more semantic API for our classes. Let's look\nat another way class methods can improve the readability of our code.\u003c/p\u003e\n\n\u003ch2\u003eCustom Class Constructors\u003c/h2\u003e\n\n\u003cp\u003eOur marketing team has provided us with a list of people in comma-separated\nvalues (CSV), a common formatting convention when exporting from spreadsheets.\nThe raw data looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eElon Musk, 45, Tesla/SpaceX\u003cbr\u003eMark Zuckerberg, 32, Facebook\u003cbr\u003eMartha Stewart, 74, MSL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThey tell us that they will often need to upload CSVs of people data.  Let's\nlook at how we'd create a person instance from a CSV:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age, :company\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ecsv_data = \"Elon Musk, 45, Tesla\u003cbr\u003eMark Zuckerberg, 32, Facebook\u003cbr\u003eMartha Stewart, 74, MSL\"\u003cbr\u003e\u003cbr\u003erows = csv_data.split(\"\\n\")\u003cbr\u003epeople = rows.collect do |row|\u003cbr\u003e  data = row.split(\", \")\u003cbr\u003e  name = data[0]\u003cbr\u003e  age = data[1]\u003cbr\u003e  company = data[2]\u003cbr\u003e  person = Person.new\u003cbr\u003e  person.name = name\u003cbr\u003e  person.age = age\u003cbr\u003e  person.company = company\u003cbr\u003e  person\u003cbr\u003eend\u003cbr\u003epeople\u003cbr\u003e#=\u0026gt; [\u003cbr\u003e  #,\u003cbr\u003e  #,\u003cbr\u003e  # ...\u003cbr\u003e# ]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePretty complex. We don't want to do that throughout our application. In an ideal\nworld, every time we got CSV data we'd just want the \u003ccode\u003ePerson\u003c/code\u003e class to be\nresponsible for parsing it. Could we build something like \u003ccode\u003ePerson.new_from_csv\u003c/code\u003e?\nOf course! Let's look at how we might implement a custom constructor.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age, :company\u003cbr\u003e\u003cbr\u003e  def self.new_from_csv(csv_data)\u003cbr\u003e    rows = csv_data.split(\"\\n\")\u003cbr\u003e    people = rows.collect do |row|\u003cbr\u003e      data = row.split(\", \")\u003cbr\u003e      name = data[0]\u003cbr\u003e      age = data[1]\u003cbr\u003e      company = data[2]\u003cbr\u003e\u003cbr\u003e      person = self.new # This is an important line.\u003cbr\u003e      person.name = name\u003cbr\u003e      person.age = age\u003cbr\u003e      person.company = company\u003cbr\u003e      person\u003cbr\u003e    end\u003cbr\u003e    people\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ecsv_data = \"Elon Musk, 45, Tesla\u003cbr\u003eMark Zuckerberg, 32, Facebook\u003cbr\u003eMartha Stewart, 74, MSL\"\u003cbr\u003e\u003cbr\u003epeople = Person.new_from_csv(csv_data)\u003cbr\u003epeople #=\u0026gt; [\u003cbr\u003e  #,\u003cbr\u003e  #,\u003cbr\u003e  # ...\u003cbr\u003e# ]\u003cbr\u003e\u003cbr\u003enew_csv_data = \"Avi Flombaum, 31, Flatiron School\u003cbr\u003ePayal Kadakia, 30, ClassPass\"\u003cbr\u003e\u003cbr\u003epeople \u0026lt;\u0026lt; Person.new_from_csv(new_csv_data)\u003cbr\u003epeople.flatten\u003cbr\u003epeople #=\u0026gt; [\u003cbr\u003e#,\u003cbr\u003e#\u003cbr\u003e#,\u003cbr\u003e#,\u003cbr\u003e#\u003cbr\u003e# ]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that, when needing to parse multiple sets of CSV data, having a\n\u003ccode\u003ePerson.new_from_csv\u003c/code\u003e class method greatly simplifies our code. Let's take a\ncloser look at how that class method works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age, :company\u003cbr\u003e\u003cbr\u003e  def self.new_from_csv(csv_data)\u003cbr\u003e    # Split the CSV data into an array of individual rows.\u003cbr\u003e    rows = csv_data.split(\"\\n\")\u003cbr\u003e    # For each row, let's collect a Person instance based on the data\u003cbr\u003e    people = rows.collect do |row|\u003cbr\u003e      # Split the row into 3 parts, name, age, company, at the \", \"\u003cbr\u003e      data = row.split(\", \")\u003cbr\u003e      name = data[0]\u003cbr\u003e      age = data[1]\u003cbr\u003e      company = data[2]\u003cbr\u003e\u003cbr\u003e      # Make a new instance\u003cbr\u003e      person = self.new # self refers to the Person class. This is Person.new\u003cbr\u003e      # Set the properties on the person.\u003cbr\u003e      person.name = name\u003cbr\u003e      person.age = age\u003cbr\u003e      person.company = company\u003cbr\u003e      # Return the person to collect\u003cbr\u003e      person\u003cbr\u003e    end\u003cbr\u003e    # Return the array of newly created people.\u003cbr\u003e    people\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLike in any class method, \u003ccode\u003eself\u003c/code\u003e refers to the class itself so we can call\n\u003ccode\u003eself.new\u003c/code\u003e to piggyback, wrap, or extend the functionality of \u003ccode\u003ePerson.new\u003c/code\u003e. When\nwe call \u003ccode\u003ePerson.new_from_csv\u003c/code\u003e, who is receiving the method call? It's the\n\u003ccode\u003ePerson\u003c/code\u003e class itself. Therefore, \u003ccode\u003eself\u003c/code\u003e in this context is \u003ccode\u003ePerson\u003c/code\u003e. We parse\nthe raw data, create an instance, and assign the data to the corresponding\ninstance properties.\u003c/p\u003e\n\n\u003cp\u003eWhy do this? If we need to be able to create people from CSVs, why not just\nbuild that directly into \u003ccode\u003e#initialize\u003c/code\u003e? Well, the honest answer is because we\ndon't always want to create people from CSV data. Anything we build into\ninitialize will happen \u003cstrong\u003ealways\u003c/strong\u003e. Another key to writing maintainable code is\ndesigning functionality that is closed to modification but open to extension.\u003c/p\u003e\n\n\u003cp\u003eInitialize should be closed to modification. It should only handle the most\noften required and common cases of initializing an object. Anything we add to\ninitialize should be permanent and never modified. If we need more functionality\nwhen making an instance, instead of modifying initialize, we can extend it by\nwrapping it within a custom constructor.\u003c/p\u003e\n\n\u003cp\u003eIf we ever need to make people from xml or json we can continue to extend the\nobject with custom constructors instead of constantly modifying initialize with\ncomplex logic.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a somewhat simpler example of a custom constructor that wraps\n\u003ccode\u003e.new\u003c/code\u003e. When building objects that can be saved into a class variable \u003ccode\u003e@@all\u003c/code\u003e,\nwe might not always want to save the newly instantiated instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith that code, no matter what, person instances will always be saved. We could\ninstead implement a simple \u003ccode\u003e.create\u003c/code\u003e class method to provide the functionality\nof instantiating and creating the instance, leaving \u003ccode\u003e.new\u003c/code\u003e to function as\nnormal.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def self.create\u003cbr\u003e    @@all \u0026lt;\u0026lt; self.new\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eClass Operators\u003c/h2\u003e\n\n\u003cp\u003eBeyond finders and custom constructors that return existing instances or create\nnew instances, class methods can also manipulate class-level data.\u003c/p\u003e\n\n\u003cp\u003eA basic case of this might be printing all the people in our application.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create(name)\u003cbr\u003e    person = self.new\u003cbr\u003e    person.name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; person\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.create(\"Ada Lovelace\")\u003cbr\u003ePerson.create(\"Grace Hopper\")\u003cbr\u003e\u003cbr\u003e# Printing each person\u003cbr\u003ePerson.all.each do |person|\u003cbr\u003e  puts \"#{person.name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven that logic is worth encapsulating within a class method \u003ccode\u003e.print_all\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create(name)\u003cbr\u003e    person = self.new\u003cbr\u003e    person.name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; person\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.print_all\u003cbr\u003e    self.all.each{|person| puts \"#{person.name}\"}\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.create(\"Ada Lovelace\")\u003cbr\u003ePerson.create(\"Grace Hopper\")\u003cbr\u003e\u003cbr\u003ePerson.print_all\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWay nicer.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, class methods might provide a global operation on data. Imagine\nthat one of the CSVs we were provided with has people's names in lowercase\nletters. We want proper capitalization. We can build a class method\n\u003ccode\u003ePerson.normalize_names\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.normalize_names\u003cbr\u003e    self.all.each do |person|\u003cbr\u003e      person.name = person.name.split(\" \").collect{|w| w.capitalize}.join(\" \")\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe logic for actually normalizing a person's name is pretty complex:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson.name.split(\" \").collect{|w| w.capitalize}.join(\" \")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat we're doing is splitting a name, like \u003ccode\u003e\"ada lovelace\"\u003c/code\u003e, into an array at\nthe space, \u003ccode\u003e\" \"\u003c/code\u003e, which returns \u003ccode\u003e[\"ada\", \"lovelace\"]\u003c/code\u003e. With that array we\ncollect each word into a new array after it has been capitalized, returning\n\u003ccode\u003e[\"Ada\", \"Lovelace\"]\u003c/code\u003e. We then join the elements in that array with a \u003ccode\u003e\" \"\u003c/code\u003e\nreturning the final capitalized name, \u003ccode\u003e\"Ada Lovelace\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eGiven how complex normalizing a person's name is, we should actually encapsulate\nthat into the \u003ccode\u003ePerson\u003c/code\u003e instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def normalize_name\u003cbr\u003e    self.name.split(\" \").collect{|w| w.capitalize}.join(\" \")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.normalize_names\u003cbr\u003e    self.all.each do |person|\u003cbr\u003e      person.name = person.normalize_name\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith \u003ccode\u003e#normalize_name\u003c/code\u003e, we've taught a \u003ccode\u003ePerson\u003c/code\u003e instance how to properly convert\nits name into a capitalized version. The class method that acts on the global\ndata of all people is simplified and delegates the actual normalization to the\noriginal instances. This is a common pattern for global class operators.\u003c/p\u003e\n\n\u003cp\u003eA final example of this type of global data manipulation might be deleting all\nthe people. We would build a \u003ccode\u003ePerson.destroy_all\u003c/code\u003e class method that will clear\nout the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.destroy_all\u003cbr\u003e    self.all.clear\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere our \u003ccode\u003ePerson.destroy_all\u003c/code\u003e method uses the\n\u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-clear\"\u003e\u003ccode\u003eArray#clear\u003c/code\u003e\u003c/a\u003e method to\nempty the \u003ccode\u003e@@all\u003c/code\u003e array through the class reader \u003ccode\u003ePerson.all\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=-jrEbj4iCQ8\"\u003eVideo Review- Object Orientation: Key Mechanics\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=vENMFapLonA\"\u003eVideo Review- Object Models\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=Z_IoQCVNWtM\"\u003eVideo Review- Object Orientation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"advanced-class-methods"},{"id":203763,"title":"Advanced Class Methods Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-advanced-class-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild custom class constructors.\u003c/li\u003e\n\u003cli\u003eBuild class finders.\u003c/li\u003e\n\u003cli\u003eBuild class operators.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis lab has provided you with a base \u003ccode\u003eSong\u003c/code\u003e class that provides the following\ndefinition:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :name, :artist_name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eSong\u003c/code\u003e class provides a class variable \u003ccode\u003e@@all\u003c/code\u003e to store all instances for\n\u003ccode\u003eSong\u003c/code\u003e that are created through the instance method \u003ccode\u003eSong#save\u003c/code\u003e. Additionally,\n\u003ccode\u003eSong\u003c/code\u003e instances have basic properties of a name and an artist name.\u003c/p\u003e\n\n\u003cp\u003eYou have to build class methods that interact on the class data of \u003ccode\u003e@@all\u003c/code\u003e and\nprovide the rest of our program with a semantic API on the \u003ccode\u003eSong\u003c/code\u003e class with\nmethods such as \u003ccode\u003eSong.find_or_create_by_name(\"Blank Space\")\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eSong.create\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor \u003ccode\u003eSong.create\u003c/code\u003e that initializes a song and saves it to\nthe \u003ccode\u003e@@all\u003c/code\u003e class variable either literally or through the class method\n\u003ccode\u003eSong.all\u003c/code\u003e. This method should return the song instance that was initialized and\nsaved.\u003c/p\u003e\n\n\u003cp\u003eConsider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.create\u003cbr\u003eSong.all.include?(song) #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.new_by_name\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor \u003ccode\u003eSong.new_by_name\u003c/code\u003e that takes in the string name of a\nsong and returns a song instance with that name set as its name property.\n\u003ccode\u003eSong.new_by_name\u003c/code\u003e should return an instance of \u003ccode\u003eSong\u003c/code\u003e and not a simple string\nor anything else. Implement the following functionality:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.new_by_name(\"The Middle\")\u003cbr\u003e#=\u0026gt; #\u003cbr\u003esong.name #=\u0026gt; \"The Middle\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.create_by_name\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor \u003ccode\u003eSong.create_by_name\u003c/code\u003e that takes in the string name of\na song and returns a song instance with that name set as its name property and\nthe song being saved into the \u003ccode\u003e@@all\u003c/code\u003e class variable.\u003c/p\u003e\n\n\u003cp\u003eConsider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.create_by_name(\"The Middle\")\u003cbr\u003e#=\u0026gt; #\u003cbr\u003esong\u003cbr\u003e#=\u0026gt; #\u003cbr\u003eSong.all.include?(song)\u003cbr\u003e#=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.find_by_name\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class finder \u003ccode\u003eSong.find_by_name\u003c/code\u003e that accepts the string name of a song\nand returns the matching instance of the song with that name. Consider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe_middle = Song.create_by_name(\"The Middle\")\u003cbr\u003e#=\u0026gt; #\u003cbr\u003e\u003cbr\u003eSong.find_by_name(\"The Middle\")\u003cbr\u003e#\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.find_or_create_by_name\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn order to prevent duplicate songs being created that actually represent the\nsame song (based on the song name), we're going to build a\n\u003ccode\u003eSong.find_or_create_by_name\u003c/code\u003e class method. This method will accept a string\nname for a song and either return a matching song instance with that name or\ncreate a new song with the name and return the song instance.\u003c/p\u003e\n\n\u003cp\u003eConsider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong_1 = Song.find_or_create_by_name(\"Blank Space\")\u003cbr\u003esong_2 = Song.find_or_create_by_name(\"Blank Space\")\u003cbr\u003e\u003cbr\u003e# song_1 and song_2 are conceptually the same song and should return the same song instance because of `.find_or_create_by_name.`\u003cbr\u003e\u003cbr\u003esong_1 == song_2 #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.alphabetical\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class method \u003ccode\u003eSong.alphabetical\u003c/code\u003e that returns all the songs in ascending\n(a-z) alphabetical order.\u003c/p\u003e\n\n\u003cp\u003eUse \u003ca href=\"http://ruby-doc.org/core/Enumerable.html#method-i-sort_by\"\u003eArray#sort_by\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eSong.new_from_filename\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor that accepts a filename in the format of \u003ccode\u003e\"\u0026lt;Artist\nName\u0026gt; - \u0026lt;Song Name\u0026gt;.mp3\"\u003c/code\u003e, for example, \"Taylor Swift - Blank Space.mp3\".\u003c/p\u003e\n\n\u003cp\u003eGiven \u003ccode\u003eSong.new_from_filename(\"Taylor Swift - Blank Space.mp3\")\u003c/code\u003e, the\nconstructor should return a new \u003ccode\u003eSong\u003c/code\u003e instance with \u003ccode\u003esong_name\u003c/code\u003e set to Blank\nSpace and \u003ccode\u003eartist_name\u003c/code\u003e set to Taylor Swift. The filename input sent to\n\u003ccode\u003eSong.new_from_filename\u003c/code\u003e in the format of \u003ccode\u003eTaylor Swift - Blank Space.mp3\u003c/code\u003e must\nbe parsed for the relevant components. Separate the artist name from the rest of\nthe data based on the \u003ccode\u003e-\u003c/code\u003e delimiter. Don't forget that when you parse the song\nname, you have to remove the \u003ccode\u003e'.mp3'\u003c/code\u003e part of the string.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.new_from_filename(\"Taylor Swift - Blank Space.mp3\")\u003cbr\u003esong.name #=\u0026gt; \"Blank Space\"\u003cbr\u003esong.artist_name #=\u0026gt; \"Taylor Swift\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.create_from_filename\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor that accepts a filename in the format of \u003ccode\u003e\"\u0026lt;Artist\nName\u0026gt; - \u0026lt;Song Name\u0026gt;.mp3\"\u003c/code\u003e, for example \"Taylor Swift - Blank Space.mp3\". The\n\u003ccode\u003eSong.create_from_filename\u003c/code\u003e class method should not only parse the filename\ncorrectly but should also save the Song instance that was created.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eSong.destroy_all\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eSong.destroy_all\u003c/code\u003e class method should reset the state of the \u003ccode\u003e@@all\u003c/code\u003e class\nvariable to an empty array thereby deleting all previous song instances.\u003c/p\u003e","exportId":"g79baf8ae17031f777e9ceb7c98b38fd8"},{"id":203764,"title":"Video: Object Model Review","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oo-ruby-video-review-object-models\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-models/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-models\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-models/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis video gives an overview of object models and how to make our classes more powerful. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a class and add reader and writer methods\u003c/li\u003e\n\u003cli\u003eDefine class methods with an explicit \u003ccode\u003eself\u003c/code\u003e receiver\u003c/li\u003e\n\u003cli\u003eCapture new instances of \u003ccode\u003eself\u003c/code\u003e in the \u003ccode\u003einitialize\u003c/code\u003e method \u003c/li\u003e\n\u003cli\u003eUse a class variable or constant to hold the instances of the class\u003c/li\u003e\n\u003cli\u003eExplain why we avoid using the \u003ccode\u003ereturn\u003c/code\u003e keyword from within a loop\u003c/li\u003e\n\u003cli\u003eDefine a \u003ccode\u003efind_by_location\u003c/code\u003e method to find a particular instance of a class\u003c/li\u003e\n\u003cli\u003eAbstract the logic of the \u003ccode\u003efind_by_location\u003c/code\u003e method to a \u003ccode\u003edetect\u003c/code\u003e enumerable method\u003c/li\u003e\n\u003cli\u003eDefine a class method \u003ccode\u003efind_all_by_location\u003c/code\u003e to find all instances with that location using the \u003ccode\u003eselect\u003c/code\u003e enumerable method\u003c/li\u003e\n\u003cli\u003eDefine a custom constructor method to create instances from attributes scraped from a website \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/vENMFapLonA?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=vXz6ExSdm94\"\u003eAdditional Video on Object Models\u003c/a\u003e\n- This video also covers many of the above topics in the main lesson video. Feel free to use this as another refresher on object models. \u003c/p\u003e","exportId":"video-object-model-review"},{"id":203765,"title":"Advanced Class Methods Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-advanced-class-methods-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn the past several lessons, we pushed our Ruby skills even farther to\nincorporate advanced class methods. We covered building custom class\nconstructors, class finders and class operators. We implemented a class method\nto create instances of its own class. We also used class variables to keep track\nof a class's data.\u003c/p\u003e\n\n\u003cp\u003eThese are all some powerful tools you can use for more complex Ruby operations.\nAs we move forward, we'll see opportunities to leverage their power in our\nlarger applications.\u003c/p\u003e","exportId":"advanced-class-methods-conclusion"}]},{"id":21893,"name":"Topics in OO - Object Relationships in Ruby","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ge174e70884b1af1a7750d9c5904de2ac","items":[{"id":203766,"title":"Introduction to Object Relationships","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eSo far, we've mainly worked with classes that do not play well with other custom\nclasses. In other words, we've defined classes that create objects that do not\ninteract with other objects that we've created. Instead, they have methods that\nallow them to operate on themselves, or operate with some of the built-in Ruby\nclasses.\u003c/p\u003e\n\n\u003cp\u003eIn object-oriented programming, however, we write programs that reflect\nreal-world situations and environments. In the real world, different entities\nare related to one another and interact with one another in various ways.\u003c/p\u003e\n\n\u003cp\u003eIn this section we'll discuss:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eObject relationships\u003c/li\u003e\n\u003cli\u003eDifferent relationships such as \"belongs-to\"/\"has-many\"\u003c/li\u003e\n\u003cli\u003eHow to use other classes and methods within another class to collaboratively\nsend messages to one another\u003c/li\u003e\n\u003cli\u003eExposing data stored in a class variable\u003c/li\u003e\n\u003cli\u003eThe concept of a \"join\" class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next few lessons, we'll discuss how individual objects in object-oriented\nRuby can interact with one another in ways that reflect that real-world\nrelatedness. It's pretty hard to imagine an application without some degree of\ninteraction, or association, between classes or models.\u003c/p\u003e","exportId":"introduction-to-object-relationships"},{"id":203767,"title":"Object Relationship Basics","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've mainly worked with classes that do not play well with other custom classes. In other words, we've defined classes that create objects that do not interact with other objects that we've created. Instead, they have methods that allow them to operate on themselves, or operate with some of the built-in Ruby classes. For example, a \u003ccode\u003eDog\u003c/code\u003e class might have methods that describe an individual dog's attributes and behaviors. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  attr_reader :name, :size, :temperament\u003cbr\u003e  def initialize(name, size, temperament)\u003cbr\u003e    @name = name\u003cbr\u003e    @size = size\u003cbr\u003e    @temperament = temperament\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def bark\u003cbr\u003e    if quiet?\u003cbr\u003e      puts \"#{name}, the #{size} dog, says rf\"\u003cbr\u003e    else\u003cbr\u003e      puts \"#{name}, the #{size} dog, says RUFF!\"\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def quiet?\u003cbr\u003e    temperament == 'quiet'\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have a class that changes the way a dog barks based on its\ntemperament. This object isn't capable of interacting with any other dog object\nthough.\u003c/p\u003e\n\n\u003cp\u003eIn object-oriented programming, however, we write programs that reflect real-world situations and environments. In the real world, different entities are related to one another and interact with one another in various ways. Luckily for us, individual objects in object-oriented Ruby can interact with one another in ways that reflect that real-world relatedness. In fact, it's hard to imagine an application without some degree of interaction, or association, between your classes, or models. \u003c/p\u003e\n\n\u003cp\u003eHere are just a few examples:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYour users sign in to your app and \"friend\" other users. All of a sudden, users are associated through friendship.\u003c/li\u003e\n\u003cli\u003eYour app connects users to animal shelters through which they can adopt pets. Users are associated to shelters and to pets. At the same time shelters are associated to pets.\u003c/li\u003e\n\u003cli\u003eYour app allows users to aggregate their most recent tweets and those of their friends and followers. In this example, users are associated to tweets and users might even be associated to each other.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese are just a few examples of the sorts of domain models you will soon develop, almost all of which will involve object relations––the idea that instances of your classes (also referred to as models in such a situation) can interact with each other and be associated with one another.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we'll be taking a look at one of the most basic ways that two classes, or models, can be related to one another: the \"belongs to\" relationship. \u003c/p\u003e\n\n\u003ch2\u003eThe \"Belongs To\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eImagine we are creating an app that allows users to list and interact with their music library. We're used to writing single classes to represent single concepts in our program. In this application, it makes sense for us to have a class to represent an individual song. Our \u003ccode\u003eSong\u003c/code\u003e class might look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :title\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can create a new song like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling = Song.new(\"Hotline Bling\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we can return its title to us like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.title\u003cbr\u003e  # =\u0026gt; \"Hotline Bling\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs far as modeling our program on the real world however, this isn't very realistic. Songs have many more attributes than just a title. The most important of which, from a user's point of view at least, is the song's artist. In the real world, a song belongs to an artist and an artist owns the many songs he or she has created. How can we model this relationship through our code? Let's give individual songs an artist attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :title, :artist\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have a setter and getter for a song's artist attribute, we can do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist = \"Drake\"\u003cbr\u003ehotline_bling.artist\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that a song can have an artist, we might be wondering what other attributes might be related to songs and artists in this domain model. \u003c/p\u003e\n\n\u003cp\u003eFor example, users of our music app might want to know some more info about an individual artist. What albums has Drake created, for example? What about the genre of Drake's work?\u003c/p\u003e\n\n\u003cp\u003eLet's ask him:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist.genre\u003cbr\u003e  NoMethodError: undefined method `genre' for \"Drake\":String\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh! Looks like the string, \u003ccode\u003e\"Drake\"\u003c/code\u003e, that we assigned this song's \u003ccode\u003eartist\u003c/code\u003e attribute equal to, doesn't (shockingly) have a \u003ccode\u003e#genre\u003c/code\u003e method. The relationship model that we have set up is incomplete. An individual song does have an artist attribute, but instead of setting it equal to a complex object, such as an instance of some kind of \u003ccode\u003eArtist\u003c/code\u003e class that we can get more information from, we've set it equal to a simple string. A string can't tell us what genre of music it makes, how many albums it has created or anything else necessary to modeling our music app. This makes sense. The developer of Ruby can only make building blocks. They can only create general purpose blocks that we compose into great creations. \u003c/p\u003e\n\n\u003cp\u003eSo, instead of setting the \u003ccode\u003e#artist=()\u003c/code\u003e method equal to a string of an artist's name, let's create an \u003ccode\u003eArtist\u003c/code\u003e class and assign an individual song's artist attribute equal to an instance of that class. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name, :genre\u003cbr\u003e\u003cbr\u003e  def initialize(name, genre) \u003cbr\u003e    @name = name\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edrake = Artist.new(\"Drake\", \"rap\")\u003cbr\u003ehotline_bling = Song.new(\"Hotline Bling\")\u003cbr\u003e\u003cbr\u003ehotline_bling.artist = drake\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eJust like we were able to set the artist attribute equal to the string, \u003ccode\u003e\"Drake\"\u003c/code\u003e, we can set the attribute equal to an instance of the \u003ccode\u003eArtist\u003c/code\u003e class, stored in the \u003ccode\u003edrake\u003c/code\u003e local variable. \u003c/p\u003e\n\n\u003cp\u003eNow we can ask for the genre of the artist of \u003ccode\u003ehotline_bling\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist.genre\u003cbr\u003e  # =\u0026gt; \"rap\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd the name of the artist of \u003ccode\u003ehotline_bling\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist.name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our relationship between songs and their artists is complete. \u003cstrong\u003eThis is called the \"belongs to\" relationship\u003c/strong\u003e. A song can only have one artist (at least in our domain model), so we say that a song \"belongs to\" an artist. We enact this relationship by giving songs a setter and a getter method for their artist. There is nothing that requires that the artist attribute be filled with an instance of the \u003ccode\u003eArtist\u003c/code\u003e class. This is an internal contract that you must keep. As the developer you must make sure that you only put \u003ccode\u003eArtist\u003c/code\u003e instances in there!\u003c/p\u003e","exportId":"object-relationship-basics"},{"id":203768,"title":"Object Relationships - Belongs to Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-belongs-to-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-belongs-to-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-belongs-to-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-belongs-to-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite classes that are related via the \"belongs to\" relationship. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be coding a \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class. A song should belong to an artist. You'll also be coding a \u003ccode\u003ePost\u003c/code\u003e and \u003ccode\u003eAuthor\u003c/code\u003e class. A post should belong to an author. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eArtists should have a name. \u003c/li\u003e\n\u003cli\u003eSongs should have a title and belong to an artist. A song should be able to tell you the name of its artist:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003esong.artist.name\u003cbr\u003e  # =\u0026gt; \"Beyonce\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003ePosts should have a title and belong to an author. A post should be able to tell you the name of its author:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003epost.author.name\u003cbr\u003e  # =\u0026gt; \"Hillary\"\n\u003c/code\u003e\u003c/pre\u003e","exportId":"ga9a26115f7a651524aa9c38cb0eb6847"},{"id":203769,"title":"Has Many Relationships","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-has-many\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe the \"has many\" relationship between Ruby objects.\u003c/li\u003e\n\u003cli\u003eBuild classes that produce objects with a \"belongs-to\" and \"has-many\"\nrelationship.\u003c/li\u003e\n\u003cli\u003eExplain why we need to associate objects in this way.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe know that the programs we write are meant to model real-world environments.\nThis is because the programs we write are designed to carry out real-world jobs\nand solve real-world problems. Whether you're creating an app that connects\nusers around the world in some kind of social network or writing a program for a\nmajor university that manages their course offerings and students, your code\nwill need to be able to realistically map the relationships between different\nentities.\u003c/p\u003e\n\n\u003cp\u003eWe already know about the \"belongs-to\" relationship. Let's say we have a \u003ccode\u003eSong\u003c/code\u003e\nclass that produces individual song objects. Each song belongs to the artist\nwho wrote it. We can build that relationship by creating an \u003ccode\u003eattr_accessor\u003c/code\u003e in\nthe \u003ccode\u003eSong\u003c/code\u003e class for \u003ccode\u003eartist\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :artist, :name, :genre\u003cbr\u003e\u003cbr\u003e  def initialize(name, genre)\u003cbr\u003e    @name = name\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we also have an \u003ccode\u003eArtist\u003c/code\u003e class that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can set the artist attribute of an individual instance of \u003ccode\u003eSong\u003c/code\u003e equal to an\ninstance of the \u003ccode\u003eArtist\u003c/code\u003e class like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki = Song.new(\"In My Feelings\", \"hip-hop\")\u003cbr\u003edrake = Artist.new(\"Drake\")\u003cbr\u003e\u003cbr\u003ekiki.artist = drake\u003cbr\u003e\u003cbr\u003ekiki.artist.name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could just set the \u003ccode\u003eartist\u003c/code\u003e attribute equal to a simple string. However, if\nwe instead use the \u003ccode\u003eartist=\u003c/code\u003e method to set the attribute equal to a real\ninstance of the \u003ccode\u003eArtist\u003c/code\u003e class, we are associating our song to a robust object\nthat has its own attributes and behaviors.\u003c/p\u003e\n\n\u003cp\u003eFor example, in the code above, we are calling the \u003ccode\u003e#name\u003c/code\u003e method on the artist\nassociated with \u003ccode\u003ekiki\u003c/code\u003e, a song instance. With method chaining like this, we can\ndo even more with our code.\u003c/p\u003e\n\n\u003ch2\u003eThe \"has-many\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eThe inverse of the \"belongs-to\" relationship is the \"has-many\" relationship. If\na song belongs to an artist, then an artist should be able to \u003cem\u003ehave many\u003c/em\u003e songs.\nThis makes sense in the real world — most musical artists have authored\nand performed many more than one song.\u003c/p\u003e\n\n\u003cp\u003eHow can we represent an object's \"having many\" of something? Well, having many\nof something means you own a collection of that thing. Ruby offers us a great\nway to store collections of data in list form: arrays.\u003c/p\u003e\n\n\u003cp\u003eWe would like to be able to call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake.songs\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand have returned to us a list, or array, of the songs that Drake has written.\nOne way to implement this is to create an instance variable, an array, that will\nhold the songs belonging to a given artist. As songs are created that belong to\nthat artist, they can be added to the array.\u003c/p\u003e\n\n\u003ch3\u003eInitializing with an Empty Collection\u003c/h3\u003e\n\n\u003cp\u003eIf we want each artist instance to have an instance variable \u003ccode\u003e#songs\u003c/code\u003e to hold\ntheir song instances, it makes sense to create the variable when the artist is\ncreated:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @songs = []\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we set an instance variable, \u003ccode\u003e@songs\u003c/code\u003e, equal to an empty array. Recall that\nwe use instance variables to store the attributes of a given instance of a\nclass. This instance variable is set equal to an empty array because our artist\ndoesn't have any songs yet.\u003c/p\u003e\n\n\u003cp\u003eLet's write the method that will allow us to add some.\u003c/p\u003e\n\n\u003ch3\u003eAdding items to the collection\u003c/h3\u003e\n\n\u003cp\u003eWhose responsibility is it to add a new song to a given artist's collection?\nWell, at what point in time does an artist add another song to their repertoire?\nWhen they write a new song. It makes sense, therefore, that the Artist class be\nresponsible for adding the new song to the artist's collection at the time the\nsong is created.\u003c/p\u003e\n\n\u003cp\u003eLet's write the method that adds songs to an artist's collection in the \u003ccode\u003eArtist\u003c/code\u003e\nclass:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @songs = []\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_song(song)\u003cbr\u003e    @songs \u0026lt;\u0026lt; song\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can execute the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake = Artist.new(\"Drake\")\u003cbr\u003edrake.add_song(\"In My Feelings\")\u003cbr\u003edrake.add_song(\"Hotline Bling\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext we need a method that will allow a given artist to show us all of the songs\nin their collection. Let's do it.\u003c/p\u003e\n\n\u003ch3\u003eExposing the Collection\u003c/h3\u003e\n\n\u003cp\u003eLet's write an instance method, \u003ccode\u003e#songs\u003c/code\u003e, that we can call on an individual\nartist to return the list of songs that the artist has.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @songs = []\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_song(song)\u003cbr\u003e    @songs \u0026lt;\u0026lt; song\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def songs\u003cbr\u003e    @songs\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e#songs\u003c/code\u003e method simply returns the \u003ccode\u003e@songs\u003c/code\u003e array, which contains the list of\nsongs that the artist has many of.\u003c/p\u003e\n\n\u003cp\u003eLet's try it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake.songs\u003cbr\u003e  # =\u0026gt; [\"In My Feelings\", \"Hotline Bling\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eRelating Objects with \"belongs to\" and \"has many\"\u003c/h3\u003e\n\n\u003cp\u003e\"Wow, those look like interesting songs,\" you might be thinking. \"I wonder what\nkind of music Drake makes.\" Well, let's ask \u003ccode\u003edrake\u003c/code\u003e to tell us the genres of the\nsongs he has many of.\u003c/p\u003e\n\n\u003cp\u003eOh no! We can't do that because \u003ccode\u003edrake\u003c/code\u003e's songs are simply a list of strings. We\ncan't ask a plain old string what genre it has — it will have no idea what\nwe are talking about.\u003c/p\u003e\n\n\u003cp\u003eThis is the limitation of one-sided relationships. Earlier we discussed the\ndrawbacks of associating a given song to a string that contains an artist's name\ninstead of to a real \u003ccode\u003eArtist\u003c/code\u003e instance. The same drawbacks apply to associating\na given artist to a list of strings: with this setup, we are limited to\nreferences to a given artist's songs by their name alone. We cannot associate\nany further information to an artist's songs or enact any further behavior on an\nartist's songs.\u003c/p\u003e\n\n\u003cp\u003eLet's fix this now. Instead of calling the \u003ccode\u003e#add_song\u003c/code\u003e  method with an argument\nof a string, let's call that method with an argument of a real song object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki = Song.new(\"In My Feelings\", \"hip-hop\")\u003cbr\u003ehotline = Song.new(\"Hotline Bling\", \"pop\")\u003cbr\u003e\u003cbr\u003edrake.add_song(kiki)\u003cbr\u003edrake.add_song(hotline)\u003cbr\u003e\u003cbr\u003edrake.songs\u003cbr\u003e  # =\u0026gt;[#, #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now our artist has many songs that are real, tangible \u003ccode\u003eSong\u003c/code\u003e instances,\nnot just strings.\u003c/p\u003e\n\n\u003cp\u003eWe can do several useful things with this collection of real song objects, such\nas iterate over them and collect their genres:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake.songs.collect do |song|\u003cbr\u003e  song.genre\u003cbr\u003eend\u003cbr\u003e  # =\u0026gt; [\"hip-hop\", \"pop\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eObject Reciprocity\u003c/h4\u003e\n\n\u003cp\u003eNow that we can ask our given artist for their songs, let's make sure that we can\nask an individual song for its artist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki.artist\u003cbr\u003e  # =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlthough we do have an \u003ccode\u003eattr_accessor\u003c/code\u003e for \u003ccode\u003eartist\u003c/code\u003e in our \u003ccode\u003eSong\u003c/code\u003e class, this\nparticular song doesn't seem to know that it belongs to Drake. That is because\nour \u003ccode\u003e#add_song\u003c/code\u003e method only accomplished associating the song object to the\nartist object. Our artist knows it has a collection of songs and knows how to\nadd songs to that collection. But, we didn't tell the song we added to the\nartist that it belonged to that artist.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many/Image_138_CodeObjectsConvo%28A%29.png\" alt=\"belongs to\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's fix that now. Telling a song that it belongs to an artist should happen\nwhen that song is added to the artist's \u003ccode\u003e@songs\u003c/code\u003e collection. Consequently, we\nwill write the code that accomplishes this inside our \u003ccode\u003e#add_song\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @songs = []\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_song(song)\u003cbr\u003e    @songs \u0026lt;\u0026lt; song\u003cbr\u003e    song.artist = self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def songs\u003cbr\u003e    @songs\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take a closer look at the code in our \u003ccode\u003e#add_song\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef add_song(song)\u003cbr\u003e  @songs \u0026lt;\u0026lt; song\u003cbr\u003e  song.artist = self\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the artist on which we are calling\nthis method. We call the \u003ccode\u003e#artist=\u003c/code\u003e method on the song that is being passed in\nas an argument and set it equal to \u003ccode\u003eself\u003c/code\u003e — the artist.\u003c/p\u003e\n\n\u003cp\u003eLet's try calling \u003ccode\u003e#add_song\u003c/code\u003e again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake.add_song(kiki)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we should be able to ask \u003ccode\u003ekiki\u003c/code\u003e for its artist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki.artist.name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! Not only does an artist have many songs, but a song belongs to an\nartist and we built a method that enacts those associations at the appropriate\ntime.\u003c/p\u003e\n\n\u003ch2\u003eMaintaining a Single Source of Truth\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#add_song\u003c/code\u003e method works, but there is a flaw in this setup.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef add_song(song)\u003cbr\u003e  @songs \u0026lt;\u0026lt; song\u003cbr\u003e  song.artist = self\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this implementation, we're maintaining this relationship on both the \u003ccode\u003eSong\u003c/code\u003e\ninstance and the \u003ccode\u003eArtist\u003c/code\u003e instance. We've done this so that an artist knows\nwhich songs it has, and a song knows the artist it belongs to. However, keeping\nthis information maintained on both sides of the relationship means there are\n\u003cstrong\u003e\u003cem\u003etwo sources of truth\u003c/em\u003e\u003c/strong\u003e: the song's knowledge of who its artist is\n(established by using the \u003ccode\u003eartist=\u003c/code\u003e method) and the artist's knowledge of which\nsongs it has (the list of songs in the artist's \u003ccode\u003e@songs\u003c/code\u003e array).\u003c/p\u003e\n\n\u003cp\u003eSo why is this a problem? Well, what happens if we \u003cem\u003edon't\u003c/em\u003e consistently use the\n\u003ccode\u003eadd_song\u003c/code\u003e method? What if, instead, somewhere along the lines we did something\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elil_nas_x = Artist.new(\"Lil Nas X\")\u003cbr\u003eold_town_road = Song.new(\"Old Town Road\",\"hip-hop\")\u003cbr\u003e\u003cbr\u003eold_town_road.artist = lil_nas_x\u003cbr\u003e\u003cbr\u003eold_town_road.artist.name #=\u0026gt; \"Lil Nas X\"\u003cbr\u003elil_nas_x.songs #=\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, the \u003ccode\u003eSong\u003c/code\u003e instance \u003ccode\u003eold_town_road\u003c/code\u003e is associated with an artist, but\n\u003ccode\u003elil_nas_x\u003c/code\u003e \u003cstrong\u003e\u003cem\u003edoes not know about\u003c/em\u003e\u003c/strong\u003e \u003ccode\u003eold_town_road\u003c/code\u003e because the song was not\nadded to \u003ccode\u003elil_nas_x\u003c/code\u003e's \u003ccode\u003e@songs\u003c/code\u003e array. We have two sources of truth about\nartists and their songs — one from the artist side and one from the song\nside — and they're not aligned.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many/Image_138_CodeObjectsConvo%28B%29.png\" alt=\"belongs to\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA better way to approach this would be to figure out how to maintain our\n\"has-many\" / \"belongs-to\" relationship \u003cem\u003eon only one side of the relationship\u003c/em\u003e.\nWe can do that by having the \u003ccode\u003eSong\u003c/code\u003e class keep a list of \u003cem\u003eall of the songs by\nall artists\u003c/em\u003e, and writing the \u003ccode\u003e#songs\u003c/code\u003e method in our Artist class to query that\nlist, asking for the songs that belong to a given artist.\u003c/p\u003e\n\n\u003cp\u003eThis may become clearer if we make some updates to \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e. Say, for\ninstance, in \u003ccode\u003eSong\u003c/code\u003e, we set up a class variable, \u003ccode\u003e@@all\u003c/code\u003e, set to an empty Array,\nand a getter method, \u003ccode\u003e.all\u003c/code\u003e. This way, when a song is initialized, we can push\nthe instance into the \u003ccode\u003e@@all\u003c/code\u003e array and then use \u003ccode\u003eSong.all\u003c/code\u003e to retrieve all\n\u003ccode\u003eSong\u003c/code\u003e instances:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :artist, :name, :genre\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, genre)\u003cbr\u003e    @name = name\u003cbr\u003e    @genre = genre\u003cbr\u003e    save\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, so now that we can get all songs, we should be able to do things like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elil_nas_x = Artist.new(\"Lil Nas X\")\u003cbr\u003erick = Artist.new(\"Rick Astley\")\u003cbr\u003e\u003cbr\u003eold_town_road = Song.new(\"Old Town Road\",\"hip-hop\")\u003cbr\u003enever_gonna_give_you_up = Song.new(\"Never Gonna Give You Up\",\"pop\")\u003cbr\u003e\u003cbr\u003eold_town_road.artist = lil_nas_x\u003cbr\u003enever_gonna_give_you_up.artist = rick\u003cbr\u003e\u003cbr\u003eSong.all.first.name #=\u0026gt; \"Old Town Road\"\u003cbr\u003eSong.all.first.genre #=\u0026gt; \"hip-hop\"\u003cbr\u003eSong.all.first.artist #=\u0026gt; #\u003cbr\u003eSong.all.first.artist.name #=\u0026gt; \"Lil Nas X\"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eSong.all.last.name #=\u0026gt; \"Never Gonna Give You Up\"\u003cbr\u003eSong.all.last.genre #=\u0026gt; \"pop\"\u003cbr\u003eSong.all.last.artist #=\u0026gt; #\u003cbr\u003eSong.all.last.artist.name #=\u0026gt; \"Rick Astley\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we've got a way to get all songs, so if we want a list of all the songs that\nbelong to a particular artist we can just \u003cem\u003eselect\u003c/em\u003e the appropriate songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.all.select {|song| song.artist == lil_nas_x}\u003cbr\u003e#=\u0026gt; [#\u0026gt;]\u003cbr\u003e\u003cbr\u003eSong.all.select {|song| song.artist == rick}\u003cbr\u003e#=\u0026gt; [#\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo we use \u003ccode\u003e.select\u003c/code\u003e to iterate through \u003ccode\u003eSong.all\u003c/code\u003e and return the subset of songs\nassociated with a particular artist. We can incorporate this directly into our\n\u003ccode\u003eArtist\u003c/code\u003e class, replacing the implementation of the \u003ccode\u003e#songs\u003c/code\u003e method so that it\n\u003cem\u003eselects\u003c/em\u003e instead of returning the \u003ccode\u003e@songs\u003c/code\u003e instance variable. Because \u003ccode\u003e#songs\u003c/code\u003e\nis an instance method, we can use \u003ccode\u003eself\u003c/code\u003e to represent the \u003ccode\u003eArtist\u003c/code\u003e instance this\nmethod is called on:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def songs\u003cbr\u003e    Song.all.select {|song| song.artist == self}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we can get the necessary information by selecting from \u003ccode\u003eSong.all\u003c/code\u003e, we\nno longer need the \u003ccode\u003e@songs\u003c/code\u003e instance variable in our \u003ccode\u003eArtist\u003c/code\u003e class. We can get\nrid of that, and update \u003ccode\u003e#add_song\u003c/code\u003e accordingly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_song(song)\u003cbr\u003e    song.artist = self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def songs\u003cbr\u003e    Song.all.select {|song| song.artist == self}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this implementation, we're able to achieve a \"has-many\" / \"belongs-to\"\nrelationship while maintaining a single source of truth! Not only that, we were\nable to simplify the \u003ccode\u003eArtist\u003c/code\u003e class without losing any functionality!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many/Image_138_CodeObjectsConvo%28C%29.png\" alt=\"belongs to\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNow, let's go back to the original example in this section. With our new setup,\nthe issue of maintaining both sides of the relationship is solved. Simply by\ntelling the song instance which artist it belongs to, we are able to access the\nlist of songs that belong to a given artist. This works whether we use the\nSong class's \u003ccode\u003eartist=\u003c/code\u003e method or the Artist class's \u003ccode\u003eadd_song\u003c/code\u003e method:\u003c/p\u003e\n\n\u003cp\u003eCalling the \u003ccode\u003eartist=\u003c/code\u003e method on a Song instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elil_nas_x = Artist.new(\"Lil Nas X\")\u003cbr\u003eold_town_road = Song.new(\"Old Town Road\",\"hip-hop\")\u003cbr\u003e\u003cbr\u003eold_town_road.artist = lil_nas_x\u003cbr\u003e\u003cbr\u003eold_town_road.artist.name #=\u0026gt; \"Lil Nas X\"\u003cbr\u003elil_nas_x.songs #=\u0026gt; [#\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCalling the \u003ccode\u003eadd_song\u003c/code\u003e method on an Artist instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erick = Artist.new(\"Rick Astley\")\u003cbr\u003enever_gonna_give_you_up = Song.new(\"Never Gonna Give You Up\",\"pop\")\u003cbr\u003erick.add_song(never_gonna_give_you_up)\u003cbr\u003e\u003cbr\u003erick.songs #=\u0026gt; [#\u0026gt;]\u003cbr\u003enever_gonna_give_you_up.artist #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eExtending the Association and Cleaning up our Code\u003c/h2\u003e\n\n\u003cp\u003eThe code we have so far is pretty good. The best thing about it though is that\nit accommodates future change. We've built solid associations between our\n\u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e classes via our has many/belongs to code. With this\nfoundation we can make our code even better in the following ways:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#add_song_by_name\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eAs it currently stands, we have to \u003cem\u003efirst\u003c/em\u003e create a song and \u003cem\u003ethen\u003c/em\u003e add it to a\ngiven artist's collection of songs. We are lazy programmers, if we could combine\nthese two steps, that would make us happy. Furthermore, if you think about our\ndomain model, i.e. the program we are writing to model the real-world\nenvironment of an artist and their songs, the current need to create a song and\nthen add it to an artist doesn't really make sense. A song doesn't exist\n\u003cem\u003ebefore\u003c/em\u003e an artist creates it.\u003c/p\u003e\n\n\u003cp\u003eInstead, let's build a method \u003ccode\u003e#add_song_by_name\u003c/code\u003e, that takes in an argument of\na name and genre and both creates the new song \u003cem\u003eand\u003c/em\u003e adds that song to the\nartist's collection.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def add_song_by_name(name, genre)\u003cbr\u003e    song = Song.new(name, genre)\u003cbr\u003e    song.artist = self\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we tell the song that it belongs to the artist, just as we do in our\n\u003ccode\u003e#add_song\u003c/code\u003e method, and we also create a new song instance using the name and\ngenre from the arguments.\u003c/p\u003e\n\n\u003cp\u003eThis is not only neater and more elegant — we no longer have to create a\nnew song on a separate line \u003cem\u003eevery time\u003c/em\u003e we want to add one to an artist —\nbut it makes more sense.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#artist_name\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eSince we've already set up these great associations between instances of the\n\u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class, we can use them to build other helpful methods.\u003c/p\u003e\n\n\u003cp\u003eCurrently, to access the name of a given song's artist, we have to chain our\nmethods like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki.artist.name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can imagine knowing the name of an artist that a particular song belongs to\nwould be helpful and probably used in mulitple situations. Rather than having to\nchain multiple methods, wouldn't it be nice if we have one simple and\ndescriptive method that could return the name of a given song's artist? Let's\nbuild one!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def artist_name\u003cbr\u003e    self.artist.name\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki.artist_name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better. Notice that we used the \u003ccode\u003eself\u003c/code\u003e keyword inside the \u003ccode\u003e#artist_name\u003c/code\u003e\nmethod to refer to the instance of \u003ccode\u003eSong\u003c/code\u003e on which the method is being called.\nThen we call \u003ccode\u003e#artist\u003c/code\u003e on that song instance. This returns the \u003ccode\u003eArtist\u003c/code\u003e\ninstance associated with the song. Chaining a call to \u003ccode\u003e#name\u003c/code\u003e after that is\nequivalent to saying: call \u003ccode\u003e#name\u003c/code\u003e on the return value of \u003ccode\u003eself.artist\u003c/code\u003e, i.e.\ncall \u003ccode\u003e#name\u003c/code\u003e on the artist of this song.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eUsing the foundation of \"has-many\" / \"belongs-to\" associations, we can create\nmany different useful methods. We can write methods like \u003ccode\u003eadd_song_by_name\u003c/code\u003e\nthat handle initializing and associating instances. We can also create methods\nlike \u003ccode\u003eartist_name\u003c/code\u003e that can simplify retrieving information from an associated\ninstance.\u003c/p\u003e\n\n\u003cp\u003eEstablishing both \"has-many\" and \"belongs-to\" associations between two objects\nallows us to ask a song who its artist is, and ask an artist what their songs\nare. We've established a bi-directional relationship! Can you think of any other\nreal world relationships where these associations could be applied?\u003c/p\u003e","exportId":"has-many-relationships"},{"id":203770,"title":"Object Relationships - Has Many Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-has-many-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild out the has many/belongs to relationship between two classes.\u003c/li\u003e\n\u003cli\u003eBuild methods that use the has many/belongs to relationship between two classes.\u003c/li\u003e\n\u003cli\u003eUse a class variable to track data about a class.\u003c/li\u003e\n\u003cli\u003eBuild a class method to expose data stored in a class variable.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be dealing with two sets of classes: the \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e\nclasses and the \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e classes. We'll start with \u003ccode\u003eArtist\u003c/code\u003e and\n\u003ccode\u003eSong\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn artist should have many songs and a song should belong to an artist:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many-lab/Image_139_CodeObjectsRelations%28B%29.png\" alt=\"Artist and Song\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBecause of the has many/belongs to relationship between your classes, the\n\u003ccode\u003eArtist\u003c/code\u003e tests, i.e. the tests in \u003ccode\u003espec/artist_spec.rb\u003c/code\u003e, rely on some code in\nthe \u003ccode\u003eSong\u003c/code\u003e class and vice versa. You will have to build out both the classes as\nyou go.\u003c/p\u003e\n\n\u003cp\u003eWe recommend starting out by getting some of the initial \u003ccode\u003eArtist\u003c/code\u003e tests passing\nand switching to write code in the \u003ccode\u003eSong\u003c/code\u003e class as directed by the test output.\u003c/p\u003e\n\n\u003cp\u003eOnce your \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e tests are passing, you will follow a similar\nprocess for \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis lab is primarily test-driven. So run the test suite with the \u003ccode\u003elearn test\u003c/code\u003e\ncommand to get started. Read the test output very carefully to help guide you\nthrough. First, read through the guidelines below and refer back to them as you\ncomplete the lab.\u003c/p\u003e\n\n\u003ch3\u003eBuilding the has many/belongs to relationship\u003c/h3\u003e\n\n\u003cp\u003eHow can an artist have many songs and a song belong to an artist? We'll need to\nmake sure that an individual song has a reference to the artist it belongs to,\nand that an individual artist has a reference to a list of its songs.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eTo establish the association from the song side, you will need to create\n\u003ccode\u003eartist=\u003c/code\u003e and \u003ccode\u003eartist\u003c/code\u003e instance methods in the Song class.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eTo establish the association from the artist's side, an individual artist will\nneed a method that returns a collection of all of their songs.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRecall from the previous lesson that we want to do this in a way that maintains\na single source of truth. Therefore, our Song class will need:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea class variable that holds all instances of every song that's been created in\nan array,\u003c/li\u003e\n\u003cli\u003ea class method that returns the class variable holding those instances, and\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e#songs\u003c/code\u003e instance method that returns the subset of songs belonging to a given\nartist.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#add_song_by_name\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#add_song_by_name\u003c/code\u003e method should take in an argument of a name, use that\nargument to create a new song and \u003cem\u003ethen\u003c/em\u003e associate the objects. The method doesn't need to return anything, just create the association.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#artist_name\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esome_song.artist_name\u003c/code\u003e that returns the name of the artist of\nthe given song.\u003c/p\u003e\n\n\u003cp\u003eThis method should use, or extend, the has many/belongs to relationship you're\nbuilding out. If a song has an artist, you can call: \u003ccode\u003esome_song.artist\u003c/code\u003e and\nreturn an actual instance of the \u003ccode\u003eArtist\u003c/code\u003e class. Since every artist has a name,\n\u003ccode\u003esome_song.artist.name\u003c/code\u003e should return the name of the \u003ccode\u003eArtist\u003c/code\u003e instance\nassociated with the given song. Your \u003ccode\u003e#artist_name\u003c/code\u003e method should utilize this\nrelationship.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We like our code to be robust, i.e. not easily breakable. Make sure\nyour \u003ccode\u003e#artist_name\u003c/code\u003e method will not break if the given song does not have an\nartist. In this case, your method should return \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e.song_count\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eYou'll be required to write a class method that returns the total number of\nsongs that have been created. How can we get access to total number of songs\nfrom the artist class?\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e Classes\u003c/h3\u003e\n\n\u003cp\u003eOnce you have all the tests passing for the \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e classes, begin working through the tests for \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e. As with artists and songs, an author should have many posts and a post should belong to an author:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many-lab/Image_139_CodeObjectsRelations%28C%29.png\" alt=\"Author and Posts\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce again, because of the has many/belongs to relationship between your\nclasses, the \u003ccode\u003eAuthor\u003c/code\u003e tests rely on some code in the \u003ccode\u003ePost\u003c/code\u003e class and vice\nversa. You will have to build out both the classes as you go.\u003c/p\u003e\n\n\u003cp\u003eWe recommend starting out by getting some of the initial \u003ccode\u003eAuthor\u003c/code\u003e tests passing\nand switching to write code in the \u003ccode\u003ePost\u003c/code\u003e class as directed by the test output.\u003c/p\u003e","exportId":"g013768c213b500c87df7786ed9f174ae"},{"id":203771,"title":"Collaborating Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-collaborating-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eGain a deeper understanding of object relations\u003c/li\u003e\n\u003cli\u003eUse other classes and methods within another class to collaboratively send messages to one another\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's stick with our song/artist example. Our song class is responsible for handling songs. Our artist class is responsible for handling artists. However, these things clearly have some relation to one another. Remember, a song belongs to an artist, and an artist has many songs. These two classes will have to collaborate.\u003c/p\u003e\n\n\u003cp\u003eIn fact, the classes do not even need to have any relationship (\u003ccode\u003e\"has many\"\u003c/code\u003e or \u003ccode\u003e\"belongs to\"\u003c/code\u003e) to collaborate. Imagine we have an MP3 Importer that is responsible for taking in a bunch of MP3 files and making a song for each unique filename. It is not hard to imagine that to make a song, the MP3 Importer will have to have some sort of communication with the \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at each of these collaborations in more detail.\u003c/p\u003e\n\n\u003ch2\u003eMP3 Importer collaborating with Songs\u003c/h2\u003e\n\n\u003cp\u003eThe purpose of this MP3 Importer is to take in a list of mp3s and send each mp3 filename to the \u003ccode\u003eSong\u003c/code\u003e class to make a \u003ccode\u003eSong\u003c/code\u003e. Let's just focus on the collaboration. Our \u003ccode\u003eMP3Importer\u003c/code\u003e class will receive a list of filenames that look like this \"Drake - Hotline Bling\". \u003ccode\u003eMP3Importer\u003c/code\u003e will then send each of those filenames to the \u003ccode\u003eSong\u003c/code\u003e class to be created.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :title\u003cbr\u003e\u003cbr\u003e  def self.new_by_filename(filename)\u003cbr\u003e    song = self.new\u003cbr\u003e    song.title = filename.split(\" - \")[1]\u003cbr\u003e    song\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eclass MP3Importer\u003cbr\u003e  def import(list_of_filenames)\u003cbr\u003e    list_of_filenames.each{ |filename| Song.new_by_filename(filename) }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice how \u003cem\u003ewithin the \u003ccode\u003eMP3Importer\u003c/code\u003e class we are calling the \u003ccode\u003eSong\u003c/code\u003e class and a method within the \u003ccode\u003eSong\u003c/code\u003e class: \u003ccode\u003e.new_by_filename\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen we hit this line of code, it will send us to the \u003ccode\u003eSong\u003c/code\u003e class to do whatever behavior we have defined in the \u003ccode\u003e.new_by_filename\u003c/code\u003e class method. Then we will return to the \u003ccode\u003eMP3Importer\u003c/code\u003e class to continue executing the code. This is at the heart of collaborating objects.\u003c/p\u003e\n\n\u003ch2\u003eSongs collaborating with Artists\u003c/h2\u003e\n\n\u003cp\u003eSince our song belongs to an artist, we will want to collaborate with the \u003ccode\u003eArtist\u003c/code\u003e class at some point. Imagine we have the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :artist\u003cbr\u003e\u003cbr\u003e  # other methods\u003cbr\u003e\u003cbr\u003e  def artist_name=(name)\u003cbr\u003e    if (self.artist.nil?)\u003cbr\u003e      self.artist = Artist.new(name)\u003cbr\u003e    else\u003cbr\u003e      self.artist.name = name\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # other methods\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe point of this code is that we want to be able to execute the following code given a song \u003ccode\u003ehotline_bling = Song.new('Hotline Bling')\u003c/code\u003e (Let's use Hotline Bling by Drake):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist_name = \"Drake\"\u003cbr\u003ehotline_bling.artist\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should then return the new \u003ccode\u003eArtist\u003c/code\u003e object that was created by the \u003ccode\u003e#artist_name\u003c/code\u003e method.\u003c/p\u003e","exportId":"collaborating-objects"},{"id":203772,"title":"Collaborating Objects Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-collaborating-objects-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eGain a deeper understanding of object relations.\u003c/li\u003e\n\u003cli\u003eBuild classes that interact with one another through associations and behavior.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis is a test-driven lab. Use the test file and test output to understand what\nis being asked of you as you follow the guidelines below.\u003c/p\u003e\n\n\u003cp\u003eIn this lab, we'll be dealing with an \u003ccode\u003eArtist\u003c/code\u003e class, a \u003ccode\u003eSong\u003c/code\u003e class, and an\n\u003ccode\u003eMP3Importer\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eBecause of the relationships between your classes, the \u003ccode\u003eArtist\u003c/code\u003e tests, i.e. the\ntests in \u003ccode\u003espec/artist_spec.rb\u003c/code\u003e, rely on some code in the \u003ccode\u003eSong\u003c/code\u003e class and vice\nversa. So, as you proceed through solving this lab, you will go back and forth\nbetween coding in \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe recommend starting out by getting some of the initial \u003ccode\u003eArtist\u003c/code\u003e tests passing\nand switching to write code in the \u003ccode\u003eSong\u003c/code\u003e class as directed by the test output.\nBecause of the complexity, let's walk through a guideline of how to think about\nthe problem as you're building out the solution.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eYou will be building an \u003ccode\u003eArtist\u003c/code\u003e class, a \u003ccode\u003eSong\u003c/code\u003e class, and an \u003ccode\u003eMP3Importer\u003c/code\u003e\nclass. At the top level, you can think about what we'll be doing in 3 steps:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe \u003ccode\u003eMP3Importer\u003c/code\u003e class will parse all the filenames in the \u003ccode\u003espec/fixtures\u003c/code\u003e folder\nand send the filenames to the Song class\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eSong\u003c/code\u003e class will be responsible for creating songs given each filename and\nsending the artist's name (a string) to the Artist class\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class will be responsible for either creating the artist (if the\nartist doesn't exist in our program yet) or finding the instance of that\nartist (if the artist does exist).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThinking about it this way will get us started. From this breakdown, it looks\nlike the \u003ccode\u003eMP3Importer\u003c/code\u003e relies on \u003ccode\u003eSong\u003c/code\u003e in order to do its job of parsing\nfilenames. \u003ccode\u003eSong\u003c/code\u003e relies on the \u003ccode\u003eArtist\u003c/code\u003e instances to build associations.\nTherefore, we'll start by working on \u003ccode\u003eArtist\u003c/code\u003e. Keep in mind though, that you\nwill need to build out related classes together in order to pass some tests, as\nthey work in collaboration.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eArtist\u003c/code\u003e class\u003c/h3\u003e\n\n\u003cp\u003eAn \u003ccode\u003eArtist\u003c/code\u003e should be initialized with a name and should have an attribute\naccessor for this name. The class should have an \u003ccode\u003e@@all\u003c/code\u003e class variable and\nstore all \u003ccode\u003eArtist\u003c/code\u003e instances in this variable.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist.all\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis class method should return all \u003ccode\u003eArtist\u003c/code\u003e instances.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist#add_song\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis instance method exists to tell a passed in \u003ccode\u003eSong\u003c/code\u003e instance it belongs to\n\u003cem\u003ethis\u003c/em\u003e \u003ccode\u003eArtist\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist#songs\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis instance method returns an Array of all songs that belong to this \u003ccode\u003eArtist\u003c/code\u003e\ninstance. This method should get all existing \u003ccode\u003eSong\u003c/code\u003e instances from \u003ccode\u003eSong\u003c/code\u003e and\nselect only the ones that are associated with this \u003ccode\u003eArtist\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist.find_or_create_by_name\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis class method should take the name that is passed in (remember, it will be a\nstring), and do one of two things: find the artist instance that has that name\nor create one if it doesn't exist. Either way, the return value of the method\nwill be an instance of an artist with the name attribute filled out.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist#print_songs\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis instance methods outputs the names of all songs associated with this\n\u003ccode\u003eArtist\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eSong\u003c/code\u003e class\u003c/h3\u003e\n\n\u003cp\u003eA \u003ccode\u003eSong\u003c/code\u003e should be initialized with a name and have attribute accessors for\n\u003cstrong\u003ename\u003c/strong\u003e and \u003cstrong\u003eartist\u003c/strong\u003e. The \u003ccode\u003eSong\u003c/code\u003e class should have an \u003ccode\u003e@@all\u003c/code\u003e class variable\nand store all \u003ccode\u003eSong\u003c/code\u003e instances in this variable.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eSong.all\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis class method should return all \u003ccode\u003eSong\u003c/code\u003e instances.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eSong.new_by_filename\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis method will do four things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eIt must parse a filename to find the song name and artist name. (\u003cem\u003eHint: every\nfile separates the song and artist with a \u003ccode\u003e\" - \"\u003c/code\u003e\u003c/em\u003e).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFrom here, we will create a new song instance using the song name we gathered\nfrom the filename.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe'll also want to associate that new song with the appropriate artist. Use\nthe \u003ccode\u003eartist\u003c/code\u003e attribute accessor to assign this\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eReturn the new song instance.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYou may have seen something similar in the past where we have the instance of\nthe artist. If we had the artist object, we could simply assign the artist to\nthe song with some code that looks like this: \u003ccode\u003eour_song_instance.artist =\nour_artist_instance\u003c/code\u003e. Since we only have the artist name as a string (not an\ninstance of the Artist class), we'll create a method that takes in the name and\ngets the artist object. Let's call this \u003ccode\u003eSong#artist_name=\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eSong#artist_name=\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis method will do two things. Both of these things will involve collaboration\nwith the \u003ccode\u003eArtist\u003c/code\u003e class:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTurn the artist's name as a string into an \u003ccode\u003eArtist\u003c/code\u003e object.\u003c/p\u003e\n\n\u003cp\u003eFirst we need to get the instance of the \u003ccode\u003eArtist\u003c/code\u003e class that represents that\nartist. There are two possibilities here:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEither we have to create that \u003ccode\u003eArtist\u003c/code\u003e instance, or\u003c/li\u003e\n\u003cli\u003eit already exists and we have to find that \u003ccode\u003eArtist\u003c/code\u003e instance.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTo achieve this, we'll need to collaborate with the \u003ccode\u003eArtist\u003c/code\u003e class. We want\nto send an artist's name (a string — remember we are getting this from\nthe parsed filename) to the \u003ccode\u003eArtist\u003c/code\u003e class and either create or find the\nartist instance. This sounds like a great place to use method\n\u003ccode\u003eArtist.find_or_create_by_name\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAssign the song to the artist. Now that we have the artist instance, we'll\nwant to again collaborate with the \u003ccode\u003eArtist\u003c/code\u003e class by calling on the\n\u003ccode\u003eArtist#add_song(some_song)\u003c/code\u003e method.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eMP3Importer\u003c/code\u003e class\u003c/h3\u003e\n\n\u003cp\u003eBuild an \u003ccode\u003eMP3Importer\u003c/code\u003e class that:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eHas a \u003ccode\u003epath\u003c/code\u003e attribute that gets set on initialization.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eContains a \u003ccode\u003e#files\u003c/code\u003e method that parses the files in the \u003ccode\u003epath\u003c/code\u003e, returning an\narray that contains the file names. Make sure you only get \u003ccode\u003e.mp3\u003c/code\u003e files.\n\u003cstrong\u003eHint\u003c/strong\u003e: Google around for how to get a list of files in a directory! You\nmay want to look at the \u003ca href=\"https://ruby-doc.org/core-2.6.1/Dir.html\"\u003edocumentation for Ruby's built-in Dir\nclass\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eContains an \u003ccode\u003e#import\u003c/code\u003e method that sends the song names to the \u003ccode\u003eSong\u003c/code\u003e class.\nSpecifically, the method should call \u003ccode\u003eSong.new_by_filename\u003c/code\u003e, which will\nhandle the creation of \u003ccode\u003eSong\u003c/code\u003e instances and their associated \u003ccode\u003eArtist\u003c/code\u003e\ninstances.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eConclusion\u003c/h3\u003e\n\n\u003cp\u003eThese are just a few hints and guidelines to help you through this lab. Rely on\nthe guides here, refer to the previous lessons on object relations, and\n\u003cstrong\u003eread the test output and test files\u003c/strong\u003e. Never forget to ask a question \nif you are stuck. Good luck!\u003c/p\u003e","exportId":"g9f3736f50013fdf744e734e5c2e39839"},{"id":203773,"title":"Video: Collaborating Objects Review","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"collaborating-objects-review\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/collaborating-objects-review/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/collaborating-objects-review\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/collaborating-objects-review/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eTest Driven Development\u003c/li\u003e\n\u003cli\u003eFocusing on Object Interfaces\u003c/li\u003e\n\u003cli\u003eAdding an array collection for a \u003ccode\u003ehas_many\u003c/code\u003e association on initialization\u003c/li\u003e\n\u003cli\u003eAdding the \u003ccode\u003ehas_many\u003c/code\u003e collection reader\u003c/li\u003e\n\u003cli\u003ePreventing the direct modification of a \u003ccode\u003ehas_many\u003c/code\u003e collection reader\u003c/li\u003e\n\u003cli\u003eBuilding your own \u003ccode\u003ehas_many\u003c/code\u003e push interface (the \u003ccode\u003eadd_story\u003c/code\u003e method)\u003c/li\u003e\n\u003cli\u003eCustom Errors\u003c/li\u003e\n\u003cli\u003eEnforcing Type on the \u003ccode\u003ehas_many\u003c/code\u003e push interface\u003c/li\u003e\n\u003cli\u003eImplementing the \u003ccode\u003ebelongs_to\u003c/code\u003e reader\u003c/li\u003e\n\u003cli\u003eImplementing the \u003ccode\u003ebelongs_to\u003c/code\u003e writer\u003c/li\u003e\n\u003cli\u003eEnforcing Type on the \u003ccode\u003ebelongs_to\u003c/code\u003e writer\u003c/li\u003e\n\u003cli\u003eBuilding a \u003ccode\u003ehas_many through\u003c/code\u003e \u003cem\u003eBonus\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/iYcQ693LXck?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003e\u003ca href=\"http://learn-co-videos.s3.amazonaws.com/ruby/Collaborating.Objects.Review.LV-Live.mp4\"\u003eMP4\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/collaborating-objects-tdd-sample\"\u003eCode\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eThis video is meant to be a review of Object Relationships in Ruby\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand  Object Relationships in Ruby than you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e","exportId":"video-collaborating-objects-review"},{"id":203774,"title":"OO Relationships - My Pets Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-my-pets\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-my-pets/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-my-pets\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-my-pets/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Gain a deeper understanding of object relations.\u003c/li\u003e\n\u003cli\u003e Build classes that produce objects that interact with one another through\nassociations and behavior.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis is a test-driven lab. Use the test file and test output to understand what\nis being asked of you as you follow the guidelines below.\u003c/p\u003e\n\n\u003ch3\u003eOverview\u003c/h3\u003e\n\n\u003cp\u003eYou will be building an \u003ccode\u003eOwner\u003c/code\u003e, \u003ccode\u003eDog\u003c/code\u003e, and \u003ccode\u003eCat\u003c/code\u003e class. An Owner will\nknow about all their pets, be able to buy a pet, change a pet's mood through\nwalking or feeding it, and sell all of their pets (for when they\nmove to that tiny NYC studio after college).\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003eDog\u003c/code\u003e and a \u003ccode\u003eCat\u003c/code\u003e are initialized with a name and an \u003cstrong\u003eOwner object\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003ePart I: Object Models\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a \u003ccode\u003eDog\u003c/code\u003e and \u003ccode\u003eCat\u003c/code\u003e class that have the attributes required by the\ntest suite. Keep in mind, some of the attributes should be readable and writable\n(i.e. \u003ccode\u003eattr_accessor\u003c/code\u003es), while others may need to be \u003cem\u003ejust\u003c/em\u003e setters\n(\u003ccode\u003eattr_writer\u003c/code\u003e) or \u003cem\u003ejust\u003c/em\u003e getters (\u003ccode\u003eattr_reader\u003c/code\u003e). The test suite will make this\nclear so pay attention to the test output.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003ePart II: Object Relations\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAn owner should be able to buy and sell a pet, which will change the pet's mood.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen an owner buys a new pet, the \u003ccode\u003ebuy_cat/buy_dog\u003c/code\u003e methods \u003cstrong\u003etake in an\nargument of a \u003cem\u003ename\u003c/em\u003e.\u003c/strong\u003e You must take that name and do the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eMake a new instance of the appropriate pet, initializing it with that name\nand the owner who is purchasing it\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAn owner should have the ability to walk all their dogs or feed all their cats, which\nwill change the mood of all of their pets of that type to \"happy\".\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/my-pets/Image_140_Relations_OwnerDogCat.png\" alt=\"Owner, Dogs and Cats\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThese are just a few hints and guidelines to help you through this lab. This lab\nis extensive and challenging. Rely on the guides here, refer to the previous\nCode Along on object relations, and \u003cstrong\u003eread the test output and test files\u003c/strong\u003e.\nNever forget to ask a question if you are stuck. And remember, as a\nprogrammer, your job is to \u003cem\u003efix broken code!\u003c/em\u003e Broken code is the norm, the\nbaseline, the starting point for all of the projects you will build. Embrace it!\u003c/p\u003e","exportId":"g0283c7e924f1d5a038857ee5ff238c83"},{"id":203776,"title":"Has Many Through Relationships","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-has-many-through\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand Has Many Through relationships\u003c/li\u003e\n\u003cli\u003eConstruct indirect relationships between models (Customers, Waiters, and Meals)\u003c/li\u003e\n\u003cli\u003eExplore the concept of a 'joining' model\u003c/li\u003e\n\u003cli\u003eContinue to write code using a Single Source of Truth\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've seen how objects can be related to one another directly when one object\ncontains a reference to another. This is the \"has many\"/\"belongs to\"\nassociation, and is a direct relationship. For example, an artist may have many\nsongs or a book might have many reviews.\u003c/p\u003e\n\n\u003cp\u003eIn addition to these one-to-one and one-to-many relationships, some\nrelationships also need something to join them together. For example, you don't\nneed to have a direct relationship with the pilot of a flight you're on. You\nhave a relationship with that flight (you're taking the flight after all), and\nthe pilot has a relationship with the flight (they're flying it). So you have a\nrelationship to that pilot \u003cem\u003ethrough\u003c/em\u003e the flight.\u003c/p\u003e\n\n\u003cp\u003eIf you take more than one flight, you'll have these kinds of relationships with\nmore than one pilot, all still using your ticket as the middle man. The way we\nrefer to this is that each customer \u003cem\u003ehas many\u003c/em\u003e pilots \u003cem\u003ethrough\u003c/em\u003e tickets.\u003c/p\u003e\n\n\u003cp\u003eCheck out some more examples:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA company that offers a network of doctors to their employees \u003cem\u003ethrough\u003c/em\u003e the\ncompany's insurance program\u003c/li\u003e\n\u003cli\u003eA user on a popular media sharing site can have many \"likes\", that occur\n\u003cem\u003ethrough\u003c/em\u003e the pictures they post\u003c/li\u003e\n\u003cli\u003eA Lyft driver that you are connected to \u003cem\u003ethrough\u003c/em\u003e the rides you've taken with\nthem\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this lesson, we'll build out just such a relationship using waiters,\ncustomers, and meals. A customer has many meals, and a customer has many waiters\n\u003cem\u003ethrough\u003c/em\u003e those meals. Similarly, a waiter has many meals and has many customers\n\u003cem\u003ethrough\u003c/em\u003e meals.\u003c/p\u003e\n\n\u003ch2\u003eBuilding Out Our Classes\u003c/h2\u003e\n\n\u003cp\u003eLet's start by building out the \u003ccode\u003eCustomer\u003c/code\u003e class and \u003ccode\u003eWaiter\u003c/code\u003e class.  We want to\nmake sure when building out classes, that there's something to store each\ninstance.  That is to say: the \u003ccode\u003eCustomer\u003c/code\u003e class should know about every\n\u003ccode\u003ecustomer\u003c/code\u003e instance that gets created.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/customer.rb\u003cbr\u003eclass Customer\u003cbr\u003e  attr_accessor :name, :age\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, age)\u003cbr\u003e    @name = name\u003cbr\u003e    @age = age\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, each \u003ccode\u003ecustomer\u003c/code\u003e instance has a name and an age. Their name and\nage are set upon initialization, and because we created an attribute accessor\nfor both, the customer can change their name or age. If we wanted to limit this\nability to read-only, we would create an attribute reader instead. The\n\u003ccode\u003eCustomer\u003c/code\u003e class also has a class variable that tracks every instance of\n\u003ccode\u003ecustomer\u003c/code\u003e upon creation.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/waiter.rb\u003cbr\u003eclass Waiter\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :yrs_experience\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, yrs_experience)\u003cbr\u003e    @name = name\u003cbr\u003e    @yrs_experience = yrs_experience\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach instance of the \u003ccode\u003eWaiter\u003c/code\u003e class has a name and an attribute describing their\nyears of experience. Just like the \u003ccode\u003eCustomer\u003c/code\u003e class, the \u003ccode\u003eWaiter\u003c/code\u003e class has a\nclass variable that stores every \u003ccode\u003ewaiter\u003c/code\u003e instance upon initialization.\u003c/p\u003e\n\n\u003ch2\u003eThe \"Has Many Through\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eIn real life, as a customer, each time you go out to eat, you have a different\nmeal. Even if you order the same exact thing in the exact same restaurant, it's\na different instance of that meal. So it goes without saying that a customer can\nhave many meals.\u003c/p\u003e\n\n\u003cp\u003eIt's a safe bet to assume that unless you only eat at one very small restaurant,\nyou'll have many different waiters as well. Not all at once of course, because\nyou only have one waiter per meal. So it could be said that your relationship\nwith the waiter is through your meal. The same could be said of the waiter's\nrelationship with each customer.\u003c/p\u003e\n\n\u003cp\u003eThat's the essence of the has many through relationship.\u003c/p\u003e\n\n\u003ch2\u003eHow Does That Work in Code?\u003c/h2\u003e\n\n\u003cp\u003eGreat question! The way we're going to structure this relationship is by setting\nup our \u003ccode\u003eMeal\u003c/code\u003e class as a 'joining' model between our \u003ccode\u003eWaiter\u003c/code\u003e and our \u003ccode\u003eCustomer\u003c/code\u003e\nclasses. And because we're obeying the \u003ccode\u003esingle source of truth\u003c/code\u003e, we're going to\ntell the \u003ccode\u003eMeal\u003c/code\u003e class to know all the details of each \u003ccode\u003emeal\u003c/code\u003e instance. That\nincludes not only the total cost and the tip (which defaults to 0) but also who\nthe \u003ccode\u003ecustomer\u003c/code\u003e and \u003ccode\u003ewaiter\u003c/code\u003e were for each meal.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/meal.rb\u003cbr\u003eclass Meal\u003cbr\u003e\u003cbr\u003e  attr_accessor :waiter, :customer, :total, :tip\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(waiter, customer, total, tip=0)\u003cbr\u003e    @waiter = waiter\u003cbr\u003e    @customer = customer\u003cbr\u003e    @total = total\u003cbr\u003e    @tip = tip\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat looks great! And even better, it's going to give both the \u003ccode\u003ecustomer\u003c/code\u003e and\n\u003ccode\u003ewaiter\u003c/code\u003e instances the ability to get all the information about the meal that\nthey need without having to store it themselves. Let's build some methods.\u003c/p\u003e\n\n\u003ch2\u003eBuilding on the Relationship\u003c/h2\u003e\n\n\u003cp\u003eIf you take a look at our \u003ccode\u003ecustomer\u003c/code\u003e right now, they aren't capable of doing\nmuch. Let's change that and give them the ability to create a \u003ccode\u003emeal\u003c/code\u003e. To do\nthis, they'll need to take in an instance of a \u003ccode\u003ewaiter\u003c/code\u003e and supply the \u003ccode\u003etotal\u003c/code\u003e\nand \u003ccode\u003etip\u003c/code\u003e, which we'll have defaulted to 0 here as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/customer.rb\u003cbr\u003e\u003cbr\u003e  def new_meal(waiter, total, tip=0)\u003cbr\u003e    Meal.new(waiter, self, total, tip)\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, we don't need to take \u003ccode\u003ecustomer\u003c/code\u003e in as an argument, because\nwe're passing in \u003ccode\u003eself\u003c/code\u003e as a reference to the current instance of customer. This\nmethod will allow us to create new meals as a \u003ccode\u003ecustomer\u003c/code\u003e, and automatically\nassociate each new \u003ccode\u003emeal\u003c/code\u003e with the \u003ccode\u003ecustomer\u003c/code\u003e that created it. We can do the\nsame thing for the \u003ccode\u003eWaiter\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/waiter.rb\u003cbr\u003e\u003cbr\u003e  def new_meal(customer, total, tip=0)\u003cbr\u003e    Meal.new(self, customer, total, tip)\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the \u003cem\u003eparameters\u003c/em\u003e are different for the \u003ccode\u003enew_meal\u003c/code\u003e method are\ndifferent for \u003ccode\u003ecustomer\u003c/code\u003e and \u003ccode\u003ewaiter\u003c/code\u003e, but the order of \u003cem\u003earguments\u003c/em\u003e for\n\u003ccode\u003eMeal.new()\u003c/code\u003e remains the same - a waiter, a customer, a total and a tip. Great!\nNow we can create \u003ccode\u003ewaiters\u003c/code\u003e, \u003ccode\u003ecustomers\u003c/code\u003e and \u003ccode\u003emeals\u003c/code\u003e to our heart's content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  sam = Customer.new(\"Sam\", 27)\u003cbr\u003e  pat = Waiter.new(\"Pat\", 2)\u003cbr\u003e  alex = Waiter.new(\"Alex\", 5)\u003cbr\u003e\u003cbr\u003e  sam.new_meal(pat, 50, 10) # A Customer creates a Meal, passing in a Waiter instance\u003cbr\u003e  sam.new_meal(alex, 20, 3) # A Customer creates a Meal, passing in a Waiter instance\u003cbr\u003e  pat.new_meal(sam, 30, 5) # A Waiter creates a Meal, passing in a Customer instance\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eReminder\u003c/strong\u003e: If you would like to practice creating these instances, you can\nload these classes up using IRB. Run \u003ccode\u003eirb\u003c/code\u003e from this lesson's main directory,\nthen load up each class into the IRB environment by using \u003ccode\u003erequire_relative\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative './lib/customer.rb'\u003cbr\u003erequire_relative './lib/meal.rb'\u003cbr\u003erequire_relative './lib/waiter.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCompleting the Has Many Through Relationship\u003c/h2\u003e\n\n\u003cp\u003eThis is awesome, but it isn't done yet! To complete our goal of establishing a\nhas many through relationship, we need a way for our \u003ccode\u003ecustomer\u003c/code\u003e and \u003ccode\u003ewaiter\u003c/code\u003e\ninstances to get information about each other. The only way they can get that\ninformation is through the meals they've created.\u003c/p\u003e\n\n\u003cp\u003eRelating this to real life, we can imagine a situation where a waiter might want\nto know who their regular customers are and what meals those customers usually\norder. Or, a customer might want to know the name of the waiter of their last\nmeal so they can leave a good review. To get our waiters and customers this\ninformation, we're going to consult the \u003ccode\u003eMeal\u003c/code\u003e class \u003cem\u003efrom\u003c/em\u003e the \u003ccode\u003eCustomer\u003c/code\u003e and\n\u003ccode\u003eWaiter\u003c/code\u003e classes. Let's start with the \u003ccode\u003eCustomer\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eIn plain English, the customer is going to look at all of the meals, and then\nselect only the ones that belong to them. Translated into code, that could be\nwritten like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/customer.rb\u003cbr\u003e\u003cbr\u003edef meals\u003cbr\u003e  Meal.all.select do |meal|\u003cbr\u003e    meal.customer == self\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBoom. We're iterating through every instance of \u003ccode\u003eMeal\u003c/code\u003e and returning only the\nones where the meal's \u003ccode\u003ecustomer\u003c/code\u003e matches the current \u003ccode\u003ecustomer\u003c/code\u003e instance. If a\ncustomer, Rachel, wants to know about all of her meals, all we need to do is call\nthe \u003ccode\u003e#meals\u003c/code\u003e method on her Customer instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ealex = Customer.new(\"Alex\", 30)\u003cbr\u003erachel = Customer.new(\"Rachel\", 27)\u003cbr\u003edan = Waiter.new(\"Dan\", 3)\u003cbr\u003e\u003cbr\u003erachel.new_meal(dan, 50, 10)\u003cbr\u003ealex.new_meal(dan, 30, 5)\u003cbr\u003e\u003cbr\u003erachel.meals #=\u0026gt; [#, @customer=#, @total=50, @tip=10\u0026gt;]\u003cbr\u003erachel.meals.length #=\u0026gt; 1\u003cbr\u003e\u003cbr\u003eMeal.all.length #=\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, two meals were created, one for \u003ccode\u003erachel\u003c/code\u003e and one for \u003ccode\u003ealex\u003c/code\u003e, both with the\nsame waiter. However, running \u003ccode\u003erachel.meals\u003c/code\u003e only returns the meal \u003ccode\u003erachel\u003c/code\u003e is\nassociated with.\u003c/p\u003e\n\n\u003cp\u003eSo \u003ccode\u003erachel.meals\u003c/code\u003e will return an array of all of Rachel's meals, but what if we now\nwant a list of all of the waiters that Rachel has interacted with?  Each meal is\nalso associated with a waiter, so to get every waiter from every meal Rachel has\nhad, we need to take the array of all of Rachel's meals, map over it, getting the\nwaiter from each of those meals.\u003c/p\u003e\n\n\u003cp\u003eSince we already have a \u003ccode\u003e#meals\u003c/code\u003e method to get an array of meals, we can reuse it\nhere and write a \u003ccode\u003e#waiters\u003c/code\u003e method like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/customer.rb\u003cbr\u003e\u003cbr\u003edef waiters\u003cbr\u003e  meals.map do |meal|\u003cbr\u003e    meal.waiter\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eterrance = Customer.new(\"Terrance\", 27)\u003cbr\u003ejason = Waiter.new(\"Jason\", 4)\u003cbr\u003eandrew = Waiter.new(\"Andrew\", 7)\u003cbr\u003eyomi = Waiter.new(\"Yomi\", 10)\u003cbr\u003e\u003cbr\u003eterrance.new_meal(jason, 50, 6)\u003cbr\u003eterrance.new_meal(andrew, 60, 8)\u003cbr\u003eterrance.new_meal(yomi, 30, 4)\u003cbr\u003e\u003cbr\u003eterrance.waiters #=\u0026gt; [#, #, #] \u003cbr\u003eterrance.waiters.length #=\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd to finish out first real-life example, if Terrance wanted to find the name of\nhis last waiter, we can use the \u003ccode\u003e#waiters\u003c/code\u003e method, then just get the \u003ccode\u003ename\u003c/code\u003e of the\nlast \u003ccode\u003ewaiter\u003c/code\u003e in the Array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eterrance.waiters.last.name #=\u0026gt; \"Yomi\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo reinforce this concept, let's look at the same sort of relationship, but in\nthe other direction. This time, we will build out methods so a waiter\ncan find the customer that tips the the best.\u003c/p\u003e\n\n\u003cp\u003eAgain to start, just like the customer, the waiter needs a way to get all the meals they have served. We'll create a \u003ccode\u003e#meals\u003c/code\u003e method again, with a subtle change:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/waiter.rb\u003cbr\u003e\u003cbr\u003edef meals\u003cbr\u003e  Meal.all.select do |meal|\u003cbr\u003e    meal.waiter == self #checking for waiter now\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo find the best tipper, we can write another method, \u003ccode\u003e#best_tipper\u003c/code\u003e, use the\narray we get from \u003ccode\u003e#meals\u003c/code\u003e, then return the customer of the meal with the\nhighest tip:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/waiter.rb\u003cbr\u003e\u003cbr\u003edef best_tipper\u003cbr\u003e  best_tipped_meal = meals.max do |meal_a, meal_b|\u003cbr\u003e    meal_a.tip \u0026lt;=\u0026gt; meal_b.tip\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  best_tipped_meal.customer\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003ejason = Waiter.new(\"Jason\", 4)\u003cbr\u003elisa = Customer.new(\"Lisa\", 24)\u003cbr\u003etim = Customer.new(\"Tim\", 35)\u003cbr\u003eterrance = Customer.new(\"Terrance\", 27)\u003cbr\u003e\u003cbr\u003eterrance.new_meal(jason, 50, 3)\u003cbr\u003elisa.new_meal(jason, 40, 10)\u003cbr\u003etim.new_meal(jason, 45, 8)\u003cbr\u003e\u003cbr\u003ejason.best_tipper #=\u0026gt; #\u003cbr\u003ejason.best_tipper.name #=\u0026gt; \"Lisa\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd there you have it - customers have access to waiters, and waiters have\naccess to customers. Notice as well that neither the \u003ccode\u003eCustomer\u003c/code\u003e class, nor the\n\u003ccode\u003eWaiter\u003c/code\u003e class needed additional attributes - they don't need to keep track of\nthis information; they only need to have the methods that ask the write\nquestions - in this case to the \u003ccode\u003eMeal\u003c/code\u003e class, the \u003cem\u003ejoin\u003c/em\u003e between customer and\nwaiter.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWhy associate customers to waiter objects \u003cem\u003ethrough\u003c/em\u003e meals? By associating meals\nto waiters, we are not only reflecting the real-world situation that our program\nis meant to model, but we are also creating clean and re-usable code. Each class\nonly knows about what they specifically need to know about, and we create a\nsingle source of truth by keeping our information central in our relationship\nmodel.\u003c/p\u003e\n\n\u003ch2\u003eFurther Practice\u003c/h2\u003e\n\n\u003cp\u003eBelow you'll find all the code for the \u003ccode\u003eCustomer\u003c/code\u003e class, including a few new\nmethods. Think about expanding on the \u003ccode\u003eCustomer\u003c/code\u003e and \u003ccode\u003eWaiter\u003c/code\u003e classes and about\nwhat other methods might be possible using the has many through relationship.\nFor starters, try some of the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA waiter's most frequent customer\u003c/li\u003e\n\u003cli\u003eThe meal of a waiter's worst tipping customer\u003c/li\u003e\n\u003cli\u003eThe average tips for the most experienced waiter and the average tips for the\nleast experienced waiter\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Customer\u003cbr\u003e  attr_accessor :name, :age\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, age)\u003cbr\u003e    @name = name\u003cbr\u003e    @age = age\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def meals\u003cbr\u003e    Meal.all.select do |meal|\u003cbr\u003e      meal.customer == self\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def waiters\u003cbr\u003e    meals.map do |meal|\u003cbr\u003e      meal.waiter\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def new_meal(waiter, total, tip=0)\u003cbr\u003e    Meal.new(waiter, self, total, tip)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def new_meal_20_percent(waiter, total)\u003cbr\u003e    tip = total * 0.2\u003cbr\u003e    Meal.new(waiter, self, total, tip)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.oldest_customer\u003cbr\u003e    oldest_age = 0\u003cbr\u003e    oldest_customer = nil\u003cbr\u003e    self.all.each do |customer|\u003cbr\u003e      if customer.age \u0026gt; oldest_age\u003cbr\u003e        oldest_age = customer.age\u003cbr\u003e        oldest_customer = customer\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e    oldest_customer\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e","exportId":"g2b846d4f7cb26aa8f79fa1c91eb9c740"},{"id":203777,"title":"Object Relationships - Has Many Through Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-has-many-through-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite classes that are related to each other via the \"has many through\"\nrelationship.\u003c/li\u003e\n\u003cli\u003eWrite methods that use the \"has many through\" relationship to deliver\ninformation on related objects.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be dealing with two sets of three classes.\u003c/p\u003e\n\n\u003cp\u003eWe have \u003ccode\u003eSong\u003c/code\u003e, \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eGenre\u003c/code\u003e classes. Songs belong to an artist and to a\ngenre. A genre has many songs and an artist has many songs. An artist has many\ngenres through their songs and a genre has many artists through its songs.\u003c/p\u003e\n\n\u003cp\u003eWe also have \u003ccode\u003eAppointment\u003c/code\u003e, \u003ccode\u003eDoctor\u003c/code\u003e and \u003ccode\u003ePatient\u003c/code\u003e classes. Appointments belong\nto a patient and to a doctor. A doctor has many appointments and a patient has\nmany appointments. A doctor has many patients through their appointments and a\npatient has many doctors through their appointments.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eStart with the \u003ccode\u003eArtist\u003c/code\u003e/\u003ccode\u003eSong\u003c/code\u003e/\u003ccode\u003eGenre\u003c/code\u003e domain.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eArtist\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each artist in the\nclass variable.\u003c/li\u003e\n\u003cli\u003eAn artist is initialized with a name and is saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs an instance method, \u003ccode\u003e#new_song\u003c/code\u003e, that takes in two\narguments, name and genre, and creates a new song. That song should know that\nit belongs to the artist.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs an instance method, \u003ccode\u003e#songs\u003c/code\u003e, that iterates through\nall songs and finds the songs that belong to that artist. Try using \u003ccode\u003eselect\u003c/code\u003e\nto achieve this.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs an instance method, \u003ccode\u003e#genres\u003c/code\u003e that iterates over that\nartist's songs and collects the genre of each song.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003emadonna = Artist.new(\"Madonna\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eGenre\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eGenre\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eGenre\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each genre in the\nclass variable.\u003c/li\u003e\n\u003cli\u003eA genre should be initialized with a name and be saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eGenre\u003c/code\u003e class needs an instance method, \u003ccode\u003e#songs\u003c/code\u003e, that iterates through\nall songs and finds the songs that belong to that genre.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eGenre\u003c/code\u003e class needs an instance method, \u003ccode\u003e#artists\u003c/code\u003e, that iterates over the\ngenre's collection of songs and collects the artist that owns each song.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003epop = Genre.new(\"pop\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eSong\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eSong\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eSong\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each song in the class\nvariable.\u003c/li\u003e\n\u003cli\u003eA song should be initialized with a name, an artist, and a genre, and be saved\nin the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003emadonna = Artist.new(\"Madonna\")\u003cbr\u003epop = Genre.new(\"pop\")\u003cbr\u003e\u003cbr\u003einto_the_groove = Song.new(\"Into the Groove\", madonna, pop)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's move on to our \u003ccode\u003eDoctor\u003c/code\u003e/\u003ccode\u003eAppointment\u003c/code\u003e/\u003ccode\u003ePatient\u003c/code\u003e domain model.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e the tests will be calling the \u003ccode\u003e#new_appointment\u003c/code\u003e methods you will\nwrite in your \u003ccode\u003eDoctor\u003c/code\u003e and \u003ccode\u003ePatient\u003c/code\u003e classes, as well as the \u003ccode\u003e#initialize\u003c/code\u003e\nmethod in the \u003ccode\u003eAppointment\u003c/code\u003e class. Therefore, in order to pass the tests, you\nwill need to make sure that your method definitions specify the parameters in\nthe order indicated below.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each doctor in the\nclass variable.\u003c/li\u003e\n\u003cli\u003eA doctor should be initialized with a name and saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs an instance method, \u003ccode\u003e#new_appointment\u003c/code\u003e, that takes in\na date and an instance of the \u003ccode\u003ePatient\u003c/code\u003e class \u003cem\u003ein this order\u003c/em\u003e, and creates a\nnew \u003ccode\u003eAppointment\u003c/code\u003e. That \u003ccode\u003eAppointment\u003c/code\u003e should know that it belongs to the\ndoctor.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs an instance method, \u003ccode\u003e#appointments\u003c/code\u003e, that iterates\nthrough all \u003ccode\u003eAppointment\u003c/code\u003es and finds those belonging to this doctor.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs an instance method, \u003ccode\u003e#patients\u003c/code\u003e, that iterates over\nthat doctor's \u003ccode\u003eAppointment\u003c/code\u003es and collects the patient that belongs to each\n\u003ccode\u003eAppointment\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003edoogie = Doctor.new(\"Doogie Howser\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003ePatient\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each patient in the\nclass variable.\u003c/li\u003e\n\u003cli\u003eA patient should be initialized with a name and saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs an instance method, \u003ccode\u003e#new_appointment\u003c/code\u003e, that takes\nin a date and an instance of the \u003ccode\u003eDoctor\u003c/code\u003e class \u003cem\u003ein this order\u003c/em\u003e and creates a\nnew \u003ccode\u003eAppointment\u003c/code\u003e. The \u003ccode\u003eAppointment\u003c/code\u003e should know that it belongs to the\npatient.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs an instance method, \u003ccode\u003e#appointments\u003c/code\u003e, that iterates\nthrough the \u003ccode\u003eAppointment\u003c/code\u003es array and returns \u003ccode\u003eAppointment\u003c/code\u003es that belong to the\npatient.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs an instance method, \u003ccode\u003e#doctors\u003c/code\u003e, that iterates over\nthat patient's \u003ccode\u003eAppointment\u003c/code\u003es and collects the doctor that belongs to each\n\u003ccode\u003eAppointment\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eferris = Patient.new(\"Ferris Bueller\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eAppointment\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eAppointment\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eAppointment\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each\n\u003ccode\u003eAppointment\u003c/code\u003e in the class variable.\u003c/li\u003e\n\u003cli\u003eAn \u003ccode\u003eAppointment\u003c/code\u003e should be initialized with a date (as a string, like\n\u003ccode\u003e\"Monday, August 1st\"\u003c/code\u003e), a patient, and a doctor \u003cem\u003ein this order\u003c/em\u003e. The\n\u003ccode\u003eAppointment\u003c/code\u003e should be saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eferris = Patient.new(\"Ferris Bueller\")\u003cbr\u003edoogie = Doctor.new(\"Doogie Howser\")\u003cbr\u003e\u003cbr\u003enew_appointment = Appointment.new('January 1st, 1989', ferris, doogie)\n\u003c/code\u003e\u003c/pre\u003e","exportId":"gc7fc36502478322f5ebbd41a17e81d65"},{"id":203778,"title":"Object Relationships - Kickstarter Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-kickstarter-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-kickstarter-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-kickstarter-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-kickstarter-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild classes that produce objects that relate to one another.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we are going to be creating a very, very simple version of\nKickstarter. We'll have Projects and Backers (and no concept of money at all),\nand they will need to interact with one another realistically.\u003c/p\u003e\n\n\u003cp\u003eWe want our interface to work something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebob = Backer.new(\"Bob\")\u003cbr\u003eawesome_project = Project.new(\"This is an Awesome Project\")\u003cbr\u003e\u003cbr\u003ebob.back_project(awesome_project)\u003cbr\u003e\u003cbr\u003ebob.backed_projects\u003cbr\u003e# =\u0026gt; [#]\u003cbr\u003e\u003cbr\u003eawesome_project.backers\u003cbr\u003e# =\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe tricky thing here is that projects can have many backers and backers can\nback many projects. Neither can \u003cem\u003ebelong to\u003c/em\u003e just one of the other.\u003c/p\u003e\n\n\u003cp\u003eHowever, if we introduce a third class in between Project and Backer, we can\nestablish a \u003cem\u003ehas many through\u003c/em\u003e relationship in both directions!\u003c/p\u003e\n\n\u003cp\u003eWe can call this class ProjectBacker — each instance of ProjectBacker will\nrepresent an association between a single backer and a single project. A\nProjectBacker, therefore, belongs to one Backer and one Project. ProjectBacker,\nin essence, acts as a \u003cem\u003ejoin\u003c/em\u003e between Project and Backer. It allows us to\nmaintain the 'has many' / 'has many' relationship that the two have.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe specs have been set to run in the default order, and are written in such a\nway that tests for the Backer, Project, and ProjectBacker classes are mixed in\nwith one another. This is not how you'd normally see specs for multiple objects.\nFor the purposes of this lab, though, following the specs in order will\neventually lead you to the correct relationships between your classes.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWhen a \u003ccode\u003eBacker\u003c/code\u003e instance is initialized, it should be initialized with a name.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen a \u003ccode\u003eProject\u003c/code\u003e instance is initialized, it should be initialized with a\ntitle.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen a \u003ccode\u003eProjectBacker\u003c/code\u003e instance is initialized, it should be initialized with\na \u003ccode\u003eProject\u003c/code\u003e instance and a \u003ccode\u003eBacker\u003c/code\u003e instance.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eProjectBacker\u003c/code\u003e class is maintaining the relationship. It should have an\n\u003ccode\u003e@@all\u003c/code\u003e class variable. When an instance is initialized, it should be stored\nin this variable.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eProjectBacker\u003c/code\u003e class should also have a class method \u003ccode\u003e.all\u003c/code\u003e that returns\nthe \u003ccode\u003e@@all\u003c/code\u003e class variable.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eOnce both classes have their attributes and readers set up, write an instance\nmethod on the Backer class called \u003ccode\u003eback_project\u003c/code\u003e that takes in a Project\ninstance. This method should create a \u003ccode\u003eProjectBacker\u003c/code\u003e instance using the\nprovided Project instance and the current Backer instance (the instance this\nmethod was called on).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSimilarly, write a method on the Project class called \u003ccode\u003eadd_backer\u003c/code\u003e that takes\nin a Backer instance and creates a \u003ccode\u003eProjectBacker\u003c/code\u003e using the Backer instance\nand the current Project instance.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWith \u003ccode\u003eback_project\u003c/code\u003e set up, the final step for the Backer class is to build an\ninstance method that returns all the projects associated with \u003cem\u003ethis Backer\ninstance\u003c/em\u003e. Since Project instances are not directly associated with Backer\ninstances, you will need to get this information \u003cem\u003ethrough\u003c/em\u003e the ProjectBacker\nclass.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFor the Project class, write a similar method, \u003ccode\u003ebackers\u003c/code\u003e, that returns all\nbackers associated with this Project instance.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBy creating the ProjectBacker class, we can maintain a single source of truth in\na relationship where both sides have many of the other.\u003c/p\u003e\n\n\u003cp\u003eProjectBacker is also a great example of how awesome object orientation is\n— we can use OO to represent real-world relationships and classes to\nrepresent \u003cem\u003ethings\u003c/em\u003e. But sometimes, when we need more flexibility, classes can\nexist purely to represent a \u003cem\u003erelationship\u003c/em\u003e.\u003c/p\u003e","exportId":"g7b7557139cc5cd1334e6d95725c0f4c7"},{"id":203779,"title":"Object Relationships Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eOver the past several lessons and labs, we've seen in detail how relationships\nbetween Ruby objects work. Always keep in mind that when we're writing programs,\nwe're reflecting real-world situations and environments. We can model these\nassociations in our code with relationship patterns such as \"belongs to\" and\n\"has many.\" We also looked at how classes and methods within classes can\ncollaboratively send messages to one another and explored how to use the concept of a\n\"join\" class to represent more complex relationships.\u003c/p\u003e\n\n\u003cp\u003eRuby object relationships will provide the foundations of the programs you write\nin the future, and the more accurately you can create associations between your\nprogram and the real-world, the more your program's users will benefit from your\nwork.\u003c/p\u003e","exportId":"object-relationships-conclusion"}]},{"id":21894,"name":"Topics in OO - Object Inheritance in Ruby","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g5dd5e01897b0ef8961c2398e77478d46","items":[{"id":203780,"title":"Introduction to Object Inheritance","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThe concept of inheritance in Ruby works similarly to the real world — A prince\ncan inherit a kingdom and everything within it, a baby can inherit genetic\ntraits from a parent. In Ruby, a class can inherit the behaviors of another\nclass, referred to as the \u003cem\u003esuperclass\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn these lessons, we'll cover:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat inheritance is in object-oriented Ruby\u003c/li\u003e\n\u003cli\u003eImplementing class with inherited methods from another class that also has its\nown unique methods\u003c/li\u003e\n\u003cli\u003eRefactoring \"code smells\" into multiple, non-repetitive methods\u003c/li\u003e\n\u003cli\u003eUsing the \u003ccode\u003esuper\u003c/code\u003e keyword to inherit from and augment methods in the parent\nclass\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, we'll explain how we can leverage the power of Ruby to define\nbasic classes with large reusability and smaller subclasses for more\nfine-grained, detailed behaviors.\u003c/p\u003e","exportId":"introduction-to-object-inheritance"},{"id":203781,"title":"Defining Object Inheritance","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-defining-inheritance\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-defining-inheritance/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-defining-inheritance\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-defining-inheritance/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn about inheritance in object oriented Ruby.\u003c/li\u003e\n\u003cli\u003eWrite classes that inherit from another class.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction: Why Inheritance?\u003c/h2\u003e\n\n\u003cp\u003eIn the real-world, different entities (people, animals, cars, you name it) are related in various ways. Within a single entity or group, there exist systems of classification. For example, the \"dogs\" entity or category includes pugs, corgis, labs, etc. All of these breeds share common features because they are all dogs. But they all have certain unique traits as well.\u003c/p\u003e\n\n\u003cp\u003eAnother example: you are writing a web application in which users are either admins, instructors or students. All of these entities are \"users\" and have common features, but they all have some unique traits as well.\u003c/p\u003e\n\n\u003cp\u003eHow can our code reflect that fact that these different categories of things all share some, or even many, characteristics but all have some unique attributes as well? Well, we could write separate admin, instructor and student class that each contain repetitious code to lend each of these classes shared attributes and behaviors. We know, however, that repetitious code is always something to be avoided. Not only is it time consuming, but what happens when we need to make a change to this shared behavior? We'd have to code the same change in three places.\u003c/p\u003e\n\n\u003cp\u003eInstead, we can use \u003cstrong\u003einheritance\u003c/strong\u003e. The use of inheritance allows us to create a family of classes with shared behavior, while still differentiating those classes. With inheritance, we could \u003cem\u003einherit\u003c/em\u003e the admin, instructor and student classes from a user class. Then, any changes made to the user class would apply to the other class.\u003c/p\u003e\n\n\u003cp\u003eWhile you may not write your own classes that use inheritance very frequently, you will encounter it frequently as a Ruby on Rails web developer. Once we introduce the use of databases and the challenge of connecting our programs to our database, you'll encounter inheritance in nearly every program you write for the web. More on that (much) later.\u003c/p\u003e\n\n\u003ch2\u003eWhat is Inheritance?\u003c/h2\u003e\n\n\u003cp\u003eIn Ruby, classes can inherit from one another. This means that they adopt all of the attributes and behaviors (i.e. all of the methods) of the parent, also called the \u003cstrong\u003esuper\u003c/strong\u003e class. In this exercise, we'll be building our own chain of inheritance.\u003c/p\u003e\n\n\u003ch2\u003eCode Along: Basic Inheritance\u003c/h2\u003e\n\n\u003cp\u003eIn this domain model, we have class \u003ccode\u003eVehicle\u003c/code\u003e that will act as the parent, or super, class. We will create child classes, also known as \u003cstrong\u003esubclasses\u003c/strong\u003e for different types of \u003ccode\u003eVehicle\u003c/code\u003es, such as car.\u003c/p\u003e\n\n\u003ch3\u003eStep 1: Defining the Super Class\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/vehicle.rb\u003c/code\u003e. We're going to define some methods in this parent class so that our subclasses, when we make them, will have access to them.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Vehicle\u003cbr\u003e\u003cbr\u003e  attr_accessor :wheel_size, :wheel_number\u003cbr\u003e\u003cbr\u003e  def initialize(wheel_size, wheel_number)\u003cbr\u003e    @wheel_size = wheel_size\u003cbr\u003e    @wheel_number = wheel_number\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def go\u003cbr\u003e    \"vrrrrrrrooom!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def fill_up_tank\u003cbr\u003e    \"filling up!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstances of \u003ccode\u003eVehicle\u003c/code\u003e initialize with a wheel size and number. We also have \u003ccode\u003e#go\u003c/code\u003e and \u003ccode\u003e#fill_up_tank\u003c/code\u003e instance methods that describe some common vehicle behavior.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and paste the above Vehicle class code into your Vehicle class, and run the test suite and you'll see that you are passing all of the tests for the \u003ccode\u003eVehicle\u003c/code\u003e class but none of the tests for the \u003ccode\u003eCar\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003eStep 2: Defining the Subclass\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/car.rb\u003c/code\u003e. Notice that we are requiring \u003ccode\u003elib/vehicle.rb\u003c/code\u003e. That is because our \u003ccode\u003eCar\u003c/code\u003e class will need access to the \u003ccode\u003eVehicle\u003c/code\u003e class and will therefore need access to the file that contains that class.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and define the class in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Car \u0026lt; Vehicle\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe use the \u003ccode\u003e\u0026lt;\u003c/code\u003e to inherit the \u003ccode\u003eCar\u003c/code\u003e class from \u003ccode\u003eVehicle\u003c/code\u003e. Notice that there are \u003cem\u003eno methods defined in the \u003ccode\u003eCar\u003c/code\u003e class\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eRun the test suite again and you'll see that you are passing a number of tests for the \u003ccode\u003eCar\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eWow! We didn't write \u003cem\u003eanything\u003c/em\u003e in our \u003ccode\u003eCar\u003c/code\u003e class but instances of \u003ccode\u003eCar\u003c/code\u003e class \u003cem\u003einherit\u003c/em\u003e all of the \u003ccode\u003eVehicle\u003c/code\u003e methods and therefore have access to them. We're still failing the \u003ccode\u003e#go\u003c/code\u003e test however. Looks like the test is expecting the \u003ccode\u003e#go\u003c/code\u003e method on an individual car to return the phrase: \u003ccode\u003e\"VRRROOOOOOOOOOOOOOOOOOOOOOOM!!!!!\"\u003c/code\u003e. This is different than the return value of the \u003ccode\u003e#go\u003c/code\u003e method that we inherited from the \u003ccode\u003eVehicle\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eLet's overwrite the inherited \u003ccode\u003ego\u003c/code\u003e method with one specific to \u003ccode\u003eCar\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eStep 3: Overwriting Inherited Methods\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/car.rb\u003c/code\u003e, write the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Car \u0026lt; Vehicle\u003cbr\u003e  def go\u003cbr\u003e    \"VRRROOOOOOOOOOOOOOOOOOOOOOOM!!!!!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, run the tests again and you should be passing all of them.\u003c/p\u003e\n\n\u003ch4\u003eMethod Look-Up in Ruby\u003c/h4\u003e\n\n\u003cp\u003eHow does our above example work? Well, when your program is being executed, at the point at which the \u003ccode\u003e#go\u003c/code\u003e method is invoked, the compiler will first look in the class to which the instance of car that we are calling the method on belongs. If it finds a \u003ccode\u003e#go\u003c/code\u003e method there, it will execute \u003cem\u003ethat method\u003c/em\u003e. If it doesn't find such a method there, it will move on to look in the parent class that this class inherits from.\u003c/p\u003e","exportId":"gcc450da5158ed8df7c8142ffce2ab189"},{"id":203782,"title":"Object Inheritance Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-inheritance-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-inheritance-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-inheritance-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-inheritance-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine classes that inherit from a shared parent, or super, class. \u003c/li\u003e\n\u003cli\u003eDefine methods unique to those classes. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be working with a school domain model. Our application has users that are either teachers or students. Teachers and students will share certain attributes and have certain behaviors that are unique to them. You'll be defining a \u003ccode\u003eUser\u003c/code\u003e class that both students and teachers inherit from and you'll be writing methods within both the \u003ccode\u003eTeacher\u003c/code\u003e and \u003ccode\u003eStudent\u003c/code\u003e class that are unique to that class. \u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eRun the test suite to get started. This is a test-driven lab. \u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine the \u003ccode\u003eUser\u003c/code\u003e class such that a user can have a first and last name. You'll need both a setter and a getter for first and last name. \u003c/li\u003e\n\u003cli\u003eWe've given you a barebones \u003ccode\u003eTeacher\u003c/code\u003e class in \u003ccode\u003elib/teacher.rb\u003c/code\u003e. Change the class definition so that the \u003ccode\u003eTeacher\u003c/code\u003e class inherits from the \u003ccode\u003eUser\u003c/code\u003e class. Run the test suite and notice that you are passing some tests for the \u003ccode\u003eTeacher\u003c/code\u003e class, even without writing any code inside that class. That is because it will inherit the \u003ccode\u003e#first_name\u003c/code\u003e and \u003ccode\u003e#last_name\u003c/code\u003e methods from the \u003ccode\u003eUser\u003c/code\u003e class you told it to inherit from. \u003c/li\u003e\n\u003cli\u003eWe've given you a class constant \u003ccode\u003eKNOWLEDGE\u003c/code\u003e, that points to an array of knowledge strings. Write a method, \u003ccode\u003e#teach\u003c/code\u003e that returns a random element from that array. You might want to look up the \u003ccode\u003eArray#sample\u003c/code\u003e method. \u003c/li\u003e\n\u003cli\u003eWe've given you a barebones \u003ccode\u003eStudent\u003c/code\u003e class. Change the class definition so that it inherits from the \u003ccode\u003eUser\u003c/code\u003e class. Run the test suite and notice that you are passing some tests for the \u003ccode\u003eStudent\u003c/code\u003e class, even without writing any code inside that class. That is because it will inherit the \u003ccode\u003e#first_name\u003c/code\u003e and \u003ccode\u003e#last_name\u003c/code\u003e methods from the \u003ccode\u003eUser\u003c/code\u003e class you told it to inherit from. \u003c/li\u003e\n\u003cli\u003eIndividual students should initialize with an instance variable, \u003ccode\u003e@knowledge\u003c/code\u003e, that points to an empty array. \u003c/li\u003e\n\u003cli\u003eDefine a method, \u003ccode\u003e#learn\u003c/code\u003e, that takes in a string and adds that string to the student's \u003ccode\u003e@knowledge\u003c/code\u003e array. \u003c/li\u003e\n\u003cli\u003eDefine a method, \u003ccode\u003e#knowledge\u003c/code\u003e, that returns that student's knowledge array. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eBonus\u003c/h3\u003e\n\n\u003cp\u003eWe've set up an executable file for you in \u003ccode\u003ebin/time_for_school\u003c/code\u003e. Check out the code there and run the file with \u003ccode\u003eruby bin/time_for_school\u003c/code\u003e in your terminal. Get a feel for how the code we wrote works and what methods are available to our student and teacher instances thanks to inheritance. \u003c/p\u003e\n\n\u003cp\u003ePlay around with it a bit more by trying out the following in this file:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWe have a new user, Jim, who is just here to audit a few classes. He is neither a teacher nor a student. Create a local variable, \u003ccode\u003ejim\u003c/code\u003e, and point it equal to an instance of the \u003ccode\u003eUser\u003c/code\u003e class. Then, give \u003ccode\u003ejim\u003c/code\u003e a first and last name. What happens when you try to call \u003ccode\u003e#learn\u003c/code\u003e on \u003ccode\u003ejim\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003eContinue to operate on our student, \u003ccode\u003esteve\u003c/code\u003e. Have \u003ccode\u003eavi\u003c/code\u003e teach him some more important knowledge. \u003c/li\u003e\n\u003cli\u003eCreate a new student and have that student learn a few things from \u003ccode\u003eavi\u003c/code\u003e as well. \u003c/li\u003e\n\u003cli\u003eThen, \u003ccode\u003eputs\u003c/code\u003e out the existing knowledge of each student. \u003c/li\u003e\n\u003c/ul\u003e","exportId":"g909af181218dd41a55dcdf158bd1c4b6"},{"id":203783,"title":"Modules","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-modules\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn about modules — another way to lend functionality across classes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we discussed the concept of inheritance. We learned that through subclasses, a certain class under a super class, the subclass has access to all of the methods of its parent. Inheriting one class from another makes sense. The subclass can be understood as a child or subordinate of the super class. For example, a car is a type of vehicle, so it makes sense for the \u003ccode\u003eCar\u003c/code\u003e class to \u003cem\u003einherit\u003c/em\u003e from the \u003ccode\u003eVehicle\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eLet's think about a slightly different type of example, one that is less hierarchical. We could easily envision writing an app that models the environment of a dance performance. Such an app might have a \u003ccode\u003eDancer\u003c/code\u003e class. Dancers, we know, perform dances. Similarly, we could imagine a little girl going to see the Nutcracker ballet one Christmas, coming home and wanting to practice all of the ballet moves from the show. So, we might write a \u003ccode\u003eKid\u003c/code\u003e class in which an instance of that class, our little girl who has gone to see the ballet, should have access to all those ballet moves (her performance skill notwithstanding). This situation is not hierarchical, like our \u003ccode\u003eCar\u003c/code\u003e and \u003ccode\u003eVehicle\u003c/code\u003e example. Instead, \u003ccode\u003eKid\u003c/code\u003e and \u003ccode\u003eDancer\u003c/code\u003e simply need to share some functionality, without being related in any other meaningful way.\u003c/p\u003e\n\n\u003cp\u003eThis is where modules come in. Modules allow us to collect and bundle a group of methods and make those methods available to any number of classes. In this exercise, we'll be defining a \u003ccode\u003eDance\u003c/code\u003e module and making it available to both the \u003ccode\u003eDancer\u003c/code\u003e and \u003ccode\u003eKid\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch2\u003eCode Along I: Including Module Methods as Instance Methods\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eThis is a code along exercise. Fork and clone this repo by clicking the Github link at the top of the page. Follow along with the walk-through below to get your code working. Get the tests to pass.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003eStep I: Defining Our Module\u003c/h3\u003e\n\n\u003cp\u003eWe'll code our \u003ccode\u003eDance\u003c/code\u003e module inside the \u003ccode\u003elib/dance_module.rb\u003c/code\u003e file. Open up that file and define your module with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Dance\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's give our \u003ccode\u003eDance\u003c/code\u003e module some fabulous moves:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Dance\u003cbr\u003e  def twirl\u003cbr\u003e    \"I'm twirling!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def jump\u003cbr\u003e    \"Look how high I'm jumping!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def pirouette\u003cbr\u003e    \"I'm doing a pirouette\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def take_a_bow\u003cbr\u003e    \"Thank you, thank you. It was a pleasure to dance for you all.\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, now we'll define our \u003ccode\u003eKid\u003c/code\u003e class and tell it to \u003cem\u003einclude\u003c/em\u003e the capabilities of the \u003ccode\u003eDance\u003c/code\u003e module.\u003c/p\u003e\n\n\u003ch3\u003eStep 2: Defining the Classes\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/kid.rb\u003c/code\u003e and define your \u003ccode\u003eKid\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Kid\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's do the same for the \u003ccode\u003eDancer\u003c/code\u003e class in \u003ccode\u003elib/dancer.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dancer\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we're ready to include our module in our classes:\u003c/p\u003e\n\n\u003ch3\u003eStep 3: Including the Module\u003c/h3\u003e\n\n\u003cp\u003eTo lend our two classes all of the methods of the \u003ccode\u003eDance\u003c/code\u003e module, we use the \u003ccode\u003einclude\u003c/code\u003e keyword:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Kid\u003cbr\u003e  include Dance\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dancer\u003cbr\u003e  include Dance\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we use the \u003ccode\u003einclude\u003c/code\u003e keyword, we allow our classes to use all of the methods of the included module as \u003cem\u003einstance\u003c/em\u003e methods. We'll talk about how to lend a module's methods as \u003cem\u003eclass\u003c/em\u003e methods in a minute.\u003c/p\u003e\n\n\u003cp\u003eNow that we've included the module, open up \u003ccode\u003ebin/dance_party\u003c/code\u003e and get familiar with following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative \"../lib/kid.rb\"\u003cbr\u003erequire_relative \"../lib/dancer.rb\"\u003cbr\u003e\u003cbr\u003eangelina = Kid.new(\"Angelina\")\u003cbr\u003emikhail_baryshnikov = Dancer.new(\"Mikhail\")\u003cbr\u003e\u003cbr\u003eputs \"#{angelina.name} says: #{angelina.twirl}\"\u003cbr\u003eputs \"#{mikhail_baryshnikov.name} says: #{mikhail_baryshnikov.take_a_bow}\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, run the file by typing \u003ccode\u003eruby bin/dance_party\u003c/code\u003e and you should see the following output in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAngelina says: I'm twirling!\u003cbr\u003eMikhail says: Thank you, thank you. It was a pleasure to dance for you all.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCode Along II: Extending Module Methods as Class Methods\u003c/h2\u003e\n\n\u003cp\u003eIn order to lend a module's methods to a class as \u003cem\u003eclass methods\u003c/em\u003e, we use the \u003ccode\u003eextend\u003c/code\u003e keyword. Let's write yet another module that we can extend into our classes as class methods. For the purposes of this example, let's create a shareable class method, \u003ccode\u003emetadata\u003c/code\u003e, which will report on some pertinent (shared) information regarding both classes.\u003c/p\u003e\n\n\u003cp\u003eOpen up the \u003ccode\u003elib/class_methods_module.rb\u003c/code\u003e and define the following module and methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule MetaDancing\u003cbr\u003e\u003cbr\u003e  def metadata\u003cbr\u003e    \"This class produces objects that love to dance.\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's \u003ccode\u003eextend\u003c/code\u003e this module into both the \u003ccode\u003eKid\u003c/code\u003e and \u003ccode\u003eDancer\u003c/code\u003e classes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dancer\u003cbr\u003e  extend MetaDancing\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Kid\u003cbr\u003e  extend MetaDancing\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, open up the bin/extending file and familiarize yourself with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative \"../lib/kid.rb\"\u003cbr\u003erequire_relative \"../lib/dancer.rb\"\u003cbr\u003e\u003cbr\u003eputs Kid.metadata\u003cbr\u003eputs Dancer.metadata\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the file with \u003ccode\u003eruby bin/extending\u003c/code\u003e and you should see the following output in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThis class produces objects that love to dance.\u003cbr\u003eThis class produces objects that love to dance.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the tests to make sure some of your tests are passing.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Run the \u003ccode\u003elearn test\u003c/code\u003e command to pass all the local tests for this lab. We will be altering the methods where these tests will no longer be valid.\u003c/p\u003e\n\n\u003ch2\u003eCode Along III: Nested Modules\u003c/h2\u003e\n\n\u003cp\u003eIn the first code along, we built a module called \u003ccode\u003eDance\u003c/code\u003e, which contained methods that we intended to be used as instances methods in the \u003ccode\u003eDancer\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eIn the second code along, we built the module \u003ccode\u003eMetaDancing\u003c/code\u003e, whose methods were intended to be used as class methods in the \u003ccode\u003eKid\u003c/code\u003e and \u003ccode\u003eDancer\u003c/code\u003e classes.\u003c/p\u003e\n\n\u003cp\u003eThere are two drawbacks to this approach. First, if another developer looks at your modules, there is absolutely no way to determine how those methods are intended to be used. Are they class methods? Are they instance methods? Nobody knows!\u003c/p\u003e\n\n\u003cp\u003eSecondly, we had to build two separate modules that contained methods that were all related to the same functionality (dancing). But because there was no way to designate class methods versus instance methods, we were forced to define two separate modules, which violates the single responsibility principle. Wouldn't it be great if there was a way to define one module and specify which methods were intended as class methods and which methods as instance methods.\u003c/p\u003e\n\n\u003cp\u003eGuess what?? There is!! We're going to refactor the two modules into one, and use nested module namespacing to clarify our code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule FancyDance\u003cbr\u003e  module InstanceMethods\u003cbr\u003e\u003cbr\u003e    def twirl\u003cbr\u003e      \"I'm twirling!\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def jump\u003cbr\u003e      \"Look how high I'm jumping!\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def pirouette\u003cbr\u003e      \"I'm doing a pirouette\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def take_a_bow\u003cbr\u003e      \"Thank you, thank you. It was a pleasure to dance for you all.\"\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  module ClassMethods\u003cbr\u003e\u003cbr\u003e    def metadata\u003cbr\u003e      \"This class produces objects that love to dance.\"\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFirst, we define our \u003ccode\u003eFancyDance\u003c/code\u003e module. Then, inside the \u003ccode\u003eFancyDance\u003c/code\u003e module, we define a second module, \u003ccode\u003eInstanceMethods\u003c/code\u003e. Inside the \u003ccode\u003eInstanceMethods\u003c/code\u003e module, we place all our methods that we intend to be used as instance methods (\u003ccode\u003etwirl\u003c/code\u003e, \u003ccode\u003ejump\u003c/code\u003e, \u003ccode\u003epirouette\u003c/code\u003e, \u003ccode\u003etake_a_bow\u003c/code\u003e). Next, we define a second nested module (nested inside of \u003ccode\u003eFancyDance\u003c/code\u003e) called \u003ccode\u003eClassMethods\u003c/code\u003e. Inside, we place the \u003ccode\u003emetadata\u003c/code\u003e method, which we intend to be used as a class method.\u003c/p\u003e\n\n\u003cp\u003eSo how do we use these nested modules?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dancer\u003cbr\u003e  extend FancyDance::ClassMethods\u003cbr\u003e  include FancyDance::InstanceMethods\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Kid\u003cbr\u003e  extend FancyDance::ClassMethods\u003cbr\u003e  include FancyDance::InstanceMethods\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote: remember to require the \u003ccode\u003efancy_dance.rb\u003c/code\u003e file inside the \u003ccode\u003edancer.rb\u003c/code\u003e and \u003ccode\u003ekid.rb\u003c/code\u003e, just like we did with our other file requirements.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eWe refer to the name-spaced modules or classes with \u003ccode\u003e::\u003c/code\u003e. This syntax references the parent and child relationship of the nested modules.\u003c/p\u003e\n\n\u003cp\u003eRemember, \u003ccode\u003einclude\u003c/code\u003e is used to add functionality to our classes via instance methods. The \u003ccode\u003eInstanceMethods\u003c/code\u003e module inside the \u003ccode\u003eFancyDance\u003c/code\u003e module contains the methods \u003ccode\u003etwirl\u003c/code\u003e, \u003ccode\u003ejump\u003c/code\u003e, \u003ccode\u003epirouette\u003c/code\u003e, and \u003ccode\u003etake_a_bow\u003c/code\u003e, which any instance of the \u003ccode\u003eDancer\u003c/code\u003e or \u003ccode\u003eKid\u003c/code\u003e class can do.\u003c/p\u003e\n\n\u003cp\u003eWe can call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eangelina = Dancer.new\u003cbr\u003eangelina.twirl\u003cbr\u003e// returns \"I'm twirling!\"\u003cbr\u003eangelina.jump\u003cbr\u003e// returns \"Look how high I'm jumping!\"\u003cbr\u003e\u003cbr\u003ebuster = Kid.new\u003cbr\u003ebuster.jump\u003cbr\u003e// returns \"Look how high I'm jumping!\"\u003cbr\u003ebuster.take_a_bow\u003cbr\u003e// returns \"Thank you, thank you. It was a pleasure to dance for you all.\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause we \u003cem\u003eincluded\u003c/em\u003e the \u003ccode\u003eFancyDance::InstanceMethods\u003c/code\u003e nested module, we can call those instance methods on instances of our classes.\u003c/p\u003e\n\n\u003cp\u003eAnd \u003ccode\u003eextend\u003c/code\u003e is used to add functionality to our classes via class methods. We can now call the \u003ccode\u003emetadata\u003c/code\u003e class method on the \u003ccode\u003eDancer\u003c/code\u003e and \u003ccode\u003eKid\u003c/code\u003e classes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDancer.metadata\u003cbr\u003e// returns \"This class produces objects that love to dance.\"\u003cbr\u003eKid.metadata\u003cbr\u003e// returns \"This class produces objects that love to dance.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003e\n\u003ccode\u003e::\u003c/code\u003e versus \u003ccode\u003e\u0026lt;\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eInheritance using the \u003ccode\u003e\u0026lt;\u003c/code\u003e syntax, implies that a class is a type of something. A \u003ccode\u003eBMW\u003c/code\u003e class should inherit from a \u003ccode\u003eCar\u003c/code\u003e class because a BMW is a type of car: \u003ccode\u003eclass BMW \u0026lt; Car\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut what about the \u003ccode\u003e::\u003c/code\u003e that we're using for our modules? The \u003ccode\u003e::\u003c/code\u003e syntax just denotes a name-space. Doing \u003ccode\u003eBMW::Car\u003c/code\u003e just gives the \u003ccode\u003eBMW\u003c/code\u003e class access to all constants, instance methods, etc, without stating that a BMW is a type of car. The \u003ccode\u003e::\u003c/code\u003e syntax carries all public items over to the inheriting class or module.\u003c/p\u003e\n\n\u003cp\u003eThat's it! Now that we are familiar with several methods of sharing code between classes, you're ready to move on to the next few labs.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIf you have a module whose methods you would like to be used in another class as \u003cstrong\u003einstance methods\u003c/strong\u003e, then you must \u003cstrong\u003einclude\u003c/strong\u003e the module.\u003c/p\u003e\n\n\u003cp\u003eIf you want a module's methods to be used in another class as \u003cstrong\u003eclass methods\u003c/strong\u003e, you must \u003cstrong\u003eextend\u003c/strong\u003e the module.\u003c/p\u003e","exportId":"ge717ea6bed452b2d6395db896c3048cb"},{"id":203784,"title":"Modules Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-modules-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRecognize \"code smells\" that indicate the need for refactoring.\u003c/li\u003e\n\u003cli\u003eUse modules to refactor away repetitious code.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we have an \u003ccode\u003eArtist\u003c/code\u003e class and a \u003ccode\u003eSong\u003c/code\u003e class. \u003ccode\u003eArtist\u003c/code\u003es have many\nsongs and an individual instance of the \u003ccode\u003eSong\u003c/code\u003e class belongs to an artist.\n\u003ccode\u003eArtist\u003c/code\u003es and \u003ccode\u003eSong\u003c/code\u003es also have some familiar class methods that keep track of\nall of the instances of the class, count those instances and clear or reset\nthem.\u003c/p\u003e\n\n\u003cp\u003eOpen up the \u003ccode\u003elib\u003c/code\u003e directory and spend some time reviewing the code in\n\u003ccode\u003eartist.rb\u003c/code\u003e and \u003ccode\u003esong.rb\u003c/code\u003e. Keep reading the code until you feel you understand\nwhat each method is doing.\u003c/p\u003e\n\n\u003cp\u003eNotice that there are behaviors that are shared between both of these classes.\nFor example, both classes have \u003ccode\u003e.count\u003c/code\u003e and \u003ccode\u003ereset_all\u003c/code\u003e class methods.\nConsequently, both classes have \u003cem\u003ethe same exact code\u003c/em\u003e. As programmers, you may\nrecall, we are lazy. We don't like to repeat ourselves. We like to keep it DRY\n(Don't Repeat Yourself). In this lab, we'll be identifying repetition and\nbuilding modules to extract it out. Then, we'll use the \u003ccode\u003eextend\u003c/code\u003e and \u003ccode\u003einclude\u003c/code\u003e\nkeywords to lend the functionality of our modules to our \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e\nclasses.\u003c/p\u003e\n\n\u003ch2\u003eConfiguring our Environment\u003c/h2\u003e\n\n\u003cp\u003eInstead of requiring individual files within one another, as you may have\nnoticed we did in the previous two code along exercises, we created an\nenvironment file to handle those requirements for us. Because the\n\u003ccode\u003eenvironment.rb\u003c/code\u003e file is read and loaded into memory in line order, if \u003ccode\u003eArtist\u003c/code\u003e\nrequires \u003ccode\u003eMemorable\u003c/code\u003e, then Artist must be required \u003cstrong\u003eafter\u003c/strong\u003e requiring\n\u003ccode\u003eMemorable\u003c/code\u003e. \u003ccode\u003eMemorable\u003c/code\u003e must be loaded first, so that as Ruby when loads\n\u003ccode\u003eArtist\u003c/code\u003e, \u003ccode\u003eMemorable::ClassInstances\u003c/code\u003e is already defined. Our \u003ccode\u003espec_helper\u003c/code\u003e\nfile, which is required by each individual spec file, required \u003cem\u003eonly this\n\u003ccode\u003econfig/environment.rb\u003c/code\u003e file\u003c/em\u003e, instead of each and every file from the \u003ccode\u003elib\u003c/code\u003e\ndirectory. As we start to build larger and more complex programs, it begins to\nmake sense to handle all of our requirements in one place.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eA Note on Refactoring Practices\u003c/h3\u003e\n\n\u003cp\u003eWe use TDD (test-driven development) for a reason. We write tests to define the\ndesired behavior of our program so that we can write clean, beautiful code.\nSuch code usually \u003cem\u003eisn't\u003c/em\u003e the code you write the first time around. The code\nyou first write is the code that makes your program \u003cem\u003ework\u003c/em\u003e, the code that gets\nthose tests passing. Then, we refactor our code to make it clean, DRY, and easy\nto understand. This is where our tests come in. We write thorough tests that\ncover all of the aspects of our code's desired behavior. We can \u003cem\u003efirst\u003c/em\u003e write\ncode that passes those tests and \u003cem\u003ethen\u003c/em\u003e break our code, fail our tests, write\nbetter code and pass our tests again.\u003c/p\u003e\n\n\u003cp\u003eThis is called the \u003cstrong\u003ered, green, refactor\u003c/strong\u003e pattern. First tests fail, then you\nwrite bad code to get them to pass, \u003cem\u003ethen\u003c/em\u003e you refactor that bad code into good\ncode. In this lab, you'll start by running the test suite. You'll see that all\nof the tests pass. Then, we'll break that code in order to refactor it, write\nbetter code and get our tests passing again. Remember, don't be afraid of\nbroken code! Broken code is the status quo in programming. Your job is often to\nbreak something to make it better. Embrace broken code.\u003c/p\u003e\n\n\u003ch3\u003eStep 1: Class Methods\u003c/h3\u003e\n\n\u003cp\u003eFirst, run the test suite. Wow, we're passing all of our tests! Okay, now let\ngo of those passing tests because we are about to break our code.\u003c/p\u003e\n\n\u003cp\u003eThe first area of refactoring we'll be attacking are the class methods. Notice\nthat both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class have \u003ccode\u003e.count\u003c/code\u003e and \u003ccode\u003ereset_all\u003c/code\u003e class\nmethods. Instead of repeating the same exact code in both classes, let's\nextract these class methods into a module that we can \u003cem\u003eextend\u003c/em\u003e into the\nclasses.\u003c/p\u003e\n\n\u003cp\u003eReady to break your code? Comment out the \u003ccode\u003ereset_all\u003c/code\u003e and \u003ccode\u003ecount\u003c/code\u003e methods in\nthe \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class. Run your test suite. Phew! Okay, we did it. That\nwasn't so bad, was it?\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003eMemorable\u003c/code\u003e Module\u003c/h4\u003e\n\n\u003cp\u003eLet's define our module. Create a \u003ccode\u003econcerns\u003c/code\u003e folder inside \u003ccode\u003elib\u003c/code\u003e. This is where\nwe'll store our modules. It is a common practice to create a folder called\n\u003ccode\u003econcerns\u003c/code\u003e that holds modules that will be used across classes in an object\noriented Ruby project.\u003c/p\u003e\n\n\u003cp\u003eInside the \u003ccode\u003econcerns\u003c/code\u003e folder, create a file called \u003ccode\u003ememorable.rb\u003c/code\u003e. Open up that\nfile and define a module:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Memorable\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInside here, define your \u003ccode\u003ereset_all\u003c/code\u003e and \u003ccode\u003ecount\u003c/code\u003e methods.\u003c/p\u003e\n\n\u003cp\u003eImportant! Remember to add \u003ccode\u003erequire_relative '../lib/concerns/memorable'\u003c/code\u003e to\nyour environment file before running any tests. We've already provided that\nline for you in fact! All you have to do is un-comment it out. :)\u003c/p\u003e\n\n\u003cp\u003eOnce you define the two class methods mentioned above inside of the \u003ccode\u003eMemorable\u003c/code\u003e\nmodule, use the \u003ccode\u003eextend\u003c/code\u003e keyword to extend those methods, as class methods,\ninto both the \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e class. Refer to the previous code along\nexercise for help. Remember that the \u003ccode\u003eself\u003c/code\u003e keyword is omitted when defining\nclass methods inside modules. The \u003ccode\u003eextend\u003c/code\u003e keyword is responsible for defining\nthe method as a class method vs. an instance method (which would use the\n\u003ccode\u003einclude\u003c/code\u003e keyword).\u003c/p\u003e\n\n\u003cp\u003eNow you're ready to run your test suite again. Get all those tests back to\npassing before you move on. Once your tests are passing, make sure you delete\nthe commented-out \u003ccode\u003ereset_all\u003c/code\u003e and \u003ccode\u003ecount\u003c/code\u003e class methods from your \u003ccode\u003eSong\u003c/code\u003e and\n\u003ccode\u003eArtist\u003c/code\u003e class. You don't need them anymore.\u003c/p\u003e\n\n\u003ch4\u003eAdvanced: The \u003ccode\u003efind_by_name\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eBefore we build the module to house this method, let's talk a bit about it. In\nan upcoming unit, we'll be introducing databases. You'll learn how to connect\nyour Ruby programs to a database and use that database to store\ninformation––even Ruby objects! Moving forward through this course, you'll be\nbuilding web applications that are connected to databases that store users'\ninformation and the information pertinent to the app. Let's think about a\ncommon example:\u003c/p\u003e\n\n\u003cp\u003eLet's say you're working on an app that serves as an online store, connecting\nusers to everything from books to movies to shoes to stereo equipment, you name\nit. We'll call this app \"Nile\" (definitely not inspired by another online\nmarket-place named after a famous river). Such an application needs to store\nthe items it has for sale as well as the information of the user who logs in to\ngo shopping. Consequently, every time a user logs in, or searches for an item,\nor purchases an item, we have to \u003cem\u003eretrieve information from a database\u003c/em\u003e. One of\nthe most common ways you'll be doing that is to use methods like \u003ccode\u003efind_by_name\u003c/code\u003e\nor \u003ccode\u003efind_by_email\u003c/code\u003e or \u003ccode\u003efind_by_product_id\u003c/code\u003e or...you get the idea. We'll be\nlearning much, much more about this later. Here, we're building a simple\n\u003ccode\u003efind_by_name\u003c/code\u003e method that introspects on a class's \u003ccode\u003e.all\u003c/code\u003e class method and\nextracts the instance of the class with a certain name.\u003c/p\u003e\n\n\u003cp\u003eOkay, back to your regularly scheduled programming:\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003eFindable\u003c/code\u003e Module\u003c/h4\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/concerns\u003c/code\u003e, create a file, \u003ccode\u003efindable.rb\u003c/code\u003e. In this file, define a module:\n\u003ccode\u003eFindable\u003c/code\u003e. This module should define the method, \u003ccode\u003efind_by_name\u003c/code\u003e. This method\nwill be used as a class method. Something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.find_by_name(\"Adele\")\u003cbr\u003e#=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExtract the code from the \u003ccode\u003efind_by_name\u003c/code\u003e methods that you'll see in the\n\u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e classes and place it inside the \u003ccode\u003eFindable\u003c/code\u003e module's\n\u003ccode\u003efind_by_name\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eRemember that we need to keep the content of this method abstract. So, inside\nthe \u003ccode\u003eArtist\u003c/code\u003e class, a \u003ccode\u003efind_by_name\u003c/code\u003e method might look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e\u003cbr\u003e  @@artists = []\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@artists\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    @@artists.detect {|a| a.name == name}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInside the \u003ccode\u003eFindable.find_by_name\u003c/code\u003e method, we can't use a class-specific class\nvariable like \u003ccode\u003e@@artists\u003c/code\u003e, because our method would break when included in any\nclass that \u003cem\u003edidn't\u003c/em\u003e define such a variable.\u003c/p\u003e\n\n\u003cp\u003eIs there a way to reference the collection of \u003cem\u003eall\u003c/em\u003e of the instances of a\nclass, without specifically referencing class variables that are only defined\nin certain classes?\u003c/p\u003e\n\n\u003ch3\u003eStep 2: Instance Methods\u003c/h3\u003e\n\n\u003cp\u003eLet's go back to our \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class and take a look at another\nexample of repetition, this time with instance methods. The \u003ccode\u003eto_param\u003c/code\u003e instance\nmethod is repeated in the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class. Another great candidate\nfor refactoring!\u003c/p\u003e\n\n\u003cp\u003eGo ahead and comment out the \u003ccode\u003eto_param\u003c/code\u003e method in both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e\nclass. Run your test suite again and see those broken tests!\u003c/p\u003e\n\n\u003cp\u003eOkay, now we're ready to define our module.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003eParamable\u003c/code\u003e Module\u003c/h4\u003e\n\n\u003cp\u003eCreate a new file in your \u003ccode\u003econcerns\u003c/code\u003e directory called \u003ccode\u003eparamable.rb\u003c/code\u003e. Define\nyour module here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Paramable\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBuild the \u003ccode\u003eto_param\u003c/code\u003e method inside your module and use the \u003ccode\u003einclude\u003c/code\u003e keyword to\ninclude the \u003ccode\u003eParamable\u003c/code\u003e module in both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class. Once you\nget your tests passing again, go ahead and delete the commented-out \u003ccode\u003eto_param\u003c/code\u003e\nmethod from the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e classes.\u003c/p\u003e\n\n\u003cp\u003eImportant! Remember to add \u003ccode\u003erequire_relative '../lib/concerns/paramable'\u003c/code\u003e to\nyour environment file before running any tests. We've already provided that\nline for you in fact! All you have to do is un-comment it out. :)\u003c/p\u003e\n\n\u003ch4\u003eAdvanced: The \u003ccode\u003eto_param\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eTo understand the concept of a parameter, let's take a look at an example URL:\n\u003ca href=\"http://www.facebook.com/your-name\"\u003ewww.facebook.com/your-name\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \"your-name\" part of the above URL might be referred to as a slug. Another\nterm for this section of a URL is \"parameter\" or \"param\". One common task\nyou'll undertake as a web developer is to take a Ruby object, such as an\ninstance of a \u003ccode\u003eUser\u003c/code\u003e class, and make a URL out of it. For example, let's say we\nhave a database full of instances of a \u003ccode\u003eUser\u003c/code\u003e class. When an individual user\nsigns in to our app, we might want to show them their very own profile page. To\ndo so, we would have to write a method that takes their name and turns it into\na slug or parameter that could be tacked onto a URL.\u003c/p\u003e\n\n\u003cp\u003eDon't worry too much about this use-case for now. We'll be learning much, much\nmore about connecting our Ruby programs to the web later on. For now, just\nunderstand the general purpose of having a method like the \u003ccode\u003eto_param\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch3\u003eBonus: Refactoring the \u003ccode\u003e.initialize\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003ch4\u003eRecognizing Repetition\u003c/h4\u003e\n\n\u003cp\u003eLet's take a look at the \u003ccode\u003e.initialize\u003c/code\u003e methods of both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class:\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003elib/song.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003e def initialize\u003cbr\u003e    @@songs \u0026lt;\u0026lt; self\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003elib/artist.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef initialize\u003cbr\u003e    @@artists \u0026lt;\u0026lt; self\u003cbr\u003e    @songs = []\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee the repetition? Both methods push the instance on which they are being\ncalled, i.e. \u003ccode\u003eself\u003c/code\u003e into an array stored inside a class variable.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003esong.rb\u003c/code\u003e we have:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e@@songs \u0026lt;\u0026lt; self\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003eartist.rb\u003c/code\u003e we have:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e@@artists \u0026lt;\u0026lt; self\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis is pretty similar, although not exactly the same. However, it is\nrepetitious enough to be giving off a code smell. In order to refactor it,\nhowever, we first have to get rid of any code that is specific to the class. In\nthis case, we need to abstract away the literal reference to the \u003ccode\u003e@@songs\u003c/code\u003e and\n\u003ccode\u003e@@artists\u003c/code\u003e class variables.\u003c/p\u003e\n\n\u003ch4\u003eAbstracting Away Repetition\u003c/h4\u003e\n\n\u003cp\u003eLucky for us, we already have class methods that wrap these class variables:\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003elib/song.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003e def self.all\u003cbr\u003e    @@songs\u003cbr\u003e end\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003elib/artist.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef self.all\u003cbr\u003e    @@artists\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's begin by refactoring the content of both \u003ccode\u003e.initialize\u003c/code\u003e methods to use the\n\u003ccode\u003e\u0026lt;ClassName\u0026gt;.all\u003c/code\u003e class method instead of literal class variables. How can we\nprogrammatically access the class of the instance that we are operating on\ninside the \u003ccode\u003e.initialize\u003c/code\u003e method? Take a look below:\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003elib/song.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef initialize\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003elib/artist.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef initialize\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e    @songs = []\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember that \u003ccode\u003e.initialize\u003c/code\u003e is an instance method. So, inside \u003ccode\u003e.initialize\u003c/code\u003e,\n\u003ccode\u003eself\u003c/code\u003e refers to the instance of the class on which you are operating. But\n\u003ccode\u003e.all\u003c/code\u003e is a class method. We would normally call it like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eArtist.all\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eor\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eSong.all\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eSo, to call the \u003ccode\u003e.all\u003c/code\u003e class method from \u003cem\u003einside the \u003ccode\u003e.initialize\u003c/code\u003e instance\nmethod\u003c/em\u003e, we can call \u003ccode\u003eself.class\u003c/code\u003e inside \u003ccode\u003e.initialize\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTake a quick look at this reminder of how \u003ccode\u003e.class\u003c/code\u003e works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew_song = Song.new\u003cbr\u003enew_song.class\u003cbr\u003e =\u0026gt; Song\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, we can call \u003ccode\u003eself.class.all\u003c/code\u003e inside \u003ccode\u003e.initialize\u003c/code\u003e and it will be just as if\nwe called \u003ccode\u003eSong.all\u003c/code\u003e or \u003ccode\u003eArtist.all\u003c/code\u003e. Only this way, our code is abstract. It\ndoesn't explicitly reference \u003ccode\u003eSong\u003c/code\u003e or \u003ccode\u003eArtist\u003c/code\u003e class, so it is more flexible.\u003c/p\u003e\n\n\u003cp\u003eNow we have two \u003ccode\u003e.initialize\u003c/code\u003e methods that contain identical lines of code.\nWe're ready for the next refactoring step––modules.\u003c/p\u003e\n\n\u003ch4\u003eExtracting Repetition\u003c/h4\u003e\n\n\u003cp\u003eBefore we build a brand new module to house this code from our \u003ccode\u003e.initialize\u003c/code\u003e\nmethods, let's stop and think. What is the responsibility or the behavior of\nthe code we are trying to extract? This is code that is responsible for telling\na class to keep track of its own instances. This code really goes hand in hand\nwith the \u003ccode\u003e.count\u003c/code\u003e and \u003ccode\u003e.reset_all\u003c/code\u003e class methods that we already extracted into\nthe \u003ccode\u003eMemorable\u003c/code\u003e module. It makes sense, therefore, to extract this code into\nthat same module.\u003c/p\u003e\n\n\u003cp\u003eBut wait (you might be thinking), isn't that module \u003cstrong\u003eextended\u003c/strong\u003e into our\n\u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class in order to offer its methods as \u003cstrong\u003eclass\u003c/strong\u003e methods?\nIsn't \u003ccode\u003e.initialize\u003c/code\u003e an instance method? How can we put class methods and\ninstance methods in the same module? Read on to learn the answer...\u003c/p\u003e\n\n\u003ch4\u003eNesting Modules\u003c/h4\u003e\n\n\u003cp\u003eWe can nest sets of modules within one another and then \u003ccode\u003einclude\u003c/code\u003e or \u003ccode\u003eextend\u003c/code\u003e\nindividual modules as needed. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Memorable\u003cbr\u003e  module ClassMethods\u003cbr\u003e    def reset_all\u003cbr\u003e      self.all.clear\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def count\u003cbr\u003e      self.all.count\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  module InstanceMethods\u003cbr\u003e    def initialize\u003cbr\u003e      # some more code coming soon!\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, in order to \u003ccode\u003einclude\u003c/code\u003e or \u003ccode\u003eextend\u003c/code\u003e as needed, we use the \u003ccode\u003einclude\u003c/code\u003e or\n\u003ccode\u003eextend\u003c/code\u003e keyword in the following manner:\u003c/p\u003e\n\n\u003cp\u003eIn both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e classes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eextend Memorable::ClassMethods\u003cbr\u003einclude Memorable::InstanceMethods\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eParent::Child\u003c/code\u003e syntax is called \u003cstrong\u003enamespacing\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eOkay, we're almost done. We need to fill out the content of the \u003ccode\u003e.initialize\u003c/code\u003e\nmethod in the module.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.initialize\u003c/code\u003e methods in our \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e classes share the\nfollowing line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef initialize\u003cbr\u003e  self.class.all \u0026lt;\u0026lt; self\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the code that will go into the new \u003ccode\u003e.initialize\u003c/code\u003e method of our module:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Memorable\u003cbr\u003e  module ClassMethods\u003cbr\u003e    def reset_all\u003cbr\u003e      self.all.clear\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def count\u003cbr\u003e      self.all.count\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  module InstanceMethods\u003cbr\u003e    def initialize\u003cbr\u003e      self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere's just one more step. Look back at the original \u003ccode\u003e.initialize\u003c/code\u003e method of the \u003ccode\u003eArtist\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e    @songs = []\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the \u003ccode\u003eArtist\u003c/code\u003e class, the initialize method is \u003cem\u003ealso\u003c/em\u003e responsible for setting\nthe \u003ccode\u003e@songs\u003c/code\u003e instance variable equal to an empty array. We need to hang on to\nthis behavior, even as \u003ccode\u003eArtist\u003c/code\u003e instances grab the \u003cem\u003erest\u003c/em\u003e of the \u003ccode\u003e.initialize\u003c/code\u003e\nfrom the \u003ccode\u003eMemorable::InstanceMethods\u003c/code\u003e module.\u003c/p\u003e\n\n\u003cp\u003eRemember our \u003ccode\u003esuper\u003c/code\u003e keyword from the inheritance code along exercise? The\n\u003ccode\u003esuper\u003c/code\u003e keyword, placed inside a method, will tell that method to look up its\nbehavior in the method of the same name that lives in the parent, or super,\nclass. A method that includes the \u003ccode\u003esuper\u003c/code\u003e keyword will execute any code placed\ninside the super class' method of the same name, and then execute any code\ninside the child class' method.\u003c/p\u003e\n\n\u003cp\u003eWhen we \u003ccode\u003einclude\u003c/code\u003e a module in a class, we are really telling that class to\n\u003cem\u003einherit\u003c/em\u003e methods from that module.\u003c/p\u003e\n\n\u003cp\u003eSo, we can use the \u003ccode\u003esuper\u003c/code\u003e keyword to tell our \u003ccode\u003eArtist\u003c/code\u003e's \u003ccode\u003e.initialize\u003c/code\u003e method\nto use the code in the \u003ccode\u003eMemorable::InstanceMethods\u003c/code\u003e module's \u003ccode\u003e.initialize\u003c/code\u003e\nmethod \u003cem\u003eand\u003c/em\u003e also to use any additional code in the \u003ccode\u003eArtist\u003c/code\u003e's \u003ccode\u003e.initialize\u003c/code\u003e\nmethod. Take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    super\u003cbr\u003e    @songs = []\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003ePhew! That was some complex stuff. It's okay if you didn't understand\neverything covered in this lab. There were a few advanced and bonus sections\nthat we threw in there to challenge you and make you think. Don't skip over\nthem, even if you can't follow everything they discuss. It's important to plant\nthe seed of some of these more complex topics––it will make them easier to\nunderstand later on when you're ready to go deeper into Ruby programming.\u003c/p\u003e","exportId":"gbee882060f8ee61c394256165204bbad"},{"id":203785,"title":"Super","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-super\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've seen the benefits of using inheritance to create a group of classes that share certain characteristics and behaviors. However, up until now, the implementation of shared characteristics has been somewhat rigid. If class \u003ccode\u003eStudent\u003c/code\u003e inherits from class \u003ccode\u003eUser\u003c/code\u003e, we can choose to either allow the \u003ccode\u003eStudent\u003c/code\u003e class to inherit a certain method from \u003ccode\u003eUser\u003c/code\u003e or overwrite that method with another implementation that is specific to \u003ccode\u003eStudent\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eBut what if there is a method in the parent class that we want our child to share \u003cem\u003esome\u003c/em\u003e of the functionality of? Or what if we want our child class to inherit a method from the parent and then augment it in some way? We can achieve this with the use of the \u003ccode\u003esuper\u003c/code\u003e keyword. \u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003esuper\u003c/code\u003e to supercharge inheritance\u003c/h2\u003e\n\n\u003cp\u003eLet's say we are working on an education app in which users are either students or teachers. We have a parent, \u003ccode\u003eUser\u003c/code\u003e class, that both our \u003ccode\u003eStudent\u003c/code\u003e and \u003ccode\u003eTeacher\u003c/code\u003e classes inherit from. \u003c/p\u003e\n\n\u003cp\u003eOur \u003ccode\u003eUser\u003c/code\u003e class has a method, \u003ccode\u003elog_in\u003c/code\u003e, that sets an instance variable, \u003ccode\u003e@logged_in\u003c/code\u003e equal to \u003ccode\u003etrue\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e\u003cbr\u003e  def log_in\u003cbr\u003e    @logged_in = true\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, when a student logs into our app, we need to not only set their logged in attribute to \u003ccode\u003etrue\u003c/code\u003e, we need to set their \"in class\" attribute to true. We could simply edit the \u003ccode\u003e#log_in\u003c/code\u003e method in the \u003ccode\u003eUser\u003c/code\u003e class to account for this. But that doesn't make sense here. Remember that both \u003ccode\u003eStudent\u003c/code\u003e and \u003ccode\u003eTeacher\u003c/code\u003e inherit from \u003ccode\u003eUser\u003c/code\u003e. Teachers don't need to indicate that they are \"in class\", so we don't want to alter the \u003ccode\u003e#log_in\u003c/code\u003e method of our parent class and inadvertently give teachers some behavior that they don't want or need. \u003c/p\u003e\n\n\u003cp\u003eInstead, we can augment, or supercharge, the \u003ccode\u003e#log_in\u003c/code\u003e method \u003cem\u003einside\u003c/em\u003e of the \u003ccode\u003eStudent\u003c/code\u003e class. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Student \u0026lt; User\u003cbr\u003e  def log_in\u003cbr\u003e    super\u003cbr\u003e    @in_class = true\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we re-define the \u003ccode\u003e#log_in\u003c/code\u003e method and tell it to inherit any functionality of the \u003ccode\u003e#log_in\u003c/code\u003e method defined in the parent, or \"super\", class, which is \u003ccode\u003eUser\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003e#log_in\u003c/code\u003e method above, the \u003ccode\u003esuper\u003c/code\u003e keyword will call on the \u003ccode\u003e#log_in\u003c/code\u003e method as defined in the super class. \u003cem\u003eThen\u003c/em\u003e, the additional code that we're adding into our \u003ccode\u003eStudent#log_in\u003c/code\u003e method will also run. We have therefore supercharged our \u003ccode\u003e#log_in\u003c/code\u003e method, for the \u003ccode\u003eStudent\u003c/code\u003e class only. \u003c/p\u003e","exportId":"super"},{"id":203786,"title":"Super Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-super-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine two classes, one of which inherits from another. \u003c/li\u003e\n\u003cli\u003eDefine methods in the child class that use the \u003ccode\u003esuper\u003c/code\u003e keyword to inherit from and augment methods in the parent class. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be coding a \u003ccode\u003eStudent\u003c/code\u003e class, which will be the parent class, and a \u003ccode\u003eChattyStudent\u003c/code\u003e class, which will inherit from student. \u003ccode\u003eChattyStudent\u003c/code\u003e \u003cem\u003eis\u003c/em\u003e a student, so should have all of the behaviors and characteristics of a student. But, \u003ccode\u003eChattyStudent\u003c/code\u003e is \u003cem\u003every chatty\u003c/em\u003e. So, he or she will elaborate on any phrases that are inherited from \u003ccode\u003eStudent\u003c/code\u003e. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eStudent\u003c/code\u003e class, \u003ccode\u003e#hello\u003c/code\u003e, that \u003ccode\u003eputs\u003c/code\u003e out the phrase: \u003ccode\u003e\"Hey there! I'm so excited to learn stuff.\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eStudent\u003c/code\u003e class, \u003ccode\u003eraise_hand\u003c/code\u003e, that \u003ccode\u003eputs\u003c/code\u003e out the phrase: \u003ccode\u003e\"Pick me!\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eChattyStudent\u003c/code\u003e class, \u003ccode\u003e#hello\u003c/code\u003e, that uses the \u003ccode\u003esuper\u003c/code\u003e keyword to inherit the behavior of the \u003ccode\u003e#hello\u003c/code\u003e method from the parent, \u003ccode\u003eStudent\u003c/code\u003e, class. Then, augment that method to also \u003ccode\u003eputs\u003c/code\u003e out the very chatty phrase: \u003ccode\u003e\"How are you doing today? I'm okay, but I'm kind of tired. Did you watch The Walking Dead last night? You didn't?! Oh man, it was so crazy! What, you don't want any spoilers? Okay well let me just tell you who died...\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eChattyStudent\u003c/code\u003e class, \u003ccode\u003eraise_hand\u003c/code\u003e, that uses the \u003ccode\u003esuper\u003c/code\u003e keyword ten times so that the method will \u003ccode\u003eputs\u003c/code\u003e out \u003ccode\u003e\"Pick me!\"\u003c/code\u003e ten times. \u003cstrong\u003eIt is possible to simply call \u003ccode\u003esuper\u003c/code\u003e multiple times in a method\u003c/strong\u003e. \u003c/li\u003e\n\u003c/ul\u003e","exportId":"ga4c59e062cab55ae71c495f5d1fb5039"},{"id":203787,"title":"Object Inheritance Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eInheritance is a common concept in our everyday lives, and, over the last\nseveral lessons, we saw how Ruby implements it: by creating a family of classes\nwith shared behavior while still differentiating those classes. Because of\ninheritance, we can define basic Ruby classes with large reusability and smaller\nsubclasses for more detailed behaviors. We can also take advantage of\ninheritance by coding multiple, non-repetitve methods that cut down on the total\namount of code we need while also cleaning and optimizing the code we do need.\nWe also looked at how we can use the \u003ccode\u003esuper\u003c/code\u003e keyword to inherit from and extend\nmethods in the parent class.\u003c/p\u003e\n\n\u003cp\u003eYou'll encounter inheritance in nearly every program you write.\u003c/p\u003e","exportId":"object-inheritance-conclusion"}]},{"id":21895,"name":"Bonus: Regex","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g07b9c0e809d5bf35326775da8c8d2ffe","items":[{"id":203788,"title":"What is a Pattern?","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"regex-what-is-a-pattern\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/regex-what-is-a-pattern/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/regex-what-is-a-pattern\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/regex-what-is-a-pattern/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand the purpose of patterns and regular expressions (\"RegEx\").\u003c/li\u003e\n\u003cli\u003eLearn a bit about the history of RegEx.\u003c/li\u003e\n\u003cli\u003eUnderstand that the version of RegEx we use is but one of many implementations.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSay you're working at your new job as a developer and your supervisor asks you to build in validation for the email field in the company's signup form. There have recently been a lot of sign-ups with invalid email addresses (e.g., \"joeflatiron.com\", \"@helloworld.com\", and \"$%!\u003ca href=\"mailto:-adam@gmail.com\"\u003e-adam@gmail.com\u003c/a\u003e\"). First, you sit down and come up with a set of rules that any email address should adhere to (stop reading and see how many you can come up with):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNumbers, letters, dashes, and underscores are ok.\u003c/li\u003e\n\u003cli\u003eUppercase and lowercase letters are ok.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e%\u003c/code\u003e, \u003ccode\u003e?\u003c/code\u003e, \u003ccode\u003e$\u003c/code\u003e, \u003ccode\u003e!\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e are not valid characters.\u003c/li\u003e\n\u003cli\u003eThere must be an \u003ccode\u003e@\u003c/code\u003e separating the local part from the domain part.\u003c/li\u003e\n\u003cli\u003eThere must be at least one period in the domain part (e.g., gmail.com).\u003c/li\u003e\n\u003cli\u003eTwo periods in a row (\u003ccode\u003e..\u003c/code\u003e) are not allowed.\u003c/li\u003e\n\u003cli\u003eThe local (first) part of the email cannot start with a period.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe now have a \u003cstrong\u003epattern\u003c/strong\u003e that we know all email addresses must follow. We use regular expressions to encode these patterns for matching, searching, and substitution. Here's a sample RegEx for email validation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}/i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf this doesn't make any sense, don't worry. We'll be covering how to write and read regular expressions shortly.\u003c/p\u003e\n\n\u003cp\u003e(There are actually a \u003ca href=\"https://en.wikipedia.org/wiki/Email_address#Domain_part\"\u003eLOT more rules\u003c/a\u003e for email addresses, but you get the point.)\u003c/p\u003e\n\n\u003ch2\u003eAbout RegEx\u003c/h2\u003e\n\n\u003ch3\u003eHistory\u003c/h3\u003e\n\n\u003cp\u003eRegEx came about in the 1950's and 1960's in various forms. Among the first appearances of regular expressions in program form was when Ken Thompson built \u003ca href=\"https://en.wikipedia.org/wiki/Stephen_Cole_Kleene\"\u003eStephen Cole Kleene\u003c/a\u003e's notation into the editor QED as a means to match patterns in text files. Since then, there have been various implementations of regular expressions developed. We'll be using Ruby regular expressions, an implementation mostly based off the PERL language.\u003c/p\u003e\n\n\u003ch3\u003eWhen to use RegEx\u003c/h3\u003e\n\n\u003cp\u003eRegular expressions are an extremely powerful way to search through strings and blocks of text for specific patterns. They can be used for data validation, searching, mass file renaming, and finding records in a database. Use them carefully. They are like a surgeon's scalpel: able to do a lot of harm or good, depending on how skillfully they are wielded.\u003c/p\u003e","exportId":"what-is-a-pattern"},{"id":203789,"title":"Regex Basics","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"regex-basics-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/regex-basics-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/regex-basics-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/regex-basics-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the range [a-z] as well as the specific character [abc] matchers\u003c/li\u003e\n\u003cli\u003einterpolate required letter with the ranges/patterns. /[hH]ello/\u003c/li\u003e\n\u003cli\u003eUse backslash special characters like \\w\u003c/li\u003e\n\u003cli\u003eUse backslash as escape\u003c/li\u003e\n\u003cli\u003eUse star, dot, and plus\u003c/li\u003e\n\u003cli\u003eUse rubular.com\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we're going to learn the syntax and basic vocabulary of regular expressions. We'll start simple and build from there. A great place to head for RegEx testing and practice is \u003ca href=\"http://rubular.com/\"\u003eRubular\u003c/a\u003e - it allows you to build and test regular expressions against text that you define. In a separate window, open up Rubular. In the text box entitled \"Your Test String\", paste in the following monologue from Shakespeare's \u003cem\u003eThe Merchant of Venice\u003c/em\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf to do were as easy as to know what were good to do, chapels had been churches and poor men's cottages princes' palaces. It is a good divine that follows his own instructions: I can easier teach twenty what were good to be done, than be one of the twenty to follow mine own teaching. The brain may devise laws for the blood, but a hot temper leaps o'er a cold decree: such a hare is madness the youth, to skip o'er the meshes of good counsel the cripple. But this reasoning is not in the fashion to choose me a husband. O me, the word 'choose!' I may neither choose whom I would nor refuse whom I dislike; so is the will of a living daughter curbed by the will of a dead father. Is it not hard, Nerissa, that I cannot choose one nor refuse none?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe've set this up in \u003ca href=\"http://rubular.com/r/s2jizA9W9V\"\u003eRubular for you here\u003c/a\u003e. Your window should look like this:\n\u003cimg src=\"http://curriculum-content.s3.amazonaws.com/web-development/Regex/rubular_setup.png\" alt=\"rubular setup\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eWriting Regular Expressions\u003c/h2\u003e\n\n\u003cp\u003eIn Ruby, regular expressions are generally written between forward slashes: \u003ccode\u003e/your regex/\u003c/code\u003e. This is the 'literal' alternative to creating a regular expression object using the following syntax: \u003ccode\u003eRegexp.new('your regex')\u003c/code\u003e. In Rubular, you can see that these slashes have already been written for you.\u003c/p\u003e\n\n\u003ch3\u003eSimple Text Matching\u003c/h3\u003e\n\n\u003cp\u003eLet's start with the simplest text matching. Add the following RegEx in rubular:\n\u003ccode\u003e\n/twenty/\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/Regex/twenty.png\" alt=\"twenty regex\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNotice that the pattern matches the two instances of \"twenty\" in the passage. Writing a series of letters or numbers in your regular expression will result in a search for exact matches of this pattern anywhere in the string. \u003c/p\u003e\n\n\u003ch3\u003eMetacharacters\u003c/h3\u003e\n\n\u003cp\u003eThe real beauty of regular expressions is revealed in its use of metacharacters. Metacharacters allow you to use a pre-defined shorthand to match specific characters. For example, \u003ccode\u003e\\d\u003c/code\u003e will match any digit in your text, and \u003ccode\u003e\\w\u003c/code\u003e will match any word character (letters, numbers, and underscores). The 'RegEx Quick Reference' at the bottom of Rubular shows metacharacters and patterns that you can use. Play around with these a little. Use \u003ccode\u003e\\W\u003c/code\u003e (notice uppercasing) to match the non-word characters in your text.\u003c/p\u003e\n\n\u003ch3\u003eOnly specific characters\u003c/h3\u003e\n\n\u003cp\u003eIf I want to match all instances of vowels in a string, the RegEx \u003ccode\u003e/aeiou/\u003c/code\u003e won't work (feel free to try it), as it will only match the entire string \"aeiou\" - which clearly isn't in our text. Instead let's use square brackets: \u003ccode\u003e/[aeiou]/\u003c/code\u003e - this is looking for only \u003cstrong\u003eone single\u003c/strong\u003e character in our text which matches any of the characters inside the square brackets. If you add this RegEx to our rubular, you'll see every vowel highlighted in your match result.\u003c/p\u003e\n\n\u003ch3\u003eRanges\u003c/h3\u003e\n\n\u003cp\u003eBased on what we've just learned, we can write a regular expression looking for single characters in the first 10 letters of the alphabet like so:\u003ccode\u003e/[abcdefghij]/\u003c/code\u003e\nWe can actually shorten this in Ruby using a RegEx range:\u003ccode\u003e/[a-j]/\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e[0123456789]\u003c/code\u003e becomes \u003ccode\u003e[0-9]\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eExample: Double Vowels\u003c/h3\u003e\n\n\u003cp\u003eThere are many other metacharacters and ways of building patterns in RegEx, many of which you can refer in the Rubular quick reference guide. However, the best way to actually learn to use regular expressions is to practice building your own patterns. Let's look for instances in our text of two consecutive vowels (for example, 'ae', 'ie', 'oo', etc). The longest way to do this is to hand code the different combinations of two vowels:\u003ccode\u003e/aa|oo|ee|ii|uu|ae|ea|ou|ie|ei|eo|oe/\u003c/code\u003e. It's pretty tedious to hand code each of these combinations (I didn't finish). An improvement is to use two sets of square brackets with vowels, each one representing a single character: \u003ccode\u003e/[aeiou][aeiou]/\u003c/code\u003e. Our most efficient, however, is to use repetitions: \u003ccode\u003e/[aeiou]{2}/\u003c/code\u003e The curly braces surrounding mean that the pattern or character directly preceding it must repeat that number of times. As such, we're looking for a repeat of a vowel two times. As you can see, there are many ways to write a regular expression that does the same thing. \u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://rubular.com/\"\u003eRubular\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://regexone.com/\"\u003eRegEx One\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://regex.alf.nu/\"\u003eRegEx Golf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.regexr.com/\"\u003eRegExr\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"regex-basics"}]},{"id":21896,"name":"Metaprogramming in Ruby","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g9d71e9095553a3ddc80c3c777642ef1c","items":[{"id":203792,"title":"Introduction to Metaprogramming in Ruby","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eRuby has impressive \u003cem\u003emetaprogramming\u003c/em\u003e capabilities. A traditional program is\nmainly code that manipulates a data structure and produces output, but\nmetaprogramming allows us to essentially write code that writes code.\nMetaprogramming with Ruby, one can do in a few minutes what other languages may\ntake hours to do. By cleverly planning your code and applying the techniques\nmentioned here, you’ll be able to write code that is DRYer, lighter, more\nintuitive and more scalable.\u003c/p\u003e\n\n\u003cp\u003eIn this section we'll be discussing and working through some metaprogramming\nconcepts such as:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMass assignment\u003c/li\u003e\n\u003cli\u003eKeyword arguments\u003c/li\u003e\n\u003cli\u003eCreating custom errors and using them\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRuby's metaprogramming features offer a lot of functionality. You could, in\ntheory, write everything from scratch yourself, but doing that is very\ninefficient. In this section of lessons and labs, we'll reveal how\nmetaprogramming makes sense, and is very needed in many situations.\u003c/p\u003e","exportId":"introduction-to-metaprogramming-in-ruby"},{"id":203793,"title":"Keyword Arguments","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-keyword-arguments-and-mass-assignment\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-keyword-arguments-and-mass-assignment/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-keyword-arguments-and-mass-assignment\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-keyword-arguments-and-mass-assignment/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine keyword arguments and learn why they are useful.\u003c/li\u003e\n\u003cli\u003eDefine mass assignment and learn why it is useful.\u003c/li\u003e\n\u003cli\u003ePractice using keyword arguments and mass assignment.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eAt this point, we're very familiar with the fact that methods can be defined to\ntake in arguments. We also know that methods can be defined to take in\n\u003cem\u003emultiple\u003c/em\u003e arguments. Let's take a look at an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef print_name_and_greeting(greeting, name)\u003cbr\u003e  puts \"#{greeting}, #{name}\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprint_name_and_greeting(\"'sup\", \"Hillary Clinton\")\u003cbr\u003e'sup, Hillary Clinton\u003cbr\u003e=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs it currently stands, whoever uses our method needs to remember exactly what\norder to pass in the arguments. They need to know that the first argument is\ngreeting and the second argument is a name. What happens if they forget? What\nhappens if another developer who is working on our code base \u003cem\u003edoesn't\u003c/em\u003e see the\nfile where the method is defined, but only sees the method being invoked? Maybe\nit's not clear to them which argument is which––after all, when you invoke\nmethods, the arguments aren't labeled or anything. Let's take a look at what\ntype of disaster would befall us:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprint_name_and_greeting(\"Kanye\", \"hello\")\u003cbr\u003eKanye, hello\u003cbr\u003e=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat would be a weird way to greet Kanye. Let's take a look at another example,\nthis time using arguments of two different data types:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef happy_birthday(name, current_age)\u003cbr\u003e  puts \"Happy Birthday, #{name}\"\u003cbr\u003e  current_age += 1\u003cbr\u003e  puts \"You are now #{current_age} years old\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ehappy_birthday(\"Beyonce\", 31)\u003cbr\u003eHappy Birthday, Beyonce\u003cbr\u003eYou are now 32 years old\u003cbr\u003e=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut what happens if we accidentally pass the arguments in in the wrong order?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehappy_birthday(31, \"Beyonce\")\u003cbr\u003eHappy Birthday, 31\u003cbr\u003eTypeError: no implicit conversion of Fixnum into String\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOh no! We broke our program! Clearly, we have a need to regulate the passing in\nof multiple arguments. It would be especially helpful if we could \u003cem\u003ename\u003c/em\u003e the\narguments that we pass in, \u003cem\u003ewhen we invoke the method\u003c/em\u003e. Guess what? We can!\n(Okay, you probably saw that one coming.)\u003c/p\u003e\n\n\u003ch2\u003eKeyword Arguments\u003c/h2\u003e\n\n\u003cp\u003eKeyword arguments are a special way of passing arguments into a method. They\nbehave like hashes, pairing a key that functions as the argument name, with its\nvalue. Let's walk through it together and refactor our \u003ccode\u003ehappy_birthday\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef happy_birthday(name: \"Beyonce\", current_age: 31)\u003cbr\u003e  puts \"Happy Birthday, #{name}\"\u003cbr\u003e  current_age += 1\u003cbr\u003e  puts \"You are now #{current_age} years old\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've defined our method to take in keyword arguments. Our keyword\narguments consist of two key/value pairs, \u003ccode\u003e:name\u003c/code\u003e and \u003ccode\u003e:current_age\u003c/code\u003e. We've\ngiven our keyword arguments default values of \u003ccode\u003e\"Beyonce\"\u003c/code\u003e and \u003ccode\u003e31\u003c/code\u003e, but we\ndidn't have to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef happy_birthday(name:, current_age:)\u003cbr\u003e  puts \"Happy Birthday, #{name}\"\u003cbr\u003e  current_age += 1\u003cbr\u003e  puts \"You are now #{current_age} years old\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we can reference \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ecurrent_age\u003c/code\u003e inside our method body, as\nif they were barewords, \u003cem\u003eeven though they are the keys in our argument hash\u003c/em\u003e.\nThat's how keyword arguments work, they allow you to \u003cem\u003ename\u003c/em\u003e the arguments that\nyou pass in as keys in a hash. Then, the method body can use the values of those\nkeys, referenced by their name. Let's call our method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehappy_birthday(current_age: 31, name: \"Carmelo Anthony\")\u003cbr\u003eHappy Birthday, Carmelo Anthony\u003cbr\u003eYou are now 32 years old\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that even though we changed the order of our key/value pairs, our method\ndidn't break! Not only is this method more robust (i.e. more resistant to\nbreakage) than the previous one, it is also more explicit. Anyone looking at its\ninvocation can tell exactly what kind of data you are passing in.\u003c/p\u003e\n\n\u003ch3\u003eMass Assignment\u003c/h3\u003e\n\n\u003cp\u003eAnother benefit of using keyword arguments is the ability to \"mass assign\"\nattributes to an object. Let's revisit our \u003ccode\u003ePerson\u003c/code\u003e class from an earlier\nlesson. We'd like to initialize individual people with a name and an age:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age\u003cbr\u003e\u003cbr\u003e  def initialize(name, age)\u003cbr\u003e    @name = name\u003cbr\u003e    @age = age\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs it stands, our initialize method is vulnerable to the same issues we\ndiscussed above. Let's refactor it to take in a person's attributes as keyword\narguments:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age\u003cbr\u003e\u003cbr\u003e  def initialize(name:, age:)\u003cbr\u003e    @name = name\u003cbr\u003e    @age = age\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we have the added benefit of being able to use something called \u003cstrong\u003emass\nassignment\u003c/strong\u003e to instantiate new people objects. If a method is defined to accept\nkeyword arguments, we can create the hash that the method is expecting to accept\nas an argument, set that hash equal to a variable, and simply pass that variable\nin to the method as an argument. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson_attributes = {name: \"Sophie\", age: 26}\u003cbr\u003esophie = Person.new(person_attributes)\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis might not seem particularly useful now, but when we start building web\napplications, we'll understand more about how necessary this trick really is.\nFor now, just take our word for it.\u003c/p\u003e","exportId":"keyword-arguments"},{"id":203794,"title":"Mass Assignment and Class Initialization","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-mass-assignment-and-class-initialization\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-and-class-initialization/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-and-class-initialization\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-and-class-initialization/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand how to use mass assignment to metaprogram a Ruby class.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou might recall that metaprogramming is the practice of writing code that writes code for us. So, what does that have to do with mass assignment? We've learned that we can write a Ruby program that sends a web request to an API and returns particular data to the program.\u003c/p\u003e\n\n\u003cp\u003eLet's say we want to use the Twitter API to create users for our own application. The scenario is that we are developing a web application and we want our users to be able to sign in via Twitter. Thus, our own users are pulled from Twitter and we need to take the data we get from Twitter—for example a user's name, age and location—and use them to make instances of our own User class. Let's take a look at a code snippet:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e  attr_accessor :name, :age, :location, :user_name\u003cbr\u003e\u003cbr\u003e  def initialize(user_name:, name:, age:, location:)\u003cbr\u003e    @user_name = user_name\u003cbr\u003e    @name = name\u003cbr\u003e    @location = location\u003cbr\u003e    @age = age\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have our user class. It initializes with keyword arguments, i.e., a hash of attributes. For the purposes of this example, we won't get into the specifics of how we request and receive data from the Twitter API. Suffice to say that we send a request to the Twitter API and get a return value of a hash full of user attributes. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etwitter_user = {name: \"Sophie\", user_name: \"sm_debenedetto\", age: 26, location: \"NY, NY\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith what we've learned of mass assignment so far, we can use the \u003ccode\u003etwitter_user\u003c/code\u003e hash to instantiate a new instance of our own User class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie = User.new(twitter_user)\u003cbr\u003e =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo far so good. But, what if Twitter changes their API without telling us? (How could they? Don't they know who we are?) After all, we are not in charge of Twitter or their API, they can do whatever they want, whenever they want, with no regard to our application which relies on their data. Let's say Twitter makes a change that we're unaware of. Now when we request data from their API, we get this return value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew_twitter_user = twitter_user = {name: \"Sophie\", user_name: \"sm_debenedetto\", location: \"NY, NY\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the \u003ccode\u003etwitter_user\u003c/code\u003e no longer has an age.  Let's see what happens if we try to create new Users using the same old User class code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUser.new(new_twitter_user)\u003cbr\u003e=\u0026gt;ArgumentError: missing keyword: age\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur program broke! Let's play it with another scenario. Let's say the Twitter API changed and now returns data to us in the following manner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enewest_twitter_user = {name: \"Sophie\", user_name: \"sm_debenedetto\", age: 26, location: \"NY, NY\", bio: \"I'm a programmer living in NY!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's see what happens when we try to make a new instance of our User class with the same old User class code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUser.new(newest_twitter_user)\u003cbr\u003e=\u0026gt; ArgumentError: unknown keyword: bio\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur program breaks! Clearly, we need a way to \u003cem\u003eabstract away\u003c/em\u003e our User class' dependency on specific attributes. If only there were a way for us to tell our User to get ready to accept some unspecified number and type of attributes.\u003c/p\u003e\n\n\u003ch2\u003eMass Assignment and Metaprogramming\u003c/h2\u003e\n\n\u003cp\u003eGuess what? We can achieve exactly that goal using metaprogramming and mass assignment. Let's take a look at how it's done, then we'll break it down together. Here's our new and improved User class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e  attr_accessor :name, :user_name, :age, :location, :bio\u003cbr\u003e\u003cbr\u003e  def initialize(attributes)\u003cbr\u003e    attributes.each {|key, value| self.send((\"#{key}=\"), value)}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe define our initialize method to take in some unspecified \u003ccode\u003eattributes\u003c/code\u003e object. Then, we iterate over each key/value pair in the attributes hash. The name of the key becomes the name of a setter method and the value associated with the key is the name of the value you want to pass to that method. The ruby \u003ccode\u003e.send\u003c/code\u003e method then calls the method name that is the key’s name, with an argument of the value. In other words:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eself.send(key=, value)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIs the same as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstance_of_user.key = value\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhere each key/value pair is a member of our hash, one such iteration might read:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\u003cbr\u003einstance_of_user.name = \"Sophie\"\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd have the same result as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstance_of_user = User.new\u003cbr\u003einstance_of_user.name = \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eA Closer Look at \u003ccode\u003e.send\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.send\u003c/code\u003e method is just another way of calling a method on an object. For example, we know that instances of the User class have a \u003ccode\u003e.name=\u003c/code\u003e method that allows us to set the name of a user to a particular string:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie = User.new\u003cbr\u003esophie.name = \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, when we use the \u003ccode\u003e.name\u003c/code\u003e getter method, it will return the correct name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie.name\u003cbr\u003e  =\u0026gt; \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's look at the same behavior using \u003ccode\u003e.send\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie = User.new\u003cbr\u003esophie.send(\"name=\", \"Sophie\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat is generally considered to be clunky and ugly. It's whats known as \"syntactic vinegar\". We prefer the \"syntactic sugar\" of the first approach.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.send\u003c/code\u003e method, however, is a very useful tool for our metaprogramming purposes. It allows us to abstract away the specific method call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie = User.new\u003cbr\u003esophie.send(\"#{method_name}=\", value)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is exactly what's happening in our initialize method in the example above, where \u003ccode\u003eself\u003c/code\u003e refers to the User instance that is being initialized at that point in time.\u003c/p\u003e\n\n\u003ch2\u003eTaking things further: dynamically setting getters and setters\u003c/h2\u003e\n\n\u003cp\u003eLet's say we didn't want to specify the individual getter and setter methods using named symbols like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e  # we don't want to do this anymore :(\u003cbr\u003e  attr_accessor :name, :user_name, :age, :location, :bio\u003cbr\u003e\u003cbr\u003e  def initialize(attributes)\u003cbr\u003e    attributes.each {|key, value| self.send((\"#{key}=\"), value)}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstead we want to dynamically set those methods so that we have a getter and setter automatically declared for every attribute in the \u003ccode\u003eattributes\u003c/code\u003e Hash. How could we do this?\u003c/p\u003e\n\n\u003cp\u003eFirst, we need to remember that \u003ccode\u003eattr_accessor\u003c/code\u003e is a class method just like \u003ccode\u003eattr_reader\u003c/code\u003e and \u003ccode\u003eattr_writer\u003c/code\u003e. This means we can dynamically add getters or setters, or both, by doing the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e  def initialize(attributes)\u003cbr\u003e    attributes.each do |key, value| \u003cbr\u003e      self.class.attr_accessor(key)\u003cbr\u003e      self.send((\"#{key}=\"), value)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy making that one small change, we can now get and set every attribute on an object instantiated from \u003ccode\u003eUser\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eWhy is this useful?\u003c/h2\u003e\n\n\u003cp\u003eWith this pattern, we have made our code much more flexible. We can easily alter the number of attributes in the class and change the hash that we initialize the class with, \u003cem\u003ewithout editing our initialize method.\u003c/em\u003e Now, we're programming for the future. Our initialize method is flexible and we can leave it alone. That is one major goal of design in object oriented programming––the writing of code that accommodates future change and doesn't require a lot of modification, even as it grows.\u003c/p\u003e","exportId":"mass-assignment-and-class-initialization"},{"id":203795,"title":"Mass Assignment Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-mass-assignment-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse keyword arguments to define an initialize method.\u003c/li\u003e\n\u003cli\u003eUse mass assignment to metaprogram an initialize method. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a Person class that accepts a hash upon initialization. The keys of the hash should conform to the attributes below: \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eallowable properties: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e:name, :birthday, :hair_color, :eye_color, :height, \u003cbr\u003e:weight, :handed, :complexion, :t_shirt_size, \u003cbr\u003e:wrist_size, :glove_size, :pant_length, :pant_width\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eEach key in the attributes hash will become a property of an initialized Person instance. So, you should make an \u003ccode\u003eattr_accessor\u003c/code\u003e for each of the above properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eex:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebob_attributes = {name: \"Bob\", hair_color: \"Brown\"}\u003cbr\u003e\u003cbr\u003ebob = Person.new(bob_attributes)\u003cbr\u003ebob.name       # =\u0026gt; \"Bob\"\u003cbr\u003ebob.hair_color # =\u0026gt; \"Brown\"\u003cbr\u003e\u003cbr\u003esusan_attributes = {name: \"Susan\", height: \"5'11\\\"\", eye_color: \"Green\"}\u003cbr\u003e\u003cbr\u003esusan = Person.new(susan_attributes)\u003cbr\u003esusan.name      # =\u0026gt; \"Susan\"\u003cbr\u003esusan.height    # =\u0026gt; \"5'11\"\"\u003cbr\u003esusan.eye_color # =\u0026gt; \"Green\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eYour initialize method should use iteration and the \u003ccode\u003e.send\u003c/code\u003e method to mass assign the value of each key/value pair to its associated key (i.e. method). Refer to the previous reading to help you solve this one.\u003c/li\u003e\n\u003c/ul\u003e","exportId":"ga2e35dcb61ac20d009b3bacbd094b983"},{"id":203798,"title":"Metaprogramming Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFrom the last few labs, we can see Ruby's metaprogramming capabilities. \nMetaprogramming allows for efficiency, which will be needed as we scale\nup to building larger applications.\u003c/p\u003e\n\n\u003cp\u003eWe discussed concepts such as: \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow mass assignment works\u003c/li\u003e\n\u003cli\u003eCreating custom errors\u003c/li\u003e\n\u003cli\u003eUsing Ruby's metaprogramming features\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith this technique, we're able to write code that is DRYer, lighter,\nmore intuitive and more scalable. Although other languages can do this,\nwe can save a lot more time using Ruby.\u003c/p\u003e","exportId":"metaprogramming-conclusion"}]},{"id":21897,"name":"Configuring Ruby Applications","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gf8a80b36aa803fb875172231a7bffc81","items":[{"id":203799,"title":"Introduction to Configuring Ruby Applications","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-building-applications-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe have a number of outside resources we leverage in working with our Ruby\napplications. For example, RSpec is a Ruby-specific library, or \u003cem\u003egem\u003c/em\u003e. We\nleverage this testing tool for behavior-driven testing. As we start to build out\nmore complex applications, it's standard to utilize libraries and other\nconventions for setting up Ruby applications. This will not only save time, but\nwill also offer a common template, that becomes familiar to Ruby developers.\u003c/p\u003e\n\n\u003cp\u003eWe'll cover topics including:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat is bundler?\u003c/li\u003e\n\u003cli\u003eWhat is a gem?\u003c/li\u003e\n\u003cli\u003eHow do gems work?\u003c/li\u003e\n\u003cli\u003eWhat is require?\u003c/li\u003e\n\u003cli\u003eWhy do we use require_relative?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next couple of lessons, we'll explain these tools and concepts that have\nbeen designed for efficiency.\u003c/p\u003e","exportId":"introduction-to-configuring-ruby-applications"},{"id":203800,"title":"Requiring Files","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-building-applications-requiring-files\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-requiring-files/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-requiring-files\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-requiring-files/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize how code on different files can be loaded when running a single file\u003c/li\u003e\n\u003cli\u003eUnderstand how to require files when running a Ruby application\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, most of the labs we've seen have a similar file structure — they\ntypically have a \u003ccode\u003elib\u003c/code\u003e folder and a \u003ccode\u003espec\u003c/code\u003e folder and some files like\n\u003ccode\u003eREADME.md\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── lib\u003cbr\u003e│   └── ruby_file.rb\u003cbr\u003e└── spec\u003cbr\u003e    ├── ruby_file_spec.rb\u003cbr\u003e    └── spec_helper.rb\u003cbr\u003e├── Gemfile\u003cbr\u003e├── README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs we expand our understanding of programming in Ruby and start to work with\nlarger, more complex applications, we'll start to see more pieces and components\nbeing added — run files and environment files to start. Then, we'll start\nseeing things like database folders and before long, we'll see many files in\nmany folders, all doing their small part for the application.\u003c/p\u003e\n\n\u003cp\u003eWith all these files separated out into different folders, how is it that they\nare able to work together? In this lesson, we're going to provide an answer to\nthis question and take a deeper look at requiring files.\u003c/p\u003e\n\n\u003ch2\u003eClasses Defined in the Same File\u003c/h2\u003e\n\n\u003cp\u003eLet's take a look at a pair of example classes to get started. If we define two\nclasses in the same file, we can interact with both classes immediately after\nthey are defined. Consider the following 'belongs-to' / 'has-many' association\nbetween \u003ccode\u003eGarden\u003c/code\u003e and \u003ccode\u003ePlant\u003c/code\u003e classes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Garden\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name:)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def plants\u003cbr\u003e    Plant.all.select do |plant|\u003cbr\u003e      plant.garden == self\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eclass Plant\u003cbr\u003e  attr_accessor :garden, :name\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name:)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003elawn = Garden.new(name: 'Front Lawn') # we can call Garden.new because Garden is defined above\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil') # we can call Plant.new because Plant is defined above\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn # we can associate a plant and a garden because both are defined above\u003cbr\u003e\u003cbr\u003ep lawn.plants\u003cbr\u003e# =\u0026gt; [#\u0026gt;, #\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: This code is available in \u003ccode\u003elib/example.rb\u003c/code\u003e and can be tested by running \u003ccode\u003eruby lib/example.rb\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn the above code, we can call both \u003ccode\u003eGarden\u003c/code\u003e and \u003ccode\u003ePlant\u003c/code\u003e at the end because both\nclasses have been defined in the file. Notice, too, that \u003ccode\u003eGarden\u003c/code\u003e includes a\nmethod, \u003ccode\u003eplants\u003c/code\u003e, that calls \u003ccode\u003ePlant.all\u003c/code\u003e. \u003ccode\u003eGarden\u003c/code\u003e \u003cem\u003eneeds\u003c/em\u003e to know about the\n\u003ccode\u003ePlant\u003c/code\u003e class, and with the setup above, it does.\u003c/p\u003e\n\n\u003ch2\u003eClasses Defined in Different Files\u003c/h2\u003e\n\n\u003cp\u003eIf we define the example classes in separate files, they won't automatically\nknow about each other or have access to one another. In the \u003ccode\u003elib\u003c/code\u003e folder,\n\u003ccode\u003ePlant\u003c/code\u003e and \u003ccode\u003eGarden\u003c/code\u003e are separated into their own files, \u003ccode\u003eplant.rb\u003c/code\u003e and\n\u003ccode\u003egarden.rb\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── lib\u003cbr\u003e│   └── example.rb\u003cbr\u003e│   └── garden.rb\u003cbr\u003e│   └── plant.rb\u003cbr\u003e├── CONTRIBUTING.md\u003cbr\u003e├── LICENSE.md\u003cbr\u003e├── README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn \u003ccode\u003elib/garden.rb\u003c/code\u003e, below the \u003ccode\u003eGarden\u003c/code\u003e class, the same code from the previous\nexample is written:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/garden.rb\u003cbr\u003e\n...\u003cbr\u003e\u003cbr\u003elawn = Garden.new(name: 'Front Lawn')\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil')\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn\u003cbr\u003e\u003cbr\u003ep lawn.plants\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt the moment, if we try to run the file (\u003ccode\u003eruby lib/garden.rb\u003c/code\u003e), we get an error\nregarding an \u003ccode\u003euninitialized constant Plant (NameError)\u003c/code\u003e. For one file to have\naccess to code written in another file, we need to tell Ruby to \u003cem\u003erequire\u003c/em\u003e that\nother file.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003erequire_relative\u003c/code\u003e and \u003ccode\u003erequire\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBy requiring a file, we are telling Ruby, 'go load the code that exists in this\nfile.' We have two ways to tell Ruby to do this: \u003ccode\u003erequire_relative\u003c/code\u003e and\n\u003ccode\u003erequire\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003erequire_relative\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://apidock.com/ruby/Kernel/require_relative\"\u003erequire_relative\u003c/a\u003e accepts a \u003cem\u003erelative file path\u003c/em\u003e to the file we want to\nrequire. This means we're providing a file path that starts from the file in\nwhich the \u003ccode\u003erequire_relative\u003c/code\u003e statement is called.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative '../lib/ruby_file.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example above, \u003ccode\u003e..\u003c/code\u003e would mean that inside the \u003cem\u003eparent folder\u003c/em\u003e of the\n\u003cem\u003ecurrent file\u003c/em\u003e being run, there should be a \u003ccode\u003elib\u003c/code\u003e folder with a file inside it,\n\u003ccode\u003eruby_file.rb\u003c/code\u003e. When dealing with applications that have many neighboring files,\nwe'll be using \u003ccode\u003erequire_relative\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSince an application can be installed in many places on a computer, any internal\nfile requirements should be relative to each other.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003erequire\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://apidock.com/ruby/v2_5_5/Kernel/require\"\u003erequire\u003c/a\u003e accepts an \u003cem\u003eabsolute file path\u003c/em\u003e, meaning a file location relative to\nthe \u003cem\u003eroot\u003c/em\u003e directory. \u003ccode\u003erequire\u003c/code\u003e will also accept shortened names, and checks if\nany matches are found in the directories located in your shell's \u003ca href=\"http://www.linfo.org/path_env_var.html\"\u003ePATH\nvariable\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe don't often require files using their absolute path, but we will frequently\nrequire files using a shortened name. You may have already seen this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'pry'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePry is a Gem, a bundle of preexisting code that we can install on our computers.\nWhen we write \u003ccode\u003erequire 'pry'\u003c/code\u003e, we are telling Ruby to load that bundle of code\nup before continuing. Once loaded, we will have access to whatever classes and\nmodules are defined in \u003ccode\u003epry\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eRequiring \u003ccode\u003eplant.rb\u003c/code\u003e from \u003ccode\u003egarden.rb\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eNow that we know the syntax for requiring files, we can apply it to our example\nof \u003ccode\u003elib/garden.rb\u003c/code\u003e and \u003ccode\u003elib/plant.rb\u003c/code\u003e. At the top of \u003ccode\u003elib/garden.rb\u003c/code\u003e, add the\nfollowing line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative './plant.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we're indicating to Ruby that there is a file, \u003ccode\u003eplant.rb\u003c/code\u003e located in the\nsame folder relative to the current file. With this added, if you try \u003ccode\u003eruby\nlib/garden.rb\u003c/code\u003e again, you should see it print out the expected \u003ccode\u003ePlant\u003c/code\u003e\ninstances.\u003c/p\u003e\n\n\u003cp\u003eIn this example, we only have two classes, but with \u003ccode\u003erequire_relative\u003c/code\u003e, we can\nhave as many classes as we want, each in a separate file. As long as they are\nall required in the file that we run, they'll get loaded.\u003c/p\u003e\n\n\u003ch3\u003eLocal Variables\u003c/h3\u003e\n\n\u003cp\u003eIt is important to note that both \u003ccode\u003erequire\u003c/code\u003e and \u003ccode\u003erequire_relative\u003c/code\u003e will not load\nlocal variables - \u003cem\u003eonly\u003c/em\u003e functions, modules, and classes.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eRuby applications are often divided up among many files, and when an application\nruns, it typically needs a way to \u003cem\u003eload\u003c/em\u003e those various files so it has access to\nall the code.\u003c/p\u003e\n\n\u003cp\u003eYou've experienced this many times already - every time you work on a Ruby lab\nand run the tests, the files where you write your solution are being loaded into\nthe files that are running the tests. This is done through a file called\n\u003ccode\u003espec_helper.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe exact workings of RSpec and the \u003ccode\u003espec_helper.rb\u003c/code\u003e file are beyond the scope\nof this lesson, but the underlying premise is the same as what we did in this\nlesson.\u003c/p\u003e\n\n\u003cp\u003eThis is so common and so critical to Ruby applications that it became common to\ninclude a file dedicated to the task of requiring files and loading up any\nneeded code when an application is run. In the next lesson, we'll take a closer\nlook at this file, typically known as \u003ccode\u003eenvironment.rb\u003c/code\u003e.\u003c/p\u003e","exportId":"g7ba87737f6190bc5e30ae5b1a2917b08"},{"id":203801,"title":"Setting up the Application Environment","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-building-applications-setting-up-the-environment\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-setting-up-the-environment/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-setting-up-the-environment\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-setting-up-the-environment/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize common Ruby application conventions\u003c/li\u003e\n\u003cli\u003eUnderstand how to set up a bin file to run a Ruby application\u003c/li\u003e\n\u003cli\u003eUnderstand how to set up an environment file to load things when a Ruby\napplication starts\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMost Ruby applications we'll be dealing with in this course will use the command\nline. Don't be fooled though - command-line apps may seem simple and less fancy\nthan a fully developed computer program with a graphical user interface, but CLI\napps can be just as robust and powerful, if not more so.\u003c/p\u003e\n\n\u003cp\u003eFor the most part, Ruby CLI apps tend to start the same way - typing \u003ccode\u003eruby\u003c/code\u003e\nfollowed by a relative path to a Ruby file. In a complex application, though,\nwhich file should be run? In addition to this, when run, how to we ensure all\nour necessary files are required?\u003c/p\u003e\n\n\u003cp\u003eThere are two common conventions we're going to look at in this lesson that\naddress these questions: using a run file and setting up the environment in\n\u003ccode\u003eenvironment.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eUsing a Run File\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we had \u003ccode\u003elib/garden.rb\u003c/code\u003e and \u003ccode\u003elib/plant.rb\u003c/code\u003e, and were able\nto require \u003ccode\u003eplant.rb\u003c/code\u003e from inside \u003ccode\u003egarden.rb\u003c/code\u003e. This allowed us to run \u003ccode\u003eruby\nlib/garden.rb\u003c/code\u003e without error. Doing it this way works, but is a little sloppy.\nThe \u003ccode\u003elib/garden.rb\u003c/code\u003e file should only contain the \u003ccode\u003eGarden\u003c/code\u003e class. It doesn't make\nsense to also make it the file that \u003cem\u003eruns\u003c/em\u003e everything.\u003c/p\u003e\n\n\u003cp\u003eRunning an application is its own event and deserves its own file. This way, we\nhave a single place to start the application every time.\u003c/p\u003e\n\n\u003cp\u003eSticking to conventions, a run file has already been created in this example -\n\u003ccode\u003ebin/run\u003c/code\u003e - and looks like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#!/usr/bin/env ruby\u003cbr\u003e\u003cbr\u003erequire_relative '../lib/garden.rb'\u003cbr\u003erequire_relative '../lib/plant.rb'\u003cbr\u003e\u003cbr\u003elawn = Garden.new(name: 'Front Lawn')\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil')\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn\u003cbr\u003e\u003cbr\u003ep lawn.plants\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the run file set up, we can run \u003ccode\u003eruby bin/run\u003c/code\u003e and see the run\nfile in action. Let's step through this file briefly.\u003c/p\u003e\n\n\u003ch4\u003eThe Shebang Line\u003c/h4\u003e\n\n\u003cp\u003eThe very first line of \u003ccode\u003ebin/run\u003c/code\u003e can be broadly ignored for our\npurposes. It is known as a \u003ca href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\"\u003e\u003cem\u003eshebang\u003c/em\u003e\u003c/a\u003e and is used to indicate what\ninterpreter should be used to read the code in this file. On Unix systems, with\nthe proper configuration, this file can run without having to write\n\u003ccode\u003eruby\u003c/code\u003e before it in the command line. Don't worry if this does not work for you,\nthough. We can still run the file using \u003ccode\u003eruby bin/run\u003c/code\u003e. The shebang\nis just an optional line that makes this file more functional.\u003c/p\u003e\n\n\u003cp\u003eNotice that the file \u003cem\u003edoesn't\u003c/em\u003e have \u003ccode\u003e.rb\u003c/code\u003e. This file is designed to be an\nexecutable and the lack of file extension indicates this. Some runner files will\nstill have the \u003ccode\u003e.rb\u003c/code\u003e extension - they may not be meant as an executable file, but\nare still designed to be the point of entry into the application.\u003c/p\u003e\n\n\u003ch4\u003eLoading Files and Running Code\u003c/h4\u003e\n\n\u003cp\u003eRun files act in some way to start an application. Before that, though, they\ntypically need to load up any necessary files. We can see this in\n\u003ccode\u003ebin/run\u003c/code\u003e. In the first lines of recognizable Ruby code, we require\nboth our local files located in \u003ccode\u003elib\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative '../lib/garden.rb'\u003cbr\u003erequire_relative '../lib/plant.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith \u003ccode\u003eGarden\u003c/code\u003e and \u003ccode\u003ePlant\u003c/code\u003e loaded, we can proceed to run our very simple\napplication - relating a few \u003ccode\u003ePlant\u003c/code\u003e instances to a \u003ccode\u003eGarden\u003c/code\u003e instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elawn = Garden.new(name: 'Front Lawn')\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil')\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn\u003cbr\u003e\u003cbr\u003ep lawn.plants\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this particular example, the run file does a few different things to show how\nthe setup works. Commonly, though, run files can have very little in them. A run\nfile may load up the necessary support files, then just call a class to handle\nthe logic of running the actual application.\u003c/p\u003e\n\n\u003ch2\u003eUsing an Environment File\u003c/h2\u003e\n\n\u003cp\u003eWhenever we run our simple application, we load the two files in \u003ccode\u003elib\u003c/code\u003e. If we\nwanted to add a third class in a new file, once created, we'd have to add a\n\u003cem\u003ethird\u003c/em\u003e \u003ccode\u003erequire_relative\u003c/code\u003e for it in the run file. Seems easy enough so far.\u003c/p\u003e\n\n\u003cp\u003eWith more complex applications, there may be multiple places where we need to\nload the same application files. For example, if we added tests to this\napplication, we would load files like \u003ccode\u003elib/garden.rb\u003c/code\u003e and \u003ccode\u003elib/plant.rb\u003c/code\u003e into\nour test files. That means we would need a \u003cem\u003esecond set\u003c/em\u003e of \u003ccode\u003erequire_relative\u003c/code\u003e\nstatements somewhere in the tests. Now, it isn't \u003cem\u003eterribly\u003c/em\u003e difficult to\nmaintain two sets of the same code, but why should we repeat ourselves? Better\nif we can avoid doing that.\u003c/p\u003e\n\n\u003cp\u003eThe common solution to this is to create one file that has all the\n\u003ccode\u003erequire_relative\u003c/code\u003e statements. Then, in the run file, we just require \u003cem\u003ethat\u003c/em\u003e\nfile. If we had tests, we could also \u003cem\u003ejust require that file\u003c/em\u003e. If we add more\nclasses, we only need to modify a single file, and any place in our application\nrequiring that file will automatically receive the updates!\u003c/p\u003e\n\n\u003cp\u003eIn Ruby frameworks like Rails, this file is called \u003ccode\u003eenvironment.rb\u003c/code\u003e and is\nlocated in the \u003ccode\u003econfig\u003c/code\u003e folder. We'll follow this convention - a file with this\nname already exists, all we need to do is copy the \u003ccode\u003erequire_relative\u003c/code\u003e statements\nfrom \u003ccode\u003ebin/run\u003c/code\u003e to \u003ccode\u003econfig/environment.rb\u003c/code\u003e, then replace them,\nrequiring \u003ccode\u003econfig/environment.rb\u003c/code\u003e in our run file.\u003c/p\u003e\n\n\u003cp\u003eFor \u003ccode\u003econfig/environment.rb\u003c/code\u003e, that would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative '../lib/garden.rb'\u003cbr\u003erequire_relative '../lib/plant.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd for \u003ccode\u003ebin/run\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#!/usr/bin/env ruby\u003cbr\u003e\u003cbr\u003erequire_relative '../config/environment.rb'\u003cbr\u003e\u003cbr\u003elawn = Garden.new(name: 'Front Lawn')\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil')\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn\u003cbr\u003e\u003cbr\u003ep lawn.plants\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn addition to requiring all necessary files, \u003ccode\u003econfig/environment.rb\u003c/code\u003e is also a\ncommon place for configuring application settings. This is an ideal location,\nfor instance, for configuring access to a database that an application can use.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo recap, in this lesson, we looked at two components commonly found in Ruby\napplications. The first is the run file, something that acts as the starting\npoint of the application. The second is the \u003ccode\u003eenvironment.rb\u003c/code\u003e file. Typically loaded\nwhen an application is started or tests are run, this file loads any required\napplication files and handles any configuration that has to happen every time\nthe application starts.\u003c/p\u003e\n\n\u003cp\u003eCombining the two, we have a multi-file application that is starting to show\nsome complexity! With our set up, we can add whatever files we want to \u003ccode\u003elib\u003c/code\u003e,\nrequire those files in \u003ccode\u003econfig/environment.rb\u003c/code\u003e, and they will be loaded every\ntime we run \u003ccode\u003ebin/run\u003c/code\u003e.\u003c/p\u003e","exportId":"gab0d0c4f3b45106516810a42d4733e50"},{"id":203802,"title":"Gems and Bundler","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-building-applications-gems-and-bundler\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-gems-and-bundler/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-gems-and-bundler\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-gems-and-bundler/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eLearn about requiring external code libraries, called gems, in your Ruby\napplications.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLearn how to use Bundler and a Gemfile to manage gems and their dependencies\nin your applications.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eDefine Ruby Gems\u003c/h3\u003e\n\n\u003cp\u003eNothing you ever write will be 100% your code. While you probably haven't\nnoticed it, every day you use somebody else's code. You didn't write your text\neditor, you didn't write Ruby, you didn't write your operating system. Those are\nthe types of things that regular users interact with. As a developer, you will\nhave a new set of outside code to work with: Libraries. Libraries (or \"gems\" in\nRuby parlance) are just bundles of code that someone else wrote for you to\nintegrate into your codebase. For example, remember RSpec? That's a gem.\nInstead of everyone having to re-invent a way to do testing for Ruby, initially\none person and now hundreds of people have worked together to make a single\namazing library that everyone can use. What a time saver for us! We don't need\nto create our own testing framework.\u003c/p\u003e\n\n\u003cp\u003eRSpec is open source, and you integrate into a Ruby application using the\nRubyGems tool. There are thousands of gems like RSpec that are incredibly\nhelpful to us and are free to use and incorporate into your projects. That is\nthe power of open source. Together we can create something no single person\ncould make! In this lesson, we're going to take a look at gems and how to use\nthem in your applications.\u003c/p\u003e\n\n\u003ch3\u003eHow to Install a Gem\u003c/h3\u003e\n\n\u003cp\u003eGems are primarily hosted by \u003ca href=\"https://rubygems.org\"\u003eRubyGems (https://rubygems.org)\u003c/a\u003e, \na free service provided for\nthe Ruby community. If you've gone through the manual setup for your local\nenvironment or are using the in-browser IDE, you should be able to write the\nfollowing in your terminal and type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem install rspec\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd see your terminal respond by indicating that RSpec has been installed. When\nwe run this command, Ruby locates the gem, \u003ca href=\"https://rubygems.org/gems/rspec/versions/3.8.0\"\u003elooking in RubyGems by default\u003c/a\u003e, and\nif found, downloads and installs the latest version to your computer.\u003c/p\u003e\n\n\u003cp\u003eThe key, really, is knowing the correct name so that you install the gem that\nyou want.\u003c/p\u003e\n\n\u003ch3\u003eHow to Find a Gem\u003c/h3\u003e\n\n\u003cp\u003eTo find gems, Google is often a good starting place. Often, you may find a\nGitHub repository that maintains the gem files this way, and if the gem is well\nmaintained, this repository's README should contain info about how to install\nit.\u003c/p\u003e\n\n\u003cp\u003eAlternatively, you can also search for gems directly using\n\u003ca href=\"https://rubygems.org/\"\u003ehttps://rubygems.org/\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo, for instance, let's imagine we are looking for a gem to improve how Ruby\nprints data to the terminal. We could google something like\n\u003ccode\u003eruby gem print output\u003c/code\u003e. Another option is to go to\n\u003ca href=\"https://rubygems.org/search/advanced\"\u003ehttps://rubygems.org/search/advanced\u003c/a\u003e and enter \u003ccode\u003eprint\u003c/code\u003e in the search bar.\u003c/p\u003e\n\n\u003ch4\u003eHow to Choose the Right Gem\u003c/h4\u003e\n\n\u003cp\u003eLet's assume we decided to search \u003ccode\u003ehttps://rubygems.org\u003c/code\u003e for the right gem.\nLet's head to their advanced search interface\n\u003ccode\u003ehttps://rubygems.org/search/advanced\u003c/code\u003e and search for \u003ccode\u003eprint\u003c/code\u003e using the\ndescription field. The advanced search interface will give us more flexibility\nin the way we search for the ideal gem.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/gem_advanced_search.png\" alt=\"advanced gem search\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSearching by entering \u003ccode\u003eprint\u003c/code\u003e into the name field yields the following results:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/gem_search_result.png\" alt=\"search results\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou might be asking which one is the best? How to choose from those many\noptions? Which one should I use for my application?\u003c/p\u003e\n\n\u003cp\u003eThere are a few indicators that should help:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow many people have downloaded the gem?\u003c/li\u003e\n\u003cli\u003eDoes the description match what we're looking for?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this example, one gem stand way out from the rest - \u003ccode\u003eawesome_print\u003c/code\u003e, and the\ndescription sounds pretty close to what we're looking for. The second contender,\n\u003ccode\u003etable_print\u003c/code\u003e might \u003cem\u003ealso\u003c/em\u003e be an option, though it has fewer downloads.\nContinuing down the list, the third option is clearly \u003cem\u003enot what we want\u003c/em\u003e - it\nseems to be a gem specific to a certain API and has few downloads.\u003c/p\u003e\n\n\u003cp\u003eIf you are in a situation where it isn't clear what gem to use, there are\nadditional things to consider. For one, most gems will have homepages and files\nmaintained on GitHub (linked as the gem's 'Homepage' on RubyGems). Looking at\nGitHub directly, we can ask additional questions to help us find the right gem.\nFor instance:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eDoes the README indicate this gem is what you are looking for?\u003c/strong\u003e At a\nminimum, scan over the README to see if the gem fits what you are looking for.\nA well-developed README may also be a good indicator of a more professionally\ndeveloped gem.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eLooking at the repository in general, has it been updated fairly recently?\u003c/strong\u003e\nSometimes great gems can become abandoned and a lack of updates might indicate\nthis.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eHow many people have contributed to the repo?\u003c/strong\u003e Many contributors is a good\nindicator that the gem has been well maintained and updated. A single\ncontributor, while not disqualifying, could indicate the gem is a personal\nproject rather than a professionally built tool.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eHow many open issues does the repo have?\u003c/strong\u003e Real, professional tools have\nissues. Looking at issues, however, can give you a sense of how well\nmaintained the tool is.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eDoes the repo have a test suite?\u003c/strong\u003e A well-developed set of tests is an\nindicator that the gem was built with a thought out process.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eHow many people have forked the repository?\u003c/strong\u003e More forks is an indicator of\na more popular gem.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSeems like \u003ca href=\"https://github.com/awesome-print/awesome_print\"\u003e\u003ccode\u003eawesome_print\u003c/code\u003e\u003c/a\u003e is a good gem to try for our printing example.\nWhile \u003ca href=\"https://github.com/arches/table_print\"\u003e\u003ccode\u003etable_print\u003c/code\u003e\u003c/a\u003e has some cool specific features, \u003ccode\u003eawesome_print\u003c/code\u003e seems\nto be widely used and is well maintained.\u003c/p\u003e\n\n\u003cp\u003eFrom the instructions, looks like we can install \u003ccode\u003eawesome_print\u003c/code\u003e by typing\n\u003ccode\u003egem install awesome_print\u003c/code\u003e. We can test out the gem in IRB by requiring it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'awesome_print'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFrom the gem instructions, this gem will print out arrays and hashes nicely, so\nlet's try the following in IRB:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [1,2,3,4]\u003cbr\u003ehash = {:a =\u0026gt; 1, :b =\u0026gt; 5}\u003cbr\u003eap array\u003cbr\u003eap hash\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstead of the normal output, \u003ccode\u003eawesome_print\u003c/code\u003e should print \u003ccode\u003earray\u003c/code\u003e and \u003ccode\u003ehash\u003c/code\u003e\nwith each value or key/value separated on a new line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e    [0] 1,\u003cbr\u003e    [1] 2,\u003cbr\u003e    [2] 3,\u003cbr\u003e    [3] 4\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e    :a =\u0026gt; 1,\u003cbr\u003e    :b =\u0026gt; 5\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNeat! With the gem installed locally, all we need to do is include the \u003ccode\u003erequire\u003c/code\u003e\nstatement in our own code and we will be able to use the gem.\u003c/p\u003e\n\n\u003ch4\u003eUsing a Gemfile and Bundler\u003c/h4\u003e\n\n\u003cp\u003eWhen it comes to building applications that others will use, if a Ruby\napplication relies on a gem, anyone using that app will need to install the gem\nto get the application to function correctly.\u003c/p\u003e\n\n\u003cp\u003eTo make this process easy, we use a \u003ccode\u003eGemfile\u003c/code\u003e. A \u003ccode\u003eGemfile\u003c/code\u003e lists all the gem\ndependencies for your application as well as the source where they can be\ndownloaded, allowing \u003cem\u003eother users\u003c/em\u003e to quickly install all the gems at once. We\ndo this using \u003ca href=\"https://bundler.io/\"\u003eBundler\u003c/a\u003e, typing \u003ccode\u003ebundle install\u003c/code\u003e in the terminal while in a\nRuby application directory. Bundler will install any gems listed.\u003c/p\u003e\n\n\u003ch4\u003eHow to Add the Gem to your Gemfile\u003c/h4\u003e\n\n\u003cp\u003eA typical Gemfile has two parts - a source at the top and a list of gems. A\nminimal Gemfile could look like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esource \"https://rubygems.org\"\u003cbr\u003e\u003cbr\u003egem 'awesome_print'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAny gems your application relies on should be listed out in the \u003ccode\u003eGemfile\u003c/code\u003e with\n\u003ccode\u003egem\u003c/code\u003e preceding them. This line of code says that we're using the\n\u003ccode\u003eawesome_print\u003c/code\u003e gem in this application.\u003c/p\u003e\n\n\u003ch3\u003eGem Versions\u003c/h3\u003e\n\n\u003cp\u003eIn addition to listing the gem, we can also specify which versions this\napplication works with. For instance, we could add the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'awesome_print', '~\u0026gt; 1.8'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhy specify version? Sometimes, a gem developer makes a major change to their\ngem. If you've built an app to work using \u003cem\u003eone\u003c/em\u003e version of a gem, a future\nversion might require a different code implementation, causing your app to\nbreak until you fix it!\u003c/p\u003e\n\n\u003cp\u003eAll gems go through several types of updates: major version changes, minor\nversion changes and patches.\u003c/p\u003e\n\n\u003cp\u003eA major version change is reflected by the first number (reading from left to\nright). Major version changes don't have to be backward compatible. This means\nthat if your app is built using version 1, and the gem updates to version 2, the\nnew version can potentially break your app.\u003c/p\u003e\n\n\u003cp\u003eA minor version change is reflected by the number after the first decimal point.\nAll minor version changes should be backward compatible. This means that while\nversion 1.2 has more functionality than version 1.0, all the features in 1.0 are\nsupported in 1.2.\u003c/p\u003e\n\n\u003cp\u003eSometimes, a third number will be listed after a decimal point (i.e. \u003ccode\u003e1.8.0\u003c/code\u003e).\nThis number reflects a patch, which is a change to a gem to fix a bug but not\nintroduce new functionality. \u003ccode\u003e1.8.3\u003c/code\u003e means major version 1, minor version 8, and\na patch version 3.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e'~\u0026gt; 1.8'\u003c/code\u003e listed after \u003ccode\u003eawesome_print\u003c/code\u003e  means this application should use\nversion 1.8 \u003cem\u003eor the latest minor version\u003c/em\u003e up to 1.x, \u003cstrong\u003ebut not 2.0\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Writing \u003ccode\u003e'~\u0026gt; 1.8.0'\u003c/code\u003e will result in different behavior - rather than\nusing the last minor version, our application will use the latest \u003cem\u003epatch\u003c/em\u003e, so\nour application would use version 1.8.0 up to 1.8.x, \u003cstrong\u003ebut not 1.9.0\u003c/strong\u003e!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eAside:\u003c/strong\u003e For some reason lost to history, Rubyists have decided to call this\n\u003ccode\u003e~\u0026gt;\u003c/code\u003e \"Twiddle-Wakka.\" \u003ccode\u003e'~\u0026gt; 2.6'\u003c/code\u003e means any minor version above 2.6. 2.7, 2.8,\nand 2.9 would work (including patches); but version 3.0 wouldn't work because it\nindicates a new major version.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eYou can read more about controlling gem versions and additional options in the\n\u003ca href=\"https://guides.rubygems.org/patterns/\"\u003edocumentation on RubyGems\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eGem Sources\u003c/h2\u003e\n\n\u003cp\u003eAt the top of a Gemfile, we include the default source where our gems are\nlocated (typically \u003ccode\u003esource \"https://rubygems.org\"\u003c/code\u003e). By default, Bundler will\ntry to find gems at the default \u003ccode\u003esource\u003c/code\u003e that you specified in the top of your\nGemfile. But sometimes you might be working with a gem whose developer(s)\nhaven't yet pushed the code to RubyGems.org. Maybe you're one of those\ndevelopers yourself! In that case, Bundler provides a few options.\u003c/p\u003e\n\n\u003cp\u003eYou can refer to the gem via its GitHub repository:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'rack', git: 'https://github.com/rack/rack'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eProvided that the GitHub repository is for the gem only, this simple invocation\nshould work. If the gem code is in a subdirectory of the repository, several\noptions are available to help you help Bundler find the gem. Consult the Bundler\n\u003ca href=\"https://bundler.io/guides/git.html\"\u003edocumentation\u003c/a\u003e for options.\u003c/p\u003e\n\n\u003cp\u003eOr, perhaps the gem is private and needs to be accessed via SSH. No problem.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'nokogiri', :git =\u0026gt; 'login@example.com:some-user-account/some-private-gem.git'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eConfiguring the Gemfile\u003c/h3\u003e\n\n\u003cp\u003eThe Gemfile lets you set up groups, so gems are only loaded under specific\ncircumstances. For example, you might have a gem like Pry in your \u003ccode\u003edevelopment\u003c/code\u003e\ngroup because you only need to use Pry to debug when you are in the development\nphase. Your code in \u003ccode\u003eproduction\u003c/code\u003e, i.e. when your app is being used by a user,\ndoesn't need to use the Pry gem.\u003c/p\u003e\n\n\u003cp\u003eHere's an example Gemfile with a group specified:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esource \"https://rubygems.org\"\u003cbr\u003e\u003cbr\u003egem \"sinatra\"\u003cbr\u003e\u003cbr\u003egroup :development do\u003cbr\u003e  gem \"pry\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eThe Group Syntax\u003c/h4\u003e\n\n\u003cp\u003eThe group syntax uses the keyword \u003ccode\u003egroup\u003c/code\u003e, followed by the app environment as a\nsymbol (\u003ccode\u003e:development\u003c/code\u003e, \u003ccode\u003e:test\u003c/code\u003e, and \u003ccode\u003e:production\u003c/code\u003e are the standard\nenvironments), followed by the keyword \u003ccode\u003edo\u003c/code\u003e. Inside the block, we list all the\ngems specific to that group.\u003c/p\u003e\n\n\u003cp\u003eIn the example above, we grouped \u003ccode\u003epry\u003c/code\u003e in the development environment. This\nmeans that pry isn't accessible in testing or in production. There are a lot of\ngems specific to the testing environment, like \u003ccode\u003erspec\u003c/code\u003e and \u003ccode\u003ecapybara\u003c/code\u003e. You don't\nneed to run tests in the development or production environments, so you don't\nneed those gems loaded there. Groups allow us to specify which environment needs\nour gems.\u003c/p\u003e\n\n\u003ch4\u003eThe Hash Syntax\u003c/h4\u003e\n\n\u003cp\u003eThere is another format with which to group gems in your Gemfile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem \"pry\", :group =\u0026gt; :development\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is called the hash syntax and can also be written as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem \"pry\", group: :development\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we wanted \u003ccode\u003epry\u003c/code\u003e to be available in both our development \u003cem\u003eand\u003c/em\u003e testing\nenvironments, we can include them both in an array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem \"pry\", :groups =\u0026gt; [:development, :test]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo quickly review, once you've got gems listed in the Gemfile, \u003ca href=\"http://bundler.io/\"\u003eBundler\u003c/a\u003e will handle the process of installing them when other users download\nthe application.\u003c/p\u003e\n\n\u003cp\u003eIncluding \u003ccode\u003egem\u003c/code\u003e followed by the name of the gem will make sure that gem is\ninstalled for the project. Listing a gem without a version will cause Bundler to\ndownload the newest version of that gem.\u003c/p\u003e\n\n\u003cp\u003eIncluding a specific version, like  \u003ccode\u003egem 'sinatra', '1.4.5'\u003c/code\u003e will lock the version\nso your app only uses that version.\u003c/p\u003e\n\n\u003cp\u003eIncluding \u003ccode\u003e~\u0026gt;\u003c/code\u003e before the version number will limit your app to using either the\nversion you list or a version with only minor updates (or patches, depending on your\nsyntax).\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://bundler.io/gemfile.html\"\u003eRead more about the Gemfile here\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWith this, you can make sure everyone working on your app is using the right\nversion. Now, let's try practicing what we've learned.\u003c/p\u003e\n\n\u003ch2\u003eCode-Along\u003c/h2\u003e\n\n\u003ch3\u003eUsing Bundler\u003c/h3\u003e\n\n\u003cp\u003eTo get started with Bundler, we'll first create a Gemfile. To create a Gemfile,\ntype \u003ccode\u003ebundle init\u003c/code\u003e in your terminal. You'll notice we created one for you in the\nrepo so running \u003ccode\u003ebundle init\u003c/code\u003e will give you an error.\u003c/p\u003e\n\n\u003ch3\u003eAnatomy of Bundler Files\u003c/h3\u003e\n\n\u003cp\u003eThere's only one file Bundler requires you have (Gemfile). The other files are\nconventional for a typical Ruby application, but not required by the use of\nBundler for gem management.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eGemfile\u003c/code\u003e - This file is required by Bundler and contains a source and a list of\nfile requirements. That's all.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003econfig/environment.rb\u003c/code\u003e - The environment file is where we'll be loading all of our\napp's dependencies, from gems to database connections.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebin/run.rb\u003c/code\u003e - This file will start our application. This file will require the\nenvironment file we created earlier to provide our app with access to our gems.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe'll be using these files in the test suite, so don't rename them.\u003c/p\u003e\n\n\u003ch3\u003eConfigure Gemfile\u003c/h3\u003e\n\n\u003cp\u003eAdd this code to your \u003ccode\u003eGemfile\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esource \"https://rubygems.org\"\u003cbr\u003egem \"rspec\"\u003cbr\u003egem \"sinatra\"\u003cbr\u003e\u003cbr\u003egroup :development do\u003cbr\u003e  gem \"pry\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eRun your test suite with \u003ccode\u003erspec\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e to see what gems you'll be adding to\nyour gem file. Add the appropriate gems, specifying their version when\nnecessary, to get the tests passing\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter getting all of your gems in your Gemfile, run \u003ccode\u003ebundle install\u003c/code\u003e from your\nterminal. This will install the listed gems for you. They won't show up in the\ndirectory, but they are in your system, and available.\u003c/p\u003e\n\n\u003cp\u003eRunning \u003ccode\u003ebundle install\u003c/code\u003e also creates a new file: \u003ccode\u003eGemfile.lock\u003c/code\u003e. This file\nnotes which specific gem versions were installed. If this file is committed and\nincluded in a project, Bundler will default to using the exact versions listed\nin this file when installing gems.\u003c/p\u003e\n\n\u003ch3\u003eWorking with \u003ccode\u003econfig/environment.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eWhen you start up an app, your app needs to know the order in which to load\nfiles. If your app uses gems, your code will depend on these external libraries.\nThis means we'd want the gems to be loaded in our app \u003cem\u003ebefore\u003c/em\u003e our own code. If\nwe loaded our code first, we'd get uninitialized constant errors or undefined\nvariable or method errors. Load order matters. We can specify load information\nin \u003ccode\u003econfig/environment.rb\u003c/code\u003e to configure our load path (or load order) so that\nnothing breaks.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003econfig/environment.rb\u003c/code\u003e, we can specify which Bundler groups we want to load.\nThe following code is used to load the \u003ccode\u003edefault\u003c/code\u003e group (anything not explicitly\nin a group) and the \u003ccode\u003edevelopment\u003c/code\u003e group.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePlace the following code in \u003ccode\u003econfig/environment.rb\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'bundler/setup'\u003cbr\u003eBundler.require(:default, :development)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example above, we're first requiring \u003ccode\u003e'bundler/setup'\u003c/code\u003e. If we don't do\nthis, our app won't know to use bundler to install our gems. Without that line,\nour \u003ccode\u003eGemfile\u003c/code\u003e becomes pointless.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e The two arguments that you are passing into the \u003ccode\u003e.require\u003c/code\u003e method\n\u003cem\u003emust be passed in the correct order, shown above\u003c/em\u003e. The test you are trying to\npass is testing for order.\u003c/p\u003e\n\n\u003ch3\u003eWorking with \u003ccode\u003ebin/run.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThis is where the action is. This is where our app logic goes, and where we make\nour millions.\u003c/p\u003e\n\n\u003cp\u003eTo take advantage of all of the work we did in the environment file, let's\nrequire it here.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePlace the following code in \u003ccode\u003ebin/run.rb\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative '../config/environment'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's it! Now we can access all of our gems from our \u003ccode\u003erun.rb\u003c/code\u003e file.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith a Gemfile, you can augment your own applications and bring in many gems.\nSome gems, like Rails and Sinatra, are complex enough that they are used to\nbuild major websites. Some gems are extremely simple and serve a single purpose.\u003c/p\u003e\n\n\u003cp\u003eThe installation of gems from the Gemfile is handled by Bundler. We can actually\nmake sure these gems get loaded by using an environment file and Bundler, then\nrequiring the environment file in our run file. Whenever the run file is\nexecuted, Bundler requires the appropriate gems for us or prompts us to run\n\u003ccode\u003ebundle install\u003c/code\u003e if it hasn't been run.\u003c/p\u003e\n\n\u003cp\u003eFrom here, we can add whatever application logic we'd like - we have a way to\ninclude gems, a place to configure and load them and a file that starts\neverything!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://railscasts.com/\"\u003eRailsCasts\u003c/a\u003e - \u003ca href=\"http://railscasts.com/episodes/201-bundler-revised\"\u003e#201 Bundler (revised)\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://bundler.io/docs.html\"\u003eBundler Docs\u003c/a\u003e - \u003ca href=\"http://bundler.io/v1.16/guides/sinatra.html\"\u003eBundler with Sinatra\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"ge7d1352d7c4ccbb0bcfd0ae46ce8c8b7"}]},{"id":21898,"name":"Getting Started with SQL","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g9df1d5552e6d558a282e05263efd1263","items":[{"id":203803,"title":"Introduction to SQL","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-intro-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eJust as humans have brains, and computers have hard drives that store\ninformation, most programs have a storage system that needs to be communicated\nwith. How do we store and find stored data? In databases, and using \u003cem\u003eStructured\nQuery Language\u003c/em\u003e, or SQL. SQL can be used with a ton of different databases\nlike MySQL, Postgres, etc. It powers the logic behind server-side frameworks.\nSQL has many variations, but for our lessons, we will be using \u003ca href=\"https://www.sqlite.org/index.html\"\u003eSQLite\u003c/a\u003e. While\nthere are some minor differences we'll note later on, the fundamentals stay the\nsame.\u003c/p\u003e\n\n\u003cp\u003eIn the next several lessons, we're going to learn:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat SQL is\u003c/li\u003e\n\u003cli\u003eHow to create and open a database file and table\u003c/li\u003e\n\u003cli\u003eThe three specific SQLite database types\u003c/li\u003e\n\u003cli\u003eWhat \"single source of truth\" means in the context of object associations\u003c/li\u003e\n\u003cli\u003eExecuting SQL code\u003c/li\u003e\n\u003cli\u003eHow to create advanced queries using aggregator functions\u003c/li\u003e\n\u003cli\u003eRelational database mapping in object-oriented programming\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, you'll learn how to find information associated with particular\ncriteria and how to create and manipulate data.\u003c/p\u003e","exportId":"introduction-to-sql"},{"id":203804,"title":"SQL Databases Overview","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-database-overview\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-database-overview/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-database-overview\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-database-overview/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eWhat is SQL?\u003c/h2\u003e\n\n\u003cp\u003eSQL (Structured Query Language) is a language for managing data in a database. Unlike some other programming languages, it's only used for one thing: talking to databases. Thus, you might hear it referred to as a \"special purpose\", or \"domain specific\" programming language. This means that you won't be using SQL to write the next big web app, but you might use it to interact with the database that powers it.\u003c/p\u003e\n\n\u003cp\u003eEven though SQL has just one purpose, it is used by many different database systems such as MySQL, PostgreSQL, or the system we'll be using in this course: SQLite. There are a handful of things other SQL systems like Postgres, or MySQL can do that are not supported by SQLite. Every database system has its own strengths and weaknesses, and as you learn more about them you should evaluate them thoughtfully when deciding which to use for what purpose. For us, SQLite provides a low barrier to entry, and is simple to get up and running. \u003c/p\u003e\n\n\u003ch2\u003eWeb Developers \u0026lt;3 Databases\u003c/h2\u003e\n\n\u003cp\u003eWhy do we need to master SQL? As a full-stack web developer, you'll frequently be working with databases to manage the data associated with your applications. Think about the web apps you're familiar with. Facebook saves user data and stores––or persists––your associations to your friends. Amazon has an enormous database of items for sale. The New York Times has a storage system for all of their articles. Most of the sites you interact with every day, and consequently most of the sites you'll work on or build, need databases to persist data.\u003c/p\u003e\n\n\u003cp\u003eWe've already seen how we can build Ruby programs that model real-world objects and environments. With database management skills, we'll learn to store representations of the Ruby objects our programs create and retrieve them at the appropriate time. We’ll also learn how to connect our Ruby (and even later, Ruby on Rails) applications to our databases. \u003c/p\u003e\n\n\u003cp\u003eFor example, a basic web application might have many users. So far, we've learned how to build a Ruby \u003ccode\u003eUser\u003c/code\u003e class that produces user objects. But, we don't yet know how to store those users and their details. If a user signs up for our app and we proceed to lose all their information immediately, how will we know if an existing user is signing back into our app? We need a way to take our Ruby objects, store them in a database and retrieve them at the appropriate time.\u003c/p\u003e\n\n\u003ch2\u003eIn This Topic\u003c/h2\u003e\n\n\u003cp\u003eThis topic will cover how to use and navigate databases based on SQL. By the end of this topic, you’ll be able to: \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate SQLite3 databases.\u003c/li\u003e\n\u003cli\u003eCreate, update, select, and delete data from database tables.\u003c/li\u003e\n\u003cli\u003eRelate data within a given database.\u003c/li\u003e\n\u003cli\u003eWrite SQL code in both your command line and your text editor and execute the code against a database. \u003c/li\u003e\n\u003cli\u003eWrite Ruby programs that talk to and save data to your databases.\u003c/li\u003e\n\u003c/ul\u003e","exportId":"sql-databases-overview"},{"id":203805,"title":"Setting up SQLite","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-setting-up-sqlite\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-setting-up-sqlite/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-setting-up-sqlite\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-setting-up-sqlite/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll get started with SQL by installing and trying out SQLite.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCheck to see if SQLite is installed on your computer via a terminal command\u003c/li\u003e\n\u003cli\u003eInstall SQLite on your computer\u003c/li\u003e\n\u003cli\u003eCreate and open a database file and table\u003c/li\u003e\n\u003cli\u003eEnd all SQL commands using proper semicolon notation\u003c/li\u003e\n\u003cli\u003eExit out of SQLite using the .quit command\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstalling SQL\u003c/h2\u003e\n\n\u003cp\u003eIf you are using the Learn IDE, you don't need to install anything. We've already done this for you :)\u003c/p\u003e\n\n\u003ch3\u003eMacOS\u003c/h3\u003e\n\n\u003cp\u003eIf you are on OSX version 10.4 or greater, you probably already have SQLite\ninstalled. Find out by opening up the terminal and running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewhich sqlite3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eif you get back\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/usr/bin/sqlite3\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThen you have a working version of sqlite3 already installed on your system.\nThanks Apple! Skip ahead to the 'Trying it out' section below!\u003c/p\u003e\n\n\u003cp\u003eIf not, then there are a couple of ways you can install SQLite.\u003c/p\u003e\n\n\u003ch3\u003eMacOS Manual Installation Options\u003c/h3\u003e\n\n\u003ch4\u003eInstall With Homebrew:\u003c/h4\u003e\n\n\u003cp\u003eYou can install SQLite using a package manager for your operating system. If you\nare on Mac, Homebrew is the way to go. To install Homebrew run the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe script that runs will explain what it is doing, and pause before it does it.\u003c/p\u003e\n\n\u003cp\u003eAfter installing Homebrew, install SQLite with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrew install sqlite\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eInstall From Binary:\u003c/h4\u003e\n\n\u003cp\u003eIf Homebrew isn't working out for you, you can download one of the pre-compiled\nbinary packages available at the \u003ca href=\"http://www.sqlite.org/download.html\"\u003edownloads page\u003c/a\u003e. Look for your operating system, download and install the appropriate binary.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are receiving an error when trying to install SQLite, make\nsure the Xcode Command-Line Tools have properly installed. Try running\n\u003ccode\u003excode-select --install\u003c/code\u003e to resolve this issue.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eWSL Manual Installation Instructions\u003c/h3\u003e\n\n\u003cp\u003eBelow are the steps for installing SQLite on the Windows Sub-system for Linux:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen your WSL terminal\u003c/li\u003e\n\u003cli\u003eUpdate your Ubuntu packages: \u003ccode\u003esudo apt update\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eOnce the packages have updated, install SQLite3 with: \u003ccode\u003esudo apt install sqlite3\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eConfirm installation and get the version number: \u003ccode\u003esqlite3 --version\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFor additional information, check out \u003ca href=\"https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-database#install-sqlite\"\u003ethis article on getting started with databases in WSL\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eTrying it out\u003c/h2\u003e\n\n\u003cp\u003eOkay, let's make sure everything is up and running. In your terminal, type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 test_sqlite.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will create a new database file called test_sqlite.db and open it in the\nsqlite prompt. You should see something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSQLite version 3.7.12 2013-03-19 12:42:02\u003cbr\u003eEnter \".help\" for instructions\u003cbr\u003esqlite\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou are now looking at the sqlite prompt and can now run SQL statements and\ncommands. Let's create a database table called \"test_table\":\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite\u0026gt; create table test_table(id);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command creates the table inside the test_sqlite.db database file. To\nverify that the table was created, run the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite\u0026gt; .tables\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the table listed. If you have the directory you're working in\nopen in your code editor, you should also see the database file in your file\ntree.\u003c/p\u003e\n\n\u003cp\u003eTo exit sqlite, type \u003ccode\u003e.quit\u003c/code\u003e at the sqlite prompt.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e All SQL statements that you write in your terminal, inside the\nsqlite prompt, \u003ccode\u003esqlite\u0026gt;\u003c/code\u003e, \u003cem\u003emust be terminated with a semi-colon \u003ccode\u003e;\u003c/code\u003e\u003c/em\u003e. If you hit\n\u003ccode\u003eenter\u003c/code\u003e without adding a semi-colon to the end of your line, you will be\ntrapped! Don't worry though, just add that \u003ccode\u003e;\u003c/code\u003e on the new line and hit \u003ccode\u003eenter\u003c/code\u003e\nagain. Note, however, that this does not apply to sqlite commands that begin\nwith a \u003ccode\u003e.\u003c/code\u003e such as \u003ccode\u003e.quit\u003c/code\u003e and \u003ccode\u003e.tables\u003c/code\u003e. These commands will \u003cem\u003enot work\u003c/em\u003e if you\nadd the semi-colon.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.sqlite.org/docs.html\"\u003eSQLite Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://mxcl.github.com/homebrew/\"\u003eHomebrew\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://zetcode.com/db/sqlite/\"\u003eZetCode sqlite3\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"setting-up-sqlite"},{"id":203806,"title":"Database Basics","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-database-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-database-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-database-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-database-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eWe'll cover how to create and delete database tables in SQLite as well as how to add columns to an existing table.  \u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eDescribe how relational databases store data in tables composed of columns and rows\u003c/li\u003e \u003cli\u003eUse lower case and snake_case conventions for column names\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003eCREATE TABLE\u003c/code\u003e keywords to create a new table with columns, including the \u003ccode\u003eid\u003c/code\u003e column\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003e.help\u003c/code\u003e command to get a complete list of SQL commands\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003e.tables\u003c/code\u003e command to list all the tables in a database\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003e.schema\u003c/code\u003e command to look at the structure of a database\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003eALTER TABLE\u003c/code\u003e keywords to add columns to a table\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003eDROP TABLE\u003c/code\u003e keywords to delete a table\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eDatabase Structure\u003c/h2\u003e  \u003cp\u003eRelational Databases like SQLite store data in a structure we refer to as a table. You can think of a table in a database a lot like you would a spreadsheet. We define specific columns in our table, and then we store any number of what we refer to as 'records' as rows in our database. A record is just information referring to one specific entity. For instance, if you had a table called \"People\" you could imagine a structure like this:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003ename\u003c/th\u003e     \u003cth\u003eage\u003c/th\u003e     \u003cth\u003eemail\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003eBob\u003c/td\u003e     \u003ctd\u003e29\u003c/td\u003e     \u003ctd\u003ebob@flatironschool.com\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eAvi\u003c/td\u003e     \u003ctd\u003e28\u003c/td\u003e     \u003ctd\u003eavi@flatironschool.com\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eAdam\u003c/td\u003e     \u003ctd\u003e28\u003c/td\u003e     \u003ctd\u003eadam@flatironschool.com\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eEach column has a name, and each row contains the corresponding information about a person.\u003c/p\u003e  \u003ch3\u003eNote on Column Names\u003c/h3\u003e  \u003cp\u003eWhen we name columns in our database, there are a couple of conventions we will follow. The first is that we will always use lowercase letters when referring to columns in our database. SQLite isn't case sensitive about its commands or column names, but it is generally best practice for us to stick to lowercase for our column names.\u003c/p\u003e  \u003cp\u003eThe second convention we want to follow is more important. That is, when we have multiple words in a column name, we link them together using underscores rather than spaces. We call this convention \"snake_case\". So, for instance, if we wanted to be more specific with our email column above, we can name it email_address. If we wanted to split up name to first and last we might have columns called first_name and last_name.\u003c/p\u003e  \u003ch2\u003eDatabase Tables\u003c/h2\u003e  \u003cp\u003eIn the following sections, we'll cover how to create, alter, and delete database tables. This reading is accompanied by a code along exercise that you can do in your terminal. You don't need to fork this repository, and there are no tests to pass. Follow along with the reading and code along instructions.\u003c/p\u003e  \u003ch3\u003eCreate Table\u003c/h3\u003e  \u003cp\u003eWhen we create a new database, it comes like a sort of blank slate. We can then create a table inside our database using the following statement:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eCREATE TABLE table_name; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut before we're able to store any actual data in a table, we'll need to define the columns in the table as well as the specific type of data each column will store.\u003c/p\u003e  \u003cp\u003eLet's give it a shot. For the purposes of this code along, you'll be typing these commands into your terminal.\u003c/p\u003e  \u003ch3\u003eCode Along I: Creating a Table\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eIn the terminal let's create our new database and start sqlite3 by running the following:\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003esqlite3 pet_database.db \u003c/code\u003e\u003c/pre\u003e \u003cul\u003e \u003cli\u003eNow, at our sqlite prompt, let's create our table:\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003eCREATE TABLE cats; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see the following error:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eError: near \";\": syntax error \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSQLite expects us to include at least some definition of the structure of this table as well. In other words, when we create database tables, we need to specify some column names, along with the type of data we are planning to store in each column. More on data types later.\u003c/p\u003e  \u003cp\u003eLet's try that table statement again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's break down the above code:\u003c/p\u003e  \u003col\u003e \u003cli\u003eUse the \u003ccode\u003eCREATE TABLE\u003c/code\u003e command to create a new table called \"cats\".\u003c/li\u003e \u003cli\u003eInclude a list of column names along with the type of data they will be storing. \u003ccode\u003eTEXT\u003c/code\u003e means we'll be storing plain old text, \u003ccode\u003eINTEGER\u003c/code\u003e means we'll store a number. Note that the use of capitalization is arbitrary, but it is a convention to help separate the SQL commands from the names we make up for our tables and columns.\u003c/li\u003e \u003cli\u003eEvery table we create, regardless of the other column names and data types, should be defined with an id INTEGER PRIMARY KEY column, including the integer data type and primary key designation. Our SQLite database tables \u003cem\u003emust be indexed by a number\u003c/em\u003e. We want each row in our table to have a number, which we'll call \"id\", just like in an Excel spreadsheet. Numbering our table rows makes our data that much easier to access, update, and organize. SQLite comes with a data type designation called \"Primary Key\". Primary keys are unique and auto-incrementing, meaning they start at 1 and each new row automatically gets assigned the next numeric value.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eOkay, let's check and make sure that we successfully created that table. To do this we'll be using SQL commands. To get a complete list of commands, you can type \u003ccode\u003e.help\u003c/code\u003e into the sqlite prompt.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-3/database-basics/sqlite-help.png\" alt=\"Sqlite help output\"\u003e\u003c/p\u003e  \u003cp\u003eWoah, that's a lot. Don't worry too much about all of these different commands right now. Just know that you can always use \u003ccode\u003e.help\u003c/code\u003e to check out the available options.\u003c/p\u003e  \u003cp\u003eOkay, let's check out our new table. To list all the tables in the database we'll use the \u003ccode\u003e.tables\u003c/code\u003e command. Type it into the sqlite prompt and hit enter, and you should see our \u003ccode\u003ecats\u003c/code\u003e table listed.\u003c/p\u003e  \u003cp\u003eWe can look at the structure, or \"schema\", of our database (i.e. the tables and their columns + column data types) with the \u003ccode\u003e.schema\u003c/code\u003e command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esqlite\u0026gt; .schema\u003cbr\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's move on to altering our table.\u003c/p\u003e  \u003ch3\u003eAlter Table\u003c/h3\u003e  \u003cp\u003eLet's say that, after creating a database and creating a table to live inside that database, we decide we want to add or remove a column. We can do so with the \u003ccode\u003eALTER TABLE\u003c/code\u003e statement.\u003c/p\u003e  \u003ch3\u003eCode Along II: Adding, Removing and Renaming Columns\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eLet's say we want to add a new column, \u003ccode\u003ebreed\u003c/code\u003e, to our \u003ccode\u003ecats\u003c/code\u003e table:\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003eALTER TABLE cats ADD COLUMN breed TEXT; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's check out our schema now:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esqlite\u0026gt; .schema\u003cbr\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  breed TEXT\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that the \u003ccode\u003eALTER\u003c/code\u003e statement isn't here, but instead SQLite has updated our original CREATE statement. The schema reflects the current structure of the database, which is reflected as the CREATE statement necessary to create that structure.\u003c/p\u003e  \u003cp\u003eUnfortunately, altering a column name and/or deleting a column can be tricky in SQLite3. There are workarounds, however. We're not going to get into that right now, but you can explore the \u003ca href=\"https://www.sqlite.org/lang_altertable.html\"\u003edocumentation on this topic\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eFortunately, SQLite still supports most of what we'll need one way or another. For now, if you need to change a column name, it's best to simply delete the table and re-create it.\u003c/p\u003e  \u003ch3\u003eDrop Table\u003c/h3\u003e  \u003cp\u003eLastly, we'll discuss how to delete a table from a database with the \u003ccode\u003eDROP TABLE\u003c/code\u003e statement.\u003c/p\u003e  \u003ch3\u003eCode Along III: Deleting a Table\u003c/h3\u003e  \u003cp\u003eDeleting a table is very simple:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eDROP TABLE cats; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd that's it! You can exit out of the sqlite prompt with the \u003ccode\u003e.quit\u003c/code\u003e command.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.sqlite.org/lang_keywords.html\"\u003eSQL keywords\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"database-basics"},{"id":203807,"title":"Writing Database Commands to a File","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-writing-database-commands-to-a-file\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-writing-database-commands-to-a-file/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-writing-database-commands-to-a-file\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-writing-database-commands-to-a-file/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite SQL code in your text editor instead of your command line.\u003c/li\u003e\n\u003cli\u003eLearn how to execute SQL code you've written in your text editor against a\ndatabase you've created.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWriting SQL in a Text Editor\u003c/h2\u003e\n\n\u003cp\u003eUp until now, we've been executing our SQL commands directly in the terminal. It\nis likely, however, that you will find yourself writing SQL in a file and\nexecuting that file in the context of your database. The more complex our\ndatabases become, the more tables we add and the more advanced the queries we\nrun against them, the harder it will become to keep track of it all in the\n\u003ccode\u003esqlite3\u003c/code\u003e prompt in our terminal.\u003c/p\u003e\n\n\u003cp\u003eSQL is a programming language like any other, so we can write SQL in our text\neditor and execute it. This allows us to keep better track of our SQL code,\nincluding the SQL statements that create tables and query data from those\ntables.\u003c/p\u003e\n\n\u003cp\u003eTo write SQL in our text editor and execute that SQL against a specific\ndatabase, we'll create files in our text editor that have the \u003ccode\u003e.sql\u003c/code\u003e extension.\nThese files will contain valid SQL code. Then, we can execute these files\n\u003cem\u003eagainst our database\u003c/em\u003e in the command line. We'll take a look at this process\ntogether in the following code along.\u003c/p\u003e\n\n\u003ch2\u003eCode Along\u003c/h2\u003e\n\n\u003ch3\u003eCreating a Database and Table\u003c/h3\u003e\n\n\u003cp\u003e1 . In the terminal, create a database with the following command:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOnce you create your database, exit the sqlite prompt with the \u003ccode\u003e.quit\u003c/code\u003e command.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOpen up a text editor and create and save a file \u003ccode\u003e01_create_cats_table.sql\u003c/code\u003e;\nmake sure the new file is saved in the same directory where you created the\ndatabase. In this file, write your create statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e    name TEXT,\u003cbr\u003e    age INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e2 . Execute that file in the command line. \u003cem\u003eBefore running the command below,\nmake sure that you've exited the SQLite prompt that you were in earlier when you\ncreated the database.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003esqlite3 pets_database.db \u0026lt; 01_create_cats_table.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If running the above command gives you an error that the Cats table\nalready exists, that means you created a table with that name in a previous\nexercise. You can enter into your Pets Database with the \u003ccode\u003esqlite3 pets_database.db command\u003c/code\u003e and then remove your old table in the SQLite prompt with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDROP TABLE cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eConfirming Our SQL Execution\u003c/h3\u003e\n\n\u003cp\u003eLet's confirm that the above execution of the SQL commands in our \u003ccode\u003e.sql\u003c/code\u003e file\nworked. To do so:\u003c/p\u003e\n\n\u003cp\u003e1 . In your terminal, enter into your Pets Database with the \u003ccode\u003esqlite3\npets_database.db\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003e2 . Then run the \u003ccode\u003e.schema\u003c/code\u003e command. You should see the following schema printed\nout, confirming that we did, in fact, create our Cats table successfully.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e    name TEXT,\u003cbr\u003e    age INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eRemember to exit out of the \u003ccode\u003esqlite3\u003c/code\u003e prompt with \u003ccode\u003e.quit\u003c/code\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003eOperating on our Database from the Text Editor\u003c/h3\u003e\n\n\u003cp\u003eTo carry out any subsequent actions on this database — adding a column to the\ncats table, dropping that table, creating a new table — we can create new \u003ccode\u003e.sql\u003c/code\u003e\nfiles in the text editor and execute them in the same way as above. Let's give\nit a shot.\u003c/p\u003e\n\n\u003cp\u003e1 . To add a column to our cats table:\u003c/p\u003e\n\n\u003cp\u003eCreate a file named \u003ccode\u003e02_add_column_to_cats.sql\u003c/code\u003e and fill it out with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eALTER TABLE cats ADD COLUMN breed TEXT;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, execute the file in your command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db \u0026lt; 02_add_column_to_cats.sql\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e2 . Confirm that your execution of the \u003ccode\u003e.sql\u003c/code\u003e file worked by entering into your\ndatabase in the terminal with the \u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e command. Once\nthere, execute the \u003ccode\u003e.schema\u003c/code\u003e command and you should see that the schema of the\nCats table does include the \u003ccode\u003ebreed\u003c/code\u003e column.\u003c/p\u003e","exportId":"writing-database-commands-to-a-file"},{"id":203808,"title":"SQLite Data Types","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-sqlite-data-types\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-sqlite-data-types/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-sqlite-data-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-sqlite-data-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover the importance of specifying datatypes, and the\ndifferent types of data you can store in a SQLite database.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe data typing and how it allows for operations to be performed with\npredictable results.\u003c/li\u003e\n\u003cli\u003eList four different types of data you can store in a SQLite database.\u003c/li\u003e\n\u003cli\u003eDefine three specific SQLite database types: Text, Integer, and Real.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Do Data Types Matter?\u003c/h2\u003e\n\n\u003cp\u003eWe've learned that when we create a table, we need to include a name for it as\nwell as define at least one column. We define columns in a \u003ccode\u003eCREATE\u003c/code\u003e statement by\nincluding a name and a datatype to let SQLite know the kind of data we will be\nstoring there. The practice of explicitly declaring a type is known as \"typing.\"\u003c/p\u003e\n\n\u003cp\u003eWhy is it important that we use typing in our database? Simply put, typing\nallows us to exercise some level of control over our data. Typing not only\ninforms our database of the kind of data we plan to store in a column but it\nalso restricts it. For instance, look at the age column below in our cats table.\nWhat do we mean by age? What if we had this:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003ename\u003c/th\u003e\n    \u003cth\u003ebreed\u003c/th\u003e\n    \u003cth\u003eage\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eMaru\u003c/td\u003e\n    \u003ctd\u003eScottish Fold\u003c/td\u003e\n    \u003ctd\u003e3\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eHannah\u003c/td\u003e\n    \u003ctd\u003eTabby\u003c/td\u003e\n    \u003ctd\u003etwo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eLil' Bub\u003c/td\u003e\n    \u003ctd\u003eAmerican Shorthair\u003c/td\u003e\n    \u003ctd\u003e5.5\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eDid we intend age to be represented as a whole number, a word, or a decimal? If\nwe asked you to add up the ages of all the cats you could simply convert the\n'two' to 2 in your head, but your database can't do that. It doesn't have that\nability because the logic involved in converting a word into a number would be\ndense and inefficient. What about different languages? What about different\nspellings? Capitalization, typos, or different hyphenation conventions? These\nare just some reasons this might start to get crazy. In other words, because\ndatabases are designed to store large amounts of data, they are very concerned\nwith storing, accessing, and acting upon that data as efficiently and normally\nas possible.\u003c/p\u003e\n\n\u003cp\u003eTyping gives us the ability to perform all kinds of operations with predictable\nresults. For instance, the ability to perform Math operations like \u003ccode\u003eSUM\u003c/code\u003e —\ni.e. summing integers — doesn't just depend on everything being an integer\nof some sort but would also expect it. If you tried, for example,  to \u003ccode\u003eSUM\u003c/code\u003e all\nof the cats in the above table, SQLite would actually attempt to convert, or\ncast, their type to something it can \u003ccode\u003eSUM\u003c/code\u003e. It would try to convert anything it\ncan to an \u003ccode\u003eINTEGER\u003c/code\u003e and ignore alpha characters. This can lead to real problems.\nWithout typing, our data might get complicated and messy, and it would be\ndifficult to ask the database questions about large sets of data.\u003c/p\u003e\n\n\u003cp\u003eWe're going to adhere strictly to only storing data that fits with the datatype\nwe have given to a particular column.\u003c/p\u003e\n\n\u003ch2\u003eDatatypes\u003c/h2\u003e\n\n\u003cp\u003eDifferent database systems also have different datatypes available, which are\nimportant and useful to know whenever you are dealing with those systems. SQLite\nis a good starting point to learn about datatypes because it only has four basic\ncategories of datatypes; they are:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTEXT\u003cbr\u003eINTEGER\u003cbr\u003eREAL\u003cbr\u003eBLOB\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's explore each category in more detail.\u003c/p\u003e\n\n\u003ch3\u003eTEXT\u003c/h3\u003e\n\n\u003cp\u003eAny alphanumeric characters which we want to represent as plain text. The body\nof this paragraph is text. Your name is text. Your email address is a piece of\ntext. Your height, weight, and age, however, are probably not.\u003c/p\u003e\n\n\u003ch3\u003eINTEGER\u003c/h3\u003e\n\n\u003cp\u003eAnything we want to represent as a whole number. If it's a number and contains\nno letter or special characters or decimal points then we should store it as an\ninteger. If we use it to perform math or create a comparison between two\ndifferent rows in our database, then we definitely want to store it as an\ninteger. If it's just a number, it's generally not a bad idea to store it as an\ninteger. You might never add two house address numbers together, but you might\nwant to sort them numerically. For example, in the preceding case you might want\nto get the biggest number and not the longest piece of text.\u003c/p\u003e\n\n\u003ch3\u003eREAL\u003c/h3\u003e\n\n\u003cp\u003eAnything that's a plain old decimal like 1.3 or 2.25. SQLite will store decimals\nup to 15 characters long. You can store 1.2345678912345 or 1234.5678912345, but\n1.23456789123456789 would only store 1.2345678912345. In other database systems\nthis is called 'double precision.'\u003c/p\u003e\n\n\u003cp\u003eWith these three types in hand, we are going to be able to work our way through\nthe next several topics, and this whole typing concept is going to quickly\nbecome second nature for you.\u003c/p\u003e\n\n\u003ch3\u003eBLOB\u003c/h3\u003e\n\n\u003cp\u003eYou may encounter the \u003ccode\u003eBLOB\u003c/code\u003e datatype while you're Googling or doing any further\nreading on SQLite. For now, we will not use \u003ccode\u003eBLOB\u003c/code\u003e. It is generally used for\nholding binary data.\u003c/p\u003e\n\n\u003ch2\u003eBonus: Note on SQLite\u003c/h2\u003e\n\n\u003cp\u003eTo increase its compatibility with other database engines (e.g. mySQL or\nPostgreSQL), SQLite allows the programmer to use other common datatypes outside\nof the four mentioned above. This is why we are referring to \u003ccode\u003eTEXT INTEGER REAL\nBLOB\u003c/code\u003e as datatype \"categories\". All other common datatypes are lumped into one\nof the four existing datatypes recognized by SQLite. \u003c/p\u003e\n\n\u003cp\u003eFor example, \u003ccode\u003eINT\u003c/code\u003e is a common datatype used outside of SQLite. SQLite won't\ncomplain if you define a column as an \u003ccode\u003eINT\u003c/code\u003e datatype. It will simply lump it\ninto the \u003ccode\u003eINTEGER\u003c/code\u003e category and store it as such.\u003c/p\u003e\n\n\u003cp\u003eTo accommodate this, SQLite has a pretty complicated system of categorizing\ndatatypes that involves \u003ccode\u003eStorage Classes\u003c/code\u003e, \u003ccode\u003eType Affinities\u003c/code\u003e, and \u003ccode\u003eDatatypes\u003c/code\u003e.\nFor a deeper dive, check out the \u003ca href=\"http://www.sqlite.org/datatype3.html\"\u003eSQLite3 Documentation on Datatypes\u003c/a\u003e\u003c/p\u003e","exportId":"sqlite-data-types"},{"id":203809,"title":"SQL Select and Update","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-select-and-update\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-select-and-update/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-select-and-update\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-select-and-update/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover different ways to manipulate and select data from\nSQL database tables.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003eINSERT INTO\u003c/code\u003e command to insert data (i.e. rows) into a database\ntable\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eSELECT\u003c/code\u003e statements to select data from a database table\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eWHERE\u003c/code\u003e clause to select data from specific table rows\u003c/li\u003e\n\u003cli\u003eUse comparison operators, like \u003ccode\u003e\u0026lt;\u003c/code\u003e or \u003ccode\u003e\u0026gt;\u003c/code\u003e, to select specific data\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eUPDATE\u003c/code\u003e statements to update data within a database table\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eDELETE\u003c/code\u003e statements to delete data from a database table\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eSetting Up Our Database\u003c/h2\u003e\n\n\u003cp\u003eIn this code along, we'll be creating a \u003ccode\u003ecats\u003c/code\u003e table in a \u003ccode\u003epets_database.db\u003c/code\u003e.\nSo, let's navigate to our terminal and get started.\u003c/p\u003e\n\n\u003cp\u003eFirst let's create our \u003ccode\u003epets_database\u003c/code\u003e by running the following the command in\nthe terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have a database, let's create our \u003ccode\u003ecats\u003c/code\u003e table along with \u003ccode\u003eid\u003c/code\u003e,\n\u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eage\u003c/code\u003e and \u003ccode\u003ebreed\u003c/code\u003e columns.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  breed TEXT\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, let's start storing some cats.\u003c/p\u003e\n\n\u003ch3\u003eCode Along I: INSERT INTO\u003c/h3\u003e\n\n\u003cp\u003eIn your terminal, in the sqlite prompt, type the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed) VALUES ('Maru', 3, 'Scottish Fold');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe use the \u003ccode\u003eINSERT INTO\u003c/code\u003e command, followed by the name of the table to which we\nwant to add data. Then, in parentheses, we put the column names that we will be\nfilling with data. This is followed by the \u003ccode\u003eVALUES\u003c/code\u003e keyword, which is\naccompanied by a parentheses enclosed list of the values that correspond to each\ncolumn name.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e Note that we \u003cem\u003edidn't specify\u003c/em\u003e the \"id\" column name or value.\nSince we created the \u003ccode\u003ecats\u003c/code\u003e table with an \"id\" column whose type is \u003ccode\u003eINTEGER\nPRIMARY KEY\u003c/code\u003e, we don't have to specify the id column values when we insert data.\nPrimary Key columns are auto-incrementing. As long as you have defined an id\ncolumn with a data type of \u003ccode\u003eINTEGER PRIMARY KEY\u003c/code\u003e, a newly inserted row's id\ncolumn will be automatically given the correct value.\u003c/p\u003e\n\n\u003cp\u003eLet's add a few more cats to our table. This time we'll do this via our text\neditor. Create a file, \u003ccode\u003e01_insert_cats_into_cats_table.sql\u003c/code\u003e. Use two \u003ccode\u003eINSERT\nINTO\u003c/code\u003e statements to insert the following cats into the table:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003ename\u003c/th\u003e\n    \u003cth\u003eage\u003c/th\u003e\n    \u003cth\u003ebreed\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\"Lil' Bub\"\u003c/td\u003e\n    \u003ctd\u003e5\u003c/td\u003e\n    \u003ctd\u003e\"American Shorthair\"\u003c/td\u003e\n  \u003c/tr\u003e  \n  \u003ctr\u003e\n    \u003ctd\u003e\"Hannah\"\u003c/td\u003e\n    \u003ctd\u003e1\u003c/td\u003e\n    \u003ctd\u003e\"Tabby\"\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eEach \u003ccode\u003eINSERT INTO\u003c/code\u003e statement gets its own line in the \u003ccode\u003e.sql\u003c/code\u003e file in your text\neditor. Each line needs to end with a \u003ccode\u003e;\u003c/code\u003e. Run the file with the following code\nin your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db \u0026lt; 01_insert_cats_into_cats_table.sql\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e This command should be run from your terminal prompt, not in the\n\u003ccode\u003esqlite\u003c/code\u003e console.\u003c/p\u003e\n\n\u003cp\u003eNow, we'll learn how to \u003ccode\u003eSELECT\u003c/code\u003e data from a table, which will help us to\nconfirm that we inserted the above data correctly.\u003c/p\u003e\n\n\u003ch2\u003eSelecting Data\u003c/h2\u003e\n\n\u003cp\u003eNow that we've inserted some data into our \u003ccode\u003ecats\u003c/code\u003e table, we likely want to read\nthat data. This is where the \u003ccode\u003eSELECT\u003c/code\u003e statement comes in. We use it to retrieve\ndatabase data, or rows.\u003c/p\u003e\n\n\u003ch3\u003eCode Along II: SELECT FROM\u003c/h3\u003e\n\n\u003cp\u003eA basic \u003ccode\u003eSELECT\u003c/code\u003e statement works like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT [names of columns we are going to select] FROM [table we are selecting from];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe specify the names of the columns we want to SELECT and then tell SQL the\ntable we want to select them FROM.\u003c/p\u003e\n\n\u003cp\u003eWe want to select all the rows in our table, and we want to return the data\nstored in any and all columns in those rows. To do this, we could pass the name\nof each column explicitly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT id, name, age, breed FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich should give us back:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1|Maru|3|Scottish Fold\u003cbr\u003e2|Lil' Bub|5|American Shorthair\u003cbr\u003e3|Hannah|1|Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA faster way to get data from every column in our table is to use a special\nselector, known commonly as the 'wildcard' selector \u003ccode\u003e*\u003c/code\u003e. The \u003ccode\u003e*\u003c/code\u003e selector means:\n\"Give me all the data from all the columns for all of the cats\" Using the\nwildcard, we can \u003ccode\u003eSELECT\u003c/code\u003e all the data from all of the columns in the cats table\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's try out some more specific \u003ccode\u003eSELECT\u003c/code\u003e statements:\u003c/p\u003e\n\n\u003ch4\u003eSelecting by Column Names\u003c/h4\u003e\n\n\u003cp\u003eTo select just certain columns from a table, use the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT name FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat should return the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMaru\u003cbr\u003eLil' Bub\u003cbr\u003eHannah\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can even select more than one column name at a time. For example, try out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT name, age FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e If you have duplicate data (for example, two cats with the same\nname) and you only want to select unique values, you can use the \u003ccode\u003eDISTINCT\u003c/code\u003e\nkeyword. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT DISTINCT name FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eSelecting Based on Conditions: The \u003ccode\u003eWHERE\u003c/code\u003e Clause\u003c/h4\u003e\n\n\u003cp\u003eWhat happens when we want to retrieve a specific table row? For example the row\nthat belongs to Maru? Or to retrieve all the baby cats who are younger than two\nyears old? We can use the \u003ccode\u003eWHERE\u003c/code\u003e keyword to select data based on specific\nconditions. Here's an example of a boilerplate \u003ccode\u003eSELECT\u003c/code\u003e statement using a\n\u003ccode\u003eWHERE\u003c/code\u003e clause.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM [table name] WHERE [column name] = [some value];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's retrieve \u003cem\u003ejust Maru\u003c/em\u003e from our \u003ccode\u003ecats\u003c/code\u003e table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE name = \"Maru\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat statement should return the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1|Maru|3|Scottish Fold\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also use comparison operators, like \u003ccode\u003e\u0026lt;\u003c/code\u003e or \u003ccode\u003e\u0026gt;\u003c/code\u003e to select specific data.\nLet's give it a shot. Use the following statement to select the young cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE age \u0026lt; 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e The SQL statements we're learning here will eventually be used to\nintegrate the applications you'll build with a database. For example, it's easy\nto imagine a web application that has many users. When a user signs into your\napp, you'll need to access your database and select the user that matches the\ncredentials an individual is using to log in.\u003c/p\u003e\n\n\u003ch2\u003eUpdating Data\u003c/h2\u003e\n\n\u003cp\u003eLet's talk about updating, or changing, data in our table rows. We do this with\nthe \u003ccode\u003eUPDATE\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch3\u003eCode Along III: UPDATE\u003c/h3\u003e\n\n\u003cp\u003eA boilerplate \u003ccode\u003eUPDATE\u003c/code\u003e statement looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUPDATE [table name] SET [column name] = [new value] WHERE [column name] = [value];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eUPDATE\u003c/code\u003e statement uses a \u003ccode\u003eWHERE\u003c/code\u003e clause to grab the row you want to update.\nIt identifies the table name you are looking in and resets the data in a\nparticular column to a new value.\u003c/p\u003e\n\n\u003cp\u003eLet's update one of our cats. Turns out Maru's friend Hannah is actually Maru's\nfriend \u003cem\u003eHana\u003c/em\u003e. Let's update that row to change the name to the correct spelling:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUPDATE cats SET name = \"Hana\" WHERE name = \"Hannah\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOne last thing before we move on: deleting table rows.\u003c/p\u003e\n\n\u003ch2\u003eDeleting Data\u003c/h2\u003e\n\n\u003cp\u003eTo delete table rows, we use the \u003ccode\u003eDELETE\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch3\u003eCode Along IV: DELETE\u003c/h3\u003e\n\n\u003cp\u003eA boilerplate \u003ccode\u003eDELETE\u003c/code\u003e statement looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDELETE FROM [table name] WHERE [column name] = [value];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's go ahead and delete Hana from our \u003ccode\u003ecats\u003c/code\u003e table (it turns out Hana is\nactually an iguana):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDELETE FROM cats WHERE id = 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that this time we selected the row to delete using the Primary Key\ncolumn. Remember that every table row has a Primary Key column that is unique.\nHana was the third row in the database and thus had an id of \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e","exportId":"sql-select-and-update"},{"id":203810,"title":"SQL Queries","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-queries\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-queries/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-queries\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-queries/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover how to write SQL queries to retrieve and add specific data to SQL database tables.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a query as an SQL statement that retrieves data from a database\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eORDER BY\u003c/code\u003e modifier to order tables by specific \u003ccode\u003eSELECT\u003c/code\u003e statements\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eASC\u003c/code\u003e and \u003ccode\u003eDESC\u003c/code\u003e modifiers to sort queries in ascending or descending\norder\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eLIMIT\u003c/code\u003e modifier to determine the number of records to retrieve from\na dataset\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eBETWEEN\u003c/code\u003e modifier to retrieve records that contain a value that is\nwithin a given range\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eNULL\u003c/code\u003e data type keyword to insert new records into a table\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eCOUNT\u003c/code\u003e function to count the number of records that meet a certain\ncondition\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eGROUP BY\u003c/code\u003e function to group your results according to the values in\na given column\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is a SQL Query?\u003c/h2\u003e\n\n\u003cp\u003eThe term \"query\" refers to any SQL statement that retrieves data from your\ndatabase. In fact, we've already written a number of SQL queries using basic\n\u003ccode\u003eSELECT\u003c/code\u003e statements. We've already seen how to retrieve single units of data, or\nrows, with queries like these:\u003c/p\u003e\n\n\u003cp\u003eTo select all of the rows from a \u003ccode\u003ecats\u003c/code\u003e table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo select only rows representing data meeting certain conditions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE name = \"Maru\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if, however, we wanted to select the oldest cat? Or all of the cats that\ndon't currently belong to an owner? Or all of the cats with short names?\u003c/p\u003e\n\n\u003cp\u003eData storage isn't very useful if we can't manipulate, view, and analyze that\ndata. Luckily for us, SQL is actually a powerful tool for doing just that.\u003c/p\u003e\n\n\u003cp\u003eIn this exercise, we'll walk through executing a handful of common and handy SQL queries.\u003c/p\u003e\n\n\u003ch2\u003eCode Along: SQL Queries\u003c/h2\u003e\n\n\u003ch3\u003eCreating our Database\u003c/h3\u003e\n\n\u003cp\u003eIn this code along, we'll be creating a \u003ccode\u003ecats\u003c/code\u003e table in a \u003ccode\u003epets_database.db\u003c/code\u003e.\nSo, let's navigate to our terminal and get started.\u003c/p\u003e\n\n\u003cp\u003eFirst let's create our \u003ccode\u003epets_database\u003c/code\u003e by running the following command.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have a database, let's create our \u003ccode\u003ecats\u003c/code\u003e table along with \u003ccode\u003eid\u003c/code\u003e,\n\u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eage\u003c/code\u003e, \u003ccode\u003ebreed\u003c/code\u003e, and \u003ccode\u003eowner_id\u003c/code\u003e columns.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  breed TEXT,\u003cbr\u003e  owner_id INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGood work. Let's quit the SQL interface by typing: \u003ccode\u003e.quit\u003c/code\u003e. You'll be returned\nto the shell prompt. Now, output the list of files (\u003ccode\u003els\u003c/code\u003e on Linux-based machines\nand \u003ccode\u003edir\u003c/code\u003e on Windows-based machines) in the terminal and see what just happened.\nA new file should appear called \u003ccode\u003epets_database.db\u003c/code\u003e! This is the binary\nrepresentation of the database. You can think of this like a .jpg file. It won't\nopen up in a text editor, but it does open up in the image viewer app. It is the\nsame way for .db files. They won't open in your editor, but they can be read by\nthe appropriate database engine.\u003c/p\u003e\n\n\u003cp\u003eLet's add some cats to our \u003ccode\u003ecats\u003c/code\u003e table to make this more interesting. Get back\nto the \u003ccode\u003esqlite\u003c/code\u003e prompt by running \u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e again. Then execute\neach of the following INSERT commands:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Maru\", 3 , \"Scottish Fold\", 1);\u003cbr\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Hana\", 1 , \"Tabby\", 1);\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Lil\\' Bub\", 5, \"American Shorthair\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Moe\", 10, \"Tabby\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Patches\", 2, \"Calico\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's check out our \u003ccode\u003ecats\u003c/code\u003e table now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1|Maru|3|Scottish Fold|1\u003cbr\u003e2|Hana|1|Tabby|1\u003cbr\u003e3|Lil\\' Bub|5|American Shorthair|\u003cbr\u003e4|Moe|10|Tabby|\u003cbr\u003e5|Patches|2|Calico|\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e You can format the output of your select statements with a few\nhelpful options:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e.headers on      # output the name of each column\n.mode column     # now we are in column mode, enabling us to run the next two .width commands\n.width auto      # adjusts and normalizes column width\u003cbr\u003e# or\n.width NUM1, NUM2 # customize column width\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the first two commands and then execute the above \u003ccode\u003eSELECT\u003c/code\u003e statement again\nand you should see something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed          owner_id  \u003cbr\u003e----------  ----------  ----------  -------------  ----------\u003cbr\u003e1           Maru        3           Scottish Fold  1\u003cbr\u003e2           Hana        1           Tabby          1\u003cbr\u003e3           Lil\\' Bub   5           American Shor\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e5           Patches     2           Calico\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eORDER BY\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe first query modifier we'll explore is \u003ccode\u003eORDER BY\u003c/code\u003e. This modifier allows us to\norder the table rows returned by a certain \u003ccode\u003eSELECT\u003c/code\u003e statement. Here's a\nboilerplate \u003ccode\u003eSELECT\u003c/code\u003e statement that uses \u003ccode\u003eORDER BY\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name FROM table_name ORDER BY column_name ASC|DESC;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's select our cats and order them by age:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY age;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e2           Hana        1           Tabby       1\u003cbr\u003e5           Patches     2           Calico\u003cbr\u003e1           Maru        3           Scottish F  1\u003cbr\u003e3           Lil\\' Bub   5           American S\u003cbr\u003e4           Moe         10          Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003eORDER BY\u003c/code\u003e, the default is to order in ascending order. If we want to\nspecify though, we can use \u003ccode\u003eASC\u003c/code\u003e for \"ascending\" or \u003ccode\u003eDESC\u003c/code\u003e for \"descending.\"\nLet's try to select all of our cats and sort them by age in descending order.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY age DESC;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e3           Lil\\' Bub   5           American S\u003cbr\u003e1           Maru        3           Scottish F  1\u003cbr\u003e5           Patches     2           Calico\u003cbr\u003e2           Hana        1           Tabby       1\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eLIMIT\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWhat if we want the oldest cat? If we want to select extremes from a database\ntable — for example, the employee with the highest paycheck or the patient\nwith the most recent appointment — we can use \u003ccode\u003eORDER BY\u003c/code\u003e in conjunction\nwith \u003ccode\u003eLIMIT\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eLIMIT\u003c/code\u003e is used to determine the number of records you want to return from a dataset. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY age DESC LIMIT 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis part of the statement: \u003ccode\u003eSELECT * FROM cats ORDER BY age DESC\u003c/code\u003e returns all\nof the cats in order from oldest to youngest. Setting a \u003ccode\u003eLIMIT\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e returns\njust the first, i.e. oldest, cat on the list.\u003c/p\u003e\n\n\u003cp\u003eExecute the above statement in your terminal and you should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e4           Moe         10          Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's get the two oldest cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY age DESC LIMIT 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExecute that statement and you should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e3           Lil\\' Bub   5           American S\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAs we've already established, being able to sort and select specific data sets\nis important. Continuing on with our example, let's say we urgently need to\nselect all of the cats whose age is between 1 and 3. To create such a query, we\ncan use \u003ccode\u003eBETWEEN\u003c/code\u003e. Here's a boilerplate \u003ccode\u003eSELECT\u003c/code\u003e statement using \u003ccode\u003eBETWEEN\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's try it out on our \u003ccode\u003ecats\u003c/code\u003e table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT name FROM cats WHERE age BETWEEN 1 AND 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMaru\u003cbr\u003eHana\u003cbr\u003ePatches\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eNULL\u003c/h3\u003e\n\n\u003cp\u003eLet's say the administrator of our Pets Database has found a new cat. This kitty\ndoesn't have a name yet, but should be added to our database right away. We can\nadd data with missing values using the \u003ccode\u003eNULL\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003cp\u003eLet's insert our new cat into the database. Our abandoned kitty has a breed, but\nno name or age as of yet:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed) VALUES (NULL, NULL, \"Tabby\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if we look at our \u003ccode\u003ecats\u003c/code\u003e data with \u003ccode\u003eSELECT * FROM cats;\u003c/code\u003e, we should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed          owner_id  \u003cbr\u003e----------  ----------  ----------  -------------  ----------\u003cbr\u003e1           Maru        3           Scottish Fold  1\u003cbr\u003e2           Hana        1           Tabby          1\u003cbr\u003e3           Lil\\' Bub   5           American Shor\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e5           Patches     2           Calico\u003cbr\u003e6                                   Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can even select the mysterious, nameless kitty with the following query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE name IS NULL;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e6                                   Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eCOUNT\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eNow, we'll talk about a SQL aggregate function, \u003ccode\u003eCOUNT\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSQL aggregate functions\u003c/strong\u003e are SQL statements that operate on groups of records\nin our database rather than individual records. For example, we can retrieve\nminimum and maximum values from a column, sum values in a column, get the\naverage of a column's values, or count a number of records that meet certain\nconditions. You can learn more about these SQL aggregators\n\u003ca href=\"http://www.sqlclauses.com/sql+aggregate+functions\"\u003ehere\u003c/a\u003e and\n\u003ca href=\"http://zetcode.com/db/sqlite/select/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor now, we'll just focus on \u003ccode\u003eCOUNT\u003c/code\u003e. \u003ccode\u003eCOUNT\u003c/code\u003e will count the number of records\nthat meet a certain condition. Here's a boilerplate SQL query using \u003ccode\u003eCOUNT\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e \"SELECT COUNT([column name]) FROM [table name] WHERE [column name] = [value]\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's try it out and count the number of cats who have an \u003ccode\u003eowner_id\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT COUNT(owner_id) FROM cats WHERE owner_id = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCOUNT(owner_id)\u003cbr\u003e---------------\u003cbr\u003e2\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eGROUP BY\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eLastly, we'll talk about the handy aggregate function \u003ccode\u003eGROUP BY\u003c/code\u003e. Like its name\nsuggests, it groups your results by a given column.\u003c/p\u003e\n\n\u003cp\u003eLet's take our table of cats\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed          owner_id  \u003cbr\u003e----------  ----------  ----------  -------------  ----------\u003cbr\u003e1           Maru        3           Scottish Fold  1\u003cbr\u003e2           Hana        1           Tabby          1\u003cbr\u003e3           Lil\\' Bub   5           American Shor\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e5           Patches     2           Calico\u003cbr\u003e6                                   Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we can see at a glance that there are three tabby cats and one of every\nother breed — but what if we had a larger database where we couldn't\neasily see the number of cats \u003cem\u003egrouped by\u003c/em\u003e breed? That's where — you\nguessed it! — \u003ccode\u003eGROUP BY\u003c/code\u003e comes in handy.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT breed, COUNT(breed) FROM cats GROUP BY breed;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebreed               COUNT(breed)\u003cbr\u003e------------------  ------------\u003cbr\u003eAmerican Shorthair  1\u003cbr\u003eCalico              1\u003cbr\u003eScottish Fold       1\u003cbr\u003eTabby               3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGROUP BY is a great function for aggregating results into different segments\n— you can even use it on multiple columns!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT breed, owner_id, COUNT(breed) FROM cats GROUP BY breed, owner_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBelow you can see that the cats are still grouped by breed but are also now\nfurther broken down by owner\u003cem\u003eid, so the two tabby cats without an owner\u003c/em\u003eid are\nlisted separately from the tabby who belongs to owner 1.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebreed               owner_id    COUNT(breed)\u003cbr\u003e------------------  ----------  ------------\u003cbr\u003eAmerican Shorthair              1\u003cbr\u003eCalico                          1\u003cbr\u003eScottish Fold       1           1\u003cbr\u003eTabby                           2\u003cbr\u003eTabby               1           1\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eNote on \u003ccode\u003eSELECT\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eWe are now familiar with this syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT name FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, you may not know that this can be written like this as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT cats.name FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBoth return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename\u003cbr\u003e----------\u003cbr\u003eMaru\u003cbr\u003eHana\u003cbr\u003eLil\\' Bub\u003cbr\u003eMoe\u003cbr\u003ePatches\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSQLite allows us to explicitly state the tableName.columnName we want to select. This is particularly useful when we want data from two different tables.\u003c/p\u003e\n\n\u003cp\u003eImagine we have another table called \u003ccode\u003edogs\u003c/code\u003e with a column for the dog names:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE dogs (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO dogs (name) VALUES (\"Clifford\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we want to get the names of all the dogs and cats, we can no longer run a\nquery with just the column name. \u003ccode\u003eSELECT name FROM cats,dogs;\u003c/code\u003e will return\n\u003ccode\u003eError: ambiguous column name: name\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eInstead, we must explicitly follow the tableName.columnName syntax.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT cats.name, dogs.name FROM cats, dogs;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou may see this in the future. Don't let it trip you up.\u003c/p\u003e","exportId":"sql-queries"},{"id":203811,"title":"SQL Grouping and Sorting","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-grouping-and-sorting-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-grouping-and-sorting-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-grouping-and-sorting-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-grouping-and-sorting-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain the importance of grouping and sorting data stored in a database\u003c/li\u003e\n\u003cli\u003eGroup and sort data with the \u003ccode\u003eGROUP BY()\u003c/code\u003e and \u003ccode\u003eORDER BY()\u003c/code\u003e keywords\u003c/li\u003e\n\u003cli\u003eCraft advanced queries using aggregator functions along with sorting keywords\nand other conditional clauses\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eGrouping and Sorting\u003c/h2\u003e\n\n\u003cp\u003eSQL isn't picky about how it returns data to you, based on your queries. It will\nsimply return the relevant table rows in the order in which they exist in the\ntable. This is often insufficient for the purposes of data analysis and\norganization.\u003c/p\u003e\n\n\u003cp\u003eHow common is it to order a list of items alphabetically? Or numerically from\nleast to greatest?\u003c/p\u003e\n\n\u003cp\u003eWe can tell our SQL queries and aggregate functions to group and sort our data\nusing several clauses:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eORDER BY()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLIMIT\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGROUP BY()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eHAVING\u003c/code\u003e and \u003ccode\u003eWHERE\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eASC\u003c/code\u003e/\u003ccode\u003eDESC\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's take a closer look at how we use these keywords to narrow our search\ncriteria as well as to order and group the results.\u003c/p\u003e\n\n\u003ch2\u003eSetting up the Database\u003c/h2\u003e\n\n\u003cp\u003eSome cats are very famous, and accordingly very wealthy. Our Pets Database will\nhave a \u003ccode\u003ecats\u003c/code\u003e table in which each cat has a name, age, breed, and net worth. Our\ndatabase will also have an \u003ccode\u003eowners\u003c/code\u003e table and \u003ccode\u003ecats_owners\u003c/code\u003e join table so that a\ncat can have many owners and an owner can have many cats.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCreating the Database:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn your terminal, create the database and start \u003ccode\u003esqlite3\u003c/code\u003e with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eCreating the tables:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eCreate the tables by entering the commands below at the \u003ccode\u003esqlite\u0026gt;\u003c/code\u003e prompt:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecats\u003c/code\u003e table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT,\u003cbr\u003enet_worth INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eowners\u003c/code\u003e Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecats_owners\u003c/code\u003e Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats_owners (\u003cbr\u003ecat_id INTEGER,\u003cbr\u003eowner_id INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eInserting the values:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFinally, to insert the values, enter the following:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecats\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (id, name, age, breed, net_worth) VALUES (1, \"Maru\", 3, \"Scottish Fold\", 1000000);\u003cbr\u003eINSERT INTO cats (id, name, age, breed, net_worth) VALUES (2, \"Hana\", 1, \"Tabby\", 21800);\u003cbr\u003eINSERT INTO cats (id, name, age, breed, net_worth) VALUES (3, \"Grumpy Cat\", 4, \"Persian\", 181600);\u003cbr\u003eINSERT INTO cats (id, name, age, breed, net_worth) VALUES (4, \"Lil\\' Bub\", 2, \"Tortoiseshell\", 2000000);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eowners\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"mugumogu\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Sophie\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Penny\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecats_owners\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (2, 2);\u003cbr\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (4, 3);\u003cbr\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (1, 2);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along I: \u003ccode\u003eORDER BY()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003ch4\u003eSyntax\u003c/h4\u003e\n\n\u003cp\u003eThe general syntax for selecting values and sorting them is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name, column_name\u003cbr\u003eFROM table_name\u003cbr\u003eORDER BY column_name ASC, column_name DESC;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that \u003ccode\u003eORDER BY()\u003c/code\u003e will automatically sort the returned values in\nascending order so the use of the \u003ccode\u003eASC\u003c/code\u003e keyword is optional. If we want\nto sort in descending order instead, we need to use the \u003ccode\u003eDESC\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch4\u003eExercise\u003c/h4\u003e\n\n\u003cp\u003eImagine you're working for an important investment firm in Manhattan. The\ninvestors are interested in investing in a lucrative and popular cat. They need\nyour help to decide which cat that will be. They want a list of famous and\nwealthy cats. We can do that by running a basic \u003ccode\u003eSELECT\u003c/code\u003e statement at the\n\u003ccode\u003esqlite\u0026gt;\u003c/code\u003e prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE net_worth \u0026gt; 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid           name             age         breed          net_worth\u003cbr\u003e-----------  ---------------  ----------  -------------  ----------\u003cbr\u003e1            Maru             3           Scottish Fold  1000000\u003cbr\u003e2            Hana             1           Tabby          21800\u003cbr\u003e3            Grumpy Cat       4           Persian        181600\u003cbr\u003e4            Lil\\' Bub        2           Tortoiseshell  2000000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur investors are busy people though. They don't have time to manually sort\nthrough this list of cats for the best candidate. They want you to return the\nlist to them with the cats sorted by net worth, from greatest to least.  \u003c/p\u003e\n\n\u003cp\u003eWe can do so with the following line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY(net_worth) DESC;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid           name             age         breed          net_worth\u003cbr\u003e-----------  ---------------  ----------  -------------  ----------\u003cbr\u003e4            Lil\\' Bub        2           Tortoiseshell  2000000\u003cbr\u003e1            Maru             3           Scottish Fold  1000000\u003cbr\u003e3            Grumpy Cat       4           Persian        181600\u003cbr\u003e2            Hana             1           Tabby          21800\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along II: The \u003ccode\u003eLIMIT\u003c/code\u003e Keyword\u003c/h3\u003e\n\n\u003cp\u003eTurns out our investors are very impatient. They don't want to review the list\nthemselves, they just want you to return to them the wealthiest cat. We can\naccomplish this by using the \u003ccode\u003eLIMIT\u003c/code\u003e keyword with the above query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY(net_worth) DESC LIMIT 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich will return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             age         breed          net_worth\u003cbr\u003e---------------  ----------  -------------  ----------\u003cbr\u003eLil\\' Bub        2           Tortoiseshell  2000000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eLIMIT\u003c/code\u003e keyword specifies how many of the records resulting from the query\nyou'd like to actually return. In this case, because we've sorted the records\nin descending order by net worth and set the \u003ccode\u003eLIMIT\u003c/code\u003e to 1, the wealthiest cat\nis returned.\u003c/p\u003e\n\n\u003ch3\u003eCode Along III: \u003ccode\u003eGROUP BY()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eGROUP BY()\u003c/code\u003e keyword is very similar to \u003ccode\u003eORDER BY()\u003c/code\u003e. The main difference is\nthat \u003ccode\u003eORDER BY()\u003c/code\u003e sorts sets of data returned by basic queries while \u003ccode\u003eGROUP BY()\u003c/code\u003e\nsorts sets of data returned by aggregate functions.\u003c/p\u003e\n\n\u003ch4\u003eSyntax\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name, aggregate_function(column_name)\u003cbr\u003eFROM table_name\u003cbr\u003eWHERE column_name operator value\u003cbr\u003eGROUP BY column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eExercise\u003c/h4\u003e\n\n\u003cp\u003eLet's calculate the sum of the net worth of all of the cats, grouped by owner name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT owners.name, SUM(cats.net_worth)\u003cbr\u003eFROM owners\u003cbr\u003eINNER JOIN cats_owners\u003cbr\u003eON owners.id = cats_owners.owner_id\u003cbr\u003eJOIN cats ON cats_owners.cat_id = cats.id\u003cbr\u003eGROUP BY owners.name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.name      SUM(cats.net_worth)\u003cbr\u003e---------------  -------------------\u003cbr\u003ePenny            2000000\u003cbr\u003eSophie           1021800\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If you have headers turned on, the headers you see in your terminal\nmay differ from the ones displayed here and below.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn the above query, we've implemented \u003cem\u003etwo\u003c/em\u003e joins. First, we're joining \u003ccode\u003eowners\u003c/code\u003e\nand \u003ccode\u003ecat_owners\u003c/code\u003e on \u003ccode\u003eowners.id = cats_owners.owner_id\u003c/code\u003e. This first joined table\nwould look like the following if we were to query it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.id  owners.name      cat_owners.cat_id  cat_owners.owner_id\u003cbr\u003e---------  -----------      -----------------  -------------------\u003cbr\u003e2          Sophie           2                  2\u003cbr\u003e3          Penny            4                  3\u003cbr\u003e2          Sophie           1                  2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this table, we then implement a \u003cem\u003esecond\u003c/em\u003e join with \u003ccode\u003ecats\u003c/code\u003e on\n\u003ccode\u003ecats_owners.cat_id = cats.id\u003c/code\u003e. To better understand this, try running the\nprovided query, but select \u003cem\u003eeverything\u003c/em\u003e rather than just the owner's name and\nthe sum of their cats' net worth, and remove the \u003ccode\u003eGROUP BY\u003c/code\u003e line. You'll be able\nto see all three tables have been joined.\u003c/p\u003e\n\n\u003cp\u003eIn our example query above, we need to use the \u003ccode\u003eSUM(cats.net_worth)\u003c/code\u003e aggregator\nin conjunction with \u003ccode\u003eGROUP BY\u003c/code\u003e to get the information we want. Without \u003ccode\u003eGROUP BY\u003c/code\u003e,\nonly the first owner in the table would be returned, along with the sum of the\nnet worth of \u003cem\u003eall\u003c/em\u003e the cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.name      SUM(cats.net_worth)\u003cbr\u003e---------------  -------------------\u003cbr\u003eSophie           3021800\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf, on the other hand, we forget to use \u003ccode\u003eSUM\u003c/code\u003e and just get \u003ccode\u003ecats.net_worth\u003c/code\u003e,\nthe results will be grouped by owner, but only the net worth of the \u003cem\u003efirst\u003c/em\u003e\ncat belonging to each owner will be returned, not the aggregate:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.name      cats.net_worth\u003cbr\u003e---------------  ---------------\u003cbr\u003ePenny            2000000\u003cbr\u003eSophie           21800\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we use \u003ccode\u003eSUM\u003c/code\u003e and \u003ccode\u003eGROUP BY\u003c/code\u003e together, \u003ccode\u003eSUM\u003c/code\u003e looks at all of the values in\nthe \u003ccode\u003enet_worth\u003c/code\u003e column of the \u003ccode\u003ecats\u003c/code\u003e table (or whichever column you specify in\nparentheses) and takes the sum of those values, but only \u003cem\u003eafter those cats have\nbeen grouped by owner\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.name      SUM(cats.net_worth)\u003cbr\u003e---------------  -------------------\u003cbr\u003ePenny            2000000\u003cbr\u003eSophie           1021800\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn our original data, Penny is the owner of Lil' Bub (2000000) while Sophie is\nthe owner of Maru and Hana (1000000 + 21800).\u003c/p\u003e\n\n\u003ch3\u003eCode Along IV: \u003ccode\u003eHAVING\u003c/code\u003e vs \u003ccode\u003eWHERE\u003c/code\u003e clause\u003c/h3\u003e\n\n\u003cp\u003eSuppose we have a table called \u003ccode\u003eemployee_bonus\u003c/code\u003e as shown below. Note that the\ntable has multiple entries for employees Abigail and Matthew.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eemployee_bonus\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003eEmployee\u003c/th\u003e\n    \u003cth\u003eBonus\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eMatthew\u003c/td\u003e\n    \u003ctd\u003e1000\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eAbigail\u003c/td\u003e\n    \u003ctd\u003e2000\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eMatthew\u003c/td\u003e\n    \u003ctd\u003e500\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eTom\u003c/td\u003e\n    \u003ctd\u003e700\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eAbigail\u003c/td\u003e\n    \u003ctd\u003e1250\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eTo calculate the total bonus that each employee received, we would write a SQL\nstatement like this:  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT employee, SUM(bonus) FROM employee_bonus GROUP BY employee;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eemployee         SUM(bonus)\u003cbr\u003e---------------  -------------------\u003cbr\u003eAbigail          3250\u003cbr\u003eMatthew          1500\u003cbr\u003eTom              700\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, suppose we wanted to find the employees who received more than $1,000 in\nbonuses. You might think that we could write a query like this:  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eBAD SQL:\u003cbr\u003eSELECT employee, SUM(bonus) FROM employee_bonus\u003cbr\u003eGROUP BY employee WHERE SUM(bonus) \u0026gt; 1000;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUnfortunately, the above will not work because the \u003ccode\u003eWHERE\u003c/code\u003e clause can't be used\nwith aggregates (\u003ccode\u003eSUM\u003c/code\u003e, \u003ccode\u003eAVG\u003c/code\u003e, \u003ccode\u003eMAX\u003c/code\u003e, etc). What we need to use is the \u003ccode\u003eHAVING\u003c/code\u003e\nclause. The \u003ccode\u003eHAVING\u003c/code\u003e clause was added to SQL so that we could compare aggregates\nin the same way that the \u003ccode\u003eWHERE\u003c/code\u003e clause can be used for comparing non-aggregates.\nNow, the correct SQL will look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGOOD SQL:\u003cbr\u003eSELECT employee, SUM(bonus) FROM employee_bonus\u003cbr\u003eGROUP BY employee HAVING SUM(bonus) \u0026gt; 1000;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eDifference between \u003ccode\u003eHAVING\u003c/code\u003e and \u003ccode\u003eWHERE\u003c/code\u003e clause\u003c/h4\u003e\n\n\u003cp\u003eThe difference between the \u003ccode\u003eHAVING\u003c/code\u003e and \u003ccode\u003eWHERE\u003c/code\u003e clauses in SQL is that the\n\u003ccode\u003eWHERE\u003c/code\u003e clause cannot be used with aggregates while the \u003ccode\u003eHAVING\u003c/code\u003e clause can.\n\u003ccode\u003eHAVING\u003c/code\u003e filters out groups of rows created by \u003ccode\u003eGROUP BY\u003c/code\u003e, and \u003ccode\u003eWHERE\u003c/code\u003e filters\nout individual rows. Note that there is nothing to stop you from using both\nof them in the same query.\u003c/p\u003e\n\n\u003cp\u003eFinally, it is important to remember that order matters here: \u003ccode\u003eWHERE\u003c/code\u003e must\ncome \u003cstrong\u003ebefore\u003c/strong\u003e \u003ccode\u003eGROUP BY\u003c/code\u003e and \u003ccode\u003eHAVING\u003c/code\u003e must come \u003cstrong\u003eafter\u003c/strong\u003e it, as shown\nbelow; changing the order will produce a  syntax error.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT\u003cbr\u003eFROM\u003cbr\u003eJOIN\u003cbr\u003e  ON\u003cbr\u003eWHERE\u003cbr\u003eGROUP BY\u003cbr\u003eHAVING\u003cbr\u003eORDER BY\u003cbr\u003eLIMIT\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.geeksforgeeks.org/difference-between-order-by-and-group-by-clause-in-sql/\"\u003e\u003ccode\u003eORDER BY\u003c/code\u003e vs \u003ccode\u003eGROUP BY\u003c/code\u003e clauses\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.essentialsql.com/what-is-the-difference-between-where-and-having-clauses/\"\u003e\u003ccode\u003eHAVING\u003c/code\u003e vs \u003ccode\u003eWHERE\u003c/code\u003e clauses\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=qfB1MRnzk4g\"\u003eVideo Review- SQL Joins Overview\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"sql-grouping-and-sorting"},{"id":203812,"title":"Organizing Bears Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-organizing-bears-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-organizing-bears-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-organizing-bears-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-organizing-bears-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Timothy_Treadwell\"\u003eTimothy Treadwell\u003c/a\u003e has a lot on\nhis plate protecting the bears of the Katmai National Park in Alaska. Help him\nkeep track of all of his bear friends using SQL.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://m2.paperblog.com/i/74/746121/lagghiacciante-morte-delluomo-grizzly-sbranat-L-rr7aep.jpeg\" alt=\"timothy-treadwell\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003eCREATE TABLE\u003c/code\u003e command to create a new table with various data types\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eINSERT INTO\u003c/code\u003e command to insert data (i.e. rows) into a database table\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eSELECT\u003c/code\u003e command with various functions and modifiers to write queries\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eLab Structure\u003c/h2\u003e\n\n\u003cp\u003eThis lab might seem a bit different than what you've seen before. Take a look at\nthe file structure:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── Gemfile\u003cbr\u003e├── README.md\u003cbr\u003e├── bin\u003cbr\u003e│\u0026nbsp;\u0026nbsp; ├── environment.rb # requires bundler and files\u003cbr\u003e│\u0026nbsp;\u0026nbsp; ├── run.rb # instantiates the SQLRunner class in the below file\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── sql_runner.rb # holds a class that handles executing your .sql files\u003cbr\u003e├── lib\u003cbr\u003e│\u0026nbsp;\u0026nbsp; ├── create.sql # where you create your schema\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── insert.sql # where you insert your data\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── seed.sql # data for in-memory database\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── sql_queries.rb # where you write your sql queries\u003cbr\u003e└── spec # all the specs\u003cbr\u003e    ├── create_spec.rb # this tests your create.sql file\u003cbr\u003e    ├── insert_spec.rb # this tests your insert.sql file\u003cbr\u003e    ├── select_spec.rb # this tests the queries you write in this file\u003cbr\u003e    └── spec_helper.rb\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eA Note on Testing\u003c/h3\u003e\n\n\u003cp\u003eLet's briefly go over what is happening in the \u003ccode\u003ebefore\u003c/code\u003e block that our tests will be using.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebefore do\u003cbr\u003e  @db = SQLite3::Database.new(':memory:')\u003cbr\u003e  @sql_runner = SQLRunner.new(@db)\u003cbr\u003e  @sql_runner.execute_create_file\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore each test two important things happen.\u003c/p\u003e\n\n\u003cp\u003eFirst, a new in-memory database is created. Why do we do this? Let's say we run\nour tests and they add ten items to our database. If we did not use an in-memory\nstore, those would be in there forever. This way our database gets thrown out\nafter every running of the tests. You can learn more about in-memory databases\n\u003ca href=\"https://www.sqlite.org/inmemorydb.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eNext, a new \u003ccode\u003eSqlRunner\u003c/code\u003e class is created. The \u003ccode\u003eSqlRunner\u003c/code\u003e class lives in your\n\u003ccode\u003ebin\u003c/code\u003e directory and was created to help connect to the database.\u003c/p\u003e\n\n\u003ch2\u003ePart 1: \u003ccode\u003eCREATE TABLE\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eGet the tests in \u003ccode\u003espec/create_spec.rb\u003c/code\u003e to pass. Your \u003ccode\u003eCREATE\u003c/code\u003e statement should\nlook something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE bears (\u003cbr\u003e  //columns here\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour columns should be the following types:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003ecolumn\u003c/th\u003e\n    \u003cth\u003etype\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eid\u003c/td\u003e\n    \u003ctd\u003einteger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ename\u003c/td\u003e\n    \u003ctd\u003etext\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eage\u003c/td\u003e\n    \u003ctd\u003einteger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003esex\u003c/td\u003e\n    \u003ctd\u003etext\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ecolor\u003c/td\u003e\n    \u003ctd\u003etext\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003etemperament\u003c/td\u003e\n    \u003ctd\u003etext\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ealive\u003c/td\u003e\n    \u003ctd\u003eboolean\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eRead about \u003ca href=\"https://www.sqlite.org/datatype3.html\"\u003eSQLite3 Datatypes\u003c/a\u003e to\ndetermine what your insert values are going to be. Be sure to pay attention to\nhow booleans are expressed in SQLite3.\u003c/p\u003e\n\n\u003ch2\u003ePart 2: \u003ccode\u003eINSERT\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eGet the tests in \u003ccode\u003espec/insert_spec.rb\u003c/code\u003e to pass. Input the following 8 bears (you\ncan make up details about them, but make sex either 'M' or 'F'):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMr. Chocolate\u003c/li\u003e\n\u003cli\u003eRowdy\u003c/li\u003e\n\u003cli\u003eTabitha\u003c/li\u003e\n\u003cli\u003eSergeant Brown\u003c/li\u003e\n\u003cli\u003eMelissa\u003c/li\u003e\n\u003cli\u003eGrinch\u003c/li\u003e\n\u003cli\u003eWendy\u003c/li\u003e\n\u003cli\u003eunnamed (the bear that killed Tim didn't have a name; refer back to how to\ncreate a record that doesn't have one value)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003ePart 3: \u003ccode\u003eSELECT\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eGet the tests in \u003ccode\u003espec/select_spec.rb\u003c/code\u003e to pass. Note that for this section, the\ndatabase will be seeded with external data from the \u003ccode\u003elib/seed.sql\u003c/code\u003e file so don't\nexpect it to reflect the data you added above. Note: Since it's a Ruby file,\nwrite your queries as strings in the \u003ccode\u003elib/sql_queries.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou may be expected to use SQL statements that you're not particularly familiar\nwith. Make sure you use the resources and Google to find the right statements.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.sqlite.org/datatype3.html\"\u003eSQL Datatypes\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.sqlite.org/lang_select.html#resultset\"\u003eSQL GROUP BY\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g7e693e2e50b6f4fb9478ec60152b3955"},{"id":203813,"title":"Aggregate Functions","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-aggregate-functions-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover basic aggregate functions and how to write SQL queries that utilize them.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine aggregate functions and when to use them\u003c/li\u003e\n\u003cli\u003eUse the following aggregate functions in SQL queries: \u003ccode\u003eaverage\u003c/code\u003e, \u003ccode\u003esum\u003c/code\u003e,\n\u003ccode\u003ecount\u003c/code\u003e, \u003ccode\u003eminimum\u003c/code\u003e, \u003ccode\u003emaximum\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOperating on Data\u003c/h2\u003e\n\n\u003cp\u003eImagine writing an application for a restaurant owner to track her customers and\ntransactions, or an app that an e-commerce company uses to store users,\ntransactions and shopping behaviors. Think about creating a social networking\napplication whose administrators want to keep track of the number of times users\nlog on to identify who their most frequent users are. It's easy to see that\nstoring or persisting information in an application or program is about more\nthan just keeping track of static data. We can imagine any number of situations\nin which we want to operate on or analyze the data we store. Our restaurant\nowner will want to discover who her biggest spenders are or what they make on\naverage over a busy weekend. Our e-commerce company wants to know who their most\nfrequent buyers are and how much they spend on average on a given item, and so\non.\u003c/p\u003e\n\n\u003cp\u003eWe can do so using the aggregate functions that SQL makes available to us. With\nthese functions we can sum and average column data, request minimum and maximum\nvalues, and more. SQL also includes keywords that allow us to group aggregated\ndata by various categories and narrow our search criteria based on various\nconditions.\u003c/p\u003e\n\n\u003ch2\u003eAggregate Functions\u003c/h2\u003e\n\n\u003cp\u003eAggregate functions perform a calculation on specified values, queried from a\ndatabase table. We will cover the following aggregators here:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eAVG\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSUM\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCOUNT\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMIN\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMAX\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe'll craft queries that select a desired set of values from a table and then\naggregate that data using the above aggregators, in addition to clauses that\nwill group and/or order the returned data based on various conditions.\u003c/p\u003e\n\n\u003cp\u003eFor this walk-through, we'll be utilizing a database of pets and owners.\u003c/p\u003e\n\n\u003ch2\u003eSetting up the Database\u003c/h2\u003e\n\n\u003cp\u003eSome cats are very famous and, accordingly, very wealthy. Our pets database will\nhave a cats table in which each cat has a name, age, breed, and net worth.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCreating the Database:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eCreate the database in your terminal with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eCreating the table:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003esqlite\u0026gt;\u003c/code\u003e prompt in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  breed TEXT,\u003cbr\u003e  net_worth INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eInserting the values:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed, net_worth) VALUES (\"Maru\", 3, \"Scottish Fold\", 1000000);\u003cbr\u003eINSERT INTO cats (name, age, breed, net_worth) VALUES (\"Hana\", 1, \"Tabby\", 21000);\u003cbr\u003eINSERT INTO cats (name, age, breed, net_worth) VALUES (\"Grumpy Cat\", 4, \"Persian\", 181800);\u003cbr\u003eINSERT INTO cats (name, age, breed, net_worth) VALUES (\"Lil' Bub\", 2, \"Tortoiseshell\", 3000000);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eConfirming our Data:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eshould return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             age         breed          net_worth\u003cbr\u003e---------------  ----------  -------------  ----------\u003cbr\u003eMaru             3           Scottish Fold  1000000\u003cbr\u003eHana             1           Tabby          21000\u003cbr\u003eGrumpy Cat       4           Persian        181800\u003cbr\u003eLil' Bub         2           Tortoiseshell  3000000  \n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUsing Aggregators\u003c/h2\u003e\n\n\u003ch3\u003eCode Along I: \u003ccode\u003eAVG()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe average, \u003ccode\u003eAVG()\u003c/code\u003e, function returns the average value of a column. Here's how\nit works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT AVG(column_name) FROM table_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's write a query to grab the average net worth of our very lucrative cats.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT AVG(net_worth) FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAVG(net_worth)\u003cbr\u003e---------------\u003cbr\u003e1050700.0\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat return value is a little ugly, however. Let's use the \u003ccode\u003eAS\u003c/code\u003e keyword to\nrename the column. This is called \"aliasing the return value\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT AVG(net_worth) AS average_net_worth FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaverage_net_worth\u003cbr\u003e--------------------\u003cbr\u003e1050700.0\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along II: \u003ccode\u003eSUM()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe sum, \u003ccode\u003eSUM()\u003c/code\u003e, function returns the sum of all of the values in a particular\ncolumn.\u003c/p\u003e\n\n\u003cp\u003eHere's how it works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT SUM(column_name) FROM table_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's try it out by calculating the sum of the net worths of all of our cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT SUM(net_worth) FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSUM(net_worth)\u003cbr\u003e--------------------\u003cbr\u003e4202800\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along III: \u003ccode\u003eMIN()\u003c/code\u003e and \u003ccode\u003eMAX()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe minimum and maximum aggregator functions return the minimum and maximum\nvalues from a specified column respectively.\u003c/p\u003e\n\n\u003cp\u003eHere's how it works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT MIN(column_name) FROM table_name;\u003cbr\u003eSELECT MAX(column_name) FROM table_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's try it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT MIN(net_worth) FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMIN(net_worth)\u003cbr\u003e--------------------\u003cbr\u003e21000\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along IV: \u003ccode\u003eCOUNT()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe count function returns the number of rows that meet a certain condition.\u003c/p\u003e\n\n\u003cp\u003eHere's how it works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT COUNT(column_name) FROM table_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use the \u003ccode\u003eCOUNT()\u003c/code\u003e function to calculate the total number of rows in a\ntable that are not \u003ccode\u003eNULL\u003c/code\u003e. \u003ccode\u003eNULL\u003c/code\u003e means empty. All of our cats have a \u003ccode\u003ename\u003c/code\u003e so\nwe can call \u003ccode\u003eCOUNT\u003c/code\u003e on the name column like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT COUNT(name) FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCOUNT(name)\u003cbr\u003e--------------------\u003cbr\u003e4\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have a total of four cats in our Cats table with a name. If we really didn't\ncare about a specific column and we just wanted the total number of rows in our\ndatabase we can call \u003ccode\u003eCOUNT(*)\u003c/code\u003e. \u003ccode\u003e*\u003c/code\u003e means everything. Sometimes it's called the\n\"wildcard.\" This \u003ccode\u003eCOUNT(*)\u003c/code\u003e will count the rows where at least one column has\ndata in it.\u003c/p\u003e\n\n\u003cp\u003eWe can also use \u003ccode\u003eCOUNT()\u003c/code\u003e to count the total number of rows in a table that meet\na certain condition. Let's use this aggregator to count the number of cats whose\nnet worth is greater than one million:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT COUNT(*) FROM cats WHERE net_worth \u0026gt; 1000000;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCOUNT(*)\u003cbr\u003e--------------------\u003cbr\u003e1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause only Lil' Bub is \u003cem\u003ethat\u003c/em\u003e rich.\u003c/p\u003e","exportId":"aggregate-functions"},{"id":203814,"title":"Aggregate Functions Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-aggregate-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFind the min and max of a number set\u003c/li\u003e\n\u003cli\u003eCount the total of a number set\u003c/li\u003e\n\u003cli\u003eFind the average of a number set\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe have a database full of students. The schema is as follows:\n\u003cimg src=\"http://readme-pics.s3.amazonaws.com/sql-students.png\" alt=\"\"\u003e\nRun \u003ccode\u003elearn test\u003c/code\u003e to get started. Write your \u003ccode\u003eSQL\u003c/code\u003e in \u003ccode\u003elib/students.rb\u003c/code\u003e to get the specs in \u003ccode\u003espec/student_spec.rb\u003c/code\u003e to pass.\u003c/p\u003e\n\n\u003cp\u003eNote: Since it's a Ruby file, write your queries as strings inside each method already defined in \u003ccode\u003elib/students.rb\u003c/code\u003e .\u003c/p\u003e","exportId":"g8829b92272a6bfccd209af92dfe5a0d6"},{"id":203815,"title":"SQL Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-intro-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've learned all about the basics of SQL. With SQL, we can store and find our\nstored data. SQL has many variations, but in this module, we specifically\ncovered using SQLite which will be the type of database that we work with\nthroughout this course.\u003c/p\u003e\n\n\u003cp\u003eOver the past several lessons we covered:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eHow to create and open a database file and table\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe three specific SQLite database types\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHow to create advanced queries using aggregator functions\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRelational database mapping in object-oriented programming--including\nconnecting to a database, creating tables and finding/saving data.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis gives us the foundational tools of understanding how to build and\nmanipulate databases. This will tie into future concepts, as we cover databases\nand Ruby more in-depth.\u003c/p\u003e","exportId":"sql-conclusion"}]},{"id":21899,"name":"Table Relations in SQL","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g2f66bb4ac0723d1b9d75ad9b1b96b4bb","items":[{"id":203816,"title":"Introduction to Table Relations in SQL","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eKnowing at least the basics of writing SQL is a useful programming skill. The\nmajority of databases you'll work with as a developer will have more than one\ntable, and those tables will be connected together in various ways to form table\nrelationships.\u003c/p\u003e\n\n\u003cp\u003eIn this section we'll cover:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe structure of a relational database as tables\u003c/li\u003e\n\u003cli\u003ePrimary key and foreign keys\u003c/li\u003e\n\u003cli\u003eHow to associate data tables using a foreign key column\u003c/li\u003e\n\u003cli\u003eHow to model a \"many-to-many\" object association\u003c/li\u003e\n\u003cli\u003eHow a join table is used\u003c/li\u003e\n\u003cli\u003eDistinguishing the different types of relationships between data in a database\u003c/li\u003e\n\u003cli\u003eDifferent types of joins\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOver the next several lessons we'll discuss having multiple tables in a\ndatabase, how to define relationships between different tables, and explain the\ndifferent types of table relationships that can exist.\u003c/p\u003e","exportId":"introduction-to-table-relations-in-sql"},{"id":203817,"title":"Table Relations Database Basics","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-relational-database-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-relational-database-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-relational-database-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-relational-database-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll introduce the concept of relational databases and how they recognize relations among stored items of information.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe the structure of a relational database as tables related through the use of primary and foreign keys\u003c/li\u003e\n\u003cli\u003eDefine a primary key\u003c/li\u003e\n\u003cli\u003eDefine a foreign key\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eRelational Databases\u003c/h2\u003e\n\n\u003cp\u003eLet's say that you've been hired by a big and important company to do the payroll for all of their employees. We'll call it MyFace (inspired by nothing in particular). Every two weeks, you need to look up each and every employee and how much they get paid, and send them a check \u003cem\u003eand\u003c/em\u003e send a notice of that check to their manager (managers, after all, should know when their employees are getting paid). \u003c/p\u003e\n\n\u003cp\u003eIn addition, let's say that managers get paid every month, instead of every two weeks. So, once a month we need to go through the spreadsheet again, find \u003cem\u003ejust the managers\u003c/em\u003e, and send them \u003cem\u003etheir\u003c/em\u003e checks. In such a situation, we would need a place to store all of the managers and employees. \u003c/p\u003e\n\n\u003cp\u003eUsing a spreadsheet, your storage system might look something like this: \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-09-03%20at%205.12.12%20PM.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSo every two weeks, we would have to look through every single entry in this spreadsheet, send each person their check, and then figure out a way to identify an employee's manager to send that manager a confirmation that each employee has been paid. We need some way to \u003cem\u003eassociate\u003c/em\u003e the employees to their manager. We could add a \"Manager\" column to the spreadsheet that would be filled out with the name of that person's manager (if that person is an employee and not a manager themselves). This is getting messy. Not only do we have to do a lot of searching through the spreadsheet and manual detection of who is an employee and who is a manager, but we also have to match each employee with the name of their manager. If only there was some way to simplify our system!\u003c/p\u003e\n\n\u003cp\u003eEnter relational databases. A relational database, simply put, is \u003cstrong\u003ea database structured to recognize relations among stored items of information.\u003c/strong\u003e In such a system, it would be easy to tell an employee that they \u003cem\u003ebelong to\u003c/em\u003e a certain manager and to tell a manager that they \u003cem\u003ehave many\u003c/em\u003e employees. This might sound familiar if you've built object oriented Ruby programs in which instances of a class are related to one another. A relational database will allow us to store representations of our Ruby objects and preserve the relationships between those objects when we store them. \u003c/p\u003e\n\n\u003ch3\u003eRelational Database Structure\u003c/h3\u003e\n\n\u003cp\u003eContinuing with our payroll example from earlier, employees and managers would be stored in their own \u003cstrong\u003etables\u003c/strong\u003e. A table is like a spreadsheet; it has columns and rows. \u003c/p\u003e\n\n\u003cp\u003eOur managers table would look something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://cloud.githubusercontent.com/assets/18357112/17033515/7617ab2a-4f4c-11e6-8545-f179bdeeb500.JPG\" alt=\"managers table\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd our employees table would look something like this: \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://cloud.githubusercontent.com/assets/18357112/17033522/7d7ac122-4f4c-11e6-9116-2cfebe111f27.JPG\" alt=\"employees table\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOur employees table has a \"Manager ID\" column, filled with the ID number of that person's manager. In a relational database, every row has a number, called a \u003cstrong\u003eprimary key\u003c/strong\u003e. Relationships between tables can be established by using a \u003cstrong\u003eforeign key\u003c/strong\u003e column, like our \"Manager ID\" column, that uses that primary key of another table to refer to a member of that table. \u003c/p\u003e\n\n\u003cp\u003eWhy should our foreign key, our point of reference between an employee and his or her manager, be a number? Why not just use the manager's name? Well, names are very rarely unique. What if MyFace hires a new manager, also named Steve? It's a popular name, after all. How would our database know \u003cem\u003ewhich\u003c/em\u003e Steve manages which employees. Primary keys, on the other hand, \u003cstrong\u003eare always unique!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAdditionally, what if Steve gets sick of sharing his name with all of the other Steves out there and decides to change his name to Brittany? We would have to look up every single employee that had Steve as a manager and change a \"Manager Name\" column to \"Brittany\". We are programmers, we're lazy, we like to code for the future and our databases are no exception. If we use primary keys, i.e. numbers that never change and always refer to the same manager, our database can accommodate something like a manager's name change with ease. \u003c/p\u003e\n\n\u003cp\u003eNow, with these separated but related tables, our job just got a lot easier. We should thank...\u003c/p\u003e\n\n\u003ch2\u003eEdgar Codd\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Edgar_F_Codd.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eEdgar Codd invented the concept of the relational database, in other words, he came up with the idea that storing data in tables, indexed by primary key and related by foreign keys would \u003cem\u003enormalize\u003c/em\u003e that data. \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAt the time, Nixon was normalizing relations with China.\u0026nbsp; I figured that if he could normalize relations, then so could I.\u003c/p\u003e\n\n\u003cp\u003e-–Edgar Codd\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eCodd developed Relational Database Theory as a graduate student. Afterwards, he worked with Don Chamberlain at IBM to create a language that would allow the user to traverse these relational databases for specific subsets of information. \u003c/p\u003e\n\n\u003cp\u003eThe language they created was SQL––Structured (or Standard) Query Language. SQL allows the user to carry out queries like \"find the employees who make more than the managers\", or \"find the managers whose employees make under $X\" in an efficient and sensical manner. Before SQL, database queries were all about \u003cem\u003ewhere\u003c/em\u003e data was stored, instead of \u003cem\u003ewhat\u003c/em\u003e data a user is looking for. \u003c/p\u003e","exportId":"table-relations-database-basics"},{"id":203818,"title":"Associating Tables with Foreign Keys","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-associating-tables-with-foreign-keys\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-associating-tables-with-foreign-keys/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-associating-tables-with-foreign-keys\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-associating-tables-with-foreign-keys/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll relate data from one table to data from another table using foreign keys. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eAssociate two data tables using a foreign key column\u003c/li\u003e\n\u003cli\u003eDetermine which of the two tables you're associating together will take in a foreign key column\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Relate Tables?\u003c/h2\u003e\n\n\u003cp\u003eIt's hard to imagine an application that saves data but doesn't relate it. For example––a Facebook user is associated to other users via \"friendships\", an Amazon user has a shopping cart full of items, a blog's author has many posts and posts might in turn have many tags. All of these examples require different datasets to be related or associated to one another. \u003c/p\u003e\n\n\u003ch2\u003eRelating Tables with Foreign Keys\u003c/h2\u003e\n\n\u003cp\u003eContinuing the posts and authors examples, you could say that an author \u003cem\u003ehas many\u003c/em\u003e posts. The reciprocal of this would be that a post \u003cem\u003ebelongs to\u003c/em\u003e an author. Now we need to figure out how we can represent that relationship within the constraints of SQLite. If you were writing just plain Ruby, how would you represent this relationship? In our \u003ccode\u003eAuthor\u003c/code\u003e class we would have an array of \u003ccode\u003ePost\u003c/code\u003e objects. Our \u003ccode\u003ePost\u003c/code\u003e object would have a single attribute that holds its \u003ccode\u003eAuthor\u003c/code\u003e. This is great in Ruby, but there is no data type for arrays in SQL. You can only have \u003ccode\u003eINTEGER\u003c/code\u003e, \u003ccode\u003eFLOAT\u003c/code\u003e, and \u003ccode\u003eTEXT\u003c/code\u003e. So developers had to figure out how to relate two rows (a \u003ccode\u003ePost\u003c/code\u003e and an \u003ccode\u003eAuthor\u003c/code\u003e) using only those data types. Is there any way we can convert an \u003ccode\u003eINTEGER\u003c/code\u003e into a specific row in a table? OH YEAH. The \u003ccode\u003eid\u003c/code\u003e column or \u003ccode\u003ePRIMARY KEY\u003c/code\u003e for each row is a unique \u003ccode\u003eINTEGER\u003c/code\u003e identifier for that row. Let's say the Post \"10 Ways to Pet Your Cat\" is written by \"Joe Burgess\", and Joe's \u003ccode\u003eid\u003c/code\u003e is 5. We just need to add a new column to our Posts table with the \u003ccode\u003eid\u003c/code\u003e of the Author that it's related to. Let's call this column \u003ccode\u003eauthor_id\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhy didn't we do the reverse? Why didn't we add a list of Post IDs to a single Author row? The answer is pretty straight forward. Is there an array data type? Is there really any way to store multiple items in a single column? Nope! So we just set up the relation in one direction.\u003c/p\u003e\n\n\u003cp\u003eThis \u003ccode\u003eauthor_id\u003c/code\u003e column is called a \"foreign key\".\u003c/p\u003e\n\n\u003cp\u003eTo associate one table to another, give one table a column called \"foreign key\" with a type of \u003ccode\u003eINTEGER\u003c/code\u003e and insert the primary key of another table row into that column. In other words, if we have a blogging app, we might have a users table and a posts table. Posts belong to the user that wrote that post. So, the posts table would have a foreign key column. An individual post's foreign key value would be the primary key ID of the user who authored that post. \u003c/p\u003e\n\n\u003cp\u003eThis is a little confusing, so let's build out our own example together. \u003c/p\u003e\n\n\u003ch3\u003eCode Along I: Relating Cats to Owners\u003c/h3\u003e\n\n\u003cp\u003eLet's say we are creating an app that helps a veterinary office manage the pets it sees as patients and the owners of those pets. Let's say this vet is very particular and specializes in cats. Our app will have a database that has a \u003ccode\u003ecats\u003c/code\u003e table and an \u003ccode\u003eowners\u003c/code\u003e table. We will need a way to relate, or connect, these two tables such that a given cat is associated to its owner and a given owner is associated to the cat (or cats) it owns.\u003c/p\u003e\n\n\u003cp\u003eFor this exercise, we'll be working with a \u003ccode\u003epets_database\u003c/code\u003e. In your terminal, create the database with the \u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e command. Let's set up our two tables now. \u003c/p\u003e\n\n\u003ch4\u003eStep 1: Creating the Cats Table\u003c/h4\u003e\n\n\u003cp\u003eIn the \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e prompt in your terminal, create the table with the following statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, go ahead and insert the following cats into the table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed)\u003cbr\u003eVALUES (\"Maru\", 3, \"Scottish Fold\");\u003cbr\u003e\u003cbr\u003eINSERT INTO cats (name, age, breed)\u003cbr\u003eVALUES (\"Hana\", 1, \"Tabby\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eStep 2: Creating the Owners Table\u003c/h4\u003e\n\n\u003cp\u003eFirst, we need to create our owners table. An owner should have an ID that is a primary key integer and a name that is text: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have our owners table, we can add a foreign key column to the pets table. \u003c/p\u003e\n\n\u003ch4\u003eStep 3: Add Foreign Key to Cats Table\u003c/h4\u003e\n\n\u003cp\u003eUse the following statement to add this column: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eALTER TABLE cats ADD COLUMN owner_id INTEGER;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCheck your \u003ccode\u003ecats\u003c/code\u003e schema with \u003ccode\u003e.schema\u003c/code\u003e and you should see the following: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT,\u003cbr\u003eowner_id INTEGER);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now we're ready to associate cats to their owners by creating an owner and assigning that owner's ID to certain cats' \u003ccode\u003eowner_id\u003c/code\u003e column. \u003c/p\u003e\n\n\u003ch4\u003eStep 4: Associating Cats to Owners\u003c/h4\u003e\n\n\u003cp\u003eFirst, let's make a new owner: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"mugumogu\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCheck that we did that correctly with the following statement: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM owners;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 | mugumogu\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMugumogu is the owner of both Hana and Maru. Let's create our associations: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUPDATE cats SET owner_id = 1 WHERE name = \"Maru\";\u003cbr\u003eUPDATE cats SET owner_id = 1 WHERE name = \"Hana\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's check out our updated \u003ccode\u003ecats\u003c/code\u003e table: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE owner_id = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 | Maru | 3 | Scottish Fold | 1\u003cbr\u003e2 | Hana | 1 | Tabby         | 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eEstablishing Foreign Key: Determining Which Table Gets a \"foreign key\" Column\u003c/h3\u003e\n\n\u003cp\u003eWhy did we decide to give our \u003ccode\u003ecats\u003c/code\u003e table the foreign key column and not the \u003ccode\u003eowners\u003c/code\u003e table? Similarly, in the example from the beginning of this exercise, why would we give a \u003ccode\u003eposts\u003c/code\u003e table a foreign key of \u003ccode\u003euser_id\u003c/code\u003e and not the other way around? \u003c/p\u003e\n\n\u003cp\u003eLet's look at what would happen if we tried to add cats directly to the \u003ccode\u003eowners\u003c/code\u003e table.\u003c/p\u003e\n\n\u003cp\u003eAdding the first cat, \"Maru\", to the owner \"mugumogu\" would look something like this: \u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003cth\u003ecat_id\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003emugumogu\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eSo far so good. But what happens when we need to add a second cat, \"Hana\", to the same owner?\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003cth\u003ecat_id1\u003c/th\u003e\n\u003cth\u003ecat_id2\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003emugumogu\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eWhat if this owner gets \u003cem\u003eyet another cat?\u003c/em\u003e We'd have to keep growing our table horizontally, potentially forever. That is not efficient, or organized. \u003c/p\u003e\n\n\u003cp\u003eWe can also think about the relationship between our owners and our cats in the context of a \"has many\" and \"belongs to\" relationship. An owner can have many cats, but –– at least for the purposes of this example –– a cat can only belong to one owner. Similarly, a user can write many posts, but each post was written by, and therefore belongs to, only one user.\u003c/p\u003e\n\n\u003cp\u003eThe thing that \"has many\" is considered to be the parent. The thing that \"belongs to\" we'll call the child. The child table gets the foreign key column, the value of which is the primary key of that data's/row's parent. \u003c/p\u003e\n\n\u003cp\u003ePractice SQL Queries on \u003ca href=\"http://sqlbolt.com/lesson/select_queries_review\"\u003eSQLBolt\u003c/a\u003e.\u003c/p\u003e","exportId":"associating-tables-with-foreign-keys"},{"id":203819,"title":"SQL Joins","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-intro-to-joins\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-intro-to-joins/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-intro-to-joins\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-intro-to-joins/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll discuss how to retrieve specific sets of data from associated tables using SQL join statements. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe how SQL join clauses combine data from multiple tables based on a common column between them\u003c/li\u003e\n\u003cli\u003eDefine the different types of SQL joins: inner, outer, left outer, right outer\u003c/li\u003e\n\u003cli\u003ePractice writing join statements\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat Is a JOIN?\u003c/h2\u003e\n\n\u003cp\u003eA SQL JOIN clause is a way to combine rows from two or more tables, based on a common column between them. The great thing about relational databases is that they are just that––\u003cem\u003erelational\u003c/em\u003e. Relational databases allow us not only to store data that is interconnected, but to retrieve that data in ways that reflect that interconnectivity. \u003c/p\u003e\n\n\u003cp\u003eLet's say, for example, we have two tables, a Cats table and an Owners table. Cats and owners are associated by a foreign key of \u003ccode\u003eowner_id\u003c/code\u003e in the Cats table. How would we craft a query that would grab us all of the cats with a particular owner, and even include information about that owner in the data returned to us by that query? We know how to write a \u003ccode\u003eSELECT\u003c/code\u003e statement that gets us all of the cats with a particular \u003ccode\u003eowner_id\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE owner_id = 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis would return us the appropriate list of cats. But what if we wanted to query \u003cem\u003eboth\u003c/em\u003e the Cats and the Owners tables and return information about both cats and owners? This is where JOIN statements come in. \u003c/p\u003e\n\n\u003ch2\u003eJOIN Types\u003c/h2\u003e\n\n\u003cp\u003eThere are several different types of joins that we will cover in this lesson. The following JOIN keywords will be crafted into \u003ccode\u003eSELECT\u003c/code\u003e statements to achieve the described return values.  \u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eINNER JOIN\u003c/td\u003e\n\u003ctd\u003eReturns all rows when there is at least one match in BOTH tables\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLEFT [OUTER] JOIN\u003c/td\u003e\n\u003ctd\u003eReturns all rows from the left table, and the matched rows from the right table\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRIGHT JOIN*\u003c/td\u003e\n\u003ctd\u003eReturns all rows from the right table, and the matched rows from the left table\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFULL JOIN*\u003c/td\u003e\n\u003ctd\u003eReturns all rows when there is a match in ONE of the tables\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003ccode\u003e* Not supported by SQLite\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Unfortunately, SQLite does not support the RIGHT JOIN or the FULL OUTER JOIN clauses. However, you can \u003ca href=\"http://www.sqlitetutorial.net/sqlite-full-outer-join/\"\u003eemulate\u003c/a\u003e the FULL OUTER JOIN by using the LEFT JOIN clause.\u003c/p\u003e\n\n\u003cp\u003eIn the following code-along, we'll be crafting JOIN statements of each of the above types in order to return data about a series of connected database tables.\u003c/p\u003e\n\n\u003cp\u003eFor this code-along, we'll be working with a database of pets and owners. Let's set it up:\u003c/p\u003e\n\n\u003ch2\u003eSetting Up the Database\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate your database in your terminal with the following command:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eNow, inside the \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e prompt, create the following tables and insert the values:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eCats Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT,\u003cbr\u003eowner_id INTEGER);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eOwners Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eInsert Data:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"mugumogu\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Sophie\");\u003cbr\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Maru\", 3, \"Scottish Fold\", 1);\u003cbr\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Hana\", 3, \"Tabby\", 1);\u003cbr\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Nona\", 4, \"Tortoiseshell\", 2);\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Lil' Bub\", 2, \"perma-kitten\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eA Note on Foreign Keys\u003c/h3\u003e\n\n\u003cp\u003eNote that the Cats table has an \u003ccode\u003eowner_id\u003c/code\u003e column. This column is a \u003cstrong\u003eforeign key\u003c/strong\u003e that connects each cat to an individual owner. If an individual cat has an \u003ccode\u003eowner_id\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e, that indicates that that cat belongs to the owner who has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eTo confirm this, you can run the following \u003ccode\u003eSELECT\u003c/code\u003e statement in your \u003ccode\u003esqlite3\u003c/code\u003e prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE owner_id = 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see just one cat returned to us, the one that belongs to Sophie, our second owner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid               name             age         breed          owner_id        \u003cbr\u003e---------------  ---------------  ----------  -------------  ----------\u003cbr\u003e3                Nona             4           Tortoiseshell  2\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCode Along I: INNER JOIN\u003c/h2\u003e\n\n\u003ch3\u003eDefinition\u003c/h3\u003e\n\n\u003cp\u003eAn INNER JOIN query will return \u003cem\u003eall\u003c/em\u003e the rows from both tables you are querying where a certain condition is met. In other words, INNER JOIN will select all rows from both tables as long as there is a match between the specified columns of each table.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at a boiler-plate INNER JOIN statement, before we try it out on our \u003ccode\u003epets_database\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s)\u003cbr\u003eFROM first_table\u003cbr\u003eINNER JOIN second_table\u003cbr\u003eON first_table.column_name = second_table.column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis may not make sense to you just yet. Let's try it out with our own database in order to gain a better understanding. \u003c/p\u003e\n\n\u003ch3\u003eWriting INNER JOINs\u003c/h3\u003e\n\n\u003cp\u003eEnter into your database via \u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e, if you're not there already. Let's write an INNER JOIN query that will return the name and breed of the cat along with the name of that cat's owner.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name \u003cbr\u003eFROM Cats \u003cbr\u003eINNER JOIN Owners\u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break this down:\n\u003ccode\u003esql\nSELECT Cats.name, Cats.breed, Owners.name ...\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eHere, we are specifying which columns from each table we want to select data from. We use the \u003ccode\u003etable_name.column_name\u003c/code\u003e notation to grab columns from two different tables.\u003c/p\u003e\n\n\u003cp\u003eNext up, we join our two tables together with our \u003ccode\u003eINNER JOIN\u003c/code\u003e keyword: \n\u003ccode\u003esql\n...FROM Cats INNER JOIN Owners\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eLastly, we tell our query \u003cem\u003ehow\u003c/em\u003e to connect, or join, the two tables. In other words, we tell our query which columns in each table function as the foreign key/primary key connection. Through this, our query will correctly identify which cat belongs to which owner and return that information accordingly. \n\u003ccode\u003esql\n...ON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eHere, we are telling our query that the \u003ccode\u003eowner_id\u003c/code\u003e column on the Cats table is filled with data that corresponds to data in the \u003ccode\u003eid\u003c/code\u003e column of the Owners table. We are indicating that a value of \u003ccode\u003e1\u003c/code\u003e, for example, in an individual cat's \u003ccode\u003eowner_id\u003c/code\u003e column refers to the individual owner who has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e. And we are telling our query to return \u003cem\u003eonly\u003c/em\u003e those cats and owners who share this connection.\u003c/p\u003e\n\n\u003cp\u003eThe above statement should return the following:\n```sql\nname             breed            name\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eMaru             Scottish Fold    mugumogu\u003cbr\u003e\nHana             Tabby            mugumogu\u003cbr\u003e\nNona             Tortoiseshell    Sophie\u003cbr\u003e\n```   \u003c/p\u003e\n\n\u003cp\u003eWe did it! We wrote an INNER JOIN query that returns to us all of the data in the specified columns from both tables. \u003c/p\u003e\n\n\u003cp\u003eNotice that the owner's name column is called \u003ccode\u003ename\u003c/code\u003e in the output above. That is because we requested the \u003ccode\u003ename\u003c/code\u003e column from the Owners table. For this particular output though, it would be great if the column could read \"owners_name\", to distinguish it from the cat's name column. \u003c/p\u003e\n\n\u003cp\u003eLet's run that query again, this time aliasing the \u003ccode\u003ename\u003c/code\u003e column of the Owners table as \u003ccode\u003eowners_name\u003c/code\u003e, using the \u003ccode\u003eAS\u003c/code\u003e keyword:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name \u003cbr\u003eAS \"owner_name\" \u003cbr\u003eFROM Cats \u003cbr\u003eINNER JOIN Owners \u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             breed            owner_name\u003cbr\u003e---------------  ---------------  ----------\u003cbr\u003eMaru             Scottish Fold    mugumogu  \u003cbr\u003eHana             Tabby            mugumogu  \u003cbr\u003eNona             Tortoiseshell    Sophie \n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eA Note on INNER JOINs, or, Where's Lil' Bub?\u003c/h3\u003e\n\n\u003cp\u003eWhen we say that an INNER JOIN returns all of the data for which a certain condition is true, we mean that any data that does not meet a JOIN condition will not be returned. The JOIN condition, in this case, is the thing that our two tables are joined \u003cem\u003eon\u003c/em\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e...ON Cats.owner_id = Owners.id;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eOur query, therefore, will select all of the appropriate data concerning cats and owners who \u003cem\u003eare\u003c/em\u003e joined by an \u003ccode\u003eowner_id\u003c/code\u003e/\u003ccode\u003eid\u003c/code\u003e foreign key/primary key relationship. In other words, it will select all of the cats who have a value in the \u003ccode\u003eowner_id\u003c/code\u003e column that matches a value in the \u003ccode\u003eid\u003c/code\u003e column of the Owners table. Any cats that have an empty \u003ccode\u003eowner_id\u003c/code\u003e column, or have a value in that column that does not match the \u003ccode\u003eid\u003c/code\u003e of an existing owner, will not be selected by the query. \u003c/p\u003e\n\n\u003cp\u003eYou might have noticed that the data returned by our query did not include Lil' Bub. That's because when we inserted Lil' Bub into our Cats table, we didn't give her an \u003ccode\u003eowner_id\u003c/code\u003e.  \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Lil_Bub_2013_(crop_for_thumb).jpg\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOther types of JOIN statements, however, can return such data.  \u003c/p\u003e\n\n\u003ch2\u003eCode Along II: LEFT OUTER JOIN\u003c/h2\u003e\n\n\u003cp\u003eI don't know about you, but I miss Lil' Bub. It would be nice if we could query our database for both cat and owner information \u003cem\u003ewithout\u003c/em\u003e excluding her. With a LEFT OUTER JOIN we can do just that. \u003c/p\u003e\n\n\u003ch3\u003eDefinition\u003c/h3\u003e\n\n\u003cp\u003eA LEFT OUTER JOIN query returns \u003cem\u003eall\u003c/em\u003e rows from the left, or first, table, regardless of whether or not they met the JOIN condition. The query will also return the matched data from the right, or second, table. \u003c/p\u003e\n\n\u003cp\u003eIn the case of data from the first table that doesn't meet our JOIN condition, the resulting output will include \u003ccode\u003eNULL\u003c/code\u003e, or empty, values for the missing matched columns. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look at a boiler-plate LEFT OUTER JOIN:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s)\u003cbr\u003eFROM first_table\u003cbr\u003eLEFT [OUTER] JOIN second_table\u003cbr\u003eON first_table.column_name=second_table.column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's try it out on our \u003ccode\u003epets_database\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eWriting LEFT OUTER JOINs\u003c/h3\u003e\n\n\u003cp\u003eExecute the following command in your \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e prompt in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name \u003cbr\u003eFROM Cats \u003cbr\u003eLEFT OUTER JOIN Owners \u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following output returned to you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             breed            name      \u003cbr\u003e---------------  ---------------  ----------\u003cbr\u003eMaru             Scottish Fold    mugumogu  \u003cbr\u003eHana             Tabby            mugumogu  \u003cbr\u003eNona             Tortoiseshell    Sophie \u003cbr\u003eLil' Bub         perma-kitten                \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, our LEFT OUTER JOIN has returned to us \u003cem\u003eall\u003c/em\u003e of the cats (including Lil' Bub!), with matched data regarding owner's name for those cats that have an owner, and empty space in the owner's name column for the cat that doesn't have an owner. \u003c/p\u003e\n\n\u003ch2\u003eRIGHT OUTER JOIN and FULL OUTER JOIN\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e SQLite doesn't currently support RIGHT OUTER JOINs or FULL OUTER JOINs. However, we'll review it briefly here so you can see how it works in other Databases, like Postgres. This section isn't a code-along, just read it through and try to get comfortable with the code provided. \u003c/p\u003e\n\n\u003ch3\u003eRIGHT OUTER JOIN\u003c/h3\u003e\n\n\u003cp\u003eThe RIGHT OUTER JOIN is the reverse of the LEFT OUTER JOIN. It will return \u003cem\u003eall\u003c/em\u003e data from the right, or second, table and the matched data from the left, or first table. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look a boiler-plate RIGHT OUTER JOIN query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s)\u003cbr\u003eFROM first_table\u003cbr\u003eRIGHT JOIN second_table\u003cbr\u003eON first_table.column_name = second_table.column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore we (pretend to) write our own RIGHT OUTER JOIN, let's insert a new owner into our Owners table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"Penny\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have an owner who is not currently associated to a cat. This gives us something to work with to illustrate our RIGHT OUTER JOIN. \u003c/p\u003e\n\n\u003ch3\u003eWriting RIGHT OUTER JOINs\u003c/h3\u003e\n\n\u003cp\u003eThe following query would constitute a RIGHT OUTER JOIN:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name \u003cbr\u003eFROM Cats \u003cbr\u003eRIGHT OUTER JOIN Owners \u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis would return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             breed            name      \u003cbr\u003e---------------  ---------------  ----------\u003cbr\u003eMaru             Scottish Fold    mugumogu  \u003cbr\u003eHana             Tabby            mugumogu  \u003cbr\u003eNona             Tortoiseshell    Sophie    \u003cbr\u003e                                  Penny  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that Lil' Bub is once again missing, but our cat-less owner, Penny, is present and accounted for. That is because the RIGHT OUTER JOIN will select \u003cem\u003eall\u003c/em\u003e of the data from the second table and only the matched data from the first table. \u003c/p\u003e\n\n\u003ch3\u003eFULL OUTER JOIN\u003c/h3\u003e\n\n\u003cp\u003eFULL OUTER JOIN queries will combine the result of both a LEFT and RIGHT OUTER JOIN. In other words, they will return \u003cem\u003eall\u003c/em\u003e the data from both the first and second tables.\u003c/p\u003e\n\n\u003cp\u003eHere's a boiler-plate example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s)\u003cbr\u003eFROM first_table\u003cbr\u003eFULL OUTER JOIN second_table\u003cbr\u003eON first_table.column_name = second_table.column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eWriting FULL OUTER JOINs\u003c/h3\u003e\n\n\u003cp\u003eA FULL OUTER JOIN for our Cats and Owners tables would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name\u003cbr\u003eFROM Cats\u003cbr\u003eFULL OUTER JOIN Owners\u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt would return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             breed            name      \u003cbr\u003e---------------  ---------------  ----------\u003cbr\u003eMaru             Scottish Fold    mugumogu  \u003cbr\u003eHana             Tabby            mugumogu  \u003cbr\u003eNona             Tortoiseshell    Sophie \u003cbr\u003eLil' Bub         perma-kitten \u003cbr\u003e                                  Penny               \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur result includes both cats without owners and owners without cats. In other words, it includes \u003cem\u003eall\u003c/em\u003e of our data. \u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.sqlitetutorial.net/sqlite-full-outer-join/\"\u003eSQLite FULL OUTER JOIN Emulation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"sql-joins"},{"id":203820,"title":"Creating Join Tables","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-creating-join-tables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-creating-join-tables/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-creating-join-tables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-creating-join-tables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn to distinguish between the different types of relationships between data in your database: the \"belongs to\"/\"has many\" and \"many-to-many\" relationships. \u003c/li\u003e\n\u003cli\u003eUnderstand how to build each type of relationship via either the use of foreign keys or the use of a join table. \u003c/li\u003e\n\u003cli\u003eUnderstand what a join table is and how it functions. \u003c/li\u003e\n\u003cli\u003eBuild a join table and query data from it. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eData Relations\u003c/h2\u003e\n\n\u003cp\u003eAs programmers, we understand the data we are manipulating to be real. In other words, we write programs to solve real-world problems or handle real-world situations. Whether you're developing a web application that helps doctors and hospitals around the country manage patient information or coding a command line game, the code we write is modeled on real situations and things. This is true of our databases and tables as well as code we write in Ruby, Objective C, you name it. \u003c/p\u003e\n\n\u003cp\u003eWe use databases to store information that represents real-world entities. We might have an employee database in which an individual row in an Employees table represents one real, individual employee. Such a database might also have a Managers table that is related to the employees table. Real-world objects and environments are relational. Employees belong to managers, pets belong to owners, a person has many friends. Our relational databases have the ability to reflect that related-ness.\u003c/p\u003e\n\n\u003cp\u003eIn relational databases, we can actually categorize the type of relationship that exists between the data that we are storing. There are two basic types of relationship that we need to concern ourselves with right now: The \"has many\"/\"belongs to\" relationship and the \"many-to-many\" relationship. Let's take a closer look. \u003c/p\u003e\n\n\u003ch2\u003eThe \"has many\"/\"belongs to\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eLet's imagine a database that keeps track of pets and their owners. This Pet's Database has an Owners table and a Cats table. The Cats table has a column, \u003ccode\u003eowner_id\u003c/code\u003e, that contains a foreign key corresponding to the \u003ccode\u003eid\u003c/code\u003e column of the Owners table. \u003c/p\u003e\n\n\u003cp\u003eIn this way, an individual cat is associated to the person that owns it. Any number of cats can have the same owner. In other words, any number of cats can have the same \u003ccode\u003eowner_id\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's say we have the following owners:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid               name      \u003cbr\u003e---------------  ----------\u003cbr\u003e1                mugumogu  \u003cbr\u003e2                Sophie    \u003cbr\u003e3                Penny   \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd the following cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid               name        age         owner_id    breed        \u003cbr\u003e---------------  ----------  ----------  ----------  -------------\u003cbr\u003e1                Maru        3           1           Scottish Fold\u003cbr\u003e2                Hana        1           1           Tabby        \u003cbr\u003e3                Nona        4           2           Tortoiseshell\u003cbr\u003e4                Lil' Bub    2                       perma-kitten \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that both Maru and Hana have the same value in the \u003ccode\u003eowner_id\u003c/code\u003e column, a value of \u003ccode\u003e1\u003c/code\u003e. This corresponds to the owner from the Owners table who has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e. Both Maru and Hana, therefore, have the same owner: mugumogu. If we run a query to select all of the cats whose \u003ccode\u003eowner_id\u003c/code\u003e is \u003ccode\u003e1\u003c/code\u003e, we'll return both Maru and Hana. \u003c/p\u003e\n\n\u003cp\u003eThe following query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite\u0026gt; SELECT * FROM cats WHERE owner_id = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ereturns: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid               name        age         owner_id    breed        \u003cbr\u003e---------------  ----------  ----------  ----------  -------------\u003cbr\u003e1                Maru        3           1           Scottish Fold\u003cbr\u003e2                Hana        1           1           Tabby        \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur first owner, mugumogu, \u003cem\u003ehas many\u003c/em\u003e cats. Both Hana and Maru \u003cem\u003ebelong to\u003c/em\u003e mugumogu. This is the \"has many\"/\"belongs to\" relationship. \u003c/p\u003e\n\n\u003ch3\u003eEnacting The Relationship Through Foreign Keys\u003c/h3\u003e\n\n\u003cp\u003eThe \"has many\"/\"belongs to\" relationship is created through the use of foreign keys. The Cats table has an \u003ccode\u003eowner_id\u003c/code\u003e column which is the foreign key column. It contains information that corresponds to the \u003ccode\u003eid\u003c/code\u003e column of the Owners table. \u003c/p\u003e\n\n\u003cp\u003eThe table that contains the foreign key column is the table that contains the entities that \"belong to\" another entity. The table that is referenced via the foreign key is the parent or owner entity that \"has many\" of something else. This relationship works because multiple entities in the \"belonging\" or child table can have the same foreign key. \u003c/p\u003e\n\n\u003cp\u003eWhat happens, though, when a cat realizes it can live the good life by hanging out with the family across the street for extra food and care? Such a cat would have \u003cem\u003emore than one owner\u003c/em\u003e. Our \"has many\"/\"belongs to\" relationship is no longer adequate. \u003c/p\u003e\n\n\u003cp\u003eHow might we account for a cat with many owners? Well, we could continue to add additional \u003ccode\u003eowner_id\u003c/code\u003e columns to the cats table. For example we could add an \u003ccode\u003eowner_id_1\u003c/code\u003e, \u003ccode\u003eowner_id_2\u003c/code\u003e, \u003ccode\u003eowner_id_3\u003c/code\u003e column and so on. This is not practical however. It requires us to change our schema by continuing to add columns every time a cat gains a new owner. This means our Cats table could grow to contain a possibly infinite number of columns (some cats are very popular, after all). \u003c/p\u003e\n\n\u003cp\u003eWe can avoid this undesirable horizontal table growth with the use of a join table. \u003c/p\u003e\n\n\u003ch2\u003eJoin Tables and the \"many-to-many\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003ejoin table\u003c/strong\u003e contains common fields from two or more other tables. In this way, it creates a many-to-many relationship between data. Let's take a closer look at this concept by building our own join table in the following code-along. \u003c/p\u003e\n\n\u003ch3\u003eCode Along I: Building a Join Table\u003c/h3\u003e\n\n\u003cp\u003eWe want to create a many-to-many association between cats and owners, such that a cat can have many owners and an owner can have many cats. Our join table will therefore have two columns, one for each of the tables we want to relate. We will have a \u003ccode\u003ecat_id\u003c/code\u003e column and an \u003ccode\u003eowner_id\u003c/code\u003e column. \u003c/p\u003e\n\n\u003cp\u003eLet's set up our database to get started:\u003c/p\u003e\n\n\u003ch3\u003eSetting Up the Database\u003c/h3\u003e\n\n\u003cp\u003eIn your terminal, create the Pet's Database by running the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCreate the following two tables:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCats Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eOwners Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInsert the following data:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInsert Data:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"mugumogu\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Sophie\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Penny\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Maru\", 3, \"Scottish Fold\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Hana\", 1, \"Tabby\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Nona\", 4, \"Tortoiseshell\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Lil' Bub\", 2, \"perma-kitten\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003ecats_owners\u003c/code\u003e Join Table\u003c/h3\u003e\n\n\u003ch4\u003eCreating the Table\u003c/h4\u003e\n\n\u003cp\u003eNow we're ready to create our join table. Since our table is creating a many-to-many relationship between cats and owners, we will call our table \u003ccode\u003ecats_owners\u003c/code\u003e. It is conventional to name your join tables using the names of the tables you are creating the many-to-many relationship between. \u003c/p\u003e\n\n\u003cp\u003eInside the \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e in your terminal, execute the following SQL statement to create our join table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats_owners (\u003cbr\u003ecat_id INTEGER,\u003cbr\u003eowner_id INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's confirm that worked by checking our schema. Type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3\u0026gt; .schema\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd you'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY, \u003cbr\u003ename TEXT, \u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT);\u003cbr\u003e\u003cbr\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\u003cbr\u003e\u003cbr\u003eCREATE TABLE cats_owners (\u003cbr\u003ecat_id INTEGER,\u003cbr\u003eowner_id INTEGER\u003cbr\u003e);\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! Now we're ready to start inserting some rows into our join table. \u003c/p\u003e\n\n\u003ch4\u003eInserting Data into the Join Table\u003c/h4\u003e\n\n\u003cp\u003eEach row in our join table will represent one cat/owner relationship. Let's say, for example, that Nona the cat has acquired a second owner, Penny. Now we want to represent that Nona has two owners, Sophie and Penny.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll insert the Nona/Sophie relationship into our join table. Recall that Nona the cat has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e3\u003c/code\u003e and Sophie the owner has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (3, 2);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's check the contents of our \u003ccode\u003ecats_owners\u003c/code\u003e table with a SELECT statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats_owners;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecat_id           owner_id  \u003cbr\u003e---------------  ----------\u003cbr\u003e3                2  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's insert the Nona/Penny relationship into our join table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (3, 3);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'll confirm this insertion with another SELECT statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats_owners;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecat_id           owner_id  \u003cbr\u003e---------------  ----------\u003cbr\u003e3                2         \u003cbr\u003e3                3    \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our table reflects that Nona, the cat with an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e3\u003c/code\u003e, has many (in this case two) owners. \u003c/p\u003e\n\n\u003cp\u003eThe great thing about our join table, however, is that it allows for the many-to-many relationship. We have a cat with many owners, now let's insert a row that will give a particular owner many cats. \u003c/p\u003e\n\n\u003cp\u003eSophie's dream has come true and now she is a co-owner of Maru the cat. Let's insert the appropriate row into our join table. Remember that Sophie has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e and Maru has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e. Let's insert that row:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (1, 2);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's run a SELECT statement to confirm that our insertion worked:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats_owners;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecat_id           owner_id  \u003cbr\u003e---------------  ----------\u003cbr\u003e3                2         \u003cbr\u003e3                3         \u003cbr\u003e1                2    \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNona, our cat with an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e3\u003c/code\u003e has many owners and Sophie, our owner with an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e, has many cats. Our many-to-many relationship is up and running. \u003c/p\u003e\n\n\u003cp\u003eNow let's take advantage of this association by running some queries that utilize our join table to return information about these complex relationships. \u003c/p\u003e\n\n\u003ch3\u003eCode Along II: Querying the Join Table\u003c/h3\u003e\n\n\u003ch4\u003eBasic Queries\u003c/h4\u003e\n\n\u003cp\u003eLet's SELECT from our join table all of the owners who are associated to cat number 3. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e SELECT cats_owners.owner_id \u003cbr\u003e FROM cats_owners \u003cbr\u003e WHERE cat_id = 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowner_id       \u003cbr\u003e---------------\u003cbr\u003e2              \u003cbr\u003e3       \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's SELECT all of the cats who are associated with owner number 2:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT cats_owners.cat_id \u003cbr\u003eFROM cats_owners \u003cbr\u003eWHERE owner_id = 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecat_id         \u003cbr\u003e---------------\u003cbr\u003e3              \u003cbr\u003e1   \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese queries are great, but it would be even better if we could write queries that would return us some further information about the cats and owners we are returning here, such as their names. Otherwise it becomes a little difficult to constantly remember cats and owners by ID only. We can do so by querying our join tables using JOIN statements. \u003c/p\u003e\n\n\u003ch4\u003eAdvanced Queries\u003c/h4\u003e\n\n\u003cp\u003eExecute the following query in the \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e prompt in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT owners.name \u003cbr\u003eFROM owners \u003cbr\u003eINNER JOIN cats_owners \u003cbr\u003eON owners.id = cats_owners.owner_id WHERE cats_owners.cat_id = 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename           \u003cbr\u003e---------------\u003cbr\u003eSophie         \u003cbr\u003ePenny  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break down the above query:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eSELECT owners.name\u003c/code\u003e - Here, we declare the column data that we want to actually have returned to us. \u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eFROM owners\u003c/code\u003e - Here, we specify the table whose column we are querying. \u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eINNER JOIN cats_owners ON owners.id = cats_owners.owner_id\u003c/code\u003e - Here, we are joining the \u003ccode\u003ecats_owners\u003c/code\u003e table on the \u003ccode\u003eowners\u003c/code\u003e table. We are telling our query to look for owners whose \u003ccode\u003eid\u003c/code\u003e column matches up to the \u003ccode\u003eowner_id\u003c/code\u003e column in the \u003ccode\u003ecats_owners\u003c/code\u003e table. \u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eWHERE cats_owners.cat_id = 3;\u003c/code\u003e - Here, we are adding an additional condition to our query. We are telling our query to look at the \u003ccode\u003ecats_owners\u003c/code\u003e table rows where the value of the \u003ccode\u003ecat_id\u003c/code\u003e column is \u003ccode\u003e3\u003c/code\u003e. Then, \u003cem\u003efor those rows only\u003c/em\u003e, cross reference the \u003ccode\u003eowner_id\u003c/code\u003e column value with the \u003ccode\u003eid\u003c/code\u003e column in the \u003ccode\u003eowners\u003c/code\u003e table. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's take a look at a boiler-plate query that utilizes a JOIN statement to query a join table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column(s)\u003cbr\u003eFROM table_one\u003cbr\u003eINNER JOIN table_two\u003cbr\u003eON table_one.column_name = table_two.column_name\u003cbr\u003eWHERE table_two.column_name = condition;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGiving this one more try, let's query the join table for the names of all of the cats owned by Sophie:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT cats.name\u003cbr\u003eFROM cats\u003cbr\u003eINNER JOIN cats_owners\u003cbr\u003eON cats.id = cats_owners.cat_id\u003cbr\u003eWHERE cats_owners.owner_id = 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename           \u003cbr\u003e---------------\u003cbr\u003eNona           \u003cbr\u003eMaru \n\u003c/code\u003e\u003c/pre\u003e","exportId":"creating-join-tables"},{"id":203821,"title":"SQL Crowdfunding Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-crowdfunding-join-table-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-crowdfunding-join-table-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-crowdfunding-join-table-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-crowdfunding-join-table-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify table example\u003cbr\u003e\n\u003c/li\u003e\n\u003cli\u003eCreate a new table, records, and queries\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIdentify Table Example\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eSQL\u003c/code\u003e is a programming language that allows you to \"nest\" statements inside each\nother. Let's quickly consider an example using grocery data.\u003c/p\u003e\n\n\u003ch3\u003eCreate a Grocery Table\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE groceries (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, aisle INTEGER);\u003cbr\u003e\u003cbr\u003eINSERT INTO groceries VALUES (1, \"Apples\", 2, 1);\u003cbr\u003eINSERT INTO groceries VALUES (2, \"Oranges\", 4, 2);\u003cbr\u003eINSERT INTO groceries VALUES(3, \"Peaches\", 6, 3);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSelecting Data from the Grocery Table\u003c/h3\u003e\n\n\u003cp\u003eGiven the example SQL above, we'd be able to run a query like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM groceries;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd get back the inserted data (represented in a table below)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid                 name        quantity      aisle\u003cbr\u003e------------    ----------  ----------  ----------  \u003cbr\u003e1                Apples          2          1\u003cbr\u003e2                Oranges         4          2\u003cbr\u003e3                Peaches         6          3\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSUM\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eSUM\u003c/code\u003e will return the total of the column you select. In this case, the total\nnumber of items in the \u003ccode\u003egroceries\u003c/code\u003e column is 12.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT SUM(quantity) FROM groceries;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eReturns\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eSUM(quantity)\u003cbr\u003e-------------\u003cbr\u003e12\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo make it a little more useful we can \u003ccode\u003eGROUP BY\u003c/code\u003e the aisle that the items are\nin and \u003ccode\u003eORDER BY\u003c/code\u003e the sum of the \u003ccode\u003eaisle\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT aisle, SUM(quantity) FROM groceries GROUP BY aisle ORDER BY SUM(quantity);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eReturns\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eaisle    SUM(quantity)\u003cbr\u003e-------  --------------\u003cbr\u003e1           2\u003cbr\u003e2           4\u003cbr\u003e3           6\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you have two tasks - first, you will need to create three tables in\n\u003ccode\u003elib/create.sql\u003c/code\u003e, and populate them with data in \u003ccode\u003elib/insert.sql\u003c/code\u003e. Then, you\nwill need to write the necessary SQL statements inside the methods in\n\u003ccode\u003elib/sql_queries.rb\u003c/code\u003e that would allow you to query data from your newly created\ntables.\u003c/p\u003e\n\n\u003ch2\u003eCreate New Table, Records and Queries\u003c/h2\u003e\n\n\u003cp\u003eNow we're going to create a schema based on the following information:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA project has a title, a category, a funding goal, a start date, and an end date.\u003c/li\u003e\n\u003cli\u003eA user has a name and an age\u003c/li\u003e\n\u003cli\u003eA pledge has an amount. It belongs to a user, and it also belongs to a project.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCreate the Tables\u003c/h3\u003e\n\n\u003cp\u003eIn the \u003ccode\u003ecreate.sql\u003c/code\u003e file, model your tables. You should have a table for\nprojects, users, and pledges.\u003c/p\u003e\n\n\u003ch3\u003eInsert Records into Database\u003c/h3\u003e\n\n\u003cp\u003eWithin the \u003ccode\u003einsert.sql\u003c/code\u003e file, insert 10 projects, 20 users, and 30 pledges into the database.\u003c/p\u003e\n\n\u003ch3\u003eWrite the Queries\u003c/h3\u003e\n\n\u003cp\u003eWrite SQL queries as strings in \u003ccode\u003elib/sql_queries\u003c/code\u003e in each of the provided methods.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e as you go and read the test messages for additional guidance.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://blog.seldomatt.com/\"\u003eSeldom Blog\u003c/a\u003e - \u003ca href=\"http://blog.seldomatt.com/blog/2012/10/17/about-sql-joins-the-3-ring-binder-model/\"\u003eAbout SQL Joins: The 3 Ring Binder Model\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://blog.codinghorror.com/\"\u003eCoding Horror\u003c/a\u003e - \u003ca href=\"http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/\"\u003eA Visual Explanation of SQL Joins\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://geekyisawesome.blogspot.com/\"\u003eGeeky is Awesome\u003c/a\u003e - \u003ca href=\"http://geekyisawesome.blogspot.com/2011/03/sql-joins-tutorial.html\"\u003eSQL Joins Tutorial\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g82b86e1fd785ecf53923f964f046f984"},{"id":203822,"title":"Complex Joins","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-complex-joins\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-complex-joins/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-complex-joins\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-complex-joins/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eKnow what an outer join is\u003c/li\u003e\n\u003cli\u003eDistinguish an inner join from an outer join\u003c/li\u003e\n\u003cli\u003eIdentify different types of outer joins: left, right, and full\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWhy is this important?\u003c/h2\u003e\n\n\u003ch4\u003eGrade Example (Inner Join)\u003c/h4\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eImagine you want to get a list of all the students with an \"A\" in the class. We\nonly want those students in the class with top grades, ignoring the other\nstudents in the class.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003eField Trip Example (Complex/Outer Join)\u003c/h4\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNow imagine another scenario where the class is going on a field trip. The cost\nof the field trip is $10 per student. As a teacher, we want to keep track of\nwhich students have paid AND which students still need to pay.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eEverything we've done up until this point looks like the Grade Example. This is\nan inner join. We only want the students with a certain grade. You can imagine a\nVenn Diagram where one circle is \"Grades\" and another circle is \"Students\". We\nonly want the overlapping (or \"inner\") parts of the two circles.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_Venn_InnerJoin.png\" alt=\"inner join\"\u003e\u003c/p\u003e\n\n\u003cp\u003eComplex joins are useful and important when it comes to situations like the\nField Trip Example. Sticking with the Venn Diagrams, we can think about\n\"Students\" as one circle and \"Payments\" as another circle. A complex join (or\nouter join) will return the overlap between the two circles AND the rest (or the\n\"outer\" part) of the \"Students\" circle as well.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_V_LeftOuterJoin_Blank.png\" alt=\"left outer join\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe'll elaborate more on visualizing joins in the Venn Diagrams section below.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eA complex join in SQL is also referred to as an outer join. It is not\nnecessarily more complex than an inner join. It is referred to as \"complex\"\nsimply because SQL is conducting an inner join in addition to gathering a little\nmore information from one or more tables. What is that extra bit of information?\nWe will discover this by looking at the difference between outer and inner\njoins.\u003c/p\u003e\n\n\u003ch2\u003eDifference between Inner Join and Outer Join\u003c/h2\u003e\n\n\u003ch3\u003eInner Join\u003c/h3\u003e\n\n\u003cp\u003eAs you may recall, an inner join is going to return only the rows from the\ndatabase that match the query. For example, imagine we have the following\ntables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTEACHERS TABLE             STUDENTS TABLE\u003cbr\u003eid                 student_id   teacher_id\u003cbr\u003e---------------            ------------------------\u003cbr\u003e1                          1            NULL\u003cbr\u003e2                          2            1\u003cbr\u003e3                          3            NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's look at an inner join.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT *\u003cbr\u003eFROM Teachers\u003cbr\u003eINNER JOIN Students\u003cbr\u003eON Teachers.id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis query returns only the teacher with the \u003ccode\u003eid = 1\u003c/code\u003e because student 2 is in\nthe first teacher's class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid  |  student_id |  teacher_id\u003cbr\u003e--------------------------\u003cbr\u003e1           |  2  |  1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Since we're \u003cem\u003ejoining\u003c/em\u003e tables, running this example SQL command will return a result with both an \u003cem\u003eid\u003c/em\u003e and a \u003cem\u003eteacher\u003c/em\u003eid_, even though they are the same.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eOuter Join\u003c/h3\u003e\n\n\u003cp\u003eOuter Joins, on the other hand, will return all of the matching rows AND all of\nthe additional rows from the specified table. Which table/additional rows are\ndetermined by the type of outer join. There are three types of outer joins: Left\nOuter Join, Right Outer Join, and Full Outer Join.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: SQLite, the database management system that we've been using to\nexplore SQL, does not implement the full SQL standard. Specifically, SQLite does\nnot implement RIGHT OUTER JOIN or FULL OUTER JOIN. However, the concepts\nunderlying these joins are still important to understand (and other databases,\nlike \u003ca href=\"http://www.postgresql.org/about/\"\u003ePostgreSQL\u003c/a\u003e, do implement them), so\nyou'll need to know about these JOINs even if you won't be using them right\naway.\u003c/p\u003e\n\n\u003ch4\u003eLeft Outer Join\u003c/h4\u003e\n\n\u003cp\u003eThis is the most common outer join and the one you'll use most often. This\nreturns the normal inner join result and also \u003cstrong\u003e\u003cem\u003ereturns all of the rows from\nthe left-most (i.e. first mentioned) table\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT *\u003cbr\u003eFROM Teachers\u003cbr\u003eLEFT OUTER JOIN Students\u003cbr\u003eON Teachers.teacher_id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eteacher_id  |  student_id\u003cbr\u003e--------------------------\u003cbr\u003e1           |  2\u003cbr\u003e2           |  NULL\u003cbr\u003e3           |  NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that every row from the teacher's table is returned whether there is a\ncorresponding student or not.\u003c/p\u003e\n\n\u003ch4\u003eRight Outer Join\u003c/h4\u003e\n\n\u003cp\u003eAs you might imagine, this is the same as the Left Outer Join with the minor\ndifference being that it \u003cstrong\u003e\u003cem\u003ereturns all of the rows from the right-most (i.e.\nlast-mentioned) table\u003c/em\u003e\u003c/strong\u003e. Sticking with our example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT *\u003cbr\u003eFROM Teachers\u003cbr\u003eRIGHT OUTER JOIN Students\u003cbr\u003eON Teachers.teacher_id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eteacher_id     |  student_id\u003cbr\u003e--------------------------\u003cbr\u003eNULL           |  1\u003cbr\u003e1              |  2\u003cbr\u003eNULL           |  3\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eFull Outer Join\u003c/h3\u003e\n\n\u003cp\u003eThe full \u003cstrong\u003e\u003cem\u003ereturns all of the rows from all the tables\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT *\u003cbr\u003eFROM Teachers\u003cbr\u003eFULL OUTER JOIN Students\u003cbr\u003eON Teachers.teacher_id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eteacher_id     |  student_id\u003cbr\u003e--------------------------\u003cbr\u003eNULL           |  1\u003cbr\u003e1              |  2\u003cbr\u003eNULL           |  3\u003cbr\u003e2              |  NULL\u003cbr\u003e3              |  NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eVenn Diagrams\u003c/h2\u003e\n\n\u003cp\u003eIt is helpful to think about our queries as a Venn Diagram. Each table can be\nrepresented by a circle.\u003c/p\u003e\n\n\u003cp\u003eAn Inner Join just returns the overlapping areas of the Venn Diagram.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147__InnerJoin_Blank.png\" alt=\"inner join diagram\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA Left Outer Join returns all the the data from the left circle, and it includes\nthe overlapping information from the right circle.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_V_LeftOuterJoin_Blank.png\" alt=\"left outer join diagram\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA Right Outer Join returns all the the data from the right circle, and it\nincludes the overlapping information from the left circle.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_V_RightOuterJoin_Blank.png\" alt=\"right outer join diagram\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA Full Outer Join returns all the data from all the tables, including the\noverlapping data.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_V_FullOuterJoin_Blank.png\" alt=\"full outer join diagram\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eExamples\u003c/h2\u003e\n\n\u003ch3\u003eCreate Our Students Table\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE students (\u003cbr\u003e    id INTEGER PRIMARY KEY,\u003cbr\u003e    name TEXT,\u003cbr\u003e    teacher_id INTEGER);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInsert Students\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Dave\", 1);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Jessie\", 1);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Bob\", 1);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Sara\", 2);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"George\",  2);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Alexis\",  NULL);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eStudents Schema\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eid               name        teacher_id\u003cbr\u003e---------------  ----------  ----------\u003cbr\u003e1                Dave           1\u003cbr\u003e2                Jessie         1\u003cbr\u003e3                Bob            1\u003cbr\u003e4                Sara           2\u003cbr\u003e5                George         2\u003cbr\u003e6                Alexis\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCreate Our Teachers Table\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE teachers (\u003cbr\u003e    id INTEGER PRIMARY KEY,\u003cbr\u003e    name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInsert Into Teachers\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO teachers (name)\u003cbr\u003e    VALUES (\"Joe\");\u003cbr\u003eINSERT INTO teachers (name)\u003cbr\u003e    VALUES (\"Steven\");\u003cbr\u003eINSERT INTO teachers (name)\u003cbr\u003e    VALUES (\"Jeff\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eTeachers Schema\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eid               name\u003cbr\u003e---------------  ---------\u003cbr\u003e1                Joe\u003cbr\u003e2                Steven\u003cbr\u003e3                Jeff\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eLeft Outer Join\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM Teachers\u003cbr\u003e   LEFT OUTER JOIN Students on Teachers.id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis query will return all of the records in the left table (teachers)\nregardless if any of those records have a match in the right table (students).\nIt will also return any matching records from the right table. So for our\nexample, it first returns all of the teachers followed by any student that has a\n\u003ccode\u003eteacher_id\u003c/code\u003e. You can see that Alexis was not returned because her \u003ccode\u003eteacher_id\u003c/code\u003e\ncolumn is \u003ccode\u003eNULL\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eResults\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eid  teacher_name    id      name     teacher_id\u003cbr\u003e--- ------------   ----    ------    -----------\u003cbr\u003e1     Joe          3       Bob          1\u003cbr\u003e1     Joe          1       Dave         1\u003cbr\u003e1     Joe          2       Jessie       1\u003cbr\u003e2     Steven       5       George       2\u003cbr\u003e2     Steven       4       Sara         2\u003cbr\u003e3     Jeff         NULL    NULL         NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eRight Outer Join\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * from Teachers\u003cbr\u003e   RIGHT OUTER JOIN Students on Teachers.id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis query will return all of the records in the right table (students)\nregardless if any of those records have a match in the left table (teachers). It\nwill also return any matching records from the left table. You can see that all\nof the students were returned, but this time Jeff was left out.\u003c/p\u003e\n\n\u003ch3\u003eResults\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eid    teacher_name   id      name     teacher_id\u003cbr\u003e---   ------------  ----    ------    -----------\u003cbr\u003e1       Joe         3       Bob          1\u003cbr\u003e1       Joe         1       Dave         1\u003cbr\u003e1       Joe         2       Jessie       1\u003cbr\u003e2       Steven      5       George       2\u003cbr\u003e2       Steven      4       Sara         2\u003cbr\u003eNULL    NULL        6       Alexis       NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eFull Join\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * from Teachers\u003cbr\u003e   FULL OUTER JOIN Students on Teachers.id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis Join can be referred to as a FULL OUTER JOIN or a FULL JOIN. This query will return all of the records from both tables, joining records from the left table (\u003ccode\u003eTeachers\u003c/code\u003e) that match records from the right table (\u003ccode\u003eStudents\u003c/code\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid    teacher_name   id      name     teacher_id\u003cbr\u003e---   ------------  ----    ------    -----------\u003cbr\u003e1       Joe          3       Bob          1\u003cbr\u003e1       Joe          1       Dave         1\u003cbr\u003e1       Joe          2       Jessie       1\u003cbr\u003e2       Steven       5       George       2\u003cbr\u003e2       Steven       4       Sara         2\u003cbr\u003e3       Jeff         NULL    NULL         NULL\u003cbr\u003eNULL    NULL         6       Alexis       NULL\n\u003c/code\u003e\u003c/pre\u003e","exportId":"complex-joins"},{"id":203824,"title":"Table Relations in SQL Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've established that SQL is a useful programming language to know, and that\nthe majority of databases you'll work with will have more than one table. As\ndemonstrated in this section, we've been able to learn and apply concepts that\nconnect together these tables in various ways. These table relationships are\nimportant to illustrate real-world data.\u003c/p\u003e\n\n\u003cp\u003eIn this section we covered: The structure of a relational database as tables,\nhow to associate data tables using a foreign key column, various tables with\nrelations such as \"one-to-one\" and \"many-to-many\" and different types of joins.\nWe can now distinguish the different types of relationships between data in a\ndatabase.\u003c/p\u003e\n\n\u003cp\u003eWith the ability to define relationships between different tables we can model\ndata that is more accurate to the real world!\u003c/p\u003e","exportId":"table-relations-in-sql-conclusion"}]},{"id":21900,"name":"Object-Relational Mapping","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g93bfe654d716551d4c8794583eca084d","items":[{"id":203825,"title":"Introduction to Object-Relational Mapping","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eAs a relative newcomer to the programming world, terms like\n\u003cem\u003eObject-Relational-Mapper\u003c/em\u003e can sound really intimidating. The nice part about\nORMs, is that they can make it easier to write code once you understand them.\u003c/p\u003e\n\n\u003cp\u003eYou’ve already written your fair share of SQL queries in the previous section.\nThey usually look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM schools WHERE name = 'Flatiron';\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eObject-relational-mapping allows you to write queries like the one above, as\nwell as much more complicated ones, using the object-oriented paradigm of your\npreferred programming language--in this case that would be Ruby.\u003c/p\u003e\n\n\u003cp\u003eIn these lessons, we'll be covering these topics:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe benefits of ORM \u003c/li\u003e\n\u003cli\u003eHow ORMs can abstract database logic\u003c/li\u003e\n\u003cli\u003eWriting code that inserts data into the database\u003c/li\u003e\n\u003cli\u003eWriting methods that can update an existing database record when changes are\nmade its related Ruby object\u003c/li\u003e\n\u003cli\u003eIdentifying whether a Ruby object has already been persisted to the database\u003c/li\u003e\n\u003cli\u003eBuilding a method that can either find and update or create a database record\u003c/li\u003e\n\u003cli\u003eScraping and saving data into a database\u003c/li\u003e\n\u003cli\u003eHow to use data to make Ruby objects\u003c/li\u003e\n\u003cli\u003eTurning database rows into Ruby objects\u003c/li\u003e\n\u003cli\u003eMapping a database table to a Ruby object\u003c/li\u003e\n\u003cli\u003eSearching a database with Ruby objects\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, you'll get to write in the language you are already learning\nanyway. SQL is a powerful language, but most of us don’t write in it often.\nBeing able to leverage the fluency of Ruby to perform these actions is awesome!\u003c/p\u003e","exportId":"introduction-to-object-relational-mapping"},{"id":203826,"title":"Defining Object-Relational Mapping","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-defining-object-relational-mapping\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-defining-object-relational-mapping/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-defining-object-relational-mapping\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-defining-object-relational-mapping/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the concept of an ORM and why we build them.\u003c/li\u003e\n\u003cli\u003eDescribe the code that will map your Ruby objects to a database.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is ORM?\u003c/h2\u003e\n\n\u003cp\u003eObject Relational Mapping (ORM) is the technique of accessing a relational database using an object-oriented programming language. Object Relational Mapping is a way for our Ruby programs to manage database data by \"mapping\" database tables to classes and instances of classes to rows in those tables.\u003c/p\u003e\n\n\u003cp\u003eThere is no special programming magic to an ORM––it is simply a manner in which we implement the code that connects our Ruby program to our database. For example, you may have seen code that connects your Ruby program to a given database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection = SQLite3::Database.new('db/my_database.db')\u003cbr\u003e\u003cbr\u003edatabase_connection.execute(\"Some SQL statement\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn ORM is really just a concept. It is a design pattern, a conventional way for us to organize our programs when we want those programs to connect to a database. The convention is this:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhen \"mapping\" our program to a database, we equate classes with database tables and instances of those classes with table rows.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eYou may also see this referred to as \"wrapping\" a database, because we are writing Ruby code that \"wraps\" or handles SQL.\u003c/p\u003e\n\n\u003ch2\u003eWhy Use ORM?\u003c/h2\u003e\n\n\u003cp\u003eThere are a number of reasons why we use the ORM pattern. Two good ones are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCutting down on repetitive code.\u003c/li\u003e\n\u003cli\u003eImplementing conventional patterns that are organized and sensical.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCutting Down on Repetition\u003c/h3\u003e\n\n\u003cp\u003eLet's take a look at some of the common code we might use to interact our Ruby program with our database.\u003c/p\u003e\n\n\u003cp\u003eLet's say we have a program that helps a veterinary office keep track of the pets it treats and those pets' owners. Such a program would have an \u003ccode\u003eOwner\u003c/code\u003e class and \u003ccode\u003eCat\u003c/code\u003e class (among classes to represent other pets). Our program surely needs to connect to a database so that the veterinary office can persist information about its pets and owners.\u003c/p\u003e\n\n\u003cp\u003eOur program would create a connection to the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection = SQLite3::Database.new('db/pets.db')\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe would create an owners table and a cats table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection.execute(\"CREATE TABLE IF NOT EXISTS cats(id INTEGER PRIMARY KEY, name TEXT, breed TEXT, age INTEGER)\")\u003cbr\u003e\u003cbr\u003edatabase_connection.execute(\"CREATE TABLE IF NOT EXISTS owners(id INTEGER PRIMARY KEY, name TEXT)\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we would need to regularly insert new cats and owners into these tables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection.execute(\"INSERT INTO cats (name, breed, age) VALUES ('Maru', 'scottish fold', 3)\")\u003cbr\u003e\u003cbr\u003edatabase_connection.execute(\"INSERT INTO cats (name, breed, age) VALUES ('Hana', 'tortoiseshell', 1)\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that in the lines of code above, there is a lot of repetition. In fact, the only difference between the two lines in which we insert data into the database are the actual values.\u003c/p\u003e\n\n\u003cp\u003eThe repetition would also occur for other SQL statements we might want to execute against our database. Any \u003ccode\u003eSELECT\u003c/code\u003e queries, for example, would repeat the call to the \u003ccode\u003edatabase_connection.execute\u003c/code\u003e method and differ only in the specifics of what data we are selecting from which table.\u003c/p\u003e\n\n\u003cp\u003eAs programmers, you might remember, we are lazy. We don't like to repeat ourselves if we can avoid it. Repetition qualifies as a \"code smell\". Instead of repeating the same, or similar, code any time we want to perform common actions against our database, we can write a series of methods to abstract that behavior.\u003c/p\u003e\n\n\u003cp\u003eFor example, we can write a \u003ccode\u003e.save\u003c/code\u003e method on our \u003ccode\u003eCat\u003c/code\u003e class that handles the common action of \u003ccode\u003eINSERT\u003c/code\u003eing data into the database.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Cat\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, breed, age)\u003cbr\u003e    @name = name\u003cbr\u003e    @breed = breed\u003cbr\u003e    @age = age\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.save(name, breed, age, database_connection)\u003cbr\u003e    database_connection.execute(\"INSERT INTO cats (name, breed, age) VALUES (?, ?, ?)\",name, breed, age)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's create some new cats and save them to the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection = SQLite3::Database.new('db/pets.db')\u003cbr\u003e\u003cbr\u003eCat.new(\"Maru\", \"scottish fold\", 3)\u003cbr\u003eCat.new(\"Hana\", \"tortoiseshell\", 1)\u003cbr\u003e\u003cbr\u003eCat.all.each do |cat|\u003cbr\u003e  Cat.save(cat.name, cat.breed, cat.age, database_connection)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we establish the connection to our database, create two new cats and then iterate over our collection of cat instances stored in the \u003ccode\u003eCat.all\u003c/code\u003e method. Inside this iteration, we use the \u003ccode\u003eCat.save\u003c/code\u003e method, giving it arguments of the data specific to each cat to \u003ccode\u003eINSERT\u003c/code\u003e those cat records into the cats table.\u003c/p\u003e\n\n\u003cp\u003eNow, thanks to our \u003ccode\u003eCat.save\u003c/code\u003e method, we have some re-usable code––code that we can easily use again and again to \"save\" or \u003ccode\u003eINSERT\u003c/code\u003e, cat records into the database.\u003c/p\u003e\n\n\u003cp\u003eThis is just one example of the types of methods we will learn to build as we create our ORM. \u003cem\u003eDon't worry too much about the code shown above.\u003c/em\u003e We'll learn more about how and why we define our ORM methods later on. This is just a preview of the kind of method we will write to tell our classes how to talk to our database.\u003c/p\u003e\n\n\u003ch3\u003eLogical Design\u003c/h3\u003e\n\n\u003cp\u003eAnother important reason to implement the ORM pattern is that it just makes sense. Telling our Ruby program to communicate with our database is confusing enough without each individual developer having to make their own, individual decision about \u003cem\u003ehow\u003c/em\u003e our program should talk to our database.\u003c/p\u003e\n\n\u003cp\u003eInstead, we follow the convention: classes are mapped to or equated with tables and instances of a class are equated to table rows.\u003c/p\u003e\n\n\u003cp\u003eIf we have a \u003ccode\u003eCat\u003c/code\u003e class, we have a cats table. Cat instances get stored as rows in the cats table.\u003c/p\u003e\n\n\u003cp\u003eFurther, we don't have to make our own potentially confusing or non-sensical decision about what kinds of methods we will build to help our classes communicate with our database. Just like the \u003ccode\u003e.save\u003c/code\u003e method we previewed above, we will learn to build a series of common, conventional methods that our programs can rely on again and again to communicate with our database.\u003c/p\u003e","exportId":"defining-object-relational-mapping"},{"id":203827,"title":"Mapping Ruby Classes to a Database","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-mapping-classes-to-database-tables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eMap a Ruby class to a database table and an instance of a class to a table row.\u003c/li\u003e\n\u003cli\u003eWrite code that maps a Ruby class to a database table. \u003c/li\u003e\n\u003cli\u003eWrite code that inserts data regarding an instance of a class into a database table row. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eMapping a Class to a Table\u003c/h2\u003e\n\n\u003cp\u003eWhen building an ORM to connect our Ruby program to a database, we equate a class with a database table and the instances that the class produces to rows in that table. \u003c/p\u003e\n\n\u003cp\u003eWhy map classes to tables? Our end goal is to persist information regarding songs to a database. In order to persist that data efficiently and in an organized manner, we need to first map or equate our Ruby class to a database table. \u003c/p\u003e\n\n\u003cp\u003eLet's say we are building a music player app that allows users to store their music and browse their songs by song.\u003c/p\u003e\n\n\u003cp\u003eThis program will have a \u003ccode\u003eSong\u003c/code\u003e class. Each song instance will have a name and an album attribute. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :album\u003cbr\u003e\u003cbr\u003e  def initialize(name, album)\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have an \u003ccode\u003eattr_accessor\u003c/code\u003e for \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ealbum\u003c/code\u003e. In order to \"map\" this \u003ccode\u003eSong\u003c/code\u003e class to a songs database table, we need to create our database, then we need to create our songs table. In building an ORM, it is conventional to pluralize the name of the class to create the name of the table. Therefore, the \u003ccode\u003eSong\u003c/code\u003e class equals the \"songs\" table.\u003c/p\u003e\n\n\u003ch3\u003eCreating the Database\u003c/h3\u003e\n\n\u003cp\u003eBefore we can create a songs table we need to create our music database. Whose responsibility is it to create the database? It is not the responsibility of our \u003ccode\u003eSong\u003c/code\u003e class. Remember, classes are mapped to \u003cem\u003etables inside a database\u003c/em\u003e, not to the database as a whole. We may want to build other classes that we equate with other database tables later on. \u003c/p\u003e\n\n\u003cp\u003eIt is the responsibility of our program as a whole to create and establish the database. Accordingly, you'll see our Ruby programs set up such that they have a \u003ccode\u003econfig\u003c/code\u003e directory that contains an \u003ccode\u003eenvironment.rb\u003c/code\u003e file. This file will look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'sqlite3'\u003cbr\u003erequire_relative '../lib/song.rb'\u003cbr\u003e\u003cbr\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/music.db\")}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we set up a constant, \u003ccode\u003eDB\u003c/code\u003e, that is equal to a hash that contains our connection to the database. In our \u003ccode\u003elib/song.rb\u003c/code\u003e file, we can therefore access the \u003ccode\u003eDB\u003c/code\u003e constant and the database connection it holds like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDB[:conn]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, as we move through this reading, let's assume that our hypothetical program has a \u003ccode\u003econfig/environment.rb\u003c/code\u003e file and that the \u003ccode\u003eDB[:conn]\u003c/code\u003e constant refers to our connection to the database. \u003c/p\u003e\n\n\u003cp\u003eNow that our hypothetical database is set up in our hypothetical program, let's move on to our \u003ccode\u003eSong\u003c/code\u003e class and its equivalent database table. \u003c/p\u003e\n\n\u003ch3\u003eCreating the Table\u003c/h3\u003e\n\n\u003cp\u003eAccording to the ORM convention in which a class is mapped to or equated with a database table, we need to create a songs table. We will accomplish this by writing a class method in our \u003ccode\u003eSong\u003c/code\u003e class that creates this table. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTo \"map\" our class to a database table, we will create a table with the same name as our class and give that table column names that match the \u003ccode\u003eattr_accessor\u003c/code\u003es of our class.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eHere's an example of a \u003ccode\u003eSong\u003c/code\u003e class that maps instance attributes to table columns:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :album, :id\u003cbr\u003e\u003cbr\u003e  def initialize(name, album, id=nil)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create_table\u003cbr\u003e    sql =  \u0026lt;      CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e        id INTEGER PRIMARY KEY, \u003cbr\u003e        name TEXT, \u003cbr\u003e        album TEXT\u003cbr\u003e        )\u003cbr\u003e        SQL\u003cbr\u003e    DB[:conn].execute(sql) \u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break down this code.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003eid\u003c/code\u003e Attribute\u003c/h4\u003e\n\n\u003cp\u003eNotice that we are initializing an individual \u003ccode\u003eSong\u003c/code\u003e instance with an \u003ccode\u003eid\u003c/code\u003e attribute that has a default value of \u003ccode\u003enil\u003c/code\u003e. Why are we doing this? First of all, songs need an \u003ccode\u003eid\u003c/code\u003e attribute only because they will be saved into the database and we know that each table row needs an \u003ccode\u003eid\u003c/code\u003e value which is the primary key. \u003c/p\u003e\n\n\u003cp\u003eWhen we create a new song with the \u003ccode\u003eSong.new\u003c/code\u003e method, we \u003cem\u003edo not set that song's id\u003c/em\u003e. A song gets an \u003ccode\u003eid\u003c/code\u003e only when it gets saved into the database (more on inserting songs into the database later). We therefore set the default value of the \u003ccode\u003eid\u003c/code\u003e argument that the \u003ccode\u003e#initialize\u003c/code\u003e method takes equal to \u003ccode\u003enil\u003c/code\u003e, so that we can create new song instances that *do not have an \u003ccode\u003eid\u003c/code\u003e value. We'll leave that up to the database to handle later on. Why leave it up to the database? Remember that in the world of relational database, the \u003ccode\u003eid\u003c/code\u003e of a given record must be unique. If we could replicate a record's \u003ccode\u003eid\u003c/code\u003e, we would have a very disorganized database. Only the database itself, through the magic of SQL, can ensure that the \u003ccode\u003eid\u003c/code\u003e of each record is unique. \u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e.create_table\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eAbove, we created a class method, \u003ccode\u003e.create_table\u003c/code\u003e, that crafts a SQL statement to create a songs table and give that table column names that match the attributes of an individual instance of \u003ccode\u003eSong\u003c/code\u003e. Why is the \u003ccode\u003e.create_table\u003c/code\u003e method a class method? Well, it is \u003cem\u003enot\u003c/em\u003e the responsibility of an individual song to create the table it will eventually be saved into. It is the job of the class as a whole to create the table that it is mapped to. \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e For strings that will take up multiple lines in your text editor, use a \u003ca href=\"https://en.wikipedia.org/wiki/Here_document\"\u003eheredoc\u003c/a\u003e to create a string that runs on to multiple lines.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;\u0026lt;-\u003c/code\u003e + \u003ccode\u003especial word meaning \"End of Document\"\u003c/code\u003e + \u003ccode\u003ethe string, on multiple lines\u003c/code\u003e + \u003ccode\u003especial word meaning \"End of Document\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou don't have to use a heredoc, it's just a helpful tool for crafting long strings in Ruby. Back to our regularly scheduled programming...\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNow that our songs table exists, we can learn how to save data regarding individual songs into that table. \u003c/p\u003e\n\n\u003ch2\u003eMapping Class Instances to Table Rows\u003c/h2\u003e\n\n\u003cp\u003eWhen we say that we are saving data to our database, what data are we referring to? If individual instances of a class are \"mapped\" to rows in  a table, does that mean that the instances themselves, these individual Ruby objects, are saved into the database?\u003c/p\u003e\n\n\u003cp\u003eActually, \u003cstrong\u003ewe are not saving Ruby objects in our database.\u003c/strong\u003e We are going to take the individual attributes of a given instance, in this case a song's name and album, and save \u003cem\u003ethose attributes that describe an individual song\u003c/em\u003e to the database as one, single row.\u003c/p\u003e\n\n\u003cp\u003eFor example, let's say we have a song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egold_digger = Song.new(\"Gold Digger\", \"Late Registration\")\u003cbr\u003e\u003cbr\u003egold_digger.name\u003cbr\u003e# =\u0026gt; \"Gold Digger\"\u003cbr\u003e\u003cbr\u003egold_digger.album\u003cbr\u003e# =\u0026gt; \"Late Registration\" \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis song has its two attributes, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ealbum\u003c/code\u003e, set equal to the above values. In order to save the song \u003ccode\u003egold_digger\u003c/code\u003e into the songs table, we will use the name and album of the song to create a new row in that table. The SQL statement we want to execute would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album) VALUES (\"Gold Digger\", \"Late Registration\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we had another song that we wanted to save?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003e\u003cbr\u003ehello.name \u003cbr\u003e# =\u0026gt; \"Hello\"\u003cbr\u003e\u003cbr\u003ehello.album\u003cbr\u003e# =\u0026gt; \"25\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn order to save \u003ccode\u003ehello\u003c/code\u003e into our database, we do not insert the Ruby object stored in the \u003ccode\u003ehello\u003c/code\u003e variable. Instead, we use \u003ccode\u003ehello\u003c/code\u003e's name and album values to create a new row in the songs table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album) VALUES (\"Hello\", \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that the operation of saving the attributes of a particular song into a database table is common enough. Every time we want to save a record, though, we are repeating the same exact steps and using the same code. The only things that are different are the values that we are inserting into our songs table. Let's abstract this functionality into an instance method, \u003ccode\u003e#save\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eInserting Data into a table with the \u003ccode\u003e#save\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eLet's build an instance method, \u003ccode\u003e#save\u003c/code\u003e, that saves a given instance of our \u003ccode\u003eSong\u003c/code\u003e class into the songs table of our database. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album) \u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break down the code in this method. \u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#save\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eIn order to \u003ccode\u003eINSERT\u003c/code\u003e data into our songs table, we need to craft a SQL \u003ccode\u003eINSERT\u003c/code\u003e statement. Ideally, it would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album)\u003cbr\u003eVALUES songs_name, songs_album\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, we used the heredoc to craft our multi-line SQL statement. How are we going to pass in, or interpolate, the name and album of a given song into our heredoc? \u003c/p\u003e\n\n\u003cp\u003eWe use something called \u003cstrong\u003ebound parameters\u003c/strong\u003e. \u003c/p\u003e\n\n\u003ch4\u003eBound Parameters\u003c/h4\u003e\n\n\u003cp\u003eBound parameters protect our program from getting confused by \u003ca href=\"https://en.wikipedia.org/wiki/SQL_injection\"\u003eSQL injections\u003c/a\u003e and special characters. Instead of interpolating variables into a string of SQL, we are using the \u003ccode\u003e?\u003c/code\u003e characters as placeholders. Then, the special magic provided to us by the SQLite3-Ruby gem's \u003ccode\u003e#execute\u003c/code\u003e method will take the values we pass in as an argument and apply them as the values of the question marks. \u003c/p\u003e\n\n\u003ch4\u003eHow it works\u003c/h4\u003e\n\n\u003cp\u003eSo, our \u003ccode\u003e#save\u003c/code\u003e method inserts a record into our database that has the name and album values of the song instance we are trying to save. We are not saving the Ruby object itself. We are creating a new row in our songs table that has the values that characterize that song instance. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e Notice that we \u003cem\u003edidn't\u003c/em\u003e insert an ID number into the table with the above statement. Remember that the \u003ccode\u003eINTEGER PRIMARY KEY\u003c/code\u003e datatype will assign and auto-increment the id attribute of each record that gets saved.\u003c/p\u003e\n\n\u003ch2\u003eCreating Instances vs. Creating Table Rows\u003c/h2\u003e\n\n\u003cp\u003eThe moment in which we create a new \u003ccode\u003eSong\u003c/code\u003e instance with the \u003ccode\u003e#new\u003c/code\u003e method is \u003cem\u003edifferent than the moment in which we save a representation of that song to our database\u003c/em\u003e. The \u003ccode\u003e#new\u003c/code\u003e method creates a new instance of the song class, a new Ruby object. The \u003ccode\u003e#save\u003c/code\u003e method takes the attributes that characterize a given song and saves them in a new row of the songs table in our database.\u003c/p\u003e\n\n\u003cp\u003eAt what point in time should we actually save a new record? While it is possible to save the record right at the moment the new object is created, i.e. in the \u003ccode\u003e#initialize\u003c/code\u003e method, this is not a great idea. We don't want to force our objects to be saved every time they are created, or make the creation of an object dependent upon/always coupled with saving a record to the database. As our program grows and changes, we may find the need to create objects and not save them. A dependency between instantiating an object and saving that record to the database would preclude this or, at the very least, make it harder to implement. \u003c/p\u003e\n\n\u003cp\u003eSo, we'll keep our \u003ccode\u003e#initialize\u003c/code\u003e and \u003ccode\u003e#save\u003c/code\u003e methods separate:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :album, :id\u003cbr\u003e\u003cbr\u003e  def initialize(name, album, id=nil)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create_table\u003cbr\u003e    sql =  \u0026lt;      CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e        id INTEGER PRIMARY KEY, \u003cbr\u003e        name TEXT, \u003cbr\u003e        album TEXT\u003cbr\u003e        )\u003cbr\u003e        SQL\u003cbr\u003e    DB[:conn].execute(sql) \u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album) \u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we can create and save songs like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.create_table\u003cbr\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003eninety_nine_problems = Song.new(\"99 Problems\", \"The Black Album\")\u003cbr\u003e\u003cbr\u003ehello.save\u003cbr\u003eninety_nine_problems.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eGiving Our \u003ccode\u003eSong\u003c/code\u003e Instance an \u003ccode\u003eid\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eWhen we \u003ccode\u003eINSERT\u003c/code\u003e the data concerning a particular \u003ccode\u003eSong\u003c/code\u003e instance into our database table, we create a new row in that table. That row would look something like this:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eAlbum\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003eHello\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eNotice that the database table's row has a column for \u003ccode\u003eName\u003c/code\u003e, \u003ccode\u003eAlbum\u003c/code\u003e and also \u003ccode\u003eID\u003c/code\u003e. Recall that we created our table to have a column for the primary key, ID, of a given record. So, as each record gets inserted into the database, it is given an ID number automatically. \u003c/p\u003e\n\n\u003cp\u003eIn this way, our \u003ccode\u003ehello\u003c/code\u003e instance is stored in the database with the name and album that we gave it, \u003cem\u003eplus\u003c/em\u003e an ID number that the database assigns to it. \u003c/p\u003e\n\n\u003cp\u003eWe want our \u003ccode\u003ehello\u003c/code\u003e instance to completely reflect the database row it is associated with so that we can retrieve it from the table later on with ease. So, once the new row with \u003ccode\u003ehello\u003c/code\u003e's data is inserted into the table, let's grab the \u003ccode\u003eID\u003c/code\u003e of that newly inserted row and assign it to be the value of \u003ccode\u003ehello\u003c/code\u003e's \u003ccode\u003eid\u003c/code\u003e attribute. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :album, :id\u003cbr\u003e\u003cbr\u003e  def initialize(name, album, id=nil)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album) \u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e\u003cbr\u003e    @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt the end of our \u003ccode\u003esave\u003c/code\u003e method, we use a SQL query to grab the value of the \u003ccode\u003eID\u003c/code\u003e column of the last inserted row, and set that equal to the given song instance's \u003ccode\u003eid\u003c/code\u003e attribute. Don't worry too much about how that SQL query works for now, we'll learn more about it later. The important thing to understand is the process of:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eInstantiating a new instance of the \u003ccode\u003eSong\u003c/code\u003e class.\u003c/li\u003e\n\u003cli\u003eInserting a new row into the database table that contains the information regarding that instance.\u003c/li\u003e\n\u003cli\u003eGrabbing the \u003ccode\u003eID\u003c/code\u003e of that newly inserted row and assigning the given \u003ccode\u003eSong\u003c/code\u003e instance's \u003ccode\u003eid\u003c/code\u003e attribute equal to the \u003ccode\u003eID\u003c/code\u003e of its associated database table row.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's revisit our code that instantiated and saved some songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.create_table\u003cbr\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003eninety_nine_problems = Song.new(\"99 Problems\", \"The Black Album\")\u003cbr\u003e\u003cbr\u003ehello.save\u003cbr\u003eninety_nine_problems.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate the songs table. \u003c/li\u003e\n\u003cli\u003eCreate two new song instances. \u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003esong.save\u003c/code\u003e method to persist them to the database.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis approach still leaves a little to be desired, however. Here, we have to first create the new song and then save it, every time we want to create and save a song. This is repetitive and tedious. As programmers (you might remember), we are lazy. If we can accomplish something with fewer lines of code we do it. \u003cstrong\u003eAny time we see the same code being used again and again, we think about abstracting that code into a method.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSince first creating an object and then saving a record representing that object is so common, let's write a method that does just that.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will wrap the code we used above to create a new \u003ccode\u003eSong\u003c/code\u003e instance and save it. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def self.create(name:, album:)\u003cbr\u003e    song = Song.new(name, album)\u003cbr\u003e    song.save\u003cbr\u003e    song\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we use keyword arguments to pass a name and album into our \u003ccode\u003e.create\u003c/code\u003e method. We use that name and album to instantiate a new song. Then, we use the \u003ccode\u003e#save\u003c/code\u003e method to persist that song to the database. \u003c/p\u003e\n\n\u003cp\u003eNotice that at the end of the method, we are returning the \u003ccode\u003esong\u003c/code\u003e instance that we instantiated. The return value of \u003ccode\u003e.create\u003c/code\u003e should always be the object that we created. Why? Imagine you are working with your program and you create a new song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.create(name: \"Hello\", album: \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we would have to run a separate query on our database to grab the record that we just created. That is way too much work for us. It would be much easier for our \u003ccode\u003e.create\u003c/code\u003e method to simply return the new object for us to work with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.create(name: \"Hello\", album: \"25\")\u003cbr\u003e# =\u0026gt; #\u003cbr\u003e\u003cbr\u003esong.name\u003cbr\u003e# =\u0026gt; \"Hello\"\u003cbr\u003e\u003cbr\u003esong.album\u003cbr\u003e# =\u0026gt; \"25\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe important concept to grasp here is the idea that we are \u003cem\u003enot\u003c/em\u003e saving Ruby objects into our database. We are using the attributes of a given Ruby object to create a new row in our database table. \u003c/p\u003e\n\n\u003cp\u003eThink of it like making butter cookies. You have a cookie cutter, which in our case would be our class. It describes what a cookie should look like. Then you use it to cut out a cookie, or instantiate a class object. But that's not enough, you have to show it to your friends. So you take a picture of it and post to your Bookface account and share it with everybody else, like how your database can share information with other parts of your program.\u003c/p\u003e\n\n\u003cp\u003eThe picture doesn't do anything to the cookie itself, but merely captures certain aspects of it. It's a butter cookie, it looks fresh and delicious, and it has little sprinkles on it. Those aspects are captured in the picture, but the cookie and the picture are still two different things. Ceci n'est pas une butter cookie! After you eat the cookie, or in our case after you delete the Ruby object, the database will not change at all until the record is deleted, and vice versa.\u003c/p\u003e","exportId":"mapping-ruby-classes-to-a-database"},{"id":203828,"title":"Mapping Ruby Classes to a Database Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-mapping-classes-to-database-tables-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite a class that is mapped, or equated, to a database table. \u003c/li\u003e\n\u003cli\u003eBuild a method that creates a table that maps to the given class. \u003c/li\u003e\n\u003cli\u003eWrite a method that drops that table. \u003c/li\u003e\n\u003cli\u003eWrite a method that saves a given instance to the database table. \u003c/li\u003e\n\u003cli\u003eWrite a method that both creates a new instance of the class \u003cem\u003eand\u003c/em\u003e saves that instance to a database table. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eLet's say we're building an app to help a public school's administrators keep track of their students. In this app we have a \u003ccode\u003eStudent\u003c/code\u003e class. Each individual student will have two attributes, a \u003ccode\u003ename\u003c/code\u003e and a \u003ccode\u003egrade\u003c/code\u003e, i.e. 9th, 10th, 11th, etc. \u003c/p\u003e\n\n\u003cp\u003eOur administrators need to save the student objects that this class produces to a database. We've set up the database for you in the \u003ccode\u003econfig/environment.rb\u003c/code\u003e file. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'sqlite3'\u003cbr\u003erequire_relative '../lib/student'\u003cbr\u003e\u003cbr\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/students.db\")}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour connection to the database can be referred to, throughout your program, like this: \u003ccode\u003eDB[:conn]\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eYour job is to build out the \u003ccode\u003eStudent\u003c/code\u003e class such that it has the two attributes described above. You'll also need to build a class method on the \u003ccode\u003eStudent\u003c/code\u003e class that creates the students table in the database, a method that can drop that table and a method, \u003ccode\u003e#save\u003c/code\u003e, that can save the data concerning an individual student object to the database. \u003c/p\u003e\n\n\u003cp\u003eLastly, you'll create a method that \u003cem\u003eboth creates a new instance of the student class and then saves it to the database.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's get started!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eAttributes\u003c/h3\u003e\n\n\u003cp\u003eYour \u003ccode\u003eStudent\u003c/code\u003e instances should initialize with a name, grade and an optional id. The default value of the \u003ccode\u003eid\u003c/code\u003e parameter should be set to \u003ccode\u003enil\u003c/code\u003e. This is because when we create new \u003ccode\u003eStudent\u003c/code\u003e instances, we will not assign them an \u003ccode\u003eid\u003c/code\u003e. That is the responsibility of the database and we will learn more about that later. \u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eStudent\u003c/code\u003e attributes should have an \u003ccode\u003eattr_accessor\u003c/code\u003e for \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003egrade\u003c/code\u003e but only an \u003ccode\u003eattr_reader\u003c/code\u003e for \u003ccode\u003eid\u003c/code\u003e. The only place \u003ccode\u003eid\u003c/code\u003e can be set equal to something is inside the initialize method, via: \u003ccode\u003e@id = id\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create_table\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that creates the students table. Use a heredoc to set a variable, \u003ccode\u003esql\u003c/code\u003e, equal to the necessary SQL statement. Remember, the attributes of a student, \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003egrade\u003c/code\u003e, and \u003ccode\u003eid\u003c/code\u003e, should correspond to the column names you are creating in your students table. The \u003ccode\u003eid\u003c/code\u003e column should be the primary key. \u003c/p\u003e\n\n\u003cp\u003eWith your \u003ccode\u003esql\u003c/code\u003e variable pointing to the correct SQL statement, you can execute that statement using the \u003ccode\u003e#execute\u003c/code\u003e method provided to us by the SQLite3-Ruby gem. Remember that this method is called on whatever object stores your connection to the database, in this case \u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.drop_table\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that drops the students table. Once again, create a variable \u003ccode\u003esql\u003c/code\u003e, and set it equal to the SQL statement that drops the students table. Execute that statement against the database using \u003ccode\u003eDB[:conn].execute(sql)\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#save\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is an instance method that saves the attributes describing a given student to the students table in our database. Once again, create a variable, \u003ccode\u003esql\u003c/code\u003e, and set it equal to the SQL statement that will \u003ccode\u003eINSERT\u003c/code\u003e the correct data into the table. \u003c/p\u003e\n\n\u003cp\u003eUse bound paremeters to pass the given student's name and grade into the SQL statement. Remember that you don't need to insert a value for the \u003ccode\u003eid\u003c/code\u003e column. Because it is the primary key, the \u003ccode\u003eid\u003c/code\u003e column's value will be automatically assigned. \u003cstrong\u003eHowever\u003c/strong\u003e, at the end of your \u003ccode\u003e#save\u003c/code\u003e method, you do need to grab the ID of the last inserted row, i.e. the row you just inserted into the database, and assign it to the be the value of the @id attribute of the given instance.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that uses keyword arguments. The keyword arguments are \u003ccode\u003ename:\u003c/code\u003e and \u003ccode\u003egrade:\u003c/code\u003e. Use the values of these keyword arguments to: 1) instantiate a new \u003ccode\u003eStudent\u003c/code\u003e object with \u003ccode\u003eStudent.new(name, grade)\u003c/code\u003e and 2) save that new student object via \u003ccode\u003estudent.save\u003c/code\u003e. The \u003ccode\u003e#create\u003c/code\u003e method should return the student object that it creates. \u003c/p\u003e","exportId":"g17c0e3b1fa54b04554618ffc346c4b1c"},{"id":203829,"title":"Converting Database Records to Ruby Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-mapping-database-records-to-ruby-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild methods that read from a database table.\u003c/li\u003e\n\u003cli\u003eBuild a \u003ccode\u003eSong.all\u003c/code\u003e class method that returns all songs from the database.\u003c/li\u003e\n\u003cli\u003eBuild a \u003ccode\u003eSong.find_by_name\u003c/code\u003e class method that accepts one argument, a name,\nsearches the database for a song with that name and returns the matching song\nentry if one is found.\u003c/li\u003e\n\u003cli\u003eConvert what the database gives you into a Ruby object.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover the basics of reading from a database table that is\nmapped to a Ruby object.\u003c/p\u003e\n\n\u003cp\u003eOur Ruby program gets most interesting when we add data. To do this, we use a\ndatabase. When we want our Ruby program to store things, we send them off to a\ndatabase. When we want to retrieve those things, we ask the database to send\nthem back to our program. This works very well, but there is one small problem\nto overcome – our Ruby program and the database don't speak the same language.\u003c/p\u003e\n\n\u003cp\u003eRuby understands objects. The database understands raw data.\u003c/p\u003e\n\n\u003cp\u003eWe don't store Ruby objects in the database, and we don't get Ruby objects back\nfrom the database. We store raw data describing a given Ruby object in a table\nrow, and when we want to reconstruct a Ruby object from the stored data, we\nselect that same row in the table.\u003c/p\u003e\n\n\u003cp\u003eWhen we query the database, it is up to us to write the code that takes that\ndata and turns it back into an instance of the appropriate class. We, the\nprogrammers, will be responsible for translating the raw data that the database\nsends into Ruby objects that are instances of a particular class.\u003c/p\u003e\n\n\u003ch2\u003eExample\u003c/h2\u003e\n\n\u003cp\u003eLet's use a song domain as an example. Imagine we have a \u003ccode\u003eSong\u003c/code\u003e class that is\nresponsible for making songs. Every song will come with two attributes, a\n\u003ccode\u003etitle\u003c/code\u003e and a \u003ccode\u003elength\u003c/code\u003e. We could make a bunch of new songs, but first, we want to\nlook at all the songs that have already been created.\u003c/p\u003e\n\n\u003cp\u003eImagine we already have a database with 1 million songs. We need to build three\nmethods to access all of those songs and convert them to Ruby objects.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e.new_from_db\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe first thing we need to do is convert what the database gives us into a Ruby\nobject. We will use this method to create all the Ruby objects in our next two\nmethods.\u003c/p\u003e\n\n\u003cp\u003eThe first thing to know is that the database, SQLite in our case, will return an\narray of data for each row. For example, a row for Michael Jackson's \"Thriller\"\n(356 seconds long) that has a db id of 1 would look like this: \u003ccode\u003e[1, \"Thriller\",\n356]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef self.new_from_db(row)\u003cbr\u003e  new_song = self.new  # self.new is the same as running Song.new\u003cbr\u003e  new_song.id = row[0]\u003cbr\u003e  new_song.name =  row[1]\u003cbr\u003e  new_song.length = row[2]\u003cbr\u003e  new_song  # return the newly created instance\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, you may notice something - since we're retrieving data from a database, we\nare using \u003ccode\u003enew\u003c/code\u003e. We don't need to \u003cem\u003ecreate\u003c/em\u003e records. With this method, we're\nreading data from SQLite and temporarily representing that data in Ruby.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003eSong.all\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eNow we can start writing our methods to retrieve the data. To return all the\nsongs in the database we need to execute the following SQL query: \u003ccode\u003eSELECT * FROM\nsongs\u003c/code\u003e. Let's store that in a variable called \u003ccode\u003esql\u003c/code\u003e using a heredoc (\u003ccode\u003e\u0026lt;\u0026lt;-\u003c/code\u003e)\nsince our string will go onto multiple lines:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \u0026lt;  SELECT *\u003cbr\u003e  FROM songs\u003cbr\u003eSQL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we will make a call to our database using \u003ccode\u003eDB[:conn]\u003c/code\u003e. This \u003ccode\u003eDB\u003c/code\u003e hash is\nlocated in the \u003ccode\u003econfig/environment.rb\u003c/code\u003e file: \u003ccode\u003eDB = {:conn =\u0026gt;\nSQLite3::Database.new(\"db/songs.db\")}\u003c/code\u003e. Notice that the value of the hash is\nactually a new instance of the \u003ccode\u003eSQLite3::Database\u003c/code\u003e class. This is how we will\nconnect to our database. Our database instance responds to a method called\n\u003ccode\u003eexecute\u003c/code\u003e that accepts raw SQL as a string. Let's pass in that SQL we stored\nabove:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.all\u003cbr\u003e    sql = \u0026lt;      SELECT *\u003cbr\u003e      FROM songs\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will return an array of rows from the database that matches our query. Now,\nall we have to do is iterate over each row and use the \u003ccode\u003eself.new_from_db\u003c/code\u003e method\nto create a new Ruby object for each row:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.all\u003cbr\u003e    sql = \u0026lt;      SELECT *\u003cbr\u003e      FROM songs\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql).map do |row|\u003cbr\u003e      self.new_from_db(row)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003e\u003ccode\u003eSong.find_by_name\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThis one is similar to \u003ccode\u003eSong.all\u003c/code\u003e with the small exception being that we have to\ninclude a name in our SQL statement. To do this, we use a question mark where we\nwant the \u003ccode\u003ename\u003c/code\u003e parameter to be passed in, and we include \u003ccode\u003ename\u003c/code\u003e as the second\nargument to the \u003ccode\u003eexecute\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    sql = \u0026lt;      SELECT *\u003cbr\u003e      FROM songs\u003cbr\u003e      WHERE name = ?\u003cbr\u003e      LIMIT 1\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, name).map do |row|\u003cbr\u003e      self.new_from_db(row)\u003cbr\u003e    end.first\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDon't be freaked out by that \u003ccode\u003e.first\u003c/code\u003e method chained to the end of the\n\u003ccode\u003eDB[:conn].execute(sql, name).map\u003c/code\u003e block. The return value of the \u003ccode\u003e.map\u003c/code\u003e method\nis an array, and we're simply grabbing the \u003ccode\u003e.first\u003c/code\u003e element from the returned\narray. Chaining is cool!\u003c/p\u003e","exportId":"converting-database-records-to-ruby-objects"},{"id":203830,"title":"Converting Database Records to Ruby Objects Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-mapping-database-records-to-ruby-objects-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a method that turns database rows into Ruby objects\u003c/li\u003e\n\u003cli\u003eWrite methods that allow you to search a database\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe are going to continue building out the \u003ccode\u003eStudent\u003c/code\u003e class of our app. We are in\nthe middle of building an app to help a public school's administrators keep\ntrack of their students. In this app, we have a \u003ccode\u003eStudent\u003c/code\u003e class. Each individual\nstudent has two attributes, a \u003ccode\u003ename\u003c/code\u003e and a \u003ccode\u003egrade\u003c/code\u003e, i.e. 9th, 10th, 11th, etc.\u003c/p\u003e\n\n\u003cp\u003eOur administrators need to save the student objects that this class produces to\na database. We've set up the database for you in the \u003ccode\u003econfig/environment.rb\u003c/code\u003e\nfile.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'sqlite3'\u003cbr\u003erequire_relative '../lib/student'\u003cbr\u003e\u003cbr\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/students.db\")}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour connection to the database can be referred to, throughout your program,\nlike this: \u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo far we built the ability to create the \u003ccode\u003estudents\u003c/code\u003e table in the database\n(\u003ccode\u003eStudent.create_table\u003c/code\u003e), drop that table (\u003ccode\u003eStudent.drop_table\u003c/code\u003e), and \u003ccode\u003e#save\u003c/code\u003e a\nstudent to the database.\u003c/p\u003e\n\n\u003cp\u003eNow, we will need to create a method that takes a row from the database and\nturns it back into a Student object. We will call this \u003ccode\u003e.new_from_db\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNext, we want to build a couple of methods to get information from the database.\nWe will call these \u003ccode\u003e.find_by_name\u003c/code\u003e and \u003ccode\u003e.all\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's get started!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.new_from_db\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that accepts a row from the database as an argument. It\nthen creates a new student object based on the information in the row. Remember,\nour database doesn't store Ruby objects, so we have to manually convert it\nourselves.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.find_by_name\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that accepts the name of a student. You will first run a\nSQL query to get the result from the database where the student's name matches\nthe name passed into the argument.\u003c/p\u003e\n\n\u003cp\u003eNext, you will take the result and create a new student instance using the\n\u003ccode\u003e.new_from_db\u003c/code\u003e method you just created.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.all\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that is very similar to the \u003ccode\u003e.find_by_name\u003c/code\u003e method. You\nwill not need an argument since we are returning everything in the database. Run\nthe SQL to return everything (\u003ccode\u003e*\u003c/code\u003e) from a table.\u003c/p\u003e\n\n\u003cp\u003eAgain, you will use the \u003ccode\u003e.new_from_db\u003c/code\u003e method to create a student instance for\neach row that comes back from the database.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.all_students_in_grade_9\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that does not need an argument. This method should return\nan array of all the students in grade 9.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.students_below_12th_grade\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that does not need an argument. This method should return\nan array of all the students below 12th grade.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.first_X_students_in_grade_10\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that takes in an argument of the number of students from\ngrade 10 to select. This method should return an array of exactly \u003ccode\u003eX\u003c/code\u003e number of\nstudents.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.first_student_in_grade_10\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that does not need an argument. This should return the\nfirst student that is in grade 10.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.all_students_in_grade_X\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that takes in an argument of a grade for which to\nretrieve the roster. This method should return an array of all students for\ngrade \u003ccode\u003eX\u003c/code\u003e.\u003c/p\u003e","exportId":"gc34aabe449549774520273766f2ebac0"},{"id":203831,"title":"Updating Records","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-updating-records\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a method that will update an existing database record once changes have\nbeen made to that record's equivalent Ruby object.\u003c/li\u003e\n\u003cli\u003eIdentify whether a Ruby object has already been persisted to the database.\u003c/li\u003e\n\u003cli\u003eBuild a method that can \u003cem\u003eeither\u003c/em\u003e find and update \u003cem\u003eor\u003c/em\u003e create a database record.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eUpdating Records\u003c/h2\u003e\n\n\u003cp\u003eIt's hard to imagine a database that would stay totally static and never change.\nFor example, a customer who uses your online marketplace updates their billing\ninformation or makes a new purchase. A user of your social networking site\n\"friends\" another user, creating a new association between them. A hospital\nupdates the medical history of one of its patients. In each of these example\napps that uses a database, we need to be able to update, or change, the records\nthat are stored in that database.\u003c/p\u003e\n\n\u003cp\u003eWhat do we need to do in order to successfully update a record? First, we need\nto find the appropriate record. Then, we make some changes to it, and finally,\nsave it once again.\u003c/p\u003e\n\n\u003cp\u003eIn our Ruby ORM, where attributes of given Ruby objects are stored as an\nindividual row in a database table, we will need to retrieve these attributes,\nreconstitute them into a Ruby object, make changes to that object using Ruby\nmethods, and \u003cem\u003ethen\u003c/em\u003e save those (newly updated) attributes back into the\ndatabase.\u003c/p\u003e\n\n\u003cp\u003eLet's walk through this process together.\u003c/p\u003e\n\n\u003ch2\u003eUpdating a Record in a Ruby ORM\u003c/h2\u003e\n\n\u003cp\u003eFor the purposes of this example, we'll be working with a fictitious music\nmanagement app that allows the user to store their songs. Our app has a \u003ccode\u003eSong\u003c/code\u003e\nclass that maps to a songs database table. Our \u003ccode\u003eSong\u003c/code\u003e class has all the methods\nit needs to create the songs table, insert records into that table and retrieve\nrecords from that table.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003eSong\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eFor this example, we'll assume that our database connection is stored in the \u003ccode\u003eDB[:conn]\u003c/code\u003e constant.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003eattr_accessor :name, :album\u003cbr\u003eattr_reader :id\u003cbr\u003e\u003cbr\u003e  def initialize(id=nil, name, album)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create_table\u003cbr\u003e    sql =  \u0026lt;      CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e        id INTEGER PRIMARY KEY,\u003cbr\u003e        name TEXT,\u003cbr\u003e        album TEXT\u003cbr\u003e        )\u003cbr\u003e        SQL\u003cbr\u003e    DB[:conn].execute(sql)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album)\u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e    @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create(name:, album:)\u003cbr\u003e    song = Song.new(name, album)\u003cbr\u003e    song.save\u003cbr\u003e    song\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    sql = \"SELECT * FROM songs WHERE name = ?\"\u003cbr\u003e    result = DB[:conn].execute(sql, name)[0]\u003cbr\u003e    Song.new(result[0], result[1], result[2])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the \u003ccode\u003eSong\u003c/code\u003e class as defined above, we can create new \u003ccode\u003eSong\u003c/code\u003e instances, save\nthem to the database and retrieve them from the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems = Song.create(name: \"99 Problems\", album: \"The Blueprint\")\u003cbr\u003e\u003cbr\u003eSong.find_by_name(\"99 Problems\")\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we've seen how to create a \u003ccode\u003eSong\u003c/code\u003e instance, save its attributes to the\ndatabase, retrieve those attributes and use them to re-create a \u003ccode\u003eSong\u003c/code\u003e instance,\nlet's move on to updating records and objects.\u003c/p\u003e\n\n\u003ch3\u003eUpdating Songs\u003c/h3\u003e\n\n\u003cp\u003eIn order to update a record, we must first find it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems = Song.find_by_name(\"99 Problems\")\u003cbr\u003e\u003cbr\u003eninety_nine_problems.album\u003cbr\u003e# =\u0026gt; \"The Blueprint\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh, 99 Problems is off The Black Album, as we all know. Let's fix this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems.album = \"The Black Album\"\u003cbr\u003e\u003cbr\u003eninety_nine_problems.album\u003cbr\u003e# =\u0026gt; \"The Black Album\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better. Now we need to save this record back into the database:\u003c/p\u003e\n\n\u003cp\u003eTo do so, we'll need to use an \u003ccode\u003eUPDATE\u003c/code\u003e SQL statement. That statement would look\nsomething like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUPDATE songs\u003cbr\u003eSET album=\"The Black Album\"\u003cbr\u003eWHERE name=\"99 Problems\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's put it all together using our SQLite3-Ruby gem magic. Remember, in this\nexample, we assume our database connection is stored in \u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \"UPDATE songs SET album = ? WHERE name = ?\"\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(sql, ninety_nine_problems.album, ninety_nine_problems.name)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we've updated the album of a given song. What happens when we want to\nupdate some other attribute of a song?\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.create(name: \"Hella\", album: \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's correct the name of the above song from \u003ccode\u003e\"Hella\"\u003c/code\u003e to \u003ccode\u003e\"Hello\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.find_by_name(\"Hella\")\u003cbr\u003e\u003cbr\u003esql = \"UPDATE songs SET name='Hello' WHERE name = ?\"\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(sql, hello.name)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code is almost exactly the same as the code we used to update the album of\nthe first song. The only difference is in the particular attribute we wanted to\nupdate. In the first case, we were updating the album. In this case, we updated\nthe name. Repetitious code has a smell. Let's extract this functionality of\nupdating a record into a method, \u003ccode\u003e#update\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#update\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eHow will we write a method that will allow us to update any attributes of any\nsong? How will we know \u003cem\u003ewhich\u003c/em\u003e attributes have been recently updated and which\nwill remain the same?\u003c/p\u003e\n\n\u003cp\u003eThe best way for us to do this is to simply update \u003cem\u003eall\u003c/em\u003e the attributes whenever\nwe update a record. That way, we will catch any changed attributes, while the\nun-changed ones will simply remain the same.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.find_by_name(\"Hella\")\u003cbr\u003e\u003cbr\u003esql = \"UPDATE songs SET name = 'Hello', album = ? WHERE name = ?\"\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(sql, hello.album, hello.name)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we update \u003cem\u003eboth\u003c/em\u003e the name and album attribute of the song, even though only\nthe name attribute is actually different.\u003c/p\u003e\n\n\u003cp\u003eOkay, now that we've solved this problem, let's build our method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def update\u003cbr\u003e    sql = \"UPDATE songs SET name = ?, album = ? WHERE name = ?\"\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album, self.name)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can update a song with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.create(name: \"Hella\", album: \"25\")\u003cbr\u003ehello.name = \"Hello\"\u003cbr\u003ehello.update\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWait a second, you might be wondering, how can the \u003ccode\u003e#update\u003c/code\u003e method use \u003ccode\u003eWHERE name = #{self.name}\"\u003c/code\u003e if we \u003cem\u003ejust changed the name of the song?\u003c/em\u003e \u003cstrong\u003eWell...it\ncan't!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe above \u003ccode\u003e#update\u003c/code\u003e method \u003cem\u003ewill not work\u003c/em\u003e if we are trying to update the name\nof a song. Think about it: If we change the name of \u003ccode\u003ehello\u003c/code\u003e from \u003ccode\u003e\"Hella\"\u003c/code\u003e to\n\u003ccode\u003e\"Hello\"\u003c/code\u003e with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.name = \"Hello\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen the database table doesn't yet know that we changed the name. We haven't\nsaved that change yet so the database row that stores \u003ccode\u003ehello\u003c/code\u003e's information\nstill has a value of \u003ccode\u003e\"Hella\"\u003c/code\u003e in the \"name\" column. So, after the above line of\ncode is executed, our SQL query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \"UPDATE songs SET name = ?, album = ? WHERE name = ?\"\u003cbr\u003eDB[:conn].execute(sql, self.name, self.album, self.name)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWould be interpreted like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDB[:conn].execute(sql, \"Hello\", \"25\", \"Hello\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd, seeing as our database row still has a value of \u003ccode\u003e\"Hella\"\u003c/code\u003e in the \"name\"\ncolumn, our query would fail to find the correct record and consequently fail to\nupdate it.\u003c/p\u003e\n\n\u003cp\u003eSo using something changeable, like name, to identify the record we want to\nupdate, won't work. If only each individual database record and its analogous\nRuby object had some kind of unique, un-changing identifier...\u003c/p\u003e\n\n\u003cp\u003eThat's where the primary key ID of a database record and the \u003ccode\u003eid\u003c/code\u003e attribute of\nits analogous Ruby object come in.\u003c/p\u003e\n\n\u003ch2\u003eIdentifying Objects and Records Using ID\u003c/h2\u003e\n\n\u003cp\u003eWe need a way to select a Ruby object's analogous table row using some fixed and\nunique attribute. Song records in the database table have a unique \u003ccode\u003eid\u003c/code\u003e, and our\n\u003ccode\u003eSong\u003c/code\u003e instances have an \u003ccode\u003eid\u003c/code\u003e attribute. Recall that we have been setting the\n\u003ccode\u003eid\u003c/code\u003e attribute of individual songs directly after the data regarding that song\ngets inserted into the database table, right at the end of our \u003ccode\u003e#save\u003c/code\u003e method.\nWhy?\u003c/p\u003e\n\n\u003cp\u003eThe unique \u003ccode\u003eid\u003c/code\u003e number of a \u003ccode\u003eSong\u003c/code\u003e instance should \u003cem\u003ecome from the database\u003c/em\u003e.\nWhen a song record gets inserted into the database, that row automatically gets\nassigned a unique ID number. We need to grab that ID number \u003cem\u003efrom the database\nrecord\u003c/em\u003e and assign it to the \u003ccode\u003eSong\u003c/code\u003e instance's \u003ccode\u003eid\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eIf that sounds confusing, check out this diagram:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Untitled%20drawing.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's break it down:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWe create a new instance of the \u003ccode\u003eSong\u003c/code\u003e class. That instance has a \u003ccode\u003ename\u003c/code\u003e and\n\u003ccode\u003ealbum\u003c/code\u003e attribute. But its \u003ccode\u003eid\u003c/code\u003e attribute is \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe name and album of this song instance are used to create a new database\nrecord––a new row in the songs table. That record has an ID of \u003ccode\u003e1\u003c/code\u003e (this would\nappear to be the first song we've ever saved in our database).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe ID of the newly created database record is then taken and assigned to the\n\u003ccode\u003eid\u003c/code\u003e attribute of the original song object.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhat's so great about this? Well, with this pattern, every instance of the\n\u003ccode\u003eSong\u003c/code\u003e class that is ever saved into the database will be assigned a unique \u003ccode\u003eid\u003c/code\u003e\nattribute that we can use to differentiate it from the other \u003ccode\u003eSong\u003c/code\u003e objects we\ncreated and that we can use to find, retrieve and update unique songs.\u003c/p\u003e\n\n\u003cp\u003eNow that we are all convinced that this is the behavior we want to implement,\ntake a closer look at the code that implements it.\u003c/p\u003e\n\n\u003ch3\u003eAssigning Unique IDs on \u003ccode\u003e#save\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAt what point in time should a \u003ccode\u003eSong\u003c/code\u003e instance get assigned a unique \u003ccode\u003eid\u003c/code\u003e? Right\nafter we \u003ccode\u003eINSERT\u003c/code\u003e it into the database. At that point, its equivalent database\nrecord will have a unique ID in the ID column. We want to simply grab that ID\nand use it to assign the \u003ccode\u003eSong\u003c/code\u003e object its \u003ccode\u003eid\u003c/code\u003e value.\u003c/p\u003e\n\n\u003cp\u003eWhen do we \u003ccode\u003eINSERT\u003c/code\u003e a new record into our database? In the \u003ccode\u003e#save\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  sql = \u0026lt;    INSERT INTO songs (name, album)\u003cbr\u003e    VALUES (?, ?)\u003cbr\u003e  SQL\u003cbr\u003e  DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRight after we \u003ccode\u003eexecute\u003c/code\u003e the SQL \u003ccode\u003eINSERT\u003c/code\u003e statement is an appropriate place to\nassign our \u003ccode\u003eSong\u003c/code\u003e object its unique \u003ccode\u003eid\u003c/code\u003e from the database.\u003c/p\u003e\n\n\u003cp\u003eHow do we get the unique ID of the record we just created? We query the database\ntable for the ID of the last inserted row:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT last_insert_rowid() FROM songs\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e When we execute the above SQL statement using our SQLite3-Ruby\ngem, we get back something that may feel unexpected:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")\u003cbr\u003e# =\u0026gt; [[1]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRecall that whenever we execute SQL statements against our database using the\nSQLite3-Ruby gem's \u003ccode\u003e#execute\u003c/code\u003e method, we will get back an array of arrays. Here,\nwe used the \u003ccode\u003elast_insert_rowid()\u003c/code\u003e SQL query to request one thing: the last\ninserted row's ID. Our SQLite3-Ruby gem obliged and gave us an array that\ncontains one array that contains one element––the last inserted row ID. Phew!\u003c/p\u003e\n\n\u003cp\u003eSo, let's put it all together with our new-and-improved \u003ccode\u003e#save\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  sql = \u0026lt;    INSERT INTO songs (name, album)\u003cbr\u003e    VALUES (?, ?)\u003cbr\u003e  SQL\u003cbr\u003e  DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e  @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's see what happens when we create a new song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.create(name: \"Hello\", album: \"25\")\u003cbr\u003e\u003cbr\u003ehello.name\u003cbr\u003e# =\u0026gt; \"Hello\"\u003cbr\u003e\u003cbr\u003ehello.album\u003cbr\u003e# =\u0026gt; \"25\"\u003cbr\u003e\u003cbr\u003ehello.id\u003cbr\u003e# =\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! Now our individual \u003ccode\u003eSong\u003c/code\u003e objects will get assigned a unique \u003ccode\u003eid\u003c/code\u003e\nattribute, as soon as they are saved to the database. That means that we can\nrefactor our \u003ccode\u003e#update\u003c/code\u003e method such that it will only update the correct, unique\nrecord.\u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003eid\u003c/code\u003e to Update Records\u003c/h2\u003e\n\n\u003cp\u003eOur \u003ccode\u003e#update\u003c/code\u003e method should identify the correct record to update based on the\nunique ID that both the song Ruby object and the songs table row share:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def update\u003cbr\u003e    sql = \"UPDATE songs SET name = ?, album = ? WHERE id = ?\"\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album, self.id)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we will never have to worry about accidentally updating the wrong record, or\nbeing unable to find a record once we change its name.\u003c/p\u003e\n\n\u003ch2\u003eRefactoring our \u003ccode\u003e#save\u003c/code\u003e Method to Avoid Duplication\u003c/h2\u003e\n\n\u003cp\u003eOur \u003ccode\u003e#save\u003c/code\u003e method currently looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  sql = \u0026lt;    INSERT INTO songs (name, album)\u003cbr\u003e    VALUES (?, ?)\u003cbr\u003e  SQL\u003cbr\u003e\u003cbr\u003e  DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e  @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method will \u003cem\u003ealways \u003ccode\u003eINSERT\u003c/code\u003e a new row into the database table\u003c/em\u003e. But, what\nhappens if we accidentally call \u003ccode\u003e#save\u003c/code\u003e on an object that has already been\npersisted and has an analogous database row?\u003c/p\u003e\n\n\u003cp\u003eIt would have the effect of creating a new database row with the same attributes\nas an existing row. The only difference would be the \u003ccode\u003eid\u003c/code\u003e number:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003ehello.save\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(\"SELECT * FROM songs WHERE name = 'Hello' AND album = '25'\")\u003cbr\u003e# =\u0026gt; [[1, \"Hello\", \"25\"]]\u003cbr\u003e\u003cbr\u003e# What happens if we save the same song again?\u003cbr\u003e\u003cbr\u003ehello.save\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(\"SELECT * FROM songs WHERE name = 'Hello' AND album = '25'\")\u003cbr\u003e# =\u0026gt; [[1, \"Hello\", \"25\"], [2, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOh no! We have two records in our songs table that contain the same information.\nIt is clear that our \u003ccode\u003e#save\u003c/code\u003e method needs some fail-safes to protect against\nthis kind of thing.\u003c/p\u003e\n\n\u003cp\u003eWe need our \u003ccode\u003e#save\u003c/code\u003e method to check to see if the object it is being called on\nhas already been persisted. If so, \u003cem\u003edon't \u003ccode\u003eINSERT\u003c/code\u003e a new row into the database\u003c/em\u003e,\nsimply \u003cem\u003eupdate\u003c/em\u003e an existing one. Now that we have our handy \u003ccode\u003e#update\u003c/code\u003e method\nready to go, this should be easy.\u003c/p\u003e\n\n\u003cp\u003eHow do we know if an object has been persisted? If it has an \u003ccode\u003eid\u003c/code\u003e that is not\n\u003ccode\u003enil\u003c/code\u003e. Remember that an object's \u003ccode\u003eid\u003c/code\u003e attribute gets set only once it has been\n\u003ccode\u003eINSERT\u003c/code\u003eed into the database.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at our new \u003ccode\u003e#save\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  if self.id\u003cbr\u003e    self.update\u003cbr\u003e  else\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album)\u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e    @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now our \u003ccode\u003e#save\u003c/code\u003e method will never create duplicate records!\u003c/p\u003e","exportId":"updating-records"},{"id":203832,"title":"Updating Records Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-updating-records-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild an \u003ccode\u003e#update\u003c/code\u003e method that updates an existing record. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we will be working with a \u003ccode\u003eStudent\u003c/code\u003e class. Each student has an \u003ccode\u003eid\u003c/code\u003e, a \u003ccode\u003ename\u003c/code\u003e and a \u003ccode\u003egrade\u003c/code\u003e. Students should be initialized with an id that defaults to \u003ccode\u003enil\u003c/code\u003e, a name and a grade. \u003c/p\u003e\n\n\u003cp\u003eIn this lab, our connection to the database is set up for you in the \u003ccode\u003econfig/environment.rb\u003c/code\u003e file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/students.db\")}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn your \u003ccode\u003eStudent\u003c/code\u003e class, you can access the database connection via: \u003ccode\u003eDB[:conn]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eYou'll be building the following methods:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in three arguments, the id, name and grade. The id should default to \u003ccode\u003enil\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create_table\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis class method creates the students table with columns that match the attributes of our individual students: an id (which is the primary key), the name and the grade. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.drop_table\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis class method should be responsible for dropping the students table. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#save\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis instance method inserts a new row into the database using the attributes of the given object. This method \u003cem\u003ealso\u003c/em\u003e assigns the \u003ccode\u003eid\u003c/code\u003e attribute of the object once the row has been inserted into the database. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method creates a student with two attributes, name and grade, and saves it into the students table.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.new_from_db\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis class method takes an argument of an array. When we call this method we will pass it the array that is the row returned from the database by the execution of a SQL query. We can anticipate that this array will contain three elements in this order: the id, name and grade of a student. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.new_from_db\u003c/code\u003e method uses these three array elements to create a new \u003ccode\u003eStudent\u003c/code\u003e object with these attributes. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.find_by_name\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis class method takes in an argument of a name. It queries the database table for a record that has a name of the name passed in as an argument. Then it uses the \u003ccode\u003e#new_from_db\u003c/code\u003e method to instantiate a \u003ccode\u003eStudent\u003c/code\u003e object with the database row that the SQL query returns. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#update\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method updates the database row mapped to the given \u003ccode\u003eStudent\u003c/code\u003e instance. \u003c/p\u003e","exportId":"g6bb21dc1afdf64f615b5099eb7b4e28a"},{"id":203834,"title":"Finding or Creating By","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-find-or-create-by\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-find-or-create-by/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-find-or-create-by\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-find-or-create-by/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAvoid creating duplicate records in a database that is mapped to a Ruby\nprogram\u003c/li\u003e\n\u003cli\u003eBuild a \u003ccode\u003e#find_or_create_by\u003c/code\u003e method\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eThe Dreaded Duplication\u003c/h2\u003e\n\n\u003cp\u003eWhat happens when two Ruby objects get created using the same attributes? If we\nare trying to persist representations of such objects to a database, would we\nend up with essentially identical rows in our table? That would make for a very\nconfusing database and our program would quickly become useless as a way to\nstore and manage information.\u003c/p\u003e\n\n\u003cp\u003eFor example, lets say we have a \u003ccode\u003eSong\u003c/code\u003e class that produces individual song\nobjects, each of which has a \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ealbum\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eNothing stops us from creating two objects, each of which has the exact same\nname and album.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003ehello_again = Song.new(\"Hello\", \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens when we save these objects to our database?\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eFor this example\u003c/em\u003e, we'll assume our connection to the database is stored in\n\u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.save\u003cbr\u003ehello_again.save\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(\"SELECT * FROM songs WHERE name = \"Hello\")\u003cbr\u003e# =\u0026gt; [[1, \"Hello\", \"25\"], [2, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have two records that contain the same information! How can we avoid this?\nWhen we try to save a new \u003ccode\u003eSong\u003c/code\u003e instance, we should first check to see whether\nthe object we are trying to save already has an equivalent record in the\ndatabase. If it does, we should simply update it. Otherwise, we can go ahead and\nsave it.\u003c/p\u003e\n\n\u003ch2\u003eSaving vs. Updating\u003c/h2\u003e\n\n\u003cp\u003eLet's say we have a song, \u003ccode\u003ehello\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.new(\"Hello\", \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore we call \u003ccode\u003e#save\u003c/code\u003e on our \u003ccode\u003ehello\u003c/code\u003e object, we need to check and see if a\nrecord containing this name and album already exists in the database. The SQL\nstatement to accomplish that would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM songs\u003cbr\u003eWHERE name = \"Hello\", album = \"25\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf this statement returns a record, we don't need to create a new record, only\nupdate the existing one. Otherwise, we need to insert a new record into our\ndatabase table.\u003c/p\u003e\n\n\u003cp\u003eLet's build a method that will allow us to either \u003cem\u003efind an existing record\u003c/em\u003e or\n\u003cem\u003ecreate and save\u003c/em\u003e a new one.\u003c/p\u003e\n\n\u003ch2\u003eThe \u003ccode\u003e#find_or_create_by\u003c/code\u003e Method\u003c/h2\u003e\n\n\u003cp\u003eTake a look at our \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003eattr_accessor :name, :album\u003cbr\u003eattr_reader :id\u003cbr\u003e\u003cbr\u003e  def initialize(id=nil, name, album)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    if self.id\u003cbr\u003e      self.update\u003cbr\u003e    else\u003cbr\u003e      sql = \u0026lt;        INSERT INTO songs (name, album)\u003cbr\u003e        VALUES (?, ?)\u003cbr\u003e      SQL\u003cbr\u003e\u003cbr\u003e      DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e      @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create(name:, album:)\u003cbr\u003e    song = Song.new(name, album)\u003cbr\u003e    song.save\u003cbr\u003e    song\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_id(id)\u003cbr\u003e    sql = \"SELECT * FROM songs WHERE id = ?\"\u003cbr\u003e    result = DB[:conn].execute(sql, id)[0]\u003cbr\u003e    Song.new(result[0], result[1], result[2])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def update\u003cbr\u003e    sql = \"UPDATE songs SET name = ?, album = ? WHERE id = ?\"\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album, self.id)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's build our \u003ccode\u003e#find_or_create_by\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  def self.find_or_create_by(name:, album:)\u003cbr\u003e    song = DB[:conn].execute(\"SELECT * FROM songs WHERE name = ? AND album = ?\", name, album)\u003cbr\u003e    if !song.empty?\u003cbr\u003e      song_data = song[0]\u003cbr\u003e      song = Song.new(song_data[0], song_data[1], song_data[2])\u003cbr\u003e    else\u003cbr\u003e      song = self.create(name: name, album: album)\u003cbr\u003e    end\u003cbr\u003e    song\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break this down:\u003c/p\u003e\n\n\u003cp\u003eFirst, we query the database: does a record exist that has this name and album?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = DB[:conn].execute(\"SELECT * FROM songs WHERE name = ? AND album = ?\", name, album)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf such a record exists, the \u003ccode\u003esong\u003c/code\u003e variable will now point to an array that\nwould look something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003esong name and album name provided as a hypothetical example\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[[1, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf this is the case, then the statement: \u003ccode\u003e!song.empty?\u003c/code\u003e will return \u003ccode\u003etrue\u003c/code\u003e.\nTherefore, we will use the returned values to make a new \"Hello\" object that\nRuby can play around with, but we will \u003cem\u003enot\u003c/em\u003e save it to the database. That\nre-instantiation of an existing Song object is accomplished with these lines:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong_data = song[0]\u003cbr\u003esong = Song.new(song_data[0], song_data[1], song_data[2])\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe grab the \u003ccode\u003esong_data\u003c/code\u003e from the \u003ccode\u003esong\u003c/code\u003e array of arrays, setting \u003ccode\u003esong_data\u003c/code\u003e\nequal to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1, \"Hello\", \"25\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we use this array to create a new \u003ccode\u003eSong\u003c/code\u003e instance with the given id, name\nand album.\u003c/p\u003e\n\n\u003cp\u003eHowever, if no record exists that matches the name and album passed in as\narguments, then \u003ccode\u003e!song.empty?\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e, and we will instead create\nand save a new \u003ccode\u003eSong\u003c/code\u003e instance with the \u003ccode\u003e#create\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eAt the end of our \u003ccode\u003e#find_or_create_by\u003c/code\u003e method, we will return the song object\nwhose database entry we either found or created. This method assumes that there\nisn't already a song object matching these attributes, but that there may\nalready exist a database entry with the same name and album. Therefore, it\ninstantiates a new instance of the \u003ccode\u003eSong\u003c/code\u003e class while preventing a duplicate\ndatabase entry.\u003c/p\u003e\n\n\u003ch3\u003eOur Code in Action\u003c/h3\u003e\n\n\u003cp\u003eNow, we can use our \u003ccode\u003eSong\u003c/code\u003e class without worrying about creating duplicate records:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.find_or_create_by(name: \"Hello\", album: \"25\")\u003cbr\u003eSong.find_or_create_by(name: \"Hello\", album: \"25\")\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(\"SELECT * FROM songs WHERE name = Hello, album = 25\")\u003cbr\u003e# =\u0026gt; [[1, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlthough we called \u003ccode\u003e#find_or_create_by\u003c/code\u003e twice \u003cem\u003ewith the same data\u003c/em\u003e (gasp!), we\nonly created \u003cem\u003eone record with that data\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eBonus Section- Video Reviews\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=mZROu5oSWfI\"\u003eVideo Review- ORMs and SQL Joins\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=hts7TjpPw-8\"\u003eVideo Review- Building a Metaprogrammed Abstract ORM\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=1eIgKGukBlg\"\u003eVideo Review- Code-along: Building a Room Scraper and ORM\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"finding-or-creating-by"},{"id":203835,"title":"ORMs: Bringing It All Together","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-bringing-it-all-together\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-bringing-it-all-together/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-bringing-it-all-together\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-bringing-it-all-together/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand what an Object Relational Mapper(ORM) is.\u003c/li\u003e\n\u003cli\u003eGain ability to implement characteristics of an ORM when using a relational\ndatabase management system (RDBMS) in a ruby program.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis lab involves building a basic ORM for a Dog object.  The \u003ccode\u003eDog\u003c/code\u003e class\ndefined in \u003ccode\u003elib/dog.rb\u003c/code\u003e implements behaviors of a basic ORM.\u003c/p\u003e\n\n\u003ch3\u003e\u003cstrong\u003eEnvironment\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eOur environment is going to be a single point of requires and loads.  It is also\ngoing to define a constant, \u003ccode\u003eDB\u003c/code\u003e, whose sole responsibility is setting up and\nmaintaining connection to our application's database.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/dogs.db\")}\u003c/code\u003e \u003ccode\u003eDB\u003c/code\u003e is set equal to a\nhash, which has a single key, \u003ccode\u003e:conn\u003c/code\u003e. The key, \u003ccode\u003e:conn\u003c/code\u003e,  will have a value of\na connection to a sqlite3 database in the db directory.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHowever, in our \u003ccode\u003espec_helper\u003c/code\u003e, which is our testing environment, we're going to\nredefine the value of that key (not of the constant) to point to an in-memory\ndatabase. This will allow our tests to run in isolation of our production\ndatabase. Whenever we want to refer to the application's connection to the\ndatabase, we will simply rely on \u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eSolving The Lab: The Spec Suite\u003c/h2\u003e\n\n\u003ch3\u003eStart with these methods\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e#attributes\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe first test is concerned solely with making sure that our dogs have all the\nrequired attributes and that they are readable and writable.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e method accepts a hash or keyword argument value with key-value\npairs as an argument. key-value pairs need to contain id, name, and breed.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e::create_table\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYour task  here is to define a class method on Dog that will execute the correct\nSQL to create a dogs table.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003enote:\u003c/strong\u003e You will notice below a new sign, \u003ccode\u003e::\u003c/code\u003e, placed before methods. Don't worry about it now. It allows methods defined within a class, to be accessed from anywhere outside that class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe '::create_table' do\u003cbr\u003e  it 'creates a dogs table' do\u003cbr\u003e    DB[:conn].execute('DROP TABLE IF EXISTS dogs')\u003cbr\u003e    Dog.create_table\u003cbr\u003e\u003cbr\u003e    table_check_sql = \"SELECT tbl_name FROM sqlite_master WHERE type='table' AND tbl_name='dogs';\"\u003cbr\u003e    expect(DB[:conn].execute(table_check_sql)[0]).to eq(['dogs'])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur test first makes sure that we are starting with a clean database by\nexecuting the SQL command \u003ccode\u003eDROP TABLE IF EXISTS dogs\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNext we call the soon-to-be defined \u003ccode\u003ecreate_table\u003c/code\u003e method, which is responsible\nfor creating a table called dogs with the appropriate columns.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e::drop_table\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis method will drop the dogs table from the database.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe '::drop_table' do\u003cbr\u003e    it \"drops the dogs table\" do\u003cbr\u003e        Dog.drop_table\u003cbr\u003e\u003cbr\u003e      table_check_sql = \"SELECT tbl_name FROM sqlite_master WHERE type='table' AND tbl_name='dogs';\"\u003cbr\u003e      expect(DB[:conn].execute(table_check_sql)[0]).to be_nil\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is basically the exact opposite of the previous test. Your job is to define a\nclass method on \u003ccode\u003eDog\u003c/code\u003e that will execute the correct SQL to drop a dogs table.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e::new_from_db\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is an interesting method. Ultimately, the database is going to return an\narray representing a dog's data. We need a way to cast that data into the\nappropriate attributes of a dog. This method encapsulates that functionality.\nYou can even think of it as  \u003ccode\u003enew_from_array\u003c/code\u003e. Methods like this, that return\ninstances of the class, are known as constructors, just like \u003ccode\u003e.new\u003c/code\u003e, except that\nthey extend the functionality of \u003ccode\u003e.new\u003c/code\u003e without overwriting \u003ccode\u003einitialize\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e::find_by_name\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis spec will first insert a dog into the database and then attempt to find it\nby calling the find\u003cem\u003eby\u003c/em\u003ename method. The expectations are that an instance of the\ndog class that has all the properties of a dog is returned, not primitive data.\u003c/p\u003e\n\n\u003cp\u003eInternally, what will the \u003ccode\u003efind_by_name\u003c/code\u003e method do to find a dog; which SQL\nstatement must it run? Additionally, what method might \u003ccode\u003efind_by_name\u003c/code\u003e use\ninternally to quickly take a row and create an instance to represent that data?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e#update\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis spec will create and insert a dog, and afterwards, it will change the name\nof the dog instance and call update. The expectations are that after this\noperation, there is no dog left in the database with the old name. If we query\nthe database for a dog with the new name, we should find that dog and the ID of\nthat dog should be the same as the original, signifying this is the same dog,\nthey just changed their name.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e#save\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis spec ensures that given an instance of a dog, simply calling \u003ccode\u003esave\u003c/code\u003e will\ntrigger the correct operation. To implement this, you will have to figure out a\nway for an instance to determine whether it has been persisted into the DB.\u003c/p\u003e\n\n\u003cp\u003eIn the first test, we create an instance. Since it has never been saved\nbefore, specify that the instance will receive a method call to \u003ccode\u003einsert\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn the next test, we create an instance, save it, change its name, and then\nspecify that a call to the save method should trigger an \u003ccode\u003eupdate\u003c/code\u003e.\u003c/p\u003e","exportId":"ga55b4477b47192f2accc26b54c5b52c2"},{"id":203836,"title":"Dynamic ORMs","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dynamic-orms-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/dynamic-orms-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dynamic-orms-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dynamic-orms-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain why a dynamic ORM is useful to us as developers\u003c/li\u003e\n\u003cli\u003eBuild a basic dynamic ORM\u003c/li\u003e\n\u003cli\u003eBuild a dynamic ORM that can be used by any given Ruby class\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Dynamic ORMs?\u003c/h2\u003e\n\n\u003cp\u003eAs developers, we understand the need for our Ruby programs to be able to connect with a database. Any complex application is going to need to persist some data. Along with this need, we recognize the need for the connection between our program and our database to be, like all of our code, organized and sensible. That is why we use the ORM design pattern in which a Ruby class is mapped to a database table and instances of that class are represented as rows in that table.\u003c/p\u003e\n\n\u003cp\u003eWe can implement this mapping by using a class to create a database table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :name, :album\u003cbr\u003e  attr_reader :id\u003cbr\u003e\u003cbr\u003e  def initialize(id=nil, name, album)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create_table\u003cbr\u003e    sql =  \u0026lt;      CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e        id INTEGER PRIMARY KEY,\u003cbr\u003e        name TEXT,\u003cbr\u003e        album TEXT\u003cbr\u003e        )\u003cbr\u003e    SQL\u003cbr\u003e    DB[:conn].execute(sql)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we create our \u003ccode\u003esongs\u003c/code\u003e table, so-named because we are mapping this table to an existing class, \u003ccode\u003eSong\u003c/code\u003e. The column names for the table are taken from the known \u003ccode\u003eattr_accessor\u003c/code\u003es of the \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eThis is one way to map our program to our database, but it has some limitations. For one thing, our \u003ccode\u003e#create_table\u003c/code\u003e method is dependent on our knowing exactly what to name our table and columns. So, every class in our program would require us to re-write this \u003ccode\u003e#create_table\u003c/code\u003e method, swapping out different table and column names each time. This is repetitive. As you know, we programmers are lazy and we hate to repeat ourselves. Any smelly, repetitious code, begs the question: can we abstract this into a re-usable method? In this case––can we extract our class-specific \u003ccode\u003e#create_table\u003c/code\u003e method into one that is flexible and abstract and be used across any class?\u003c/p\u003e\n\n\u003cp\u003eWell, with a dynamic ORM, we can abstract all of our conventional ORM methods into just such flexible, abstract, and shareable methods.\u003c/p\u003e\n\n\u003ch2\u003eWhat is a Dynamic ORM?\u003c/h2\u003e\n\n\u003cp\u003eA dynamic ORM allows us to map an existing database table to a class and write methods that can use nothing more than information regarding a specific database table to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate \u003ccode\u003eattr_accessors\u003c/code\u003e for a Ruby class.\u003c/li\u003e\n\u003cli\u003eCreate shareable methods for inserting, updating, selecting, and deleting data from the database table.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis pattern –– first creating the database table and having your program do all the work of writing your ORM methods for you, based on that table –– is exactly how we will develop web applications in Sinatra and Rails.\u003c/p\u003e\n\n\u003ch2\u003eCreating Our ORM\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e Writing an ORM is hard! It will require a lot of abstract thinking and we will be doing some metaprogramming. That's why we've provided you all of the code we'll be looking at in this walk-through. You'll find the code in \u003ccode\u003elib/song.rb\u003c/code\u003e. You should clone down this repo and play around with the code to get more familiar with it.\u003c/p\u003e\n\n\u003ch2\u003eStep 1: Setting Up the Database\u003c/h2\u003e\n\n\u003cp\u003eFor this exercise, we'll be working with a \u003ccode\u003eSong\u003c/code\u003e class. To create a dynamic ORM, we start by creating our database and songs table. In \u003ccode\u003econfig/environment.rb\u003c/code\u003e you'll find the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'sqlite3'\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/songs.db\")}\u003cbr\u003eDB[:conn].execute(\"DROP TABLE IF EXISTS songs\")\u003cbr\u003e\u003cbr\u003esql = \u0026lt;  CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  album TEXT\u003cbr\u003e  )\u003cbr\u003eSQL\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(sql)\u003cbr\u003eDB[:conn].results_as_hash = true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we are doing a couple of things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreating the database.\u003c/li\u003e\n\u003cli\u003eDrop \u003ccode\u003esongs\u003c/code\u003e to avoid an error.\u003c/li\u003e\n\u003cli\u003eCreating the \u003ccode\u003esongs\u003c/code\u003e table.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eLastly, we use the \u003ccode\u003e#results_as_hash\u003c/code\u003e method, available to use from the SQLite3-Ruby gem. This method says: when a \u003ccode\u003eSELECT\u003c/code\u003e statement is executed, don't return a database row as an array, return it as a hash with the column names as keys.\u003c/p\u003e\n\n\u003cp\u003eSo, instead of \u003ccode\u003eDB[:conn].execute(\"SELECT * FROM songs LIMIT 1\")\u003c/code\u003e returning something that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[[1, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt will return something that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"id\"=\u0026gt;1, \"name\"=\u0026gt;\"Hello\", \"album\"=\u0026gt;\"25\", 0 =\u0026gt; 1, 1 =\u0026gt; \"Hello\", 2 =\u0026gt; \"25\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will be helpful to us as we use information requested from our database table to build attributes and methods on our \u003ccode\u003eSong\u003c/code\u003e class, but more on that later.\u003c/p\u003e\n\n\u003cp\u003eOkay, now that we see how our database and table have been set up, let's move onto metaprogramming our \u003ccode\u003eSong\u003c/code\u003e class using information from our database.\u003c/p\u003e\n\n\u003ch2\u003eStep 2: Building \u003ccode\u003eattr_accessor\u003c/code\u003es from column names\u003c/h2\u003e\n\n\u003cp\u003eThe next step of building our dynamic ORM is to use the column names of the \u003ccode\u003esongs\u003c/code\u003e table to dynamically create the \u003ccode\u003eattr_accessor\u003c/code\u003es of our \u003ccode\u003eSong\u003c/code\u003e class. In order to do that, we first need to collect the column names from our \u003ccode\u003esongs\u003c/code\u003e table. In order to collect the column names from the songs table we need to tell our \u003ccode\u003eSong\u003c/code\u003e class what table to query. However, we \u003cem\u003edon't\u003c/em\u003e want to tell the \u003ccode\u003eSong\u003c/code\u003e class to query the \u003ccode\u003esongs\u003c/code\u003e table explicitly. This would not be flexible. If we defined a method that explicitly referenced the \u003ccode\u003esongs\u003c/code\u003e table, we would not be able to extract that method into a \u003cem\u003eshareable\u003c/em\u003e method later on. Remember, the goal of our dynamic ORM is to define a series of methods that can be shared by \u003cem\u003eany class\u003c/em\u003e. So, we need to avoid explicitly referencing table and column names.\u003c/p\u003e\n\n\u003cp\u003eNow that we understand what we need to do, let's write a method that returns the name of a table, given the name of a class:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#table_name\u003c/code\u003e Method\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.table_name\u003cbr\u003e    self.to_s.downcase.pluralize\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method, which you'll see in the \u003ccode\u003eSong\u003c/code\u003e class in \u003ccode\u003elib/song.rb\u003c/code\u003e, takes the name of the class, referenced by the \u003ccode\u003eself\u003c/code\u003e keyword, turns it into a string with \u003ccode\u003e#to_s\u003c/code\u003e, downcases (or \"un-capitalizes\") that string and then \"pluralizes\" it, or makes it plural.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The \u003ccode\u003e#pluralize\u003c/code\u003e method is provided to us by the \u003ccode\u003eactive_support/inflector\u003c/code\u003e code library, required at the top of \u003ccode\u003elib/song.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow that we have a method that grabs us the table name we want to query for column names, let's build a method that actually grabs us those column names.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#column_names\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eQuerying a table for column names:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eHow do you query a table for the names of its columns? For this we need to use the following SQL query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePRAGMA table_info()\n\n\u003cp\u003eThis line of code that utilizes \u003ca href=\"#resources\"\u003ePRAGMA\u003c/a\u003e will return to us (thanks to our handy \u003ccode\u003e#results_as_hash\u003c/code\u003e method) an array of hashes describing the table itself. Each hash will contain information about one column. The array of hashes will look something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e [{\"cid\"=\u0026gt;0,\u003cbr\u003e  \"name\"=\u0026gt;\"id\",\u003cbr\u003e  \"type\"=\u0026gt;\"INTEGER\",\u003cbr\u003e  \"notnull\"=\u0026gt;0,\u003cbr\u003e  \"dflt_value\"=\u0026gt;nil,\u003cbr\u003e  \"pk\"=\u0026gt;1,\u003cbr\u003e  0=\u0026gt;0,\u003cbr\u003e  1=\u0026gt;\"id\",\u003cbr\u003e  2=\u0026gt;\"INTEGER\",\u003cbr\u003e  3=\u0026gt;0,\u003cbr\u003e  4=\u0026gt;nil,\u003cbr\u003e  5=\u0026gt;1},\u003cbr\u003e {\"cid\"=\u0026gt;1,\u003cbr\u003e  \"name\"=\u0026gt;\"name\",\u003cbr\u003e  \"type\"=\u0026gt;\"TEXT\",\u003cbr\u003e  \"notnull\"=\u0026gt;0,\u003cbr\u003e  \"dflt_value\"=\u0026gt;nil,\u003cbr\u003e  \"pk\"=\u0026gt;0,\u003cbr\u003e  0=\u0026gt;1,\u003cbr\u003e  1=\u0026gt;\"name\",\u003cbr\u003e  2=\u0026gt;\"TEXT\",\u003cbr\u003e  3=\u0026gt;0,\u003cbr\u003e  4=\u0026gt;nil,\u003cbr\u003e  5=\u0026gt;0},\u003cbr\u003e {\"cid\"=\u0026gt;2,\u003cbr\u003e  \"name\"=\u0026gt;\"album\",\u003cbr\u003e  \"type\"=\u0026gt;\"TEXT\",\u003cbr\u003e  \"notnull\"=\u0026gt;0,\u003cbr\u003e  \"dflt_value\"=\u0026gt;nil,\u003cbr\u003e  \"pk\"=\u0026gt;0,\u003cbr\u003e  0=\u0026gt;2,\u003cbr\u003e  1=\u0026gt;\"album\",\u003cbr\u003e  2=\u0026gt;\"TEXT\",\u003cbr\u003e  3=\u0026gt;0,\u003cbr\u003e  4=\u0026gt;nil,\u003cbr\u003e  5=\u0026gt;0}]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat's a lot of information! The only thing we need to grab out of this hash is the name of each column. Each hash has a \u003ccode\u003e\"name\"\u003c/code\u003e key that points to a value of the column name.\u003c/p\u003e\u003cp\u003eNow that we know how to get information about each column from our table, let's write our \u003ccode\u003e#column_names\u003c/code\u003e method:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBuilding our method:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef self.column_names\u003cbr\u003e  DB[:conn].results_as_hash = true\u003cbr\u003e\u003cbr\u003e  sql = \"PRAGMA table_info('#{table_name}')\"\u003cbr\u003e\u003cbr\u003e  table_info = DB[:conn].execute(sql)\u003cbr\u003e  column_names = []\u003cbr\u003e\u003cbr\u003e  table_info.each do |column|\u003cbr\u003e    column_names \u0026lt;\u0026lt; column[\"name\"]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  column_names.compact\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere we write a SQL statement using the \u003ccode\u003epragma\u003c/code\u003e keyword and the \u003ccode\u003e#table_name\u003c/code\u003e method (to access the name of the table we are querying). We iterate over the resulting array of hashes to collect \u003cem\u003ejust the name of each column\u003c/em\u003e. We call \u003ccode\u003e#compact\u003c/code\u003e on that just to be safe and get rid of any \u003ccode\u003enil\u003c/code\u003e values that may end up in our collection.\u003c/p\u003e\u003cp\u003eThe return value of calling \u003ccode\u003eSong.column_names\u003c/code\u003e will therefore be:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\"id\", \"name\", \"album\"]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow that we have a method that returns us an array of column names, we can use this collection to create the \u003ccode\u003eattr_accessors\u003c/code\u003e of our \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\u003ch3\u003eMetaprogramming our \u003ccode\u003eattr_accessor\u003c/code\u003es\u003c/h3\u003e\u003cp\u003eWe can tell our \u003ccode\u003eSong\u003c/code\u003e class that it should have an \u003ccode\u003eattr_accessor\u003c/code\u003e named after each column name with the following code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.table_name\u003cbr\u003e    #table_name code\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.column_names\u003cbr\u003e    #column_names code\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  self.column_names.each do |col_name|\u003cbr\u003e    attr_accessor col_name.to_sym\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, we iterate over the column names stored in the \u003ccode\u003ecolumn_names\u003c/code\u003e class method and set an \u003ccode\u003eattr_accessor\u003c/code\u003e for each one, making sure to convert the column name string into a symbol with the \u003ccode\u003e#to_sym\u003c/code\u003e method, since \u003ccode\u003eattr_accessor\u003c/code\u003es must be named with symbols.\u003c/p\u003e\u003cp\u003eThis is metaprogramming because we are writing code that writes code for us. By setting the \u003ccode\u003eattr_accessor\u003c/code\u003es in this way, a reader and writer method for each column name is dynamically created, without us ever having to explicitly name each of these methods.\u003c/p\u003e\u003ch2\u003eStep 3: Building an abstract \u003ccode\u003e#initialize\u003c/code\u003e Method\u003c/h2\u003e\u003cp\u003eNow that our \u003ccode\u003eattr_accessor\u003c/code\u003es are defined, we can build the \u003ccode\u003e#initialize\u003c/code\u003e method for the \u003ccode\u003eSong\u003c/code\u003e class. Just like everything else about our dynamic ORM, we want our \u003ccode\u003e#initialize\u003c/code\u003e method to be abstract, i.e. not specific to the \u003ccode\u003eSong\u003c/code\u003e class, so that we can later remove it into a parent class that any other class can inherit from. Once again, we'll use metaprogramming to achieve this.\u003c/p\u003e\u003cp\u003eWe want to be able to create a new song like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003esong = Song.new(name: \"Hello\", album: \"25\")\u003cbr\u003e\u003cbr\u003esong.name\u003cbr\u003e# =\u0026gt; \"Hello\"\u003cbr\u003e\u003cbr\u003esong.album\u003cbr\u003e# =\u0026gt; \"25\"\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo, we need to define our \u003ccode\u003e#initialize\u003c/code\u003e method to take in a hash of named, or keyword, arguments. However, we \u003cem\u003edon't\u003c/em\u003e want to explicitly name those arguments. Here's how we can do it:\u003c/p\u003e\u003ch3\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e Method\u003c/h3\u003e\u003cpre\u003e\u003ccode\u003edef initialize(options={})\u003cbr\u003e  options.each do |property, value|\u003cbr\u003e    self.send(\"#{property}=\", value)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, we define our method to take in an argument of \u003ccode\u003eoptions\u003c/code\u003e, which defaults to an empty hash. We expect \u003ccode\u003e#new\u003c/code\u003e to be called with a hash, so when we refer to \u003ccode\u003eoptions\u003c/code\u003e inside the \u003ccode\u003e#initialize\u003c/code\u003e method, we expect to be operating on a hash.\u003c/p\u003e\u003cp\u003eWe iterate over the \u003ccode\u003eoptions\u003c/code\u003e hash and use our fancy metaprogramming \u003ccode\u003e#send\u003c/code\u003e method to interpolate the name of each hash key as a method that we set equal to that key's value. As long as each \u003ccode\u003eproperty\u003c/code\u003e has a corresponding \u003ccode\u003eattr_accessor\u003c/code\u003e, this \u003ccode\u003e#initialize\u003c/code\u003e method will work.\u003c/p\u003e\u003ch2\u003eStep 4: Writing our ORM Methods\u003c/h2\u003e\u003cp\u003eLet's move on to writing some of the conventional ORM methods, like \u003ccode\u003e#save\u003c/code\u003e and \u003ccode\u003e#find_by_name\u003c/code\u003e, in a dynamic fashion. In other words, we will write these methods to be abstract, not specific to the \u003ccode\u003eSong\u003c/code\u003e class, so that we can later extract them and share them among any number of classes.\u003c/p\u003e\u003ch3\u003eSaving Records in a Dynamic Manner\u003c/h3\u003e\u003cp\u003eLet's take a look at the basic SQL statement required to save a given song record:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album)\u003cbr\u003eVALUES 'Hello', '25';\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn order to write a method that can \u003ccode\u003eINSERT\u003c/code\u003e any record to any table, we need to be able to craft the above SQL statement without explicitly referencing the \u003ccode\u003esongs\u003c/code\u003e table or column names and without explicitly referencing the values of a given \u003ccode\u003eSong\u003c/code\u003e instance.\u003c/p\u003e\u003cp\u003eLet's take this one step at a time.\u003c/p\u003e\u003ch4\u003eAbstracting the Table Name\u003c/h4\u003e\u003cp\u003eLuckily for us, we already have a method to give us the table name associated to any given class: \u003ccode\u003e\u0026lt;class name\u0026gt;.table_name\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eRecall, however, that the conventional \u003ccode\u003e#save\u003c/code\u003e is an \u003cem\u003einstance\u003c/em\u003e method. So, inside a \u003ccode\u003e#save\u003c/code\u003e method, \u003ccode\u003eself\u003c/code\u003e will refer to the instance of the class, not the class itself. In order to use a class method inside an instance method, we need to do the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef some_instance_method\u003cbr\u003e  self.class.some_class_method\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo, to access the table name we want to \u003ccode\u003eINSERT\u003c/code\u003e into from inside our \u003ccode\u003e#save\u003c/code\u003e method, we will use the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eself.class.table_name\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can wrap up this code in a handy method, \u003cstrong\u003e\u003ccode\u003e#table_name_for_insert\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef table_name_for_insert\u003cbr\u003e  self.class.table_name\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGreat, now let's grab our column names in an abstract manner.\u003c/p\u003e\u003ch4\u003eAbstracting the Column Names\u003c/h4\u003e\u003cp\u003eWe already have a handy method for grabbing the column names of the table associated with a given class:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eself.class.column_names\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the case of our \u003ccode\u003eSong\u003c/code\u003e class, this will return:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\"id\", \"name\", \"album\"]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere's one problem though. When we \u003ccode\u003eINSERT\u003c/code\u003e a row into a database table for the first time, we \u003cem\u003edon't\u003c/em\u003e \u003ccode\u003eINSERT\u003c/code\u003e the \u003ccode\u003eid\u003c/code\u003e attribute. In fact, our Ruby object has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003enil\u003c/code\u003e before it is inserted into the table. The magic of our SQL database handles the creation of an ID for a given table row and then we will use that ID to assign a value to the original object's \u003ccode\u003eid\u003c/code\u003e attribute.\u003c/p\u003e\u003cp\u003eSo, when we \u003ccode\u003esave\u003c/code\u003e our Ruby object, we should not include the id column name or insert a value for the id column. Therefore, we need to remove \u003ccode\u003e\"id\"\u003c/code\u003e from the array of column names returned from the method call above:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eself.class.column_names.delete_if {|col| col == \"id\"}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will return:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\"name\", \"album\"]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe're almost there with the list of column names needed to craft our \u003ccode\u003eINSERT\u003c/code\u003e statement. Let's take another look at what the statement needs to look like:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album)\u003cbr\u003eVALUES 'Hello', '25';\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNotice that the column names in the statement are comma separated. Our column names returned by the code above are in an array. Let's turn them into a comma separated list, contained in a string:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eself.class.column_names.delete_if {|col| col == \"id\"}.join(\", \")\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will return:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\"name, album\"\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePerfect! Now we have all the code we need to grab a comma separated list of the column names of the table associated with any given class.\u003c/p\u003e\u003cp\u003eWe can wrap up this code in a handy method, \u003cstrong\u003e\u003ccode\u003e#col_names_for_insert\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef col_names_for_insert\u003cbr\u003e  self.class.column_names.delete_if {|col| col == \"id\"}.join(\", \")\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLastly, we need an abstract way to grab the \u003cem\u003evalues\u003c/em\u003e we want to insert.\u003c/p\u003e\u003ch4\u003eAbstracting the Values to Insert\u003c/h4\u003e\u003cp\u003eWhen inserting a row into our table, we grab the values to insert by grabbing the values of that instance's \u003ccode\u003eattr_reader\u003c/code\u003es. How can we grab these values without calling the reader methods by name?\u003c/p\u003e\u003cp\u003eLet's break this down.\u003c/p\u003e\u003cp\u003eWe already know that the names of that \u003ccode\u003eattr_accessor\u003c/code\u003e methods were derived from the column names of the table associated to our class. Those column names are stored in the \u003ccode\u003e#column_names\u003c/code\u003e class method.\u003c/p\u003e\u003cp\u003eIf only there was some way to \u003cem\u003einvoke\u003c/em\u003e those methods, without naming them explicitly, and capture their return values...\u003c/p\u003e\u003cp\u003eIn fact, we already know how to programmatically invoke a method, without knowing the exact name of the method, using the \u003ccode\u003e#send\u003c/code\u003e method.\u003c/p\u003e\u003cp\u003eLet's iterate over the column names stored in \u003ccode\u003e#column_names\u003c/code\u003e and use the \u003ccode\u003e#send\u003c/code\u003e method with each individual column name to invoke the method by that same name and capture the return value:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003evalues = []\u003cbr\u003e\u003cbr\u003eself.class.column_names.each do |col_name|\u003cbr\u003e  values \u0026lt;\u0026lt; \"'#{send(col_name)}'\" unless send(col_name).nil?\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, we push the return value of invoking a method via the \u003ccode\u003e#send\u003c/code\u003e method, unless that value is \u003ccode\u003enil\u003c/code\u003e (as it would be for the \u003ccode\u003eid\u003c/code\u003e method before a record is saved, for instance).\u003c/p\u003e\u003cp\u003eNotice that we are wrapping the return value in a string. That is because we are trying to craft a string of SQL. Also notice that each individual value will be enclosed in single quotes, \u003ccode\u003e' '\u003c/code\u003e, inside that string. That is because the final SQL string will need to look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album)\u003cbr\u003eVALUES 'Hello', '25';\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSQL expects us to pass in each column value in single quotes.\u003c/p\u003e\u003cp\u003eThe above code, however, will result in a \u003ccode\u003evalues\u003c/code\u003e array\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\"'the name of the song'\", \"'the album of the song'\"]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe need comma separated values for our SQL statement. Let's join this array into a string:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003evalues.join(\", \")\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet's wrap up this code in a handy method, \u003cstrong\u003e\u003ccode\u003e#values_for_insert\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef values_for_insert\u003cbr\u003e  values = []\u003cbr\u003e  self.class.column_names.each do |col_name|\u003cbr\u003e    values \u0026lt;\u0026lt; \"'#{send(col_name)}'\" unless send(col_name).nil?\u003cbr\u003e  end\u003cbr\u003e  values.join(\", \")\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow that we have abstract, flexible ways to grab each of the constituent parts of the SQL statement to save a record, let's put them all together into the \u003ccode\u003e#save\u003c/code\u003e method:\u003c/p\u003e\u003ch4\u003eThe \u003ccode\u003e#save\u003c/code\u003e Method:\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  DB[:conn].execute(\"INSERT INTO #{table_name_for_insert} (#{col_names_for_insert}) VALUES (?)\", [values_for_insert])\u003cbr\u003e\u003cbr\u003e  @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM #{table_name_for_insert}\")[0][0]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Using \u003ccode\u003eString\u003c/code\u003e interpolation for a SQL query creates a SQL injection vulnerability, which we've previously stated is a bad idea as it creates a security issue, however, we're using these examples to illustrate how dynamic ORMs work.\u003c/p\u003e\u003ch3\u003eSelecting Records in a Dynamic Manner\u003c/h3\u003e\u003cp\u003eNow that we have a better understanding of how our dynamic, abstract, ORM works, let's build the \u003ccode\u003e#find_by_name\u003c/code\u003e method.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef self.find_by_name(name)\u003cbr\u003e  DB[:conn].execute(\"SELECT * FROM #{self.table_name} WHERE name = ?\", [name])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Using \u003ccode\u003eString\u003c/code\u003e interpolation for a SQL query creates a SQL injection vulnerability, which we've previously stated is a bad idea as it creates a security issue, however, we're using these examples to illustrate how dynamic ORMs work.\u003c/p\u003e\u003cp\u003eThis method is dynamic and abstract because it does not reference the table name explicitly. Instead it uses the \u003ccode\u003e#table_name\u003c/code\u003e class method we built that will return the table name associated with any given class.\u003c/p\u003e\u003ch2\u003eConclusion\u003c/h2\u003e\u003cp\u003eRemember, dynamic ORMs are hard. Spend some time reading over the code in \u003ccode\u003elib/song.rb\u003c/code\u003e and playing with the code in \u003ccode\u003ebin/run\u003c/code\u003e. Practice creating, saving and querying songs in the \u003ccode\u003ebin/run\u003c/code\u003e file and run the program again and again until you get a better feel for it. \u003c/p\u003e\u003cp\u003eNow that we have all of these great dynamic, abstract methods that connect a class to a database table, we'll move on to extracting into a parent class that any other class can inherit from.\u003c/p\u003e\u003ch2\u003eResources\u003c/h2\u003e\u003cp\u003e\u003ca name=\"pragma\"\u003e\u003c/a\u003e\n\u003ca href=\"http://www.tutorialspoint.com/sqlite/sqlite_pragma.htm\"\u003eSQLite- PRAGMA\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.sqlite.org/pragma.html#pragma_table_info\"\u003ePRAGMA\u003c/a\u003e\u003c/p\u003e\u003ctable\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003c/table\u003e\u003c/code\u003e\u003c/pre\u003e","exportId":"gc4211052c675946e234e14eefc98590f"},{"id":203838,"title":"Video: Abstract ORMs","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orm-video-review-building-a-metaprogrammed-abstract-orm\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-building-a-metaprogrammed-abstract-orm/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-building-a-metaprogrammed-abstract-orm\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-building-a-metaprogrammed-abstract-orm/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video reviews the ways to create objects and their attributes from a database using Ruby and SQL. You will learn how to build the necessary methods needed to extract data from a database and instantiate and save instances of a class using said data. Additionally, you will learn how to build methods that update a database. These methods are built out for a specific class. This lesson covers the logic and mechanics of abstracting each method so that, collectively, they can be applied to any class.\u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/hts7TjpPw-8\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eHow You Can Help Us Make These Videos Better\u003c/h2\u003e","exportId":"video-abstract-orms"},{"id":203840,"title":"Video: Scraping and ORMs","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orm-video-review-codealong-building-a-room-scraper-and-orm\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-codealong-building-a-room-scraper-and-orm/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-codealong-building-a-room-scraper-and-orm\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-codealong-building-a-room-scraper-and-orm/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eCodealong, Building a Room Scraper and ORM- Overview\u003c/h2\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/1eIgKGukBlg?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eAny other comments or feedback you have? Raise an issue and let us know. \u003c/p\u003e","exportId":"video-scraping-and-orms"},{"id":203841,"title":"Video: ORMs and SQL Joins Review","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orm-video-review-orms-and-sql-joins\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-orms-and-sql-joins/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-orms-and-sql-joins\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-orms-and-sql-joins/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers basic SQL queries in an object-oriented ecommerce domain. To get the most out of the video, we recommend that you complete the readings and labs that come before it.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eCombine your knowledge of object relationships in object oriented ruby and your knowledge of join tables in SQL in order to write ORM-based methods that will allow you to create related objects from related SQLite3 databases.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand how database domain models relate with object oriented domain models.\u003c/li\u003e\n\u003cli\u003eUnderstand how SQL foreign keys and join tables can be used to represent object relationships.\u003c/li\u003e\n\u003cli\u003eCreate objects with a belongs to relationship from database tables representing a belongs to relationship.\u003c/li\u003e\n\u003cli\u003eCreate objects with a has many relationship from tables representing a has many relationship.\u003c/li\u003e\n\u003cli\u003eUse SQL join queries to create objects with a has many through relationship from join tables.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/mZROu5oSWfI?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/oo-sql-joins-ecommerce-lv\"\u003eSolution code for review\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"video-orms-and-sql-joins-review"},{"id":203842,"title":"Object-Relational Mapping Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow that we've discussed Object-Relational-Mappers in depth, it should feel a\nlittle less intimidating. We've established that they can make it easier to\nwrite code, without using the SQL that you've already learned and practiced\nseveral times. With Object-relational-mapping, we are able to write those and\nmore complicated SQL queries we're familiar with, with less code using Ruby.\u003c/p\u003e\n\n\u003cp\u003eWe've learned the many benefits of ORMs such as: Abstracting database logic,\ncode that can insert data into the database, find and update existing\ndatabase records when changes are made its related Ruby object, identify whether\nor not a Ruby object has already been persisted to the database (and add it if\nnot). We can map a database table to a Ruby object as well as can make Ruby\nobjects from database rows, and can scrape and save data to the database. Now we\ncan leverage the power of SQL without needing to write it often (or be fluent in\nit)! Being able to leverage this functionality is awesome!\u003c/p\u003e","exportId":"object-relational-mapping-conclusion"}]},{"id":21901,"name":"Using Active Record","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g79b744ed5786ebf575953592f0461749","items":[{"id":203843,"title":"Active Record Introduction","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow that we've covered object relationships and ORMs, we will introduce Active\nRecord. Active Record is an ORM - it does the same sort of tasks we learned about\npreviously with ORMs. Using Active Record, just like using\nan ORM, can make fetching and representing data easier. Using Active Record saves\nus the trouble of writing our own custom ORMs.\u003c/p\u003e\n\n\u003cp\u003eActive Record gives us a few features. In this section we will discuss:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe Active Record conventions and why programmers use them\u003c/li\u003e\n\u003cli\u003eActive Record query methods\u003c/li\u003e\n\u003cli\u003eUsing Active Record to create a table\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next several lessons, we'll learn how to build tables with Active Record,\nwhere properties and relationships of the objects in an application are stored\nand retrieved from a database without writing SQL statements. \u003c/p\u003e","exportId":"active-record-introduction"},{"id":203844,"title":"Active Record Mechanics","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-mechanics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-mechanics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-mechanics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-mechanics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Understand the connection between an ORM and Active Record\u003c/li\u003e\n\u003cli\u003e Understand why Active Record is useful\u003c/li\u003e\n\u003cli\u003e Develop a basic understanding of how to get started with Active Record\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eORM vs Active Record\u003c/h2\u003e\n\n\u003cp\u003eBy now you are familiar with the concept of an \u003ca href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\"\u003eORM\u003c/a\u003e, an Object-Relation\nMapper, and should have written something of your own in the \u003ccode\u003eStudent\u003c/code\u003e and\n\u003ccode\u003eInteractiveRecord\u003c/code\u003e classes. Our latest iteration was our most powerful yet,\nit could give us lots of functionality via inheritance.\u003c/p\u003e\n\n\u003cp\u003eWhile building your own ORM for a single \u003ccode\u003eClass\u003c/code\u003e is a great way to learn about\nhow object-oriented programming languages commonly interact with a database,\nimagine you had \u003cem\u003emany\u003c/em\u003e more classes. To test and maintain custom code for each\nproject we work on would distract our attention from making cool stuff to\nbuilding database connectivity. To save themselves and other developers this\nheadache, the \u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html\"\u003eActiveRecord\u003c/a\u003e Ruby gem team built the \u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html\"\u003eActiveRecord\u003c/a\u003e\ngem.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson we'll read about how to to have \u003ccode\u003eActiveRecord\u003c/code\u003e link our Ruby\nmodels with rows in a database table. We won't write the code yet, but we'll\nfamiliarize ourself with common code blocs used in \u003ccode\u003eActiveRecord\u003c/code\u003e-using\nprojects.\u003c/p\u003e\n\n\u003ch2\u003eActive Record ORM\u003c/h2\u003e\n\n\u003cp\u003eActive Record is a Ruby gem, meaning we get an entire library of code just by\nrunning \u003ccode\u003egem install activerecord\u003c/code\u003e or by including it in our \u003ccode\u003eGemfile\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eConnect to DB\u003c/h4\u003e\n\n\u003cp\u003eOnce our Gem environment knows to put \u003ccode\u003eActiveRecord\u003c/code\u003e into the picture, we need\nto tell \u003ccode\u003eActiveRecord\u003c/code\u003e where the database is located that it will be working\nwith.\u003c/p\u003e\n\n\u003cp\u003eWe do this by running \u003ccode\u003eActiveRecord::Base.establish_connection\u003c/code\u003e. Once\n\u003ccode\u003eestablish_connection\u003c/code\u003e is run, \u003ccode\u003eActiveRecord::Base\u003c/code\u003e keeps it stored as a class\nvariable at \u003ccode\u003eActiveRecord::Base.connection\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: If you'd like to type along in an IDE environment, you can experiment by using\nIRB with: \u003ccode\u003eirb -r active_record\u003c/code\u003e provided you've installed \u003ccode\u003eActiveRecord\u003c/code\u003e and \u003ccode\u003esqlite3\u003c/code\u003e with\n\u003ccode\u003egem install activerecord sqlite3\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003eActiveRecord::Base.establish_connection(\u003cbr\u003e  :adapter =\u0026gt; \"sqlite3\",\u003cbr\u003e  :database =\u0026gt; \"db/students.sqlite\"\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eCreate a table\u003c/h4\u003e\n\n\u003cp\u003eBut our database is empty. Let's create a table to hold students.\u003c/p\u003e\n\n\u003cp\u003eLet's create our table using SQL:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \u0026lt;  CREATE TABLE IF NOT EXISTS students (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT\u003cbr\u003e  )\u003cbr\u003eSQL\u003cbr\u003e\u003cbr\u003e# Remember, the previous step has to run first so that `connection` is set!\u003cbr\u003eActiveRecord::Base.connection.execute(sql)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eLink a Student \"model\" to the database table \u003ccode\u003estudents\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eThe last step is to tell your Ruby class to make use of \u003ccode\u003eActiveRecord\u003c/code\u003e's\nbuilt-in ORM methods. With Active Record and other ORMs, this is managed\nthrough \u003ca href=\"http://rubylearning.com/satishtalim/ruby_inheritance.html\"\u003eClass Inheritance\u003c/a\u003e. We simply make \u003cem\u003eour\u003c/em\u003e class (\u003ccode\u003eStudent\u003c/code\u003e) a\nsubclass of \u003ccode\u003eActiveRecord::Base\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Student \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur \u003ccode\u003eStudent\u003c/code\u003e class is now our gateway for talking to the \u003ccode\u003estudents\u003c/code\u003e table in\nthe database. The \u003ccode\u003eStudent\u003c/code\u003e class has gained a whole bunch of \u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html#creating-active-record-models\"\u003enew\nmethods\u003c/a\u003e via its inheritance relationship to \u003ccode\u003eActiveRecord\u003c/code\u003e. Let's\nlook at a few of them\u003c/p\u003e\n\n\u003ch6\u003e\u003ccode\u003e.column_names\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eRetrieve a list of all the columns in the table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStudent.column_names\u003cbr\u003e#=\u0026gt; [:id, :name]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003e.create\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eCreate a new \u003ccode\u003eStudent\u003c/code\u003e entry in the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStudent.create(name: 'Jon')\u003cbr\u003e# INSERT INTO students (name) VALUES ('Jon')\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003e.find\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eRetrieve a \u003ccode\u003eStudent\u003c/code\u003e from the database by \u003ccode\u003eid\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStudent.find(1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003e.find_by\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eFind by any attribute, such as \u003ccode\u003ename\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStudent.find_by(name: 'Jon')\u003cbr\u003e# SELECT * FROM students WHERE (name = 'Jon') LIMIT 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003eattr_accessors\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eYou can get or set attributes of an instance of \u003ccode\u003eStudent\u003c/code\u003e once you've retrieved\nit:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudent = Student.find_by(name: 'Jon')\u003cbr\u003estudent.name\u003cbr\u003e#=\u0026gt; 'Jon'\u003cbr\u003e\u003cbr\u003estudent.name = 'Steve'\u003cbr\u003e\u003cbr\u003estudent.name\u003cbr\u003e#=\u0026gt; 'Steve'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003e#save\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eAnd then save those changes to the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudent = Student.find_by(name: 'Jon')\u003cbr\u003estudent.name = 'Steve'\u003cbr\u003estudent.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that our \u003ccode\u003eStudent\u003c/code\u003e class doesn't have any methods defined for \u003ccode\u003e#name\u003c/code\u003e\neither. Nor does it make use of Ruby's built-in \u003ccode\u003eattr_accessor\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Student \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eYou've now seen how \u003ccode\u003eActiveRecord\u003c/code\u003e creates a link between Ruby and databases.\u003c/p\u003e","exportId":"active-record-mechanics"},{"id":203846,"title":"Intro to Rake","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-intro-to-rake\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-intro-to-rake/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-intro-to-rake\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-intro-to-rake/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Introduce Rake and Rake tasks.\u003c/li\u003e\n\u003cli\u003e Understand what Rake is used for in our Ruby programs.\u003c/li\u003e\n\u003cli\u003e Learn how to build a basic Rake task.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is Rake?\u003c/h2\u003e\n\n\u003cp\u003eRake is a tool that is available to us in Ruby that allows us to automate\ncertain jobs––anything from execute SQL to \u003ccode\u003eputs\u003c/code\u003e-ing out a friendly message to\nthe terminal.\u003c/p\u003e\n\n\u003cp\u003eRake allows us to define something called \"Rake tasks\" that execute these jobs.\nOnce we define a task, that task can be executed from the command line.\u003c/p\u003e\n\n\u003ch2\u003eWhy Rake?\u003c/h2\u003e\n\n\u003cp\u003eEvery program has some jobs that must be executed now and then. For example, the\ntask of creating a database table, the task of making or maintaining certain\nfiles. Before Rake was invented, we would have to write scripts that accomplish\nthese tasks in BASH, or we would have to make potentially confusing and\narbitrary decisions about what segment of our Ruby program would be responsible\nfor executing these tasks.\u003c/p\u003e\n\n\u003cp\u003eWriting scripts in BASH is tough, and BASH just isn't as powerful as Ruby. On\nthe other hand, for each developer to make his or her own decisions about where\nto define and execute certain common tasks related to databases or file\nmaintenance is confusing.\u003c/p\u003e\n\n\u003cp\u003eRake provides us a standard, conventional way to define and execute such tasks\nusing Ruby.\u003c/p\u003e\n\n\u003ch2\u003eWhere did Rake Come From?\u003c/h2\u003e\n\n\u003cp\u003eIn fact, the C community was the first to implement the pattern of writing all\ntheir recurring system maintenance tasks in a separate file. They called this\nfile the MakeFile because it was generally used to gather all of the source\nfiles and make it into one compiled executable file.\u003c/p\u003e\n\n\u003cp\u003eRake was later developed by \u003ca href=\"https://en.wikipedia.org/wiki/Jim_Weirich\"\u003eJim Weirich\u003c/a\u003e as the task management tool for Ruby.\u003c/p\u003e\n\n\u003ch2\u003eHow to Define and Use Rake Tasks\u003c/h2\u003e\n\n\u003cp\u003eBuilding a Rake task is easy, since Rake is already available to us as a part of\nRuby. All we need to do is create a file in the top level of our directory\ncalled \u003ccode\u003eRakefile\u003c/code\u003e. Here we define our task:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etask :hello do\u003cbr\u003e  # the code we want to be executed by this task\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe define tasks with \u003ccode\u003etask\u003c/code\u003e + \u003ccode\u003ename of task as a symbol\u003c/code\u003e + a block that contains\nthe code we want to execute.\u003c/p\u003e\n\n\u003cp\u003eIf you open up the \u003ccode\u003eRakefile\u003c/code\u003e in this directory, you'll see our \u003ccode\u003e:hello\u003c/code\u003e task:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etask :hello do\u003cbr\u003e  puts \"hello from Rake!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, in your terminal in the directory of this project, type:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003erake hello\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eYou should see the following outputted to your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello from Rake!\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eDescribing our Tasks for \u003ccode\u003erake -T\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eRake comes with a handy command, \u003ccode\u003erake -T\u003c/code\u003e, that we can run in the terminal to\nview a list of available Rake tasks and their descriptions. In order for \u003ccode\u003erake -T\u003c/code\u003e to work though, we need to give our Rake tasks descriptions. Let's give our\n\u003ccode\u003ehello\u003c/code\u003e task a description now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edesc 'outputs hello to the terminal'\u003cbr\u003etask :hello do\u003cbr\u003e  puts \"hello from Rake!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if we run \u003ccode\u003erake -T\u003c/code\u003e in the terminal, we should see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake hello       # outputs hello to the terminal\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo handy!\u003c/p\u003e\n\n\u003ch3\u003eNamespacing Rake Tasks\u003c/h3\u003e\n\n\u003cp\u003eIt is possible to namespace your Rake tasks. What does \"namespace\" mean? A\nnamespace is really just a way to group or contain something, in this case our\nRake tasks. So, we might namespace a series of greeting Rake tasks, like\n\u003ccode\u003ehello\u003c/code\u003e above, under the \u003ccode\u003egreeting\u003c/code\u003e heading.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at namespacing now. Let's say we create another greeting-type\nRake task, \u003ccode\u003ehola\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edesc 'outputs hola to the terminal'\u003cbr\u003etask :hola do\u003cbr\u003e  puts \"hola de Rake!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, let's namespace both \u003ccode\u003ehello\u003c/code\u003e and \u003ccode\u003ehola\u003c/code\u003e under the \u003ccode\u003egreeting\u003c/code\u003e heading:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enamespace :greeting do\u003cbr\u003edesc 'outputs hello to the terminal'\u003cbr\u003e  task :hello do\u003cbr\u003e    puts \"hello from Rake!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  desc 'outputs hola to the terminal'\u003cbr\u003e  task :hola do\u003cbr\u003e    puts \"hola de Rake!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, to use either of our Rake tasks, we use the following syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake greeting:hello\u003cbr\u003ehello from Rake!\u003cbr\u003e\u003cbr\u003erake greeting:hola\u003cbr\u003ehola de Rake!\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCommon Rake Tasks\u003c/h2\u003e\n\n\u003cp\u003eAs we move towards developing Sinatra and Rails web applications, you'll begin\nto use some common Rake tasks that handle certain database-related jobs.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003erake db:migrate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eOne common pattern you'll soon become familiar with is the pattern of writing\ncode that creates database tables and then \"migrating\" that code using a rake\ntask.\u003c/p\u003e\n\n\u003cp\u003eOur \u003ccode\u003eStudent\u003c/code\u003e class currently has a \u003ccode\u003e#create_table\u003c/code\u003e method, so let's use that\nmethod to build out our own \u003ccode\u003emigrate\u003c/code\u003e Rake task.\u003c/p\u003e\n\n\u003cp\u003eWe'll namespace this task under the \u003ccode\u003edb\u003c/code\u003e heading. This namespace will contain a\nfew common database-related tasks.\u003c/p\u003e\n\n\u003cp\u003eWe'll call this task \u003ccode\u003emigrate\u003c/code\u003e, because it is a convention to say we are\n\"migrating\" our database by applying SQL statements that alter that database.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enamespace :db do\u003cbr\u003e  desc 'migrate changes to your database'\u003cbr\u003e  task :migrate =\u0026gt; :environment do\u003cbr\u003e    Student.create_table\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut, if we run \u003ccode\u003erake db:migrate\u003c/code\u003e now, we're going to hit an error.\u003c/p\u003e\n\n\u003ch4\u003eTask Dependency\u003c/h4\u003e\n\n\u003cp\u003eYou might be wondering what is happening with this snippet:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etask :migrate =\u0026gt; :environment do\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis creates a \u003cem\u003etask dependency\u003c/em\u003e. Since our \u003ccode\u003eStudent.create_table\u003c/code\u003e code would\nrequire access to the \u003ccode\u003econfig/environment.rb\u003c/code\u003e file (which is where the student\nclass and database are loaded), we need to give our task access to this file. In\norder to do that, we need to define yet another Rake task that we can tell to\nrun before the \u003ccode\u003emigrate\u003c/code\u003e task is run.\u003c/p\u003e\n\n\u003cp\u003eLet's check out that \u003ccode\u003eenvironment\u003c/code\u003e task:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# in Rakefile\u003cbr\u003e\u003cbr\u003etask :environment do\u003cbr\u003e  require_relative './config/environment'\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter adding our environment task, running \u003ccode\u003erake db:migrate\u003c/code\u003e should create our\nstudents table.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003erake db:seed\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAnother task you will become familiar with is the \u003ccode\u003eseed\u003c/code\u003e task. This task is\nresponsible for \"seeding\" our database with some dummy data.\u003c/p\u003e\n\n\u003cp\u003eThe conventional way to seed your database is to have a file in the \u003ccode\u003edb\u003c/code\u003e\ndirectory, \u003ccode\u003edb/seeds.rb\u003c/code\u003e, that contains some code to create instances of your\nclass.\u003c/p\u003e\n\n\u003cp\u003eIf you open up \u003ccode\u003edb/seeds.rb\u003c/code\u003e you'll see the following code to create a few\nstudents:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative \"../lib/student.rb\"\u003cbr\u003e\u003cbr\u003eStudent.create(name: \"Melissa\", grade: \"10th\")\u003cbr\u003eStudent.create(name: \"April\", grade: \"10th\")\u003cbr\u003eStudent.create(name: \"Luke\", grade: \"9th\")\u003cbr\u003eStudent.create(name: \"Devon\", grade: \"11th\")\u003cbr\u003eStudent.create(name: \"Sarah\", grade: \"10th\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we define a rake task that executes the code in this file. This task will\nalso be namespaced under \u003ccode\u003edb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enamespace :db do\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  desc 'seed the database with some dummy data'\u003cbr\u003e  task :seed do\u003cbr\u003e    require_relative './db/seeds.rb'\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if we run \u003ccode\u003erake db:seed\u003c/code\u003e in our terminal (provided we have already run\n\u003ccode\u003erake db:migrate\u003c/code\u003e to create the database table), we will insert five records\ninto the database.\u003c/p\u003e\n\n\u003cp\u003eIf only there was some way to interact with our class and database without\nhaving to run our entire program...\u003c/p\u003e\n\n\u003cp\u003eWell, we can build a Rake task that will load up a Pry console for us.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003erake console\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWe'll define a task that starts up the Pry console. We'll make this task\ndependent on our \u003ccode\u003eenvironment\u003c/code\u003e task so that the \u003ccode\u003eStudent\u003c/code\u003e class and the database\nconnection load first.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edesc 'drop into the Pry console'\u003cbr\u003etask :console =\u0026gt; :environment do\u003cbr\u003e  Pry.start\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, provided we ran \u003ccode\u003erake db:migrate\u003c/code\u003e and \u003ccode\u003erake db:seed\u003c/code\u003e, we can drop into our\nconsole with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake console\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should bring up the following in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1] pry(main)\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's check to see that we did in fact successfully migrate and seed our\ndatabase:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1] pry(main)\u0026gt; Student.all\u003cbr\u003e=\u0026gt; [[1, \"Melissa\", \"10th\"],\u003cbr\u003e [2, \"April\", \"10th\"],\u003cbr\u003e [3, \"Luke\", \"9th\"],\u003cbr\u003e [4, \"Devon\", \"11th\"],\u003cbr\u003e [5, \"Sarah\", \"10th\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it!\u003c/p\u003e","exportId":"g3aa1055fd722124aefe0af050315f18c"},{"id":203847,"title":"Active Record Migrations","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-migrations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-migrations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-migrations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-migrations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate, connect to, and manipulate a SQLite database using ActiveRecord.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eSetup\u003c/h2\u003e\n\n\u003cp\u003eWe're going to use the \u003ccode\u003eactiverecord\u003c/code\u003e gem to create a mapping between our\ndatabase and model. Clone down this lesson and code-along to get to the\nsolution.\u003c/p\u003e\n\n\u003ch2\u003eMigrations\u003c/h2\u003e\n\n\u003cp\u003eFrom \u003ca href=\"http://guides.rubyonrails.org/v3.2.8/migrations.html\"\u003ethe \u003cem\u003eRailsGuides\u003c/em\u003e section on Migrations\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eMigrations are a convenient way for you to alter your database in a structured\nand organized manner. You could edit fragments of SQL by hand but you would\nthen be responsible for telling other developers that they need to go and run\nthem. You’d also have to keep track of which changes need to be run against\nthe production machines next time you deploy.\u003c/p\u003e\n\n\u003cp\u003eMigrations also allow you to describe these transformations using Ruby. The\ngreat thing about this is that (like most of Active Record’s functionality)\nit is database-independent: you don’t need to worry about the precise syntax\nof \u003ccode\u003eCREATE TABLE\u003c/code\u003e any more than you worry about variations on \u003ccode\u003eSELECT *\u003c/code\u003e (you\ncan drop down to raw SQL for database-specific features). For example, you\ncould use SQLite3 in development, but MySQL in production.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnother way to think of migrations is like version control for your database.\nYou might create a table, add some data to it, and then make some changes to it\nlater on. By adding a new migration for each change you make to the database,\nyou won't lose any data you don't want to, and you can easily revert changes.\u003c/p\u003e\n\n\u003cp\u003eExecuted migrations are tracked by ActiveRecord in your database so that they\naren't used twice. Using the migrations system to apply the schema changes is\neasier than keeping track of the changes manually and executing them manually\nat the appropriate time.\u003c/p\u003e\n\n\u003ch3\u003eSetting Up Your Migration\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a directory called \u003ccode\u003edb\u003c/code\u003e at the top level of the lesson's directory.\nThen, within the \u003ccode\u003edb\u003c/code\u003e directory, create a \u003ccode\u003emigrate\u003c/code\u003e directory. The\n\u003ccode\u003emkdir\u003c/code\u003e command is the appropriate tool to use here.\u003c/li\u003e\n\u003cli\u003eIn the \u003ccode\u003edb/migrate\u003c/code\u003e directory, create a file called \u003ccode\u003e01_create_artists.rb\u003c/code\u003e\n(we'll talk about why we added the \u003ccode\u003e01\u003c/code\u003e later).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003emechanics-of-migrations-v-000/\u003cbr\u003e  config/\u003cbr\u003e    environment.rb\u003cbr\u003e  db/\u003cbr\u003e    migrate/\u003cbr\u003e      01_create_artists.rb\u003cbr\u003e  spec/\u003cbr\u003e    artist_spec.rb\u003cbr\u003e    spec_helper.rb\u003cbr\u003e  .gitignore\u003cbr\u003e  .learn\u003cbr\u003e  .rspec\u003cbr\u003e  artist.rb\u003cbr\u003e  CONTRIBUTING.md\u003cbr\u003e  Gemfile\u003cbr\u003e  Gemfile.lock\u003cbr\u003e  LICENSE.md\u003cbr\u003e  Rakefile\u003cbr\u003e  README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the file created, we'll need to add in the migration code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/01_create_artists.rb\u003cbr\u003e\u003cbr\u003eclass CreateArtists \u0026lt; ActiveRecord::Migration[5.2]\u003cbr\u003e  def up\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def down\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eActive Record 5.x Migration Syntax Update\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eIMPORTANT\u003c/strong\u003e: Active Record is primarily used in Rails applications and as of\nActive Record 5.x, we must specify which version of Rails the migration\nwas written for, even in situations like this lab where we do not have Rails\nconfigured.\u003c/p\u003e\n\n\u003cp\u003eThis lesson was originally created with gem versions that support Rails \u003cstrong\u003e4.2\u003c/strong\u003e,\nso we need to make have our \u003ccode\u003eCreateArtist\u003c/code\u003e migration inherit from\n\u003ccode\u003eActiveRecord::Migration[4.2]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDon't worry too much about this until you get to the Rails section. Until then,\nif you encounter an error like this...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCaused by:\u003cbr\u003eStandardError: Directly inheriting from ActiveRecord::Migration is not supported. Please specify the Rails release the migration was written for:\u003cbr\u003e\u003cbr\u003e  class CreateArtists \u0026lt; ActiveRecord::Migration[4.2]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...simply add \u003ccode\u003e[4.2]\u003c/code\u003e or whatever number is displayed to the end of\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e in your migration file, exactly as the error message\ninstructs.\u003c/p\u003e\n\n\u003ch3\u003eActive Record Migration Methods: up, down, change\u003c/h3\u003e\n\n\u003cp\u003eHere we're creating a class called \u003ccode\u003eCreateArtists\u003c/code\u003e that inherits from\nActiveRecord's \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e module. Within the class, we have an\n\u003ccode\u003eup\u003c/code\u003e method to define the code to execute when the migration is run and a\n\u003ccode\u003edown\u003c/code\u003e method to define the code to execute when the migration is rolled back.\nThink of it like \"do\" and \"undo.\"\u003c/p\u003e\n\n\u003cp\u003eAnother method is available to use besides \u003ccode\u003eup\u003c/code\u003e and \u003ccode\u003edown\u003c/code\u003e: \u003ccode\u003echange\u003c/code\u003e, which is\nmore common for basic migrations.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/01_create_artists.rb\u003cbr\u003e\u003cbr\u003eclass CreateArtists \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFrom \u003ca href=\"http://edgeguides.rubyonrails.org/active_record_migrations.html#using-the-change-method\"\u003ethe Active Record Migrations RailsGuide\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe change method is the primary way of writing migrations. It works for the\nmajority of cases, where Active Record knows how to reverse the migration\nautomatically\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's take a look at how to finish off our \u003ccode\u003eCreateArtists\u003c/code\u003e migration, which\nwill generate our \u003ccode\u003eartists\u003c/code\u003e table with the appropriate columns.\u003c/p\u003e\n\n\u003ch3\u003eCreating a Table\u003c/h3\u003e\n\n\u003cp\u003eRemember how we created a table using SQL with ActiveRecord?\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Recall, we can do this with IRB: \u003ccode\u003eirb -r active_record\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFirst, we connect to a database, then write the necessary SQL to create the\ntable. So, first, we'd have to connect to a database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eActiveRecord::Base.establish_connection(\u003cbr\u003e  :adapter =\u0026gt; \"sqlite3\",\u003cbr\u003e  :database =\u0026gt; \"db/artists.sqlite\"\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen write some SQL to create the table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \u0026lt;  CREATE TABLE IF NOT EXISTS artists (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  genre TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  hometown TEXT\u003cbr\u003e  )\u003cbr\u003eSQL\u003cbr\u003e\u003cbr\u003eActiveRecord::Base.connection.execute(sql)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing migrations, we will still need establish Active Record's connection to the\ndatabase, but \u003cstrong\u003e\u003cem\u003ewe no longer need the SQL!\u003c/em\u003e\u003c/strong\u003e Instead of dealing with SQL\ndirectly, we provide the migrations we want and Active Record takes care of creating \u003c/p\u003e\n\n\u003cp\u003eSince we still need to connect to the database, let's make the connection\ninside \u003ccode\u003econfig/environment.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/environment.rb\u003cbr\u003erequire 'rake'\u003cbr\u003erequire 'active_record'\u003cbr\u003erequire 'yaml/store'\u003cbr\u003erequire 'ostruct'\u003cbr\u003erequire 'date'\u003cbr\u003e\u003cbr\u003erequire 'bundler/setup'\u003cbr\u003eBundler.require\u003cbr\u003e\u003cbr\u003e# put the code to connect to the database here\u003cbr\u003eActiveRecord::Base.establish_connection(\u003cbr\u003e  :adapter =\u0026gt; \"sqlite3\",\u003cbr\u003e  :database =\u0026gt; \"db/artists.sqlite\"\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003erequire_relative \"../artist.rb\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder\u003c/strong\u003e: The \u003ccode\u003eenvironment.rb\u003c/code\u003e file commonly contains things we want to\nread and make available to our Ruby application when it starts. It isn't\nnecessary that you totally grasp all the parts of this file, but looking through\nit with this in mind, you might be able to gather what is happening: some gems,\nincluding \u003ccode\u003eactive_record\u003c/code\u003e are required; something happens with \u003ccode\u003eBundler\u003c/code\u003e; our\ndatabase connection is established; the \u003ccode\u003eartist.rb\u003c/code\u003e file is read.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWith the connection to the database configured, we should have access to\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e, and can create tables using only Ruby!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/01_create_artists.rb\u003cbr\u003edef change\u003cbr\u003e  create_table :artists do |t|\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we've added the \u003ccode\u003ecreate_table\u003c/code\u003e method and passed the name of the table we\nwant to create as a symbol. Pretty simple, right? Other methods we can use here\nare things like \u003ccode\u003eremove_table\u003c/code\u003e, \u003ccode\u003erename_table\u003c/code\u003e, \u003ccode\u003eremove_column\u003c/code\u003e, \u003ccode\u003eadd_column\u003c/code\u003e\nand others. See \u003ca href=\"http://guides.rubyonrails.org/migrations.html#writing-a-migration\"\u003ethis list\u003c/a\u003e for more.\u003c/p\u003e\n\n\u003cp\u003eNo point in having a table that has no columns in it, so let us add a few:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/01_create_artists.rb\u003cbr\u003e\u003cbr\u003eclass CreateArtists \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :artists do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.string :genre\u003cbr\u003e      t.integer :age\u003cbr\u003e      t.string :hometown\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooks a little familiar? On the left we've given the data type we'd like to\ncast the column as, and on the right, we've given the name we'd like to give the\ncolumn. The only thing that we're missing is the primary key. Active Record\nwill generate that column for us, and for each row added, a key will be\nauto-incremented.\u003c/p\u003e\n\n\u003cp\u003eAnd that's it! You've created your first Active Record migration. Next, we're\ngoing to see it in action!\u003c/p\u003e\n\n\u003ch3\u003eRunning Migrations\u003c/h3\u003e\n\n\u003cp\u003eThe simplest way is to run our migrations through a Rake task that we're given\nthrough the \u003ccode\u003eactiverecord\u003c/code\u003e gem. How do we access these?\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003erake -T\u003c/code\u003e to see the list of commands we have.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If you get an error when trying to run \u003ccode\u003erake\u003c/code\u003e commands, you may have\na newer version of rake already installed compared to this lesson, causing a\nconflict. To avoid this error, run \u003ccode\u003ebundle exec rake -T\u003c/code\u003e. Adding \u003ccode\u003ebundle exec\u003c/code\u003e\nindicates that you want \u003ccode\u003erake\u003c/code\u003e to run within the context of this lesson's\nbundle (defined in the \u003ccode\u003eGemfile\u003c/code\u003e), not the default version of \u003ccode\u003erake\u003c/code\u003e you have\ninstalled globally on your computer.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's look at the \u003ccode\u003eRakefile\u003c/code\u003e. The commands listed when running \u003ccode\u003erake -T\u003c/code\u003e are\nmade available as Rake tasks through \u003ccode\u003erequire 'sinatra/activerecord/rake'\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow take a look again at \u003ccode\u003eenvironment.rb\u003c/code\u003e, which our \u003ccode\u003eRakefile\u003c/code\u003e also requires:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/environment.rb\u003cbr\u003e\u003cbr\u003erequire 'bundler/setup'\u003cbr\u003eBundler.require\u003cbr\u003e\u003cbr\u003eActiveRecord::Base.establish_connection(\u003cbr\u003e  :adapter =\u0026gt; \"sqlite3\",\u003cbr\u003e  :database =\u0026gt; \"db/artists.sqlite\"\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis file is requiring the gems in our Gemfile and giving our program access to\nthem. We're using the \u003ccode\u003eestablish_connection\u003c/code\u003e method from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e\nto connect to our \u003ccode\u003eartists\u003c/code\u003e database, which will be created in the migration\nvia SQLite3 (the adapter).\u003c/p\u003e\n\n\u003cp\u003eAfter we've added the above code to \u003ccode\u003econfig/environment.rb\u003c/code\u003e, it's time to run\n\u003ccode\u003erake db:migrate\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Here again, if you encounter an error after running \u003ccode\u003erake db:migrate\u003c/code\u003e,\ntry running \u003ccode\u003ebundle exec rake db:migrate\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTake a look at \u003ccode\u003eartist.rb\u003c/code\u003e. Let's create an Artist class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# artist.rb\u003cbr\u003e\u003cbr\u003eclass Artist\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we'll extend the class with \u003ccode\u003eActiveRecord::Base\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# artist.rb\u003cbr\u003e\u003cbr\u003eclass Artist \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo test our newly-created class out, let's use the rake task \u003ccode\u003erake console\u003c/code\u003e (or\n\u003ccode\u003ebundle exec rake console\u003c/code\u003e), which we've created in the \u003ccode\u003eRakefile\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eTry Out The Following:\u003c/h3\u003e\n\n\u003cp\u003eCheck that the class exists:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist\u003cbr\u003e# =\u0026gt; Artist (call 'Artist.connection' to establish a connection)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eView the columns in its corresponding table in the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.column_names\u003cbr\u003e# =\u0026gt; [\"id\", \"name\", \"genre\", \"age\", \"hometown\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstantiate a new Artist named Jon, set his age to 30, and save him to the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ea = Artist.new(name: 'Jon')\u003cbr\u003e# =\u0026gt; #\u003cbr\u003e\u003cbr\u003ea.age = 30\u003cbr\u003e# =\u0026gt; 30\u003cbr\u003e\u003cbr\u003ea.save\u003cbr\u003e# =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e.new\u003c/code\u003e method creates a new instance in memory, but for that instance to\npersist, we need to save it. If we want to create a new instance and save it all\nin one go, we can use \u003ccode\u003e.create\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.create(name: 'Kelly')\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReturn an array of all Artists from the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.all\u003cbr\u003e# =\u0026gt; [#,\u003cbr\u003e #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFind an Artist by name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.find_by(name: 'Jon')\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are several methods you can now use to create, retrieve, update, and\ndelete data from your database, and a whole lot more.\u003c/p\u003e\n\n\u003cp\u003eTake a look at these \u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html#crud-reading-and-writing-data\"\u003eCRUD methods\u003c/a\u003e, and play around with them.\u003c/p\u003e\n\n\u003ch2\u003eUsing Migrations To Manipulate Existing Tables\u003c/h2\u003e\n\n\u003cp\u003eHere is another place where migrations really shine. Let's add a\n\u003ccode\u003efavorite_food\u003c/code\u003e column to our \u003ccode\u003eartists\u003c/code\u003e table. Remember that Active Record\nkeeps track of the migrations we've already run, so adding the new code to our\n\u003ccode\u003e01_create_artists.rb\u003c/code\u003e file won't work. Since we aren't rolling back our\nprevious migration (or dropping the entire table), the \u003ccode\u003e01_create_artists.rb\u003c/code\u003e\nmigration won't be re-executed when we run \u003ccode\u003erake db:migrate\u003c/code\u003e again. Generally,\nthe best practice for database management (especially in a production\nenvironment) is creating new migrations to modify existing tables. That way,\nwe'll have a clear, linear record of all of the changes that have led to our\ncurrent database structure.\u003c/p\u003e\n\n\u003cp\u003eTo make this change we're going to need a new migration, which we'll call\n\u003ccode\u003e02_add_favorite_food_to_artists.rb\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/02_add_favorite_food_to_artists.rb\u003cbr\u003e\u003cbr\u003eclass AddFavoriteFoodToArtists \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    add_column :artists, :favorite_food, :string\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePretty awesome, right? We just told Active Record to add a column to the\n\u003ccode\u003eartists\u003c/code\u003e table called \u003ccode\u003efavorite_food\u003c/code\u003e and that it will contain a string.\u003c/p\u003e\n\n\u003cp\u003eNotice how we incremented the number in the file name there? Imagine for a\nminute that you deleted your original database and wanted to execute the\nmigrations again. Active Record is going to execute each file, but it does so\nin alpha-numerical order. If we didn't have the numbers, our \u003ccode\u003eadd_column\u003c/code\u003e\nmigration would have tried to run first (\u003ccode\u003e[a]dd_favorite...\u003c/code\u003e comes before\n\u003ccode\u003e[c]reate_artists...\u003c/code\u003e), and our \u003ccode\u003eartists\u003c/code\u003e table wouldn't have even been created\nyet! So we used some numbers to make sure the migrations execute in order. In\nreality, our two-digit system is very rudimentary. As you'll see later on,\nframeworks like Rails have generators that create migrations with very accurate\ntimestamps, so you'll never have to worry about hand-numbering.\u003c/p\u003e\n\n\u003cp\u003eNow that you've saved the migration, go back to the terminal to run \n\u003ccode\u003erake db:migrate\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAwesome! Now go back to the console with the \u003ccode\u003erake console\u003c/code\u003e command, and check\nit out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.column_names\u003cbr\u003e# =\u0026gt; [\"id\", \"name\", \"genre\", \"age\", \"hometown\", \"favorite_food\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat!\u003c/p\u003e\n\n\u003cp\u003eNope- wait. Word just came down from the boss- you weren't supposed to ship\nthat change yet! OH NO! No worries, we'll roll back to the first migration.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003erake -T\u003c/code\u003e. Which command should we use?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake db:rollback\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen drop back into the console to double check:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.column_names\u003cbr\u003e# =\u0026gt; [\"id\", \"name\", \"genre\", \"age\", \"hometown\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOh good, your job is saved. Thanks, Active Record! When the boss says it's\nactually time to add that column, you can just run \u003ccode\u003erake db:migrate\u003c/code\u003e again!\u003c/p\u003e\n\n\u003cp\u003eWoohoo!\u003c/p\u003e","exportId":"ge88a907a97f50c12231292bd29954efc"},{"id":203848,"title":"Writing Migrations","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-writing-migrations-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-writing-migrations-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-writing-migrations-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-writing-migrations-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite your own migrations\u003c/li\u003e\n\u003cli\u003eRun a migration to create a table\u003c/li\u003e\n\u003cli\u003eRun a migration to add a column to a table\u003c/li\u003e\n\u003cli\u003eRun a migration to change something in the table\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreating a Table\u003c/h2\u003e\n\n\u003cp\u003eThe first thing we will do is create a table. In\n\u003ccode\u003edb/migrate/01_create_students.rb\u003c/code\u003e, write the code to create a table with\nActive Record. We've created a class for you called \u003ccode\u003eCreateStudents\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDefine a method called \u003ccode\u003echange\u003c/code\u003e and use the Active Record \u003ccode\u003ecreate_table\u003c/code\u003e\nmethod within that method to create the table. The table should have a \u003ccode\u003e:name\u003c/code\u003e\ncolumn with a type \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter you finish defining the \u003ccode\u003echange\u003c/code\u003e method, run the migrations by running\n\u003ccode\u003erake db:migrate\u003c/code\u003e in your terminal.\u003c/p\u003e\n\n\u003ch2\u003eAdding a Column\u003c/h2\u003e\n\n\u003cp\u003eThe next thing we will do is add a couple of columns to the \u003ccode\u003estudents\u003c/code\u003e table we\njust created. To do this, we will create a second migration file. \u003cem\u003eWe cannot add\nthese columns to the existing file.\u003c/em\u003e Let's call our new file\n\u003ccode\u003e02_add_grade_and_birthdate_to_students.rb\u003c/code\u003e. It should live in \u003ccode\u003edb/migrate\u003c/code\u003e just\nlike the first migration.\u003c/p\u003e\n\n\u003cp\u003eThis new migration will look similar to the previous one. We will need a class\nthat inherits from \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e, and we will need to define a\nchange method. Sticking to conventions, name the class\n\u003ccode\u003eAddGradeAndBirthdateToStudents\u003c/code\u003e, since that is what we're doing (and that is\nthe camel case version of the \u003cem\u003efilename\u003c/em\u003e, minus the numbers in front). Inside\n\u003ccode\u003e#change\u003c/code\u003e, instead of \u003ccode\u003ecreate_table\u003c/code\u003e, we will use the \u003ccode\u003eadd_column\u003c/code\u003e Active Record\nmethod.\u003c/p\u003e\n\n\u003cp\u003eLet's add a \u003ccode\u003e:grade\u003c/code\u003e column and a \u003ccode\u003e:birthdate\u003c/code\u003e column. The \u003ccode\u003e:grade\u003c/code\u003e column type\nshould be \u003ccode\u003einteger\u003c/code\u003e and the \u003ccode\u003e:birthdate\u003c/code\u003e column type should be \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eChanging a Column\u003c/h2\u003e\n\n\u003cp\u003eImagine you're creating an incredible web app to send out a birthday greeting on\neach student's birthday. While building this, you realize you accidentally\nstored your birthdate data as a \u003ccode\u003estring\u003c/code\u003e. It would be much easier to work with\nif the column type was \u003ccode\u003edatetime\u003c/code\u003e instead. Let's fix that.\u003c/p\u003e\n\n\u003cp\u003eFinally, we will change a column type, \u003ccode\u003estring\u003c/code\u003e to \u003ccode\u003edatetime\u003c/code\u003e. Same as before,\nyou'll have to \u003cem\u003ecreate another migration file\u003c/em\u003e. This time call it\n\u003ccode\u003e03_change_datatype_for_birthdate.rb\u003c/code\u003e. Once again, name the class the same name\nas the file but with capital letters instead of underscores:\n\u003ccode\u003eChangeDatatypeForBirthdate\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis migration will have the same setup as the last. Be sure to use the\n\u003ccode\u003echange_column\u003c/code\u003e method. It takes three necessary arguments:\n\u003ccode\u003echange_column(table_name, column_name, type)\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eActive Record 5.x Migration Syntax\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As of Active Record 5.x, we can no longer inherit directly from\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e and must instead specify which version of Active\nRecord / Rails the migration was written for. If we were writing a migration for\nActive Record 5.1, we would inherit from \u003ccode\u003eActiveRecord::Migration[5.1]\u003c/code\u003e. Don't\nworry too much about this until you get to the Rails section. Until then, if you\nencounter an error like this...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStandardError: Directly inheriting from ActiveRecord::Migration is not supported. Please specify the Rails release the migration was written for:\u003cbr\u003e\u003cbr\u003e  class CreateDogs \u0026lt; ActiveRecord::Migration[5.2]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...simply add \u003ccode\u003e[5.2]\u003c/code\u003e to the end of \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e, exactly as the\nerror message instructs.\u003c/p\u003e","exportId":"g95f085763d43f9ae09f6895e1d20268c"},{"id":203849,"title":"Costume Store Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-costume-store-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-costume-store-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-costume-store-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-costume-store-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eContents\u003c/h2\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSection\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#objectives\"\u003eObjectives\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#active-record\"\u003eActive Record\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#example\"\u003eExample\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#instructions\"\u003eInstructions\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#resources\"\u003eResources\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cp\u003e:jack\u003cem\u003eo\u003c/em\u003elantern: :ghost: :jack\u003cem\u003eo\u003c/em\u003elantern:\u003c/p\u003e\n\n\u003cp\u003eIn this lab, you'll be creating the following tables: \u003ccode\u003ecostumes\u003c/code\u003e,\n\u003ccode\u003ecostume_stores\u003c/code\u003e, and \u003ccode\u003ehaunted_houses\u003c/code\u003e. You'll be creating the following\nclasses: \u003ccode\u003eCostume\u003c/code\u003e, \u003ccode\u003eCostumeStore\u003c/code\u003e, and \u003ccode\u003eHauntedHouse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecostumes\u003c/code\u003e table will have four columns:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ename\u003c/li\u003e\n\u003cli\u003eprice\u003c/li\u003e\n\u003cli\u003esize\u003c/li\u003e\n\u003cli\u003eimage url\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cem\u003eas well as\u003c/em\u003e the two \"timestamp\" columns:  \u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e. This\nwill provide a grand total of \u003cem\u003esix\u003c/em\u003e columns.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecostume_stores\u003c/code\u003e table will have seven columns:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ename\u003c/li\u003e\n\u003cli\u003elocation\u003c/li\u003e\n\u003cli\u003enumber of costumes, or \"costume inventory\"\u003c/li\u003e\n\u003cli\u003enumber of employees\u003c/li\u003e\n\u003cli\u003ewhether or not it's still in business\u003c/li\u003e\n\u003cli\u003eopening time\u003c/li\u003e\n\u003cli\u003eclosing time\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe \u003ccode\u003ehaunted_houses\u003c/code\u003e table will have eight columns:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ename\u003c/li\u003e\n\u003cli\u003elocation\u003c/li\u003e\n\u003cli\u003etheme\u003c/li\u003e\n\u003cli\u003eprice\u003c/li\u003e\n\u003cli\u003ewhether they're family friendly or not\u003c/li\u003e\n\u003cli\u003eopening date\u003c/li\u003e\n\u003cli\u003eclosing date\u003c/li\u003e\n\u003cli\u003elong description\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBefore coding out the creation of these tables, read about Active Record below:\u003c/p\u003e\n\n\u003ch2\u003eActive Record Review\u003c/h2\u003e\n\n\u003cp\u003eActive Record is magic. Well, not really. But it does build out a bunch of\nmethods for you. For instance, when it's used properly it will give you access\nto methods such as \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003esave\u003c/code\u003e, and \u003ccode\u003efind_by\u003c/code\u003e. Rejoice! Never again will\nyou have to manually build out these methods!\u003c/p\u003e\n\n\u003cp\u003eActive Record allows you to create a database that interacts with your class\nwith only a few lines of code. These lines of code go to creating a model, which\nresides in the \u003ccode\u003eapp/models\u003c/code\u003e folder, and a migration, which resides in the\n\u003ccode\u003edb/migrate\u003c/code\u003e folder.\u003c/p\u003e\n\n\u003cp\u003eThe model inherits from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e while the migration inherits from\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e. Many migrations these days have a \u003ccode\u003echange\u003c/code\u003e method,\nbut you might also see migrations with an \u003ccode\u003eup\u003c/code\u003e and a \u003ccode\u003edown\u003c/code\u003e method instead. To\nuse Active Record, you have to stick to some specific naming conventions: while\nthe migrations are plural, the models are singular.\u003c/p\u003e\n\n\u003ch3\u003eMigrations\u003c/h3\u003e\n\n\u003cp\u003eWhen creating migrations, the class names in the migration files must match\ntheir file names. For instance, a class in the migration file called\n\u003ccode\u003e20141013204115_create_candies.rb\u003c/code\u003e must be named \u003ccode\u003eCreateCandies\u003c/code\u003e while a class\nin a migration file called \u003ccode\u003e20130915204319_add_addresses_to_houses.rb\u003c/code\u003e must be\ncalled AddAddressesToHouses.\u003c/p\u003e\n\n\u003cp\u003eYou might notice that in both the examples above, the numbers at the front of\nthe file name were ignored. These numbers are in the form \u003ccode\u003eYYYYMMDDHHMMSS\u003c/code\u003e.\nLater on, these timestamps will become important as Rails uses them to determine\nwhich migration should be run and in what order. For instance, if you made a\ntable called \u003ccode\u003edog_walkers\u003c/code\u003e and then added a column to it called \u003ccode\u003erating\u003c/code\u003e, that\nwould be fine as the timestamp on the \u003ccode\u003edog_walkers\u003c/code\u003e table creation would\nindicate it needs to be migrated before adding the \u003ccode\u003erating\u003c/code\u003e column to it.\nHowever, if you did this in reverse order, that is adding a column to a table\nthat doesn't exist, then creating the table, you would get an error.\u003c/p\u003e\n\n\u003cp\u003eMigrations, as it was mentioned before, inherit from \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e\nand usually have a method called \u003ccode\u003echange\u003c/code\u003e. In change, you can create a table\nwith the \u003ca href=\"http://guides.rubyonrails.org/migrations.html#creating-a-table\"\u003ecreate_table\u003c/a\u003e method. This method automatically will create a\nprimary key column called \u003ccode\u003eid\u003c/code\u003e, but this default can be overridden if you'd like\nto customize it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As of Active Record 5.x, we can no longer inherit directly from\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e and must instead specify which version of Active\nRecord / Rails the migration was written for. If we were writing a migration for\nActive Record 5.1, we would inherit from \u003ccode\u003eActiveRecord::Migration[5.1]\u003c/code\u003e. Don't\nworry too much about this until you get to the Rails section. Until then, if you\nencounter an error like this...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStandardError: Directly inheriting from ActiveRecord::Migration is not supported. Please specify the Rails release the migration was written for:\u003cbr\u003e\u003cbr\u003e  class CreateDogs \u0026lt; ActiveRecord::Migration[4.2]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...simply add \u003ccode\u003e[4.2]\u003c/code\u003e to the end of \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e, exactly as the\nerror message instructs.\u003c/p\u003e\n\n\u003cp\u003eHere's a simple example of the \u003ccode\u003ecreate_table\u003c/code\u003e method in action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateDogs \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :dogs do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.string :breed\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above code would create a table called \u003ccode\u003edogs\u003c/code\u003e with three columns: \u003ccode\u003ename\u003c/code\u003e,\n\u003ccode\u003ebreed\u003c/code\u003e (both explicitly created), and an implicitly created \u003ccode\u003eid\u003c/code\u003e column.\u003c/p\u003e\n\n\u003cp\u003eTake a look at a few data types that Active Record supports below:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eData Type\u003c/th\u003e\n\u003cth\u003eExamples\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003etrue, false\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003einteger\u003c/td\u003e\n\u003ctd\u003e2, -13, 485\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e\"Halloween\", \"Boo!\", strings between 1-255 characters\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003edatetime\u003c/td\u003e\n\u003ctd\u003eDateTime.now, DateTime.new(2014,10,31)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003efloat\u003c/td\u003e\n\u003ctd\u003e2.234, 32.2124, -6.342\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etext\u003c/td\u003e\n\u003ctd\u003estrings between 1 and 2 ^ 32 - 1 characters\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3\u003eModels\u003c/h3\u003e\n\n\u003cp\u003eLike migrations, models also inherit, but they inherit from\n\u003ccode\u003eActiveRecord::Base\u003c/code\u003e. A simple model would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven though there are no explicit methods for retrieving \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ebreed\u003c/code\u003e,\nthis \u003ccode\u003eDog\u003c/code\u003e model is associated with the created \u003ccode\u003edogs\u003c/code\u003e table above. Because of\nthis integration, we can call \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ebreed\u003c/code\u003e, and \u003ccode\u003eid\u003c/code\u003e on any new instance of\nthe Dog class. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshiloh = Dog.new\u003cbr\u003e=\u0026gt; #\u003cbr\u003eshiloh.name = \"Shiloh\"\u003cbr\u003e=\u0026gt; \"Shiloh\"\u003cbr\u003eshiloh.breed = \"Beagle\"\u003cbr\u003e=\u0026gt; \"Beagle\"\u003cbr\u003eshiloh.save\u003cbr\u003e=\u0026gt; true\u003cbr\u003e\u003cbr\u003eDog.find_by(:name =\u0026gt; \"Shiloh\") == shiloh\u003cbr\u003e=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that you had access to reader and writer methods that cooperated with the\ndatabase that you never had to actually code. You could set the name without\never writing \u003ccode\u003edef name=()\u003c/code\u003e and call the \u003ccode\u003eself.find_by(attribute)\u003c/code\u003e method without\never teaching your Dog class how to look up data in the database. It's pretty\nawesome. Take a look at an example below.\u003c/p\u003e\n\n\u003ch4\u003eExample\u003c/h4\u003e\n\n\u003cp\u003eLet's say you wanted to make a class called \u003ccode\u003eCandy\u003c/code\u003e. Candies should have two\nattributes, a name (string) and the number of calories (integer), you would\nwrite the migration as seen below:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003edb/migrations/20130915204319_create_candies.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateCandies \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :candies do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.integer :calories\u003cbr\u003e      t.timestamps\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You might be wondering what \u003ccode\u003et.timestamps\u003c/code\u003e is doing here. Well, it\ncreates two new columns, \u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e. These are handy columns\nto have around as sometimes you want to query based on the time of creation or\nupdate-tion instead of querying using attributes or ids. To read more about\ntimestamps, go to Active Record's \u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Timestamp.html\"\u003edocs on them\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhile the migration was plural, the model would be singular:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eapp/models/candy.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Candy \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter saving the code above, running \u003ccode\u003erake db:migrate\u003c/code\u003e will apply the desired\nchanges to the database by running the change method. Then you can alter the\ndatabase with simple Ruby statements.\u003c/p\u003e\n\n\u003cp\u003eFor instance, you could create three rows in the table easily:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCandy.create(:name =\u0026gt; \"Milky Way Midnight\", :calories =\u0026gt; 220)\u003cbr\u003eCandy.create(:name =\u0026gt; \"Snickers\", :calories =\u0026gt; 550)\u003cbr\u003eCandy.create(:name =\u0026gt; \"Reese's Peanut Butter Cups\", :calories =\u0026gt; 210)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRetrieving information is just as painless:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereeses = Candy.find_by(:name =\u0026gt; \"Reese's Peanut Butter Cups\")\u003cbr\u003e# =\u0026gt; #\u003cbr\u003eCandy.first\u003cbr\u003e# =\u0026gt; #\u003cbr\u003esnickers = Candy.find(2)\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs is viewing attributes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereeses = Candy.find(3)\u003cbr\u003e# =\u0026gt; #\u003cbr\u003ereeses.calories\u003cbr\u003e# =\u0026gt; 210\u003cbr\u003ereeses.name\u003cbr\u003e# =\u0026gt; \"Reese's Peanut Batter Cups\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUpdating information and viewing table info is also quite simple:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esnickers = Candy.find(2)\u003cbr\u003e# =\u0026gt; #\u003cbr\u003esnickers.update(:calories =\u0026gt; 250)\u003cbr\u003e# =\u0026gt; true\u003cbr\u003e\u003cbr\u003ereeses = Candy.last\u003cbr\u003e# =\u0026gt; #\u003cbr\u003ereeses.update(:name =\u0026gt; \"Reeeese's Peanut Butter Cups\")\u003cbr\u003e# =\u0026gt; true\u003cbr\u003e\u003cbr\u003eCandy.find(2)\u003cbr\u003e# =\u0026gt; #\u003cbr\u003eCandy.last\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIsn't that amazing? Eleven lines of code allows you to create a table and a\nclass that interact with each other elegantly and efficiently. It builds out\nmethods like, \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eupdate\u003c/code\u003e, \u003ccode\u003ecount\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ecalories\u003c/code\u003e, along with others\nsuch as \u003ccode\u003ebuild\u003c/code\u003e and \u003ccode\u003esave\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eFile Structure\u003c/h3\u003e\n\n\u003cp\u003eYou will only be altering code in six files, the three files in the \u003ccode\u003emodels\u003c/code\u003e\nfolder and the three files in the \u003ccode\u003edb/migrations\u003c/code\u003e folder.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── app\u003cbr\u003e│   └── models\u003cbr\u003e│       ├── costume.rb\u003cbr\u003e│       ├── costume_store.rb\u003cbr\u003e│       └── haunted_house.rb\u003cbr\u003e└──db\u003cbr\u003e    └── migrations\u003cbr\u003e        ├── 001_create_costumes.rb\u003cbr\u003e        ├── 002_create_costume_stores.rb\u003cbr\u003e        └── 003_create_haunted_houses.rb\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eGetting Started\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eThis is a test-driven lab so start with the first test and work your way down.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eYour models should be no longer than two lines of code.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe first step is to run \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCreate the Costume class in \u003ccode\u003eapp/models/\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFill out the Active Record migration for costumes such that it passes the\nspecs.\u003c/li\u003e\n\u003cli\u003eCreate the CostumeStore class in \u003ccode\u003eapp/models/\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFill out the Active Record migration for \u003ccode\u003ecostume_stores\u003c/code\u003e such that it passes\nthe specs.\u003c/li\u003e\n\u003cli\u003eCreate the HauntedHouse class in \u003ccode\u003eapp/models/\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFill out the Active Record migration for haunted_houses such that it passes\nthe specs.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eJust like for any other lab, run \u003ccode\u003elearn test\u003c/code\u003e to view your test progress. However,\nunlike some of the other labs in thie section, for this lab, when updating an\nexisting migration, \u003cstrong\u003eyou will need to rollback your previous migrations for\nthat table using the rake command \u003ccode\u003erake db:rollback\u003c/code\u003e\u003c/strong\u003e. Otherwise, the schema\nwill remain unchanged and the changes you make to your migrations will not\nbe seen.\u003c/p\u003e\n\n\u003cp\u003eFor example, say you've run \u003ccode\u003erake db:migrate\u003c/code\u003e and \u003ccode\u003elearn test\u003c/code\u003e once to start, and see\nthat you need to add an attribute to the \u003ccode\u003ecostume_stores\u003c/code\u003e table. Since this\ntable is the second migration of three, you will need to run \u003ccode\u003erake db:rollback\u003c/code\u003e\ntwice to remove the previous migration for this table, then run \n\u003ccode\u003erake db:migrate\u003c/code\u003e again to update the schema. Your code, however, may break if the other migration files are empty.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://guides.rubyonrails.org/migrations.html\"\u003eActive Record Migrations\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003eJust look at the code for the example migrations\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html#creating-active-record-models\"\u003eCreating Active Record Models\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Timestamp.html\"\u003eTimestamps\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gdfb9e812593c0776a0fb6c85f8f91be7"},{"id":203850,"title":"Active Record CRUD Operations Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-crud-operations-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-crud-operations-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-crud-operations-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-crud-operations-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003cp\u003eThe goal of this lab is to get comfortable performing CRUD (Create, Read,\nUpdate, Delete) actions using Active Record.\u003c/p\u003e\n\n\u003cp\u003eThere are different ways to solve this lab so feel free to experiment!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eBefore starting this lab run \u003ccode\u003ebundle\u003c/code\u003e, to get the proper gem dependencies. If\nyour operating system is OSX El Capitan, and you have an issue installing\n\u003ccode\u003eEventMachine\u003c/code\u003e, first check to make sure Open SSL is installed by entering \u003ccode\u003ebrew install openssl\u003c/code\u003e in terminal. Once it's installed, enter \u003ccode\u003ebrew link openssl --force\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlso enter \u003ccode\u003erake -T\u003c/code\u003e, which will list all of the rake tasks you have available\nin this lab. These tasks come with the \u003ccode\u003esinatra-activerecord\u003c/code\u003e gem.\u003c/p\u003e\n\n\u003cp\u003eStart the lab by running \u003ccode\u003elearn test\u003c/code\u003e or keep reading for more instructions.\u003c/p\u003e\n\n\u003ch3\u003eCreate Table\u003c/h3\u003e\n\n\u003cp\u003eTry using the rake task \u003ccode\u003erake db:create_migration NAME=create_movies\u003c/code\u003e to create\nyour migration file. Once you have a migration file add columns like so:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eColumn Name\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(string)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003erelease_date\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(integer)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003edirector\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(string)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003elead\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(string)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ein_theaters\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(boolean)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eAfter your migration is ready run \u003ccode\u003erake db:migrate\u003c/code\u003e to\nmigrate your table and \u003ccode\u003erake db:migrate SINATRA_ENV=test\u003c/code\u003e to migrate a test\ndatabase so you will be able to run \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eTests\u003c/h3\u003e\n\n\u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e to see the tests. To make them pass open\n\u003ccode\u003emovie_controller.rb\u003c/code\u003e and complete each method. It will help to open\n\u003ccode\u003espec/models/movie_spec.rb\u003c/code\u003e to see exactly what each spec is testing for.\u003c/p\u003e\n\n\u003cp\u003eIn each method the \u003ccode\u003e__\u003c/code\u003e corresponds to a line of code you will need to write to\nmake the spec pass.\u003c/p\u003e\n\n\u003cp\u003eEach test will take us through performing a basic CRUD action using the database\nwe just created. These tests will take you through:\u003c/p\u003e\n\n\u003ch4\u003eCreate\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eA movie can be instantiated, given a title, and saved\u003c/li\u003e\n\u003cli\u003eA movie can be instantiated with a hash containing all of its attributes\u003c/li\u003e\n\u003cli\u003eA movie can be created in a block\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eRead\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou can return the first item in the table\u003c/li\u003e\n\u003cli\u003eYou can return the last item in the table\u003c/li\u003e\n\u003cli\u003eYou can return the number of records in the table\u003c/li\u003e\n\u003cli\u003eYou can return a movie from the table based on its attributes\u003c/li\u003e\n\u003cli\u003eYou can use a \u003ccode\u003ewhere\u003c/code\u003e clause to select the appropriate movies and sort them by\nrelease date\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eUpdate\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eCan be found, updated, and saved\u003c/li\u003e\n\u003cli\u003eCan be updated using the \u003ccode\u003eupdate\u003c/code\u003e method\u003c/li\u003e\n\u003cli\u003eCan update all records at once\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eDestroy\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eCan destroy a single item\u003c/li\u003e\n\u003cli\u003eCan destroy all items at once\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html\"\u003eActive Record Query Interface\u003c/a\u003e.\u003c/p\u003e","exportId":"g8d4ab2add4e072af5798b5649eb66adf"},{"id":203851,"title":"Active Record Querying Methods Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-querying-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-querying-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-querying-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-querying-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a table using ActiveRecord.\u003c/li\u003e\n\u003cli\u003eUse Active Record's querying methods.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be working in a TV show domain. We have a TV show model, the\n\u003ccode\u003eShow\u003c/code\u003e class, and a \u003ccode\u003eshows\u003c/code\u003e table that you'll create in your database.\u003c/p\u003e\n\n\u003cp\u003eYou'll be required not only to write a migration that creates a \u003ccode\u003eshows\u003c/code\u003e table\nand gives the \u003ccode\u003eShow\u003c/code\u003e class certain attributes, but also to use Active Record's\nquerying methods.\u003c/p\u003e\n\n\u003ch3\u003eActive Record Querying Methods\u003c/h3\u003e\n\n\u003cp\u003eActive Record makes it easy to ask our database for certain information and\ndatasets by providing a bunch of built-in methods for us. For example, we can\nrequest the sum of all of the values of a particular column with the \u003ccode\u003e#sum\u003c/code\u003e\nmethod:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e.sum(:)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can query our database based on certain conditions using the \u003ccode\u003e#where\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eLet's say we have a \u003ccode\u003eSong\u003c/code\u003e class and table and each song has a \u003ccode\u003enumber_of_stars\u003c/code\u003e\nrating attribute. We could query for songs with more than 3 stars like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.where(\"number_of_stars \u0026gt; ?\", 3)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's look at one more example: Let's say we want to query our database for the\nlowest value in the \u003ccode\u003enumber_of_stars\u003c/code\u003e column, i.e., the lowest rating that any\nsong has:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.minimum(:number_of_stars)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou'll be writing methods that \u003cem\u003erely on Active Record methods like \u003ccode\u003e#minimum\u003c/code\u003e,\n\u003ccode\u003e#sum\u003c/code\u003e, and \u003ccode\u003e#where\u003c/code\u003e\u003c/em\u003e to get these tests passing.\u003c/p\u003e\n\n\u003cp\u003eUse the following resources to help you find the Active Record query methods\nthat will help you pass these tests:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html#calculations\"\u003eCalculations\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html#ordering\"\u003eOrdering\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html#conditions\"\u003eConditions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eMigration\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eRun \u003ccode\u003emkdir db\u003c/code\u003e and then \u003ccode\u003emkdir db/migrate\u003c/code\u003e to create the \u003ccode\u003emigrate\u003c/code\u003e folder\nwithin \u003ccode\u003edb\u003c/code\u003e. Then create a file in the \u003ccode\u003edb/migrate\u003c/code\u003e folder called\n\u003ccode\u003e001_create_shows.rb\u003c/code\u003e. In this file, write the migration code to create a\n\u003ccode\u003eshows\u003c/code\u003e table. The table should have \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003enetwork\u003c/code\u003e, \u003ccode\u003eday\u003c/code\u003e, and \u003ccode\u003erating\u003c/code\u003e\ncolumns. \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003enetwork\u003c/code\u003e, and \u003ccode\u003eday\u003c/code\u003e have a datatype of string, and \u003ccode\u003erating\u003c/code\u003e\nhas a datatype of integer.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate an \u003ccode\u003eapp\u003c/code\u003e folder with a \u003ccode\u003emodels\u003c/code\u003e folder within it, and then create a\nfile, \u003ccode\u003eshow.rb\u003c/code\u003e, in \u003ccode\u003eapp/models\u003c/code\u003e. In this file, you will define a \u003ccode\u003eShow\u003c/code\u003e class\nthat inherits from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNow we need to create a second migration to add another column to our \u003ccode\u003eshows\u003c/code\u003e\ntable. In the \u003ccode\u003edb/migrate\u003c/code\u003e folder, create another file,\n\u003ccode\u003e002_add_season_to_shows.rb\u003c/code\u003e, and write a migration to add a column, \u003ccode\u003eseason\u003c/code\u003e,\nto the \u003ccode\u003eshows\u003c/code\u003e table. The datatype of this column is string.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: This lab is using ActiveRecord 5.2. You will need to specify this\nversion in your migrations by having your classes inherit from\n\u003ccode\u003eActiveRecord::Migration[5.2]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eMethods\u003c/h3\u003e\n\n\u003cp\u003eYou'll be defining the following methods:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ehighest_rating\u003c/code\u003e: this method should return the highest value in the ratings\ncolumn. \u003cem\u003ehint\u003c/em\u003e: if there is a \u003ccode\u003eminimum\u003c/code\u003e Active Record method, might there be a\n\u003ccode\u003emaximum\u003c/code\u003e method?\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003emost_popular_show\u003c/code\u003e: this method should return the show with the highest\nrating. \u003cem\u003ehint\u003c/em\u003e: use the \u003ccode\u003ehighest_rating\u003c/code\u003e method as a helper method.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elowest_rating\u003c/code\u003e: returns the lowest value in the ratings column.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eleast_popular_show\u003c/code\u003e: returns the show with the lowest rating.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eratings_sum\u003c/code\u003e: returns the sum of all of the ratings.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003epopular_shows\u003c/code\u003e: returns an array of all of the shows that have a rating\ngreater than \u003ccode\u003e5\u003c/code\u003e. \u003cem\u003ehint\u003c/em\u003e: use the \u003ccode\u003ewhere\u003c/code\u003e Active Record method.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eshows_by_alphabetical_order\u003c/code\u003e: returns an array of all of the shows sorted in\nalphabetical order according to their names. \u003cem\u003ehint\u003c/em\u003e: use the \u003ccode\u003eorder\u003c/code\u003e Active\nRecord method.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g7fa22da088dd34a8a01e3c444466e428"},{"id":203852,"title":"Active Record Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe have just explored the world of ORMs: \u003cem\u003eObject Relation Mappers\u003c/em\u003e. When\ncreating applications with Ruby on Rails, we use an ORM called \u003cem\u003eActive Record\u003c/em\u003e,\nintegrated into our projects as a Ruby gem. Active Record creates a link between\nRuby and our database, which means it can take care of translating queries we\nwrite using Ruby into commands the database understands. It makes our work\neasier and faster.\u003c/p\u003e\n\n\u003cp\u003eOver the past several lessons, we covered the basic mechanics of Active Record,\nincluding connecting to a database, creating tables and finding/saving data.\nSince it's always important to know what's going on under the surface of the\ntools we use, we also explored how Active Record abstracts the methods we\nemploy. Of course, we then practiced employing those Active Record methods. We\nalso learned that instead of making individual, manual changes to databases, we\ncan use Active Record migrations, which apply database changes as an organizated\nstructure. Migrations serve as a sort of version control system for our\ndatabase, so we covered how they work and how to write our own. Ultimately, we\nsaw how we can create CRUD actions—create, read, update, delete—for our\napplications with Active Record, an essential skill we'll be using as we create\nweb applications. We also encountered Rake, a tool that helps us create and\nautomate tasks in Ruby.\u003c/p\u003e\n\n\u003cp\u003eWe have Ruby knowledge, we have database knowledge and now we know how to use\nthe ORM layer to communicate between the two. We're ready to move on and learn\nhow to use these blocks to build something powerful.\u003c/p\u003e","exportId":"active-record-conclusion"}]},{"id":21902,"name":"Active Record Associations","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g0d8ef54d45e9af337dfff61ccabd92d4","items":[{"id":203853,"title":"Introduction to Active Record Associations","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-associations-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003ePreviously, we worked through object-relational mapping and building Ruby\nclasses that can represent SQL records. Active Record is like an automation and\nsimplification of those concepts.\u003c/p\u003e\n\n\u003cp\u003eActive Record is the interface that gives you the tools to link a database to your\napplication. It lets you structure your data models in a logical and nearly\nplain-English way.\u003c/p\u003e\n\n\u003cp\u003eWe'll cover topics that will include answers to these questions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat are the advantages of using Active Record?\u003c/li\u003e\n\u003cli\u003eWhat are the features of Rake?\u003c/li\u003e\n\u003cli\u003eWhat are common methods accessible through Active Record associations?\u003c/li\u003e\n\u003cli\u003eHow do you use association macros?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHaving a solid understanding of Active Record will make persisting data much\neasier. This will replace the need for a lot of the custom code we wrote in when\ncreating ORMs. We’ll cover working with models, setting them up, and building\nassociations between them. Over the next several lessons, we'll explain Active\nRecord and work through a few labs that will help reinforce these concepts.\u003c/p\u003e","exportId":"introduction-to-active-record-associations"},{"id":203854,"title":"Associations and Migrations","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-associations-and-migrations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-and-migrations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-and-migrations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-and-migrations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand how and why Active Record implements associations between models.\u003c/li\u003e\n\u003cli\u003eUse Active Record migrations and methods to build out a domain model that\nassociates classes via the has-many/belongs-to \u003cem\u003eand\u003c/em\u003e the many-to-many (or\nhas-many-through) relationships.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat are Active Record Associations?\u003c/h2\u003e\n\n\u003cp\u003eWe already know that we can build our classes such that they associate with one\nanother. We also know that it takes a lot of code to do it. Active Record\nassociations allow us to associate models \u003cem\u003eand their analogous database tables\u003c/em\u003e\nwithout having to write tons of code.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, Active Record associations make actually working with our\nassociated objects even quicker, neater and easier.\u003c/p\u003e\n\n\u003cp\u003eSounds great, right? Now that we have you totally hooked, let's take a look at\nhow we use these AR associations.\u003c/p\u003e\n\n\u003ch2\u003eHow do we use AR Associations?\u003c/h2\u003e\n\n\u003cp\u003eActive Record makes it easy to implement the following relationships between\nmodels:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ebelongs_to\u003c/li\u003e\n\u003cli\u003ehas_one\u003c/li\u003e\n\u003cli\u003ehas_many\u003c/li\u003e\n\u003cli\u003ehas_many :through\u003c/li\u003e\n\u003cli\u003ehas_one :through\u003c/li\u003e\n\u003cli\u003ehas\u003cem\u003eand\u003c/em\u003ebelongs\u003cem\u003eto\u003c/em\u003emany\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe don't need to worry about most of these right now. We'll concern ourselves\nwith relationships that should sound familiar:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ebelongs to\u003c/li\u003e\n\u003cli\u003ehas many\u003c/li\u003e\n\u003cli\u003ehas many through\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn order to implement these relationships, we will need to do two things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite a migration that creates tables with associations. For example, if a\ncat belongs to an owner, the cats table should have an \u003ccode\u003eowner_id\u003c/code\u003e column.\u003c/li\u003e\n\u003cli\u003eUse Active Record macros in the models.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe'll go through both of these steps together, using our Playlister domain model.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this walk-through, we'll be building out a domain model for our fictitious\nmusic playing app, Playlister. This app will catalog songs and their\nassociated artists and genres.  \u003c/p\u003e\n\n\u003cp\u003eWe'll have three models: Artists, Songs, and Genres. By writing a few migrations\nand making use of the appropriate Active Record macros (more on that later), we\nwill be able to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eask an Artist about its songs and genres\u003c/li\u003e\n\u003cli\u003eask a Song about its genre and its artist\u003c/li\u003e\n\u003cli\u003eask a Genre about its songs and artists.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe relationships between artists, songs and genres will be enacted as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eArtists have many songs and a song belongs to an artist.\u003c/li\u003e\n\u003cli\u003eArtists have many genres through songs.\u003c/li\u003e\n\u003cli\u003eSongs belong to a genre.\u003c/li\u003e\n\u003cli\u003eA genre has many songs.\u003c/li\u003e\n\u003cli\u003eA genre has many artists through songs.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe will build these associations through the use of Active Record migrations and\nmacros.\u003c/p\u003e\n\n\u003ch2\u003eBuilding our Migrations\u003c/h2\u003e\n\n\u003ch3\u003eThe Song model\u003c/h3\u003e\n\n\u003cp\u003eA song will belong to an artist \u003cem\u003eand\u003c/em\u003e belong to a genre. Before we worry about\nthe migration that will implement this in our songs table, let's think about\nwhat that table will look like:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003cth\u003eartist_id\u003c/th\u003e\n\u003cth\u003egenre_id\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003eShake It Off\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eWe can see that the songs table will have an \u003ccode\u003eartist_id\u003c/code\u003e column and a \u003ccode\u003egenre_id\u003c/code\u003e\ncolumn. We will give a given song an \u003ccode\u003eartist_id\u003c/code\u003e value of the artist it belongs\nto. The same goes for genre. These foreign keys, in conjunction with the\nActive Record association macros will allow our query to get an artist's songs or\ngenres, a song's artist or genre, and a genre's songs and artists entirely\nthrough Active Record provided methods on our classes.\u003c/p\u003e\n\n\u003cp\u003eLet's write the migration that will make this happen.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOpen a file, \u003ccode\u003edb/migrate/03_create_songs.rb\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite the following migration:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateSongs \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :songs do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.integer :artist_id\u003cbr\u003e      t.integer :genre_id\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe Artist Model\u003c/h3\u003e\n\n\u003cp\u003eAn artist will have many songs and it will have many genres \u003cem\u003ethrough\u003c/em\u003e songs.\nThese associations will be taken care of entirely through AR macros, which we'll\nget to in a bit. What do we mean by \u003cem\u003ethrough\u003c/em\u003e songs? The table songs is the\n\u003ccode\u003eJOIN\u003c/code\u003e table! Remember that from previous labs? That means that songs has both\nan \u003ccode\u003eartist_id\u003c/code\u003e and a \u003ccode\u003egenre_id\u003c/code\u003e to combine those two tables together in a\nmany-to-many relationship.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at what our \u003ccode\u003eartists\u003c/code\u003e table will need to look like:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003eTaylor Swift\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eOur artists table just needs a \u003ccode\u003ename\u003c/code\u003e column. Let's write the migration. In\n\u003ccode\u003edb/migrate/01_create_artists.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateArtists \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :artists do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe Genre Model\u003c/h3\u003e\n\n\u003cp\u003eA genre will have many songs and it will have many artists through songs. These\nassociations will be taken care of entirely through AR macros, which we'll get\nto in a bit.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at what our genres table will need to look like:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003epop\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eLet's write our migration. In \u003ccode\u003edb/migrate/02_create_genres.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateGenres \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :genres do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! Now go ahead and run \u003ccode\u003erake db:migrate\u003c/code\u003e in your terminal to execute our\ntable creations.\u003c/p\u003e\n\n\u003ch2\u003eBuilding our Associations using AR Macros\u003c/h2\u003e\n\n\u003ch3\u003eWhat is a macro?\u003c/h3\u003e\n\n\u003cp\u003eA macro is a method that writes code for us (think metaprogramming). By invoking\na few methods that come with Active Record, we can implement all of the\nassociations we've been discussing.\u003c/p\u003e\n\n\u003cp\u003eWe'll be using the following AR macros (or methods):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-association\"\u003e\u003ccode\u003ehas_many\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association\"\u003e\u003ccode\u003ehas_many through\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association\"\u003e\u003ccode\u003ebelongs_to\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's get started.\u003c/p\u003e\n\n\u003ch3\u003eA Song Belongs to an Artist and A Genre\u003c/h3\u003e\n\n\u003cp\u003eCreate a file, \u003ccode\u003eapp/models/song.rb\u003c/code\u003e. Define your \u003ccode\u003eSong\u003c/code\u003e class to inherit from\n\u003ccode\u003eActiveRecord::Base\u003c/code\u003e. This is very important! If we don't inherit from Active\nRecord Base, we won't get our fancy macro methods.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe need to tell the \u003ccode\u003eSong\u003c/code\u003e class that it will produce objects that can belong to\nan artist. We will do it with the \u003ccode\u003ebelongs_to\u003c/code\u003e macro:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :artist\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSongs also belong to a genre, so we'll use the same macro to implement that\nrelationship:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :artist\u003cbr\u003e  belongs_to :genre\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAn Artist Has Many Songs\u003c/h3\u003e\n\n\u003cp\u003eCreate a file, \u003ccode\u003eapp/models/artist.rb\u003c/code\u003e. Define your \u003ccode\u003eArtist\u003c/code\u003e class to inherit\nfrom \u003ccode\u003eActiveRecord::Base\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe need to tell the \u003ccode\u003eArtist\u003c/code\u003e class that each artist object can have many songs.\nWe will use the \u003ccode\u003ehas_many\u003c/code\u003e macro to do it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd that's it! Now, because our songs table has an \u003ccode\u003eartist_id\u003c/code\u003e column and\nbecause our \u003ccode\u003eArtist\u003c/code\u003e class uses the \u003ccode\u003ehas_many\u003c/code\u003e macro, an artist has many songs!\u003c/p\u003e\n\n\u003cp\u003eIt is also true that an artist has many genres through songs. We will use the\n\u003ccode\u003ehas_many through\u003c/code\u003e macro to implement this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e  has_many :genres, through: :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eGenres Have Many Songs and Have Many Artists\u003c/h3\u003e\n\n\u003cp\u003eCreate a file \u003ccode\u003eapp/models/genre.rb\u003c/code\u003e. In it, define a class, \u003ccode\u003eGenre\u003c/code\u003e, to inherit\nfrom \u003ccode\u003eActiveRecord::Base\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Genre \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA genre can have many songs. Let's implement that with the \u003ccode\u003ehas_many\u003c/code\u003e macro:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Genre \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA genre also has many artists through its songs. Let's implement this\nrelationship with the \u003ccode\u003ehas_many through\u003c/code\u003e macro:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Genre \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e  has_many :artists, through: :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd that's it! The tests in this lesson are in place to ensure you've properly\nset up these associations. You can go ahead and run \u003ccode\u003elearn test\u003c/code\u003e now to see if you\npass them all before continuing.\u003c/p\u003e\n\n\u003ch2\u003eOur Code in Action: Working with Associations\u003c/h2\u003e\n\n\u003cp\u003eGo ahead and run the test suite and you'll see that we are passing all of our\ntests! Amazing! Our associations are all working, just because of our migrations\nand use of macros.\u003c/p\u003e\n\n\u003cp\u003eLet's play around with our code.\u003c/p\u003e\n\n\u003cp\u003eIn your console, run \u003ccode\u003erake console\u003c/code\u003e. Now we are in a Pry console that accesses\nour models.\u003c/p\u003e\n\n\u003cp\u003eLet's make a few new songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1]pry(main)\u0026gt; hello = Song.new(name: \"Hello\")\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[2]pry(main)\u0026gt; hotline_bling = Song.new(name: \"Hotline Bling\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, here we have two songs. Let's make some artists to associate them to. In\nthe \u003cem\u003esame PRY sessions as above\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[3] pry(main)\u0026gt; adele = Artist.new(name: \"Adele\")\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[4] pry(main)\u0026gt; drake = Artist.new(name: \"Drake\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, we know that an individual song has an \u003ccode\u003eartist_id\u003c/code\u003e attribute. We \u003cem\u003ecould\u003c/em\u003e\nassociate \u003ccode\u003ehello\u003c/code\u003e to \u003ccode\u003eadele\u003c/code\u003e by setting \u003ccode\u003ehello.artist_id=\u003c/code\u003e equal to the \u003ccode\u003eid\u003c/code\u003e of\nthe \u003ccode\u003eadele\u003c/code\u003e object. BUT! Active Record makes it so easy for us. The macros we\nimplemented in our classes allow us to associate a song object directly to an\nartist object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[5] pry(main)\u0026gt; hello.artist = adele\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we can ask \u003ccode\u003ehello\u003c/code\u003e who its artist is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[6] pry(main)\u0026gt; hello.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can even chain methods to ask \u003ccode\u003ehello\u003c/code\u003e for the \u003cem\u003ename\u003c/em\u003e of its artist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[7] pry(main)\u0026gt; hello.artist.name\u003cbr\u003e=\u0026gt; \"Adele\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWow! This is great, but we're not quite where we want to be. Right now, we've\nbeen able to assign an artist to a song, but is the reverse true?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[7] pry(main)\u0026gt; adele.songs\u003cbr\u003e=\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this case, we still need to tell the \u003ccode\u003eadele\u003c/code\u003e Artist instance which songs\nit has. We can do this by pushing the song instance into \u003ccode\u003eadele.songs\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[7] pry(main)\u0026gt; adele.songs.push(hello)\u003cbr\u003e=\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, now both sides of the relationships are updated, but so far all the work\nwe've done has been with temporary instances of Artist and Song. To persist\nthese relationships, we can use Active Record's \u003ccode\u003esave\u003c/code\u003e functionality:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; adele.save\u003cbr\u003e=\u0026gt; true\u003cbr\u003e[9] pry(main)\u0026gt; adele\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that \u003ccode\u003eadele\u003c/code\u003e now has an \u003ccode\u003eid\u003c/code\u003e. What about \u003ccode\u003ehello\u003c/code\u003e?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[10] pry(main)\u0026gt; hello\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa! We didn't mention \u003ccode\u003ehello\u003c/code\u003e when we saved. However, we established an\nassociation by assigning \u003ccode\u003ehello\u003c/code\u003e as a song \u003ccode\u003eadele\u003c/code\u003e \u003cem\u003ehas\u003c/em\u003e. In order for \u003ccode\u003eadele\u003c/code\u003e\nto save, \u003ccode\u003ehello\u003c/code\u003e must also be saved. Thus, \u003ccode\u003ehello\u003c/code\u003e has also been given an \u003ccode\u003eid\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and do the same for \u003ccode\u003ehotline_bling\u003c/code\u003e and \u003ccode\u003edrake\u003c/code\u003e to try it out on your\nown.\u003c/p\u003e\n\n\u003ch2\u003eAdding Additional Associations\u003c/h2\u003e\n\n\u003cp\u003eNow, let's make a second song for adele:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; someone_like_you = Song.new(name: \"Someone Like You\")\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[8] pry(main)\u0026gt; someone_like_you.artist = adele\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've only updated the song, so we should expect that \u003ccode\u003eadele\u003c/code\u003e is not\naware of this song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; someone_like_you.artist\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[9] pry(main)\u0026gt; adele.songs\u003cbr\u003e=\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven if we save the song, \u003ccode\u003eadele\u003c/code\u003e will not be updated.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; someone_like_you.save\u003cbr\u003e=\u0026gt; true\u003cbr\u003e[8] pry(main)\u0026gt; someone_like_you\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[9] pry(main)\u0026gt; adele.songs\u003cbr\u003e=\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut lets see what happens when we switch some things around. Creating one more\nsong:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; set_fire_to_the_rain = Song.new(name: \"Set Fire to the Rain\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen add the song to \u003ccode\u003eadele\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[9] pry(main)\u0026gt; adele.songs.push(set_fire_to_the_rain)\u003cbr\u003e=\u0026gt; [#, #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa! Check it out - we did not explicitly save \u003ccode\u003eset_fire_to_the_rain\u003c/code\u003e, but just\nby pushing the instance into \u003ccode\u003eadele.songs\u003c/code\u003e, Active Record has gone ahead and\nsaved the instance. Not only that, notice that the song instance \u003cem\u003ealso has an\naritst\u003c/em\u003eid!_\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; set_fire_to_the_rain.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo what is happening? Active Record is doing things for us behind the scenes,\nbut when dealing with associations, it will behave differently depending on\nwhich side of a relationship between two models you are updating.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRemember\u003c/strong\u003e: In a \u003ccode\u003ehas_many\u003c/code\u003e/\u003ccode\u003ebelongs_to\u003c/code\u003e relationship, we can think of the\nmodel that \u003ccode\u003ehas_many\u003c/code\u003e as the parent in the relationship. The model that\n\u003ccode\u003ebelongs_to\u003c/code\u003e, then, is the child. If you tell the child that it belongs to\nthe parent, \u003cem\u003ethe parent won't know about that relationship\u003c/em\u003e. If you tell the\nparent that a certain child object has been added to its collection, \u003cem\u003eboth the\nparent and the child will know about the association\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's see this in action again. Let's create another new song and add it to \u003ccode\u003eadele\u003c/code\u003e's\nsongs collection:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[10] pry(main)\u0026gt; rolling_in_the_deep = Song.new(name: \"Rolling in the Deep\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e[11] pry(main)\u0026gt; adele.songs \u0026lt;\u0026lt; rolling_in_the_deep\u003cbr\u003e=\u0026gt; [ #]\u003cbr\u003e[12] pry(main)\u0026gt; rolling_in_the_deep.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe added \u003ccode\u003erolling_in_the_deep\u003c/code\u003e to \u003ccode\u003eadele\u003c/code\u003e's collection of songs and we can see\nthe \u003ccode\u003eadele\u003c/code\u003e knows it has that song in the collection \u003cem\u003eand\u003c/em\u003e \u003ccode\u003erolling_in_the_deep\u003c/code\u003e\nknows about its artist. Not only that, \u003ccode\u003erolling_in_the_deep\u003c/code\u003e is now persisted to\nthe database.\u003c/p\u003e\n\n\u003cp\u003eNotice that \u003ccode\u003eadele.songs\u003c/code\u003e returns an array of songs. When a model \u003ccode\u003ehas_many\u003c/code\u003e of\nsomething, it will store those objects in an array. To add to that collection,\nwe use the shovel operator, \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, to operate on that collection, and treat\n\u003ccode\u003eadele.songs\u003c/code\u003e like any other array.\u003c/p\u003e\n\n\u003cp\u003eLet's play around with some genres and our has many through association.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[13] pry(main)\u0026gt; pop = Genre.create(name: \"pop\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis time, we'll just use \u003ccode\u003ecreate\u003c/code\u003e directly, which would be the same as running\n\u003ccode\u003eGenre.new\u003c/code\u003e, then \u003ccode\u003eGenre.save\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[14] pry(main)\u0026gt; pop.songs \u0026lt;\u0026lt; rolling_in_the_deep\u003cbr\u003e=\u0026gt; [#]\u003cbr\u003e[15] pry(main)\u0026gt; pop.songs\u003cbr\u003e=\u0026gt; [#]\u003cbr\u003e[16] pry(main)\u0026gt; rolling_in_the_deep.genre\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's working! But even cooler is that we've established has many \u003cem\u003ethrough\u003c/em\u003e\nrelationships. By creating a genre, then pushing a song into that genre's list\nof songs, \u003cem\u003ethe genre will now be able to produce its associated artists!\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[16] pry(main)\u0026gt; rolling_in_the_deep.artist\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[17] pry(main)\u0026gt; pop.artists\u003cbr\u003e=\u0026gt; [#]\u003cbr\u003e[28] pry(main)\u0026gt; adele.genres\u003cbr\u003e=\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSo, order and direction of operations does matter when establishing associations\nbetween models - it is typically better to update the \u003ccode\u003ehas_many\u003c/code\u003e side of a\nrelationship to get the full benefit of Active Record's power. Still, as we can\nsee, with just migrations and Active Record macros, we can start to build and\npersist associations between things!\u003c/p\u003e\n\n\u003ch2\u003eVideo Reviews\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=5dqPYRsQd10\"\u003eActive Record Associations\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=l9JCzNN2Z2U\"\u003eActive Record Associations II\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=WVBWlnUghOI\"\u003eAliasing Active Record Associations\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=ZfJ1rqFcNFU\"\u003eBlog CLI with Active Record and Associations\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g873f3f51451e7fc85e94634fec68df1b"},{"id":203855,"title":"Active Record Association Methods","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-associations-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand the common methods we have access to from our Active Record\nassociations\u003c/li\u003e\n\u003cli\u003eUse the methods that Active Record gives you based on your associations\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePreviously, we learned what Active Record associations are and how to use them.\nIn this lab, we are going to start with the association relationships already\ncoded for \u003ccode\u003eSongs\u003c/code\u003e, \u003ccode\u003eGenres\u003c/code\u003e, and \u003ccode\u003eArtists\u003c/code\u003e. These associations look like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eArtists have many songs and a song belongs to an artist.\u003c/li\u003e\n\u003cli\u003eArtists have many genres through songs.\u003c/li\u003e\n\u003cli\u003eSongs belong to a genre.\u003c/li\u003e\n\u003cli\u003eA genre has many songs.\u003c/li\u003e\n\u003cli\u003eA genre has many artists through songs.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou may recall that by writing a few migrations and making use of the\nappropriate Active Record macros, we will be able to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eask an Artist about its songs and genres\u003c/li\u003e\n\u003cli\u003eask a Song about its genre and its artist\u003c/li\u003e\n\u003cli\u003eask a Genre about its songs and artists.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe will build these associations through the use of Active Record migrations and\nmacros.\u003c/p\u003e\n\n\u003ch3\u003eBuilding our Migrations\u003c/h3\u003e\n\n\u003cp\u003eYou can take a look at the migration, if you need a reminder of the tables'\nstructures. Run \u003ccode\u003erake db:migrate\u003c/code\u003e in your terminal to execute our table\ncreations.\u003c/p\u003e\n\n\u003ch3\u003eBuilding our Associations using AR Macros\u003c/h3\u003e\n\n\u003cp\u003eWe used the following AR macros (or methods): \u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-association\"\u003e\u003ccode\u003ehas_many\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association\"\u003e\u003ccode\u003ehas_many\nthrough\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association\"\u003e\u003ccode\u003ebelongs_to\u003c/code\u003e\u003c/a\u003e. They helped us associate \u003ccode\u003esongs\u003c/code\u003e, \u003ccode\u003egenres\u003c/code\u003e, and\n\u003ccode\u003eartists\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song \u0026lt; Active Record::Base\u003cbr\u003e  belongs_to :artist\u003cbr\u003e  belongs_to :genre\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist \u0026lt; Active Record::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e  has_many :genres, through: :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Genre \u0026lt; Active Record::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e  has_many :artists, through: :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd that's it! With this relatively small amount of code, we now have access to\na whole host of methods provided by Active Record.\u003c/p\u003e\n\n\u003ch2\u003eAssociation Methods\u003c/h2\u003e\n\n\u003cp\u003eGo ahead and run the test suite and you'll see that we are passing the first 14\ntests. Our associations are all working, just because of our migrations and use\nof macros.\u003c/p\u003e\n\n\u003cp\u003eWe can now call methods on the objects we associated with one another. Let's\nplay around with our code using the console task we wrote for you in the\nRakefile.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake console\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.create(name: \"Hello\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eadele = Artist.create(name: \"Adele\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, we know that an individual song has an \u003ccode\u003eartist_id\u003c/code\u003e attribute. We \u003cem\u003ecould\u003c/em\u003e\nassociate \u003ccode\u003ehello\u003c/code\u003e to \u003ccode\u003eadele\u003c/code\u003e by setting \u003ccode\u003ehello.artist_id=\u003c/code\u003e equal to the \u003ccode\u003eid\u003c/code\u003e of\nthe \u003ccode\u003eadele\u003c/code\u003e object. BUT! Active Record makes it so easy for us. The macros we\nimplemented in our classes allow us to associate a song object directly to an\nartist object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.artist = adele\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we can ask \u003ccode\u003ehello\u003c/code\u003e who its artist is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can even chain methods to ask \u003ccode\u003ehello\u003c/code\u003e for the \u003cem\u003ename\u003c/em\u003e of its artist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.artist.name\u003cbr\u003e=\u0026gt; \"Adele\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can tell the artist about their song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erolling_in_the_deep = Song.create(name: \"Rolling in the Deep\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eadele.songs \u0026lt;\u0026lt; rolling_in_the_deep\u003cbr\u003e=\u0026gt; #[  ]\u003cbr\u003e\u003cbr\u003erolling_in_the_deep.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eStarting the Lab\u003c/h2\u003e\n\n\u003cp\u003eBe sure to run \u003ccode\u003erake db:migrate\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWe are going to write some methods of our own. We want to take advantage of our\nnew methods, thanks to the Active Record macros. Therefore, every method we write\nwill use some code that was generated by a macro. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  def get_first_song\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow would you write the \u003ccode\u003e#get_first_song\u003c/code\u003e method so that it returns the first\n\u003ccode\u003esong\u003c/code\u003e object saved to the artist it's called on? By using the macros! Just like\nabove when we called \u003ccode\u003eadele.songs\u003c/code\u003e, we now want to call \u003ccode\u003esongs\u003c/code\u003e on the instance\nthat the method will be called on in the future. How do we do that? Yes, \u003ccode\u003eself\u003c/code\u003e!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  def get_first_song\u003cbr\u003e    self.songs\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will return an array of the artist's songs. Since our method is\nspecifically looking for the first song, we just have to chain on a \u003ccode\u003efirst\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  def get_first_song\u003cbr\u003e    self.songs.first\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'll do a handful of methods like this one for the \u003ccode\u003eSong\u003c/code\u003e, \u003ccode\u003eArtist\u003c/code\u003e, and\n\u003ccode\u003eGenre\u003c/code\u003e classes. This lab is test-driven, so follow the specs and read the test\nerror messages for additional information.\u003c/p\u003e\n\n\u003cp\u003eThe below methods are defined in the \u003ccode\u003eartist.rb\u003c/code\u003e, \u003ccode\u003egenre.rb\u003c/code\u003e and \u003ccode\u003esong.rb\u003c/code\u003e\nwithin \u003ccode\u003eapp/models\u003c/code\u003e, but are all currently empty. Write implementations for each\nusing ActiveRecord methods.\u003c/p\u003e\n\n\u003ch3\u003eArtist Methods\u003c/h3\u003e\n\n\u003ch4\u003e\u003ccode\u003e#get_genre_of_first_song\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturns the genre of the artist's first saved song (maybe the \u003ccode\u003e#get_first_song\u003c/code\u003e method can be used here?)\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#song_count\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the total number of songs associated with the artist\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#genre_count\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the total number of genres associated with the artist\u003c/p\u003e\n\n\u003ch3\u003eGenre Methods\u003c/h3\u003e\n\n\u003ch4\u003e\u003ccode\u003e#song_count\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the total number of songs associated with the genre\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#artist_count\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the number of artists associated with the genre\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#all_artist_names\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn an array of strings containing every musician's name\u003c/p\u003e\n\n\u003ch3\u003eSong Methods\u003c/h3\u003e\n\n\u003ch4\u003e\u003ccode\u003e#get_genre_name\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the name of the genre this song belongs to\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#drake_made_this\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eFor the final method in this lab, rather than return a specific value or set of\nvalues like the previous labs, your task is to create an association between\na song and an artist. In this case, we'll use one artist for simplicity - Drake.\u003c/p\u003e\n\n\u003cp\u003eWhen this method is called, it should assign the song's artist to Drake.\nDrake doesn't exist in the database as an artist yet, so you'll have to\ncreate a record. However, if this method is run multiple times, you won't want\nto create a new record \u003cem\u003eeach time\u003c/em\u003e. Rather, you only want to create a record\nif Drake is not found in the database already. Once found or created, assign\nthis song to the drake Artist instance.\u003c/p\u003e","exportId":"geba19bf289e0877187d1e9e6ca9a9976"},{"id":203856,"title":"Active Record - TV Land Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-associations-tvland-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-tvland-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-tvland-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-tvland-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate and modify tables using Active Record migrations.\u003c/li\u003e\n\u003cli\u003eBuild associations between models using Active Record macros.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be working with a TV show domain model. We will have a show,\nnetwork, and character model. They will be associated in the following way:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn actor has many characters and has many shows through characters.\u003c/li\u003e\n\u003cli\u003eA character belongs to an actor and belongs to a show.\u003c/li\u003e\n\u003cli\u003eA show has many characters and has many actors through characters.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe've given you a few migrations in the \u003ccode\u003edb/migrate\u003c/code\u003e directory to create the\nnetworks and shows table, but you'll have to add additional tables and modify\nthese existing tables as per the guidelines below.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRemember to run \u003ccode\u003erake db:migrate\u003c/code\u003e in the terminal before you run your tests and after you make any new migrations!\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe tests in this lab are run for each model/migration - actor, character,\nnetwork (solution already provided), and show. Because of this, when run, you\nwill see \u003cem\u003eall the tests\u003c/em\u003e for the Actor model first, then _all the tests for\nCharacter, etc... the tricky thing here is that \u003cstrong\u003eyou will not be able to pass\nall the tests for Actor until the migrations for other models are working\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis makes sense, and mirrors normal development of associations - you can't ask\nan Actor instance about what characters it has if there isn't characters table\nor a model configured.\u003c/p\u003e\n\n\u003ch3\u003eMigrations\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a migration for the actors table. An actor should have a \u003ccode\u003efirst_name\u003c/code\u003e\nand a \u003ccode\u003elast_name\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWrite a migration for the characters table. A character should have a \u003ccode\u003ename\u003c/code\u003e,\n\u003ccode\u003eactor_id\u003c/code\u003e, and a \u003ccode\u003eshow_id\u003c/code\u003e––a character will belong to a show (the show\nmigration is already provided) and an actor, and we'll keep track of this\nrelationship with these database table columns.\u003c/li\u003e\n\u003cli\u003eWrite a migration that adds the column \u003ccode\u003ecatchphrase\u003c/code\u003e to your character model.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eAssociations\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eAssociate the \u003ccode\u003eActor\u003c/code\u003e model with the \u003ccode\u003eCharacter\u003c/code\u003e and \u003ccode\u003eShow\u003c/code\u003e model. An actor\nshould have many characters and many shows through characters.\u003c/li\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eActor\u003c/code\u003e class, \u003ccode\u003e#full_name\u003c/code\u003e, that returns the first and\nlast name of an actor.\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWrite a method in the \u003ccode\u003eActor\u003c/code\u003e class, \u003ccode\u003e#list_roles\u003c/code\u003e, that lists all of the\ncharacters that actor has alongside the show that the character is in. So, for\ninstance, if we had an actor, Peter Dinklage, a character, Tyrion Lannister,\nand a show, Game of Thrones, we with\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epeter = Actor.new(:first_name =\u0026gt; \"Peter\", :last_name =\u0026gt; \"Dinklage\")\u003cbr\u003etyrion = Character.new(:name =\u0026gt; \"Tyrion Lannister\")\u003cbr\u003etyrion.actor = peter\u003cbr\u003ethrones = Show.new(:name =\u0026gt; \"Game of Thrones\")\u003cbr\u003etyrion.show = thrones\u003cbr\u003etyrion.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd then, when we run \u003ccode\u003epeter.list_roles\u003c/code\u003e, we would get an Array containing a\n  string with both the character and the show:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eruby\n    ['Tyrion Lannister - Game of Thrones']\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDefine a method in the \u003ccode\u003eCharacter\u003c/code\u003e class, \u003ccode\u003e#say_that_thing_you_say\u003c/code\u003e, using a\ngiven character's catchphrase. Using Tyrion as an example again, the returned\nstring should look like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etyrion.catchphrase = 'A Lannister always pays his debts'\u003cbr\u003etyrion.say_that_thing_you_say\u003cbr\u003e#=\u0026gt; 'Tyrion Lannister always says: A Lannister always pays his debts'\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDefine a method in the \u003ccode\u003eShow\u003c/code\u003e class called \u003ccode\u003e#actors_list\u003c/code\u003e that returns an\nArray of the full names of each actor associated with the a show. Remember,\na show should have many actors through characters.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhile we've connected shows, characters and actors together, we haven't\nconnected these models to the existing network model. Update the associations\nso that a show belongs to a network. In the network model, an association has\nalready been added so that a network has many shows.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Once connected, this allows us to do some interesting things, like\n  chain-building. We could, for instance, create a character, and with that\n  character created, tell Active Record to \u003cem\u003echain build\u003c/em\u003e an associated show.\n  With a \u003cem\u003eshow\u003c/em\u003e created on the spot, we can immediately tell Active Record to\n  then \u003cem\u003echain build an associated network.\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  rick = Character.new(:name =\u0026gt; \"Rick Grimes\")\u003cbr\u003e  rick.build_show(:name =\u0026gt; \"The Walking Dead\").build_network(:call_letters =\u0026gt; \"AMC\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis doesn't \u003cem\u003esave\u003c/em\u003e these instances, but will set up the right associations\n  for us and when we save our character, the new show and network are also\n  saved.\u003c/p\u003e\n\n\u003ch3\u003eFinal Migrations\u003c/h3\u003e\n\n\u003cp\u003eFor the last couple of tests, update the shows table with a new migration. This\nmigration should add a \u003ccode\u003eday\u003c/code\u003e column to indicate which day of the week the show\nis on, a \u003ccode\u003egenre\u003c/code\u003e column for the show genre, and \u003ccode\u003eseason\u003c/code\u003e to indicate which\nseason the show is currently on. All three should be strings.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRails Guide - \u003ca href=\"http://guides.rubyonrails.org/association_basics.html\"\u003eActive Record Associations\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eAPI dock - \u003ca href=\"http://apidock.com/rails/ActiveRecord/Associations\"\u003eActive Record Associations\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eRails Guide - \u003ca href=\"http://edgeguides.rubyonrails.org/active_record_migrations.html\"\u003eActive Record Migrations\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g4c98cb71f66a3c552ba2bfa085e6655c"},{"id":203857,"title":"Video: Active Record Review","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-associations-video-review\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/5dqPYRsQd10?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e \n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many\"\u003eMethod provided by \u003ccode\u003ehas_many\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to\"\u003eMethod provided by \u003ccode\u003ebelongs_to\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"video-active-record-review"},{"id":203858,"title":"Video: Active Record Review II","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-associations-video-review-ii\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-ii/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-ii\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-ii/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/l9JCzNN2Z2U?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eDisclaimer\u003c/h2\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand ActiveRecord Associations then you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e","exportId":"video-active-record-review-ii"},{"id":203859,"title":"Video: Aliasing Active Record Associations","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-associations-video-review-aliasing-activerecord-associations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-aliasing-activerecord-associations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-aliasing-activerecord-associations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-aliasing-activerecord-associations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/WVBWlnUghOI?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eDisclaimer\u003c/h2\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand ActiveRecord Associations than you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e","exportId":"video-aliasing-active-record-associations"},{"id":203860,"title":"Video: Blog CLI with Active Record","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"video-review-blog-cli-with-activerecord-and-associations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/video-review-blog-cli-with-activerecord-and-associations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/video-review-blog-cli-with-activerecord-and-associations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/video-review-blog-cli-with-activerecord-and-associations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/ZfJ1rqFcNFU?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eDisclaimer\u003c/h2\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand ActiveRecord Associations than you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/aviflombaum/blog_cli\"\u003eLesson source code\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"video-blog-cli-with-active-record"}]},{"id":22697,"name":"Active Record - Code Challenge Practice","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g4f73f72b62ca324469ccf716cfe844a8","items":[{"id":210414,"title":"AR More Models Practice","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ar-more-models-practice\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ar-more-models-practice\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eSWBATs\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e[ ] Practice deciding where the \u003ccode\u003eid\u003c/code\u003e should live in associated tables (remember that it is the joiner's responsibility to know about the other \u003ccode\u003eid\u003c/code\u003e's)\u003c/li\u003e \u003cli\u003e[ ] Practice adding new models and setting up associations from scratch\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eWATCH THIS FIRST\u003c/h2\u003e  \u003cp\u003evideo: \u003ca href=\"https://youtu.be/MXkmCTywFFM\"\u003ehttps://youtu.be/MXkmCTywFFM\u003c/a\u003e\u003c/p\u003e  \u003ch2\u003eERD\u003c/h2\u003e  \u003cp\u003eCurrently, our ERD looks as following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eCategory :name\u003cbr\u003e    |\u003cbr\u003e    ^\u003cbr\u003e  Plant ----\u0026lt; PlantParenthood \u0026gt;---- PlantParent\u003cbr\u003e   :species      :plant_id            :name\u003cbr\u003e   :color        :plant_parent_id     :responsible\u003cbr\u003e   :bought       :affection           :age\u003cbr\u003e   :fussy\u003cbr\u003e   :category_id \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCurrently, one plant can have only one category. This does not represent the real-world situation (some plants are indoor, some are outdoor and some are both). We also see that the only relationship between a plant and a person is \"parenthood\" (ownership) but what about the moment when someone else waters your plants for you when you're away? They are not \u003cstrong\u003eowners\u003c/strong\u003e but they do interact with the plant.\u003c/p\u003e  \u003cp\u003eAt the end of the practice, our ERD will look as following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  Category\u003cbr\u003e    |\u003cbr\u003e    ^\u003cbr\u003e  PlantCategory\u003cbr\u003e    V\u003cbr\u003e    |\u003cbr\u003e  Plant ----\u0026lt; PlantParenthood \u0026gt;----   Person\u003cbr\u003e    |                                   |\u003cbr\u003e    |                                   |\u003cbr\u003e    |                                   |\u003cbr\u003e     --------\u0026lt; Watering \u0026gt;--------------- \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eDescription of the models:\u003c/h3\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eCategory\u003c/code\u003e -- it is a category of the plant, for example: \"leafy\", \"succulent\", \"indoor\", \"outdoor\"\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlant\u003c/code\u003e -- self-explanatory\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlantCategory\u003c/code\u003e -- since now Plant can have many Categories and vice-versa, we have a many-to-many relationship and need a joiner;\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePerson\u003c/code\u003e -- since not everyone interacting with the plant will be a plant_parent, let's change the name of this model to the Person\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlantParenthood\u003c/code\u003e -- describes a relationship of ownership between a person and a plant\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eWatering\u003c/code\u003e -- describes every situation when a person waters the plant\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eRoadmap:\u003c/h3\u003e  \u003col\u003e \u003cli\u003eMake Plant-Category relationship a many-to-many.  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/6ZpZESODKQ8\"\u003ehttps://youtu.be/6ZpZESODKQ8\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003efinished code\u003c/strong\u003e: \u003ca href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/tree/first-and-second\"\u003ehttps://github.com/learn-co-curriculum/ar-more-models-practice/tree/first-and-second\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003ecreate a new migration: delete the \u003ccode\u003ecategory_id\u003c/code\u003e from \u003ccode\u003ePlant\u003c/code\u003e + migrate\u003c/li\u003e \u003cli\u003ecreate a new migration: introduce a new table + migrate\u003c/li\u003e \u003cli\u003ecreate a corresponding model\u003c/li\u003e \u003cli\u003eadd associations\u003c/li\u003e \u003cli\u003etest in seeds\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eChange the name of the \u003ccode\u003ePlantParent\u003c/code\u003e to \u003ccode\u003ePerson\u003c/code\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/P5WVCoWCLhg\"\u003ehttps://youtu.be/P5WVCoWCLhg\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003efinished code\u003c/strong\u003e: \u003ca href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/tree/first-and-second\"\u003ehttps://github.com/learn-co-curriculum/ar-more-models-practice/tree/first-and-second\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003ecreate a new migration: change the name of the table + migrate\u003c/li\u003e \u003cli\u003echange the name of the model file and model name\u003c/li\u003e \u003cli\u003ein all the model files, replace \u003ccode\u003eplant_parent\u003c/code\u003e and \u003ccode\u003eplant_parents\u003c/code\u003e with \u003ccode\u003eperson\u003c/code\u003e and \u003ccode\u003epeople\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ein seeds, change the model name everywhere\u003c/li\u003e \u003cli\u003erun \u003ccode\u003erake db:seed\u003c/code\u003e and check how many people you have and whether you can check number of people associated with a plant (e.g. \u003ccode\u003ePlant.first.people.count\u003c/code\u003e) or a person (e.g. \u003ccode\u003ePerson.first.plants\u003c/code\u003e) -- this should error out! Debug it or watch the video.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eIntroduce a \u003ccode\u003eWatering\u003c/code\u003e model -- since it's a joiner, it will hold the \u003ccode\u003eid\u003c/code\u003es of the other models\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/QU166h3QrAc\"\u003ehttps://youtu.be/QU166h3QrAc\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003efinished code\u003c/strong\u003e: \u003ca href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/tree/third-deliverable\"\u003ehttps://github.com/learn-co-curriculum/ar-more-models-practice/tree/third-deliverable\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003ecreate a new migration: introduce a new table + migrate -- remember to add \u003ccode\u003et.timestamps\u003c/code\u003e to the table, we will need that to see all the Waterings that happened!\u003c/li\u003e \u003cli\u003ecreate a corresponding model\u003c/li\u003e \u003cli\u003eadd associations -- \u003cstrong\u003eplease refer to the video, this one is tricky!\u003c/strong\u003e\n\u003c/li\u003e \u003cli\u003etest in seeds\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eAdd behavior\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003efinished code\u003c/strong\u003e: \u003ca href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/tree/fourth-deliverable\"\u003ehttps://github.com/learn-co-curriculum/ar-more-models-practice/tree/fourth-deliverable\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePerson#water_plant\u003c/code\u003e -- accepts an argument of a plant and creates a new instance of \u003ccode\u003eWatering\u003c/code\u003e between the person and the plant; if there is an associated \u003ccode\u003ePlantParenthood\u003c/code\u003e with both, this method also increases the value of affection by one\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/u8GhZn_u5tg\"\u003ehttps://youtu.be/u8GhZn_u5tg\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlantParenthood#cap_affection\u003c/code\u003e -- introduces a cap on the affection value at 11_000  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/V5vbXF47ASM\"\u003ehttps://youtu.be/V5vbXF47ASM\u003c/a\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlant#number_of_days_since_the_last_watering\u003c/code\u003e -- puts \"I was watered NUMBER days ago\"  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/AmwKAuL0BXc\"\u003ehttps://youtu.be/AmwKAuL0BXc\u003c/a\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ol\u003e","exportId":"ar-more-models-practice"},{"id":210415,"title":"Active Record Theater Work","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Active-Record-Theater-Work\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Active-Record-Theater-Work/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Active-Record-Theater-Work\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Active-Record-Theater-Work/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eThe Flatiron Theater Company is holding Auditions!\u003c/p\u003e  \u003cp\u003eAn actor may only \u003ccode\u003eAudition\u003c/code\u003e for one \u003ccode\u003eRole\u003c/code\u003e, while a \u003ccode\u003eRole\u003c/code\u003e may have many \u003ccode\u003eAuditions\u003c/code\u003e for it! \u003c/p\u003e  \u003cp\u003e\u003cimg src=\"one_to_many.png\" alt=\"one to many\"\u003e\u003c/p\u003e  \u003ch2\u003eGetting started\u003c/h2\u003e  \u003cp\u003erun \u003ccode\u003ebundle install\u003c/code\u003e\u003c/p\u003e  \u003ch2\u003eMigrations\u003c/h2\u003e  \u003cp\u003eCreate your migrations.  - \u003ccode\u003eAuditions\u003c/code\u003e should have an actor(string), location(string) and belong_to a role(integer)\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eRoles\u003c/code\u003e should only have a character_name\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003e\n\u003ccode\u003eauditions\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003eactor\u003c/td\u003e \u003ctd\u003estring\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003elocation\u003c/td\u003e \u003ctd\u003estring\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003ephone\u003c/td\u003e \u003ctd\u003einteger\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003ehired\u003c/td\u003e \u003ctd\u003eboolean\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003erole_id\u003c/td\u003e \u003ctd\u003einteger\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch4\u003e\n\u003ccode\u003eroles\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003echaracter_name\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch2\u003eRelationship\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWhat associations will this need?\u003c/li\u003e \u003cli\u003e(i.e. \u003ccode\u003ehas_many\u003c/code\u003e, \u003ccode\u003ehas_many through\u003c/code\u003e, and \u003ccode\u003ebelongs_to\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eAudition\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAudition#role\u003c/code\u003e returns an instance of role associated with this audition\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAudition#call_back\u003c/code\u003e will change the the hired attribute to \u003ccode\u003etrue\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eRoles\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#auditions\u003c/code\u003e returns all of the auditions associated with this role \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#actors\u003c/code\u003e returns an array of names from the actors associated with this role\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#locations\u003c/code\u003e returns an array of locations from the auditions associated with this role\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#lead\u003c/code\u003e returns the first instance of the audition that was hired for this role or returns a string 'no actor has been hired for this role'\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#understudy\u003c/code\u003e returns the second instance of the audition that was hired for this role or returns a string 'no actor has been hired for understudy for this role'\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g1ddbb29216d93b0bf40711ff713bd024"},{"id":210416,"title":" Object Relations Practice Code Challenge Magazines Many Many","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"-Object-Relations-Practice-Code-Challenge-Magazines-Many-Many\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/-Object-Relations-Practice-Code-Challenge-Magazines-Many-Many/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/-Object-Relations-Practice-Code-Challenge-Magazines-Many-Many\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/-Object-Relations-Practice-Code-Challenge-Magazines-Many-Many/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eFor this assignment, we'll be working with a Magazine domain.\u003c/p\u003e  \u003cp\u003eWe have three models: \u003ccode\u003eMagazine\u003c/code\u003e, \u003ccode\u003eSubscription\u003c/code\u003e, and \u003ccode\u003eReader\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eFor our purposes, a \u003ccode\u003eMagazine\u003c/code\u003e has many \u003ccode\u003eSubscription\u003c/code\u003es, a \u003ccode\u003eReader\u003c/code\u003e has many \u003ccode\u003eSubscription\u003c/code\u003es, and a \u003ccode\u003eSubscription\u003c/code\u003e belongs to a \u003ccode\u003eMagazine\u003c/code\u003e and to an \u003ccode\u003eReader\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eMagazine\u003c/code\u003e - \u003ccode\u003eReader\u003c/code\u003e is a many to many relationship.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You should draw your domain on paper or on a whiteboard \u003cem\u003ebefore you start coding\u003c/em\u003e. Remember to identify a single source of truth for your data.\u003c/p\u003e  \u003ch2\u003eTopics\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eActive Record Migrations\u003c/li\u003e \u003cli\u003eObject Relationships\u003c/li\u003e \u003cli\u003eActive Record Queryng\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eTo get started, run \u003ccode\u003ebundle install\u003c/code\u003e while inside of this directory.\u003c/p\u003e  \u003cp\u003eBuild out all of the methods listed in the deliverables. The methods are listed in a suggested order, but you can feel free to tackle the ones you think are easiest. Be careful: some of the later methods rely on earlier ones.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRemember!\u003c/strong\u003e This code challenge does not have tests. You cannot run \u003ccode\u003erspec\u003c/code\u003e and you cannot run \u003ccode\u003elearn\u003c/code\u003e. You'll need to create your own sample instances so that you can try out your code on your own. Make sure your associations and methods work in the console before submitting.\u003c/p\u003e  \u003cp\u003eWe've provided you with a tool that you can use to test your code. To use it, run \u003ccode\u003erake console\u003c/code\u003e from the command line. This will start a \u003ccode\u003epry\u003c/code\u003e session with your classes defined. You can test out the methods that you write here. You are also encouraged to use the \u003ccode\u003eseeds.rb\u003c/code\u003e file to create sample data to test your models and associations.\u003c/p\u003e  \u003cp\u003eWriting error-free code is more important than completing all of the deliverables listed - prioritize writing methods that work over writing more methods that don't work. You should test your code in the console as you write.\u003c/p\u003e  \u003cp\u003eSimilarly, messy code that works is better than clean code that doesn't. First, prioritize getting things working. Then, if there is time at the end, refactor your code to adhere to best practices. \u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eBefore you submit!\u003c/strong\u003e Save and run your code to verify that it works as you expect. If you have any methods that are not working yet, feel free to leave comments describing your progress.\u003c/p\u003e  \u003ch2\u003eWhat You Already Have\u003c/h2\u003e  \u003cp\u003eThe starter code has migrations and models for the initial \u003ccode\u003eReader\u003c/code\u003e, \u003ccode\u003eMagazine\u003c/code\u003e and \u003ccode\u003eSubscription\u003c/code\u003e models, and seed data for some \u003ccode\u003eReader\u003c/code\u003es and \u003ccode\u003eMagazine\u003c/code\u003es. The schema currently looks like this: \u003c/p\u003e  \u003ch4\u003e\n\u003ccode\u003ereaders\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003ename\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eemail\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch4\u003e\n\u003ccode\u003emagazines\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003etitle\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eYou will need to create the migration for the \u003ccode\u003esubscriptions\u003c/code\u003e table using the attributes specified in the deliverables below.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eWrite the following methods in the classes in the files provided. Feel free to build out any helper methods if needed.\u003c/p\u003e  \u003cp\u003eDeliverables use the notation \u003ccode\u003e#\u003c/code\u003e for instance methods, and \u003ccode\u003e.\u003c/code\u003e for class methods.\u003c/p\u003e  \u003cp\u003eRemember: Active Record give your classes access to a lot of built-in methods! Keep in mind what methods Active Record gives you access to on each of your classes when you're approaching the deliverables below.\u003c/p\u003e  \u003ch3\u003eMigrations\u003c/h3\u003e  \u003cp\u003eBefore working on the rest of the deliverables, you will need to create a migration for the \u003ccode\u003esubscriptions\u003c/code\u003e table. \u003c/p\u003e  \u003cul\u003e \u003cli\u003eA \u003ccode\u003eSubscription\u003c/code\u003e belongs to a \u003ccode\u003eMagazine\u003c/code\u003e, and a \u003ccode\u003eSubscription\u003c/code\u003e also belongs to an \u003ccode\u003eReader\u003c/code\u003e. In your migration, create any columns your \u003ccode\u003esubscriptions\u003c/code\u003e table will need to establish these relationships.  \u003cul\u003e \u003cli\u003eThe \u003ccode\u003esubscriptions\u003c/code\u003e table should also have a \u003ccode\u003eprice\u003c/code\u003e column that stores an integer.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAfter creating your migration, use the \u003ccode\u003eseeds.rb\u003c/code\u003e file to create instances of your \u003ccode\u003eSubscription\u003c/code\u003e class so you can test your code.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eOnce you've set up your \u003ccode\u003eSubscription\u003c/code\u003e class\u003c/strong\u003e, work on building out the following deliverables.\u003c/p\u003e  \u003ch3\u003eObject Relationship Methods\u003c/h3\u003e  \u003cp\u003eUse Active Record association macros and Active Record query methods where appropriate (i.e. \u003ccode\u003ehas_many\u003c/code\u003e, \u003ccode\u003ehas_many through\u003c/code\u003e, and \u003ccode\u003ebelongs_to\u003c/code\u003e).\u003c/p\u003e  \u003ch4\u003eSubscription\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eSubscription#reader\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return the \u003ccode\u003eReader\u003c/code\u003e instance for this subscription\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eSubscription#magazine\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return the \u003ccode\u003eMagazine\u003c/code\u003e instance for this subscription\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eMagazine\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eMagazine#subscriptions\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a collection of all \u003ccode\u003eSubscription\u003c/code\u003e instances for this magazine\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eMagazine#readers\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a collection of all \u003ccode\u003eReader\u003c/code\u003e instances who are subscribed to this magazine\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eReader\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eReader#subscriptions\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return a collection of all \u003ccode\u003eSubscription\u003c/code\u003e instances for this reader\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eReader#magazines\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return a collection of all \u003ccode\u003eMagazine\u003c/code\u003e instances that this reader is subscribed to\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eAggregate and Association Methods\u003c/h3\u003e  \u003ch4\u003eSubscription\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eSubscription#print_details\u003c/code\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eputs\u003c/code\u003e a string to the terminal to display the details of the subscription\u003c/li\u003e \u003cli\u003ethe string should be formatted like this: \u003ccode\u003e{reader name} subscribed to {magazine title} for ${subscription price}\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eReader\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eReader#subscribe(magazine, price)\u003c/code\u003e  \u003cul\u003e \u003cli\u003etakes a \u003ccode\u003emagazine\u003c/code\u003e (an instance of the \u003ccode\u003eMagazine\u003c/code\u003e class) and a \u003ccode\u003eprice\u003c/code\u003e (integer) as arguments, and creates a new \u003ccode\u003esubscription\u003c/code\u003e in the database associated with the magazine and the reader\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eReader#total_subcription_price\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the total price for all the reader's subscriptions\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eReader#cancel_subscription(magazine)\u003c/code\u003e  \u003cul\u003e \u003cli\u003etakes a \u003ccode\u003emagazine\u003c/code\u003e instance and removes the subscription for this reader\u003c/li\u003e \u003cli\u003eyou will have to delete a row from the \u003ccode\u003esubscriptions\u003c/code\u003e table to get this to work!\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eMagazine\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eMagazine#email_list\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a \u003ccode\u003eString\u003c/code\u003e of a semi-colon separated list of emails for all the readers subscribed to this magazine\u003c/li\u003e \u003cli\u003ethe string should be formatted like this: \u003ccode\u003eemail1@example.com;email2@example.com;email3@example.com\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eMagazine.most_popular\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the \u003ccode\u003eMagazine\u003c/code\u003e instance with the most subscribers\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eRubric\u003c/h2\u003e  \u003ch3\u003eActive Record Associations\u003c/h3\u003e  \u003col\u003e \u003cli\u003eNo associations, no foreign key on the table.\u003c/li\u003e \u003cli\u003eAssociations attempted in the model but are incorrect; foreign key is on a table but in the wrong spot.\u003c/li\u003e \u003cli\u003eRelationships properly created. Associations lead to the correct behavior but may have used the wrong macro or manually written out the methods the macro builds for us.\u003c/li\u003e \u003cli\u003eRelationships properly created, save minor mistakes in advanced deliverables. May implement advanced query methods with iterators instead of using built-in methods.\u003c/li\u003e \u003cli\u003eRelationships properly created. Advanced query methods use appropriate built-in methods.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eBuild classes using OO Ruby Syntax\u003c/h3\u003e  \u003col\u003e \u003cli\u003eClass code has a syntax or runtime error. Code does not run at all, or exits with an error, or most Object-oriented deliverables are not implemented.\u003c/li\u003e \u003cli\u003eNo syntax errors. Some deliverables function correctly. Mixes up syntax for class and instance methods, refers to variables in the wrong scope, or uses \u003ccode\u003eself\u003c/code\u003e incorrectly, leading to logical errors. Method and variable names do not correspond to their respective behavior or data types. Methods might be duplicated, or code includes unused methods without a clear purpose.\u003c/li\u003e \u003cli\u003eCorrect class syntax for the deliverables submitted. May be incomplete or missing deliverables. Most code generally expresses intent: method and variable names match their behaviors and data types. Methods are not duplicated. Code does not have unused or methods without a clear purpose.\u003c/li\u003e \u003cli\u003eCorrect class syntax for all of the submitted code. Code express intent: method and variable names indicate their behavior and data types. Some deliverables might not be complete. No methods are duplicated.\u003c/li\u003e \u003cli\u003eCorrect class syntax for all deliverables, all deliverables complete. Code expresses intent: method and variable names indicate their behavior and data types, with the correct pluralization. No methods are duplicated. All methods have a clear purpose. Shared functionality is factored out into helper methods. Appropriate use of attr_* macros.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eModel relationships using Ruby\u003c/h3\u003e  \u003col\u003e \u003cli\u003eSubmitted code does not relate models to each other through methods or data.\u003c/li\u003e \u003cli\u003eModels relate to each other, but incompletely. Relationship methods are missing or have logic errors, store data on the wrong model, or are missing a single source of truth.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Data is stored on the correct models, relationship methods are defined on the right models, and the logic correctly implements the relationships. Aggregate methods using the relationships may be incomplete or have errors.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Aggregate methods work, but might not use helper methods effectively.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Aggregate methods use helper methods effectively.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eSolve problems with collections of data\u003c/h3\u003e  \u003col\u003e \u003cli\u003eDoes not attempt to solve collections problems, or has syntax errors in collection code.\u003c/li\u003e \u003cli\u003eCollections methods have runtime or logic errors. Collections methods may use the wrong iterators, have incorrect logic, or many of the collections methods are unimplemented.\u003c/li\u003e \u003cli\u003eSome collections methods work correctly, though several might be unimplemented. Code may not use the appropriate built in method for each problem, or duplicate logic instead of using helper methods.\u003c/li\u003e \u003cli\u003eAll collections methods are implemented and function correctly. Most use appropriate higher-level built-in methods. Methods may duplicate logic instead of using helper methods.\u003c/li\u003e \u003cli\u003eAll collections methods implemented and function correctly, using appropriate higher-level built-in methods. Shared logic is factored out to helper methods.\u003c/li\u003e \u003c/ol\u003e","exportId":"ga8b664d498fcbbf734b0357ca40b38c1"},{"id":210417,"title":"Object Relations Practice Code Challenge Students One Many","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Object-Relations-Practice-Code-Challenge-Students-One-Many\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Object-Relations-Practice-Code-Challenge-Students-One-Many/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Object-Relations-Practice-Code-Challenge-Students-One-Many\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Object-Relations-Practice-Code-Challenge-Students-One-Many/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eFor this assignment, we'll be working with a Students domain.\u003c/p\u003e  \u003cp\u003eWe have two models: \u003ccode\u003eCohort\u003c/code\u003e and \u003ccode\u003eStudent\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eFor our purposes, a \u003ccode\u003eCohort\u003c/code\u003e has many \u003ccode\u003eStudents\u003c/code\u003es and a \u003ccode\u003eStudent\u003c/code\u003e belongs to a \u003ccode\u003eCohort\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eStudent\u003c/code\u003e - \u003ccode\u003eCohort\u003c/code\u003e is a one to many relationship.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You should draw your domain on paper or on a whiteboard \u003cem\u003ebefore you start coding\u003c/em\u003e. Remember to identify a single source of truth for your data.\u003c/p\u003e  \u003ch2\u003eTopics\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eActive Record Migrations\u003c/li\u003e \u003cli\u003eObject Relationships\u003c/li\u003e \u003cli\u003eActive Record Queryng\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eTo get started, run \u003ccode\u003ebundle install\u003c/code\u003e while inside of this directory.\u003c/p\u003e  \u003cp\u003eBuild out all of the methods listed in the deliverables. The methods are listed in a suggested order, but you can feel free to tackle the ones you think are easiest. Be careful: some of the later methods rely on earlier ones.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRemember!\u003c/strong\u003e This code challenge does not have tests. You cannot run \u003ccode\u003erspec\u003c/code\u003e and you cannot run \u003ccode\u003elearn\u003c/code\u003e. You'll need to create your own sample instances so that you can try out your code on your own. Make sure your associations and methods work in the console before submitting.\u003c/p\u003e  \u003cp\u003eWe've provided you with a tool that you can use to test your code. To use it, run \u003ccode\u003erake console\u003c/code\u003e from the command line. This will start a \u003ccode\u003epry\u003c/code\u003e session with your classes defined. You can test out the methods that you write here. You are also encouraged to use the \u003ccode\u003eseeds.rb\u003c/code\u003e file to create sample data to test your models and associations.\u003c/p\u003e  \u003cp\u003eWriting error-free code is more important than completing all of the deliverables listed - prioritize writing methods that work over writing more methods that don't work. You should test your code in the console as you write.\u003c/p\u003e  \u003cp\u003eSimilarly, messy code that works is better than clean code that doesn't. First, prioritize getting things working. Then, if there is time at the end, refactor your code to adhere to best practices. \u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eBefore you submit!\u003c/strong\u003e Save and run your code to verify that it works as you expect. If you have any methods that are not working yet, feel free to leave comments describing your progress.\u003c/p\u003e  \u003ch2\u003eWhat You Already Have\u003c/h2\u003e  \u003cp\u003eThe starter code has migrations and models for the initial \u003ccode\u003eCohort\u003c/code\u003e and \u003ccode\u003eStudent\u003c/code\u003e models, and seed data for some \u003ccode\u003eCohort\u003c/code\u003es and \u003ccode\u003eStudent\u003c/code\u003es. The tables currently look like this: \u003c/p\u003e  \u003ch4\u003e\n\u003ccode\u003estudents\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003ename\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eage\u003c/td\u003e \u003ctd\u003eInteger\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eemail\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch4\u003e\n\u003ccode\u003ecohorts\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003ename\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003ecurrent_mod\u003c/td\u003e \u003ctd\u003eInteger\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eYou will need to create a migration to establish the relationship between these two tables. You'll need to add one additional column to one of these existing tables to create the relationship. \u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRemember\u003c/strong\u003e: a \u003ccode\u003eCohort\u003c/code\u003e has many \u003ccode\u003eStudent\u003c/code\u003es and a \u003ccode\u003eStudent\u003c/code\u003e belongs to a \u003ccode\u003eCohort\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eWrite the following methods in the classes in the files provided. Feel free to build out any helper methods if needed.\u003c/p\u003e  \u003cp\u003eDeliverables use the notation \u003ccode\u003e#\u003c/code\u003e for instance methods, and \u003ccode\u003e.\u003c/code\u003e for class methods.\u003c/p\u003e  \u003cp\u003eRemember: Active Record give your classes access to a lot of built-in methods! Keep in mind what methods Active Record gives you access to on each of your classes when you're approaching the deliverables below.\u003c/p\u003e  \u003ch3\u003eMigrations\u003c/h3\u003e  \u003cp\u003eBefore working on the rest of the deliverables, you will need to set up the migration files to establish the relationship between a \u003ccode\u003eStudent\u003c/code\u003e and a \u003ccode\u003eCohort\u003c/code\u003e.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eA \u003ccode\u003eStudent\u003c/code\u003e belongs to a \u003ccode\u003eCohort\u003c/code\u003e. Update the existing migrations file(s) to reflect this relationship.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eOnce you've updated the migrations, run \u003ccode\u003erake db:migrate\u003c/code\u003e to run the migrations and set up the database. Then use the \u003ccode\u003eseeds.rb\u003c/code\u003e file to create instances of \u003ccode\u003eStudent\u003c/code\u003es and \u003ccode\u003eCohort\u003c/code\u003es to so you can test your relationships.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eOnce you've successfully created the migration\u003c/strong\u003e, work on building out the following deliverables. \u003c/p\u003e  \u003ch3\u003eObject Relationship Methods\u003c/h3\u003e  \u003cp\u003eUse Active Record association macros and Active Record query methods where appropriate (i.e. \u003ccode\u003ehas_many\u003c/code\u003e, \u003ccode\u003ehas_many through\u003c/code\u003e, and \u003ccode\u003ebelongs_to\u003c/code\u003e).\u003c/p\u003e  \u003ch4\u003eStudent\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eStudent#cohort\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return the \u003ccode\u003eCohort\u003c/code\u003e instance for this student\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eCohort\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eCohort#students\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a collection of all \u003ccode\u003eStudent\u003c/code\u003e instances for this cohort\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eAggregate and Association Methods\u003c/h3\u003e  \u003ch4\u003eStudent\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eStudent#current_mod\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the current mod for this student's cohort\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eCohort\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eCohort#add_student\u003c/code\u003e   \u003cul\u003e \u003cli\u003etakes a name (as a \u003ccode\u003eString\u003c/code\u003e) and an age (as an \u003ccode\u003eInteger\u003c/code\u003e) and adds a new student to this cohort\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eCohort#average_age\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the average age of all the students in the cohort as a \u003ccode\u003eFloat\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eCohort#total students\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the total number of students in the cohort as an \u003ccode\u003eInteger\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eCohort.biggest\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a \u003ccode\u003eCohort\u003c/code\u003e instance for the cohort with the most students\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eCohort.sort_by_mod\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns all cohorts, sorted by \u003ccode\u003ecurrent_mod\u003c/code\u003e from lowest to highest\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eRubric\u003c/h2\u003e  \u003ch3\u003eActive Record Associations\u003c/h3\u003e  \u003col\u003e \u003cli\u003eNo associations, no foreign key on the table.\u003c/li\u003e \u003cli\u003eAssociations attempted in the model but are incorrect; foreign key is on a table but in the wrong spot.\u003c/li\u003e \u003cli\u003eRelationships properly created. Associations lead to the correct behavior but may have used the wrong macro or manually written out the methods the macro builds for us.\u003c/li\u003e \u003cli\u003eRelationships properly created, save minor mistakes in advanced deliverables. May implement advanced query methods with iterators instead of using built-in methods.\u003c/li\u003e \u003cli\u003eRelationships properly created. Advanced query methods use appropriate built-in methods.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eBuild classes using OO Ruby Syntax\u003c/h3\u003e  \u003col\u003e \u003cli\u003eClass code has a syntax or runtime error. Code does not run at all, or exits with an error, or most Object-oriented deliverables are not implemented.\u003c/li\u003e \u003cli\u003eNo syntax errors. Some deliverables function correctly. Mixes up syntax for class and instance methods, refers to variables in the wrong scope, or uses \u003ccode\u003eself\u003c/code\u003e incorrectly, leading to logical errors. Method and variable names do not correspond to their respective behavior or data types. Methods might be duplicated, or code includes unused methods without a clear purpose.\u003c/li\u003e \u003cli\u003eCorrect class syntax for the deliverables submitted. May be incomplete or missing deliverables. Most code generally expresses intent: method and variable names match their behaviors and data types. Methods are not duplicated. Code does not have unused or methods without a clear purpose.\u003c/li\u003e \u003cli\u003eCorrect class syntax for all of the submitted code. Code express intent: method and variable names indicate their behavior and data types. Some deliverables might not be complete. No methods are duplicated.\u003c/li\u003e \u003cli\u003eCorrect class syntax for all deliverables, all deliverables complete. Code expresses intent: method and variable names indicate their behavior and data types, with the correct pluralization. No methods are duplicated. All methods have a clear purpose. Shared functionality is factored out into helper methods. Appropriate use of attr_* macros.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eModel relationships using Ruby\u003c/h3\u003e  \u003col\u003e \u003cli\u003eSubmitted code does not relate models to each other through methods or data.\u003c/li\u003e \u003cli\u003eModels relate to each other, but incompletely. Relationship methods are missing or have logic errors, store data on the wrong model, or are missing a single source of truth.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Data is stored on the correct models, relationship methods are defined on the right models, and the logic correctly implements the relationships. Aggregate methods using the relationships may be incomplete or have errors.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Aggregate methods work, but might not use helper methods effectively.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Aggregate methods use helper methods effectively.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eSolve problems with collections of data\u003c/h3\u003e  \u003col\u003e \u003cli\u003eDoes not attempt to solve collections problems, or has syntax errors in collection code.\u003c/li\u003e \u003cli\u003eCollections methods have runtime or logic errors. Collections methods may use the wrong iterators, have incorrect logic, or many of the collections methods are unimplemented.\u003c/li\u003e \u003cli\u003eSome collections methods work correctly, though several might be unimplemented. Code may not use the appropriate built in method for each problem, or duplicate logic instead of using helper methods.\u003c/li\u003e \u003cli\u003eAll collections methods are implemented and function correctly. Most use appropriate higher-level built-in methods. Methods may duplicate logic instead of using helper methods.\u003c/li\u003e \u003cli\u003eAll collections methods implemented and function correctly, using appropriate higher-level built-in methods. Shared logic is factored out to helper methods.\u003c/li\u003e \u003c/ol\u003e","exportId":"gc0edb7df63fe8e01211524a3fdafa76e"}]},{"id":21903,"name":"Getting Data from Remote Sources","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g7973cbfd2e8db4889b21fc3eb46349a0","items":[{"id":203861,"title":"Introduction to Getting Remote Data","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"getting-remote-data-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eApplications often need to talk to one another. When you go to apply for a job,\nsometimes you will see an option that allows you to import your profile from\nLinkedIn. What’s happening here is the site you’re using is talking to LinkedIn,\nand requesting some information. If you've ever seen a Google map inside of\nanother website or app such as Yelp--you're accessing remote data from a 3rd\nparty source.\u003c/p\u003e\n\n\u003cp\u003eThis data can be very useful. You can pick and choose what parts of an\napplication you want to use without trawling through an entire codebase. You can\nadd a lot of interesting functionality into simple apps.\u003c/p\u003e\n\n\u003cp\u003eWe'll discuss the answers to the following questions along the way:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat is an API?\u003c/li\u003e\n\u003cli\u003eHow can APIs be used?\u003c/li\u003e\n\u003cli\u003eHow do you find the API endpoint?\u003c/li\u003e\n\u003cli\u003eHow do you send a request to an API?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next couple of lessons, we'll talk about leveraging remote data in our\napplications.\u003c/p\u003e","exportId":"introduction-to-getting-remote-data"},{"id":203862,"title":"Sending GET Requests","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-getting-remote-data-sending-get-requests\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-sending-get-requests/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-sending-get-requests\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-sending-get-requests/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMake a request to a remote resource\u003c/li\u003e\n\u003cli\u003eHandle the response\u003c/li\u003e\n\u003cli\u003eParse JSON\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSimple Ruby applications are capable of powerful feats. We can use them to\nhandle all sorts of routine tasks on our computer. We can use them to represent\nreal-world relationships and systems. It's like we've been given an infinite\nmulti-tool that can help us work all kinds of data and make it useful.\u003c/p\u003e\n\n\u003cp\u003eThe limitation at this point, it seems, is really that we don't have enough data\nto play with. Luckily, we have a massive source of data available to us: the\nInternet!\u003c/p\u003e\n\n\u003cp\u003eWe typically experience the Internet through webpages in a browser, but a lot of\ninformation is accessible as pure data. If we know the tools to retrieve and\norganize that data, we'll have access to a wealth of knowledge. In this lesson,\nwe're going to introduce some of the basic ways in which we can get remote data\nusing Ruby.\u003c/p\u003e\n\n\u003ch2\u003eMaking an HTTP Request through the Internet\u003c/h2\u003e\n\n\u003cp\u003eWhen we go to a website in the browser, we type in a URL and press enter. When\nenter is pressed, the browser sends a request to that URL. The request travels\nto a server somewhere in the world that is hosting the website we want. The\nserver sends back a response. This response includes the HTML code structure of\nthe website, which your browser uses to build the page for you in front of your\neyes.\u003c/p\u003e\n\n\u003cp\u003eThis type of request is known as a HTTP GET request. We are simply retrieving\ninformation at a specified location. There are \u003ca href=\"https://www.w3schools.com/tags/ref_httpmethods.asp\"\u003eother types of requests\u003c/a\u003e for\nsending, updating and deleting information that we explore in later lessons,\nbut for now, we will focus on the GET request. Don't worry though, the GET\nrequest can... \u003cem\u003eget\u003c/em\u003e us quite far on its own!\u003c/p\u003e\n\n\u003cp\u003eIn Ruby code, we don't have the luxurious graphical user interface of a browser,\nbut we can still send GET requests in a similar fashion using built-in Ruby\nmodules and classes.\u003c/p\u003e\n\n\u003ch2\u003eSending an HTTP GET Request Using Ruby\u003c/h2\u003e\n\n\u003cp\u003eTo show how to make requests in Ruby, we'll first make an HTTP GET request in\nIRB. To start, once IRB is open, we need to require \u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html\"\u003e\u003ccode\u003eopen-uri\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'open-uri'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf loaded correctly, this should return \u003ccode\u003etrue\u003c/code\u003e. Next, we will set a URL that we\nwant to get data from. For this example, we'll get data from a GitHub repository\nthat is hosting a webpage:\n\u003ca\u003ehttps://learn-co-curriculum.github.io/json-site-example/\u003c/a\u003e. We can store this\nURL in a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eurl = \"https://learn-co-curriculum.github.io/json-site-example/\"\u003cbr\u003e#=\u0026gt; \"https://learn-co-curriculum.github.io/json-site-example/\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first thing we do is pass this \u003ccode\u003eurl\u003c/code\u003e variable into a method called \u003ccode\u003eparse\u003c/code\u003e\nthat is part of the URI module we loaded with \u003ccode\u003erequire 'open-uri'\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euri = URI.parse(url)\u003cbr\u003e#=\u0026gt; # \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\"\u003eURI\u003c/a\u003e stands for Universal Resource Identifier. URIs, in short, are\na standard way to name a resource. \u003ca href=\"https://en.wikipedia.org/wiki/URL\"\u003eURL\u003c/a\u003e stands for Universal Resource\nLocator. They are a standard way to \u003cem\u003elocate\u003c/em\u003e something. \u003cstrong\u003eURLs also happen to\nact as a standard name\u003c/strong\u003e (a web address acts as both the name of the website\n\u003cem\u003eand\u003c/em\u003e the text you need to enter to visit the website). Therefore, generally\nspeaking, all URLs are considered a subset of URIs (but not all URIs are URLs).\u003c/p\u003e\n\n\u003cp\u003eBy parsing our URL with \u003ccode\u003eURI.parse\u003c/code\u003e, we've stored the URL in a class object and\ngained access to some powerful methods. The main one we want to use is\n\u003ccode\u003eopen\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euri.open\u003cbr\u003e#=\u0026gt; #, @meta={\"server\"=\u0026gt;\"GitHub.com\", \"content-type\"=\u0026gt;\"text/html; charset=utf-8\", \"last-modified\"=\u0026gt;\"Thu, 15 Aug 2019 23:05:32 GMT\", \"etag\"=\u0026gt;\"W/\\\"5d55e53c-284\\\"\", \"access-control-allow-origin\"=\u0026gt;\"*\", \"expires\"=\u0026gt;\"Thu, 22 Aug 2019 19:42:27 GMT\", \"cache-control\"=\u0026gt;\"max-age=600\", \"x-proxy-cache\"=\u0026gt;\"MISS\", \"x-github-request-id\"=\u0026gt;\"D49E:101C:257158:30F953:5D5EEDC6\", \"content-length\"=\u0026gt;\"341\", \"accept-ranges\"=\u0026gt;\"bytes\", \"date\"=\u0026gt;\"Thu, 22 Aug 2019 19:38:38 GMT\", \"via\"=\u0026gt;\"1.1 varnish\", \"age\"=\u0026gt;\"214\", \"connection\"=\u0026gt;\"keep-alive\", \"x-served-by\"=\u0026gt;\"cache-ewr18140-EWR\", \"x-cache\"=\u0026gt;\"HIT\", \"x-cache-hits\"=\u0026gt;\"1\", \"x-timer\"=\u0026gt;\"S1566502719.880905,VS0,VE1\", \"vary\"=\u0026gt;\"Accept-Encoding\", \"x-fastly-request-id\"=\u0026gt;\"bf2550e15c1927f0d65dc31f98747ad56e51d4db\"}, @metas={\"server\"=\u0026gt;[\"GitHub.com\"], \"content-type\"=\u0026gt;[\"text/html; charset=utf-8\"], \"last-modified\"=\u0026gt;[\"Thu, 15 Aug 2019 23:05:32 GMT\"], \"etag\"=\u0026gt;[\"W/\\\"5d55e53c-284\\\"\"], \"access-control-allow-origin\"=\u0026gt;[\"*\"], \"expires\"=\u0026gt;[\"Thu, 22 Aug 2019 19:42:27 GMT\"], \"cache-control\"=\u0026gt;[\"max-age=600\"], \"x-proxy-cache\"=\u0026gt;[\"MISS\"], \"x-github-request-id\"=\u0026gt;[\"D49E:101C:257158:30F953:5D5EEDC6\"], \"content-length\"=\u0026gt;[\"341\"], \"accept-ranges\"=\u0026gt;[\"bytes\"], \"date\"=\u0026gt;[\"Thu, 22 Aug 2019 19:38:38 GMT\"], \"via\"=\u0026gt;[\"1.1 varnish\"], \"age\"=\u0026gt;[\"214\"], \"connection\"=\u0026gt;[\"keep-alive\"], \"x-served-by\"=\u0026gt;[\"cache-ewr18140-EWR\"], \"x-cache\"=\u0026gt;[\"HIT\"], \"x-cache-hits\"=\u0026gt;[\"1\"], \"x-timer\"=\u0026gt;[\"S1566502719.880905,VS0,VE1\"], \"vary\"=\u0026gt;[\"Accept-Encoding\"], \"x-fastly-request-id\"=\u0026gt;[\"bf2550e15c1927f0d65dc31f98747ad56e51d4db\"]}, @status=[\"200\", \"OK\"]\u0026gt; \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we type \u003ccode\u003euri.open\u003c/code\u003e in IRB, we get back an object \u003cem\u003efull of data!\u003c/em\u003e As it\nturns out, we've actually \u003cem\u003ejust made a GET request!\u003c/em\u003e The returned result, in this\ncase, is a \u003ca href=\"https://ruby-doc.org/stdlib-2.5.1/libdoc/stringio/rdoc/StringIO.html\"\u003e\u003ccode\u003eStringIO\u003c/code\u003e\u003c/a\u003e object, \u003cem\u003ewhich is not a \u003ccode\u003eString\u003c/code\u003e\u003c/em\u003e, but can be converted\ninto one using a built-in \u003ccode\u003estring\u003c/code\u003e method. So we could write the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequest_result = uri.open\u003cbr\u003erequest_result.string\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr just chain the methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euri.open.string\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe result? HTML as a String! \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"\\n\\n\\n  \\n  \\n  \\n  JSON Example Site\\n\\n\\n  \\n\\n  \u003ch3\u003eEndpoints available to visit:\u003c/h3\u003e\\n  \u003cul\u003e\\n    \u003cli\u003e\u003ca\u003eendpoints/locations.json\u003c/a\u003e\u003c/li\u003e\\n    \u003cli\u003e\u003ca\u003eendpoints/people.json\u003c/a\u003e\u003c/li\u003e\\n  \u003c/ul\u003e\\n\\n\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe requested and received a \u003cem\u003ewebpage\u003c/em\u003e. While it isn't rendered nicely in the way\na browser would display this, it is a great start! And just to review, we did\nthis using only four lines of Ruby:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'open-uri'\u003cbr\u003eurl = \"https://learn-co-curriculum.github.io/json-site-example/\"\u003cbr\u003euri = URI.parse(url)\u003cbr\u003euri.open.string\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is super cool, but working with \u003ccode\u003eStringIO\u003c/code\u003e can be a little limiting. To\nstick with conventions, we're going to look at a slightly different approach\nnext.\u003c/p\u003e\n\n\u003ch2\u003eReading the Body of a Response\u003c/h2\u003e\n\n\u003cp\u003eRather than use the \u003ccode\u003eopen\u003c/code\u003e method, we're going to bring in another built-in Ruby\nclass, \u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/net/http/rdoc/Net/HTTP.html\"\u003e\u003ccode\u003eNET::HTTP\u003c/code\u003e\u003c/a\u003e. \u003ccode\u003eURI\u003c/code\u003e (also known as \u003ccode\u003eOpenURI\u003c/code\u003e) is actually built using\n\u003ccode\u003eNET::HTTP\u003c/code\u003e. \u003ccode\u003eNET::HTTP\u003c/code\u003e will allow us to get back an object closer to the structure\nof the actual HTTP response being sent.\u003c/p\u003e\n\n\u003cp\u003eStarting from a new IRB session, we'll first require \u003ccode\u003eopen-uri\u003c/code\u003e as before, but\nwe will also need to add a second require line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'open-uri'\u003cbr\u003erequire 'net/http'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we'll keep the URL definition and URI parsing the same:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eurl = \"https://learn-co-curriculum.github.io/json-site-example/\"\u003cbr\u003euri = URI.parse(url)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut instead of \u003ccode\u003euri.open\u003c/code\u003e at the end, we'll enter the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eresponse = Net::HTTP.get_response(uri)\u003cbr\u003e#=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere again we've sent a GET request, only this time, the return value\nisn't a \u003ccode\u003eStringIO\u003c/code\u003e object, but a \u003ccode\u003eNet::HTTPOK\u003c/code\u003e object. This object\nhas a method, \u003ccode\u003ebody\u003c/code\u003e, that should produce a familiar sight when used:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eresponse.body\u003cbr\u003e#=\u0026gt; \"\\n\\n\\n  \\n  \\n  \\n  JSON Example Site\\n\\n\\n  \\n\\n  \u003ch3\u003eEndpoints available to visit:\u003c/h3\u003e\\n  \u003cul\u003e\\n    \u003cli\u003e\u003ca\u003eendpoints/locations.json\u003c/a\u003e\u003c/li\u003e\\n    \u003cli\u003e\u003ca\u003eendpoints/people.json\u003c/a\u003e\u003c/li\u003e\\n  \u003c/ul\u003e\\n\\n\\n\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, we've seen two ways to get the HTML code from a webpage. Although this is cool,\nin its current state, this isn't very useful information. There are actually\ntools designed specifically to take this raw HTML and turn it into organized\ndata for us in a process known as scraping, but we don't need to learn that just\nyet. Plenty of data is already organized and made available to us separate from\nHTML code and we can retrieve it the same way we send a GET request to a website.\u003c/p\u003e\n\n\u003ch2\u003eDefine JSON\u003c/h2\u003e\n\n\u003cp\u003eJSON stands for JavaScript Object Notation and is a standard way store and\ntransfer nested data over the internet. The keyword here is \u003cstrong\u003eNotation\u003c/strong\u003e. Data\nstored in JSON format is actually just data stored \u003cem\u003eas a string\u003c/em\u003e, but structured\nin a way that is easily converted into usable nested data. Ruby has a built-in\n\u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/json/rdoc/JSON.html\"\u003e\u003ccode\u003eJSON\u003c/code\u003e\u003c/a\u003e module that includes a \u003ccode\u003eparse\u003c/code\u003e method to take JSON formatted data and\nturn it into an array or hash.\u003c/p\u003e\n\n\u003ch2\u003eRetrieving JSON Data\u003c/h2\u003e\n\n\u003cp\u003eJust as with the website, we write in the \u003cem\u003eUniversal Resource Locator\u003c/em\u003e, convert\nit to a \u003ccode\u003eURI\u003c/code\u003e object, then send a GET request. Previously, we sent requests to\n\u003ca\u003ehttps://learn-co-curriculum.github.io/json-site-example/\u003c/a\u003e. The server, in\nthis case, had an HTML file to serve in response. If we request a slightly\ndifferent URL, we'll get a different response. This site has some example data\nstored as JSON on it. By changing out the request to\n\u003ca href=\"https://learn-co-curriculum.github.io/json-site-example/endpoints/locations.json\"\u003ehttps://learn-co-curriculum.github.io/json-site-example/endpoints/locations.json\u003c/a\u003e,\ninstead of responding with HTML, this time, the server will send the JSON data.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'open-uri'\u003cbr\u003erequire 'net/http'\u003cbr\u003eurl = \"https://learn-co-curriculum.github.io/json-site-example/endpoints/locations.json\"\u003cbr\u003euri = URI.parse(url)\u003cbr\u003eresponse = Net::HTTP.get_response(uri)\u003cbr\u003eresponse.body\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning the above in in a fresh IRB session, you should see that the \u003ccode\u003eresponse.body\u003c/code\u003e now\nreturns a string of data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"[\\n  {\\n    \\\"name\\\": \\\"Flatiron School Manhattan\\\",\\n    \\\"address\\\": \\\"11 Broadway, New York, NY 10004\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"40.704521\\\",\\n      \\\"longitude\\\": \\\"-74.012833\\\"\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"Flatiron School Austin\\\",\\n    \\\"address\\\": \\\"316 W 12th St, Austin, TX 78701\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"30.275080\\\",\\n      \\\"longitude\\\": \\\"-97.743700\\\"\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"Flatiron School Denver\\\",\\n    \\\"address\\\": \\\"3601 Walnut St 5th Floor, Denver, CO 80205\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"39.743510\\\",\\n      \\\"longitude\\\": \\\"-105.011360\\\"\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"Flatiron School Seattle\\\",\\n    \\\"address\\\": \\\"1411 4th Ave 13th Floor, Seattle, WA 98101\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"47.684879\\\",\\n      \\\"longitude\\\": \\\"-122.201363\\\"\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"Flatiron School London\\\",\\n    \\\"address\\\": \\\"131 Finsbury Pavement, Finsbury, London EC2A 1NT, UK\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"51.520480\\\",\\n      \\\"longitude\\\": \\\"-0.087190\\\"\\n    }\\n  }\\n]\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is JSON! It isn't very friendly to use yet, so we'll want to convert it. First, we'll need\nto require the \u003ccode\u003ejson\u003c/code\u003e module:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'json'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen we pass in \u003ccode\u003eresponse.body\u003c/code\u003e to the JSON parser:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eJSON.parse(response.body)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe result is an array containing five hashes, each with some data about a\nFlatiron School campus:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[{\"name\"=\u0026gt;\"Flatiron School Manhattan\", \"address\"=\u0026gt;\"11 Broadway, New York, NY 10004\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"40.704521\", \"longitude\"=\u0026gt;\"-74.012833\"}}, {\"name\"=\u0026gt;\"Flatiron School Austin\", \"address\"=\u0026gt;\"316 W 12th St, Austin, TX 78701\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"30.275080\", \"longitude\"=\u0026gt;\"-97.743700\"}}, {\"name\"=\u0026gt;\"Flatiron School Denver\", \"address\"=\u0026gt;\"3601 Walnut St 5th Floor, Denver, CO 80205\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"39.743510\", \"longitude\"=\u0026gt;\"-105.011360\"}}, {\"name\"=\u0026gt;\"Flatiron School Seattle\", \"address\"=\u0026gt;\"1411 4th Ave 13th Floor, Seattle, WA 98101\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"47.684879\", \"longitude\"=\u0026gt;\"-122.201363\"}}, {\"name\"=\u0026gt;\"Flatiron School London\", \"address\"=\u0026gt;\"131 Finsbury Pavement, Finsbury, London EC2A 1NT, UK\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"51.520480\", \"longitude\"=\u0026gt;\"-0.087190\"}}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: If you'd like a better view of this data, require \u003ccode\u003eawesome_print\u003c/code\u003e and\nthen try typing \u003ccode\u003eap JSON.parse(response.body)\u003c/code\u003e to see a better output.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIf you've been following along, you've made three HTTP GET requests! We can make\nthese requests using a URL and some Ruby tools. Some data is readily available as JSON,\nwhich we can retrieve and convert into Ruby data structures.\u003c/p\u003e\n\n\u003cp\u003eHaving these tools unlocks access to \u003cem\u003ea lot of data\u003c/em\u003e. Being able to communicate with\nremote resources is also the cornerstone of web development!\u003c/p\u003e","exportId":"sending-get-requests"},{"id":203863,"title":"Working with APIs","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"getting-remote-data-working-with-apis\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-working-with-apis/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-working-with-apis\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-working-with-apis/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand why programmers need to work with APIs\u003c/li\u003e\n\u003cli\u003eLearn some of the basic ways in which programmers work with APIs\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eDefine API\u003c/h2\u003e\n\n\u003cp\u003eAn API, or application programming interface, is a manner in which companies and\norganizations, like Twitter or the New York City government, expose their data\nand/or functionality to the public (i.e. talented programmers like yourself) for\nuse. APIs allow us to add important data and functionality to the applications\nwe build. Here's just a few examples of some of the cool things you can do by\nusing APIs:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate an app that allows users to sign up/sign in via\nFacebook/Google/Twitter/Github/etc.\u003c/li\u003e\n\u003cli\u003eUse the NYC Open Data API to get and map data––everything from Health\nDepartment restaurant ratings to public park locations and hours to New York\nCity Public Housing repair issues to noise complaints to public school\nconstruction, you name it!\u003c/li\u003e\n\u003cli\u003eUse the Yelp API to find and deliver popular local spots to your users.\u003c/li\u003e\n\u003cli\u003eUse the Weather Underground API to give your users up-to-date weather alerts.\u003c/li\u003e\n\u003cli\u003eUse the Ticket Master API to inform your users if their favorite musician has\nan upcoming show.\u003c/li\u003e\n\u003cli\u003eSo much more!\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is just a small sample of what working with APIs allows us to do as\ndevelopers. Throughout the course of your programming life, you'll likely be\nexposed to working with many different APIs. You'll even learn how to build your\nown API later on in this course. This reading seeks to introduce the topic,\nemphasize some of the benefits of getting comfortable working with APIs and\noffer a brief intro into some of the common methods of working with APIs.\u003c/p\u003e\n\n\u003ch2\u003eHow to Work with APIs\u003c/h2\u003e\n\n\u003cp\u003eDifferent APIs expose their data and functionalities in different ways. However,\nthere are commonalities among them and there are common approaches that we'll\ndiscuss here. Generally speaking, there are two main uses for APIs––getting data\nand adding functionality (i.e. signing in with Facebook or posting to\nInstagram). We'll be discussing the \"getting data\" part of working with APIs\nhere.\u003c/p\u003e\n\n\u003cp\u003eMany APIs are built on what is referred to as a REST-ful framework. That means\nthat the \"endpoints\", or URLs to which we can send a request for data, follow\ncertain conventions. These URLs should allow you to request information, send\ninformation, update information and delete information. Let's focus on the\n\"getting information\" request.\u003c/p\u003e\n\n\u003ch3\u003eRetrieving Data from an API\u003c/h3\u003e\n\n\u003cp\u003eFor this walk-through, we'll be working with the NYC Open Data API. Let's say\nwe've been hired by the city to create an app that will help parents sign their\nchildren up for after-school activities. To connect parents to after-school\nclubs around the city, we need a data set of such clubs. Luckily for us, the\ncity has collected that information and allows the public to access it via their\nOpen Data API. Let's check out the documentation for their\n\u003ca href=\"https://dev.socrata.com/foundry/data.cityofnewyork.us/szgz-awuh\"\u003eafter-school club data set\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eFinding the API Endpoint\u003c/h4\u003e\n\n\u003cp\u003eTake a few minutes and familiarize yourself with resource linked to above.\nLearning how to read API documentation is an important skill. It's okay if you\ndon't understand everything in the above document. For now, just look it over\nbriefly.\u003c/p\u003e\n\n\u003cp\u003eAs you read through, you'll see that the documentation lists the API endpoint.\n\u003cstrong\u003eEndpoint\u003c/strong\u003e refers to the URL we can submit a request to and that will return\nto us the desired data.\u003c/p\u003e\n\n\u003cp\u003eOpen up a new tab in your browser and paste in the following URL:\n\u003ccode\u003ehttp://data.cityofnewyork.us/resource/uvks-tn5n.json\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe page brings you to is the desired set of data! Notice that the data is laid\nout in what looks like a big array of nested hashes. This is actually a\n\u003ca href=\"http://json.org/\"\u003eJSON\u003c/a\u003e object, which behaves just like a Ruby hash. Working\nwith the JSON data returned to you by requests to an API is one of the reasons\nwhy we spent so much time in previous lessons learning how to manipulate and\noperate on nested hashes.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Once you find the right URL for retrieving your data, test it out\ndirectly in your browser \u003cem\u003ebefore\u003c/em\u003e you try to request the data from inside your\nprogram. If pasting the URL into your browser brings you to the right data, you\ncan move on. This cuts down on debugging time. This way, once you try to request\nthe data from within your program, if it doesn't work, at least you'll know it's\nsomething wrong with your code, as opposed to something wrong with the API.\u003c/p\u003e\n\n\u003ch4\u003eSending a Request to an API from a Program or Application\u003c/h4\u003e\n\n\u003cp\u003eNow that we understand what an API is and have even dealt with a URL that takes\nus to a real API endpoint, let's use that same URL to send a request for data\nfrom a Ruby program. Fork and clone this repo locally.\u003c/p\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/nyc_api.rb\u003c/code\u003e. Let's take a look at the code here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'net/http'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'json'\u003cbr\u003e\u003cbr\u003eclass GetPrograms\u003cbr\u003e\u003cbr\u003e  URL = \"http://data.cityofnewyork.us/resource/uvks-tn5n.json\"\u003cbr\u003e\u003cbr\u003e  def get_programs\u003cbr\u003e    uri = URI.parse(URL)\u003cbr\u003e    response = Net::HTTP.get_response(uri)\u003cbr\u003e    response.body\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprograms = GetPrograms.new.get_programs\u003cbr\u003eputs programs\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe stored our API endpoint URL in a constant at the top of our class. Then, we\nhave a \u003ccode\u003eget_programs\u003c/code\u003e method that uses the \u003ccode\u003eNET::HTTP\u003c/code\u003e library to send an HTTP\nrequest from our program. \u003ccode\u003eNET::HTTP\u003c/code\u003e is a Ruby library that allows your program\nor application to send HTTP requests. We require it at the top of our file with\nthe \u003ccode\u003erequire\u003c/code\u003e statement.  We also require the URI library which helps Ruby to\nhandle URIs.\u003c/p\u003e\n\n\u003cp\u003eBoth \u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/net/http/rdoc/Net/HTTP.html\"\u003eNET::HTTP\u003c/a\u003e and \u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html\"\u003eURI\u003c/a\u003e are classes built into Ruby.\nCheck out the links at the bottom of this lesson to read more about their usage.\nDon't worry too much about NET::HTTP and URI right now, though. Just focus on\ngetting a basic understanding of and exposure to the tools we can use inside our\napplications to request data from an API.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eA Note on Requirements:\u003c/strong\u003e We can use \u003ccode\u003erequire\u003c/code\u003e statements to include libraries\nof code in our own programs. We can require libraries like \u003ccode\u003eNET::HTTP\u003c/code\u003e, or we\ncan require gems, like Pry.\u003c/p\u003e\n\n\u003cp\u003eNow, in your terminal in the directory of this lab, run \u003ccode\u003eruby lib/nyc_api.rb\u003c/code\u003e. It\nshould output the JSON response from the NYC Open Data API!\u003c/p\u003e\n\n\u003ch3\u003eWorking with API Data\u003c/h3\u003e\n\n\u003cp\u003eNow that we have all of our data back from the API, we need to be able to\ncollect and present it within the context of our app. Since we are basically\npros at manipulating nested hashes, we shouldn't have too much trouble. Let's\nwrite a method, \u003ccode\u003eprogram_school\u003c/code\u003e, that just returns a list of the schools or\norganizations that are running our after school programs.\u003c/p\u003e\n\n\u003cp\u003eCopy and paste the following code into our GetPrograms class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef program_school\u003cbr\u003e# we use the JSON library to parse the API response into nicely formatted JSON\u003cbr\u003e  programs = JSON.parse(self.get_programs)\u003cbr\u003e  programs.collect do |program|\u003cbr\u003e    program[\"agency\"]  \u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt the bottom of the file, comment out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprograms = GetPrograms.new.get_programs\u003cbr\u003eputs programs\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's \u003ccode\u003eputs\u003c/code\u003e out a unique list of the schools. Paste in the following two lines\nright underneath where you commented out the above two lines:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprograms = GetPrograms.new\u003cbr\u003eputs programs.program_school.uniq\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, run the program with \u003ccode\u003eruby lib/nyc_api.rb\u003c/code\u003e in your terminal. You should\nsee something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRockaway Artist Alliance, Inc.\u003cbr\u003eCAMBA  \u003cbr\u003eSports and Arts In Schools Foundation, Inc.\u003cbr\u003eNew York Junior Tennis League\u003cbr\u003eArthur Ashe Institute for Urban Health, Inc\u003cbr\u003eCitizens Advice Bureau, Inc.\u003cbr\u003eUnited Activities Unlimited, Inc.\u003cbr\u003eKips Bay Boys \u0026amp; Girls Club\u003cbr\u003eNational Society For Hebrew Day Schools\u003cbr\u003eSchool Settlement\u003cbr\u003eThe Door - A Center of Alternatives\u003cbr\u003eCommunity Counseling and Mediation\u003cbr\u003eDream Yard Project, Inc.\u003cbr\u003eThe Childrens Aid Society\u003cbr\u003eJust Us, Inc.\u003cbr\u003eBushwick Community Action Association, Inc.\u003cbr\u003eGreater Ridgewood Youth Council, Inc.\u003cbr\u003eBrooklyn Bureau of Community Services\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo far we've used the NET::HTTP and URI to send a request for data to an API\nendpoint, a URL. We've operated on the data that was returned to us, making sure\nit was formatted properly as JSON and iterating over that JSON to retrieve the\nname of the school hosting each after-school program. That was a lot of work! I\nwonder if there is an easier way to work with popular APIs...\u003c/p\u003e\n\n\u003ch3\u003eUsing Gems to Work with APIs\u003c/h3\u003e\n\n\u003cp\u003eMany popular APIs have wrappers, i.e. gems that are code libraries that do a lot\nof the heavy lifting for you. In fact, we'll use a gem to interact with the\nTwitter API in the next lab.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo recap: APIs generally either provide a user with data or added functionality.\nWe can use APIs that serve data to get information for our own applications and\nprojects. To get this data, we need to send a request to the URL of the API and\nknow how to work with the response we receive. Many APIs serve data in JSON\nformat, which needs to be parsed before we can use it. Once parsed, it becomes\na hash we can work with and extract data from.\u003c/p\u003e\n\n\u003cp\u003eIn our example, we were able to retrieve remote information from an API using\nthe built-in Ruby classes \u003ccode\u003eNET::HTTP\u003c/code\u003e and \u003ccode\u003eURI\u003c/code\u003e. By putting this implementation\ninside a class, we can develop highly reuseable code that lets us access all\nsorts of information remotely.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eGetPrograms\u003c/code\u003e class used a hard-coded URL, stored as a class constant, and\nincluded an instance method called \u003ccode\u003eget_programs\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eURL = \"http://data.cityofnewyork.us/resource/uvks-tn5n.json\"\u003cbr\u003e\u003cbr\u003edef get_programs\u003cbr\u003e  uri = URI.parse(URL)\u003cbr\u003e  response = Net::HTTP.get_response(uri)\u003cbr\u003e  response.body\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we could easily adapt this code to be flexible and accept \u003cem\u003eany\u003c/em\u003e URL we pass\nin using an \u003ccode\u003einitialize\u003c/code\u003e method and an instance variable. The \u003ccode\u003eget_programs\u003c/code\u003e\nmethod is really just getting the response body from the requested URL, so we\ncould name this \u003ccode\u003eget_response_body\u003c/code\u003e to be more accurate. We could replace the\ncustom \u003ccode\u003eprogram_school\u003c/code\u003e method with a general \u003ccode\u003eparse_json\u003c/code\u003e method, as well.\nInstead of a specific class, we would instead have a class that retrieves\nJSON from any provided URL!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/net/http/rdoc/Net/HTTP.html\"\u003eNET::HTTP\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html\"\u003eOpen URI\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g6e254d5ee67571cf52d56e56e379f093"},{"id":203864,"title":"Getting Remote Data Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-getting-remote-data-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice sending GET requests using Ruby\u003c/li\u003e\n\u003cli\u003eBuild a reusable class for sending requests and handling responses\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIt is time to practice building out your own class for retrieving remote data.\nIn this lab, you are tasked with building a generic \u003ccode\u003eGetRequester\u003c/code\u003e class. This\nclass will be able to take in a URL on initialization and send an HTTP GET\nrequest on command. You will also need to build a method for dealing with\nrequests that return JSON.\u003c/p\u003e\n\n\u003cp\u003eWhen complete, you will have a simple, but versatile class for getting\ninformation from all kinds of sources over the internet.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eAll work should be completed in \u003ccode\u003elib/get_requester.rb\u003c/code\u003e. Use the previous\ncode-along on getting data from APIs as a reference when building out your\nclass.\u003c/p\u003e\n\n\u003cp\u003eStart by creating a \u003ccode\u003eGetRequester\u003c/code\u003e class. This class should be able to\ninitialize with a string URL.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eGetRequester\u003c/code\u003e class should have a \u003ccode\u003eget_response_body\u003c/code\u003e method that sends a\nGET request to the URL passed in on initialization. This method should return\nthe \u003cem\u003ebody\u003c/em\u003e of the response.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eGetRequester\u003c/code\u003e class should have a \u003ccode\u003eparse_json\u003c/code\u003e method should use\n\u003ccode\u003eget_response_body\u003c/code\u003e to send a request, then return a Ruby Array or Hash made up\nof data converted from the response of that request.\u003c/p\u003e\n\n\u003cp\u003eThe tests in this lab will use your code to send a request for some JSON data,\nlocated at\n\u003ca href=\"https://learn-co-curriculum.github.io/json-site-example/endpoints/people.json\"\u003ehttps://learn-co-curriculum.github.io/json-site-example/endpoints/people.json\u003c/a\u003e.\nRead the test error messages for additional as you work for additional\ninformation. Don't forget to require the necessary Ruby modules and classes!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eOnce you've successfully passed the tests, from this lesson's directory, you\nshould be able to open IRB, use \u003ccode\u003erequire_relative\u003c/code\u003e to load\n\u003ccode\u003elib/get_requester.rb\u003c/code\u003e, and send out some requests!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eget_requester = GetRequester.new('https://learn-co-curriculum.github.io/json-site-example/endpoints/people.json')\u003cbr\u003eget_requester.parse_json\u003cbr\u003e#=\u0026gt; [{\"name\"=\u0026gt;\"Daniel\", \"occupation\"=\u0026gt;\"LG Fridge Salesman\"}, {\"name\"=\u0026gt;\"Joe\", \"occupation\"=\u0026gt;\"WiFi Fixer\"}, {\"name\"=\u0026gt;\"Avi\", \"occupation\"=\u0026gt;\"DJ\"}, {\"name\"=\u0026gt;\"Howard\", \"occupation\"=\u0026gt;\"Mountain Legend\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis class won't work for all cases but is a good starting place to get us off\nthe ground. We can now augment our applications with data from the internet!\nCombined with our knowledge of Ruby, we have all the tools we need to start\nbuilding smarter Ruby applications populated with real data.\u003c/p\u003e","exportId":"ga858802e95f261f1bf5f5ee9ee4a5abf"},{"id":203865,"title":"Getting Remote Data Conclusion","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"getting-remote-data-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've established how you can build classes and object that perform various\nfunctions in an application, however, sometimes we want to incorporate remote\ndata into our applications. We've seen demonstrated that many applications give\nus access to data via APIs.\u003c/p\u003e\n\n\u003cp\u003eAPIs give us selective access to which parts of the that codebase the developers\nwant to expose. This can make it easier to work with. We should now understand\nhow APIs can be used, how to find API endpoint, and how to send a request for\ndata to an API.\u003c/p\u003e\n\n\u003cp\u003eWith the ability to leverage remote data in our applications, we can increase\nthe functionality of our applications or even save time!\u003c/p\u003e\n\n\u003ch3\u003eFurther reading\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.scrapingbee.com/blog/web-scraping-ruby/\"\u003eWeb Scraping with Ruby\u003c/a\u003e\u003c/strong\u003e: Create a job tracker with this code-along tutorial, which introduces you to industry-standard tools such as Selenium + headless Chrome.\u003c/p\u003e","exportId":"getting-remote-data-conclusion"}]},{"id":21904,"name":"Bonus: Scraping","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g0c478b90d07e11a3ae8150a4961d8533","items":[{"id":203866,"title":"Scraping Code-Along","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"scraping-flatiron-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/scraping-flatiron-code-along/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/scraping-flatiron-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/scraping-flatiron-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eScrape a web page's HTML using Nokogiri.\u003c/li\u003e\n\u003cli\u003eUse scraped data to give attributes to Ruby objects.\u003c/li\u003e\n\u003cli\u003eWrite an object-oriented Scraper class.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eOne of the most common use-cases for web scraping involves you, the programmer,\nscraping data that you will then use to instantiate your own Ruby objects. In\nthis lab, we'll be scraping a static site that displays the course offerings of\nthe Flatiron School. We'll be using the scraped data to create our own \u003ccode\u003eCourse\u003c/code\u003e\nobjects. Each instance of the \u003ccode\u003eCourse\u003c/code\u003e class will have a series of attributes.\nThe values of each of these attributes will be scraped from the website.\u003c/p\u003e\n\n\u003cp\u003eWe'll be creating two classes, \u003ccode\u003eScraper\u003c/code\u003e and \u003ccode\u003eCourse\u003c/code\u003e. The \u003ccode\u003eScraper\u003c/code\u003e class will\nbe responsible for using Nokogiri to scrape the relevant data. It will also be\nresponsible for taking that data and using it to instantiate instances of the\n\u003ccode\u003eCourse\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch2\u003eCode Along I: The \u003ccode\u003eCourse\u003c/code\u003e Class\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eFork and clone this lab to get started!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eBefore we build our \u003ccode\u003eScraper\u003c/code\u003e, we'll build the \u003ccode\u003eCourse\u003c/code\u003e class. We know that the\npurpose of our scraper is to get data to assign to the attributes of \u003ccode\u003eCourse\u003c/code\u003e\nclass instances.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the site we'll be scraping in order to get a sense of what\nattributes we should give our \u003ccode\u003eCourse\u003c/code\u003e class instances. Go ahead and open up\n\u003ca href=\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"\u003ehttp://learn-co-curriculum.github.io/site-for-scraping/courses\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eScroll down until you are looking at the list of course offerings:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%202.00.13%20PM.png\" alt=\"course list\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can see that each course has a title, a schedule (either Part- or Full-Time)\nand a description. This seems like a great place to start in terms of defining\nour own \u003ccode\u003eCourse\u003c/code\u003e class objects.\u003c/p\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/course.rb\u003c/code\u003e and define your class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Course\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, let's run \u003cem\u003ejust\u003c/em\u003e the \u003ccode\u003eCourse\u003c/code\u003e specs by typing \u003ccode\u003erspec spec/course_spec.rb\u003c/code\u003e\nin the terminal. You should see the following test output:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%202.53.11%20PM.png\" alt=\"spec error output\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLooks like we have some methods to define. Let's start with the instance method\ntests. The test output tells us that we need setters and getters for \u003ccode\u003etitle\u003c/code\u003e,\n\u003ccode\u003eschedule\u003c/code\u003e and \u003ccode\u003edescription\u003c/code\u003e. Let's make them \u003ccode\u003eattr_accessors\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Course\u003cbr\u003e  attr_accessor :title, :schedule, :description\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo ahead and run the test suite again. Now we should be passing all of our\ninstance method tests! But not our class method tests...\u003c/p\u003e\n\n\u003cp\u003eLet's write the \u003ccode\u003e.all\u003c/code\u003e and \u003ccode\u003e.reset_all\u003c/code\u003e class methods. You should be familiar\nwith the usage of the \u003ccode\u003e.all\u003c/code\u003e class method at this point — remember that\nevery time an instance of the class is initialized, we should push it into the\n\u003ccode\u003e@@all\u003c/code\u003e class variable. Get these tests passing with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Course\u003cbr\u003e\u003cbr\u003e  attr_accessor :title, :schedule, :description\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.reset_all\u003cbr\u003e    @@all.clear\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the \u003ccode\u003eCourse\u003c/code\u003e specs again and we should be passing all the tests. We're ready\nto write our \u003ccode\u003eScraper\u003c/code\u003e!\u003c/p\u003e\n\n\u003ch2\u003eCode Along II: The \u003ccode\u003eScraper\u003c/code\u003e Class\u003c/h2\u003e\n\n\u003cp\u003eStart by running the \u003ccode\u003eScraper\u003c/code\u003e specs with the \u003ccode\u003erspec spec/scraper_spec.rb\u003c/code\u003e line\nin your terminal. You should see failing tests that describe several methods.\nLet's run through the desired behavior of each method:\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003e#get_page\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#get_page\u003c/code\u003e instance method will be responsible for using Nokogiri and\n\u003ccode\u003eopen-uri\u003c/code\u003e to grab the entire HTML document from the web page.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003e#get_courses\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#get_courses\u003c/code\u003e instance method will be responsible for using a CSS selector\nto grab all of the HTML elements that contain a course. In other words, the\nreturn value of this method should be a collection of Nokogiri XML elements,\neach of which describes a course offering. We're going to have to examine the\npage with the element inspector to find the CSS selector that contains the\ncourses.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003e#make_courses\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#make_courses\u003c/code\u003e method will be responsible for actually instantiating\n\u003ccode\u003eCourse\u003c/code\u003e objects and giving each course object the correct \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003eschedule\u003c/code\u003e\nand \u003ccode\u003edescription\u003c/code\u003e attribute that we scraped from the page.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003e#print_courses\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#print_courses\u003c/code\u003e method we made for you! It calls on \u003ccode\u003e.make_courses\u003c/code\u003e and\nthen iterates over all of the courses that get created to \u003ccode\u003eputs\u003c/code\u003e out a list of\ncourse offerings. We gave you this freebie so that we can easily see how cool it\nis to scrape data and make real live Ruby objects with it.\u003c/p\u003e\n\n\u003cp\u003eNow that we have a basic concept of the methods we're expected to build, we're\ngoing to ignore them (surprise!). We've already discussed how tricky it is to\nscrape data from a web page. It is a very precise process and it takes \u003cem\u003ea lot\u003c/em\u003e\nof playing around in Pry to find the right CSS selectors for the desired data.\nSo, we're going to start by building our \u003ccode\u003e#get_page\u003c/code\u003e method. \u003cstrong\u003eAs soon as we get\nthe HTML document using Nokogiri, we will drop into our program using Pry and\nplay around with CSS selectors until we find what we're looking for\u003c/strong\u003e. Once we\nhave working code, we'll worry about organizing the appropriate code into the\nabove-described methods.\u003c/p\u003e\n\n\u003ch3\u003eGetting the HTML Doc and Finding Our Selectors\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/scraper.rb\u003c/code\u003e and define the \u003ccode\u003e.get_page\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e      # more code coming soon!\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we are already requiring Nokogiri, open-uri and Pry at the top of\nthe file. We are ready to use Nokogiri and open-uri to get our HTML. Add the\nfollowing line to your \u003ccode\u003e.get_page\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc = Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we'll place a \u003ccode\u003ebinding.pry\u003c/code\u003e on the next line. At the bottom of the file,\noutside of the class definition, we'll call \u003ccode\u003eScraper.new.get_page\u003c/code\u003e. That way,\nwe'll hit our binding and be able to play around with the HTML document in the\nterminal in order to find the CSS selectors we're looking for:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e      doc = Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003cbr\u003e\u003cbr\u003e      binding.pry\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eScraper.new.get_page\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce your file looks like the code above, run the file with \u003ccode\u003eruby\nlib/scraper.rb\u003c/code\u003e in your terminal. Once you hit your binding, type the \u003ccode\u003edoc\u003c/code\u003e\nvariable into the terminal and you should see the HTML document, retrieved for\nus by Nokogiri and open-uri. You should see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%204.25.06%20PM.png\" alt=\"retrieved doc\"\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote: When you hit the pry, you may end up with a prompt that looks like this \u003ccode\u003e:\u003c/code\u003e. That just means there's a lot of text and you can scroll up and down using the arrow keys. If you need to escape this prompt so you can type in \u003ccode\u003edoc\u003c/code\u003e, then you simply have to press \u003ccode\u003eq\u003c/code\u003e or the \u003ccode\u003eesc\u003c/code\u003e key.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIf you scroll down in your terminal, you should see more and more of the HTML\ndocument.\u003c/p\u003e\n\n\u003cp\u003eOkay, we're ready to find the CSS selector that will grab the course offering\nfrom the HTML document. How should we go about doing this? Should we guess?\nShould we manually read the entire HTML document, looking for the HTML elements\nthat contain the course offerings? Nope. We're going to revisit the Flatiron\nwebsite in the browser and use the developer tools of our browser to inspect the\nelements.\u003c/p\u003e\n\n\u003cp\u003eClick on \u003ca href=\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"\u003ethis link\u003c/a\u003e and once again scroll down to the section of the page\nthat lists the course offerings. Right click on any course offering and select\n\"inspect element\". You should see something like this in your browser:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%204.38.49%20PM.png\" alt=\"inspect element browser console\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's take a closer look at the highlighted line in the element inspector:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003carticle class=\"post same-height-left\" style=\"height: 489px;\"\u003e\n\u003c/article\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooks like the element that contains an individual course has a class of \"post\".\nLet's use this CSS selector of \u003ccode\u003e.post\u003c/code\u003e to try to grab \u003cem\u003eall\u003c/em\u003e courses.\u003c/p\u003e\n\n\u003cp\u003eGo back to your terminal and execute the following line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%204.44.13%20PM.png\" alt=\"doc.css output\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhoa! That's a lot of XML. But, if you take a closer look at the content, you'll\nsee that these Nokogiri XML elements do describe the individual courses. You'll\nnotice course titles and descriptions, among other pieces of information.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e You can scroll down and view more of a long document like this in\nPry by using the down arrow key. To stop scrolling and free up the command line\nso that you are still in Pry but able to type in and execute lines of code, hit\n\u003ccode\u003eq\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOkay, now that we have a working line of code for grabbing all of the courses\nfrom the page, let's operate on those courses in order to find the title,\nschedule and description of each one.\u003c/p\u003e\n\n\u003ch3\u003eFinding CSS Selectors for The Desired Attributes\u003c/h3\u003e\n\n\u003cp\u003eWe know that a collection of Nokogiri XML elements functions like an array. So,\nit makes sense that we can iterate over the collection with an enumerator like\n\u003ccode\u003e.each\u003c/code\u003e or \u003ccode\u003e.collect\u003c/code\u003e in order to grab the title, schedule and description of\neach one. BUT, before we worry about iterating, lets grab \u003cem\u003ejust one element\u003c/em\u003e and\ntry to identify the correct CSS selectors for title, schedule and description.\u003c/p\u003e\n\n\u003cp\u003eIn your terminal, execute \u003ccode\u003edoc.css(\".post\").first\u003c/code\u003e. This will grab us just the\nfirst element from the collection. You should see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%204.52.21%20PM.png\" alt=\"first doc.css output\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis describes \u003cem\u003ejust one course offering\u003c/em\u003e. If you look closely, you'll see it\ncontains all the info we need. You can see the title, the schedule and the\ndescription. The easiest way to ID the correct CSS selector for extracting this\ninformation, however, is to revisit the web page and examine a course offering\nwith our \"inspect element\" tool.\u003c/p\u003e\n\n\u003ch4\u003eScraping Course Title\u003c/h4\u003e\n\n\u003cp\u003eGo back to the \u003ca href=\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"\u003esite\u003c/a\u003e and open up the element inspector again. Click the\nselector tool in the upper left of your console (it looks like an arrow cursor\npointing into a box) then hover over the title of the first course offering. You\nshould see a tag appear when you hover over the course title with this tool. The\ntag should say \u003ccode\u003eh2 750.428 x 28px\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe don't care about the height and width but we \u003cem\u003edo\u003c/em\u003e care about the selector,\n\u003ccode\u003eh2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTest the following code in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"h2\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following returned to you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[#]\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe're so close! The course title is right there, inside the Nokogiri::XML:Text\nelement. Let's grab it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"h2\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following return value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"Web Development Immersive\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! We found the code for grabbing an individual course's title. Let's do\nthe same for schedule and description.\u003c/p\u003e\n\n\u003ch4\u003eScraping Course Schedule\u003c/h4\u003e\n\n\u003cp\u003eGo back to the \u003ca href=\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"\u003esite\u003c/a\u003e and open up the element inspector again. Click the\nselector tool and hover over the schedule of the first course offering. You\nshould see a tag appear when you hover over the schedule (the line that reads\n\"Part-Time\" or \"Full-Time\") that reads \u003ccode\u003eem.date ...\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIt looks like the schedule element has a class of \"date\". Let's use that CSS\nselector to grab the date of the first course.\u003c/p\u003e\n\n\u003cp\u003eIn your terminal, execute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\").first.css(\".date\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following returned to you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"Full-Time\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now we have the code for grabbing an individual course's schedule. Let's\nget that description.\u003c/p\u003e\n\n\u003ch4\u003eScraping Course Description\u003c/h4\u003e\n\n\u003cp\u003eOnce again, use the selector tool to hover over the first course's description.\nYou should see a tag appear with the following text: \u003ccode\u003ep 750. blah blah some\npixels\u003c/code\u003e. Okay, it looks like we have our selector: the \u003ccode\u003ep\u003c/code\u003e tag.\u003c/p\u003e\n\n\u003cp\u003eTry out the following line in your console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"p\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see returned to you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"An intensive, Ruby and Javascript course that teaches the skills necessary to start a career as a full-stack software developer.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! We have the working code for grabbing:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe page itself:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc = Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe collection of course offerings:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc.css(\".post\")\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe title of an individual course offering:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"h2\").text\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe schedule of an individual course offering:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc.css(\".post\").first.css(\".date\").text\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe description of an individual course offering:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"p\").text\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow we're ready to use our code to create \u003ccode\u003eCourse\u003c/code\u003e objects and give them\nattributes.\u003c/p\u003e\n\n\u003ch3\u003eCreating \u003ccode\u003eCourse\u003c/code\u003e Objects with Scraped Attributes\u003c/h3\u003e\n\n\u003cp\u003eNotice that the \u003ccode\u003escraper.rb\u003c/code\u003e file includes this line near the top:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative './course.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe are requiring our \u003ccode\u003eCourse\u003c/code\u003e class file so that our \u003ccode\u003eScraper\u003c/code\u003e can make new\ncourses and give them attributes scraped from the web page.\u003c/p\u003e\n\n\u003cp\u003eWe know how to grab an array-like collection of course elements from the page\nwith the \u003ccode\u003edoc.css(\".post\")\u003c/code\u003e line. We also know what code will grab us the title,\nschedule and description of an individual member of that collection.\u003c/p\u003e\n\n\u003cp\u003eSo, we can iterate over the collection, make a new \u003ccode\u003eCourse\u003c/code\u003e instance for each\ncourse offering element we are iterating over, and assign that instance the\nscraped title, schedule and description, using the working code for those\nattributes that we already figured out.\u003c/p\u003e\n\n\u003cp\u003eIn your \u003ccode\u003e#get_page\u003c/code\u003e method of the \u003ccode\u003eScraper\u003c/code\u003e class, place the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e\u003cbr\u003e    doc = Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003cbr\u003e\u003cbr\u003e    doc.css(\".post\").each do |post|\u003cbr\u003e      course = Course.new\u003cbr\u003e      course.title = post.css(\"h2\").text\u003cbr\u003e      course.schedule = post.css(\".date\").text\u003cbr\u003e      course.description = post.css(\"p\").text\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor each iteration over the collection of Nokogiri XML elements returned to us\nby the \u003ccode\u003edoc.css(\".post\")\u003c/code\u003e line, we are making a new instance of the \u003ccode\u003eCourse\u003c/code\u003e\nclass and giving that instance the \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003eschedule\u003c/code\u003e and \u003ccode\u003edescription\u003c/code\u003e\nextracted from the XML.\u003c/p\u003e\n\n\u003cp\u003ePlace a \u003ccode\u003ebinding.pry\u003c/code\u003e at the end of the method. Now, run the code in this file\nwith \u003ccode\u003eruby lib/scraper.rb\u003c/code\u003e. When you hit the binding, enter \u003ccode\u003eCourse.all\u003c/code\u003e into\nyour terminal and take a look at all the courses we made:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%205.29.51%20PM.png\" alt=\"Course class example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWow! We have a collection of \u003ccode\u003eCourse\u003c/code\u003e objects, each of which have attributes\nthat we scraped from the website. We are such good programmers.\u003c/p\u003e\n\n\u003ch3\u003eExtracting Our Code into Methods\u003c/h3\u003e\n\n\u003cp\u003eOkay, we have some great working code. But, it doesn't really \u003cem\u003eall\u003c/em\u003e belong in\nthe \u003ccode\u003e#get_page\u003c/code\u003e method. The \u003ccode\u003e#get_page\u003c/code\u003e method should be responsible for \u003cem\u003ejust\ngetting the page\u003c/em\u003e. Let's do some refactoring and get our \u003ccode\u003eScraper\u003c/code\u003e tests\npassing!\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#get_page\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis method should contain \u003cem\u003eonly the code for getting the HTML document\u003c/em\u003e. Place\nthe following code in your \u003ccode\u003e#get_page\u003c/code\u003e method and \u003cem\u003ecomment out the rest of that\nmethod\u003c/em\u003e. We'll need to refer to that code to get our other tests passing.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e\u003cbr\u003e    Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003cbr\u003e\u003cbr\u003e    #doc.css(\".post\").each do |post|\u003cbr\u003e      #course = Course.new\u003cbr\u003e      #course.title = post.css(\"h2\").text\u003cbr\u003e      #course.schedule = post.css(\".date\").text\u003cbr\u003e      #course.description = post.css(\"p\").text\u003cbr\u003e    #end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun your \u003ccode\u003eScraper\u003c/code\u003e test suite with \u003ccode\u003erspec spec/scraper_spec.rb\u003c/code\u003e. Your first test\nshould be passing.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#get_courses\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#get_courses\u003c/code\u003e method should operate on the HTML page (which is the return\nvalue of the \u003ccode\u003e.get_page\u003c/code\u003e method) and return the collection of Nokogiri XML\nelements that describe each course. So, we'll call on our \u003ccode\u003e.get_page\u003c/code\u003e method\ninside the \u003ccode\u003e.get_courses\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef get_courses\u003cbr\u003e  self.get_page.css(\".post\")\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test suite again and the second test should be passing.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#make_courses\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#make_courses\u003c/code\u003e method should operate on the collection of course offering\nNokogiri XML elements that was returned by the \u003ccode\u003e.get_courses\u003c/code\u003e method. The\n\u003ccode\u003e.make_courses\u003c/code\u003e method should iterate over the collection and make a new\ninstance of \u003ccode\u003eCourse\u003c/code\u003e class for each one while assigning it the appropriate\nattributes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef make_courses\u003cbr\u003e  self.get_courses.each do |post|\u003cbr\u003e    course = Course.new\u003cbr\u003e    course.title = post.css(\"h2\").text\u003cbr\u003e    course.schedule = post.css(\".date\").text\u003cbr\u003e    course.description = post.css(\"p\").text\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test suite again and all of your tests should be passing!\u003c/p\u003e\n\n\u003cp\u003eNow, just for fun. Place the following line at the bottom of \u003ccode\u003elib/scraper.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eScraper.new.print_courses\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTa-da! We did it. Check out all of those awesome courses printed out to your\nterminal. If you're still having trouble getting your tests to pass, check out\nthe final code below:\u003c/p\u003e\n\n\u003ch3\u003eFinal Code: The \u003ccode\u003eScraper\u003c/code\u003e Class\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e    Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def get_courses\u003cbr\u003e    self.get_page.css(\".post\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_courses\u003cbr\u003e    self.get_courses.each do |post|\u003cbr\u003e      course = Course.new\u003cbr\u003e      course.title = post.css(\"h2\").text\u003cbr\u003e      course.schedule = post.css(\".date\").text\u003cbr\u003e      course.description = post.css(\"p\").text\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def print_courses\u003cbr\u003e    self.make_courses\u003cbr\u003e    Course.all.each do |course|\u003cbr\u003e      if course.title \u0026amp;\u0026amp; course.title != \"\"\u003cbr\u003e        puts \"Title: #{course.title}\"\u003cbr\u003e        puts \"  Schedule: #{course.schedule}\"\u003cbr\u003e        puts \"  Description: #{course.description}\"\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eScraper.new.print_courses\n\u003c/code\u003e\u003c/pre\u003e","exportId":"g530fa33518630f6565ea2ea493a4e5ca"},{"id":203867,"title":"Scraping HTML with Nokogiri","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-remote-data-practice-scraping\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-remote-data-practice-scraping/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-remote-data-practice-scraping\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-remote-data-practice-scraping/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce web scraping and its usages.\u003c/li\u003e\n\u003cli\u003eLearn how to use Nokogiri to scrape data from an HTML document.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWeb scraping is the act of parsing a web page's HTML and pulling, or \"scraping\"\npertinent data from that HTML. In this reading, we'll take a brief look at what\nscraping is and how to accomplish it.\u003c/p\u003e\n\n\u003cp\u003eA more thorough code-along is coming up next, but if you would like to follow\nalong, \u003ccode\u003elib/scraper.lib\u003c/code\u003e is provided for you.\u003c/p\u003e\n\n\u003ch2\u003eWhat is Scraping and Why Use it?\u003c/h2\u003e\n\n\u003cp\u003eAs we established above, scraping is a technique used to grab data out of the\nHTML that makes up a web page. Scraping can be difficult to accomplish––in order\nto get the data we want, we need to closely examine the HTML and identify\nexactly which elements contain the information we're interested in. It requires\na high degree of precision.\u003c/p\u003e\n\n\u003cp\u003eSo, if scraping is so tricky, why do we use it? Well, not all of the data we\nmight be interested in using to program is available to use through APIs. For\nexample, let's say we're creating an app that catalogs popular musicians and\nsearches the web for their upcoming concerts. A quick Google search will reveal\nthat, unfortunately for us, there isn't a \"Popular Musician\" API out there just\nwaiting to be used. There is, however, a very comprehensive list of musicians on\nthe Billboard website. In such a scenario, you may want to programmatically grab\nevery musician's name from the Billboard list and store those artists in your\nown database.\u003c/p\u003e\n\n\u003cp\u003eHere's another example: let's say you're creating an app that allows a user to\nsubscribe to a news feed. You anticipate that your users are super-tech savvy\nand might be interested in subscribing to some lesser-known tech news sites.\nSuch sites may not have an API that makes their articles available to you.\nInstead, you would have to scrape those sites for their latest news articles and\nsend those newest articles to your users.\u003c/p\u003e\n\n\u003cp\u003eThese are just a few examples of situations in which scraping might come in\nhandy. Now that we have a few use-cases that illustrate the utility of scraping,\nlet's talk about \u003cem\u003ehow\u003c/em\u003e to scrape.\u003c/p\u003e\n\n\u003ch2\u003eScraping HTML Using Nokogiri and Open-URI\u003c/h2\u003e\n\n\u003ch3\u003eRefresher: What is Open-URI?\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html\"\u003eOpen-URI\u003c/a\u003e is a module in Ruby that allows us to programmatically make HTTP\nrequests. It gives us a bunch of useful methods to make different types of\nrequests, but for this guide, we're interested in only one: \u003ccode\u003eopen\u003c/code\u003e. This method\ntakes one argument, a URL, and will return to us the HTML content of that URL.\u003c/p\u003e\n\n\u003cp\u003eIn other words, running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehtml = open('http://www.google.com')\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003estores the HTML of Google into a variable, \u003ccode\u003ehtml\u003c/code\u003e. (More specifically, it\nactually stores the HTML in a temporary file that we can then call read on to\nget the raw HTML. We won't worry about that here though.)\u003c/p\u003e\n\n\u003ch3\u003eWhat is Nokogiri?\u003c/h3\u003e\n\n\u003cp\u003eNokogiri is a Ruby gem that helps us to parse HTML and collect data from it.\nIt allows us to treat a huge string of HTML as if it were a\nseries of nested objects that you can use to extract the desired information\nusing provided methods. Put simply, Nokogiri takes in HTML and spits out a \ncollection of objects we can get information from.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/scraping-reading/Image_11_CodeScraping.png\" alt=\"Nokogiri Scraping\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe HTML that would normally be rendered as a webpage can be scraped with \nNokogiri into a many small pieces. Nokogiri makes the level of precision required to\nextract the necessary data much easier to attain. It works like a fine-toothed\nsaw to scrape only the necessary data. In fact, that's what \"nokogiri\" means: a\nfine-toothed saw.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/akaisora309838.jpg\" alt=\"fine-toothed saw\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's get Nokogiri up and running and look at a very basic example of its usage.\nThen, we'll move on to the next lesson, where you'll try it out for yourself.\u003c/p\u003e\n\n\u003ch3\u003eInstalling Nokogiri\u003c/h3\u003e\n\n\u003cp\u003eInstalling Nokogiri is as easy as \u003ccode\u003egem install nokogiri\u003c/code\u003e. If you run into any\nissues with this, check out the following documentation:\n\u003cstrong\u003e\u003ca href=\"http://www.nokogiri.org/tutorials/installing_nokogiri.html\"\u003eNokogiri Installation Guide\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3\u003eOpening a Web Page as HTML with Nokogiri and open-uri\u003c/h3\u003e\n\n\u003cp\u003eLet's say we have a file, \u003ccode\u003escraper.rb\u003c/code\u003e which is responsible for (you guessed it)\nscraping. We need to require Nokogiri and open-uri:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003e# more code coming soon!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use the following line to grab the HTML that makes up the Flatiron\nSchool's landing page at flatironschool.com:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehtml = open(\"https://flatironschool.com/\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we'll use the \u003ccode\u003eNokogiri::HTML\u003c/code\u003e method to take the string of HTML returned\nby open-uri's \u003ccode\u003eopen\u003c/code\u003e method and convert it into a NodeSet (aka, a bunch of\nnested \"nodes\") that we can easily play around with.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNokogiri::HTML(html)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's save the HTML document in a variable, \u003ccode\u003edoc\u003c/code\u003e that we can then operate on:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc = Nokogiri::HTML(html)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we were to \u003ccode\u003eputs\u003c/code\u003e out \u003ccode\u003edoc\u003c/code\u003e right now, we'd see something like this in our\nterminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;!--[if lte IE 7]\u0026gt;\u0026lt;html id=\"html\" class=\"deprecated\"\u0026gt;\u0026lt;![endif]--\u0026gt;\u0026lt;!--[if IE 8]\u0026gt;\u0026lt;html id=\"html\" class=\"deprecated\"\u0026gt;\u0026lt;![endif]--\u0026gt;\u0026lt;!--[if IE 9]\u0026gt;\u0026lt;html id=\"html\" class=\"deprecated\"\u0026gt;\u0026lt;![endif]--\u0026gt;\u0026lt;!--[if gt IE 9]\u0026gt;\u0026lt;!--\u0026gt;\u0026lt;html id=\"html\" class=\"modern\"\u0026gt;\u003cbr\u003e\u0026lt;!--\u0026lt;![endif]--\u0026gt;\u0026lt;head\u0026gt;\u003cbr\u003e\u0026lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"\u0026gt;\u003cbr\u003e\u0026lt;meta charset=\"utf-8\"\u0026gt;\u003cbr\u003e\u0026lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u0026gt;\u003cbr\u003e\u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/assets/images/favicon.ico\"\u0026gt;\u003cbr\u003e\u0026lt;title\u0026gt;Learn Coding, Data Science, \u0026amp; UX/UI Design | Flatiron School\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;link href=\"https://fonts.googleapis.com/css?family=Roboto:300,300i,400,400i,500,700\" rel=\"stylesheet\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" href=\"/assets/css/v2/global.min.css?v=3.6\"\u0026gt;\u003cbr\u003e\u0026lt;!-- Google Tag Manager --\u0026gt;\u0026lt;script\u0026gt;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\u003cbr\u003e    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\u003cbr\u003e    j=d.createElement(s),dl=l!='dataLayer'?'\u0026amp;l='+l:'';j.async=true;j.src=\u003cbr\u003e    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\u003cbr\u003e    })(window,document,'script','dataLayer','GTM-KZZ9JB');\u0026lt;/script\u0026gt;\u0026lt;!-- End Google Tag Manager --\u0026gt;\u0026lt;meta name=\"description\" content=\"A coding bootcamp with tech’s most effective software engineering and data science courses – online and on-campus in NYC, Houston, DC, Atlanta, Seattle, and London.\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"canonical\" href=\"https://flatironschool.com/\"\u0026gt;\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you look through further, you can find the \u003ccode\u003ebody\u003c/code\u003e with lots of content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body data-env=\"PRODUCTION\" data-options='{\"learn_url\":\"https:\\/\\/learn.co\",\"hubspot_id\":69751,\"imgix_domain\":\"flatiron-v3-production.imgix.net\"}'\u0026gt;\u003cbr\u003e\u0026lt;!-- Google Tag Manager (noscript) --\u0026gt;\u0026lt;noscript\u0026gt;\u003ciframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-KZZ9JB\" height=\"0\" width=\"0\" style=\"display: none; visibility: hidden;\"\u003e\u003c/iframe\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn and on. It is \u003cem\u003ea lot\u003c/em\u003e to go through, and it can also look pretty messy and\ndifficult to read. But don't worry! Nokogiri will help us parse this. What we're\nlooking at here is all of the HTML that makes up the web page found at\n\u003ca href=\"http://flatironschool.com/\"\u003ewww.flatironschool.com\u003c/a\u003e. The massive lines above are actually a snapshot of\nthat HTML converted into a structure of nested nodes by Nokogiri.\u003c/p\u003e\n\n\u003ch4\u003eWhat are Nested Nodes?\u003c/h4\u003e\n\n\u003cp\u003eNested nodes refers to any tree of elements in which parent elements branch off\nto contain children elements. In fact, we've seen similarly nested structures\nbefore when we dealt with nested data structures like hashes. By creating a\nnested structure, Nokogiri allows us to do things like iterate over a collection\nof elements from the HTML document and use brackets,\u003ccode\u003e[]\u003c/code\u003e, and dot notation to\naccess elements within the nested structure.\u003c/p\u003e\n\n\u003ch3\u003eUsing Nokogiri to Extract Data\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: For this reading, we'll be using the Flatiron School website. However,\nhow you scrape a page is \u003cstrong\u003every specific to the content of the page you are\ntrying to scrape\u003c/strong\u003e. That means that if the webpage you wrote certain scraping\ncode for ever changes, your scraping code will likely no longer work correctly.\nSo, the Flatiron School website that this reading refers to \u003cstrong\u003emay have\nchanged\u003c/strong\u003e! Some of the examples here may specific to an earlier version of the\nsite and won't work look or work exactly as shown when you try them out on your\nown. That's okay though. Just follow along with the reading and, if you want to\ntry it out, feel free to use the examples provided to guide you in scraping\ncontent that is present on the page.\u003c/p\u003e\n\n\u003cp\u003eVisit \u003ca href=\"http://flatironschool.com/\"\u003ethis Flatiron School link\u003c/a\u003e and use your browser's developer tools to\ninspect the page. (You can just right-click anywhere on the page and select\n\"inspect element\".)\u003c/p\u003e\n\n\u003cp\u003eYou should see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/ruby/scraping_flatironschool_console_example_01.png\" alt=\"browser console example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/inspect-styles/\"\u003eelement inspector\u003c/a\u003e view on the bottom half of the page is revealing all of\nthe page's HTML to us! In fact, the HTML it is showing us is \u003cem\u003eexactly the same\u003c/em\u003e\nas the HTML \u003ccode\u003eput\u003c/code\u003e out to our terminal with the help of Nokogiri and open-uri.  \u003c/p\u003e\n\n\u003cp\u003eNow that we understand what Nokogiri is and have seen how it opens the HTML that\nmakes up a web page, let's look at how we use it to actually scrape information.\u003c/p\u003e\n\n\u003ch3\u003eUsing CSS Selectors to Get Data\u003c/h3\u003e\n\n\u003cp\u003eNokogiri allows you to use CSS selectors in order to retrieve specific pieces of\ninformation out of an HTML document.\u003c/p\u003e\n\n\u003ch4\u003eWhat is a CSS Selector\u003c/h4\u003e\n\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"my-div\"\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe id and class attributes of the HTML elements are the CSS selectors. You\nwould refer to the div with this selector: \u003ccode\u003e#my-div\u003c/code\u003e (using the \u003ccode\u003e#\u003c/code\u003e to indicate\nid), and the paragraph with this selector: \u003ccode\u003e.my-paragraph\u003c/code\u003e (using the \u003ccode\u003e.\u003c/code\u003e to\nindicate class).\u003c/p\u003e\n\n\u003ch4\u003eNokogiri's \u003ccode\u003e.css\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eNokogiri's \u003ccode\u003e.css\u003c/code\u003e method can be called on the \u003ccode\u003edoc\u003c/code\u003e variable that we set equal\nto that giant string of HTML that Nokogiri retrieved for us. The \u003ccode\u003e.css\u003c/code\u003e method\ntakes in an argument of the CSS selector you want to retrieve. Let's take a\nlook.\u003c/p\u003e\n\n\u003ch4\u003eChoosing a CSS Selector\u003c/h4\u003e\n\n\u003cp\u003eHow do we determine which selector to use to retrieve the desired information?\nRemember that the HTML document that Nokogiri retrieved for us to operate on is\n\u003cem\u003eexactly the same\u003c/em\u003e HTML that makes up the web page. Let's go back to\n\"\u003ca href=\"http://www.flatironschool.com\"\u003ewww.flatironschool.com\u003c/a\u003e\" and use the element\ninspector to find the selector of a certain piece of our HTML. In this case,\nwe'll look the element containing the text 'Change things':\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/ruby/scraping_flatironschool_inspect_css.png\" alt=\"element inspector\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn order to identify the CSS selector, click the button in the upper left corner of the console pane that looks like a mouse icon partially in a box.\u003c/p\u003e\n\n\u003cp\u003eOnce activated, hover over the 'Change things' text. This will highlight its\nHTML element for us. Notice that:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 class=\"headline-26OIBN\"\u0026gt;...\u0026lt;/hi\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eis highlighted in the above image. If you click on the carrot at the left end of\nthat line, it will open up to show you what that element contains (with lots of spacing around it):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"Change things.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe found it! That text lives in a span whose class is \u003ccode\u003e\"site-header__hero__headline\"\u003c/code\u003e. Now we're\nready to use the \u003ccode\u003e.css\u003c/code\u003e method to grab the text we want:\u003c/p\u003e\n\n\u003ch4\u003eCalling the \u003ccode\u003e.css\u003c/code\u003e method\u003c/h4\u003e\n\n\u003cp\u003eIn our \u003ccode\u003escraper.rb\u003c/code\u003e file, we had the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003edoc = Nokogiri::HTML(open(\"http://flatironschool.com/\"))\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's call \u003ccode\u003e.css\u003c/code\u003e on \u003ccode\u003edoc\u003c/code\u003e and give it the argument of our CSS selector:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003edoc = Nokogiri::HTML(open(\"http://flatironschool.com/\"))\u003cbr\u003edoc.css(\".headline-26OIBN\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we were to copy and paste the above code into IRB, the last line\nwould return something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[#\u0026lt;Nokogiri::XML::Element:0x3fe2d610baa0 name=\"h1\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fe2d610ba3c name=\"class\" value=\"headline-26OIBN\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fe2d610b62c \"\\n      \\n                  Change things.\\n        \\n        \\n                    \\n          \\n                      \\n          \\n              \\n      \"\u0026gt;]\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlthough dense, it is possible to figure some things out. First of all,\n\u003ccode\u003edoc.css(\".headline-26OIBN\")\u003c/code\u003e returned what looks like an Array\ncontaining one \u003ccode\u003eNokogiri\u003c/code\u003e object. In actuality, this 'Array' is \u003cem\u003ealso\u003c/em\u003e a special\n\u003ccode\u003eNokogiri\u003c/code\u003e object, but works very much like an Array. If you look closely at the\nobject contained within it, you'll see that it has the 'Change things' text towards the end! To\nget it out, we can call \u003ccode\u003e.text\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".headline-26OIBN\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003e.text\u003c/code\u003e allows us to access text content inside an element scraped by Nokogiri. Run in IRB, we'd see something like this returned:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e =\u0026gt; \"\\n      \\n                  Change things.\\n        \\n        \\n                    \\n          \\n                      \\n          \\n              \\n      \"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If we add \u003ccode\u003e.strip\u003c/code\u003e to the end we can clean up the extra whitespace and simply return \u003ccode\u003e\"Change things.\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eAn interesting thing to note: If you're coding along in the provided\n\u003ccode\u003elib/scraper.rb\u003c/code\u003e file, using \u003ccode\u003eputs\u003c/code\u003e or \u003ccode\u003eprint\u003c/code\u003e on \u003ccode\u003edoc.css\u003c/code\u003e will cause the \u003cstrong\u003eHTML\nelements to print out\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs doc.css(\".headline-26OIBN\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWill print out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 class=\"headline-26OIBN\"\u0026gt;\u003cbr\u003e\u003cbr\u003e                  Change things.\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e      \u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, just as before, we can just add \u003ccode\u003e.text\u003c/code\u003e (and \u003ccode\u003e.strip\u003c/code\u003e) and get only the\ntext contained inside the element that we want. Alternatively, using \u003ccode\u003ep\u003c/code\u003e will\nproduce the array-like object we saw from before.\u003c/p\u003e\n\n\u003cp\u003eWe did it! We used Nokogiri to get the HTML of a web page. We used the element\ninspector in the browser to ID the CSS selector of the data we wanted to scrape.\nWe used the \u003ccode\u003e.css\u003c/code\u003e Nokogiri method, along with that CSS selector, to grab the\nelement that contains our desired data. Finally, we used the \u003ccode\u003e.text\u003c/code\u003e method to\nretrieve the desired text.\u003c/p\u003e\n\n\u003ch3\u003eIterating over elements\u003c/h3\u003e\n\n\u003cp\u003eSometimes we want to get a collection of the same elements, so we can iterate\nover them. For instance, a little further down the \u003ca href=\"https://flatironschool.com/\"\u003epage\u003c/a\u003e are some of the\ncourses offered by Flatiron School. We can practice iterating by trying to\nscrape the titles of all courses from these elements.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/ruby/scraping_flatironschool_courses.png\" alt=\"courses\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis time, if we hover over one of the elements containing a course, we'll see\nthere are two classes assigned, \u003ccode\u003einlineMobileLeft-2Yo002\u003c/code\u003e, and\n\u003ccode\u003eimageTextBlockGrid2-3jXtmC\u003c/code\u003e. Since CSS classes are often shared, we'll use both to\ntry and get only the content we need:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003ehtml = open(\"http://flatironschool.com/\")\u003cbr\u003edoc = Nokogiri::HTML(html)\u003cbr\u003e\u003cbr\u003edoc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that each class is listed without spaces!\u003c/p\u003e\n\n\u003cp\u003eEven though the Nokogiri gem returns a \u003ccode\u003eNokogiri::XML::NodeSet\u003c/code\u003e (which looks\nlike an Array in Ruby), we can use Ruby methods, such as \u003ccode\u003e.each\u003c/code\u003e and \u003ccode\u003e.collect\u003c/code\u003e,\nto iterate over it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[#\u0026lt;Nokogiri::XML::Element:0x3fe543d378a0 name=\"div\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31ee8e28 name=\"class\" value=\"inlineMobileLeft-2Yo002 imageTextBlockGrid2-3jXtmC\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31ee8900 \"\\n          $1M in Scholarships for Women\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31ee8748 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31ee86e4 name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31ee8270 \"\\n          What Kind of Coding Program is Right for You?\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31ee807c name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eedfcc name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31eeda90 \"\\n          Attend an Online Info Session\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31eed8d8 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eed860 name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31eed43c \"\\n          Coding Bootcamp Prep\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31eed284 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eed220 name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31eecdc0 \"\\n          Online Software Engineering\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31eecc1c name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eecba4 name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31eec744 \"\\n          Data Science Bootcamp Prep\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31eec5a0 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eec53c name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31ef3fbc \"\\n          Online Data Science\\n        \"\u0026gt;]\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstead of just outputting the results of \u003ccode\u003edoc.css\u003c/code\u003e, if we assign them\nto a variable, we can then iterate over that variable with \u003ccode\u003e.each\u003c/code\u003e and \u003ccode\u003eputs\u003c/code\u003e out each course:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecourses = doc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")\u003cbr\u003e\u003cbr\u003ecourses.each do |course|\u003cbr\u003e  puts course.text.strip\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'd see something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSoftware EngineeringLaunch your career as a full-stack web developer ...\u003cbr\u003eData ScienceOur full-time data science program that gives students ...\u003cbr\u003eCybersecurity AnalyticsOver 12 intense weeks on campus at Flatiron ...\u003cbr\u003eCybersecurity EngineeringFast-track to the skills you need for a new ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNot \u003cem\u003eexactly\u003c/em\u003e the course listing as it scraped some other content as well - a\ngreat example how tricky scraping can be - but we've still achieved\niteration!\u003c/p\u003e\n\n\u003ch3\u003eOperating on XML\u003c/h3\u003e\n\n\u003cp\u003eLet's take another look at the element returned to us by our call on the \u003ccode\u003e.css\u003c/code\u003e\nmethod. In the previous example, we had many \u003ccode\u003eNokogiri\u003c/code\u003e objects to iterate over.\nLooking at just the first one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep doc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")[0]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe get an output similar to the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#\u0026lt;Nokogiri::XML::Element:0x3fd385890ca4 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fd385890c04 name=\"class\" value=\"inlineMobileLeft-2Yo002 imageTextBlockGrid2-3jXtmC\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fd3858906c8 \"\\n          $1M in Scholarships for Women\\n        \"\u0026gt;]\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is an XML element. XML stands for Extensible Markup Language. Just like\nHTML, it is a set of rules for encoding and displaying data on the web.\u003c/p\u003e\n\n\u003cp\u003eWhen we use Nokogiri methods, we get XML elements in return. Looking at the\noutput object, we can see it has a \u003ccode\u003ename\u003c/code\u003e, \"div\". We can get\nthis info directly by adding these to the end of our \u003ccode\u003edoc.css\u003c/code\u003e call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep doc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")[0].name\u003cbr\u003e# =\u0026gt; \"div\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the name of the XML element, not to be confused with the HTML attribute\n'name' that can be assigned to elements. Those types of attributes can be\naccessed with \u003ccode\u003e.attributes\u003c/code\u003e. Using \u003ccode\u003e.attributes\u003c/code\u003e will return ids, names, and\nclasses, but will also return other useful content like \u003ccode\u003ealt\u003c/code\u003e and \u003ccode\u003esrc\u003c/code\u003e for\nimages.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep doc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")[0].attributes\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince this example doesn't have any attributes besides the CSS classes, we just\nget back the classes we already know:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"class\"=\u0026gt;#\u0026lt;Nokogiri::XML::Attr:0x3fe543d3783c name=\"class\" value=\"inlineMobileLeft-2Yo002 imageTextBlockGrid2-3jXtmC\"\u0026gt;} \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOne last but important method to note is \u003ccode\u003echildren\u003c/code\u003e. Adding \u003ccode\u003echildren\u003c/code\u003e will\nreturn any child nodes nested \u003cem\u003einside this element\u003c/em\u003e. In this particular example,\nall that is contained is a text node, but this XML element can contain all types\nof XML elements, nested as children. On a webpage, an \u003ccode\u003eh2\u003c/code\u003e HTML element may be\nnested within a \u003ccode\u003ediv\u003c/code\u003e. When scraped, this relationship can be represented by\nhaving an XML object named \"div\" with a child XML object named \"h2\".\u003c/p\u003e\n\n\u003cp\u003eNokogiri collects these objects into a hierarchical data structure, much like\nthe nested arrays and hashes we've been building and manipulating for a while\nnow. This structure allows us to iterate over an array of Nokogiri objects and use\nenumerators to grab the values of attributes and text.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBy using Nokogiri, we can get any website's HTML, represented in XML objects,\nincluding any text or data displayed on that site. Using methods like \u003ccode\u003e.css\u003c/code\u003e, we\ncan then filter out the specific parts of the website we need and use additional\nmethods like \u003ccode\u003e.text\u003c/code\u003e and \u003ccode\u003e.attributes\u003c/code\u003e to extract the content we want.\u003c/p\u003e\n\n\u003cp\u003eAs each website is designed differently, scraping tends to require customized code\nfor each site you want to scrape. As sites update their styles and designs, scrapers\nwe've built may no longer work.\u003c/p\u003e\n\n\u003cp\u003eHowever, being able to scrape websites gives us access to information that can\nbe time-consuming or otherwise very difficult to collect. Taking a little time\nto update a scraper is typically much easier and faster than manually updating\ndata.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: One final note about scraping - the content we're getting by scraping\nis all technically publicly available, as it all visible on public websites. Be\ncareful, however, as some content may not be used without permission or\nlicensing. Images, for instance, often belong to someone and can have a license\nattached - something you would probably want to look into before scraping any\nimage \u003ccode\u003esrc\u003c/code\u003e attributes from a site!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eScraping is a big topic, and it takes \u003cem\u003ea lot\u003c/em\u003e of practice to get comfortable\ndoing it. The below resource is a great place to learn more about scraping and\neven get some practice with simple examples. If you felt really confused by\nthis reading, we recommend checking it out before moving on.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby.bastardsbook.com/chapters/html-parsing/\"\u003e\u003cem\u003eThe Bastard's Book of Ruby\u003c/em\u003e - Parsing HTML with Nokogiri\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=oXwdOdBUyCI\"\u003eVideo Review- Scraping and Object Orientation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://www.nokogiri.org/tutorials/installing_nokogiri.html\"\u003eNokogiri Installation Guide\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g0d0ffaf52d8700924d657a2237d61413"},{"id":203868,"title":"Scraping Kickstarter","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"scraping-kickstarter\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/scraping-kickstarter/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/scraping-kickstarter\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/scraping-kickstarter/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse Nokogiri to scrape an HTML document.\u003c/li\u003e\n\u003cli\u003eUse scraped data to build a nested data structure.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be scraping a Kickstarter web page that lists projects\nrequesting funding. The page you'll be scraping displays 20 previews of projects\nin the NYC area. Each project has a title, an image, a short description, a\nlocation and some funding details. Our goal is to collect this information for\neach project and build a hash for each project:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e:projects =\u0026gt; {\u003cbr\u003e  \"My Great Project\"  =\u0026gt; {\u003cbr\u003e    :image_link =\u0026gt; \"Image Link\",\u003cbr\u003e    :description =\u0026gt; \"Description\",\u003cbr\u003e    :location =\u0026gt; \"Location\",\u003cbr\u003e    :percent_funded =\u0026gt; \"Percent Funded\"\u003cbr\u003e  },\u003cbr\u003e  \"Another Great Project\" =\u0026gt; {\u003cbr\u003e    :image_link =\u0026gt; \"Image Link\",\u003cbr\u003e    :description =\u0026gt; \"Description\",\u003cbr\u003e    :location =\u0026gt; \"Location\",\u003cbr\u003e    :percent_funded =\u0026gt; \"Percent Funded\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese individual project hashes will be collected into a larger hash called\n\u003ccode\u003eprojects\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eFixtures\u003c/h2\u003e\n\n\u003cp\u003eIn the directory of this project, you'll notice a folder called \u003ccode\u003efixtures\u003c/code\u003e.\nInside that folder, you'll see a file, \u003ccode\u003ekickstarter.html\u003c/code\u003e. If you are using the\nLearn IDE right click on the \u003ccode\u003ekickstarter.html\u003c/code\u003e file and select \u003ccode\u003eShow in\nFinder\u003c/code\u003e. Once Finder opens double click \u003ccode\u003ekickstarter.html\u003c/code\u003e to view the file\ninside your default web browser. If you are not using the Learn IDE, try open\n\u003ccode\u003ekickstarter.html\u003c/code\u003e inside your text editor and right-click anywhere on the page\nto select \u003ccode\u003eopen in browser\u003c/code\u003e from the menu that appears.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: If the \u003ccode\u003eShow in Finder\u003c/code\u003e or \u003ccode\u003eOpen in Browser\u003c/code\u003e options are not available\nfor you, you can use \u003ccode\u003ehttpserver\u003c/code\u003e. Open the \u003ccode\u003efixtures/kickstarter.html\u003c/code\u003e file\ninside of the browser by typing \u003ccode\u003ehttpserver\u003c/code\u003e into the Learn IDE terminal and go\nto the link provided. Navigate to \u003ccode\u003efixtures/kickstarter.html\u003c/code\u003e from there.\u003c/p\u003e\n\n\u003cp\u003eTa-da! We're looking at a web page. For the purposes of this lab, we won't be\nscraping a live web page. We'll be scraping this HTML page. We're doing this for\ntwo reasons. First, because web pages change. If we assign you a lab based on\nmaterial that will change, things could get really confusing. Secondly, it is\ncommon to keep data that the test suite will use to test your program in a\n\u003ccode\u003efixtures\u003c/code\u003e directory.\u003c/p\u003e\n\n\u003cp\u003eSo, for this lab, we \u003cem\u003edon't need Open-Uri\u003c/em\u003e. We're not opening a live web page.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eSetting Up Our Project\u003c/h3\u003e\n\n\u003cp\u003eSince we'll be using that \u003ccode\u003ekickstarter.html\u003c/code\u003e file instead of an Open-URI\nrequest, we need to require only \u003ccode\u003enokogiri\u003c/code\u003e at the top of the\n\u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e file\u003c/p\u003e\n\n\u003cp\u003eNext, let's set up some variables inside the method called \u003ccode\u003ecreate_project_hash\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# This just opens a file and reads it into a variable\u003cbr\u003ehtml = File.read('fixtures/kickstarter.html')\u003cbr\u003e\u003cbr\u003ekickstarter = Nokogiri::HTML(html)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that this is pretty similar to what we did to open HTML documents in the\nprevious exercise in which we did use Open-URI.\u003c/p\u003e\n\n\u003ch3\u003eSelecting the Projects\u003c/h3\u003e\n\n\u003cp\u003eThe first thing we'll want to do is figure out what selector will allow us to\ngrab each project as a whole. Open up \u003ccode\u003efixtures/kickstarter.html\u003c/code\u003e by typing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eopen fixtures/kickstarter.html\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ein the terminal, or by right clicking on the file and selecting \"open in browser\".\u003c/p\u003e\n\n\u003cp\u003eThis should open the file in your web browser. Right click somewhere on the\n\"Moby Dick\" project and choose \"Inspect Element\". By moving your mouse up and\ndown in the HTML in the inspector, you can see what each element represents on\nthe page via some cool highlighting. By moving your mouse around, it quickly\nbecomes clear that each project is contained in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;li class=\"project grid_4\"\u0026gt;...\u0026lt;/li\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince this Nokogiri object is just a bunch of nested nodes, and we know how to\niterate through a nested data structure, we can use the Ruby we already know to\niterate through each of these projects and do stuff with them.\u003c/p\u003e\n\n\u003cp\u003eJust to check our assumptions, let's add a \u003ccode\u003erequire 'pry'\u003c/code\u003e at the top of our\nfile, and add \u003ccode\u003ebinding.pry\u003c/code\u003e after the last line. Add a call to the\n\u003ccode\u003ecreate_project_hash\u003c/code\u003e method at the bottom of the file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire \"nokogiri\"\u003cbr\u003erequire \"pry\"\u003cbr\u003e\u003cbr\u003edef create_project_hash\u003cbr\u003e  html = File.read('fixtures/kickstarter.html')\u003cbr\u003e  kickstarter = Nokogiri::HTML(html)\u003cbr\u003e  binding.pry\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ecreate_project_hash\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen type \u003ccode\u003eruby kickstarter_scraper.rb\u003c/code\u003e into your terminal. This should drop us\ninto Pry, so that we can play around.\u003c/p\u003e\n\n\u003cp\u003eIn pry, type in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekickstarter.css(\"li.project.grid_4\").first\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will select the first \u003ccode\u003eli\u003c/code\u003e with the \u003ccode\u003eproject\u003c/code\u003e and \u003ccode\u003egrid_4\u003c/code\u003e classes just so\nthat we can make sure we've chosen our selectors correctly.\u003c/p\u003e\n\n\u003cp\u003eAnd we have! (If you don't see any output, or see an empty array, make sure\nyou've typed everything exactly as it was typed here.)\u003c/p\u003e\n\n\u003cp\u003eAwesome! Let's add a comment to \u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e that reminds us of that\nselector:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSelecting the Title\u003c/h3\u003e\n\n\u003cp\u003eLet's hop back into Pry and see if we can figure out how to get the title of\nthat project.\u003c/p\u003e\n\n\u003cp\u003eIn Pry, type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject = _\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will assign that project to a variable, \u003ccode\u003eproject\u003c/code\u003e so that we can play\naround with it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e If you're looking at a big chunk of code in Pry that gets cut off at the bottom\nof your terminal window, you can scroll down with the down arrow key. You can\nescape the scrolling and go back to entering code in Pry by hitting \"q\".\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e The \u003ccode\u003evariable_name = _\u003c/code\u003e syntax used in Pry will assign the\n\u003ccode\u003evariable\u003c/code\u003e name to the return value of whatever was executed above. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ pry \u0026gt; 1 + 1\u003cbr\u003e  =\u0026gt; 2\u003cbr\u003e$ pry \u0026gt; two = _\u003cbr\u003e$ pry \u0026gt; two\u003cbr\u003e  =\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo back to your browser and use the element inspector to click around a bit and\nidentify the selector for a project's title. A bit of inspection should reveal\nthat the title of each project lives in an \u003ccode\u003eh2\u003c/code\u003e with a class of \u003ccode\u003ebbcard_name\u003c/code\u003e,\ninside a \u003ccode\u003estrong\u003c/code\u003e and then an \u003ccode\u003ea\u003c/code\u003e tag. Let's check that in pry:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject.css(\"h2.bbcard_name strong a\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince Nokogiri gives us a bunch of nested nodes that all respond to the same\nmethods, we can just chain a \u003ccode\u003ecss\u003c/code\u003e method right onto this \u003ccode\u003eproject\u003c/code\u003e. Neat, huh?\u003c/p\u003e\n\n\u003cp\u003eNow that we have our \u003ccode\u003etitle\u003c/code\u003e selector, let's add it into a comment in our \u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSelecting the Image Link\u003c/h3\u003e\n\n\u003cp\u003eBack in Chrome, we can see in the inspector that there is a \u003ccode\u003ediv\u003c/code\u003e with a class\nof \u003ccode\u003eproject-thumbnail\u003c/code\u003e. Seems like a good place to look. Let's give it a try in\nPry.\u003c/p\u003e\n\n\u003cp\u003eIn Pry, type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject.css(\"div.project-thumbnail a img\").attribute(\"src\").value\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt worked! Now, let's continue to keep track of our working code in our project\nfile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eA Note on \u003ccode\u003e.attribute\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eAn image tag in HTML is considered to have a source attribute. In the following\nexample\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;img src=\"http://www.example.com/pic.jpg\"\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003ethe source attribute would be \u003ccode\u003e\"http://www.example.com/pic.jpg\"\u003c/code\u003e. You can use\nthe \u003ccode\u003e.attribute\u003c/code\u003e method on a Nokogiri element to grab the value of that\nattribute.\u003c/p\u003e\n\n\u003ch3\u003eSelecting the Description\u003c/h3\u003e\n\n\u003cp\u003eAre you starting to see a pattern here? We click around a bit in the Chrome web\ninspector, take a stab at a CSS selector in Pry, and then keep track of that\nselector in our project file. Let's grab the description now. In Pry:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject.css(\"p.bbcard_blurb\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return the description of an individual project.\u003c/p\u003e\n\n\u003cp\u003eLet's add that to \u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\u003cbr\u003e# description: project.css(\"p.bbcard_blurb\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSelecting the Location\u003c/h3\u003e\n\n\u003cp\u003eDo you think you can figure this one out on your own? Examine the web page and\nthen play around in Pry. Try to find the right selector for an individual\nproject's location.\u003c/p\u003e\n\n\u003ch3\u003eSelecting the Percent Funded\u003c/h3\u003e\n\n\u003cp\u003eAnd last, but not least, let's try and grab the percent funded as well! Looking\nin Chrome, it seems that this one is just a bit trickier, but only because it's\nmore nested than the other ones. In Pry, type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject.css(\"ul.project-stats li.first.funded strong\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat does it! To make it useful for later on if, say, we wanted to do some math,\nlet's also tag on a \u003ccode\u003e.gsub(\"%\", \"\").to_i\u003c/code\u003e to remove the percent sign and convert\nit into an integer.\u003c/p\u003e\n\n\u003cp\u003eOur final list of comments in our \u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e file, then (including\nthe location that you should have figured out on your own), is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\u003cbr\u003e# description: project.css(\"p.bbcard_blurb\").text\u003cbr\u003e# location: project.css(\"ul.project-meta span.location-name\").text\u003cbr\u003e# percent_funded: project.css(\"ul.project-stats li.first.funded strong\").text.gsub(\"%\",\"\").to_i\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eLet's Scrape!\u003c/h3\u003e\n\n\u003cp\u003eNow, it's just a matter of putting together the data we can grab with Nokogiri\nwith our knowledge of data iteration in Ruby.\u003c/p\u003e\n\n\u003cp\u003eFirst, let's set up a loop to iterate through the projects (and also an empty\n\u003ccode\u003eprojects\u003c/code\u003e hash, which we will fill up with scraped data):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# file: kickstarter_scraper.rb\u003cbr\u003e\u003cbr\u003erequire 'nokogiri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\u003cbr\u003e# description: project.css(\"p.bbcard_blurb\").text\u003cbr\u003e# location: project.css(\"ul.project-meta span.location-name\").text\u003cbr\u003e# percent_funded: project.css(\"ul.project-stats li.first.funded strong\").text.gsub(\"%\",\"\").to_i\u003cbr\u003e\u003cbr\u003edef create_project_hash\u003cbr\u003e  html = File.read('fixtures/kickstarter.html')\u003cbr\u003e  kickstarter = Nokogiri::HTML(html)\u003cbr\u003e\u003cbr\u003e  projects = {}\u003cbr\u003e\u003cbr\u003e  # Iterate through the projects\u003cbr\u003e  kickstarter.css(\"li.project.grid_4\").each do |project|\u003cbr\u003e    projects[project] = {}\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # return the projects hash\u003cbr\u003e  projects\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, so that won't work, actually. That's going to make some really wacky key\nwhich is a huge Nokogiri object. So, let's change our data structure slightly\nand make it so that each project title is a key, and the value is another hash\nwith each of our other data points as keys. Sound good?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# file: kickstarter_scraper.rb\u003cbr\u003e\n...\u003cbr\u003e\u003cbr\u003edef create_project_hash\u003cbr\u003e  projects = {}\u003cbr\u003e\u003cbr\u003e  kickstarter.css(\"li.project.grid_4\").each do |project|\u003cbr\u003e    title = project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e    projects[title.to_sym] = {}\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # return the projects hash\u003cbr\u003e  projects\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's better. You'll notice that we're converting the title into a symbol using\nthe \u003ccode\u003eto_sym\u003c/code\u003e method. Remember that symbols make better hash keys than strings.\u003c/p\u003e\n\n\u003cp\u003eFinally, it's just a matter of grabbing each of the data points using the\nselectors we've already figured out, and adding them to each project's hash. So,\nour complete code will look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# file: kickstarter_scraper.rb\u003cbr\u003e\u003cbr\u003erequire 'nokogiri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\u003cbr\u003e# description: project.css(\"p.bbcard_blurb\").text\u003cbr\u003e# location: project.css(\"ul.project-meta span.location-name\").text\u003cbr\u003e# percent_funded: project.css(\"ul.project-stats li.first.funded strong\").text.gsub(\"%\",\"\").to_i\u003cbr\u003e\u003cbr\u003edef create_project_hash\u003cbr\u003e  html = File.read('fixtures/kickstarter.html')\u003cbr\u003e  kickstarter = Nokogiri::HTML(html)\u003cbr\u003e\u003cbr\u003e  projects = {}\u003cbr\u003e\u003cbr\u003e  kickstarter.css(\"li.project.grid_4\").each do |project|\u003cbr\u003e    title = project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e    projects[title.to_sym] = {\u003cbr\u003e      :image_link =\u0026gt; project.css(\"div.project-thumbnail a img\").attribute(\"src\").value,\u003cbr\u003e      :description =\u0026gt; project.css(\"p.bbcard_blurb\").text,\u003cbr\u003e      :location =\u0026gt; project.css(\"ul.project-meta span.location-name\").text,\u003cbr\u003e      :percent_funded =\u0026gt; project.css(\"ul.project-stats li.first.funded strong\").text.gsub(\"%\",\"\").to_i\u003cbr\u003e    }\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # return the projects hash\u003cbr\u003e  projects\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! Run the test suite and you should see that all of the tests are\npassing.\u003c/p\u003e","exportId":"g318902eb742a9b33179fc9ea0311ed22"},{"id":203869,"title":"Video: Object-Orientation Review and Scraping","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oo-ruby-video-review-object-orientation-and-scraping\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-orientation-and-scraping/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-orientation-and-scraping\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-orientation-and-scraping/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this two part video review, we'll cover the history of Object Orientation, a basic overview of writing tests, and creating objects from data that we've scraped. In this walkthrough, we'll work with data that we've scraped from Wikipedia. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain Esdger Dijkstra's influence on programming\u003c/li\u003e\n\u003cli\u003eWrite tests that describe our objects\u003c/li\u003e\n\u003cli\u003eDefine Hook, class getter and constructor method for our class\u003c/li\u003e\n\u003cli\u003eDefine a class constructor method to scrape from a data source and return a hash of properties\u003c/li\u003e\n\u003cli\u003eDynamically assign attributes for our instance using the \u003ccode\u003esend\u003c/code\u003e method\u003c/li\u003e\n\u003cli\u003eUse the tap method to fix 'sandwich code' and dynamically assign properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/LcVasuO5uKA?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/oXwdOdBUyCI?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e","exportId":"video-object-orientation-review-and-scraping"}]},{"id":21905,"name":"Rack","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g8c4df8fc4c45ae542cf75956ba76ea8e","items":[{"id":203870,"title":"How the Web Works","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"how-the-web-works-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/how-the-web-works-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/how-the-web-works-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/how-the-web-works-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/welcome.gif\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a client and server\u003c/li\u003e\n\u003cli\u003eExplain what an HTTP request is\u003c/li\u003e\n\u003cli\u003eExplain the nature of request and response\u003c/li\u003e\n\u003cli\u003eDefine a static site vs. a dynamic site\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntro\u003c/h2\u003e\n\n\u003cp\u003eHow many times a day do you use the internet? How many times do you load a\ndifferent web page? Think about how many times you do this in a year! In order\nto be a developer-- and especially a web developer-- it's incredibly important\nto understand how the web works. From here on out, you are no longer just a user\nof the internet. You are a creator of the web.\u003c/p\u003e\n\n\u003ch2\u003eClient and Server\u003c/h2\u003e\n\n\u003cp\u003eSo seriously, how does this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttps://www.youtube.com/user/AdeleVEVO\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTurn into this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/request-intro.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe internet operates based on conversations between the client (more familiarly\nknown as the browser) and the server (the code running the web site you're\ntrying to load). By typing in that URL into your browser, you (the client) are\n\u003cem\u003erequesting\u003c/em\u003e a web page. The server then receives the request, processes it, and\nsends a \u003cem\u003eresponse\u003c/em\u003e. Your browser receives that response and shows it to you.\nThese are the fundamentals of the web. Browsers send requests, and servers send\nresponses. Until today you have always been a client. Moving forward you will be\nbuilding the server. This means processing requests, creating responses, and\nsending them back to the client.\u003c/p\u003e\n\n\u003cp\u003eWe will be writing our servers using Ruby and a few different frameworks. But\nyour browser doesn't know, nor does it care, what server it talks to. How does\nthat work? How can a server that was written 15 years ago still work with a\nbrowser written 15 months or days ago? \u003c/p\u003e\n\n\u003cp\u003eIn addition, you can use multiple clients! You can use Chrome, Safari, Internet\nExplorer, Opera, and many others. All of those browsers are able to talk to the\nsame server. Let's take a closer look at how this occurs.\u003c/p\u003e\n\n\u003ch2\u003eHTTP Overview\u003c/h2\u003e\n\n\u003cp\u003eBeing able to switch out both the server or the client happens because the way\nbrowsers and servers talk is controlled by a contract or \u003cem\u003eprotocol\u003c/em\u003e.\nSpecifically it is a protocol created by Tim Berners-Lee called the \u003cstrong\u003eH\u003c/strong\u003eyper\n\u003cstrong\u003eT\u003c/strong\u003eext \u003cstrong\u003eT\u003c/strong\u003eransfer \u003cstrong\u003eP\u003c/strong\u003erotocol or HTTP. Your server will receive requests\nfrom the browser that follow HTTP. It then responds with an HTTP response that\nall browsers are able to parse.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eHTTP\u003c/code\u003e is the language browsers speak. Every time you load a web page, you are\nmaking an \u003ccode\u003eHTTP\u003c/code\u003e request to the site's server, and the server sends back an\n\u003ccode\u003eHTTP\u003c/code\u003e response.\u003c/p\u003e\n\n\u003cp\u003eIn the example above, the client is making an \u003ccode\u003eHTTP GET request\u003c/code\u003e to YouTube's\nserver. YouTube's server then sends back a response and the client renders the\npage in the browser.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/how-the-web-works/Image_17_ComputerServer.png\" alt=\"computer server\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRequests\u003c/h2\u003e\n\n\u003ch3\u003eURI\u003c/h3\u003e\n\n\u003cp\u003eWhen you make a request on the web, how do you know where to send it?  This is\ndone through \u003cstrong\u003eU\u003c/strong\u003eniform \u003cstrong\u003eR\u003c/strong\u003eesource \u003cstrong\u003eI\u003c/strong\u003edentifiers or URIs. You've probably\nalso heard of these as URLs. Both are fine. Let's look at the URI we used up\ntop.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://www.youtube.com/adelevevo\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis URI is broken into three parts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ehttp\u003c/code\u003e - the protocol\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eyoutube.com\u003c/code\u003e - the domain\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e/adelevevo\u003c/code\u003e - the resource\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe \u003ccode\u003eprotocol\u003c/code\u003e is the way we're sending our request. There are several different\ntypes of internet protocols (SMTP for emails, HTTPS for secure requests, FTP for\nfile transfers). To load a website, we use HTTP.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edomain name\u003c/code\u003e is a string of characters that identifies the unique location\nof the web server that hosts that particular website. This will be things like\n\u003ccode\u003eyoutube.com\u003c/code\u003e and \u003ccode\u003egoogle.com\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eresource\u003c/code\u003e is the particular part of the website we want to load. YouTube\nhas millions and millions of channels and videos, so the specific resource we\nwant is \u003ccode\u003e/adelevevo\u003c/code\u003e (because we can't get Hello out of our heads).\u003c/p\u003e\n\n\u003cp\u003eAn analogy that works well is thinking of an apartment building. The domain is\nthe entire building. Within that building though there are hundreds of\napartments. We use the specific resource (or sometimes called path) to figure\nout that we care about apartment 4E. The numbering/lettering system is different\nfor every apartment building, just like how a server has its resources laid out\nis a bit different for every website. For example doing a search on Google ends\nin a URL like this \u003ccode\u003ehttps://www.google.com/search?q=URI\u003c/code\u003e but searching for URI\non Facebook leads to this URL \u003ccode\u003ehttps://www.facebook.com/search/top/?q=uri\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eHTTP Verbs\u003c/h3\u003e\n\n\u003cp\u003eWhen you're making a request, not only do you want to give all the details of\nyour request, you also need to specify what action you would like the server to\ndo. We do this with HTTP Verbs. With the same resource, you may want more than\none action to occur. Using a browser, almost all requests are \u003ccode\u003eGET\u003c/code\u003e requests.\nThis just means \"hey server, please GET me this resource\". There are a few other\nverbs though. What if we want to send some data from the user to the server?\nThis is done with a \u003ccode\u003ePOST\u003c/code\u003e request. There are a ton of verbs, and we'll go\nfurther into them later, but here is a full list:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eVERB\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eHEAD\u003c/td\u003e\n\u003ctd\u003eAsks for a response like a GET but without the body\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003eRetrieves a representation of a resource\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePOST\u003c/td\u003e\n\u003ctd\u003eSubmits data to be processed in the body of the request\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePUT\u003c/td\u003e\n\u003ctd\u003eUploads a representation of a resource in the body of the request\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDELETE\u003c/td\u003e\n\u003ctd\u003eDeletes a specific resource\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTRACE\u003c/td\u003e\n\u003ctd\u003eEchoes back the received request\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOPTIONS\u003c/td\u003e\n\u003ctd\u003eReturns the HTTP methods the server supports\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCONNECT\u003c/td\u003e\n\u003ctd\u003eConverts the request to a TCP/IP tunnel (generally for SSL)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePATCH\u003c/td\u003e\n\u003ctd\u003eApply a partial modification of a resource\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3\u003eRequest Format\u003c/h3\u003e\n\n\u003cp\u003eOur client so far has made a request to YouTube's server. In this case, a\nrequest to \u003ccode\u003e/adelevevo\u003c/code\u003e. The server then responds with all the code associated\nwith that resource \u003ccode\u003e\u0026lt;!doctype html\u0026gt; .....\u0026lt;/html\u0026gt;\u003c/code\u003e, including all images, CSS\nfiles, JavaScript files, videos, music, etc. \u003c/p\u003e\n\n\u003cp\u003eWhen the client makes a request, it includes other items besides just the URL in\nthe \"headers.\" The request header contains all the information the server needs\nin order to fulfill the request: the type of request, the resource (path), the\ndomain as well as some other metadata like what type of browser is making this\nrequest. The request header would look something like this.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/request-header.png\" alt=\"request header\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eResponses\u003c/h2\u003e\n\n\u003cp\u003eOnce your server receives the request, it will do some processing (run code you\nwrote!) and then send a response back. The server's response headers look\nsomething like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/response-headers.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe server's response is separated into two sections, the headers and the body.\nThe headers are all of the metadata about the response. This includes things\nlike content-length (how big is my response) and what type of content it is. The\nheaders also include the status code of the response. The \u003cem\u003ebody\u003c/em\u003e of the response\nis what you see rendered on the page. It is all of that HTML/CSS that you see!\nMost of the data of a response is in the body, not in the headers.\u003c/p\u003e\n\n\u003ch3\u003eStatus Codes\u003c/h3\u003e\n\n\u003cp\u003eEvery time there is a successful response (you'll know it's successful because\n the page will load without any errors), it's a status code of \u003ccode\u003e200\u003c/code\u003e, but there\n are other status codes and it's good to get familiar with them. You've probably\n seen the second most popular status code, \u003ccode\u003e404\u003c/code\u003e. This means \"file not found.\"\n Status codes are separated into categories based on their first digit. Here are\n the different categories:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e100's - informational\u003c/li\u003e\n\u003cli\u003e200's - success\u003c/li\u003e\n\u003cli\u003e300's - redirect\u003c/li\u003e\n\u003cli\u003e400's - error\u003c/li\u003e\n\u003cli\u003e500's - server error\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA full list of status codes is \u003ca href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\"\u003eup on Wikipedia\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eServers\u003c/h2\u003e\n\n\u003cp\u003eIt's important to note that there are two different types of webapps: static and\ndynamic. A \u003ccode\u003estatic\u003c/code\u003e webapp is one that doesn't change. The content doesn't\nchange unless a developer opens up an HTML file and modifies the content of that\nfile. \u003ccode\u003eDynamic\u003c/code\u003e webapps are sites where the content changes based on user input\n(e.g. Facebook, Twitter, Yelp, etc.). Every time you visit the site, the content\nis most likely different because someone else gave a review of that restaurant,\nor sent out a new tweet, or commented on that image you liked. These are the\ntypes of apps you'll be building.\u003c/p\u003e\n\n\u003cp\u003eThe flow of request and response changes slightly based on a static or a dynamic\nwebapp. \u003c/p\u003e\n\n\u003cp\u003eWhen the client wants to load a static site, the client makes a request, the\nserver finds the file on a disk, and sends it back. Done and Done.\u003c/p\u003e\n\n\u003cp\u003eIt gets a little bit more complex with a webapp. The client makes a request, the\nserver runs application code (think of this as your Ruby code), and returns a\ndynamically generated response.\u003c/p\u003e","exportId":"how-the-web-works"},{"id":203871,"title":"Layers of Abstraction","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"why-layers-of-abstraction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/why-layers-of-abstraction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/why-layers-of-abstraction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/why-layers-of-abstraction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eBefore we start our journey to Rails, let's pause and discuss the route to get there. We'll first explore two lower-level Ruby web tools: Rack and Sinatra. Rails does \u003cem\u003eso much\u003c/em\u003e that it might seem like magic. But as a web app developer, we can't rely on magic to see us through. We need to understand everything we're doing at a layer (or two!) deeper than the layer at which we're operating.\u003c/p\u003e\n\n\u003cp\u003eEventually, the magic will break. In other words, your programs will break. If you can't take Rails apart and understand the fundamentals of what's going on, you'll never be able to fix the magic. You may not be entirely comfortable with all of the internals of Rails, but you will know the foundations. Think about auto mechanics. They may not know every part of every car but they know the foundations. They know common features of all cars, and how even the smallest parts connect to other parts. This allows them to diagnose and suggest fixes faster, and gives them a holistic picture of the mechanics of cars which again will guide them towards solutions. \u003c/p\u003e\n\n\u003cp\u003eWith Rails, you'll understand how HTTP works and how Rails is able to translate all of the complexities of HTTP and modern web servers into something that is easy to work with. With all its features, it can also be confusing to see how they fit together to make a response to give to the user. In building up to Rails, you'll build a simple version of most Rails features. Once you \u003ccode\u003erequire 'rails'\u003c/code\u003e it should feel familiar.\u003c/p\u003e\n\n\u003cp\u003eBe prepared! It's going to be hard to go up layers of abstraction. You are no longer just a driver on the web. You are now a maker on the web.\u003c/p\u003e","exportId":"layers-of-abstraction"},{"id":203872,"title":"Introduction to Rack","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the mechanics of Rack \u003c/li\u003e\n\u003cli\u003eCreate a basic web app \u003c/li\u003e\n\u003cli\u003eSet up an HTTP web server using a \u003ccode\u003econfig.ru\u003c/code\u003e file and the \u003ccode\u003erackup\u003c/code\u003e command\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Rack?\u003c/h2\u003e\n\n\u003cp\u003eHow does a web server work?\u003c/p\u003e\n\n\u003cp\u003eWe open a browser (or, these days, an \"app\") and it uses HTTP to connect to a\nremote server. Servers are just code. But somehow when you say\n\u003ccode\u003e/search?item=shoes\u0026amp;size=13M\u003c/code\u003e it knows how to find some more code that knows\nhow to search (in this case, for shoes of size 13M).\u003c/p\u003e\n\n\u003cp\u003eAll web servers have a core architecture in common. By looking at it, we can\nbuild a mental model for how all web servers work. In the same way, we can\nexplain how all cars work by:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt;  Explosions made by gasoline and fire make an inside wheel go round and that\n\u0026gt;  inside wheel makes the outside wheels go round\"\u003c/p\u003e\n\n\u003cp\u003eIn the same way, we can say that all web servers:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; They look at an HTTP request and look at the HTTP verb and path and then run\n\u0026gt; some conditional logic to find out which stuff to send back\u003c/p\u003e\n\n\u003cp\u003eIn Ruby, this idea of \"a common foundation for all web-server like things\" is\ncaptured in a gem called \u003ca href=\"https://rack.github.io/\"\u003eRack\u003c/a\u003e. Rails \"rides on top\nof\" Rack. Sinatra \"rides on top of\" Rack. In fact, the idea of a base, common\nweb-server library was such a good idea, other languages like Python and\nNode.JS implemented their own \"base\" web server.\u003c/p\u003e\n\n\u003cp\u003eBefore we get to the complexity of things built on top of Rack, let's get a\nsimple server working on Rack.\u003c/p\u003e\n\n\u003ch2\u003eSetting up Rack\u003c/h2\u003e\n\n\u003cp\u003eTo work with Rack, we need to create a thing that responds to a single method:\n\u003ccode\u003e#call\u003c/code\u003e. Often, this will be a new class. However, new instances of the\n\u003ca href=\"https://docs.ruby-lang.org/en/2.0.0/Proc.html\"\u003e\u003ccode\u003eProc\u003c/code\u003e\u003c/a\u003e class are run by calling \u003ccode\u003ecall\u003c/code\u003e on them, so one could simply use\na \u003ccode\u003eProc\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll this method needs to do is return an \u003ccode\u003eArray\u003c/code\u003e with three elements:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eHTTP Status code\u003c/a\u003e where \u003ccode\u003e200\u003c/code\u003e is used for \u003ccode\u003eOK\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA \u003ccode\u003eHash\u003c/code\u003e with a \u003ccode\u003e\"Content-Type\"\u003c/code\u003e key that returns the value (for HTML-based\ndocuments) of \u003ccode\u003etext/html\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eSomething that responds to \u003ccode\u003eeach\u003c/code\u003e which contains the multiple lines of a\ndocument of the \u003ccode\u003e\"Content-Type\"\u003c/code\u003e's type (here, \u003ccode\u003eString\u003c/code\u003es that look like HTML:\n\u003ccode\u003e\"\u0026lt;p\u0026gt;Like this!\u0026lt;/p\u0026gt;\"\u003c/code\u003e. The most common \"each-able\" thing is an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHere's a sample that returns HTML:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[200, {\"Content-Type\" =\u0026gt; \"text/html\"}, [\"Hello \u0026lt;em\u0026gt;World\u0026lt;/em\u0026gt;!\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e[200, {\"Content-Type\" =\u0026gt; \"plain/text\"}, [\"Hello World!\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn real life, we tend to read HTML content from a file...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehtml_from_file = File.open(\"my_html.html\").readlines\u003cbr\u003e[200, {\"Content-Type\" =\u0026gt; \"plain/text\"}, html_from_file]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCreating a Rack-Based Web Server\u003c/h2\u003e\n\n\u003cp\u003eUsing this, let's create a basic web app. Follow along with the below instructions. \u003c/p\u003e\n\n\u003cp\u003eLet's create a file called \u003ccode\u003efirst.ru\u003c/code\u003e. Files that are used by Rack end with\n\u003ccode\u003e.ru\u003c/code\u003e instead of \u003ccode\u003e.rb\u003c/code\u003e because they're normally loaded with a command called\n\u003ccode\u003erackup\u003c/code\u003e. It's a way to say \"Hey this is a server definition\" to anyone\ncasually using \u003ccode\u003els\u003c/code\u003e in the directory.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'rack'\u003cbr\u003e\u003cbr\u003e# Instances of Proc automatically have a call method that runs the block that\u003cbr\u003e# they're initialized with.\u003cbr\u003emy_server = Proc.new do\u003cbr\u003e  [200, { 'Content-Type' =\u0026gt; 'text/html' }, ['\u0026lt;em\u0026gt;Hello\u0026lt;/em\u0026gt;']]\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003erun my_server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun this code by executing, from the command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ rackup first.ru\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRack will print out something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[2019-10-28 12:04:12] INFO  WEBrick 1.4.2\u003cbr\u003e[2019-10-28 12:04:12] INFO  ruby 2.6.3 (2019-04-16) [x86_64-darwin17]\u003cbr\u003e[2019-10-28 12:04:12] INFO  WEBrick::HTTPServer#start: pid=5567 port=9292\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u0026gt;Note: If you're using the Learn IDE, you won't be able to get to your website\n\u0026gt;with \u003ccode\u003elocalhost\u003c/code\u003e. Instead, you'll see a line that looks something like this -\n\u0026gt;\u003ccode\u003eStarting server on 159.203.101.28:30001\u003c/code\u003e. To see the webpage, just go to\n\u0026gt;\u003ccode\u003e159.203.101.28:30001\u003c/code\u003e in your web browser. Anywhere these instructions tell\n\u0026gt;you to go to \u003ccode\u003elocalhost\u003c/code\u003e, replace that with this IP address instead!\u003c/p\u003e\n\n\u003cp\u003eLet's deconstruct this URL a little bit though. The URL is\n\u003ccode\u003ehttp://localhost:9292/\u003c/code\u003e. The protocol is \u003ccode\u003ehttp\u003c/code\u003e. That makes sense, but the\ndomain is \u003ccode\u003elocalhost:9292\u003c/code\u003e. What's going on there? \u003ccode\u003elocalhost\u003c/code\u003e is normally where\na server like \u003ccode\u003egoogle.com\u003c/code\u003e goes. In this case, since you are running the server\non your computer, \u003ccode\u003elocalhost\u003c/code\u003e is the server name of your own computer. Nobody\nelse can get that URL though. That's good for right now. This allows you to play\naround with writing websites without the security concerns of opening it up to\nthe entire web. The last part of that URL is the \u003ccode\u003e:9292\u003c/code\u003e section. This the \"port\nnumber\" of your server. Don't worry too much about this, but you may want to run\nmultiple servers on one computer and having different ports allows them to be\nrunning simultaneously without conflicting.\u003c/p\u003e\n\n\u003cp\u003eThe resource that you are requesting is \u003ccode\u003e/\u003c/code\u003e. This is effectively like saying the\nhome or default.  If you're doing local development, you should be able to go to\n\u003ccode\u003ehttp://localhost:9292/\u003c/code\u003e and see \u003cem\u003eHello\u003c/em\u003e printed out by your web server!\u003c/p\u003e\n\n\u003cp\u003eFeel free to change \u003ccode\u003efirst.ru\u003c/code\u003e to add changes to your web server. If you make\nchanges to \u003ccode\u003efirst.ru\u003c/code\u003e \u003cstrong\u003e\u003cem\u003eyou'll have to shut down the server (Control-C) and\nre-start it to see the changes\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eInterestingly, we can swap out the simple \u003ccode\u003eProc\u003c/code\u003e for a \u003cem\u003eclass\u003c/em\u003e. So long as it\nresponds to \u003ccode\u003e#call\u003c/code\u003e, Rack will let us make a substitution.\u003c/p\u003e\n\n\u003cp\u003eCreate a new file called \u003ccode\u003esecond.ru\u003c/code\u003e and fill it out like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'rack'\u003cbr\u003e\u003cbr\u003e# Something that responds to call, that's what Rack demands\u003cbr\u003eclass MyServer\u003cbr\u003e  def call(env)\u003cbr\u003e    return [ 200, {'Content-Type' =\u0026gt; 'text/html'}, pretty_response ]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def pretty_response\u003cbr\u003e    (Time.now.to_i % 2).zero? ?  [\"\u0026lt;em\u0026gt;Hello\u0026lt;/em\u0026gt;\"] : [\"\u0026lt;strong\u0026gt;Hello\u0026lt;/strong\u0026gt;\"]\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003erun MyServer.new\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eStart it up with: \u003ccode\u003erackup second.ru\u003c/code\u003e. Visit the web page and hit refresh\nseveral times. When the present time, as an \u003ccode\u003eInteger\u003c/code\u003e, is even, the output is\nemphatic; when odd, it's strong.\u003c/p\u003e\n\n\u003cp\u003eIt's not too far of a step from this \"conditional\" logic to realize that if a\nweb server knew what was after the \u003ccode\u003e/\u003c/code\u003e in the URL path, it could make\ndecisions, run logic, etc... and change what's displayed in response to what's in\nthe URL. That's basically what web servers do all day long. Rails, Sinatra, any\nweb programming framework is a way to organize the code that fills out that\nthird \u003ccode\u003eArray\u003c/code\u003e element in our Rack responses. Amazing!\u003c/p\u003e\n\n\u003cp\u003eWe could make things look a bit more like a web server by taking our server\ncode out of the \u003ccode\u003erackup\u003c/code\u003e file and put it into a class file. We could create:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./my_server.rb\u003cbr\u003e\u003cbr\u003eclass MyServer\u003cbr\u003e  def call(env)\u003cbr\u003e    return [ 200, {'Content-Type' =\u0026gt; 'text/html'}, pretty_response ]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def pretty_response\u003cbr\u003e    (Time.now.to_i % 2).zero? ?  [\"\u0026lt;em\u0026gt;Hello\u0026lt;/em\u0026gt;\"] : [\"\u0026lt;strong\u0026gt;Hello\u0026lt;/strong\u0026gt;\"]\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd create a new \u003ccode\u003erackup\u003c/code\u003e file: \u003ccode\u003ethird.ru\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative './my_server'\u003cbr\u003erun MyServer.new\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we're honoring the way most Rack applications are built: the server setup\ncode lives in the \u003ccode\u003erackup\u003c/code\u003e file and our application logic lives in a class\nthat's referenced by the \u003ccode\u003erun\u003c/code\u003e command in the \u003ccode\u003erackup\u003c/code\u003e file.\u003c/p\u003e","exportId":"g80abae2a29e212f2abcaa6d19fdf487f"},{"id":203873,"title":"Dynamic Web Apps","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-dynamic-web-apps\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-web-apps/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-web-apps\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-web-apps/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eTranslate a command line Ruby app to a dynamic web app\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#write\u003c/code\u003e method in a \u003ccode\u003eRack::Response\u003c/code\u003e object to make a dynamic web app\nin Rack\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreating a Dynamic Web App\u003c/h2\u003e\n\n\u003cp\u003eMaking web apps that always give the same response are boring. Programming is\nfun because of its ability to create dynamic responses that change depending on\nthe input. A dynamic web app in Rack is pretty straightforward. Let's say we\nwanted to create a simple slots game.\u003c/p\u003e\n\n\u003cp\u003eFirst, let's set up our basic Rack app inside of \u003ccode\u003eapp/application.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    resp.write \"Hello, World\"\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen run it with \u003ccode\u003erackup config.ru\u003c/code\u003e. You should see something like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[2016-07-28 10:09:08] INFO  WEBrick 1.3.1\u003cbr\u003e[2016-07-28 10:09:08] INFO  ruby 2.3.0 (2015-12-25) [x86_64-darwin15]\u003cbr\u003e[2016-07-28 10:09:08] INFO  WEBrick::HTTPServer#start: pid=38967 port=9292\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMake note of \u003ccode\u003eport=9292\u003c/code\u003e — that shows which port we'll access the application on\nin the browser. But what's the host? If we're developing locally, we can just\nuse \u003ccode\u003elocalhost\u003c/code\u003e — so in this case we'd visit \u003ccode\u003ehttp://localhost:9292\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf we're using the IDE, we should also see a line like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStarting server at 104.131.138.76:6868\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat is the full URL to use. (\u003cstrong\u003eYours will most likely be different!\u003c/strong\u003e) So in\nthis case, we'd visit \u003ccode\u003ehttp://104.131.138.76:6868\u003c/code\u003e in the browser. If we're using\nthe IDE, \u003cstrong\u003elocalhost will not work\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen we visit the appropriate URL in our browser, we should see \"Hello, World\".\nLet's liven things up a bit. The amazing part of Rack and everything (like\nRails) that is built on top of Rack is that it's \u003cem\u003ejust Ruby\u003c/em\u003e. If you were\nwriting a command line slots game generator, you would first need to generate\nthree numbers between 1 and 20. You could do that like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Don't sweat the \u003ccode\u003eKernel\u003c/code\u003e bit — \u003ca href=\"http://ruby-doc.org/core-2.3.0/Kernel.html\"\u003eKernel\u003c/a\u003e\nis a module that holds many of Ruby's most useful bits. We're just using it here\nto generate some random numbers.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enum_1 = Kernel.rand(1..20)\u003cbr\u003enum_2 = Kernel.rand(1..20)\u003cbr\u003enum_3 = Kernel.rand(1..20)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, to check to see if you won or not, we'd have an if statement like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enum_1 = Kernel.rand(1..20)\u003cbr\u003enum_2 = Kernel.rand(1..20)\u003cbr\u003enum_3 = Kernel.rand(1..20)\u003cbr\u003e\u003cbr\u003eif num_1==num_2 \u0026amp;\u0026amp; num_2==num_3\u003cbr\u003e  puts \"You Win\"\u003cbr\u003eelse\u003cbr\u003e  puts \"You Lose\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo how do we now make this application work on the web? Almost none of the code\nactually is specific to a command line interface. The only parts that require a\ncommand line are the two \u003ccode\u003eputs\u003c/code\u003e lines. All that needs to change to adapt this\nfor the web is a different way than \u003ccode\u003eputs\u003c/code\u003e to express output to our user.\nBecause this is the web, that means adding it to our response. Instead of \u003ccode\u003eputs\u003c/code\u003e\nnow we'll use the \u003ccode\u003e#write\u003c/code\u003e method in our \u003ccode\u003eRack::Response\u003c/code\u003e object.\u003c/p\u003e\n\n\u003cp\u003eRemember that to modify our web server, we have to first exit out of the running\nserver by typing CTRL-C. Then open up your Application and modify it to look\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e\u003cbr\u003e    num_1 = Kernel.rand(1..20)\u003cbr\u003e    num_2 = Kernel.rand(1..20)\u003cbr\u003e    num_3 = Kernel.rand(1..20)\u003cbr\u003e\u003cbr\u003e    if num_1==num_2 \u0026amp;\u0026amp; num_2==num_3\u003cbr\u003e      resp.write \"You Win\"\u003cbr\u003e    else\u003cbr\u003e      resp.write \"You Lose\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we only changed the \u003ccode\u003eputs\u003c/code\u003e statements into \u003ccode\u003eresp.write\u003c/code\u003e statements.\nThat's it! Web servers are just big ruby apps that respond to the user in an\nHTTP response rather than via \u003ccode\u003eputs\u003c/code\u003e statements. Let's give the user a bit more\ninformation about what numbers they received by writing the numbers to the\nresponse as well. The \u003ccode\u003e#write\u003c/code\u003e method can be called many times to build up the\nfull response. The response isn't sent back to the user until \u003ccode\u003e#finish\u003c/code\u003e is\ncalled.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e\u003cbr\u003e    num_1 = Kernel.rand(1..20)\u003cbr\u003e    num_2 = Kernel.rand(1..20)\u003cbr\u003e    num_3 = Kernel.rand(1..20)\u003cbr\u003e\u003cbr\u003e    resp.write \"#{num_1}\\n\"\u003cbr\u003e    resp.write \"#{num_2}\\n\"\u003cbr\u003e    resp.write \"#{num_3}\\n\"\u003cbr\u003e\u003cbr\u003e    if num_1==num_2 \u0026amp;\u0026amp; num_2==num_3\u003cbr\u003e      resp.write \"You Win\"\u003cbr\u003e    else\u003cbr\u003e      resp.write \"You Lose\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\\n\u003c/code\u003es are just a special character which gets rendered by the browser as a\nnew line. Kill your running server with CTRL-C and re-run it and refresh your\nbrowser. Feel free to cheat a bit and change the random numbers to just be\nbetween one and two. That way you can test that both work.\u003c/p\u003e","exportId":"gf95956e2aed18931c1b1bab8860b3f1b"},{"id":203874,"title":"Rack Responses Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-responses-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-responses-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-responses-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-responses-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eLet's create a quick time-appropriate greeter application\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eEdit your code in \u003ccode\u003eapp/application.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCreate your application with the following conditions:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIf it's before noon, greet the user with \"Good Morning!\"\u003c/li\u003e\n\u003cli\u003eIf it's after noon, greet the user with \"Good Afternoon!\". Remember that\n getting the time may return results in 24 hour time! Anytime on or after 12\n is the afternoon.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g806b245ebb4565da1af45fae9b69817b"},{"id":203875,"title":"HTTP Requests","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-http-request-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-http-request-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-http-request-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-http-request-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine the path in an HTTP request\u003c/li\u003e\n\u003cli\u003eDefine the \u003ccode\u003eenv\u003c/code\u003e variable in an HTTP request\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003epath\u003c/code\u003e method to filter HTTP requests\u003c/li\u003e\n\u003cli\u003eDescribe \u003ccode\u003eGET\u003c/code\u003e parameters and how they allow web applications to handle user queries\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHTTP Requests\u003c/h2\u003e\n\n\u003cp\u003eAn HTTP Request that our browser sends to the server contains two main sections of information. One is headers and the other section is the resource or path requested (for example, \u003ccode\u003e/search\u003c/code\u003e or \u003ccode\u003e/profile_name\u003c/code\u003e). Let's break down the second section since there's a lot of information that can be stored in it! \u003c/p\u003e\n\n\u003ch2\u003eThe Path\u003c/h2\u003e\n\n\u003cp\u003eThe path that is requested is the resource that the client wants. Since your server can contain a lot of functionality, the path signifies which specific part of your server it wants. If we were creating a simple shopping cart application, for example, we can think of a few different paths that are required:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ePath\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e/items\u003c/td\u003e\n\u003ctd\u003eList all items available\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e/cart\u003c/td\u003e\n\u003ctd\u003eList items in cart\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eHow would we implement this in our Rack app? The path lives in the HTTP request, and to get to it we have to inspect the \u003ccode\u003eenv\u003c/code\u003e part of our \u003ccode\u003e#call\u003c/code\u003e function. In the \u003ccode\u003eenv\u003c/code\u003e variable is all of the information contained in the request. Thankfully, Rack has a great way of parsing all this information for us. It looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis \u003ca href=\"http://www.rubydoc.info/gems/rack/Rack/Request\"\u003eRack::Request\u003c/a\u003e instance now has a ton of useful methods. If we look through the documentation, it has a method called \u003ccode\u003e#path\u003c/code\u003e. This will return the path that was requested. \u003c/p\u003e\n\n\u003cp\u003eBefore we inspect the \u003ccode\u003e#path\u003c/code\u003e, let's set up what we would do if someone wanted to see all of our items:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@items = [\"Apples\",\"Carrots\",\"Pears\"]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    @@items.each do |item|\u003cbr\u003e      resp.write \"#{item}\\n\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you're on a local environment, you can take it a step further and customize the response based on which specific path you enter. For example, right now the code above will list all of your items \u003cem\u003eno matter what path you put in\u003c/em\u003e. You can give it a try by using the code to create your Rack file. Type \u003ccode\u003elocalhost:9292/items\u003c/code\u003e, \u003ccode\u003elocalhost:9292/cart\u003c/code\u003e, \u003ccode\u003elocalhost:9292/flatiron/is/awesome\u003c/code\u003e. All of those URLs work since we're not filtering for path. No matter what the request is, we end up sending the same response. Let's filter so that this only works for the \u003ccode\u003e/items\u003c/code\u003e path using the \u003ccode\u003e#path\u003c/code\u003e method of our \u003ccode\u003eRack::Request\u003c/code\u003e object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@items = [\"Apples\",\"Carrots\",\"Pears\"]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path.match(/items/)\u003cbr\u003e      @@items.each do |item|\u003cbr\u003e        resp.write \"#{item}\\n\"\u003cbr\u003e      end\u003cbr\u003e    else\u003cbr\u003e      resp.write \"Path Not Found\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! With this we can now do different things depending on the path.\u003c/p\u003e\n\n\u003ch3\u003eUser Input Via The Path\u003c/h3\u003e\n\n\u003cp\u003eWhat if users wanted to check and see if we have \u003ccode\u003eApples\u003c/code\u003e available in our list of items? How do other websites handle getting user queries? If we go to GitHub and type in \"apples\" in the search query, we get a URL that looks like this: \u003ccode\u003ehttps://github.com/search?q=apples\u003c/code\u003e. We have a domain of \u003ccode\u003egithub.com\u003c/code\u003e, path of \u003ccode\u003esearch\u003c/code\u003e, and then a \u003ccode\u003e?\u003c/code\u003e character. After that character comes \u003ccode\u003eq=apples\u003c/code\u003e. There is our search! \u003c/p\u003e\n\n\u003cp\u003eThe section after the \u003ccode\u003e?\u003c/code\u003e is called the \u003ccode\u003eGET\u003c/code\u003e parameters. If you notice in the above example, \u003ccode\u003eGET\u003c/code\u003e params come in key/value pairs. The key in GitHub's case would be \u003ccode\u003eq\u003c/code\u003e and the value is \u003ccode\u003eapples\u003c/code\u003e. The matching Ruby data structure that is also a key/value store would be a \u003ccode\u003eHash\u003c/code\u003e! Thankfully, Rack provides the mechanism to parse the \u003ccode\u003eGET\u003c/code\u003e params and return them to us in a standard \u003ccode\u003eHash\u003c/code\u003e. If we wanted to implement a \u003ccode\u003e/search\u003c/code\u003e route that accepted a \u003ccode\u003eGET\u003c/code\u003e param with the key \u003ccode\u003eq\u003c/code\u003e it would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@items = [\"Apples\",\"Carrots\",\"Pears\"]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path.match(/items/)\u003cbr\u003e      @@items.each do |item|\u003cbr\u003e        resp.write \"#{item}\\n\"\u003cbr\u003e      end\u003cbr\u003e    elsif req.path.match(/search/)\u003cbr\u003e\u003cbr\u003e      search_term = req.params[\"q\"]\u003cbr\u003e\u003cbr\u003e      if @@items.include?(search_term)\u003cbr\u003e        resp.write \"#{search_term} is one of our items\"\u003cbr\u003e      else\u003cbr\u003e        resp.write \"Couldn't find #{search_term}\"\u003cbr\u003e      end\u003cbr\u003e\u003cbr\u003e    else\u003cbr\u003e      resp.write \"Path Not Found\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e","exportId":"http-requests"},{"id":203876,"title":"Get Params Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-get-params-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-get-params-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-get-params-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-get-params-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've provided the code for a basic list of items. Now it's your turn to extend it.\nDo your work in \u003ccode\u003eapp/application.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eVocabulary Word: \"Route\"\u003c/h2\u003e\n\n\u003cp\u003eIn applications built on Rack, we use the noun \"route\" to to refer to a path\nthat the application has a special response to.\u003c/p\u003e\n\n\u003cp\u003eSo, for example, if we navigated to a \u003ccode\u003e/shoes\u003c/code\u003e route, we would expect the\napplication to show us information about shoes. A \u003ccode\u003e/profile\u003c/code\u003e route might show\ninformation about a user who's logged in to an application. Finally, a \u003ccode\u003e/logout\u003c/code\u003e\nroute might update some information to let the server know the user is no longer\nlogged in.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a new class array called \u003ccode\u003e@@cart\u003c/code\u003e to hold any items in your cart.\u003c/li\u003e\n\u003cli\u003eCreate a new route called \u003ccode\u003e/cart\u003c/code\u003e to show the items in your cart.\u003c/li\u003e\n\u003cli\u003eCreate a new route called \u003ccode\u003e/add\u003c/code\u003e that takes in a \u003ccode\u003eGET\u003c/code\u003e param with the key \u003ccode\u003eitem\u003c/code\u003e. This should check to see if that item is in \u003ccode\u003e@@items\u003c/code\u003e and add it to the cart if it is. Otherwise it should give an error.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g3e4761913f2579099ccee6f70649fd80"},{"id":203877,"title":"Dynamic Paths","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-dynamic-paths-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-paths-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-paths-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-paths-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how dynamic routes prevent web applications from having to be rewritten as new information is added\u003c/li\u003e\n\u003cli\u003eCreate dynamic routes \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Dynamic Routes?\u003c/h2\u003e\n\n\u003cp\u003eWhen you create a new repository on GitHub, how do URLs like \u003ccode\u003egithub.com/jmburges/my-repo\u003c/code\u003e get generated? In our current examples, we would have to create a new \u003ccode\u003eif\u003c/code\u003e statement for each possible URL path. Since this is a dynamic application, our application can't be rewritten every time a new user signs up. So the concept of \"dynamic routes\" was created.\u003c/p\u003e\n\n\u003ch2\u003eSetting Up Dynamic Routes\u003c/h2\u003e\n\n\u003cp\u003eLet's assume we have a playlister app which has an array of Songs. First let's look at our \u003ccode\u003eSong\u003c/code\u003e object\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#song.rb\u003cbr\u003e\u003cbr\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :title, :artist\u003cbr\u003e\u003cbr\u003e  def initialize(title, artist)\u003cbr\u003e    @title = title\u003cbr\u003e    @artist = artist\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePretty simple class. Now we have our web app.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@songs = [Song.new(\"Sorry\", \"Justin Bieber\"),\u003cbr\u003e            Song.new(\"Hello\",\"Adele\")]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    @@songs.each do |song|\u003cbr\u003e      resp.write \"#{song.title}\\n\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe want more information about each song though. Similarily to GitHub, we want to be able to go to a URL like \u003ccode\u003elocalhost:9292/songs/Sorry\u003c/code\u003e and get all the information on Sorry. We are doing routes like this instead of just plain \u003ccode\u003eGET\u003c/code\u003e params because it's easier to read. Remember the path is given to us as a \u003ccode\u003estring\u003c/code\u003e. We could therefore write something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@songs = [Song.new(\"Sorry\", \"Justin Bieber\"),\u003cbr\u003e            Song.new(\"Hello\",\"Adele\")]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path==\"/songs/Sorry\"\u003cbr\u003e      resp.write @@songs[0].artist\u003cbr\u003e    elsif req.path == \"/songs/Hello\"\u003cbr\u003e      resp.write @@songs[1].artist\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is silly though, because every time we create a new \u003ccode\u003eSong\u003c/code\u003e we would have to create a new \u003ccode\u003eif\u003c/code\u003e statement. Thankfully, because paths are \u003ccode\u003estrings\u003c/code\u003e, we can do a regex match against the path. Then we just grab the content after the \u003ccode\u003e/song/\u003c/code\u003e to figure out which \u003ccode\u003eSong\u003c/code\u003e our user would like.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@songs = [Song.new(\"Sorry\", \"Justin Bieber\"),\u003cbr\u003e            Song.new(\"Hello\",\"Adele\")]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path.match(/songs/)\u003cbr\u003e\u003cbr\u003e      song_title = req.path.split(\"/songs/\").last #strip path info to capture just the title\u003cbr\u003e      song = @@songs.find{|s| s.title == song_title}\u003cbr\u003e\u003cbr\u003e      resp.write song.artist\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our routes are dynamic! We can just add songs, and everything else is taken care of and works for us. You have written a lot of Ruby; take comfort in your skills.\u003c/p\u003e","exportId":"dynamic-paths"},{"id":203878,"title":"Status Codes","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-status-codes-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-status-codes-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-status-codes-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-status-codes-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine status codes and what they communicate to a client\u003c/li\u003e\n\u003cli\u003eDescribe the structure and various categories of status codes\u003c/li\u003e\n\u003cli\u003eSet a response's status code in Rack \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Status Codes are Important for the Client\u003c/h2\u003e\n\n\u003cp\u003eStatus codes allow your server to tell something special to the client. The responses you send need to be effective to both a human user and to the browser itself. That means that  response messages like \u003ccode\u003eFile Not Found\u003c/code\u003e or \u003ccode\u003eItem isn't in the cart\u003c/code\u003e work if there is a human to read the English. Browsers also want to know the status of the response. To get that response, the HTTP protocol has an agreed upon contract for different \"status codes\". A status code is a 3-digit integer where the first digit represents the class of the response, and the remaining two digits represent a specific status. There are 5 primary values that the first digit can take.  \u003c/p\u003e\n\n\u003ch3\u003eStatus Code Chart\u003c/h3\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eStatus Number\u003c/th\u003e\n\u003cth\u003eCode/Description\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1xx: Informational (request received and continuing process)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e2xx: Success (request successfully received, understood, and accepted)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e3xx: Redirection (further action must be taken to complete request)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e4xx: Client Error (request contains bad syntax and can't be completed)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e5xx: Server Error (server couldn't complete request)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eYou've probably seen a bunch of these before, the most common being \u003ccode\u003e404\u003c/code\u003e. This means that the server couldn't find the route you requested.\u003c/p\u003e\n\n\u003ch3\u003eStatus Codes in Rack\u003c/h3\u003e\n\n\u003cp\u003eIn Rack, we are able to set the response's status code by just setting the status_code attribute. By default, Rack sets a status code of \u003ccode\u003e200\u003c/code\u003e. But when a user selects a route that doesn't exist, we need to set the \u003ccode\u003estatus\u003c/code\u003e to \u003ccode\u003e404\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path==\"/songs\"\u003cbr\u003e      resp.write \"You requested the songs\"\u003cbr\u003e    else\u003cbr\u003e      resp.write \"Route not found\"\u003cbr\u003e      resp.status = 404\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if you go to \u003ccode\u003elocalhost:9292/badURL\u003c/code\u003e you'll get the error message, and if you open up the Inspect Element navigator you'll see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/rack-status-codes-readme/image1.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eVideo Reviews\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=gI9wqEDPiY0\"\u003eHow the Web Works, Part 1\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=LSUevS1PRTg\"\u003eHow the Web Works, Part 2\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eResources\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.tutorialspoint.com/http/http_status_codes.htm\"\u003eMore on Status Codes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"status-codes"},{"id":203879,"title":"Dynamic Routes","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-dynamic-routes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-routes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-routes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-routes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've provided a basic \u003ccode\u003eItem\u003c/code\u003e class. Let's get more information on our items.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eYour application should only accept the \u003ccode\u003e/items/\u0026lt;ITEM NAME\u0026gt;\u003c/code\u003e route. Everything else should \u003ccode\u003e404\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIf a user requests \u003ccode\u003e/items/\u0026lt;Item Name\u0026gt;\u003c/code\u003e it should return the price of that item\u003c/li\u003e\n\u003cli\u003eIF a user requests an item that you don't have, then return a \u003ccode\u003e400\u003c/code\u003e and an error message\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gfb4852b3addd400499faa60458cbab1f"}]},{"id":22698,"name":"Rack and React - Practice Labs","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"gca8728f2463d28d539067b4724d2d426","items":[{"id":210418,"title":"ToDo App Rack React","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ToDo-app-rack-React\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ToDo-app-rack-React/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ToDo-app-rack-React\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ToDo-app-rack-React/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eGo to \u003ccode\u003efront-end\u003c/code\u003e folder and run:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003ejson-server --watch db.json\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003enpm start\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou will able to see demo of the lab. \u003c/p\u003e  \u003ch2\u003eTasks:\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCurrently, tasks are fetched from the \u003ccode\u003ejson\u003c/code\u003e server. Create \u003ccode\u003eRack\u003c/code\u003e server to provide tasks for the \u003ccode\u003ereact\u003c/code\u003e app\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003eshotgun\u003c/code\u003e command to start the \u003ccode\u003erack\u003c/code\u003e server\u003c/li\u003e \u003cli\u003eCreate \u003ccode\u003etasks\u003c/code\u003e and \u003ccode\u003ecategories\u003c/code\u003e tables and some seeds data to it. Migration are already ready for you.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ecategory\u003c/code\u003e has many \u003ccode\u003etasks\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003etask\u003c/code\u003e belongs to \u003ccode\u003ecategory\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003esend \u003ccode\u003ejson\u003c/code\u003e response back from the \u003ccode\u003erack\u003c/code\u003e server  \u003cul\u003e \u003cli\u003eShow all tasks\u003c/li\u003e \u003cli\u003eCreate a new task\u003c/li\u003e \u003cli\u003eDelete a task\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: You can use \u003ccode\u003epostman\u003c/code\u003e to test your backend. You back-end responses might be little bit slow with only rack server but once we start using rails it would be much faster.\u003c/p\u003e","exportId":"g5e66a38de4fdc11b021b20ee4390a2c5"}]},{"id":21906,"name":"Milestones","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gc027651dbc3de21f4440b7790e5532b4","items":[{"id":203882,"title":"Phase 3 Code Challenge Instructions","type":"WikiPage","indent":0,"locked":false,"requirement":"must_mark_done","completed":true,"content":"\u003cp\u003eBefore you can start working on the code challenge, be sure to follow the steps below:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFind your code challenge in the Phase 3 Milestones module\u003c/li\u003e\n\u003cli\u003eOpen the code challenge assignment and download the linked ZIP file\u003c/li\u003e\n\u003cli\u003eUnzip the file on your computer\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e into the directory in your terminal (after, run \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ls \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;; you should see a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;bin/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory and a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file)\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/start \u0026lt;your-name\u0026gt;\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e from the directory; this will create a new directory called \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e to and open the new \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory in your code editor\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo work on your code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEnsure that you're in the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory\u003c/li\u003e\n\u003cli\u003eFollow the instructions in the \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;README.md \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git add . \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;and \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git commit \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;inside of the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory often as you're working\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo submit the code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNavigate to the parent directory of \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in your terminal.\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/end \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e, which will create a new file, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in that directory (for example, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;alicia.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e).\u003c/li\u003e\n\u003cli\u003eNavigate back to the code challenge assignment in the Phase 1 Milestones module in Canvas\u003c/li\u003e\n\u003cli\u003eUpload \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;to the assignment and submit\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eReach out to your instructors\u0026nbsp;\u003cstrong\u003eimmediately\u0026nbsp;\u003c/strong\u003eif you run into issues downloading, working on, or uploading your code challenge.\u003c/p\u003e\n\u003cp\u003eUse this video to guide you through these instructions:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube-nocookie.com/embed/3AM3qXUtnQY\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e","exportId":"phase-3-code-challenge-instructions"},{"id":210423,"title":" Phase 3 Code Challenge: Movies - with AR","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a file upload","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"phase-3-movies.zip\" href=\"viewer/files/Uploaded%20Media/phase-3-movies.zip?canvas_=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\"\u003ephase-3-movies.zip\u003c/a\u003e\u003c/p\u003e","exportId":"gb6213b53ecd7a0428be32e9e385f8a33"},{"id":222047,"title":"Phase 3 Project - Rack \u0026 React","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Phase_3_Ruby_Group_Project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Phase_3_Ruby_Group_Project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Phase_3_Ruby_Group_Project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Phase_3_Ruby_Group_Project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch3\u003eOption One - \u003cem\u003eData Analytics Project\u003c/em\u003e\n\u003c/h3\u003e  \u003col\u003e \u003cli\u003eAccess a Sqlite3 Database using ActiveRecord.\u003c/li\u003e \u003cli\u003eYou should have at minimum three models including one join model. This means you must have a many-to-many relationship.\u003c/li\u003e \u003cli\u003eYou should seed your database using data that you collect either from a CSV, a website by scraping, or an API.\u003c/li\u003e \u003cli\u003eYour models should have methods that answer interesting questions about the data. For example, if you've collected info about movie reviews, what is the most popular movie? What movie has the most reviews?\u003c/li\u003e \u003cli\u003eYou should provide a simple \u003cstrong\u003eReact\u003c/strong\u003e frontend to display the return values of your interesting methods.\u003c/li\u003e \u003cli\u003eUse good OO design patterns. You should have separate classes for your models\u003c/li\u003e \u003c/ol\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eResource:\u003c/strong\u003e \u003ca href=\"http://github.com/learn-co-curriculum/easy-access-apis\"\u003eEasy Access APIs\u003c/a\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eOption Two - \u003cem\u003eCRUD App\u003c/em\u003e\n\u003c/h3\u003e  \u003col\u003e \u003cli\u003eAccess a Sqlite3 Database using ActiveRecord.\u003c/li\u003e \u003cli\u003eYou should have a minimum of three models.\u003c/li\u003e \u003cli\u003eYou should build out a simple \u003cstrong\u003eReact\u003c/strong\u003e frontend to give your user full CRUD ability for at least one of your resources. For example, build out a To-Do list. A user should be able to create a new to-do, see all todos, update a todo item, and delete a todo. Todos can be grouped into categories, so that a to-do has many categories and categories have many to-dos.\u003c/li\u003e \u003cli\u003eUse good OO design patterns. You should have separate classes for your models.  Getting started Clone down this repository to use as your backend. The rack folder has all of the basics for a rack application.  The application.rb has an example GET route.  Run the rack server\u003cbr\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eGetting Started\u003c/h3\u003e  \u003col\u003e \u003cli\u003eClone down this repository.\u003cbr\u003e\n\u003c/li\u003e \u003cli\u003eA basic rack app is located in the backend folder. \u003c/li\u003e \u003cli\u003eFirst run \u003cem\u003ebundle\u003c/em\u003e in your backend folder to install your gems\u003c/li\u003e \u003cli\u003eapplication.rb has an example GET route, replace this route with routes for your project! \u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eStart your server with:\u003c/strong\u003e \u003ccode\u003eshotgun --port=9292\u003c/code\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e This will run your server on port \u003ca href=\"http://localhost:9292\"\u003ehttp://localhost:9292\u003c/a\u003e.  \u003ca href=\"https://github.com/rtomayko/shotgun\"\u003eshotgun\u003c/a\u003e is a ruby gem that will automatic reload your rack server. You may still need to refresh your browser to see changes. \u003c/p\u003e \u003c/blockquote\u003e  \u003col\u003e \u003cli\u003eYour backend and your frontend should be in two different repositories. Create a new repository with a react app for your frontend. \u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eFetch example\u003c/strong\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eYour react app should make fetch requests to your rack backend! \u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003e   fetch(\"http://localhost:9292/test\")\u003cbr\u003e    .then(res =\u0026gt; res.json())\u003cbr\u003e    .then(console.log) \u003c/code\u003e\u003c/pre\u003e","exportId":"g6e01aeda86bde6b206df9c37fd388242"}]}],"pages":[{"exportId":"oo-design-principles","title":"OO Design Principles","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-complex-objects-design-principles\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-design-principles/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-design-principles\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-design-principles/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine \"design\" in the context of coding.\u003c/li\u003e\n\u003cli\u003eExplain why design principles are important for you as a programmer.\u003c/li\u003e\n\u003cli\u003eLearn some of the basic design principles that object-oriented programmers employ.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is Code Design and Why Implement It?\u003c/h2\u003e\n\n\u003cp\u003eA program's \u003cem\u003edesign\u003c/em\u003e refers to the manner in which you, the programmer, organize\nand arrange the code of which it is constituted. The manner in which you arrange\nyour code may seem incidental to the overarching objective of writing code that\n\u003cem\u003eworks\u003c/em\u003e, of creating a program that behaves as you want and need it to.\nImplementing design principles, however, is not incidental to writing working\ncode, it is the manner in which you will ensure that the code you write will\ncontinue to work in the future.\u003c/p\u003e\n\n\u003cp\u003eAs programmers, we must code for the future. What does that mean? It means that,\ninevitably, our programs will grow and require change. Let's say you wrote a\nsuper cool web application that becomes wildly popular––how will your program\nchange to accommodate more users and more traffic and the needs of those users?\nOn the other hand, let's say you build an amazing application for a client who\nthen changes their mind about an important feature. What do you do? Scrap all of\nyour work and begin again? By writing code that is flexible and accommodates\nchange, you won't have to.\u003c/p\u003e\n\n\u003cp\u003eThere is another reason why we value design principles as object-oriented\nprogrammers — our own happiness. Especially as Rubyists, working in a\nlanguage specifically designed to be a pleasure to work with, we care about\nmaking programs that are a pleasure to code and a pleasure for others to work\nwith.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e... we need to focus on humans, on how humans care about doing programming or operating the application of the machines.\u003c/p\u003e\n\n\u003cp\u003e-Yukihiro Matsumoto,  \u003cem\u003eThe Philosophy of Ruby, A Conversation with Yukihiro Matsumoto, Part I\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs programmers, we combine the functions of inventors and artists and the code\nwe write should be designed to function well, be flexible to accommodate future\nchange, and be organized in a sensical, logical, even beautiful way. In the\nwords of Sandi Metz, author of Practical Object-Oriented Design in Ruby\n(POODR),\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWe are modern craftspeople, building structures that make up present-day reality, and no less than bricklayers or bridge builders, we take justifiable pride in our accomplishments.\u003c/p\u003e\n\n\u003cp\u003e-Sandi Metz, \u003cem\u003ePractical Object-Oriented Design in Ruby\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eBasic Design Principles\u003c/h2\u003e\n\n\u003cp\u003eThe study of and refinement of the principles of object-oriented design will\ntake place over decades of a programmer's life and career. This reading is meant\nto function as a very basic introduction to the what and why of object-oriented\ndesign. Here, we'll briefly discuss some of the basic principles. Keep these\nprinciples in mind as you continue to learn more about object-oriented Ruby and\nrevisit them in your future work.\u003c/p\u003e\n\n\u003ch3\u003eWhat are Object-Oriented Design Principles?\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDesign is not the act of following a fixed set of rules, it’s a journey along a\nbranching path wherein earlier choices close off some options and open access\nto others. During design you wander through a maze of requirements where every\njuncture represents a decision point that has consequences for the future. Just\nas a sculptor has chisels and files, an object-oriented designer has tools\n— principles and patterns.\u003c/p\u003e\n\n\u003cp\u003e-Sandi Metz, \u003cem\u003ePrinciples of Object-Oriented Design\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eThe Single Responsibility Principle and Separation of Concerns\u003c/h3\u003e\n\n\u003cp\u003eThe single responsibility principle is the idea that classes in object-oriented\nprogramming should have one job, one responsibility, and their services (i.e.,\nmethods) should be narrowly aligned with that responsibility. This principle\ngoes hand in hand with the separation of concerns — the idea that the\nvarious responsibilities, or concerns, of a computer program should be separated\nout into discrete sections.\u003c/p\u003e\n\n\u003cp\u003eLet's take the example of an online shopping web application. Such an\napplication has a number of jobs to handle: we need to have users that sign in\nand purchase items, we have the items themselves that we are selling, we likely\nhave a shopping cart as well. We could develop an application that takes care of\nall of these jobs in the following manner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MyStore\u003cbr\u003e\u003cbr\u003e  def sign_in(user)\u003cbr\u003e    @user = user\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def current_user\u003cbr\u003e    @user\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def item(item)\u003cbr\u003e    @item = item\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def item_price=(item, price)\u003cbr\u003e    @item_price = price\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  def shopping_cart\u003cbr\u003e    @shopping_cart = []\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_item_to_cart(item)\u003cbr\u003e    @shopping_cart \u0026lt;\u0026lt; item\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, our code starts to deteriorate relatively quickly. How can we\ngive an item a price? How can we retrieve that price later? What happens when\nour program needs to grow to accommodate a feature like coupons? Will we\ncontinue to add code to this one file? What happens if our program breaks? How\nwill we determine which of our many methods is responsible for the bug?\u003c/p\u003e\n\n\u003cp\u003eInstead, we want to separate the concerns, or responsibilities, of such an\napplication, wrapping each concern in its own class that produces its own\nobjects. We could write a \u003ccode\u003eUser\u003c/code\u003e class, an \u003ccode\u003eItem\u003c/code\u003e class and a \u003ccode\u003eShoppingCart\u003c/code\u003e\nclass. The \u003ccode\u003eUser\u003c/code\u003e class should be responsible for assigning a user a name and\nother details and signing a user in and out. The \u003ccode\u003eItem\u003c/code\u003e class should have\nmethods that describe an item's attributes, including its price. The\n\u003ccode\u003eShoppingCart\u003c/code\u003e class can collect individual item objects and total their price\nat the time of checkout. By creating classes with their own responsibilities, we\ncreate an application that is organized, logical, and accommodates future\nchange. We also create a program that doesn't give us a headache to even look\nat.\u003c/p\u003e\n\n\u003ch3\u003eAbstraction and Don't Repeat Yourself (DRY)\u003c/h3\u003e\n\n\u003cp\u003eAnother basic OO principle is that of DRY. If you find yourself repeating the\nsame lines of code again and again, that is a good candidate for refactoring. As\nprogrammers, we are lazy (in a good way!), we are always looking for ways to\nachieve the desired behavior by writing less code, and we hate to repeat\nourselves. Let's take a look at an example by revisiting our online shopping\napplication.\u003c/p\u003e\n\n\u003cp\u003eLately, our client has been offering a variety of discounts. At the time of\ncheckout, a user can tell our application that they have a 10, 25, or 50 percent\ndiscount. So, our program needs to determine if a user has a discount and then\napply it, if present. Let's take a look at the \u003ccode\u003echeckout\u003c/code\u003e method of our\n\u003ccode\u003eShoppingCart\u003c/code\u003e class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef checkout(discount=0)\u003cbr\u003e  total = 0\u003cbr\u003e  #the shopping_cart method holds an array of all the user's items\u003cbr\u003e  shopping_cart.each do |item|\u003cbr\u003e    total += item.price\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  if discount == 10\u003cbr\u003e    total = total - total * 10 / 100.00\u003cbr\u003e  elsif discount == 20\u003cbr\u003e    total = total - total * 20 / 100.00\u003cbr\u003e  elsif discount == 50\u003cbr\u003e    total = total - total * 50 / 100.00\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  total\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above method, we are using an if/elsif statement to determine what kind\nof discount a user has, if any, and then doing some math to calculate the\nappropriate total. In order to take a discount into account, we are using six\nlines of code every time we check out a user! That's a lot of repetition.\nAdditionally, what if our application needs to apply coupons to a user's total\n\u003cem\u003ebefore\u003c/em\u003e they check out? Maybe our client has decided to give their users 20% on\ntheir current total if they refer a friend to the site. We would have to use the\nsame if/elsif statement elsewhere in our code. That's a lot of code to\nconstantly re-type.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e If you find yourself copy/pasting the same lines of code more than\nthree times in order to re-use it throughout your program, consider it a \"code\nsmell\". A code smell is a sign that you should refactor.\u003c/p\u003e\n\n\u003cp\u003eLet's refactor this by creating a \u003ccode\u003ecoupon\u003c/code\u003e attr_accessor. Then, our checkout\nmethod can simply use the coupon method to help it calculate the user's total:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass ShoppingCart\u003cbr\u003e  attr_accessor :coupon\u003cbr\u003e\u003cbr\u003e  def checkout\u003cbr\u003e    total = 0\u003cbr\u003e    #the shopping_cart method holds an array of all the user's items\u003cbr\u003e    shopping_cart.each do |item|\u003cbr\u003e      total += item.price\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    if coupon\u003cbr\u003e      total = total - total * coupon / 100.00\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    total\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've achieved the same behavior with less code. This refactor has the added\nbenefit of being \u003cem\u003eflexible\u003c/em\u003e, meaning it will accommodate future change. If our\nclient decides to add a new type of coupon, a 23% off discount, the coupon\nmethod, having \u003cem\u003eabstracted\u003c/em\u003e away the value of the coupon, will still work. This\nis the benefit of abstraction, and we prefer abstracting out attributes by\nwrapping them inside methods over having our code rely on literal values.  \u003c/p\u003e\n\n\u003cp\u003eOur new \u003ccode\u003ecoupon\u003c/code\u003e method is what is referred to as a \u003cstrong\u003ehelper method\u003c/strong\u003e. It\nfunctions to assist our \u003ccode\u003echeckout\u003c/code\u003e method and is called inside the checkout\nmethod.\u003c/p\u003e\n\n\u003ch3\u003eLine Limits on Methods and Classes\u003c/h3\u003e\n\n\u003cp\u003eAnother OO principle states that methods should not exceed 5 lines of code and\nclasses should not exceed 100. While these principles are not hard and fast\nrules, they should guide us whenever possible. We should always be on the\nlookout for ways to pare down our code. Let's take another look at our\n\u003ccode\u003echeckout\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef checkout\u003cbr\u003e    total = 0\u003cbr\u003e    #the shopping_cart method holds an array of all the user's items\u003cbr\u003e    shopping_cart.each do |item|\u003cbr\u003e      total += item.price\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    if coupon\u003cbr\u003e      total = total - total * coupon / 100.00\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    total\u003cbr\u003e\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we are trying to collect the prices of every item in our cart. We\nare doing so by creating a new variable, \u003ccode\u003etotal\u003c/code\u003e, setting it equal to 0,\niterating over the array of items and incrementing the \u003ccode\u003etotal\u003c/code\u003e by the price of\neach item. That's a lot of code! This code has what we might term a \"code smell\"\n— we are using several lines of code just to find the sum of a set of\nnumbers. This seems like a simple and common task that shouldn't require this\nmuch work.\u003c/p\u003e\n\n\u003cp\u003eSure enough, a quick google search of \"sum an array of values ruby\" returns some\ninfo on the\n\u003ca href=\"http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-inject\"\u003e\u003ccode\u003einject\u003c/code\u003e method\u003c/a\u003e.\nLet's implement our refactor:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef checkout\u003cbr\u003e  total = shopping_cart.inject {|sum, item| sum + item.price}\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThis has been a very brief intro into the what, why and how of design principles\nin object-oriented Ruby. These principles are meant to guide you, not limit you.\nThese principles are also just the very tip of the OO design iceberg. You'll\nlearn more about design over the remainder of this course and you'll learn even\nmore about design over the course of the rest of your programming life. Check\nout the resource below, Sandi Metz's book on object-oriented design, to go\ndeeper. This book is a great resource. It is highly respected among\nobject-oriented Rubyists and you'll likely encounter the principles she\ndiscusses in your professional programming life. Even if you don't read it all\nnow, try the first few chapters and then go deeper into it after you've learned\nmore.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.poodr.com/\"\u003ePrinciples of Object-Oriented Design in Ruby, an Agile Primer - Sandi Metz\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-configuring-ruby-applications","title":"Introduction to Configuring Ruby Applications","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-building-applications-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe have a number of outside resources we leverage in working with our Ruby\napplications. For example, RSpec is a Ruby-specific library, or \u003cem\u003egem\u003c/em\u003e. We\nleverage this testing tool for behavior-driven testing. As we start to build out\nmore complex applications, it's standard to utilize libraries and other\nconventions for setting up Ruby applications. This will not only save time, but\nwill also offer a common template, that becomes familiar to Ruby developers.\u003c/p\u003e\n\n\u003cp\u003eWe'll cover topics including:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat is bundler?\u003c/li\u003e\n\u003cli\u003eWhat is a gem?\u003c/li\u003e\n\u003cli\u003eHow do gems work?\u003c/li\u003e\n\u003cli\u003eWhat is require?\u003c/li\u003e\n\u003cli\u003eWhy do we use require_relative?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next couple of lessons, we'll explain these tools and concepts that have\nbeen designed for efficiency.\u003c/p\u003e","frontPage":false},{"exportId":"sql-grouping-and-sorting","title":"SQL Grouping and Sorting","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-grouping-and-sorting-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-grouping-and-sorting-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-grouping-and-sorting-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-grouping-and-sorting-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain the importance of grouping and sorting data stored in a database\u003c/li\u003e\n\u003cli\u003eGroup and sort data with the \u003ccode\u003eGROUP BY()\u003c/code\u003e and \u003ccode\u003eORDER BY()\u003c/code\u003e keywords\u003c/li\u003e\n\u003cli\u003eCraft advanced queries using aggregator functions along with sorting keywords\nand other conditional clauses\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eGrouping and Sorting\u003c/h2\u003e\n\n\u003cp\u003eSQL isn't picky about how it returns data to you, based on your queries. It will\nsimply return the relevant table rows in the order in which they exist in the\ntable. This is often insufficient for the purposes of data analysis and\norganization.\u003c/p\u003e\n\n\u003cp\u003eHow common is it to order a list of items alphabetically? Or numerically from\nleast to greatest?\u003c/p\u003e\n\n\u003cp\u003eWe can tell our SQL queries and aggregate functions to group and sort our data\nusing several clauses:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eORDER BY()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLIMIT\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGROUP BY()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eHAVING\u003c/code\u003e and \u003ccode\u003eWHERE\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eASC\u003c/code\u003e/\u003ccode\u003eDESC\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's take a closer look at how we use these keywords to narrow our search\ncriteria as well as to order and group the results.\u003c/p\u003e\n\n\u003ch2\u003eSetting up the Database\u003c/h2\u003e\n\n\u003cp\u003eSome cats are very famous, and accordingly very wealthy. Our Pets Database will\nhave a \u003ccode\u003ecats\u003c/code\u003e table in which each cat has a name, age, breed, and net worth. Our\ndatabase will also have an \u003ccode\u003eowners\u003c/code\u003e table and \u003ccode\u003ecats_owners\u003c/code\u003e join table so that a\ncat can have many owners and an owner can have many cats.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCreating the Database:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn your terminal, create the database and start \u003ccode\u003esqlite3\u003c/code\u003e with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eCreating the tables:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eCreate the tables by entering the commands below at the \u003ccode\u003esqlite\u0026gt;\u003c/code\u003e prompt:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecats\u003c/code\u003e table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT,\u003cbr\u003enet_worth INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eowners\u003c/code\u003e Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecats_owners\u003c/code\u003e Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats_owners (\u003cbr\u003ecat_id INTEGER,\u003cbr\u003eowner_id INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eInserting the values:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFinally, to insert the values, enter the following:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecats\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (id, name, age, breed, net_worth) VALUES (1, \"Maru\", 3, \"Scottish Fold\", 1000000);\u003cbr\u003eINSERT INTO cats (id, name, age, breed, net_worth) VALUES (2, \"Hana\", 1, \"Tabby\", 21800);\u003cbr\u003eINSERT INTO cats (id, name, age, breed, net_worth) VALUES (3, \"Grumpy Cat\", 4, \"Persian\", 181600);\u003cbr\u003eINSERT INTO cats (id, name, age, breed, net_worth) VALUES (4, \"Lil\\' Bub\", 2, \"Tortoiseshell\", 2000000);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eowners\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"mugumogu\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Sophie\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Penny\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecats_owners\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (2, 2);\u003cbr\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (4, 3);\u003cbr\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (1, 2);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along I: \u003ccode\u003eORDER BY()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003ch4\u003eSyntax\u003c/h4\u003e\n\n\u003cp\u003eThe general syntax for selecting values and sorting them is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name, column_name\u003cbr\u003eFROM table_name\u003cbr\u003eORDER BY column_name ASC, column_name DESC;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that \u003ccode\u003eORDER BY()\u003c/code\u003e will automatically sort the returned values in\nascending order so the use of the \u003ccode\u003eASC\u003c/code\u003e keyword is optional. If we want\nto sort in descending order instead, we need to use the \u003ccode\u003eDESC\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch4\u003eExercise\u003c/h4\u003e\n\n\u003cp\u003eImagine you're working for an important investment firm in Manhattan. The\ninvestors are interested in investing in a lucrative and popular cat. They need\nyour help to decide which cat that will be. They want a list of famous and\nwealthy cats. We can do that by running a basic \u003ccode\u003eSELECT\u003c/code\u003e statement at the\n\u003ccode\u003esqlite\u0026gt;\u003c/code\u003e prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE net_worth \u0026gt; 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid           name             age         breed          net_worth\u003cbr\u003e-----------  ---------------  ----------  -------------  ----------\u003cbr\u003e1            Maru             3           Scottish Fold  1000000\u003cbr\u003e2            Hana             1           Tabby          21800\u003cbr\u003e3            Grumpy Cat       4           Persian        181600\u003cbr\u003e4            Lil\\' Bub        2           Tortoiseshell  2000000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur investors are busy people though. They don't have time to manually sort\nthrough this list of cats for the best candidate. They want you to return the\nlist to them with the cats sorted by net worth, from greatest to least.  \u003c/p\u003e\n\n\u003cp\u003eWe can do so with the following line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY(net_worth) DESC;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid           name             age         breed          net_worth\u003cbr\u003e-----------  ---------------  ----------  -------------  ----------\u003cbr\u003e4            Lil\\' Bub        2           Tortoiseshell  2000000\u003cbr\u003e1            Maru             3           Scottish Fold  1000000\u003cbr\u003e3            Grumpy Cat       4           Persian        181600\u003cbr\u003e2            Hana             1           Tabby          21800\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along II: The \u003ccode\u003eLIMIT\u003c/code\u003e Keyword\u003c/h3\u003e\n\n\u003cp\u003eTurns out our investors are very impatient. They don't want to review the list\nthemselves, they just want you to return to them the wealthiest cat. We can\naccomplish this by using the \u003ccode\u003eLIMIT\u003c/code\u003e keyword with the above query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY(net_worth) DESC LIMIT 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich will return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             age         breed          net_worth\u003cbr\u003e---------------  ----------  -------------  ----------\u003cbr\u003eLil\\' Bub        2           Tortoiseshell  2000000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eLIMIT\u003c/code\u003e keyword specifies how many of the records resulting from the query\nyou'd like to actually return. In this case, because we've sorted the records\nin descending order by net worth and set the \u003ccode\u003eLIMIT\u003c/code\u003e to 1, the wealthiest cat\nis returned.\u003c/p\u003e\n\n\u003ch3\u003eCode Along III: \u003ccode\u003eGROUP BY()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eGROUP BY()\u003c/code\u003e keyword is very similar to \u003ccode\u003eORDER BY()\u003c/code\u003e. The main difference is\nthat \u003ccode\u003eORDER BY()\u003c/code\u003e sorts sets of data returned by basic queries while \u003ccode\u003eGROUP BY()\u003c/code\u003e\nsorts sets of data returned by aggregate functions.\u003c/p\u003e\n\n\u003ch4\u003eSyntax\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name, aggregate_function(column_name)\u003cbr\u003eFROM table_name\u003cbr\u003eWHERE column_name operator value\u003cbr\u003eGROUP BY column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eExercise\u003c/h4\u003e\n\n\u003cp\u003eLet's calculate the sum of the net worth of all of the cats, grouped by owner name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT owners.name, SUM(cats.net_worth)\u003cbr\u003eFROM owners\u003cbr\u003eINNER JOIN cats_owners\u003cbr\u003eON owners.id = cats_owners.owner_id\u003cbr\u003eJOIN cats ON cats_owners.cat_id = cats.id\u003cbr\u003eGROUP BY owners.name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.name      SUM(cats.net_worth)\u003cbr\u003e---------------  -------------------\u003cbr\u003ePenny            2000000\u003cbr\u003eSophie           1021800\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If you have headers turned on, the headers you see in your terminal\nmay differ from the ones displayed here and below.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn the above query, we've implemented \u003cem\u003etwo\u003c/em\u003e joins. First, we're joining \u003ccode\u003eowners\u003c/code\u003e\nand \u003ccode\u003ecat_owners\u003c/code\u003e on \u003ccode\u003eowners.id = cats_owners.owner_id\u003c/code\u003e. This first joined table\nwould look like the following if we were to query it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.id  owners.name      cat_owners.cat_id  cat_owners.owner_id\u003cbr\u003e---------  -----------      -----------------  -------------------\u003cbr\u003e2          Sophie           2                  2\u003cbr\u003e3          Penny            4                  3\u003cbr\u003e2          Sophie           1                  2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this table, we then implement a \u003cem\u003esecond\u003c/em\u003e join with \u003ccode\u003ecats\u003c/code\u003e on\n\u003ccode\u003ecats_owners.cat_id = cats.id\u003c/code\u003e. To better understand this, try running the\nprovided query, but select \u003cem\u003eeverything\u003c/em\u003e rather than just the owner's name and\nthe sum of their cats' net worth, and remove the \u003ccode\u003eGROUP BY\u003c/code\u003e line. You'll be able\nto see all three tables have been joined.\u003c/p\u003e\n\n\u003cp\u003eIn our example query above, we need to use the \u003ccode\u003eSUM(cats.net_worth)\u003c/code\u003e aggregator\nin conjunction with \u003ccode\u003eGROUP BY\u003c/code\u003e to get the information we want. Without \u003ccode\u003eGROUP BY\u003c/code\u003e,\nonly the first owner in the table would be returned, along with the sum of the\nnet worth of \u003cem\u003eall\u003c/em\u003e the cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.name      SUM(cats.net_worth)\u003cbr\u003e---------------  -------------------\u003cbr\u003eSophie           3021800\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf, on the other hand, we forget to use \u003ccode\u003eSUM\u003c/code\u003e and just get \u003ccode\u003ecats.net_worth\u003c/code\u003e,\nthe results will be grouped by owner, but only the net worth of the \u003cem\u003efirst\u003c/em\u003e\ncat belonging to each owner will be returned, not the aggregate:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.name      cats.net_worth\u003cbr\u003e---------------  ---------------\u003cbr\u003ePenny            2000000\u003cbr\u003eSophie           21800\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we use \u003ccode\u003eSUM\u003c/code\u003e and \u003ccode\u003eGROUP BY\u003c/code\u003e together, \u003ccode\u003eSUM\u003c/code\u003e looks at all of the values in\nthe \u003ccode\u003enet_worth\u003c/code\u003e column of the \u003ccode\u003ecats\u003c/code\u003e table (or whichever column you specify in\nparentheses) and takes the sum of those values, but only \u003cem\u003eafter those cats have\nbeen grouped by owner\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowners.name      SUM(cats.net_worth)\u003cbr\u003e---------------  -------------------\u003cbr\u003ePenny            2000000\u003cbr\u003eSophie           1021800\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn our original data, Penny is the owner of Lil' Bub (2000000) while Sophie is\nthe owner of Maru and Hana (1000000 + 21800).\u003c/p\u003e\n\n\u003ch3\u003eCode Along IV: \u003ccode\u003eHAVING\u003c/code\u003e vs \u003ccode\u003eWHERE\u003c/code\u003e clause\u003c/h3\u003e\n\n\u003cp\u003eSuppose we have a table called \u003ccode\u003eemployee_bonus\u003c/code\u003e as shown below. Note that the\ntable has multiple entries for employees Abigail and Matthew.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eemployee_bonus\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003eEmployee\u003c/th\u003e\n    \u003cth\u003eBonus\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eMatthew\u003c/td\u003e\n    \u003ctd\u003e1000\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eAbigail\u003c/td\u003e\n    \u003ctd\u003e2000\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eMatthew\u003c/td\u003e\n    \u003ctd\u003e500\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eTom\u003c/td\u003e\n    \u003ctd\u003e700\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eAbigail\u003c/td\u003e\n    \u003ctd\u003e1250\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eTo calculate the total bonus that each employee received, we would write a SQL\nstatement like this:  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT employee, SUM(bonus) FROM employee_bonus GROUP BY employee;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eemployee         SUM(bonus)\u003cbr\u003e---------------  -------------------\u003cbr\u003eAbigail          3250\u003cbr\u003eMatthew          1500\u003cbr\u003eTom              700\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, suppose we wanted to find the employees who received more than $1,000 in\nbonuses. You might think that we could write a query like this:  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eBAD SQL:\u003cbr\u003eSELECT employee, SUM(bonus) FROM employee_bonus\u003cbr\u003eGROUP BY employee WHERE SUM(bonus) \u0026gt; 1000;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUnfortunately, the above will not work because the \u003ccode\u003eWHERE\u003c/code\u003e clause can't be used\nwith aggregates (\u003ccode\u003eSUM\u003c/code\u003e, \u003ccode\u003eAVG\u003c/code\u003e, \u003ccode\u003eMAX\u003c/code\u003e, etc). What we need to use is the \u003ccode\u003eHAVING\u003c/code\u003e\nclause. The \u003ccode\u003eHAVING\u003c/code\u003e clause was added to SQL so that we could compare aggregates\nin the same way that the \u003ccode\u003eWHERE\u003c/code\u003e clause can be used for comparing non-aggregates.\nNow, the correct SQL will look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGOOD SQL:\u003cbr\u003eSELECT employee, SUM(bonus) FROM employee_bonus\u003cbr\u003eGROUP BY employee HAVING SUM(bonus) \u0026gt; 1000;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eDifference between \u003ccode\u003eHAVING\u003c/code\u003e and \u003ccode\u003eWHERE\u003c/code\u003e clause\u003c/h4\u003e\n\n\u003cp\u003eThe difference between the \u003ccode\u003eHAVING\u003c/code\u003e and \u003ccode\u003eWHERE\u003c/code\u003e clauses in SQL is that the\n\u003ccode\u003eWHERE\u003c/code\u003e clause cannot be used with aggregates while the \u003ccode\u003eHAVING\u003c/code\u003e clause can.\n\u003ccode\u003eHAVING\u003c/code\u003e filters out groups of rows created by \u003ccode\u003eGROUP BY\u003c/code\u003e, and \u003ccode\u003eWHERE\u003c/code\u003e filters\nout individual rows. Note that there is nothing to stop you from using both\nof them in the same query.\u003c/p\u003e\n\n\u003cp\u003eFinally, it is important to remember that order matters here: \u003ccode\u003eWHERE\u003c/code\u003e must\ncome \u003cstrong\u003ebefore\u003c/strong\u003e \u003ccode\u003eGROUP BY\u003c/code\u003e and \u003ccode\u003eHAVING\u003c/code\u003e must come \u003cstrong\u003eafter\u003c/strong\u003e it, as shown\nbelow; changing the order will produce a  syntax error.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT\u003cbr\u003eFROM\u003cbr\u003eJOIN\u003cbr\u003e  ON\u003cbr\u003eWHERE\u003cbr\u003eGROUP BY\u003cbr\u003eHAVING\u003cbr\u003eORDER BY\u003cbr\u003eLIMIT\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.geeksforgeeks.org/difference-between-order-by-and-group-by-clause-in-sql/\"\u003e\u003ccode\u003eORDER BY\u003c/code\u003e vs \u003ccode\u003eGROUP BY\u003c/code\u003e clauses\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.essentialsql.com/what-is-the-difference-between-where-and-having-clauses/\"\u003e\u003ccode\u003eHAVING\u003c/code\u003e vs \u003ccode\u003eWHERE\u003c/code\u003e clauses\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=qfB1MRnzk4g\"\u003eVideo Review- SQL Joins Overview\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"converting-database-records-to-ruby-objects","title":"Converting Database Records to Ruby Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-mapping-database-records-to-ruby-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild methods that read from a database table.\u003c/li\u003e\n\u003cli\u003eBuild a \u003ccode\u003eSong.all\u003c/code\u003e class method that returns all songs from the database.\u003c/li\u003e\n\u003cli\u003eBuild a \u003ccode\u003eSong.find_by_name\u003c/code\u003e class method that accepts one argument, a name,\nsearches the database for a song with that name and returns the matching song\nentry if one is found.\u003c/li\u003e\n\u003cli\u003eConvert what the database gives you into a Ruby object.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover the basics of reading from a database table that is\nmapped to a Ruby object.\u003c/p\u003e\n\n\u003cp\u003eOur Ruby program gets most interesting when we add data. To do this, we use a\ndatabase. When we want our Ruby program to store things, we send them off to a\ndatabase. When we want to retrieve those things, we ask the database to send\nthem back to our program. This works very well, but there is one small problem\nto overcome – our Ruby program and the database don't speak the same language.\u003c/p\u003e\n\n\u003cp\u003eRuby understands objects. The database understands raw data.\u003c/p\u003e\n\n\u003cp\u003eWe don't store Ruby objects in the database, and we don't get Ruby objects back\nfrom the database. We store raw data describing a given Ruby object in a table\nrow, and when we want to reconstruct a Ruby object from the stored data, we\nselect that same row in the table.\u003c/p\u003e\n\n\u003cp\u003eWhen we query the database, it is up to us to write the code that takes that\ndata and turns it back into an instance of the appropriate class. We, the\nprogrammers, will be responsible for translating the raw data that the database\nsends into Ruby objects that are instances of a particular class.\u003c/p\u003e\n\n\u003ch2\u003eExample\u003c/h2\u003e\n\n\u003cp\u003eLet's use a song domain as an example. Imagine we have a \u003ccode\u003eSong\u003c/code\u003e class that is\nresponsible for making songs. Every song will come with two attributes, a\n\u003ccode\u003etitle\u003c/code\u003e and a \u003ccode\u003elength\u003c/code\u003e. We could make a bunch of new songs, but first, we want to\nlook at all the songs that have already been created.\u003c/p\u003e\n\n\u003cp\u003eImagine we already have a database with 1 million songs. We need to build three\nmethods to access all of those songs and convert them to Ruby objects.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e.new_from_db\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe first thing we need to do is convert what the database gives us into a Ruby\nobject. We will use this method to create all the Ruby objects in our next two\nmethods.\u003c/p\u003e\n\n\u003cp\u003eThe first thing to know is that the database, SQLite in our case, will return an\narray of data for each row. For example, a row for Michael Jackson's \"Thriller\"\n(356 seconds long) that has a db id of 1 would look like this: \u003ccode\u003e[1, \"Thriller\",\n356]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef self.new_from_db(row)\u003cbr\u003e  new_song = self.new  # self.new is the same as running Song.new\u003cbr\u003e  new_song.id = row[0]\u003cbr\u003e  new_song.name =  row[1]\u003cbr\u003e  new_song.length = row[2]\u003cbr\u003e  new_song  # return the newly created instance\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, you may notice something - since we're retrieving data from a database, we\nare using \u003ccode\u003enew\u003c/code\u003e. We don't need to \u003cem\u003ecreate\u003c/em\u003e records. With this method, we're\nreading data from SQLite and temporarily representing that data in Ruby.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003eSong.all\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eNow we can start writing our methods to retrieve the data. To return all the\nsongs in the database we need to execute the following SQL query: \u003ccode\u003eSELECT * FROM\nsongs\u003c/code\u003e. Let's store that in a variable called \u003ccode\u003esql\u003c/code\u003e using a heredoc (\u003ccode\u003e\u0026lt;\u0026lt;-\u003c/code\u003e)\nsince our string will go onto multiple lines:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \u0026lt;  SELECT *\u003cbr\u003e  FROM songs\u003cbr\u003eSQL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we will make a call to our database using \u003ccode\u003eDB[:conn]\u003c/code\u003e. This \u003ccode\u003eDB\u003c/code\u003e hash is\nlocated in the \u003ccode\u003econfig/environment.rb\u003c/code\u003e file: \u003ccode\u003eDB = {:conn =\u0026gt;\nSQLite3::Database.new(\"db/songs.db\")}\u003c/code\u003e. Notice that the value of the hash is\nactually a new instance of the \u003ccode\u003eSQLite3::Database\u003c/code\u003e class. This is how we will\nconnect to our database. Our database instance responds to a method called\n\u003ccode\u003eexecute\u003c/code\u003e that accepts raw SQL as a string. Let's pass in that SQL we stored\nabove:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.all\u003cbr\u003e    sql = \u0026lt;      SELECT *\u003cbr\u003e      FROM songs\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will return an array of rows from the database that matches our query. Now,\nall we have to do is iterate over each row and use the \u003ccode\u003eself.new_from_db\u003c/code\u003e method\nto create a new Ruby object for each row:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.all\u003cbr\u003e    sql = \u0026lt;      SELECT *\u003cbr\u003e      FROM songs\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql).map do |row|\u003cbr\u003e      self.new_from_db(row)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003e\u003ccode\u003eSong.find_by_name\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThis one is similar to \u003ccode\u003eSong.all\u003c/code\u003e with the small exception being that we have to\ninclude a name in our SQL statement. To do this, we use a question mark where we\nwant the \u003ccode\u003ename\u003c/code\u003e parameter to be passed in, and we include \u003ccode\u003ename\u003c/code\u003e as the second\nargument to the \u003ccode\u003eexecute\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    sql = \u0026lt;      SELECT *\u003cbr\u003e      FROM songs\u003cbr\u003e      WHERE name = ?\u003cbr\u003e      LIMIT 1\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, name).map do |row|\u003cbr\u003e      self.new_from_db(row)\u003cbr\u003e    end.first\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDon't be freaked out by that \u003ccode\u003e.first\u003c/code\u003e method chained to the end of the\n\u003ccode\u003eDB[:conn].execute(sql, name).map\u003c/code\u003e block. The return value of the \u003ccode\u003e.map\u003c/code\u003e method\nis an array, and we're simply grabbing the \u003ccode\u003e.first\u003c/code\u003e element from the returned\narray. Chaining is cool!\u003c/p\u003e","frontPage":false},{"exportId":"status-codes","title":"Status Codes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-status-codes-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-status-codes-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-status-codes-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-status-codes-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine status codes and what they communicate to a client\u003c/li\u003e\n\u003cli\u003eDescribe the structure and various categories of status codes\u003c/li\u003e\n\u003cli\u003eSet a response's status code in Rack \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Status Codes are Important for the Client\u003c/h2\u003e\n\n\u003cp\u003eStatus codes allow your server to tell something special to the client. The responses you send need to be effective to both a human user and to the browser itself. That means that  response messages like \u003ccode\u003eFile Not Found\u003c/code\u003e or \u003ccode\u003eItem isn't in the cart\u003c/code\u003e work if there is a human to read the English. Browsers also want to know the status of the response. To get that response, the HTTP protocol has an agreed upon contract for different \"status codes\". A status code is a 3-digit integer where the first digit represents the class of the response, and the remaining two digits represent a specific status. There are 5 primary values that the first digit can take.  \u003c/p\u003e\n\n\u003ch3\u003eStatus Code Chart\u003c/h3\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eStatus Number\u003c/th\u003e\n\u003cth\u003eCode/Description\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1xx: Informational (request received and continuing process)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e2xx: Success (request successfully received, understood, and accepted)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e3xx: Redirection (further action must be taken to complete request)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e4xx: Client Error (request contains bad syntax and can't be completed)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e5xx: Server Error (server couldn't complete request)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eYou've probably seen a bunch of these before, the most common being \u003ccode\u003e404\u003c/code\u003e. This means that the server couldn't find the route you requested.\u003c/p\u003e\n\n\u003ch3\u003eStatus Codes in Rack\u003c/h3\u003e\n\n\u003cp\u003eIn Rack, we are able to set the response's status code by just setting the status_code attribute. By default, Rack sets a status code of \u003ccode\u003e200\u003c/code\u003e. But when a user selects a route that doesn't exist, we need to set the \u003ccode\u003estatus\u003c/code\u003e to \u003ccode\u003e404\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path==\"/songs\"\u003cbr\u003e      resp.write \"You requested the songs\"\u003cbr\u003e    else\u003cbr\u003e      resp.write \"Route not found\"\u003cbr\u003e      resp.status = 404\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if you go to \u003ccode\u003elocalhost:9292/badURL\u003c/code\u003e you'll get the error message, and if you open up the Inspect Element navigator you'll see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/rack-status-codes-readme/image1.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eVideo Reviews\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=gI9wqEDPiY0\"\u003eHow the Web Works, Part 1\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=LSUevS1PRTg\"\u003eHow the Web Works, Part 2\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eResources\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.tutorialspoint.com/http/http_status_codes.htm\"\u003eMore on Status Codes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"looping-continued","title":"Looping Continued","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-loop\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-loop/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-loop\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-loop/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand how the \u003ccode\u003eloop\u003c/code\u003e construct works\u003c/li\u003e\n\u003cli\u003eBuild a method that utilizes the \u003ccode\u003eloop\u003c/code\u003e construct\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThe first looping construct that we'll discuss is \u003ccode\u003eloop\u003c/code\u003e. This is the simplest\nlooping construct that we have in Ruby. It simply executes a block (the code\nthat is between the \u003ccode\u003edo\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e keywords). Try this in IRB in your Terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eloop do\u003cbr\u003e  puts \"I have found the Time Machine!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will output \u003ccode\u003eI have found the Time Machine!\u003c/code\u003e an infinite number of times in\nyour Terminal. Use \u003ccode\u003eControl\u003c/code\u003e+\u003ccode\u003eC\u003c/code\u003e to break out of the loop in your terminal.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis is the first in a series of short exercises to help you get the hang of\nlooping constructs.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThere are no tests for this lab, so code your solution in \u003ccode\u003elooping.rb\u003c/code\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIt's your first class in driving school and you're trying to remember important\nrules of the road. Fill out the content of the method \u003ccode\u003elooping\u003c/code\u003e to contain a \u003ccode\u003eloop\u003c/code\u003e\nthat \u003ccode\u003eputs\u003c/code\u003e the phrase \u003ccode\u003e\"Never pass a school bus if it has flashing red lights\"\u003c/code\u003e\n an infinite number of times.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBeneath your method definition, call your method by typing the name of the\n method, \u003ccode\u003elooping\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003col\u003e\n\u003cli\u003eThen, run the file by typing \u003ccode\u003eruby looping.rb\u003c/code\u003e in your terminal from the\ndirectory of this lab. You'll be stuck in an infinite levitation loop! Hit\n\u003ccode\u003eControl\u003c/code\u003e+\u003ccode\u003eC\u003c/code\u003e to exit the infinite loop.\u003c/li\u003e\n\u003c/ol\u003e","frontPage":false},{"exportId":"video-orms-and-sql-joins-review","title":"Video: ORMs and SQL Joins Review","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orm-video-review-orms-and-sql-joins\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-orms-and-sql-joins/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-orms-and-sql-joins\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-orms-and-sql-joins/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers basic SQL queries in an object-oriented ecommerce domain. To get the most out of the video, we recommend that you complete the readings and labs that come before it.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eCombine your knowledge of object relationships in object oriented ruby and your knowledge of join tables in SQL in order to write ORM-based methods that will allow you to create related objects from related SQLite3 databases.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand how database domain models relate with object oriented domain models.\u003c/li\u003e\n\u003cli\u003eUnderstand how SQL foreign keys and join tables can be used to represent object relationships.\u003c/li\u003e\n\u003cli\u003eCreate objects with a belongs to relationship from database tables representing a belongs to relationship.\u003c/li\u003e\n\u003cli\u003eCreate objects with a has many relationship from tables representing a has many relationship.\u003c/li\u003e\n\u003cli\u003eUse SQL join queries to create objects with a has many through relationship from join tables.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/mZROu5oSWfI?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/oo-sql-joins-ecommerce-lv\"\u003eSolution code for review\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"method-parameters","title":"Method Parameters","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-arguments-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-arguments-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-arguments-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-arguments-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover how to define a method, and how to add and use parameters within methods.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how parameters reference actual values supplied to a method\u003c/li\u003e\n\u003cli\u003eDefine methods that accept single parameters\u003c/li\u003e\n\u003cli\u003eDefine methods that accept multiple parameters\u003c/li\u003e\n\u003cli\u003eInvoke a method with all required parameters\u003c/li\u003e\n\u003cli\u003eUse a method's parameters within the body of the method\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003cp\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FJztnY9E854?rel=0\u0026amp;modestbranding=1\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=FJztnY9E854\"\u003eRuby Method Parameters\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eUnderstanding Parameters\u003c/h2\u003e\n\n\u003cp\u003eImagine needing to build a method that greets a person. We could code something\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hi, Ruby programmer!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method, when called, will print out to the terminal, the string \n\u003ccode\u003e\"Hi, Ruby programmer!\"\u003c/code\u003e. Try it out, open an IRB session by running \u003ccode\u003eirb\u003c/code\u003e from\nyour command line. Once you're in your IRB shell, paste in the code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hi, Ruby programmer!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e// ♥ irb\u003cbr\u003e2.2.1 :001 \u0026gt; def greeting\u003cbr\u003e2.2.1 :002?\u0026gt;   puts \"Hi, Ruby programmer!\"\u003cbr\u003e2.2.1 :003?\u0026gt;   end\u003cbr\u003e =\u0026gt; :greeting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou've now defined the method. Notice that it did not execute. Type the\nfollowing into IRB to execute your method: \u003ccode\u003egreeting\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2.2.1 :004 \u0026gt; greeting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHi, Ruby programmer!\u003cbr\u003e =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs amazing as this method is, it's still pretty literal. It hard-codes, or\ndirectly specifies, the name of the person we are greeting as \u003ccode\u003e\"Ruby\nprogrammer\"\u003c/code\u003e. If we wanted to build a method that can greet \u003cem\u003eanyone\u003c/em\u003e, even\nPython programmers, we'd have to re-implement the majority of the original logic\nfrom \u003ccode\u003egreeting\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting_python\u003cbr\u003e  puts \"Hello, Python programmer!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice the only things that changed are the method name and the language name\n\u003ccode\u003e\"Python\"\u003c/code\u003e in the body of the method. It's as though that information should be\nspecifiable or configurable when you call the method, otherwise we'd have to\nbuild every permutation of the method. In other words, we'd have to re-write the\nmethod for every single person we want to greet. We want our method to be more\ndynamic, more abstract, \u003cem\u003emore re-usable\u003c/em\u003e. It should maintain the elements that\nwill always be the same, no matter who we greet, and allow us to change, or swap\nout, the name of the person we are greeting. This is dynamic, as opposed to\n\"hard-coded\".\u003c/p\u003e\n\n\u003cp\u003eGood news, that's exactly what method parameters are for:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, we define our method to take in a parameter by following the method name\nwith parentheses enclosing a variable name: \u003ccode\u003egreeting(name)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen, we use \u003cstrong\u003estring interpolation\u003c/strong\u003e inside the method body to \u003ccode\u003eputs\u003c/code\u003e out a\ngreeting using whatever \u003ccode\u003ename\u003c/code\u003e was passed into the parameter when the method is\ncalled. String interpolation allows users to use a Ruby variable to render a\nvalue inside of a string. In other words, if we have a variable, \u003ccode\u003ename\u003c/code\u003e, that\npoints to a value of \u003ccode\u003e\"Sophie\"\u003c/code\u003e, string interpolation will let us use that\n\u003ccode\u003ename\u003c/code\u003e variable inside a string to render, or \u003ccode\u003eputs\u003c/code\u003e out, a string that contains\nthe word \u003ccode\u003e\"Sophie\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo interpolate a variable into a string, wrap that variable name inside curly\nbraces, preceded by a pound sign: \u003ccode\u003e#{variable_name}\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's call our method and see it in action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Sophie\")\u003cbr\u003e# \u0026gt; Hello, Sophie!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Ian\")\u003cbr\u003e# \u0026gt; Hello, Ian!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take a closer look at how to add parameters to our methods.\u003c/p\u003e\n\n\u003ch2\u003eDefining Method Parameters\u003c/h2\u003e\n\n\u003cp\u003eTo add parameters to a method, you specify them in the method signature — the\nline that starts with \u003ccode\u003edef\u003c/code\u003e. Simply add parentheses after the name of the method\nand create a placeholder name for your parameter.\u003c/p\u003e\n\n\u003cp\u003eFor example, if I want to write a method called \u003ccode\u003egreeting_a_person\u003c/code\u003e that accepts\na parameter of a person's name, I would do it like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    #method name      #parameter\u003cbr\u003edef greeting_a_person(name)\u003cbr\u003e  \"Hello #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eParameters create new local variables that can be used within the method. When\nyou name a parameter, you are defining what bare word you want to use to access\nthat data, just like when you create a variable. Parameters follow the same rules\nas local variables: they can be any word that starts with a lowercase letter and\nthey should be as descriptive of the data as possible.\u003c/p\u003e\n\n\u003cp\u003eIn our \u003ccode\u003e#greeting\u003c/code\u003e method example, we are saying: When you call the \u003ccode\u003e#greeting\u003c/code\u003e\nmethod with an \u003cstrong\u003eargument\u003c/strong\u003e of \u003ccode\u003e\"Sophie\"\u003c/code\u003e, set a variable \u003ccode\u003ename\u003c/code\u003e equal to the\nvalue of \u003ccode\u003e\"Sophie\"\u003c/code\u003e. When we call  the \u003ccode\u003e#greeting\u003c/code\u003e method with an argument of\n\u003ccode\u003e\"Ian\"\u003c/code\u003e, set a variable \u003ccode\u003ename\u003c/code\u003e equal to \u003ccode\u003e\"Ian\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWait, \u003cem\u003eargument?\u003c/em\u003e Well, you see... when we're \u003cem\u003edefining\u003c/em\u003e a method, we use the term\nparameter to refer to a value passed in to the method. When \u003cem\u003ecalling\u003c/em\u003e the method\nand passing in a value, the value passed in is referred to as an argument. Don't\nworry if you mix the two up (we do too sometimes); it is a minor semantic\ndifference.  We are just pointing this out as it will become relevant in a\nmoment.\u003c/p\u003e\n\n\u003ch3\u003eDefining Methods with Multiple Parameters\u003c/h3\u003e\n\n\u003cp\u003eYou can define a method to accept as many parameters as you want. Let's try\ncreating a method that accepts two parameters: a person's name and their\nprogramming language of choice.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  # method name      first_parameter, second_parameter\u003cbr\u003edef greeting_programmer(name, language)\u003cbr\u003e  puts \"Hello, #{name}. We heard you are a great #{language} programmer.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting_programmer(\"Sophie\", \"Ruby\")\u003cbr\u003e# \u0026gt; Hello, Sophie. We heard you are a great Ruby programmer.\u003cbr\u003e\u003cbr\u003egreeting_programmer(\"Steven\", \"Elixir\")\u003cbr\u003e# \u0026gt; Hello, Steven. We heard you are a great Elixir programmer.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo accept multiple parameters, simply separate the bare words in the parameter\nlist with commas.\u003c/p\u003e\n\n\u003ch3\u003eRequired Parameters\u003c/h3\u003e\n\n\u003cp\u003eOnce you define parameters for a method, they become required when you invoke or\ncall the method. If you define a method that accepts a singular parameter, when\nyou call that method, you must supply a value, otherwise, you get an\n\u003ccode\u003eArgumentError\u003c/code\u003e. Here's an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}!\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting # I explicitly call the method without a value for the argument `name`\u003cbr\u003e# \u0026gt; ArgumentError: wrong number of arguments (0 for 1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAh, here is where Ruby is being specific semantically. The error is called\n\u003ccode\u003eArgumentError\u003c/code\u003e because Ruby is expecting an \u003cem\u003eargument\u003c/em\u003e to be passed  to\n\u003ccode\u003e#greeting\u003c/code\u003e. It expects this because the method definition includes a parameter.\u003c/p\u003e\n\n\u003cp\u003eIn Ruby, all arguments are required when you invoke the method. You can't define\na method to accept a parameter and call the method without an argument.\nAdditionally, a method defined to accept one parameter will raise an error if\ncalled with more than one argument.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}!\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting(\"Sophie\", \"Ruby\") # The method accepts 1 argument and I supplied 2.\u003cbr\u003e# \u0026gt; ArgumentError: wrong number of arguments (2 for 1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy default, all parameters defined in a method are required in order to correctly\ninvoke (or \"call\", or \"execute\") that method.\u003c/p\u003e\n\n\u003ch2\u003eUsing Parameters in Methods\u003c/h2\u003e\n\n\u003cp\u003eNow that we know how to define a method with parameters, let's take a closer look\nat using those parameters, that data, within the method. Once again, our greeting\nmethod;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we define a method with parameters we are defining a bareword that we can\nuse to reference the actual value supplied to the method upon invocation. We\nbuilt a method that will greet a specified person. In order to write code in our\nmethod to actually greet any given person, we need a placeholder — a way to refer\nto a generic person's name. This is a parameter.\u003c/p\u003e\n\n\u003cp\u003eWhen we build that method we might ask ourselves, \"who is this method designed\nto greet?\". The answer is \"anyone, it doesn't matter.\" That's what makes the\nmethod abstract, the detail of who it greets is hidden until the method is\nactually invoked: \u003ccode\u003egreeting(\"Sophie\")\u003c/code\u003e. Only then do we know that the method\ngreets Sophie. The value of \u003ccode\u003ename\u003c/code\u003e is only supplied upon invocation.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe bareword, in this case \u003ccode\u003ename\u003c/code\u003e, that we use as the parameter's name in the\nmethod signature becomes a local variable within the method.\u003c/strong\u003e Through that\nvariable we can reference the value of the parameter supplied at invocation.\u003c/p\u003e\n\n\u003cp\u003eWith the code above, when we say: \u003ccode\u003egreeting(\"Sophie\")\u003c/code\u003e, the value of the\nparameter \u003ccode\u003ename\u003c/code\u003e is \u003ccode\u003e\"Sophie\"\u003c/code\u003e. During the particular runtime invoked by\n\u003ccode\u003egreeting(\"Sophie\")\u003c/code\u003e, any reference to \u003ccode\u003ename\u003c/code\u003e will have the value of \u003ccode\u003e\"Sophie\"\u003c/code\u003e,\nallowing the method to behave as intended.\u003c/p\u003e\n\n\u003cp\u003eSimilarly, when we say: \u003ccode\u003egreeting(\"Ian\")\u003c/code\u003e, the value of the parameter \u003ccode\u003ename\u003c/code\u003e is\n\u003ccode\u003e\"Ian\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eMethod parameters simply create local variables for you to refer to the value\nused when the method is actually invoked.\u003c/p\u003e\n\n\u003ch2\u003eA Note on Calling Methods\u003c/h2\u003e\n\n\u003cp\u003eIn the above examples, we're calling methods with parentheses, e.g.,\n\u003ccode\u003egreeting('Sophie')\u003c/code\u003e. But you can also omit the parentheses: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen a method takes a parameter, omitting the parentheses is generally\nconsidered bad style, as it's a bit more difficult to understand what's going\non. However, when you want to call a method without any parameters, e.g.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef say_hi\u003cbr\u003e  puts \"Hi!\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esay_hi\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eomitting the parentheses helps to clear things up. You might also see some\nDomain Specific Languages (DSLs) that prefer to omit parentheses. You've\nprobably already seen a little bit of RSpec's DSL, for example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe \"MyRubyThing\" do\u003cbr\u003e  it \"runs\" do\u003cbr\u003e    # test here\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003edescribe\u003c/code\u003e and \u003ccode\u003eit\u003c/code\u003e are just methods — the above could have been written\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe(\"MyRubyThing\") do\u003cbr\u003e  it(\"runs\") do\u003cbr\u003e    # test here\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ebut I think you'll agree that it looks nicer (and is easier to read) without the\nparentheses.\u003c/p\u003e","frontPage":false},{"exportId":"creating-join-tables","title":"Creating Join Tables","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-creating-join-tables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-creating-join-tables/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-creating-join-tables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-creating-join-tables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn to distinguish between the different types of relationships between data in your database: the \"belongs to\"/\"has many\" and \"many-to-many\" relationships. \u003c/li\u003e\n\u003cli\u003eUnderstand how to build each type of relationship via either the use of foreign keys or the use of a join table. \u003c/li\u003e\n\u003cli\u003eUnderstand what a join table is and how it functions. \u003c/li\u003e\n\u003cli\u003eBuild a join table and query data from it. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eData Relations\u003c/h2\u003e\n\n\u003cp\u003eAs programmers, we understand the data we are manipulating to be real. In other words, we write programs to solve real-world problems or handle real-world situations. Whether you're developing a web application that helps doctors and hospitals around the country manage patient information or coding a command line game, the code we write is modeled on real situations and things. This is true of our databases and tables as well as code we write in Ruby, Objective C, you name it. \u003c/p\u003e\n\n\u003cp\u003eWe use databases to store information that represents real-world entities. We might have an employee database in which an individual row in an Employees table represents one real, individual employee. Such a database might also have a Managers table that is related to the employees table. Real-world objects and environments are relational. Employees belong to managers, pets belong to owners, a person has many friends. Our relational databases have the ability to reflect that related-ness.\u003c/p\u003e\n\n\u003cp\u003eIn relational databases, we can actually categorize the type of relationship that exists between the data that we are storing. There are two basic types of relationship that we need to concern ourselves with right now: The \"has many\"/\"belongs to\" relationship and the \"many-to-many\" relationship. Let's take a closer look. \u003c/p\u003e\n\n\u003ch2\u003eThe \"has many\"/\"belongs to\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eLet's imagine a database that keeps track of pets and their owners. This Pet's Database has an Owners table and a Cats table. The Cats table has a column, \u003ccode\u003eowner_id\u003c/code\u003e, that contains a foreign key corresponding to the \u003ccode\u003eid\u003c/code\u003e column of the Owners table. \u003c/p\u003e\n\n\u003cp\u003eIn this way, an individual cat is associated to the person that owns it. Any number of cats can have the same owner. In other words, any number of cats can have the same \u003ccode\u003eowner_id\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's say we have the following owners:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid               name      \u003cbr\u003e---------------  ----------\u003cbr\u003e1                mugumogu  \u003cbr\u003e2                Sophie    \u003cbr\u003e3                Penny   \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd the following cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid               name        age         owner_id    breed        \u003cbr\u003e---------------  ----------  ----------  ----------  -------------\u003cbr\u003e1                Maru        3           1           Scottish Fold\u003cbr\u003e2                Hana        1           1           Tabby        \u003cbr\u003e3                Nona        4           2           Tortoiseshell\u003cbr\u003e4                Lil' Bub    2                       perma-kitten \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that both Maru and Hana have the same value in the \u003ccode\u003eowner_id\u003c/code\u003e column, a value of \u003ccode\u003e1\u003c/code\u003e. This corresponds to the owner from the Owners table who has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e. Both Maru and Hana, therefore, have the same owner: mugumogu. If we run a query to select all of the cats whose \u003ccode\u003eowner_id\u003c/code\u003e is \u003ccode\u003e1\u003c/code\u003e, we'll return both Maru and Hana. \u003c/p\u003e\n\n\u003cp\u003eThe following query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite\u0026gt; SELECT * FROM cats WHERE owner_id = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ereturns: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid               name        age         owner_id    breed        \u003cbr\u003e---------------  ----------  ----------  ----------  -------------\u003cbr\u003e1                Maru        3           1           Scottish Fold\u003cbr\u003e2                Hana        1           1           Tabby        \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur first owner, mugumogu, \u003cem\u003ehas many\u003c/em\u003e cats. Both Hana and Maru \u003cem\u003ebelong to\u003c/em\u003e mugumogu. This is the \"has many\"/\"belongs to\" relationship. \u003c/p\u003e\n\n\u003ch3\u003eEnacting The Relationship Through Foreign Keys\u003c/h3\u003e\n\n\u003cp\u003eThe \"has many\"/\"belongs to\" relationship is created through the use of foreign keys. The Cats table has an \u003ccode\u003eowner_id\u003c/code\u003e column which is the foreign key column. It contains information that corresponds to the \u003ccode\u003eid\u003c/code\u003e column of the Owners table. \u003c/p\u003e\n\n\u003cp\u003eThe table that contains the foreign key column is the table that contains the entities that \"belong to\" another entity. The table that is referenced via the foreign key is the parent or owner entity that \"has many\" of something else. This relationship works because multiple entities in the \"belonging\" or child table can have the same foreign key. \u003c/p\u003e\n\n\u003cp\u003eWhat happens, though, when a cat realizes it can live the good life by hanging out with the family across the street for extra food and care? Such a cat would have \u003cem\u003emore than one owner\u003c/em\u003e. Our \"has many\"/\"belongs to\" relationship is no longer adequate. \u003c/p\u003e\n\n\u003cp\u003eHow might we account for a cat with many owners? Well, we could continue to add additional \u003ccode\u003eowner_id\u003c/code\u003e columns to the cats table. For example we could add an \u003ccode\u003eowner_id_1\u003c/code\u003e, \u003ccode\u003eowner_id_2\u003c/code\u003e, \u003ccode\u003eowner_id_3\u003c/code\u003e column and so on. This is not practical however. It requires us to change our schema by continuing to add columns every time a cat gains a new owner. This means our Cats table could grow to contain a possibly infinite number of columns (some cats are very popular, after all). \u003c/p\u003e\n\n\u003cp\u003eWe can avoid this undesirable horizontal table growth with the use of a join table. \u003c/p\u003e\n\n\u003ch2\u003eJoin Tables and the \"many-to-many\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eA \u003cstrong\u003ejoin table\u003c/strong\u003e contains common fields from two or more other tables. In this way, it creates a many-to-many relationship between data. Let's take a closer look at this concept by building our own join table in the following code-along. \u003c/p\u003e\n\n\u003ch3\u003eCode Along I: Building a Join Table\u003c/h3\u003e\n\n\u003cp\u003eWe want to create a many-to-many association between cats and owners, such that a cat can have many owners and an owner can have many cats. Our join table will therefore have two columns, one for each of the tables we want to relate. We will have a \u003ccode\u003ecat_id\u003c/code\u003e column and an \u003ccode\u003eowner_id\u003c/code\u003e column. \u003c/p\u003e\n\n\u003cp\u003eLet's set up our database to get started:\u003c/p\u003e\n\n\u003ch3\u003eSetting Up the Database\u003c/h3\u003e\n\n\u003cp\u003eIn your terminal, create the Pet's Database by running the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCreate the following two tables:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCats Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eOwners Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInsert the following data:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInsert Data:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"mugumogu\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Sophie\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Penny\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Maru\", 3, \"Scottish Fold\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Hana\", 1, \"Tabby\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Nona\", 4, \"Tortoiseshell\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Lil' Bub\", 2, \"perma-kitten\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003ecats_owners\u003c/code\u003e Join Table\u003c/h3\u003e\n\n\u003ch4\u003eCreating the Table\u003c/h4\u003e\n\n\u003cp\u003eNow we're ready to create our join table. Since our table is creating a many-to-many relationship between cats and owners, we will call our table \u003ccode\u003ecats_owners\u003c/code\u003e. It is conventional to name your join tables using the names of the tables you are creating the many-to-many relationship between. \u003c/p\u003e\n\n\u003cp\u003eInside the \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e in your terminal, execute the following SQL statement to create our join table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats_owners (\u003cbr\u003ecat_id INTEGER,\u003cbr\u003eowner_id INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's confirm that worked by checking our schema. Type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3\u0026gt; .schema\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd you'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY, \u003cbr\u003ename TEXT, \u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT);\u003cbr\u003e\u003cbr\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\u003cbr\u003e\u003cbr\u003eCREATE TABLE cats_owners (\u003cbr\u003ecat_id INTEGER,\u003cbr\u003eowner_id INTEGER\u003cbr\u003e);\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! Now we're ready to start inserting some rows into our join table. \u003c/p\u003e\n\n\u003ch4\u003eInserting Data into the Join Table\u003c/h4\u003e\n\n\u003cp\u003eEach row in our join table will represent one cat/owner relationship. Let's say, for example, that Nona the cat has acquired a second owner, Penny. Now we want to represent that Nona has two owners, Sophie and Penny.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll insert the Nona/Sophie relationship into our join table. Recall that Nona the cat has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e3\u003c/code\u003e and Sophie the owner has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (3, 2);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's check the contents of our \u003ccode\u003ecats_owners\u003c/code\u003e table with a SELECT statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats_owners;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecat_id           owner_id  \u003cbr\u003e---------------  ----------\u003cbr\u003e3                2  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's insert the Nona/Penny relationship into our join table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (3, 3);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'll confirm this insertion with another SELECT statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats_owners;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecat_id           owner_id  \u003cbr\u003e---------------  ----------\u003cbr\u003e3                2         \u003cbr\u003e3                3    \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our table reflects that Nona, the cat with an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e3\u003c/code\u003e, has many (in this case two) owners. \u003c/p\u003e\n\n\u003cp\u003eThe great thing about our join table, however, is that it allows for the many-to-many relationship. We have a cat with many owners, now let's insert a row that will give a particular owner many cats. \u003c/p\u003e\n\n\u003cp\u003eSophie's dream has come true and now she is a co-owner of Maru the cat. Let's insert the appropriate row into our join table. Remember that Sophie has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e and Maru has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e. Let's insert that row:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats_owners (cat_id, owner_id) VALUES (1, 2);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's run a SELECT statement to confirm that our insertion worked:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats_owners;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecat_id           owner_id  \u003cbr\u003e---------------  ----------\u003cbr\u003e3                2         \u003cbr\u003e3                3         \u003cbr\u003e1                2    \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNona, our cat with an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e3\u003c/code\u003e has many owners and Sophie, our owner with an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e, has many cats. Our many-to-many relationship is up and running. \u003c/p\u003e\n\n\u003cp\u003eNow let's take advantage of this association by running some queries that utilize our join table to return information about these complex relationships. \u003c/p\u003e\n\n\u003ch3\u003eCode Along II: Querying the Join Table\u003c/h3\u003e\n\n\u003ch4\u003eBasic Queries\u003c/h4\u003e\n\n\u003cp\u003eLet's SELECT from our join table all of the owners who are associated to cat number 3. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e SELECT cats_owners.owner_id \u003cbr\u003e FROM cats_owners \u003cbr\u003e WHERE cat_id = 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eowner_id       \u003cbr\u003e---------------\u003cbr\u003e2              \u003cbr\u003e3       \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's SELECT all of the cats who are associated with owner number 2:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT cats_owners.cat_id \u003cbr\u003eFROM cats_owners \u003cbr\u003eWHERE owner_id = 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecat_id         \u003cbr\u003e---------------\u003cbr\u003e3              \u003cbr\u003e1   \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese queries are great, but it would be even better if we could write queries that would return us some further information about the cats and owners we are returning here, such as their names. Otherwise it becomes a little difficult to constantly remember cats and owners by ID only. We can do so by querying our join tables using JOIN statements. \u003c/p\u003e\n\n\u003ch4\u003eAdvanced Queries\u003c/h4\u003e\n\n\u003cp\u003eExecute the following query in the \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e prompt in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT owners.name \u003cbr\u003eFROM owners \u003cbr\u003eINNER JOIN cats_owners \u003cbr\u003eON owners.id = cats_owners.owner_id WHERE cats_owners.cat_id = 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename           \u003cbr\u003e---------------\u003cbr\u003eSophie         \u003cbr\u003ePenny  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break down the above query:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eSELECT owners.name\u003c/code\u003e - Here, we declare the column data that we want to actually have returned to us. \u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eFROM owners\u003c/code\u003e - Here, we specify the table whose column we are querying. \u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eINNER JOIN cats_owners ON owners.id = cats_owners.owner_id\u003c/code\u003e - Here, we are joining the \u003ccode\u003ecats_owners\u003c/code\u003e table on the \u003ccode\u003eowners\u003c/code\u003e table. We are telling our query to look for owners whose \u003ccode\u003eid\u003c/code\u003e column matches up to the \u003ccode\u003eowner_id\u003c/code\u003e column in the \u003ccode\u003ecats_owners\u003c/code\u003e table. \u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eWHERE cats_owners.cat_id = 3;\u003c/code\u003e - Here, we are adding an additional condition to our query. We are telling our query to look at the \u003ccode\u003ecats_owners\u003c/code\u003e table rows where the value of the \u003ccode\u003ecat_id\u003c/code\u003e column is \u003ccode\u003e3\u003c/code\u003e. Then, \u003cem\u003efor those rows only\u003c/em\u003e, cross reference the \u003ccode\u003eowner_id\u003c/code\u003e column value with the \u003ccode\u003eid\u003c/code\u003e column in the \u003ccode\u003eowners\u003c/code\u003e table. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's take a look at a boiler-plate query that utilizes a JOIN statement to query a join table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column(s)\u003cbr\u003eFROM table_one\u003cbr\u003eINNER JOIN table_two\u003cbr\u003eON table_one.column_name = table_two.column_name\u003cbr\u003eWHERE table_two.column_name = condition;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGiving this one more try, let's query the join table for the names of all of the cats owned by Sophie:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT cats.name\u003cbr\u003eFROM cats\u003cbr\u003eINNER JOIN cats_owners\u003cbr\u003eON cats.id = cats_owners.cat_id\u003cbr\u003eWHERE cats_owners.owner_id = 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename           \u003cbr\u003e---------------\u003cbr\u003eNona           \u003cbr\u003eMaru \n\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"video-active-record-review-ii","title":"Video: Active Record Review II","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-associations-video-review-ii\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-ii/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-ii\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-ii/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/l9JCzNN2Z2U?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eDisclaimer\u003c/h2\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand ActiveRecord Associations then you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e","frontPage":false},{"exportId":"self-conclusion","title":"Self Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis module has revealed to you the mysteries of Ruby's \u003ccode\u003eself\u003c/code\u003e keyword. Remember\nthat you can think of \u003ccode\u003eself\u003c/code\u003e as a Ruby program asking the question: \"Who am I\nright now?\" It's a special variable that points to the object associated with\nthe code we're currently executing. We walked through how to use it properly. We\nexplored the concept of \"monkey patching,\" the practice of adding methods to or\naltering Ruby's core classes—which is a great thing to know, but be careful\nabout using it in your programs! We also covered how to use \u003ccode\u003eattr_accessor\u003c/code\u003e,\n\u003ccode\u003eattr_reader\u003c/code\u003e, and \u003ccode\u003eattr_writer\u003c/code\u003e as needed.\u003c/p\u003e\n\n\u003cp\u003eThe concept of Ruby's \u003ccode\u003eself\u003c/code\u003e might be an initially confusing one, but, armed\nwith the knowledge and experience you've gained over the past several lessons,\nyou're prepared to implement it in a variety of future situations.\u003c/p\u003e","frontPage":false},{"exportId":"puts-print-and-return","title":"Puts Print and Return","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"puts-print-and-return-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/puts-print-and-return-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/puts-print-and-return-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/puts-print-and-return-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover how the \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003ecommands display Ruby code to the console, and then explain the concept of return values in Ruby.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine and distinguish \u003ccode\u003eputs\u003c/code\u003e from \u003ccode\u003eprint\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIdentify implicit return values in Ruby syntax.\u003c/li\u003e\n\u003cli\u003eDistinguish between the display outputs of \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003efrom their return values.\u003c/li\u003e\n\u003cli\u003eUse the explicit \u003ccode\u003ereturn\u003c/code\u003e keyword.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003e\n\u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eputs\u003c/code\u003e (short for \"out\u003cstrong\u003eput s\u003c/strong\u003etring\") and \u003ccode\u003eprint\u003c/code\u003e commands are both used to display in the console the results of evaluating Ruby code. The primary difference between them is that \u003ccode\u003eputs\u003c/code\u003e adds a new line after executing, and \u003ccode\u003eprint\u003c/code\u003e does not.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e3.times { print \"Hello!\" }\u003cbr\u003e# \u0026gt; Hello!Hello!Hello!\u003cbr\u003e\u003cbr\u003e3.times { puts \"Hello!\" }\u003cbr\u003e# \u0026gt; Hello!\u003cbr\u003e# \u0026gt; Hello!\u003cbr\u003e# \u0026gt; Hello!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy default, Ruby doesn't display any output. The methods \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e are a great way to explicitly tell the program to display specific information. Without these printing methods, Ruby will read the line, but not print anything out.\u003c/p\u003e\n\n\u003ch3\u003eBonus: How Puts and Print put and print\u003c/h3\u003e\n\n\u003cp\u003eHow do the \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e methods actually output text to your console? They use the \u003ccode\u003e$stdout\u003c/code\u003e global variable provided to us by Ruby. (You don't need to worry about writing global variables right now.) For the purposes of understanding how \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e work, we just need to understand the following:\u003c/p\u003e\n\n\u003cp\u003eRuby uses the \u003ccode\u003e$stdout\u003c/code\u003e global variable to communicate with your computers standard output stream (this happens through various other intermediaries which we won't delve into now). So in a basic sense, \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e actually use the \u003ccode\u003e$stdout\u003c/code\u003e variable to send the information to the output stream on your computer which communicates with your operating system and outputs that information to the console.\u003c/p\u003e\n\n\u003cp\u003eYou can absolutely employ \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e without understanding everything that was just described. But if you do understand it, then you now have a basic sense of what is happening under the hood of these methods.\u003c/p\u003e\n\n\u003ch2\u003eReturning Values\u003c/h2\u003e\n\n\u003cp\u003eWhile methods like \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e allow us to output to the console, this is different from Ruby's concept of a \u003cem\u003ereturn value\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eA return value is the data returned to the program by the execution of a method, the assignment of a variable, actually...\u003c/p\u003e\n\n\u003cp\u003eEverything in Ruby has a return value!\u003c/p\u003e\n\n\u003cp\u003eFor instance:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003eCode\u003c/th\u003e\n    \u003cth\u003eReturn Value\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\"Hello world\"\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e\"Hello world\"\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e6 + 3\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e9\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003epresident = \"Obama\"\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e\"Obama\"\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003etotal = 6 + 3\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003e9\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eputs \"hello world\"\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003enil\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eprint \"hello world\"\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003enil\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eYou may notice that the \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e methods, when run in IRB, print values on the screen and then display a line like this: \u003ccode\u003e=\u0026gt; nil\u003c/code\u003e. This is because \u003ccode\u003eputs\u003c/code\u003e and \u003ccode\u003eprint\u003c/code\u003e may print the value you want, but instead of \u003cem\u003ereturning\u003c/em\u003e that value, they return \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eReturn Values of Methods\u003c/h3\u003e\n\n\u003cp\u003eMethods are like vending machines. When you use a vending machine you just put in two arguments, the number (C7) and your money. We already know how to use arguments, but then your vending machine might do two things. One, it will make a noise saying that everything worked, beep beep. Then it gives you the soda. The soda is the return type. But those beeps? Are you able to do anything with them? Nope! That's like puts: it just tells you stuff and then goes into the ether! Gone forever.\u003c/p\u003e\n\n\u003cp\u003eEvery method in Ruby returns a value by default. This returned value will be the value of the last statement.\u003c/p\u003e\n\n\u003cp\u003eFor example, let's look at this method called \u003ccode\u003erestaurant\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef restaurant\u003cbr\u003e  restaurant_name = \"Guy's American Kitchen \u0026amp; Bar\"\u003cbr\u003e  cuisine = \"american\"\u003cbr\u003e  motto = \"Welcome to Flavor Town!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe return value of the \u003ccode\u003erestaurant\u003c/code\u003e method is \u003ccode\u003e\"Welcome to Flavor Town!\"\u003c/code\u003e because that was the last statement evaluated.\u003c/p\u003e\n\n\u003cp\u003eSay you're the best chef in the world, Guy Fieri. To make a method that just prints your name and returns \u003ccode\u003enil\u003c/code\u003e, you could write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef print_name\u003cbr\u003e  puts \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo write a method that returns your name but doesn't print anything, you could write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef return_name\u003cbr\u003e  \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo both print and return your name, you could write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef print_and_return_name\u003cbr\u003e  puts \"Guy Fieri\"\u003cbr\u003e  \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you accidentally switched the order of the lines inside the method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef broken_print_and_return_name\u003cbr\u003e  \"Guy Fieri\"\u003cbr\u003e  puts \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe method would instead print \"Guy Fieri\" and return \u003ccode\u003enil\u003c/code\u003e. This is because the last line that was evaluated was \u003ccode\u003eputs ...\u003c/code\u003e and the return value of a \u003ccode\u003eputs\u003c/code\u003e, as seen in the table above, is always \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eThe Return Keyword\u003c/h4\u003e\n\n\u003cp\u003eThere is one other way to return a value from a method and that is to use the \u003ccode\u003ereturn\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef stylish_chef\u003cbr\u003e  best_hairstyle = \"Guy Fieri\"\u003cbr\u003e  return \"Martha Stewart\"\u003cbr\u003e  \"Guy Fieri\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat do you expect the return value of the above method to be? Go into IRB, copy and paste the above method and call it. Go on, I'll wait.\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003eYou may have expected the return value to be \"Guy Fieri\". His name is the last line of the method and it is true that he does have the best style (you can't beat sunglasses on the back of the head, sorry).\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eHowever\u003c/em\u003e, the return value of the above method is actually \u003ccode\u003e=\u0026gt; Martha Stewart\u003c/code\u003e! (Note: if you aren't getting \"Martha Stewart\" as the return value remember you need to call the method in IRB.)\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ereturn\u003c/code\u003e keyword will disrupt the execution of your method. If you employ it, your method will return whatever you have explicitly told it to (in this case, \u003ccode\u003e\"Martha Stewart\"\u003c/code\u003e), and terminate.\u003c/p\u003e\n\n\u003cp\u003eThe explicit use of the \u003ccode\u003ereturn\u003c/code\u003e keyword is generally avoided by many Rubyists, but there are instances where you might want to use \u003ccode\u003ereturn\u003c/code\u003e instead of relying on implicit returns. In the following method, we create a variable \u003ccode\u003ename\u003c/code\u003e. For fun, let's see the name reversed. The method \u003ccode\u003eputs\u003c/code\u003e out the reversed name; however, because we use \u003ccode\u003ereturn\u003c/code\u003e, the return value of the method will be the original name unchanged.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef change_my_name\u003cbr\u003e  name = \"Frank\"\u003cbr\u003e  puts name.reverse\u003cbr\u003e  return name\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along Exercise: Practicing Return Values\u003c/h3\u003e\n\n\u003cp\u003eLet's try it out once more together. In your terminal, drop into IRB. Then, follow the steps below:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eIn IRB, type: \u003ccode\u003e6 + 3\u003c/code\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou should see a return value of \u003ccode\u003e=\u0026gt; 9\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNow, set a variable \u003ccode\u003etotal\u003c/code\u003e equal to \u003ccode\u003e6 + 3\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou've just \u003cem\u003estored\u003c/em\u003e the return value of adding \u003ccode\u003e6\u003c/code\u003e and \u003ccode\u003e3\u003c/code\u003e and you can now grab that return value \u003ccode\u003e9\u003c/code\u003e by referencing the \u003ccode\u003etotal\u003c/code\u003e variable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSet another variable, \u003ccode\u003enew_total\u003c/code\u003e equal to \u003ccode\u003etotal + 10\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou should see a return value of \u003ccode\u003e19\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCopy and paste the below method definitions in IRB and hit \u003ccode\u003ereturn\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003eFirst Method\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef print_one_plus_one\u003cbr\u003e  puts 1+1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprint_one_plus_one #this invokes the method\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eYou should see the following output:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2\u003cbr\u003e=\u0026gt; nil\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the first method, the method outputs \u003ccode\u003e2\u003c/code\u003e to the terminal then returns \u003ccode\u003enil\u003c/code\u003e, because \u003ccode\u003eputs\u003c/code\u003e always returns \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eSecond Method\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef one_plus_one\u003cbr\u003e  1+1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eone_plus_one #this invokes the method\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eYou should see the following output:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e =\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the second method, the method simply returns the value of \u003ccode\u003e1+1\u003c/code\u003e, which is \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWhy Return Values Matter\u003c/h3\u003e\n\n\u003cp\u003eReturn values are how different parts of your program communicate with one another. You don't have to worry too much about this for now, but as you start to build more complicated programs, you'll find that the return value of one method might be operated on by a subsequent method.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a very basic example. Earlier, in IRB, we set a variable \u003ccode\u003etotal\u003c/code\u003e equal to the return value of adding \u003ccode\u003e6 + 3\u003c/code\u003e. First, return to IRB. Then re-create your \u003ccode\u003etotal\u003c/code\u003e variable as the sum of \u003ccode\u003e6 + 3\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOn the next line, execute \u003ccode\u003etotal + 17\u003c/code\u003e. You should see a return value of \u003ccode\u003e=\u0026gt; 26\u003c/code\u003e. Thus, the return value of one operation (\u003ccode\u003e6 + 3\u003c/code\u003e) was used to execute further operations (the addition of \u003ccode\u003e17\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eAs we've just done, you'll find that we will often store return values in variables so that we can use them later.\u003c/p\u003e","frontPage":false},{"exportId":"how-the-web-works","title":"How the Web Works","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"how-the-web-works-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/how-the-web-works-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/how-the-web-works-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/how-the-web-works-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/welcome.gif\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a client and server\u003c/li\u003e\n\u003cli\u003eExplain what an HTTP request is\u003c/li\u003e\n\u003cli\u003eExplain the nature of request and response\u003c/li\u003e\n\u003cli\u003eDefine a static site vs. a dynamic site\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntro\u003c/h2\u003e\n\n\u003cp\u003eHow many times a day do you use the internet? How many times do you load a\ndifferent web page? Think about how many times you do this in a year! In order\nto be a developer-- and especially a web developer-- it's incredibly important\nto understand how the web works. From here on out, you are no longer just a user\nof the internet. You are a creator of the web.\u003c/p\u003e\n\n\u003ch2\u003eClient and Server\u003c/h2\u003e\n\n\u003cp\u003eSo seriously, how does this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttps://www.youtube.com/user/AdeleVEVO\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTurn into this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/request-intro.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe internet operates based on conversations between the client (more familiarly\nknown as the browser) and the server (the code running the web site you're\ntrying to load). By typing in that URL into your browser, you (the client) are\n\u003cem\u003erequesting\u003c/em\u003e a web page. The server then receives the request, processes it, and\nsends a \u003cem\u003eresponse\u003c/em\u003e. Your browser receives that response and shows it to you.\nThese are the fundamentals of the web. Browsers send requests, and servers send\nresponses. Until today you have always been a client. Moving forward you will be\nbuilding the server. This means processing requests, creating responses, and\nsending them back to the client.\u003c/p\u003e\n\n\u003cp\u003eWe will be writing our servers using Ruby and a few different frameworks. But\nyour browser doesn't know, nor does it care, what server it talks to. How does\nthat work? How can a server that was written 15 years ago still work with a\nbrowser written 15 months or days ago? \u003c/p\u003e\n\n\u003cp\u003eIn addition, you can use multiple clients! You can use Chrome, Safari, Internet\nExplorer, Opera, and many others. All of those browsers are able to talk to the\nsame server. Let's take a closer look at how this occurs.\u003c/p\u003e\n\n\u003ch2\u003eHTTP Overview\u003c/h2\u003e\n\n\u003cp\u003eBeing able to switch out both the server or the client happens because the way\nbrowsers and servers talk is controlled by a contract or \u003cem\u003eprotocol\u003c/em\u003e.\nSpecifically it is a protocol created by Tim Berners-Lee called the \u003cstrong\u003eH\u003c/strong\u003eyper\n\u003cstrong\u003eT\u003c/strong\u003eext \u003cstrong\u003eT\u003c/strong\u003eransfer \u003cstrong\u003eP\u003c/strong\u003erotocol or HTTP. Your server will receive requests\nfrom the browser that follow HTTP. It then responds with an HTTP response that\nall browsers are able to parse.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eHTTP\u003c/code\u003e is the language browsers speak. Every time you load a web page, you are\nmaking an \u003ccode\u003eHTTP\u003c/code\u003e request to the site's server, and the server sends back an\n\u003ccode\u003eHTTP\u003c/code\u003e response.\u003c/p\u003e\n\n\u003cp\u003eIn the example above, the client is making an \u003ccode\u003eHTTP GET request\u003c/code\u003e to YouTube's\nserver. YouTube's server then sends back a response and the client renders the\npage in the browser.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/how-the-web-works/Image_17_ComputerServer.png\" alt=\"computer server\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRequests\u003c/h2\u003e\n\n\u003ch3\u003eURI\u003c/h3\u003e\n\n\u003cp\u003eWhen you make a request on the web, how do you know where to send it?  This is\ndone through \u003cstrong\u003eU\u003c/strong\u003eniform \u003cstrong\u003eR\u003c/strong\u003eesource \u003cstrong\u003eI\u003c/strong\u003edentifiers or URIs. You've probably\nalso heard of these as URLs. Both are fine. Let's look at the URI we used up\ntop.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://www.youtube.com/adelevevo\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis URI is broken into three parts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ehttp\u003c/code\u003e - the protocol\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eyoutube.com\u003c/code\u003e - the domain\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e/adelevevo\u003c/code\u003e - the resource\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe \u003ccode\u003eprotocol\u003c/code\u003e is the way we're sending our request. There are several different\ntypes of internet protocols (SMTP for emails, HTTPS for secure requests, FTP for\nfile transfers). To load a website, we use HTTP.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edomain name\u003c/code\u003e is a string of characters that identifies the unique location\nof the web server that hosts that particular website. This will be things like\n\u003ccode\u003eyoutube.com\u003c/code\u003e and \u003ccode\u003egoogle.com\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eresource\u003c/code\u003e is the particular part of the website we want to load. YouTube\nhas millions and millions of channels and videos, so the specific resource we\nwant is \u003ccode\u003e/adelevevo\u003c/code\u003e (because we can't get Hello out of our heads).\u003c/p\u003e\n\n\u003cp\u003eAn analogy that works well is thinking of an apartment building. The domain is\nthe entire building. Within that building though there are hundreds of\napartments. We use the specific resource (or sometimes called path) to figure\nout that we care about apartment 4E. The numbering/lettering system is different\nfor every apartment building, just like how a server has its resources laid out\nis a bit different for every website. For example doing a search on Google ends\nin a URL like this \u003ccode\u003ehttps://www.google.com/search?q=URI\u003c/code\u003e but searching for URI\non Facebook leads to this URL \u003ccode\u003ehttps://www.facebook.com/search/top/?q=uri\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eHTTP Verbs\u003c/h3\u003e\n\n\u003cp\u003eWhen you're making a request, not only do you want to give all the details of\nyour request, you also need to specify what action you would like the server to\ndo. We do this with HTTP Verbs. With the same resource, you may want more than\none action to occur. Using a browser, almost all requests are \u003ccode\u003eGET\u003c/code\u003e requests.\nThis just means \"hey server, please GET me this resource\". There are a few other\nverbs though. What if we want to send some data from the user to the server?\nThis is done with a \u003ccode\u003ePOST\u003c/code\u003e request. There are a ton of verbs, and we'll go\nfurther into them later, but here is a full list:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eVERB\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eHEAD\u003c/td\u003e\n\u003ctd\u003eAsks for a response like a GET but without the body\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003eRetrieves a representation of a resource\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePOST\u003c/td\u003e\n\u003ctd\u003eSubmits data to be processed in the body of the request\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePUT\u003c/td\u003e\n\u003ctd\u003eUploads a representation of a resource in the body of the request\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDELETE\u003c/td\u003e\n\u003ctd\u003eDeletes a specific resource\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTRACE\u003c/td\u003e\n\u003ctd\u003eEchoes back the received request\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOPTIONS\u003c/td\u003e\n\u003ctd\u003eReturns the HTTP methods the server supports\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCONNECT\u003c/td\u003e\n\u003ctd\u003eConverts the request to a TCP/IP tunnel (generally for SSL)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePATCH\u003c/td\u003e\n\u003ctd\u003eApply a partial modification of a resource\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3\u003eRequest Format\u003c/h3\u003e\n\n\u003cp\u003eOur client so far has made a request to YouTube's server. In this case, a\nrequest to \u003ccode\u003e/adelevevo\u003c/code\u003e. The server then responds with all the code associated\nwith that resource \u003ccode\u003e\u0026lt;!doctype html\u0026gt; .....\u0026lt;/html\u0026gt;\u003c/code\u003e, including all images, CSS\nfiles, JavaScript files, videos, music, etc. \u003c/p\u003e\n\n\u003cp\u003eWhen the client makes a request, it includes other items besides just the URL in\nthe \"headers.\" The request header contains all the information the server needs\nin order to fulfill the request: the type of request, the resource (path), the\ndomain as well as some other metadata like what type of browser is making this\nrequest. The request header would look something like this.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/request-header.png\" alt=\"request header\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eResponses\u003c/h2\u003e\n\n\u003cp\u003eOnce your server receives the request, it will do some processing (run code you\nwrote!) and then send a response back. The server's response headers look\nsomething like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/response-headers.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe server's response is separated into two sections, the headers and the body.\nThe headers are all of the metadata about the response. This includes things\nlike content-length (how big is my response) and what type of content it is. The\nheaders also include the status code of the response. The \u003cem\u003ebody\u003c/em\u003e of the response\nis what you see rendered on the page. It is all of that HTML/CSS that you see!\nMost of the data of a response is in the body, not in the headers.\u003c/p\u003e\n\n\u003ch3\u003eStatus Codes\u003c/h3\u003e\n\n\u003cp\u003eEvery time there is a successful response (you'll know it's successful because\n the page will load without any errors), it's a status code of \u003ccode\u003e200\u003c/code\u003e, but there\n are other status codes and it's good to get familiar with them. You've probably\n seen the second most popular status code, \u003ccode\u003e404\u003c/code\u003e. This means \"file not found.\"\n Status codes are separated into categories based on their first digit. Here are\n the different categories:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e100's - informational\u003c/li\u003e\n\u003cli\u003e200's - success\u003c/li\u003e\n\u003cli\u003e300's - redirect\u003c/li\u003e\n\u003cli\u003e400's - error\u003c/li\u003e\n\u003cli\u003e500's - server error\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA full list of status codes is \u003ca href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\"\u003eup on Wikipedia\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eServers\u003c/h2\u003e\n\n\u003cp\u003eIt's important to note that there are two different types of webapps: static and\ndynamic. A \u003ccode\u003estatic\u003c/code\u003e webapp is one that doesn't change. The content doesn't\nchange unless a developer opens up an HTML file and modifies the content of that\nfile. \u003ccode\u003eDynamic\u003c/code\u003e webapps are sites where the content changes based on user input\n(e.g. Facebook, Twitter, Yelp, etc.). Every time you visit the site, the content\nis most likely different because someone else gave a review of that restaurant,\nor sent out a new tweet, or commented on that image you liked. These are the\ntypes of apps you'll be building.\u003c/p\u003e\n\n\u003cp\u003eThe flow of request and response changes slightly based on a static or a dynamic\nwebapp. \u003c/p\u003e\n\n\u003cp\u003eWhen the client wants to load a static site, the client makes a request, the\nserver finds the file on a disk, and sends it back. Done and Done.\u003c/p\u003e\n\n\u003cp\u003eIt gets a little bit more complex with a webapp. The client makes a request, the\nserver runs application code (think of this as your Ruby code), and returns a\ndynamically generated response.\u003c/p\u003e","frontPage":false},{"exportId":"table-relations-in-sql-conclusion","title":"Table Relations in SQL Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've established that SQL is a useful programming language to know, and that\nthe majority of databases you'll work with will have more than one table. As\ndemonstrated in this section, we've been able to learn and apply concepts that\nconnect together these tables in various ways. These table relationships are\nimportant to illustrate real-world data.\u003c/p\u003e\n\n\u003cp\u003eIn this section we covered: The structure of a relational database as tables,\nhow to associate data tables using a foreign key column, various tables with\nrelations such as \"one-to-one\" and \"many-to-many\" and different types of joins.\nWe can now distinguish the different types of relationships between data in a\ndatabase.\u003c/p\u003e\n\n\u003cp\u003eWith the ability to define relationships between different tables we can model\ndata that is more accurate to the real world!\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-sql","title":"Introduction to SQL","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-intro-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eJust as humans have brains, and computers have hard drives that store\ninformation, most programs have a storage system that needs to be communicated\nwith. How do we store and find stored data? In databases, and using \u003cem\u003eStructured\nQuery Language\u003c/em\u003e, or SQL. SQL can be used with a ton of different databases\nlike MySQL, Postgres, etc. It powers the logic behind server-side frameworks.\nSQL has many variations, but for our lessons, we will be using \u003ca href=\"https://www.sqlite.org/index.html\"\u003eSQLite\u003c/a\u003e. While\nthere are some minor differences we'll note later on, the fundamentals stay the\nsame.\u003c/p\u003e\n\n\u003cp\u003eIn the next several lessons, we're going to learn:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat SQL is\u003c/li\u003e\n\u003cli\u003eHow to create and open a database file and table\u003c/li\u003e\n\u003cli\u003eThe three specific SQLite database types\u003c/li\u003e\n\u003cli\u003eWhat \"single source of truth\" means in the context of object associations\u003c/li\u003e\n\u003cli\u003eExecuting SQL code\u003c/li\u003e\n\u003cli\u003eHow to create advanced queries using aggregator functions\u003c/li\u003e\n\u003cli\u003eRelational database mapping in object-oriented programming\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, you'll learn how to find information associated with particular\ncriteria and how to create and manipulate data.\u003c/p\u003e","frontPage":false},{"exportId":"iterating-through-nested-arrays","title":"Iterating Through Nested Arrays","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-iteration\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDisplay the cells in an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eTraverse \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es to produce a single value\u003c/li\u003e\n\u003cli\u003eTraverse \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es to produce a new nested data structure\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen we started this module, we mentioned that we often use nested data\nstructures as a \"base\" from which to do data processing. \u003ccode\u003eArray\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es\nis our first milestone in learning to work with nested data.\u003c/p\u003e\n\n\u003cp\u003eIn the next few labs, we're going to pick out three specific types of\nprocessing to practice:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDisplaying the nested structure\u003c/li\u003e\n\u003cli\u003eTransforming the nested structure into a new structure (a collection)\u003c/li\u003e\n\u003cli\u003eTransforming the nested structure into a result (a single thing, usually a number)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn all three examples, we will use loops to traverse the entire data structure.\u003c/p\u003e\n\n\u003ch2\u003eReview Looping Through Arrays\u003c/h2\u003e\n\n\u003cp\u003eIn previous lessons, we looked at how to traverse an array using a \u003ccode\u003ewhile\u003c/code\u003e loop.\nLet's look at a few examples. Most of the examples used a variable that would\nincrement every time the loop code executed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [\"a\", \"b\", \"c\", \"d\"]\u003cbr\u003e\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  # code to work on the array would go here\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we wanted to output every element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [100, 300, 50, 450]\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  puts array[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAny simple array can be displayed using this method.\u003c/p\u003e\n\n\u003cp\u003eIf we wanted to \u003cem\u003emodify\u003c/em\u003e each element, we would change \u003ccode\u003eputs array[count]\u003c/code\u003e. Say, for\ninstance, we want to perform some math operation on each element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [100, 300, 50, 450]\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  array[count] = array[count] * array[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003earray\u003cbr\u003e # =\u0026gt; [10000, 90000, 2500, 202500]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe code above alters each element in the original array, replacing each\nvalue with the square of itself. If we didn't want to modify the original, we\ncan collect the result of each operation in a new array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [100, 300, 50, 450]\u003cbr\u003eresults_array = []\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  results_array \u0026lt;\u0026lt; array[count] * array[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eresults_array\u003cbr\u003e # =\u0026gt; [10000, 90000, 2500, 202500]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, \u003ccode\u003earray\u003c/code\u003e is kept as is, but the square of each of its elements is added to\n\u003ccode\u003eresults_array\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFinally, if we wanted to derive a single value from an array of elements, we\nmodify a variable on each loop rather than adding to a new collection. If we\nwanted to sum our array values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [100, 300, 50, 450]\u003cbr\u003esum = 0\u003cbr\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array.length do\u003cbr\u003e  sum = sum + array[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esum\u003cbr\u003e # =\u0026gt; 900\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've \u003cem\u003ereduced\u003c/em\u003e the array down to a single value.\u003c/p\u003e\n\n\u003ch2\u003eLooping Through Nested Arrays\u003c/h2\u003e\n\n\u003cp\u003eConsider the following array of arrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays = [\u003cbr\u003e  [1, 2, 3],\u003cbr\u003e  [4, 5, 6],\u003cbr\u003e  [7, 8, 9]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we wanted to print out each nested array manually, we would write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays[0]\u003cbr\u003e # =\u0026gt; [1, 2, 3]\u003cbr\u003earray_of_arrays[1]\u003cbr\u003e # =\u0026gt; [4, 5, 6]\u003cbr\u003earray_of_arrays[2]\u003cbr\u003e # =\u0026gt; [7, 8, 9]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we wanted to print the elements in each array, we could add a second set of brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays[0][0]\u003cbr\u003e # =\u0026gt; 1\u003cbr\u003earray_of_arrays[0][1]\u003cbr\u003e # =\u0026gt; 2\u003cbr\u003earray_of_arrays[0][2]\u003cbr\u003e # =\u0026gt; 3\u003cbr\u003earray_of_arrays[1][0]\u003cbr\u003e # =\u0026gt; 4\u003cbr\u003earray_of_arrays[1][1]\u003cbr\u003e # =\u0026gt; 5\u003cbr\u003earray_of_arrays[1][2]\u003cbr\u003e # =\u0026gt; 6\u003cbr\u003earray_of_arrays[2][0]\u003cbr\u003e # =\u0026gt; 7\u003cbr\u003earray_of_arrays[2][2]\u003cbr\u003e # =\u0026gt; 8\u003cbr\u003earray_of_arrays[2][3]\u003cbr\u003e # =\u0026gt; 9\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile this works fine, it requires specific, concrete code. If one of these\narrays had more or less than three elements, we would have to change our code to\naccount for it. Using \u003ccode\u003ewhile\u003c/code\u003e loops solves this.\u003c/p\u003e\n\n\u003cp\u003eWhen looping through an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es data structure, we add a second\n\u003ccode\u003ewhile\u003c/code\u003e loop. First, we start with a single loop:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e  p array_of_arrays[count]\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above code will output each nested array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1, 2, 3]\u003cbr\u003e[4, 5, 6]\u003cbr\u003e[7, 8, 9]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Using \u003ccode\u003ep\u003c/code\u003e will display each array, but \u003ccode\u003eputs\u003c/code\u003e will output all the\nvalues inside those arrays!  We use \u003ccode\u003ep\u003c/code\u003e here to make the output a little\nclearer.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWith a single loop like this, we can access each of the nested arrays. At this\npoint, we \u003cem\u003ecould\u003c/em\u003e create a sort of hybrid between looping and directly accessing\nvalues:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e  p array_of_arrays[count][0]\u003cbr\u003e  p array_of_arrays[count][1]\u003cbr\u003e  p array_of_arrays[count][2]\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis prints out each value from each nested array, but still requires specific\ncode - \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, and \u003ccode\u003e2\u003c/code\u003e, the exact indices of the array elements. Instead, we\ncan use a second \u003ccode\u003ewhile\u003c/code\u003e loop:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e  p array_of_arrays[count]\u003cbr\u003e\u003cbr\u003e  inner_count = 0\u003cbr\u003e  while inner_count \u0026lt; array_of_arrays[count].length do\u003cbr\u003e    p array_of_arrays[count][inner_count]\u003cbr\u003e    inner_count += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice we've left in the original \u003ccode\u003ep\u003c/code\u003e statement to show each outer loop. This\ncode outputs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1, 2, 3]\u003cbr\u003e1\u003cbr\u003e2\u003cbr\u003e3\u003cbr\u003e[4, 5, 6]\u003cbr\u003e4\u003cbr\u003e5\u003cbr\u003e6\u003cbr\u003e[7, 8, 9]\u003cbr\u003e7\u003cbr\u003e8\u003cbr\u003e9\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a moment to try and visualize what is happening. Every time the outer\n\u003ccode\u003ewhile\u003c/code\u003e loop executes, the inner \u003ccode\u003ewhile\u003c/code\u003e loop runs three times. Stepping\nthrough one loop:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethe outer \u003ccode\u003ewhile\u003c/code\u003e loop executes because \u003ccode\u003ecount\u003c/code\u003e is less than the length\nof \u003ccode\u003earray_of_arrays\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ep array_of_arrays[count]\u003c/code\u003e is called, which prints the entire first nested array\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003einner_count\u003c/code\u003e is assigned to \u003ccode\u003e0\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ethe inner \u003ccode\u003ewhile\u003c/code\u003e loop executes because \u003ccode\u003einner_count\u003c/code\u003e is less than the length\nof the \u003cstrong\u003efirst\u003c/strong\u003e nested array, \u003ccode\u003earray_of_arrays[count]\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ep array_of_arrays[count][inner_count]\u003c/code\u003e is called, printing the \u003cem\u003efirst\u003c/em\u003e value\nof the first nested array because \u003ccode\u003ecount\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003einner_count\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003einner_count\u003c/code\u003e is incremented and now equals \u003ccode\u003e1\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ethe inner \u003ccode\u003ewhile\u003c/code\u003e loop executes because \u003ccode\u003einner_count\u003c/code\u003e is less than the length\nof the \u003cstrong\u003efirst\u003c/strong\u003e nested array, \u003ccode\u003earray_of_arrays[count]\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ep array_of_arrays[count][inner_count]\u003c/code\u003e is called, printing the \u003cem\u003esecond\u003c/em\u003e value\nof the first nested array because \u003ccode\u003ecount\u003c/code\u003e is still \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003einner_count\u003c/code\u003e is \u003ccode\u003e1\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003einner_count\u003c/code\u003e is incremented and now equals \u003ccode\u003e2\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ethe inner \u003ccode\u003ewhile\u003c/code\u003e loop executes because \u003ccode\u003einner_count\u003c/code\u003e is less than the length\nof the \u003cstrong\u003efirst\u003c/strong\u003e nested array, \u003ccode\u003earray_of_arrays[count]\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ep array_of_arrays[count][inner_count]\u003c/code\u003e is called, printing the \u003cem\u003ethird\u003c/em\u003e value\nof the first nested array because \u003ccode\u003ecount\u003c/code\u003e is still \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003einner_count\u003c/code\u003e is \u003ccode\u003e2\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003einner_count\u003c/code\u003e is incremented and now equals \u003ccode\u003e3\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ethe inner \u003ccode\u003ewhile\u003c/code\u003e loop does not execute because \u003ccode\u003einner_count\u003c/code\u003e is now equal to\nthe length of the first nested array\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecount\u003c/code\u003e is incremented and now equals \u003ccode\u003e1\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis process happens two more times, looping through the second and third nested\narrays.\u003c/p\u003e\n\n\u003ch2\u003eMapping Nested Arrays\u003c/h2\u003e\n\n\u003cp\u003eWe displayed nested content, now let's try to collect it. Given the same array of\narrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays = [\u003cbr\u003e  [1, 2, 3],\u003cbr\u003e  [4, 5, 6],\u003cbr\u003e  [7, 8, 9]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we wanted to collect all the values of each nested array into a single\narray?\u003c/p\u003e\n\n\u003cp\u003eFirst, we create a variable, \u003ccode\u003eresults_array\u003c/code\u003e, the new array we want. Then, we\nbuild two \u003ccode\u003ewhile\u003c/code\u003e loops again. Instead of outputting each element in each\nnested array, we'll just push it into the \u003ccode\u003eresults_array\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003eresults_array = [] # new array\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e\u003cbr\u003e  inner_count = 0\u003cbr\u003e  while inner_count \u0026lt; array_of_arrays[count].length do\u003cbr\u003e    results_array \u0026lt;\u0026lt; array_of_arrays[count][inner_count] # pushes every element into an array\u003cbr\u003e    inner_count += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eresults_array\u003cbr\u003e # =\u0026gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a moment to think about how this code executes step by step again.\u003c/p\u003e\n\n\u003ch2\u003eReducing Values in Nested Arrays\u003c/h2\u003e\n\n\u003cp\u003eIn a similar fashion to mapping over an array, reducing requires a variable to\ncontain an accumulated result. If we wanted the sum of all of these nested\nvalues, we would replace the array from last time with an integer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecount = 0\u003cbr\u003esum = 0\u003cbr\u003e\u003cbr\u003ewhile count \u0026lt; array_of_arrays.length do\u003cbr\u003e\u003cbr\u003e  inner_count = 0\u003cbr\u003e  while inner_count \u0026lt; array_of_arrays[count].length do\u003cbr\u003e    sum = sum + array_of_arrays[count][inner_count] # adds the element's value to sum and sets sum\u003cbr\u003e    inner_count += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  count += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esum\u003cbr\u003e # =\u0026gt; 45\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, like the others, we access the values inside a nested array\nusing chained brackets, \u003ccode\u003e[count]\u003c/code\u003e and \u003ccode\u003e[inner_count]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eUsing two \u003ccode\u003ewhile\u003c/code\u003e loops, we were able to display, collect, and reduce a set of\nnested arrays. The exact design of the loops required for this sort of task is\ndependent on the data structure you are working with. An \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003e of\n\u003ccode\u003eArray\u003c/code\u003es, for instance, would need \u003cem\u003ethree\u003c/em\u003e loops.\u003c/p\u003e\n\n\u003cp\u003eThe critical takeaway here, though, is that we can draw out the information we want\nfrom data structures by iterating over them with basic loops. This sort of task\nis so common that Ruby has built-in methods to handle the work like \u003ca href=\"https://ruby-doc.org/core-2.5.0/Array.html#method-i-each\"\u003e\u003ccode\u003eeach\u003c/code\u003e\u003c/a\u003e,\n\u003ca href=\"https://ruby-doc.org/core-2.5.0/Array.html#method-i-map\"\u003e\u003ccode\u003emap\u003c/code\u003e\u003c/a\u003e, and \u003ca href=\"https://ruby-doc.org/core-2.5.0/Array.html#method-i-sum\"\u003e\u003ccode\u003esum\u003c/code\u003e\u003c/a\u003e that we can apply directly to arrays. We will learn\nthese methods soon, but remember that at their cores, they are all based on\nsimple loops.\u003c/p\u003e","frontPage":false},{"exportId":"hash-iteration","title":"Hash Iteration","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-creating-and-updating-hash-key-value-pairs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-creating-and-updating-hash-key-value-pairs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-creating-and-updating-hash-key-value-pairs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-creating-and-updating-hash-key-value-pairs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUpdate hash values\u003c/li\u003e\n\u003cli\u003eAdd keys and values to a hash\u003c/li\u003e\n\u003cli\u003eFind or create a hash value\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhile we're now able to read hash values using keys, currently, when we create\na hash, we're stuck with whatever data was entered in when the hash was created:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson = {\u003cbr\u003e  name: \"Sam\",\u003cbr\u003e  age: 31\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Sam\", :age=\u0026gt;31}\u003cbr\u003e\u003cbr\u003eperson[:age]\u003cbr\u003e#=\u0026gt; 31\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this lesson, we're going to look at modifying and adding data to existing\nhashes. This way, we can create a hash then update it as we need, letting us\nmaintain associations between pieces of data, even if the pieces themselves are\naltered.\u003c/p\u003e\n\n\u003ch2\u003eUpdate Hash Values\u003c/h2\u003e\n\n\u003cp\u003eUpdating hash values is very similar to looking them up. For updating, we use\nthe \u003cstrong\u003ebracket-equals\u003c/strong\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson = {\u003cbr\u003e  name: \"Sam\",\u003cbr\u003e  age: 31\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Sam\", :age=\u0026gt;31}\u003cbr\u003e\u003cbr\u003eperson[:age]\u003cbr\u003e#=\u0026gt; 31\u003cbr\u003e\u003cbr\u003eperson[:age] = 32\u003cbr\u003e#=\u0026gt; 32\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we look back at the entire hash, we see that the value associated with the\n\u003ccode\u003e:age\u003c/code\u003e key has changed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Sam\", :age=\u0026gt;32}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing the bracket-equals method, we can mutate any value stored inside a hash.\nAll we need to know is the associated key.\u003c/p\u003e\n\n\u003ch2\u003eAdd Keys and Values to a Hash\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we saw that using the bracket method and passing in an\ninvalid key returns \u003ccode\u003enil\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson[:hometown]\u003cbr\u003e#=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, what happens when we use an invalid key with the bracket-equals method? When\nRuby discovers that the key is not present on the hash in question, Ruby will\nsimply \u003cem\u003ecreate\u003c/em\u003e a key/value pair on the hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson = {\u003cbr\u003e  name: \"Sam\",\u003cbr\u003e  age: 31\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e# No :hometown key found\u003cbr\u003eperson[:hometown]\u003cbr\u003e#=\u0026gt; nil\u003cbr\u003e\u003cbr\u003e# Because :hometown was not present, Ruby creates the key value pair here\u003cbr\u003eperson[:hometown] = \"Brooklyn, NY\"\u003cbr\u003e#=\u0026gt; \"Brooklyn, NY\"\u003cbr\u003e\u003cbr\u003e# Now, the :hometown key refers to \"Brooklyn, NY\" when used in the brack method\u003cbr\u003eperson[:hometown]\u003cbr\u003e#=\u0026gt; \"Brooklyn, NY\"\u003cbr\u003e\u003cbr\u003e# Our original hash is also mutated\u003cbr\u003eperson\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Sam\", :age=\u0026gt;31, :hometown=\u0026gt;\"Brooklyn, NY\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe general syntax for adding a new value to a hash is:\n\u003ccode\u003ehash[:new_key] = \"New Value\"\u003c/code\u003e. \u003ccode\u003e:new_key\u003c/code\u003e is the literal new key we added to\nthe hash and we assigned the \u003ccode\u003e:new_key\u003c/code\u003e a value of \u003ccode\u003e\"New Value\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eFind or Create a Hash Value\u003c/h2\u003e\n\n\u003cp\u003eWe saw in the last lesson that the bracket method can be used in conditional\nstatements. One common use case of this is having to either find a value or \n\u003cem\u003ecreate\u003c/em\u003e that value. Let's consider what is involved.\u003c/p\u003e\n\n\u003cp\u003eFirst, let's take an example hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest = {\u003cbr\u003e  \"whale bone corset\" =\u0026gt; 5,\u003cbr\u003e  \"porcelain vase\" =\u0026gt; 2,\u003cbr\u003e  \"oil painting\" =\u0026gt; 3,\u003cbr\u003e  \"silverware\" =\u0026gt; 34,\u003cbr\u003e  \"loom\" =\u0026gt; 1\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eImagine the above hash is a manifest for products being shipped, with their\nvalues representing quantity, and our job is to keep a tally as more products\nare counted. A fourth oil painting shows up and we need to add it to the list.\nEasy enough. The hash is small enough that we could just write the following and\nbe done:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest[\"oil painting\"] = 4\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThree paintings previously accounted for, plus one new painting. However, we can\nbe a bit more abstract than that. Is there a way we can quickly increment an\ninteger without having to explicitly know the previous value? Well, we could do\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest[\"oil painting\"] = shipping_manifest[\"oil painting\"] + 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow \u003ccode\u003eshipping_manifest[\"oil painting\"]\u003c/code\u003e will be assigned to whatever it was\npreviously, \u003cem\u003eplus one\u003c/em\u003e. If you recall from the looping lessons in Programming as\nConversation, there is an even shorter way to express this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest[\"oil painting\"] += 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! But wait.. what happens when a \u003cem\u003enew\u003c/em\u003e item is introduced. Say we need to\nship one top hat, which isn't present in the shipping_manifest yet.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshipping_manifest[\"top hat\"] += 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you plug the \u003ccode\u003eshipping_manifest\u003c/code\u003e hash into IRB and try the code snippet above,\nyou'll receive an error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNoMethodError (undefined method `+' for nil:NilClass)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat is happening here is that Ruby can't find \u003ccode\u003eshipping_manifest[\"top hat\"]\u003c/code\u003e.\nBecause of this, it returns \u003ccode\u003enil\u003c/code\u003e. As we know, Ruby doesn't like to combine data\ntypes when it comes to operators. We are effectively writing \u003ccode\u003enil = nil + 1\u003c/code\u003e,\nwhich doesn't make any sense.\u003c/p\u003e\n\n\u003cp\u003eWe can prevent this error from occurring by setting up a conditional and using\nthe bracket method to first look up a key before trying to change it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif shipping_manifest[\"top hat\"]\u003cbr\u003e  shipping_manifest[\"top hat\"] += 1\u003cbr\u003eelse\u003cbr\u003e  puts \"Key not found!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince \u003ccode\u003e\"top hat\"\u003c/code\u003e isn't a key in \u003ccode\u003eshipping_manifest\u003c/code\u003e, the above conditional\nwill \u003ccode\u003eputs\u003c/code\u003e \"Key not found!\" to the terminal rather than cause an error.\u003c/p\u003e\n\n\u003cp\u003eThis still doesn't fully solve the problem. Sure, we can't update something that\nisn't there, but we still want to add a top hat to our shipping manifest.\u003c/p\u003e\n\n\u003cp\u003eInstead of just outputting a message to the terminal, we can handle adding\na key/value pair here.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif shipping_manifest[\"top hat\"]\u003cbr\u003e  shipping_manifest[\"top hat\"] += 1\u003cbr\u003eelse\u003cbr\u003e  shipping_manifest[\"top hat\"] = 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, so reading this in order - if \u003ccode\u003eshipping_manifest[\"top hat\"]\u003c/code\u003e is truthy,\nincrement \u003ccode\u003eshipping_manifest[\"top hat\"]\u003c/code\u003e by one. Else, assign\n\u003ccode\u003eshipping_manifest[\"top hat\"]\u003c/code\u003e to be equal to \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRunning the above conditional once again, the \u003ccode\u003e\"top hat\"\u003c/code\u003e key will\nbe added and set to \u003ccode\u003e1\u003c/code\u003e. Running it again will update \u003ccode\u003e\"top hat\"\u003c/code\u003e to \u003ccode\u003e2\u003c/code\u003e!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSTRETCH\u003c/strong\u003e: If you think that this is a lot of code just to check and test for\n\u003ccode\u003enil\u003c/code\u003e, we agree with you. There's a method on the Hash class that will let you\nlook for a value and set a default if not found.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith the ability to update values and create entirely new key/value pairs, we've\ntackled the core concepts behind Ruby hashes. In the next few lessons, we will\nreinforce these concepts with some lab practice.\u003c/p\u003e","frontPage":false},{"exportId":"dynamic-paths","title":"Dynamic Paths","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-dynamic-paths-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-paths-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-paths-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-paths-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how dynamic routes prevent web applications from having to be rewritten as new information is added\u003c/li\u003e\n\u003cli\u003eCreate dynamic routes \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Dynamic Routes?\u003c/h2\u003e\n\n\u003cp\u003eWhen you create a new repository on GitHub, how do URLs like \u003ccode\u003egithub.com/jmburges/my-repo\u003c/code\u003e get generated? In our current examples, we would have to create a new \u003ccode\u003eif\u003c/code\u003e statement for each possible URL path. Since this is a dynamic application, our application can't be rewritten every time a new user signs up. So the concept of \"dynamic routes\" was created.\u003c/p\u003e\n\n\u003ch2\u003eSetting Up Dynamic Routes\u003c/h2\u003e\n\n\u003cp\u003eLet's assume we have a playlister app which has an array of Songs. First let's look at our \u003ccode\u003eSong\u003c/code\u003e object\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#song.rb\u003cbr\u003e\u003cbr\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :title, :artist\u003cbr\u003e\u003cbr\u003e  def initialize(title, artist)\u003cbr\u003e    @title = title\u003cbr\u003e    @artist = artist\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePretty simple class. Now we have our web app.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@songs = [Song.new(\"Sorry\", \"Justin Bieber\"),\u003cbr\u003e            Song.new(\"Hello\",\"Adele\")]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    @@songs.each do |song|\u003cbr\u003e      resp.write \"#{song.title}\\n\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe want more information about each song though. Similarily to GitHub, we want to be able to go to a URL like \u003ccode\u003elocalhost:9292/songs/Sorry\u003c/code\u003e and get all the information on Sorry. We are doing routes like this instead of just plain \u003ccode\u003eGET\u003c/code\u003e params because it's easier to read. Remember the path is given to us as a \u003ccode\u003estring\u003c/code\u003e. We could therefore write something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@songs = [Song.new(\"Sorry\", \"Justin Bieber\"),\u003cbr\u003e            Song.new(\"Hello\",\"Adele\")]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path==\"/songs/Sorry\"\u003cbr\u003e      resp.write @@songs[0].artist\u003cbr\u003e    elsif req.path == \"/songs/Hello\"\u003cbr\u003e      resp.write @@songs[1].artist\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is silly though, because every time we create a new \u003ccode\u003eSong\u003c/code\u003e we would have to create a new \u003ccode\u003eif\u003c/code\u003e statement. Thankfully, because paths are \u003ccode\u003estrings\u003c/code\u003e, we can do a regex match against the path. Then we just grab the content after the \u003ccode\u003e/song/\u003c/code\u003e to figure out which \u003ccode\u003eSong\u003c/code\u003e our user would like.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@songs = [Song.new(\"Sorry\", \"Justin Bieber\"),\u003cbr\u003e            Song.new(\"Hello\",\"Adele\")]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path.match(/songs/)\u003cbr\u003e\u003cbr\u003e      song_title = req.path.split(\"/songs/\").last #strip path info to capture just the title\u003cbr\u003e      song = @@songs.find{|s| s.title == song_title}\u003cbr\u003e\u003cbr\u003e      resp.write song.artist\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our routes are dynamic! We can just add songs, and everything else is taken care of and works for us. You have written a lot of Ruby; take comfort in your skills.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-object-relationships","title":"Introduction to Object Relationships","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eSo far, we've mainly worked with classes that do not play well with other custom\nclasses. In other words, we've defined classes that create objects that do not\ninteract with other objects that we've created. Instead, they have methods that\nallow them to operate on themselves, or operate with some of the built-in Ruby\nclasses.\u003c/p\u003e\n\n\u003cp\u003eIn object-oriented programming, however, we write programs that reflect\nreal-world situations and environments. In the real world, different entities\nare related to one another and interact with one another in various ways.\u003c/p\u003e\n\n\u003cp\u003eIn this section we'll discuss:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eObject relationships\u003c/li\u003e\n\u003cli\u003eDifferent relationships such as \"belongs-to\"/\"has-many\"\u003c/li\u003e\n\u003cli\u003eHow to use other classes and methods within another class to collaboratively\nsend messages to one another\u003c/li\u003e\n\u003cli\u003eExposing data stored in a class variable\u003c/li\u003e\n\u003cli\u003eThe concept of a \"join\" class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next few lessons, we'll discuss how individual objects in object-oriented\nRuby can interact with one another in ways that reflect that real-world\nrelatedness. It's pretty hard to imagine an application without some degree of\ninteraction, or association, between classes or models.\u003c/p\u003e","frontPage":false},{"exportId":"table-relations-database-basics","title":"Table Relations Database Basics","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-relational-database-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-relational-database-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-relational-database-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-relational-database-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll introduce the concept of relational databases and how they recognize relations among stored items of information.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe the structure of a relational database as tables related through the use of primary and foreign keys\u003c/li\u003e\n\u003cli\u003eDefine a primary key\u003c/li\u003e\n\u003cli\u003eDefine a foreign key\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eRelational Databases\u003c/h2\u003e\n\n\u003cp\u003eLet's say that you've been hired by a big and important company to do the payroll for all of their employees. We'll call it MyFace (inspired by nothing in particular). Every two weeks, you need to look up each and every employee and how much they get paid, and send them a check \u003cem\u003eand\u003c/em\u003e send a notice of that check to their manager (managers, after all, should know when their employees are getting paid). \u003c/p\u003e\n\n\u003cp\u003eIn addition, let's say that managers get paid every month, instead of every two weeks. So, once a month we need to go through the spreadsheet again, find \u003cem\u003ejust the managers\u003c/em\u003e, and send them \u003cem\u003etheir\u003c/em\u003e checks. In such a situation, we would need a place to store all of the managers and employees. \u003c/p\u003e\n\n\u003cp\u003eUsing a spreadsheet, your storage system might look something like this: \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-09-03%20at%205.12.12%20PM.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSo every two weeks, we would have to look through every single entry in this spreadsheet, send each person their check, and then figure out a way to identify an employee's manager to send that manager a confirmation that each employee has been paid. We need some way to \u003cem\u003eassociate\u003c/em\u003e the employees to their manager. We could add a \"Manager\" column to the spreadsheet that would be filled out with the name of that person's manager (if that person is an employee and not a manager themselves). This is getting messy. Not only do we have to do a lot of searching through the spreadsheet and manual detection of who is an employee and who is a manager, but we also have to match each employee with the name of their manager. If only there was some way to simplify our system!\u003c/p\u003e\n\n\u003cp\u003eEnter relational databases. A relational database, simply put, is \u003cstrong\u003ea database structured to recognize relations among stored items of information.\u003c/strong\u003e In such a system, it would be easy to tell an employee that they \u003cem\u003ebelong to\u003c/em\u003e a certain manager and to tell a manager that they \u003cem\u003ehave many\u003c/em\u003e employees. This might sound familiar if you've built object oriented Ruby programs in which instances of a class are related to one another. A relational database will allow us to store representations of our Ruby objects and preserve the relationships between those objects when we store them. \u003c/p\u003e\n\n\u003ch3\u003eRelational Database Structure\u003c/h3\u003e\n\n\u003cp\u003eContinuing with our payroll example from earlier, employees and managers would be stored in their own \u003cstrong\u003etables\u003c/strong\u003e. A table is like a spreadsheet; it has columns and rows. \u003c/p\u003e\n\n\u003cp\u003eOur managers table would look something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://cloud.githubusercontent.com/assets/18357112/17033515/7617ab2a-4f4c-11e6-8545-f179bdeeb500.JPG\" alt=\"managers table\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd our employees table would look something like this: \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://cloud.githubusercontent.com/assets/18357112/17033522/7d7ac122-4f4c-11e6-9116-2cfebe111f27.JPG\" alt=\"employees table\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOur employees table has a \"Manager ID\" column, filled with the ID number of that person's manager. In a relational database, every row has a number, called a \u003cstrong\u003eprimary key\u003c/strong\u003e. Relationships between tables can be established by using a \u003cstrong\u003eforeign key\u003c/strong\u003e column, like our \"Manager ID\" column, that uses that primary key of another table to refer to a member of that table. \u003c/p\u003e\n\n\u003cp\u003eWhy should our foreign key, our point of reference between an employee and his or her manager, be a number? Why not just use the manager's name? Well, names are very rarely unique. What if MyFace hires a new manager, also named Steve? It's a popular name, after all. How would our database know \u003cem\u003ewhich\u003c/em\u003e Steve manages which employees. Primary keys, on the other hand, \u003cstrong\u003eare always unique!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAdditionally, what if Steve gets sick of sharing his name with all of the other Steves out there and decides to change his name to Brittany? We would have to look up every single employee that had Steve as a manager and change a \"Manager Name\" column to \"Brittany\". We are programmers, we're lazy, we like to code for the future and our databases are no exception. If we use primary keys, i.e. numbers that never change and always refer to the same manager, our database can accommodate something like a manager's name change with ease. \u003c/p\u003e\n\n\u003cp\u003eNow, with these separated but related tables, our job just got a lot easier. We should thank...\u003c/p\u003e\n\n\u003ch2\u003eEdgar Codd\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Edgar_F_Codd.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eEdgar Codd invented the concept of the relational database, in other words, he came up with the idea that storing data in tables, indexed by primary key and related by foreign keys would \u003cem\u003enormalize\u003c/em\u003e that data. \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAt the time, Nixon was normalizing relations with China.\u0026nbsp; I figured that if he could normalize relations, then so could I.\u003c/p\u003e\n\n\u003cp\u003e-–Edgar Codd\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eCodd developed Relational Database Theory as a graduate student. Afterwards, he worked with Don Chamberlain at IBM to create a language that would allow the user to traverse these relational databases for specific subsets of information. \u003c/p\u003e\n\n\u003cp\u003eThe language they created was SQL––Structured (or Standard) Query Language. SQL allows the user to carry out queries like \"find the employees who make more than the managers\", or \"find the managers whose employees make under $X\" in an efficient and sensical manner. Before SQL, database queries were all about \u003cem\u003ewhere\u003c/em\u003e data was stored, instead of \u003cem\u003ewhat\u003c/em\u003e data a user is looking for. \u003c/p\u003e","frontPage":false},{"exportId":"class-variables-and-methods-conclusion","title":"Class Variables and Methods Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn the past module, we got to know some essential aspects of programming in\nRuby: class variables and methods. You can do a quick check of the list of\ntopics we covered:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow to recognize a class constant\u003c/li\u003e\n\u003cli\u003eHow to utilize class constants\u003c/li\u003e\n\u003cli\u003eHow to know when to use \u003ccode\u003eattr_accessor\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eHow to know when to define private methods\u003c/li\u003e\n\u003cli\u003eThe difference between public and private methods\u003c/li\u003e\n\u003cli\u003eHow to use class variables to keep track of a class's data\u003c/li\u003e\n\u003cli\u003eThe concept of remembrance in object-oriented programming\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThat's a lot! But now you've seen how it all works and how you can use it to\nlevel up your Ruby programming.\u003c/p\u003e","frontPage":false},{"exportId":"writing-database-commands-to-a-file","title":"Writing Database Commands to a File","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-writing-database-commands-to-a-file\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-writing-database-commands-to-a-file/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-writing-database-commands-to-a-file\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-writing-database-commands-to-a-file/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite SQL code in your text editor instead of your command line.\u003c/li\u003e\n\u003cli\u003eLearn how to execute SQL code you've written in your text editor against a\ndatabase you've created.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWriting SQL in a Text Editor\u003c/h2\u003e\n\n\u003cp\u003eUp until now, we've been executing our SQL commands directly in the terminal. It\nis likely, however, that you will find yourself writing SQL in a file and\nexecuting that file in the context of your database. The more complex our\ndatabases become, the more tables we add and the more advanced the queries we\nrun against them, the harder it will become to keep track of it all in the\n\u003ccode\u003esqlite3\u003c/code\u003e prompt in our terminal.\u003c/p\u003e\n\n\u003cp\u003eSQL is a programming language like any other, so we can write SQL in our text\neditor and execute it. This allows us to keep better track of our SQL code,\nincluding the SQL statements that create tables and query data from those\ntables.\u003c/p\u003e\n\n\u003cp\u003eTo write SQL in our text editor and execute that SQL against a specific\ndatabase, we'll create files in our text editor that have the \u003ccode\u003e.sql\u003c/code\u003e extension.\nThese files will contain valid SQL code. Then, we can execute these files\n\u003cem\u003eagainst our database\u003c/em\u003e in the command line. We'll take a look at this process\ntogether in the following code along.\u003c/p\u003e\n\n\u003ch2\u003eCode Along\u003c/h2\u003e\n\n\u003ch3\u003eCreating a Database and Table\u003c/h3\u003e\n\n\u003cp\u003e1 . In the terminal, create a database with the following command:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOnce you create your database, exit the sqlite prompt with the \u003ccode\u003e.quit\u003c/code\u003e command.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOpen up a text editor and create and save a file \u003ccode\u003e01_create_cats_table.sql\u003c/code\u003e;\nmake sure the new file is saved in the same directory where you created the\ndatabase. In this file, write your create statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e    name TEXT,\u003cbr\u003e    age INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e2 . Execute that file in the command line. \u003cem\u003eBefore running the command below,\nmake sure that you've exited the SQLite prompt that you were in earlier when you\ncreated the database.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003esqlite3 pets_database.db \u0026lt; 01_create_cats_table.sql\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If running the above command gives you an error that the Cats table\nalready exists, that means you created a table with that name in a previous\nexercise. You can enter into your Pets Database with the \u003ccode\u003esqlite3 pets_database.db command\u003c/code\u003e and then remove your old table in the SQLite prompt with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDROP TABLE cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eConfirming Our SQL Execution\u003c/h3\u003e\n\n\u003cp\u003eLet's confirm that the above execution of the SQL commands in our \u003ccode\u003e.sql\u003c/code\u003e file\nworked. To do so:\u003c/p\u003e\n\n\u003cp\u003e1 . In your terminal, enter into your Pets Database with the \u003ccode\u003esqlite3\npets_database.db\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003e2 . Then run the \u003ccode\u003e.schema\u003c/code\u003e command. You should see the following schema printed\nout, confirming that we did, in fact, create our Cats table successfully.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e    name TEXT,\u003cbr\u003e    age INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eRemember to exit out of the \u003ccode\u003esqlite3\u003c/code\u003e prompt with \u003ccode\u003e.quit\u003c/code\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003eOperating on our Database from the Text Editor\u003c/h3\u003e\n\n\u003cp\u003eTo carry out any subsequent actions on this database — adding a column to the\ncats table, dropping that table, creating a new table — we can create new \u003ccode\u003e.sql\u003c/code\u003e\nfiles in the text editor and execute them in the same way as above. Let's give\nit a shot.\u003c/p\u003e\n\n\u003cp\u003e1 . To add a column to our cats table:\u003c/p\u003e\n\n\u003cp\u003eCreate a file named \u003ccode\u003e02_add_column_to_cats.sql\u003c/code\u003e and fill it out with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eALTER TABLE cats ADD COLUMN breed TEXT;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, execute the file in your command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db \u0026lt; 02_add_column_to_cats.sql\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e2 . Confirm that your execution of the \u003ccode\u003e.sql\u003c/code\u003e file worked by entering into your\ndatabase in the terminal with the \u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e command. Once\nthere, execute the \u003ccode\u003e.schema\u003c/code\u003e command and you should see that the schema of the\nCats table does include the \u003ccode\u003ebreed\u003c/code\u003e column.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-ruby-iterators","title":"Introduction to Ruby Iterators","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-ruby-iterators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/intro-to-ruby-iterators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-ruby-iterators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-ruby-iterators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the difference between looping and iterating.\u003c/li\u003e\n\u003cli\u003eLearn how to pass a block to an iterator.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edo;end\u003c/code\u003e block syntax.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e{ }\u003c/code\u003e block syntax.\u003c/li\u003e\n\u003cli\u003eCapture a value yielded to the block by the iterator in \u003ccode\u003e| |\u003c/code\u003e (pipes).\u003c/li\u003e\n\u003cli\u003eUse a captured yield value within the iterator's block.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eLooping vs. Iteration\u003c/h2\u003e\n\n\u003cp\u003eLooping is a programming construct that allows you to tell your program to do something a certain number of times, or until a certain condition is met. It is a mechanism to repeat a selection of code.\u003c/p\u003e\n\n\u003cp\u003eIteration, on the other hand, is a way to operate on a collection object, like an array, and do something with each element in that collection.\u003c/p\u003e\n\n\u003cp\u003eLet's say that we are writing a program to annoy our little brother. We don't want to annoy him \u003cem\u003etoo much\u003c/em\u003e though, or else we might get grounded. So, our program, when it runs, will \u003ccode\u003e#puts\u003c/code\u003e \"Stop hitting yourself!\" seven times, and then stop. For a task like this, in which we need to perform a task a certain, discrete number of times, we would use a loop.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e7.times do\u003cbr\u003e  puts \"Stop hitting yourself!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we want to output the phrase only \u003cem\u003euntil\u003c/em\u003e our little brother calls out \"Mommmm!!\"? We can stick with a loop construct like \u003ccode\u003ewhile\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einput = \"\"\u003cbr\u003ewhile input != \"Mommmm!!\"\u003cbr\u003e  puts \"Stop hitting yourself!\"\u003cbr\u003e  input = gets.chomp\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, what if we have three little brothers: Tom, Tim and Jim, and we want to output \"Stop hitting yourself, #{little brother's name}!\" once for each brother? Let's try that out using a loop with the \u003ccode\u003ewhile\u003c/code\u003e construct:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tom\", \"Tim\", \"Jim\"]\u003cbr\u003e\u003cbr\u003ecount = 0\u003cbr\u003ewhile count \u0026lt;= brothers.length-1\u003cbr\u003e  puts \"Stop hitting yourself #{brothers[count]}!\"\u003cbr\u003e  count += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn order to output a simple phrase using each brother's name from our collection with a \u003ccode\u003ewhile\u003c/code\u003e loop we need to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEstablish a counter\u003c/li\u003e\n\u003cli\u003eSet the condition for the \u003ccode\u003ewhile\u003c/code\u003e loop\u003c/li\u003e\n\u003cli\u003eRead data out of the array by index using the counter\u003c/li\u003e\n\u003cli\u003eIncrement the counter at the bottom of the loop\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThat's a lot of code to accomplish such a simple task. In fact, a loop isn't a good tool for this job. Since we are now operating on a collection of data and seeking to \u003cem\u003edo something\u003c/em\u003e with each element of that collection, we want to use an \u003cstrong\u003eiterator\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIterators are methods that you can call on a collection, like an array, to loop over each member of that collection and do something to or with that member of the collection. Let's take a look in the next section.\u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003e#each\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#each\u003c/code\u003e method is a prime example of an iterator. Here's a boilerplate example of its usage:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprimary_colors = [\"Red\", \"Yellow\", \"Blue\"]\u003cbr\u003eprimary_colors.each do |color|\u003cbr\u003e  puts \"Primary Color #{color} is #{color.length} letters long.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003e#each\u003c/code\u003e is called on the collection \u003ccode\u003eprimary_colors\u003c/code\u003e, which is an array containing 3 individual strings.\u003c/p\u003e\n\n\u003cp\u003eA block is passed to \u003ccode\u003e#each\u003c/code\u003e, opened by the code that starts with \u003ccode\u003edo\u003c/code\u003e and closed by the \u003ccode\u003eend\u003c/code\u003e. Every \u003ccode\u003edo\u003c/code\u003e needs a closing \u003ccode\u003eend\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprimary_colors = [\"Red\", \"Yellow\", \"Blue\"]\u003cbr\u003eprimary_colors.each do |color| # do begins a block\u003cbr\u003e  # the lines between the do/end are the block's body\u003cbr\u003e  puts \"Primary Color #{color} is #{color.length} letters long.\"\u003cbr\u003eend # end terminates the block\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe output from this code is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePrimary Color Red is 3 letters long.\u003cbr\u003ePrimary Color Yellow is 6 letters long.\u003cbr\u003ePrimary Color Blue is 4 letters long.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that the block passed to \u003ccode\u003eeach\u003c/code\u003e is executed once for each element in the original collection. If there were 5 colors in \u003ccode\u003eprimary_colors\u003c/code\u003e, the block would have run 5 times. We call each run, each execution, of the block passed to the iterator (\u003ccode\u003e#each\u003c/code\u003e in this case), an iteration. It's a word used to refer to each 'step', or each 'execution', of a block. An iteration is the singular execution of a sequence of code (that we call a block) within a loop.\u003c/p\u003e\n\n\u003cp\u003eWhen we iterate over a collection of elements using \u003ccode\u003e#each\u003c/code\u003e (and also in other iterators and enumerables we'll soon learn about), the iterator \u003ccode\u003e#each\u003c/code\u003e yields each element one at a time to every iteration via a variable declared with the opening of the block.\u003c/p\u003e\n\n\u003cp\u003eAfter the opening \u003ccode\u003edo\u003c/code\u003e of our code above, we see \u003ccode\u003e|color|\u003c/code\u003e. \u003ccode\u003e|\u003c/code\u003e is called a pipe. After \u003ccode\u003edo\u003c/code\u003e, we declare a local variable \u003ccode\u003ecolor\u003c/code\u003e by enclosing it in \u003ccode\u003e| |\u003c/code\u003e pipes. This variable's value is automatically assigned the element from the array for the current iteration. So on the first iteration of the \u003ccode\u003eeach\u003c/code\u003e above, the variable \u003ccode\u003ecolor\u003c/code\u003e would be equal to \u003ccode\u003e\"Red\"\u003c/code\u003e. But on the next iteration of the block, \u003ccode\u003ecolor\u003c/code\u003e will be reassigned the value of the next element in the \u003ccode\u003eprimary_colors\u003c/code\u003e array, \u003ccode\u003e\"Yellow\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a closer look at some of these concepts.\u003c/p\u003e\n\n\u003ch3\u003eWhat is a block?\u003c/h3\u003e\n\n\u003cp\u003eA block is a chunk of code between braces, \u003ccode\u003e{ }\u003c/code\u003e or between \u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003eend\u003c/code\u003e keywords that you can pass to a method almost exactly like you can pass an argument to a method. There are some methods, like iterator methods, that can be called \u003cem\u003ewith a block\u003c/em\u003e, i.e. accompanied by a block denoted with \u003ccode\u003e{ }\u003c/code\u003e or \u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003eend\u003c/code\u003e. Such a method would run and pass, or yield, data to the code in the block for that code to operate on or do something with.\u003c/p\u003e\n\n\u003cp\u003eBlocks are part of what make the Ruby language special, powerful, and loved.\u003c/p\u003e\n\n\u003ch3\u003eWhat are the \u003ccode\u003e| |\u003c/code\u003e?\u003c/h3\u003e\n\n\u003cp\u003eThose are called \"pipes\". When invoking an iterator like \u003ccode\u003e#each\u003c/code\u003e, the variable name inside the pipes acts as an argument that is being passed into the block. The iterator will pass, or yield, each element of the collection on which it is called to the block. Each element, as it gets passed into the block, will be equal to the variable name inside the pipes. Think of it like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCall, or run, the code in the block once for each element of the collection.\u003c/li\u003e\n\u003cli\u003ePass a single element of the collection into the block every time the code in the block is called, or run. Start with the first element in the collection, and then move on to the second element, then the third, etc.\u003c/li\u003e\n\u003cli\u003eEvery time you call the code in the block and pass in an element from the collection, set the variable name from between the pipes equal to that element.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is exactly what happens when you define a method to accept an argument and then call that method with a real argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef hi_there(name)\u003cbr\u003e  puts \"Hi, #{name}\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ehi_there(\"Sophie\") # \u0026gt; \"Hi, Sophie\"\u003cbr\u003e# =\u0026gt; nil \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThink of the variable between the pipes like the \u003ccode\u003ename\u003c/code\u003e variable we are using to define our argument.\u003c/p\u003e\n\n\u003cp\u003eThe variable name inside the pipes is more or less arbitrary. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ebrothers.each do |brother|\u003cbr\u003e  puts \"Stop hitting yourself #{brother}!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWill output the same thing as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ebrothers.each do |hippo|\u003cbr\u003e  puts \"Stop hitting yourself #{hippo}!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStop hitting yourself Tim!\u003cbr\u003eStop hitting yourself Tom!\u003cbr\u003eStop hitting yourself Jim!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe should, however, be reasonable and sensical when we name our variables. If your collection is called \u003ccode\u003ebrothers\u003c/code\u003e, name the variable between the pipes \u003ccode\u003ebrother\u003c/code\u003e. If your collection is called \u003ccode\u003eapples\u003c/code\u003e, name your variable \u003ccode\u003eapple\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eA Closer Look\u003c/h3\u003e\n\n\u003cp\u003eLet's revisit our example from above and break it down, step by step:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ebrothers.each do |brother|\u003cbr\u003e  puts \"Stop hitting yourself #{brother}!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, the \u003ccode\u003e#each\u003c/code\u003e method takes each element of the \u003ccode\u003ebrothers\u003c/code\u003e array, one at a time, and passes, or \u003cstrong\u003eyields\u003c/strong\u003e, it into the block of code between the \u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003eend\u003c/code\u003e keywords. It makes each element of the array available to the block by assigning it to the variable \u003ccode\u003ebrother\u003c/code\u003e. It does so by placing that variable name in between the pipes \u003ccode\u003e| |\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn summary, \u003ccode\u003e#each\u003c/code\u003e yields each item of the collection on which it is called to the block with which it is called. It keeps track of which element of the collection it is manipulating as it moves through the collection. During the first step of the iteration, \u003ccode\u003e#each\u003c/code\u003e will yield the first array element to the block. At that point in time, inside the block, \u003ccode\u003ebrother\u003c/code\u003e will equal \"Tim\". During the second step of the iteration, \u003ccode\u003ebrother\u003c/code\u003e will equal \"Tom\" and so on.\u003c/p\u003e\n\n\u003cp\u003eIterators like \u003ccode\u003e#each\u003c/code\u003e are smart – they don't need a separate counter variable and manual incrementation of that variable to know how many times to do something. They use the number of items in the collection on which they are called to determine how many times they will do something.\u003c/p\u003e\n\n\u003cp\u003eLet's set a \u003ccode\u003ecounter\u003c/code\u003e variable and manually increment it in order to see the \u003ccode\u003e#each\u003c/code\u003e method in action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ecounter = 1\u003cbr\u003ebrothers.each do |brother|\u003cbr\u003e  puts \"This is loop number #{counter}\"\u003cbr\u003e  puts \"Stop hitting yourself #{brother}!\"\u003cbr\u003e  counter += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopy and paste the above code into IRB. You should see this output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThis is loop number 1\u003cbr\u003eStop hitting yourself Tim!\u003cbr\u003eThis is loop number 2\u003cbr\u003eStop hitting yourself Tom!\u003cbr\u003eThis is loop number 3\u003cbr\u003eStop hitting yourself Jim!\u003cbr\u003e#=\u0026gt; [\"Tim\", \"Tom\", \"Jim\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee that, during loop number 1, the string \"Tim\" was yielded to the block and the variable name \u003ccode\u003ebrother\u003c/code\u003e, when interpolated into the string we \u003ccode\u003e#puts\u003c/code\u003eed out, was set equal to \"Tim\". During loop number 2, the same thing happened with \"Tom\", and during loop number 3, the same thing happened with \"Jim\". There was no loop number four because the \u003ccode\u003e#each\u003c/code\u003e iterator operated on each member of the array on which it was called and then stopped.\u003c/p\u003e\n\n\u003ch3\u003eA Note on Return Values\u003c/h3\u003e\n\n\u003cp\u003eDifferent iterators have different return values. Notice that the return value of the call to \u003ccode\u003e#each\u003c/code\u003e above returned \u003ccode\u003e[\"Tim\", \"Tom\", \"Jim\"]\u003c/code\u003e – the original array. The \u003ccode\u003e#each\u003c/code\u003e method will always return the original collection on which it was called.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e{ }\u003c/code\u003e Syntax\u003c/h3\u003e\n\n\u003cp\u003eAnother way of establishing a code block that you may encounter is to use curly brackets, \u003ccode\u003e{ }\u003c/code\u003e, instead of the \u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003eend\u003c/code\u003e keywords. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrothers = [\"Tim\", \"Tom\", \"Jim\"]\u003cbr\u003ebrothers.each{|brother| puts \"Stop hitting yourself #{brother}!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is appropriate to use the \u003ccode\u003e{ }\u003c/code\u003e syntax when the code in the block is short and can fit on one line.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBoth loops and iterators are powerful tools in Ruby, but they're not right for every job. Loops are useful when you need to tell your program to do something a certain number of times or to do something based on a certain condition. Iterators are useful for operating on a collection of objects, and even performing complex operations on the members of that collection. Because iterators are called with blocks, it's easy to carry out complex logic or tasks using each individual member of a collection of objects.\u003c/p\u003e","frontPage":false},{"exportId":"nested-arrays-addendum","title":"Nested Arrays Addendum","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-addendum\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-addendum/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-addendum\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-addendum/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize that coordinate assignments grow nested \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eRecognize single-coordinate access of \u003ccode\u003eArray\u003c/code\u003es returns an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow that you've had a chance to get familiar with the basics of working with\nnested \u003ccode\u003eArray\u003c/code\u003es or \"matrices\" (the plural of \"matrix\"), or \"AoAs,\" let's cover\na \"funny\" case.\u003c/p\u003e\n\n\u003ch2\u003eRecognize That Coordinate Assignments Grow Nested \u003ccode\u003eArray\u003c/code\u003es\u003c/h2\u003e\n\n\u003cp\u003eGiven the following Ruby code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],          \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"], \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]         \u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou're clear now that we can update by saying \u003ccode\u003espice_rack[1][1] = \"Extract of\nPizza\"\u003c/code\u003e. But what would happen if we said \u003ccode\u003espice_rack[1][100] = \"Poodle\nDinner\"\u003c/code\u003e. What would \u003ccode\u003espice_rack\u003c/code\u003e look like then?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTRY IT OUT IN IRB\u003c/em\u003e\u003c/strong\u003e. We can't emphasize this behavior enough. Programmers,\nwhen they reach head-scratchers like this, always ask IRB to teach them. Your\nlearning will not gel as well if you do not take this step. Don't set your\nlearning backwards!\u003c/p\u003e\n\n\u003cp\u003eAs we hope you discovered, we \u003cstrong\u003ecan\u003c/strong\u003e add at \u003cem\u003eany\u003c/em\u003e coordinate pair. If the\nelement you need add needs the inner \u003ccode\u003eArray\u003c/code\u003e to \"grow\" in order to accommodate\nit, Ruby will \"grow\" the \u003ccode\u003eArray\u003c/code\u003e and fill in the \"in-between\" values with\n\u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],             \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],    \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]            \u003cbr\u003e]\u003cbr\u003espice_rack[1][10] = \"Cucumber Water\"\u003cbr\u003espice_rack #=\u0026gt; [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\", nil, nil, nil, nil, nil, nil, nil, \"Cucumber Water\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eRecognize Single-coordinate Access of \u003ccode\u003eArray\u003c/code\u003es Returns an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThis isn't a new fact, but some students forget that the inner \u003ccode\u003eArray\u003c/code\u003es are\n\u003cstrong\u003e\u003cem\u003estill \u003ccode\u003eArray\u003c/code\u003es\u003c/em\u003e\u003c/strong\u003e upon which we can do all the usual stuff we already know\nhow to do on \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eAs such, you can use operators like \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e (\"shovel\") on an inner \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],          \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"], \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]         \u003cbr\u003e]\u003cbr\u003e\u003cbr\u003espice_rack[2] \u0026lt;\u0026lt; \"Saffron\" #=\u0026gt; [\"Parsley\", \"Sage\", \"Rosemary\", \"Saffron\"]\u003cbr\u003e\u003cbr\u003espice_rack #=\u0026gt; [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],          \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"], \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\", \"Saffron\"]         \u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly, if you want to replace a whole \u003ccode\u003eArray\u003c/code\u003e within the containing\n\u003ccode\u003eArray\u003c/code\u003e, you can do so by using one coordinate.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marojam\"],          \u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"], \u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]         \u003cbr\u003e]\u003cbr\u003e\u003cbr\u003e# Spice up your life!\u003cbr\u003espice_rack[0] = [\"Posh\", \"Scary\", \"Sporty\", \"Baby\", \"Ginger\"]\u003cbr\u003e\u003cbr\u003espice_rack #=\u0026gt; [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\", \"Baby\", \"Ginger\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eKeep in mind, if a matrix starts off with the same number of rows and elements\n(\"is square\"), there's nothing wrong with breaking that, if you need. Ruby\nwon't complain.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe've covered two \"tangent\" topics about working with nested arrays. We've seen\nthese ideas occasionally cause bugs for learners (\"Wait, what? How did all\nthose \u003ccode\u003enil\u003c/code\u003es get in there?\"). Or we've seen learners get stuck because they\nstop thinking of inner \u003ccode\u003eArray\u003c/code\u003es as the \u003ccode\u003eArray\u003c/code\u003es they already know and love.\nThey get all tangled up in the coordinate syntax and forget what they already\nknow.\u003c/p\u003e","frontPage":false},{"exportId":"video-aliasing-active-record-associations","title":"Video: Aliasing Active Record Associations","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-associations-video-review-aliasing-activerecord-associations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-aliasing-activerecord-associations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-aliasing-activerecord-associations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review-aliasing-activerecord-associations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/WVBWlnUghOI?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eDisclaimer\u003c/h2\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand ActiveRecord Associations than you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e","frontPage":false},{"exportId":"remembering-objects","title":"Remembering Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-remembering-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-remembering-objects/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-remembering-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-remembering-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Explain the concept of remembrance in object-oriented programming.\u003c/li\u003e\n\u003cli\u003e Use class variables to remember, or store, instances of a class that are produced.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's say we're building a command line game in which players play various\nrounds until a final tally determines the winner. Or creating an app in which we\nwant to store a list of all of the users who sign up. Or building a program that\nhelps users track and store the passwords for their various accounts.\u003c/p\u003e\n\n\u003cp\u003eIn all of these situations, and many more we can imagine, our application needs\na way to store or remember a collection of class instances. Whether they are\ninstances of a \u003ccode\u003eGame\u003c/code\u003e, \u003ccode\u003eUser\u003c/code\u003e or \u003ccode\u003ePassword\u003c/code\u003e class, all of these examples would\nrequire our program to keep track of instances that are created.\u003c/p\u003e\n\n\u003cp\u003eLuckily for us, Ruby allows us to do so by using class variables to store new\ninstances as soon as they are created. Let's take a look together.\u003c/p\u003e\n\n\u003ch2\u003eUsing class variables to store instances of a class\u003c/h2\u003e\n\n\u003cp\u003eImagine we are building an app that manages a user's music. Our app should keep\ntrack of all of the songs a user enters and allow our user to browse their\nexisting songs.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the following class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this code, we can create a new song like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling = Song.new(\"Hotline Bling\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's go ahead and create another song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethriller = Song.new(\"Thriller\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh. Our user wants to browse their songs now and select one to play.\nCurrently, our code in the \u003ccode\u003eSong\u003c/code\u003e class has no way to keep track of the songs we\njust created and display them back to the user.\u003c/p\u003e\n\n\u003ch3\u003eCreating the Class Variable\u003c/h3\u003e\n\n\u003cp\u003eLet's take a step back and think about the concept of responsibility. Whose job\nis it to know about \u003cem\u003eevery instance of the \u003ccode\u003eSong\u003c/code\u003e class\u003c/em\u003e? We have two choices\nright now: an instance of the song class or the \u003ccode\u003eSong\u003c/code\u003e class itself.\u003c/p\u003e\n\n\u003cp\u003eIt is not the responsibility of an individual song to know about all of the\nother songs. Keeping track of all of the songs that it creates, however, fits\nright into the purview of the Song class.\u003c/p\u003e\n\n\u003cp\u003eSo, how can we tell the \u003ccode\u003eSong\u003c/code\u003e class to keep track of every instance that it\ncreates? We use a class variable.\u003c/p\u003e\n\n\u003cp\u003eLet's create a class variable, \u003ccode\u003e@@all\u003c/code\u003e, that will store every instance of the\n\u003ccode\u003eSong\u003c/code\u003e class. Recall that \u003ccode\u003e@@\u003c/code\u003e before a variable name is how we define a class\nvariable.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we set our class variable equal to an empty array. Arrays are\nperfect for storing lists of data, so we'll use an array to store our lists of\n\u003ccode\u003eSong\u003c/code\u003e instances.\u003c/p\u003e\n\n\u003cp\u003eNow that our class is \u003cem\u003eset up\u003c/em\u003e to store the instances that it produces, we have\nto ask: \u003cem\u003ehow\u003c/em\u003e does it store these instances?\u003c/p\u003e\n\n\u003ch4\u003eAdding Instances to the \u003ccode\u003e@@all\u003c/code\u003e Array\u003c/h4\u003e\n\n\u003cp\u003eBefore we can answer this question, we should ask another. \u003cem\u003eWhen\u003c/em\u003e should the\n\u003ccode\u003eSong\u003c/code\u003e class become aware of, or store, an instance of itself?\u003c/p\u003e\n\n\u003cp\u003eThis should happen at the time on instantiation––when a new song gets created,\nit should be immediately stored by our \u003ccode\u003eSong\u003c/code\u003e class' \u003ccode\u003e@@all\u003c/code\u003eclass variable.\u003c/p\u003e\n\n\u003cp\u003eWe can implement this by simply adding the new instance that gets created into\nthe array stored in \u003ccode\u003e@@all\u003c/code\u003e \u003cem\u003einside our \u003ccode\u003e#initialize\u003c/code\u003e method.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn \u003ccode\u003e#initialize\u003c/code\u003e we use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the new object that has\njust been created by \u003ccode\u003e#new\u003c/code\u003e. Remember that when \u003ccode\u003e#new\u003c/code\u003e is called, it creates a\nnew instance of the class and then calls \u003ccode\u003e#initialize\u003c/code\u003e on that new instance. So,\n\u003ccode\u003e#initialize\u003c/code\u003e is technically an instance method. Inside an instance method we\nare in what is called \u003cstrong\u003emethod scope\u003c/strong\u003e and \u003ccode\u003eself\u003c/code\u003e will refer to whichever\ninstance the method is being called on.\u003c/p\u003e\n\n\u003cp\u003eWe push \u003ccode\u003eself\u003c/code\u003e into the array that is stored in \u003ccode\u003e@@all\u003c/code\u003e. In this way, the\n\u003ccode\u003e@@all\u003c/code\u003e class variable will point to an ever-growing array that contains every\ninstance of the \u003ccode\u003eSong\u003c/code\u003e class that gets created.\u003c/p\u003e\n\n\u003ch4\u003eOur Code in Action\u003c/h4\u003e\n\n\u003cp\u003eLet's see what happens when we actually execute the code we've written:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems = Song.new(\"99 Problems\")\u003cbr\u003ethriller = Song.new(\"Thriller\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we've created some songs, let's ask our \u003ccode\u003eSong\u003c/code\u003e class to show us all of\nthe instances that we just created:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.all\u003cbr\u003e  =\u0026gt; NoMethodError: undefined method 'all' for Song:Class\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh, looks like we don't have a class method to access the contents of the\n\u003ccode\u003e@@all\u003c/code\u003e array. Just like how we've built reader methods that expose the value of\ninstance variables, we need to build a method that will expose, or make\naccessible outside of the class, the value of a class variable.\u003c/p\u003e\n\n\u003cp\u003eLet's build one now.\u003c/p\u003e\n\n\u003ch4\u003eBuilding a Class Method to Access a Class Variable\u003c/h4\u003e\n\n\u003cp\u003eLet's call our class method \u003ccode\u003e#all\u003c/code\u003e. All it needs to do is return the \u003ccode\u003e@@all\u003c/code\u003e\nvariable. Remember that the last line of any method in Ruby is automatically\n\u003cem\u003ereturned\u003c/em\u003e. So simply putting \u003ccode\u003e@@all\u003c/code\u003e in \u003ccode\u003eself.all\u003c/code\u003e is that method's purpose.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRecall that to define a \u003cstrong\u003eclass\u003c/strong\u003e method we use the \u003ccode\u003edef self.method_name\u003c/code\u003e\nsyntax. The \u003ccode\u003eself.\u003c/code\u003e before the method name is a reminder that the method will\nnot be running on \u003cem\u003ea\u003c/em\u003e particular \u003ccode\u003eSong\u003c/code\u003e instance, but will be acting as the\nfactory from which all \u003ccode\u003eSong\u003c/code\u003es are made: the \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eWith a new method defined, we can try again to call our class method on the\n\u003ccode\u003eSong\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.all\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should output something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eirb(main):020:0\u0026gt; Song.all\u003cbr\u003e=\u0026gt; [#, #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eBuilding off of \u003ccode\u003eall\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eImplement a class method called \u003ccode\u003eprint_all_song_names\u003c/code\u003e which prints out all the\nnames of the \u003ccode\u003eSong\u003c/code\u003es that the class knows about. Use the \u003ccode\u003eall\u003c/code\u003e class method and\nbuild off of it!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe did it! We used a class variable to store a collection of instances of that\nclass. We added new instances to this storage container every time a new\ninstance was created with the help of the \u003ccode\u003eself\u003c/code\u003e keyword in our \u003ccode\u003e#initialize\u003c/code\u003e\nmethod. Lastly, we wrote a class method to access and print out the name of\neach song instance stored in our class variable.\u003c/p\u003e","frontPage":false},{"exportId":"reading-values-from-hashes","title":"Reading Values from Hashes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-reading-values-from-hashes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-reading-values-from-hashes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-reading-values-from-hashes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-reading-values-from-hashes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRetrieve data from hashes\u003c/li\u003e\n\u003cli\u003eHandle a \u003ccode\u003enil\u003c/code\u003e response when no key is found\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we're going to look at how we get values from a hash using\nits keys. If an array is a \u003cstrong\u003elist\u003c/strong\u003e in which we access index items by\ntheir number, a hash is a \u003cstrong\u003edictionary\u003c/strong\u003e in which we access values by their key.\u003c/p\u003e\n\n\u003ch2\u003eRetrieving Data from Hashes\u003c/h2\u003e\n\n\u003cp\u003eRetrieving data from a hash is similar to retrieving data from an array, but\ninstead of giving an array the index number in brackets \u003ccode\u003e[i]\u003c/code\u003e we give a hash the\nname of the key \u003ccode\u003e[key]\u003c/code\u003e. The Hash will return the value associated with the\n\u003cem\u003ekey\u003c/em\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epets = {\"cat\" =\u0026gt; \"Maru\", \"dog\" =\u0026gt; \"Pluto\"}\u003cbr\u003e#=\u0026gt; {\"cat\"=\u0026gt;\"Maru\", \"dog\"=\u0026gt;\"Pluto\"}\u003cbr\u003e\u003cbr\u003epets[\"cat\"]\u003cbr\u003e#=\u0026gt; \"Maru\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003e[]\u003c/code\u003e is referred to as \u003cstrong\u003e\"bracket notation\".\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eKeep in mind, \u003cem\u003ekeys\u003c/em\u003e can be \u003ccode\u003eSymbol\u003c/code\u003es instead of \u003ccode\u003eString\u003c/code\u003es. The \u003ccode\u003eHash\u003c/code\u003e lookup works\njust the same:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emeals = {:breakfast =\u0026gt; \"cereal\", :lunch =\u0026gt; \"peanut butter and jelly sandwich\", :dinner =\u0026gt; \"mushroom risotto\"}\u003cbr\u003e#=\u0026gt; {:breakfast=\u0026gt;\"cereal\", :lunch=\u0026gt;\"peanut butter and jelly sandwich\", :dinner=\u0026gt;\"mushroom risotto\"}\u003cbr\u003e\u003cbr\u003emeals[:breakfast]\u003cbr\u003e#=\u0026gt; \"cereal\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt will \u003cem\u003ealso\u003c/em\u003e work if we use \u003ccode\u003eInteger\u003c/code\u003es for keys. It is important to\nremember that when using the bracket method on a hash, Ruby is not looking for\nthe index like it would in an array. Instead, Ruby is looking for the key that\nmatches whatever is inside the brackets and returns the associated value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehealthy_things = {1 =\u0026gt; \"learn to garden\", 2 =\u0026gt; \"plant seeds\", 10 =\u0026gt; \"eat vegetables\"}\u003cbr\u003e\u003cbr\u003ehealthy_things[10]\u003cbr\u003e#=\u0026gt; \"eat vegetables\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also use variables inside the brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekey = :name\u003cbr\u003e#=\u0026gt; :name\u003cbr\u003e\u003cbr\u003euser_info = {:name =\u0026gt; \"Ada\", :email =\u0026gt; \"ada.lovelace@famous_computer_inventors.com\"}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Ada\", :email=\u0026gt;\"ada.lovelace@famous_computer_inventors.com\"}\u003cbr\u003e\u003cbr\u003euser_info[key]\u003cbr\u003e#=\u0026gt; \"Ada\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eHandle a \u003ccode\u003enil\u003c/code\u003e Response When No Key Is Found\u003c/h2\u003e\n\n\u003cp\u003eIf we use the bracket notation and pass in a value that does not match a key on\nthe hash, Ruby will return \u003ccode\u003enil\u003c/code\u003e by default:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egrocery_items = {:apples =\u0026gt; 10, :pears =\u0026gt; 4, :peaches =\u0026gt; 2, :plums =\u0026gt; 13}\u003cbr\u003e#=\u0026gt; {:apples=\u0026gt;10, :pears=\u0026gt;4, :peaches=\u0026gt;2, :plums=\u0026gt;13}\u003cbr\u003e\u003cbr\u003egrocery_items[:rambutans]\u003cbr\u003e#=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis turns out to be very useful. Remember that in Ruby, \u003ccode\u003enil\u003c/code\u003e is \u003cem\u003efalsy\u003c/em\u003e while\n\u003cstrong\u003eany data type value\u003c/strong\u003e is \u003cem\u003etruthy\u003c/em\u003e (even empty arrays and hashes). This\nbehavior allows us to easily check if a hash has a key/value pair or not as we\ncan use the bracket method in a conditional statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egrocery_items = {:apples =\u0026gt; 10, :pears =\u0026gt; 4, :peaches =\u0026gt; 2, :plums =\u0026gt; 13}\u003cbr\u003e#=\u0026gt; {:apples=\u0026gt;10, :pears=\u0026gt;4, :peaches=\u0026gt;2, :plums=\u0026gt;13}\u003cbr\u003e\u003cbr\u003eif grocery_items[:rambutan]\u003cbr\u003e  puts \"Rambutan present!\"\u003cbr\u003eelse\u003cbr\u003e  puts \"No rambutan.\"\u003cbr\u003eend\u003cbr\u003e# No rambutan.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSTRETCH\u003c/strong\u003e: Look at the documentation for the \u003ccode\u003eHash\u003c/code\u003e class. See if you\ncan find a method that will look up a \u003cem\u003ekey\u003c/em\u003e and will let you specify\nwhat to return if the \u003cem\u003ekey\u003c/em\u003e is not found! The default data types of\nRuby have POWERFUL magic inside of them that's yours to discover. As a hint\nit's a method that a dog might know to respond to :)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eGiven a hash and its keys, we can retrieve all the values present in that hash.\nWe are now able to create hashes as a way to store associated data and can use\nthe bracket method to retrieve that stored data as needed.\u003c/p\u003e","frontPage":false},{"exportId":"video-collaborating-objects-review","title":"Video: Collaborating Objects Review","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"collaborating-objects-review\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/collaborating-objects-review/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/collaborating-objects-review\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/collaborating-objects-review/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eTest Driven Development\u003c/li\u003e\n\u003cli\u003eFocusing on Object Interfaces\u003c/li\u003e\n\u003cli\u003eAdding an array collection for a \u003ccode\u003ehas_many\u003c/code\u003e association on initialization\u003c/li\u003e\n\u003cli\u003eAdding the \u003ccode\u003ehas_many\u003c/code\u003e collection reader\u003c/li\u003e\n\u003cli\u003ePreventing the direct modification of a \u003ccode\u003ehas_many\u003c/code\u003e collection reader\u003c/li\u003e\n\u003cli\u003eBuilding your own \u003ccode\u003ehas_many\u003c/code\u003e push interface (the \u003ccode\u003eadd_story\u003c/code\u003e method)\u003c/li\u003e\n\u003cli\u003eCustom Errors\u003c/li\u003e\n\u003cli\u003eEnforcing Type on the \u003ccode\u003ehas_many\u003c/code\u003e push interface\u003c/li\u003e\n\u003cli\u003eImplementing the \u003ccode\u003ebelongs_to\u003c/code\u003e reader\u003c/li\u003e\n\u003cli\u003eImplementing the \u003ccode\u003ebelongs_to\u003c/code\u003e writer\u003c/li\u003e\n\u003cli\u003eEnforcing Type on the \u003ccode\u003ebelongs_to\u003c/code\u003e writer\u003c/li\u003e\n\u003cli\u003eBuilding a \u003ccode\u003ehas_many through\u003c/code\u003e \u003cem\u003eBonus\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/iYcQ693LXck?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003e\u003ca href=\"http://learn-co-videos.s3.amazonaws.com/ruby/Collaborating.Objects.Review.LV-Live.mp4\"\u003eMP4\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/collaborating-objects-tdd-sample\"\u003eCode\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eThis video is meant to be a review of Object Relationships in Ruby\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand  Object Relationships in Ruby than you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e","frontPage":false},{"exportId":"arrays","title":"Arrays","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lesson will give a deeper dive on how to create, manipulate, and retrieve data from arrays.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate and populate an array.\u003c/li\u003e\n\u003cli\u003eAdd items to an array using different methods.\u003c/li\u003e\n\u003cli\u003eRemove items from an array using different methods.\u003c/li\u003e\n\u003cli\u003eOperate on an array using the sort, reverse, and include methods.\u003c/li\u003e\n\u003cli\u003eIdentify elements in an array based on their index number.\u003c/li\u003e\n\u003cli\u003eRetrieve items from an array.\u003c/li\u003e\n\u003cli\u003eReference the Ruby documentation on arrays.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003cp\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/W0Q_AyfolRw\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=W0Q_AyfolRw\"\u003eIntro to Ruby Arrays\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eCreating an Array\u003c/h2\u003e\n\n\u003cp\u003eThere are a few different ways to make a new array. You can use the literal constructor or the class constructor.\u003c/p\u003e\n\n\u003ch5\u003eThe Literal Constructor\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003emy_array = []\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5\u003eThe Class Constructor\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003emy_array = Array.new\u003cbr\u003e# =\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eDon't worry about the class constructor right now. We'll learn much more about this later on. We're introducing it briefly here because you may encounter this syntax if you read through other resources you might find online.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eTo make an array that isn't empty, you can separate each item, known as an element, by a \u003ccode\u003e,\u003c/code\u003e (\"comma\") and wrap all the elements inside \u003ccode\u003e[]\u003c/code\u003e (\"square brackets\").\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epuppies = [\"bulldog\", \"terrier\", \"poodle\"]\u003cbr\u003e# =\u0026gt; [\"bulldog\", \"terrier\", \"poodle\"]\u003cbr\u003e\u003cbr\u003erandom_numbers = [ 2, 5, 6, 8, 30050]\u003cbr\u003e# =\u0026gt; [ 2, 5, 6, 8, 30050]\u003cbr\u003e\u003cbr\u003emixed = [\"this\", \"array\", 7, 20, \"has\", 45, \"integers\", \"\u0026amp;\", \"strings\", 309]\u003cbr\u003e# =\u0026gt; [\"this\", \"array\", 7, 20, \"has\", 45, \"integers\", \"\u0026amp;\", \"strings\", 309]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is possible to create an array that contains disparate data types. In other words, you could create an array like the one above, that stores both strings and integers. This is generally discouraged, however. It's best to keep your arrays populated with only one kind of element.\u003c/p\u003e\n\n\u003ch2\u003eAdding Items to an Array\u003c/h2\u003e\n\n\u003cp\u003eIf an array is a storage container for a list of data, then we can imagine adding and removing individual items. Let's take a look at how we can add elements to an array.\u003c/p\u003e\n\n\u003ch3\u003eShovel Method\u003c/h3\u003e\n\n\u003cp\u003eThe shovel method employs the \"shovel\" operator (\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e) and allows you to add (\"shovel\") items onto the \u003cem\u003eend\u003c/em\u003e of an array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003e\u003cbr\u003efamous_cats \u0026lt;\u0026lt; \"nala cat\"\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"lil' bub\", \"grumpy cat\", \"Maru\", \"nala cat\"]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eThe\u003c/em\u003e \u003ccode\u003e.inspect\u003c/code\u003e \u003cem\u003emethod returns a string containing a human-readable representation of an object. In this case, the list of the strings held in the array.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe shovel method (\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e) is the preferred syntax for adding elements to an array, however you might see other methods used in examples online:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.push\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eCalling \u003ccode\u003e.push\u003c/code\u003e on an array with an argument will add that element to the \u003cem\u003eend\u003c/em\u003e of the array. It has the same effect as the shovel method explained above:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003e\u003cbr\u003efamous_cats.push(\"nala cat\")\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"lil' bub\", \"grumpy cat\", \"Maru\", \"nala cat\"]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003e.unshift\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eTo add an element to the \u003cem\u003efront\u003c/em\u003e of an array, you can call the \u003ccode\u003e.unshift\u003c/code\u003e method on it with an argument of the element you wish to add:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003e\u003cbr\u003efamous_cats.unshift(\"nala cat\")\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"nala cat\", \"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eRemoving Items From an Array\u003c/h2\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.pop\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eCalling \u003ccode\u003e.pop\u003c/code\u003e on an array will remove the \u003cem\u003elast\u003c/em\u003e item from the \u003cem\u003eend\u003c/em\u003e of the array. The \u003ccode\u003e.pop\u003c/code\u003e method will also supply the removed element as its return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003emaru_cat = famous_cats.pop\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"lil' bub\", \"grumpy cat\"]\u003cbr\u003eputs maru_cat\u003cbr\u003e# =\u0026gt; Maru\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003e.shift\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eCalling \u003ccode\u003e.shift\u003c/code\u003e on an array will remove the \u003cem\u003efirst\u003c/em\u003e item from the \u003cem\u003efront\u003c/em\u003e of the array. The \u003ccode\u003e.shift\u003c/code\u003e method will also supply the removed element as a return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003elil_bub = famous_cats.shift\u003cbr\u003e\u003cbr\u003eputs famous_cats.inspect\u003cbr\u003e# =\u0026gt; [\"grumpy cat\", \"Maru\"]\u003cbr\u003eputs lil_bub\u003cbr\u003e# =\u0026gt; lil' bub\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote:\u003c/em\u003e If you want to remove items that are not at the beginning or end of an array, use the \u003ca href=\"http://docs.ruby-lang.org/en/2.0.0/Array.html#method-i-delete_at\"\u003eRuby documentation\u003c/a\u003e to figure out how.\u003c/p\u003e\n\n\u003ch2\u003eRetrieving Items from Array\u003c/h2\u003e\n\n\u003cp\u003eWhen you write out a list on a notepad, you typically write each item on its own line. Whether or not the list is explicitly numbered, the list has a numerology to it based on the sequence of the lines that the items are listed upon.\u003c/p\u003e\n\n\u003cp\u003eJust like the items in our notepad lists, elements in an array are associated with a number that represents their order. In programming, this number is called an \u003cstrong\u003eindex\u003c/strong\u003e. While humans typically start their lists at \"1\", arrays begin their indexes at \u003ccode\u003e0\u003c/code\u003e (zero). So, the first item in an array will always be \"at index \u003ccode\u003e0\u003c/code\u003e\". If we have an array of famous (fictional) cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"Cheshire Cat\", \"Puss in Boots\", \"Garfield\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\"Cheshire Cat\"\u003c/code\u003e is at index \u003ccode\u003e0\u003c/code\u003e in the array, \u003ccode\u003e\"Puss in Boots\"\u003c/code\u003e is  a index \u003ccode\u003e1\u003c/code\u003e, and \u003ccode\u003e\"Garfield\"\u003c/code\u003e is at index \u003ccode\u003e2\u003c/code\u003e. Indexes will always be \u003cem\u003eone less\u003c/em\u003e than the \u003cstrong\u003ecount\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo access one of these items in the \u003ccode\u003efamous_cats\u003c/code\u003e array, we can type the name of the array immediately followed by the relevant index number wrapped in square brackets (\u003ccode\u003e[]\u003c/code\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats =  [\"Cheshire Cat\", \"Puss in Boots\", \"Garfield\"]\u003cbr\u003e\u003cbr\u003efamous_cats[1]\u003cbr\u003e# =\u0026gt; \"Puss in Boots\"\u003cbr\u003e\u003cbr\u003efamous_cats[0]\u003cbr\u003e# =\u0026gt; \"Cheshire Cat\"\u003cbr\u003e\u003cbr\u003efamous_cats[2]\u003cbr\u003e# =\u0026gt; \"Garfield\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also access array elements by using negative index numbers. The last item of an array is considered to be stored at an index of \u003ccode\u003e-1\u003c/code\u003e. Let's give it a shot:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats[-1]\u003cbr\u003e# =\u0026gt; \"Garfield\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eBonus: Using Methods\u003c/h4\u003e\n\n\u003cp\u003eWe can also use the \u003ccode\u003e#first\u003c/code\u003e method on an array to access the first element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats.first\u003cbr\u003e# =\u0026gt; \"Cheshire Cat\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use the \u003ccode\u003e#last\u003c/code\u003e method to access the last element:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats.last\u003cbr\u003e# =\u0026gt; \"Garfield\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eA Note on Index Numbers\u003c/h4\u003e\n\n\u003cp\u003eWhat happens when we try to access the element stored in an index that doesn't exist? In other words, let's say we have our \u003ccode\u003efamous_cats\u003c/code\u003e array that contains three elements. That means that our array contains an element at indexes \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, and \u003ccode\u003e2\u003c/code\u003e. What happens if we try to access an element at index \u003ccode\u003e3\u003c/code\u003e? An index element that doesn't exist.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats[3]\u003cbr\u003e# =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt returns \u003ccode\u003enil\u003c/code\u003e!\u003c/p\u003e\n\n\u003ch4\u003eAdvanced: Finding An Element's Index With \u003ccode\u003e.index()\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eTo discover the index number of an element within an array, we can use the \u003ccode\u003e.index()\u003c/code\u003e method. Calling \u003ccode\u003e.index()\u003c/code\u003e on an array with an argument inside the parentheses will return the \u003cem\u003efirst\u003c/em\u003e index number of an element matching that argument. If no elements match the argument, then this method will return \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"Cheshire Cat\", \"Puss in Boots\", \"Garfield\"]\u003cbr\u003e\u003cbr\u003efamous_cats.index(\"Puss in Boots\")\u003cbr\u003e# =\u0026gt; 1\u003cbr\u003e\u003cbr\u003efamous_cats.index(\"Maru\")\u003cbr\u003e# =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is not an operation you will perform very often. Arrays are used to store data and usually you will use the index number of an item to access it, not the other way around.\u003c/p\u003e","frontPage":false},{"exportId":"iterating-over-nested-hashes","title":"Iterating Over Nested Hashes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"nested-hash-iteration\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIterate over a nested hash\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIterating Over Nested Hashes\u003c/h2\u003e\n\n\u003cp\u003eAt this point you should be familiar with iterating over hashes that have one\nlevel — a series of key/value pairs on a single tier. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejon_snow = {\u003cbr\u003e  name: \"Jon\",\u003cbr\u003e  email: \"jon_snow@thewall.we\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens when we want to iterate over a multidimensional hash like the one\nbelow? Let's iterate over our nested hash one level at a time; iterating over\nthe first level of our hash would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts = {\u003cbr\u003e  \"Jon Snow\" =\u0026gt; {\u003cbr\u003e    name: \"Jon\",\u003cbr\u003e    email: \"jon_snow@thewall.we\",\u003cbr\u003e    favorite_ice_cream_flavors: [\"chocolate\", \"vanilla\", \"mint chip\"],\u003cbr\u003e    knows: nil\u003cbr\u003e  },\u003cbr\u003e  \"Freddy Mercury\" =\u0026gt; {\u003cbr\u003e    name: \"Freddy\",\u003cbr\u003e    email: \"freddy@mercury.com\",\u003cbr\u003e    favorite_ice_cream_flavors: [\"strawberry\", \"cookie dough\", \"mint chip\"]\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econtacts.each do |person, data|\u003cbr\u003e  puts \"#{person}: #{data}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eJon Snow:\u003cbr\u003e{ :name=\u0026gt;\"Jon\",\u003cbr\u003e  :email=\u0026gt;\"jon_snow@thewall.we\",\u003cbr\u003e  :favorite_ice_cream_flavors=\u0026gt;[\"chocolate\", \"vanilla\", \"mint chip\"],\u003cbr\u003e  :knows=\u0026gt;nil\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eFreddy Mercury:\u003cbr\u003e{ :name=\u0026gt;\"Freddy\",\u003cbr\u003e:email=\u0026gt;\"freddy@mercury.com\",\u003cbr\u003e:favorite_ice_cream_flavors=\u0026gt;[\"strawberry\", \"cookie dough\", \"mint chip\"]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn the first level, the keys are our contacts' names, \"Jon Snow\" and \"Freddy\nMercury\", and our values are the hashes that contain a series of key/value pairs\ndescribing them.\u003c/p\u003e\n\n\u003cp\u003eLet's iterate over the second level of our \u003ccode\u003econtacts\u003c/code\u003e hash. In order to access\nthe key/value pairs of the second tier (i.e. the name, email, and other data\nabout each contact), we need to iterate \u003cem\u003edown into\u003c/em\u003e that level. So, we pick up\nwhere we left off with the previous iteration and we keep going:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, data|\u003cbr\u003e  #at this level, \"person\" is Jon Snow or Freddy Mercury and \"data\" is a hash of\u003cbr\u003e  #key/value pairs to iterate over the \"data\" hash, we can use the following line:\u003cbr\u003e\u003cbr\u003e  data.each do |attribute, value|\u003cbr\u003e    puts \"#{attribute}: #{value}\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat should output the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003ename: Jon\u003cbr\u003eemail: jon_snow@thewall.we\u003cbr\u003efavorite_ice_cream_flavors: [\"chocolate\", \"vanilla\", \"mint chip\"]\u003cbr\u003eknows: nil\u003cbr\u003e\u003cbr\u003ename: Freddy\u003cbr\u003eemail: freddy@mercury.com\u003cbr\u003efavorite_ice_cream_flavors: [\"strawberry\", \"cookie dough\", \"mint chip\"]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take it one step further and print out \u003cem\u003ejust the favorite ice cream\nflavors\u003c/em\u003e. Once again, we'll need to iterate down into that level of the hash,\nthen we can access the favorite ice cream array and print out the flavors:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, data|\u003cbr\u003e  #at this level, \"person\" is Jon Snow or Freddy and \"data\" is a hash of\u003cbr\u003e  #key/value pairs to iterate over the \"data\" hash, we can use the following\u003cbr\u003e  #line:\u003cbr\u003e\u003cbr\u003e  data.each do |attribute, value|\u003cbr\u003e    #at this level, \"attribute\" describes the key of :name, :email,\u003cbr\u003e    #:favorite_ice_cream_flavors, or :knows we need to first check and see if\u003cbr\u003e    #the key is :favorite_ice_cream_flavors, if it is, that means the VALUE is\u003cbr\u003e    #an array that we can iterate over to print out each element\u003cbr\u003e\u003cbr\u003e    if attribute == :favorite_ice_cream_flavors\u003cbr\u003e      value.each do |flavor|\u003cbr\u003e        # here, each index element in an ice cream flavor string\u003cbr\u003e        puts \"#{flavor}\"\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003echocolate\u003cbr\u003evanilla\u003cbr\u003emint chip\u003cbr\u003estrawberry\u003cbr\u003ecookie dough\u003cbr\u003emint chip\n\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"what-is-a-pattern","title":"What is a Pattern?","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"regex-what-is-a-pattern\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/regex-what-is-a-pattern/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/regex-what-is-a-pattern\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/regex-what-is-a-pattern/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand the purpose of patterns and regular expressions (\"RegEx\").\u003c/li\u003e\n\u003cli\u003eLearn a bit about the history of RegEx.\u003c/li\u003e\n\u003cli\u003eUnderstand that the version of RegEx we use is but one of many implementations.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSay you're working at your new job as a developer and your supervisor asks you to build in validation for the email field in the company's signup form. There have recently been a lot of sign-ups with invalid email addresses (e.g., \"joeflatiron.com\", \"@helloworld.com\", and \"$%!\u003ca href=\"mailto:-adam@gmail.com\"\u003e-adam@gmail.com\u003c/a\u003e\"). First, you sit down and come up with a set of rules that any email address should adhere to (stop reading and see how many you can come up with):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNumbers, letters, dashes, and underscores are ok.\u003c/li\u003e\n\u003cli\u003eUppercase and lowercase letters are ok.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e%\u003c/code\u003e, \u003ccode\u003e?\u003c/code\u003e, \u003ccode\u003e$\u003c/code\u003e, \u003ccode\u003e!\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e are not valid characters.\u003c/li\u003e\n\u003cli\u003eThere must be an \u003ccode\u003e@\u003c/code\u003e separating the local part from the domain part.\u003c/li\u003e\n\u003cli\u003eThere must be at least one period in the domain part (e.g., gmail.com).\u003c/li\u003e\n\u003cli\u003eTwo periods in a row (\u003ccode\u003e..\u003c/code\u003e) are not allowed.\u003c/li\u003e\n\u003cli\u003eThe local (first) part of the email cannot start with a period.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe now have a \u003cstrong\u003epattern\u003c/strong\u003e that we know all email addresses must follow. We use regular expressions to encode these patterns for matching, searching, and substitution. Here's a sample RegEx for email validation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}/i\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf this doesn't make any sense, don't worry. We'll be covering how to write and read regular expressions shortly.\u003c/p\u003e\n\n\u003cp\u003e(There are actually a \u003ca href=\"https://en.wikipedia.org/wiki/Email_address#Domain_part\"\u003eLOT more rules\u003c/a\u003e for email addresses, but you get the point.)\u003c/p\u003e\n\n\u003ch2\u003eAbout RegEx\u003c/h2\u003e\n\n\u003ch3\u003eHistory\u003c/h3\u003e\n\n\u003cp\u003eRegEx came about in the 1950's and 1960's in various forms. Among the first appearances of regular expressions in program form was when Ken Thompson built \u003ca href=\"https://en.wikipedia.org/wiki/Stephen_Cole_Kleene\"\u003eStephen Cole Kleene\u003c/a\u003e's notation into the editor QED as a means to match patterns in text files. Since then, there have been various implementations of regular expressions developed. We'll be using Ruby regular expressions, an implementation mostly based off the PERL language.\u003c/p\u003e\n\n\u003ch3\u003eWhen to use RegEx\u003c/h3\u003e\n\n\u003cp\u003eRegular expressions are an extremely powerful way to search through strings and blocks of text for specific patterns. They can be used for data validation, searching, mass file renaming, and finding records in a database. Use them carefully. They are like a surgeon's scalpel: able to do a lot of harm or good, depending on how skillfully they are wielded.\u003c/p\u003e","frontPage":false},{"exportId":"attribute-accessors","title":"Attribute Accessors","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-attribute-accessors\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn the definition of a macro.\u003c/li\u003e\n\u003cli\u003eSee how macros can abstract away the explicitly defined setter and getter methods in a Ruby class.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is a Macro?\u003c/h2\u003e\n\n\u003cp\u003eNormally when you write a method you are manipulating and returning some kind of data.  This (kind of useless) method takes an integer and returns an integer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef plus_three(num)\u003cbr\u003e  num + 3\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRuby's \u003ccode\u003e#map\u003c/code\u003e method is called on an enumerable and returns an array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emantra = [\"Don't\", \"Repeat\", \"Yourself\"]\u003cbr\u003e\u003cbr\u003emantra.map do |word|\u003cbr\u003e  word[0]\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e# =\u0026gt; [\"D\", \"R\", \"Y\"] \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn Ruby a macro is like a method, just some code, that instead of returning a Ruby datatype returns more Ruby code! This code will get executed along with all the other code you have written when you run your program.  In this lab we will be using a macro, again think of this as a method, to write the definitions of other methods, crazy!  \u003c/p\u003e\n\n\u003cp\u003eThe implementation of macros is considered metaprogramming––the writing of programs that operate on other programs. Metaprogramming is a powerful tool. It can make our lives easier by automating repetitive tasks or providing something like a mini-language inside of another programming language that has the benefits of being concise and descriptive. \u003c/p\u003e\n\n\u003cp\u003eIf this sounds complicated, the answer is it can be—though it doesn't need to be. A danger of metaprogramming is that it can result in very hard to follow code that obscures what is actually happening.\u003c/p\u003e\n\n\u003cp\u003eBelow we'll implement macros to abstract away the manual, explicit definition of setter and getter methods in a Ruby class.\u003c/p\u003e\n\n\u003ch2\u003eAttribute Readers, Writers and Accessors\u003c/h2\u003e\n\n\u003cp\u003eIn object-oriented Ruby, there is a strong convention to have a setter and a getter method that pertain to the same attribute. For example, a \u003ccode\u003e.name\u003c/code\u003e getter and a \u003ccode\u003e.name=\u003c/code\u003e setter on our Person class. Because this pattern is so common, we find ourselves making these manual setter and getter definitions again and again. As Rubyists, we are lazy, and this is a virtue. If we can achieve the same result with less code, we'll do it.\u003c/p\u003e\n\n\u003cp\u003eCheck out the example below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  attr_reader :name\u003cbr\u003e  attr_writer :name\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eattr_reader\u003c/code\u003e macro, followed by the attribute name \u003ccode\u003e:name\u003c/code\u003e, \u003cem\u003ecreated a getter method for us\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eattr_writer\u003c/code\u003e macro, followed by the attribute name \u003ccode\u003e:name\u003c/code\u003e, \u003cem\u003ecreated a setter method for us\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe can now do the following, without explicitly defining a \u003ccode\u003e.name\u003c/code\u003e or \u003ccode\u003e.name=\u003c/code\u003e method ourselves:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejay_z = Person.new\u003cbr\u003ejay_z.name = \"Shawn Carter\"\u003cbr\u003ejay_z.name\u003cbr\u003e  =\u0026gt; \"Shawn Carter\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's compare a \u003ccode\u003ePerson\u003c/code\u003e class that uses macros to one that uses explicit setter and getter methods:\u003c/p\u003e\n\n\u003ch4\u003eMacros\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_writer :name\u003cbr\u003e  attr_reader :name\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eExplicit Method Definitions\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  def name=(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    @name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eAttribute Accessors\u003c/h4\u003e\n\n\u003cp\u003eIf we know that we are going to be reading and writing to the \u003ccode\u003ename\u003c/code\u003e attribute on our \u003ccode\u003ePerson\u003c/code\u003e class, we can use another macro called an attribute accessor.\u003c/p\u003e\n\n\u003cp\u003eSo this code...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_writer :name\u003cbr\u003e  attr_reader :name\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...can now be written like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe now have access to reader and writer methods from one macro!\u003c/p\u003e\n\n\u003ch4\u003eUsing Macros is Usually Better\u003c/h4\u003e\n\n\u003cp\u003eThe usage of macros is preferred over the explicit definition of setter and getter methods, \u003cem\u003eunless you need to customize the implementation of a method\u003c/em\u003e, like in our previous lesson when we defined \u003ccode\u003e.name\u003c/code\u003e as returning the first and last name variables combined.\u003c/p\u003e\n\n\u003cp\u003eTo understand why, simply look at the code above. Which class would you rather write? The longer one, or the shorter one?\u003c/p\u003e\n\n\u003cp\u003eWhen opening up a class, \u003ccode\u003eattr_accessor\u003c/code\u003e (along with \u003ccode\u003eattr_writer\u003c/code\u003e and \u003ccode\u003eattr_reader\u003c/code\u003e) allow you to get a high level overview of the class right from the start.\u003c/p\u003e\n\n\u003cp\u003eAs developers we spend more time reading rather than writing code, so it's important that the code we write be clear, concise and eloquent. We want to be kind to our future selves (when we come back to the programs we've written) and to other developers who will work with our code. \u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=ab11lJJKm8M\"\u003eVideo Review- Object Properties\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-complex-objects","title":"Introduction to Complex Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-complex-objects-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eAs we covered previously, we use classes as blueprints for objects. These\nobjects are the basic building blocks of Ruby code. We have introduced using\ninstance methods, variables, and attribute accessors independently. Now we'll\nfocus on using them in combination to build an object-oriented program.\u003c/p\u003e\n\n\u003cp\u003eIn the following lessons we'll explain these concepts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat code design is\u003c/li\u003e\n\u003cli\u003eBasic code design principles that object-oriented programmers employ\u003c/li\u003e\n\u003cli\u003eThe concept of a domain model\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBy combining the different concepts we've learned, we can use classes to model\nthe intricacies of real-world domains and systems!\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-object-oriented-in-ruby-conclusion","title":"Introduction to Object-Oriented in Ruby Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-introduction-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow we should have a basic grasp on object-oriented programming. As discussed in\nthis module, we should have an understanding of the concept of \"objects\" that\ncan contain data and/or code, such as attributes and methods.\u003c/p\u003e\n\n\u003cp\u003eIn this module we explained the concept of local variables and instance\nvariables, as well as instance methods. We can now set instance variables from\nour \u003ccode\u003e#initialize\u003c/code\u003e method and have been introduced to global and variable scope.\u003c/p\u003e\n\n\u003cp\u003eWhat we will be able to achieve is shared functionality throughout the application\nas needed. You're well on our way to having enough knowledge of OOP to develop\nyour own fully functional applications!\u003c/p\u003e","frontPage":false},{"exportId":"object-inheritance-conclusion","title":"Object Inheritance Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eInheritance is a common concept in our everyday lives, and, over the last\nseveral lessons, we saw how Ruby implements it: by creating a family of classes\nwith shared behavior while still differentiating those classes. Because of\ninheritance, we can define basic Ruby classes with large reusability and smaller\nsubclasses for more detailed behaviors. We can also take advantage of\ninheritance by coding multiple, non-repetitve methods that cut down on the total\namount of code we need while also cleaning and optimizing the code we do need.\nWe also looked at how we can use the \u003ccode\u003esuper\u003c/code\u003e keyword to inherit from and extend\nmethods in the parent class.\u003c/p\u003e\n\n\u003cp\u003eYou'll encounter inheritance in nearly every program you write.\u003c/p\u003e","frontPage":false},{"exportId":"database-basics","title":"Database Basics","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-database-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-database-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-database-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-database-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eWe'll cover how to create and delete database tables in SQLite as well as how to add columns to an existing table.  \u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eDescribe how relational databases store data in tables composed of columns and rows\u003c/li\u003e \u003cli\u003eUse lower case and snake_case conventions for column names\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003eCREATE TABLE\u003c/code\u003e keywords to create a new table with columns, including the \u003ccode\u003eid\u003c/code\u003e column\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003e.help\u003c/code\u003e command to get a complete list of SQL commands\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003e.tables\u003c/code\u003e command to list all the tables in a database\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003e.schema\u003c/code\u003e command to look at the structure of a database\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003eALTER TABLE\u003c/code\u003e keywords to add columns to a table\u003c/li\u003e \u003cli\u003eUse the \u003ccode\u003eDROP TABLE\u003c/code\u003e keywords to delete a table\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eDatabase Structure\u003c/h2\u003e  \u003cp\u003eRelational Databases like SQLite store data in a structure we refer to as a table. You can think of a table in a database a lot like you would a spreadsheet. We define specific columns in our table, and then we store any number of what we refer to as 'records' as rows in our database. A record is just information referring to one specific entity. For instance, if you had a table called \"People\" you could imagine a structure like this:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003ename\u003c/th\u003e     \u003cth\u003eage\u003c/th\u003e     \u003cth\u003eemail\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003eBob\u003c/td\u003e     \u003ctd\u003e29\u003c/td\u003e     \u003ctd\u003ebob@flatironschool.com\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eAvi\u003c/td\u003e     \u003ctd\u003e28\u003c/td\u003e     \u003ctd\u003eavi@flatironschool.com\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eAdam\u003c/td\u003e     \u003ctd\u003e28\u003c/td\u003e     \u003ctd\u003eadam@flatironschool.com\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eEach column has a name, and each row contains the corresponding information about a person.\u003c/p\u003e  \u003ch3\u003eNote on Column Names\u003c/h3\u003e  \u003cp\u003eWhen we name columns in our database, there are a couple of conventions we will follow. The first is that we will always use lowercase letters when referring to columns in our database. SQLite isn't case sensitive about its commands or column names, but it is generally best practice for us to stick to lowercase for our column names.\u003c/p\u003e  \u003cp\u003eThe second convention we want to follow is more important. That is, when we have multiple words in a column name, we link them together using underscores rather than spaces. We call this convention \"snake_case\". So, for instance, if we wanted to be more specific with our email column above, we can name it email_address. If we wanted to split up name to first and last we might have columns called first_name and last_name.\u003c/p\u003e  \u003ch2\u003eDatabase Tables\u003c/h2\u003e  \u003cp\u003eIn the following sections, we'll cover how to create, alter, and delete database tables. This reading is accompanied by a code along exercise that you can do in your terminal. You don't need to fork this repository, and there are no tests to pass. Follow along with the reading and code along instructions.\u003c/p\u003e  \u003ch3\u003eCreate Table\u003c/h3\u003e  \u003cp\u003eWhen we create a new database, it comes like a sort of blank slate. We can then create a table inside our database using the following statement:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eCREATE TABLE table_name; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut before we're able to store any actual data in a table, we'll need to define the columns in the table as well as the specific type of data each column will store.\u003c/p\u003e  \u003cp\u003eLet's give it a shot. For the purposes of this code along, you'll be typing these commands into your terminal.\u003c/p\u003e  \u003ch3\u003eCode Along I: Creating a Table\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eIn the terminal let's create our new database and start sqlite3 by running the following:\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003esqlite3 pet_database.db \u003c/code\u003e\u003c/pre\u003e \u003cul\u003e \u003cli\u003eNow, at our sqlite prompt, let's create our table:\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003eCREATE TABLE cats; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see the following error:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eError: near \";\": syntax error \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSQLite expects us to include at least some definition of the structure of this table as well. In other words, when we create database tables, we need to specify some column names, along with the type of data we are planning to store in each column. More on data types later.\u003c/p\u003e  \u003cp\u003eLet's try that table statement again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's break down the above code:\u003c/p\u003e  \u003col\u003e \u003cli\u003eUse the \u003ccode\u003eCREATE TABLE\u003c/code\u003e command to create a new table called \"cats\".\u003c/li\u003e \u003cli\u003eInclude a list of column names along with the type of data they will be storing. \u003ccode\u003eTEXT\u003c/code\u003e means we'll be storing plain old text, \u003ccode\u003eINTEGER\u003c/code\u003e means we'll store a number. Note that the use of capitalization is arbitrary, but it is a convention to help separate the SQL commands from the names we make up for our tables and columns.\u003c/li\u003e \u003cli\u003eEvery table we create, regardless of the other column names and data types, should be defined with an id INTEGER PRIMARY KEY column, including the integer data type and primary key designation. Our SQLite database tables \u003cem\u003emust be indexed by a number\u003c/em\u003e. We want each row in our table to have a number, which we'll call \"id\", just like in an Excel spreadsheet. Numbering our table rows makes our data that much easier to access, update, and organize. SQLite comes with a data type designation called \"Primary Key\". Primary keys are unique and auto-incrementing, meaning they start at 1 and each new row automatically gets assigned the next numeric value.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eOkay, let's check and make sure that we successfully created that table. To do this we'll be using SQL commands. To get a complete list of commands, you can type \u003ccode\u003e.help\u003c/code\u003e into the sqlite prompt.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-3/database-basics/sqlite-help.png\" alt=\"Sqlite help output\"\u003e\u003c/p\u003e  \u003cp\u003eWoah, that's a lot. Don't worry too much about all of these different commands right now. Just know that you can always use \u003ccode\u003e.help\u003c/code\u003e to check out the available options.\u003c/p\u003e  \u003cp\u003eOkay, let's check out our new table. To list all the tables in the database we'll use the \u003ccode\u003e.tables\u003c/code\u003e command. Type it into the sqlite prompt and hit enter, and you should see our \u003ccode\u003ecats\u003c/code\u003e table listed.\u003c/p\u003e  \u003cp\u003eWe can look at the structure, or \"schema\", of our database (i.e. the tables and their columns + column data types) with the \u003ccode\u003e.schema\u003c/code\u003e command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esqlite\u0026gt; .schema\u003cbr\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's move on to altering our table.\u003c/p\u003e  \u003ch3\u003eAlter Table\u003c/h3\u003e  \u003cp\u003eLet's say that, after creating a database and creating a table to live inside that database, we decide we want to add or remove a column. We can do so with the \u003ccode\u003eALTER TABLE\u003c/code\u003e statement.\u003c/p\u003e  \u003ch3\u003eCode Along II: Adding, Removing and Renaming Columns\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eLet's say we want to add a new column, \u003ccode\u003ebreed\u003c/code\u003e, to our \u003ccode\u003ecats\u003c/code\u003e table:\u003c/li\u003e \u003c/ul\u003e \u003cpre\u003e\u003ccode\u003eALTER TABLE cats ADD COLUMN breed TEXT; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's check out our schema now:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esqlite\u0026gt; .schema\u003cbr\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  breed TEXT\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that the \u003ccode\u003eALTER\u003c/code\u003e statement isn't here, but instead SQLite has updated our original CREATE statement. The schema reflects the current structure of the database, which is reflected as the CREATE statement necessary to create that structure.\u003c/p\u003e  \u003cp\u003eUnfortunately, altering a column name and/or deleting a column can be tricky in SQLite3. There are workarounds, however. We're not going to get into that right now, but you can explore the \u003ca href=\"https://www.sqlite.org/lang_altertable.html\"\u003edocumentation on this topic\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eFortunately, SQLite still supports most of what we'll need one way or another. For now, if you need to change a column name, it's best to simply delete the table and re-create it.\u003c/p\u003e  \u003ch3\u003eDrop Table\u003c/h3\u003e  \u003cp\u003eLastly, we'll discuss how to delete a table from a database with the \u003ccode\u003eDROP TABLE\u003c/code\u003e statement.\u003c/p\u003e  \u003ch3\u003eCode Along III: Deleting a Table\u003c/h3\u003e  \u003cp\u003eDeleting a table is very simple:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eDROP TABLE cats; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd that's it! You can exit out of the sqlite prompt with the \u003ccode\u003e.quit\u003c/code\u003e command.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.sqlite.org/lang_keywords.html\"\u003eSQL keywords\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-object-relational-mapping","title":"Introduction to Object-Relational Mapping","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eAs a relative newcomer to the programming world, terms like\n\u003cem\u003eObject-Relational-Mapper\u003c/em\u003e can sound really intimidating. The nice part about\nORMs, is that they can make it easier to write code once you understand them.\u003c/p\u003e\n\n\u003cp\u003eYou’ve already written your fair share of SQL queries in the previous section.\nThey usually look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM schools WHERE name = 'Flatiron';\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eObject-relational-mapping allows you to write queries like the one above, as\nwell as much more complicated ones, using the object-oriented paradigm of your\npreferred programming language--in this case that would be Ruby.\u003c/p\u003e\n\n\u003cp\u003eIn these lessons, we'll be covering these topics:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe benefits of ORM \u003c/li\u003e\n\u003cli\u003eHow ORMs can abstract database logic\u003c/li\u003e\n\u003cli\u003eWriting code that inserts data into the database\u003c/li\u003e\n\u003cli\u003eWriting methods that can update an existing database record when changes are\nmade its related Ruby object\u003c/li\u003e\n\u003cli\u003eIdentifying whether a Ruby object has already been persisted to the database\u003c/li\u003e\n\u003cli\u003eBuilding a method that can either find and update or create a database record\u003c/li\u003e\n\u003cli\u003eScraping and saving data into a database\u003c/li\u003e\n\u003cli\u003eHow to use data to make Ruby objects\u003c/li\u003e\n\u003cli\u003eTurning database rows into Ruby objects\u003c/li\u003e\n\u003cli\u003eMapping a database table to a Ruby object\u003c/li\u003e\n\u003cli\u003eSearching a database with Ruby objects\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, you'll get to write in the language you are already learning\nanyway. SQL is a powerful language, but most of us don’t write in it often.\nBeing able to leverage the fluency of Ruby to perform these actions is awesome!\u003c/p\u003e","frontPage":false},{"exportId":"defining-object-relational-mapping","title":"Defining Object-Relational Mapping","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-defining-object-relational-mapping\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-defining-object-relational-mapping/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-defining-object-relational-mapping\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-defining-object-relational-mapping/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the concept of an ORM and why we build them.\u003c/li\u003e\n\u003cli\u003eDescribe the code that will map your Ruby objects to a database.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is ORM?\u003c/h2\u003e\n\n\u003cp\u003eObject Relational Mapping (ORM) is the technique of accessing a relational database using an object-oriented programming language. Object Relational Mapping is a way for our Ruby programs to manage database data by \"mapping\" database tables to classes and instances of classes to rows in those tables.\u003c/p\u003e\n\n\u003cp\u003eThere is no special programming magic to an ORM––it is simply a manner in which we implement the code that connects our Ruby program to our database. For example, you may have seen code that connects your Ruby program to a given database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection = SQLite3::Database.new('db/my_database.db')\u003cbr\u003e\u003cbr\u003edatabase_connection.execute(\"Some SQL statement\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn ORM is really just a concept. It is a design pattern, a conventional way for us to organize our programs when we want those programs to connect to a database. The convention is this:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhen \"mapping\" our program to a database, we equate classes with database tables and instances of those classes with table rows.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eYou may also see this referred to as \"wrapping\" a database, because we are writing Ruby code that \"wraps\" or handles SQL.\u003c/p\u003e\n\n\u003ch2\u003eWhy Use ORM?\u003c/h2\u003e\n\n\u003cp\u003eThere are a number of reasons why we use the ORM pattern. Two good ones are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCutting down on repetitive code.\u003c/li\u003e\n\u003cli\u003eImplementing conventional patterns that are organized and sensical.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCutting Down on Repetition\u003c/h3\u003e\n\n\u003cp\u003eLet's take a look at some of the common code we might use to interact our Ruby program with our database.\u003c/p\u003e\n\n\u003cp\u003eLet's say we have a program that helps a veterinary office keep track of the pets it treats and those pets' owners. Such a program would have an \u003ccode\u003eOwner\u003c/code\u003e class and \u003ccode\u003eCat\u003c/code\u003e class (among classes to represent other pets). Our program surely needs to connect to a database so that the veterinary office can persist information about its pets and owners.\u003c/p\u003e\n\n\u003cp\u003eOur program would create a connection to the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection = SQLite3::Database.new('db/pets.db')\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe would create an owners table and a cats table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection.execute(\"CREATE TABLE IF NOT EXISTS cats(id INTEGER PRIMARY KEY, name TEXT, breed TEXT, age INTEGER)\")\u003cbr\u003e\u003cbr\u003edatabase_connection.execute(\"CREATE TABLE IF NOT EXISTS owners(id INTEGER PRIMARY KEY, name TEXT)\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we would need to regularly insert new cats and owners into these tables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection.execute(\"INSERT INTO cats (name, breed, age) VALUES ('Maru', 'scottish fold', 3)\")\u003cbr\u003e\u003cbr\u003edatabase_connection.execute(\"INSERT INTO cats (name, breed, age) VALUES ('Hana', 'tortoiseshell', 1)\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that in the lines of code above, there is a lot of repetition. In fact, the only difference between the two lines in which we insert data into the database are the actual values.\u003c/p\u003e\n\n\u003cp\u003eThe repetition would also occur for other SQL statements we might want to execute against our database. Any \u003ccode\u003eSELECT\u003c/code\u003e queries, for example, would repeat the call to the \u003ccode\u003edatabase_connection.execute\u003c/code\u003e method and differ only in the specifics of what data we are selecting from which table.\u003c/p\u003e\n\n\u003cp\u003eAs programmers, you might remember, we are lazy. We don't like to repeat ourselves if we can avoid it. Repetition qualifies as a \"code smell\". Instead of repeating the same, or similar, code any time we want to perform common actions against our database, we can write a series of methods to abstract that behavior.\u003c/p\u003e\n\n\u003cp\u003eFor example, we can write a \u003ccode\u003e.save\u003c/code\u003e method on our \u003ccode\u003eCat\u003c/code\u003e class that handles the common action of \u003ccode\u003eINSERT\u003c/code\u003eing data into the database.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Cat\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, breed, age)\u003cbr\u003e    @name = name\u003cbr\u003e    @breed = breed\u003cbr\u003e    @age = age\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.save(name, breed, age, database_connection)\u003cbr\u003e    database_connection.execute(\"INSERT INTO cats (name, breed, age) VALUES (?, ?, ?)\",name, breed, age)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's create some new cats and save them to the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edatabase_connection = SQLite3::Database.new('db/pets.db')\u003cbr\u003e\u003cbr\u003eCat.new(\"Maru\", \"scottish fold\", 3)\u003cbr\u003eCat.new(\"Hana\", \"tortoiseshell\", 1)\u003cbr\u003e\u003cbr\u003eCat.all.each do |cat|\u003cbr\u003e  Cat.save(cat.name, cat.breed, cat.age, database_connection)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we establish the connection to our database, create two new cats and then iterate over our collection of cat instances stored in the \u003ccode\u003eCat.all\u003c/code\u003e method. Inside this iteration, we use the \u003ccode\u003eCat.save\u003c/code\u003e method, giving it arguments of the data specific to each cat to \u003ccode\u003eINSERT\u003c/code\u003e those cat records into the cats table.\u003c/p\u003e\n\n\u003cp\u003eNow, thanks to our \u003ccode\u003eCat.save\u003c/code\u003e method, we have some re-usable code––code that we can easily use again and again to \"save\" or \u003ccode\u003eINSERT\u003c/code\u003e, cat records into the database.\u003c/p\u003e\n\n\u003cp\u003eThis is just one example of the types of methods we will learn to build as we create our ORM. \u003cem\u003eDon't worry too much about the code shown above.\u003c/em\u003e We'll learn more about how and why we define our ORM methods later on. This is just a preview of the kind of method we will write to tell our classes how to talk to our database.\u003c/p\u003e\n\n\u003ch3\u003eLogical Design\u003c/h3\u003e\n\n\u003cp\u003eAnother important reason to implement the ORM pattern is that it just makes sense. Telling our Ruby program to communicate with our database is confusing enough without each individual developer having to make their own, individual decision about \u003cem\u003ehow\u003c/em\u003e our program should talk to our database.\u003c/p\u003e\n\n\u003cp\u003eInstead, we follow the convention: classes are mapped to or equated with tables and instances of a class are equated to table rows.\u003c/p\u003e\n\n\u003cp\u003eIf we have a \u003ccode\u003eCat\u003c/code\u003e class, we have a cats table. Cat instances get stored as rows in the cats table.\u003c/p\u003e\n\n\u003cp\u003eFurther, we don't have to make our own potentially confusing or non-sensical decision about what kinds of methods we will build to help our classes communicate with our database. Just like the \u003ccode\u003e.save\u003c/code\u003e method we previewed above, we will learn to build a series of common, conventional methods that our programs can rely on again and again to communicate with our database.\u003c/p\u003e","frontPage":false},{"exportId":"sql-databases-overview","title":"SQL Databases Overview","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-database-overview\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-database-overview/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-database-overview\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-database-overview/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eWhat is SQL?\u003c/h2\u003e\n\n\u003cp\u003eSQL (Structured Query Language) is a language for managing data in a database. Unlike some other programming languages, it's only used for one thing: talking to databases. Thus, you might hear it referred to as a \"special purpose\", or \"domain specific\" programming language. This means that you won't be using SQL to write the next big web app, but you might use it to interact with the database that powers it.\u003c/p\u003e\n\n\u003cp\u003eEven though SQL has just one purpose, it is used by many different database systems such as MySQL, PostgreSQL, or the system we'll be using in this course: SQLite. There are a handful of things other SQL systems like Postgres, or MySQL can do that are not supported by SQLite. Every database system has its own strengths and weaknesses, and as you learn more about them you should evaluate them thoughtfully when deciding which to use for what purpose. For us, SQLite provides a low barrier to entry, and is simple to get up and running. \u003c/p\u003e\n\n\u003ch2\u003eWeb Developers \u0026lt;3 Databases\u003c/h2\u003e\n\n\u003cp\u003eWhy do we need to master SQL? As a full-stack web developer, you'll frequently be working with databases to manage the data associated with your applications. Think about the web apps you're familiar with. Facebook saves user data and stores––or persists––your associations to your friends. Amazon has an enormous database of items for sale. The New York Times has a storage system for all of their articles. Most of the sites you interact with every day, and consequently most of the sites you'll work on or build, need databases to persist data.\u003c/p\u003e\n\n\u003cp\u003eWe've already seen how we can build Ruby programs that model real-world objects and environments. With database management skills, we'll learn to store representations of the Ruby objects our programs create and retrieve them at the appropriate time. We’ll also learn how to connect our Ruby (and even later, Ruby on Rails) applications to our databases. \u003c/p\u003e\n\n\u003cp\u003eFor example, a basic web application might have many users. So far, we've learned how to build a Ruby \u003ccode\u003eUser\u003c/code\u003e class that produces user objects. But, we don't yet know how to store those users and their details. If a user signs up for our app and we proceed to lose all their information immediately, how will we know if an existing user is signing back into our app? We need a way to take our Ruby objects, store them in a database and retrieve them at the appropriate time.\u003c/p\u003e\n\n\u003ch2\u003eIn This Topic\u003c/h2\u003e\n\n\u003cp\u003eThis topic will cover how to use and navigate databases based on SQL. By the end of this topic, you’ll be able to: \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate SQLite3 databases.\u003c/li\u003e\n\u003cli\u003eCreate, update, select, and delete data from database tables.\u003c/li\u003e\n\u003cli\u003eRelate data within a given database.\u003c/li\u003e\n\u003cli\u003eWrite SQL code in both your command line and your text editor and execute the code against a database. \u003c/li\u003e\n\u003cli\u003eWrite Ruby programs that talk to and save data to your databases.\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"http-requests","title":"HTTP Requests","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-http-request-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-http-request-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-http-request-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-http-request-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine the path in an HTTP request\u003c/li\u003e\n\u003cli\u003eDefine the \u003ccode\u003eenv\u003c/code\u003e variable in an HTTP request\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003epath\u003c/code\u003e method to filter HTTP requests\u003c/li\u003e\n\u003cli\u003eDescribe \u003ccode\u003eGET\u003c/code\u003e parameters and how they allow web applications to handle user queries\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eHTTP Requests\u003c/h2\u003e\n\n\u003cp\u003eAn HTTP Request that our browser sends to the server contains two main sections of information. One is headers and the other section is the resource or path requested (for example, \u003ccode\u003e/search\u003c/code\u003e or \u003ccode\u003e/profile_name\u003c/code\u003e). Let's break down the second section since there's a lot of information that can be stored in it! \u003c/p\u003e\n\n\u003ch2\u003eThe Path\u003c/h2\u003e\n\n\u003cp\u003eThe path that is requested is the resource that the client wants. Since your server can contain a lot of functionality, the path signifies which specific part of your server it wants. If we were creating a simple shopping cart application, for example, we can think of a few different paths that are required:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ePath\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e/items\u003c/td\u003e\n\u003ctd\u003eList all items available\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e/cart\u003c/td\u003e\n\u003ctd\u003eList items in cart\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eHow would we implement this in our Rack app? The path lives in the HTTP request, and to get to it we have to inspect the \u003ccode\u003eenv\u003c/code\u003e part of our \u003ccode\u003e#call\u003c/code\u003e function. In the \u003ccode\u003eenv\u003c/code\u003e variable is all of the information contained in the request. Thankfully, Rack has a great way of parsing all this information for us. It looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis \u003ca href=\"http://www.rubydoc.info/gems/rack/Rack/Request\"\u003eRack::Request\u003c/a\u003e instance now has a ton of useful methods. If we look through the documentation, it has a method called \u003ccode\u003e#path\u003c/code\u003e. This will return the path that was requested. \u003c/p\u003e\n\n\u003cp\u003eBefore we inspect the \u003ccode\u003e#path\u003c/code\u003e, let's set up what we would do if someone wanted to see all of our items:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@items = [\"Apples\",\"Carrots\",\"Pears\"]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    @@items.each do |item|\u003cbr\u003e      resp.write \"#{item}\\n\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you're on a local environment, you can take it a step further and customize the response based on which specific path you enter. For example, right now the code above will list all of your items \u003cem\u003eno matter what path you put in\u003c/em\u003e. You can give it a try by using the code to create your Rack file. Type \u003ccode\u003elocalhost:9292/items\u003c/code\u003e, \u003ccode\u003elocalhost:9292/cart\u003c/code\u003e, \u003ccode\u003elocalhost:9292/flatiron/is/awesome\u003c/code\u003e. All of those URLs work since we're not filtering for path. No matter what the request is, we end up sending the same response. Let's filter so that this only works for the \u003ccode\u003e/items\u003c/code\u003e path using the \u003ccode\u003e#path\u003c/code\u003e method of our \u003ccode\u003eRack::Request\u003c/code\u003e object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@items = [\"Apples\",\"Carrots\",\"Pears\"]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path.match(/items/)\u003cbr\u003e      @@items.each do |item|\u003cbr\u003e        resp.write \"#{item}\\n\"\u003cbr\u003e      end\u003cbr\u003e    else\u003cbr\u003e      resp.write \"Path Not Found\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! With this we can now do different things depending on the path.\u003c/p\u003e\n\n\u003ch3\u003eUser Input Via The Path\u003c/h3\u003e\n\n\u003cp\u003eWhat if users wanted to check and see if we have \u003ccode\u003eApples\u003c/code\u003e available in our list of items? How do other websites handle getting user queries? If we go to GitHub and type in \"apples\" in the search query, we get a URL that looks like this: \u003ccode\u003ehttps://github.com/search?q=apples\u003c/code\u003e. We have a domain of \u003ccode\u003egithub.com\u003c/code\u003e, path of \u003ccode\u003esearch\u003c/code\u003e, and then a \u003ccode\u003e?\u003c/code\u003e character. After that character comes \u003ccode\u003eq=apples\u003c/code\u003e. There is our search! \u003c/p\u003e\n\n\u003cp\u003eThe section after the \u003ccode\u003e?\u003c/code\u003e is called the \u003ccode\u003eGET\u003c/code\u003e parameters. If you notice in the above example, \u003ccode\u003eGET\u003c/code\u003e params come in key/value pairs. The key in GitHub's case would be \u003ccode\u003eq\u003c/code\u003e and the value is \u003ccode\u003eapples\u003c/code\u003e. The matching Ruby data structure that is also a key/value store would be a \u003ccode\u003eHash\u003c/code\u003e! Thankfully, Rack provides the mechanism to parse the \u003ccode\u003eGET\u003c/code\u003e params and return them to us in a standard \u003ccode\u003eHash\u003c/code\u003e. If we wanted to implement a \u003ccode\u003e/search\u003c/code\u003e route that accepted a \u003ccode\u003eGET\u003c/code\u003e param with the key \u003ccode\u003eq\u003c/code\u003e it would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  @@items = [\"Apples\",\"Carrots\",\"Pears\"]\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    req = Rack::Request.new(env)\u003cbr\u003e\u003cbr\u003e    if req.path.match(/items/)\u003cbr\u003e      @@items.each do |item|\u003cbr\u003e        resp.write \"#{item}\\n\"\u003cbr\u003e      end\u003cbr\u003e    elsif req.path.match(/search/)\u003cbr\u003e\u003cbr\u003e      search_term = req.params[\"q\"]\u003cbr\u003e\u003cbr\u003e      if @@items.include?(search_term)\u003cbr\u003e        resp.write \"#{search_term} is one of our items\"\u003cbr\u003e      else\u003cbr\u003e        resp.write \"Couldn't find #{search_term}\"\u003cbr\u003e      end\u003cbr\u003e\u003cbr\u003e    else\u003cbr\u003e      resp.write \"Path Not Found\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"keyword-arguments","title":"Keyword Arguments","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-keyword-arguments-and-mass-assignment\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-keyword-arguments-and-mass-assignment/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-keyword-arguments-and-mass-assignment\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-keyword-arguments-and-mass-assignment/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine keyword arguments and learn why they are useful.\u003c/li\u003e\n\u003cli\u003eDefine mass assignment and learn why it is useful.\u003c/li\u003e\n\u003cli\u003ePractice using keyword arguments and mass assignment.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eAt this point, we're very familiar with the fact that methods can be defined to\ntake in arguments. We also know that methods can be defined to take in\n\u003cem\u003emultiple\u003c/em\u003e arguments. Let's take a look at an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef print_name_and_greeting(greeting, name)\u003cbr\u003e  puts \"#{greeting}, #{name}\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprint_name_and_greeting(\"'sup\", \"Hillary Clinton\")\u003cbr\u003e'sup, Hillary Clinton\u003cbr\u003e=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs it currently stands, whoever uses our method needs to remember exactly what\norder to pass in the arguments. They need to know that the first argument is\ngreeting and the second argument is a name. What happens if they forget? What\nhappens if another developer who is working on our code base \u003cem\u003edoesn't\u003c/em\u003e see the\nfile where the method is defined, but only sees the method being invoked? Maybe\nit's not clear to them which argument is which––after all, when you invoke\nmethods, the arguments aren't labeled or anything. Let's take a look at what\ntype of disaster would befall us:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprint_name_and_greeting(\"Kanye\", \"hello\")\u003cbr\u003eKanye, hello\u003cbr\u003e=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat would be a weird way to greet Kanye. Let's take a look at another example,\nthis time using arguments of two different data types:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef happy_birthday(name, current_age)\u003cbr\u003e  puts \"Happy Birthday, #{name}\"\u003cbr\u003e  current_age += 1\u003cbr\u003e  puts \"You are now #{current_age} years old\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ehappy_birthday(\"Beyonce\", 31)\u003cbr\u003eHappy Birthday, Beyonce\u003cbr\u003eYou are now 32 years old\u003cbr\u003e=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut what happens if we accidentally pass the arguments in in the wrong order?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehappy_birthday(31, \"Beyonce\")\u003cbr\u003eHappy Birthday, 31\u003cbr\u003eTypeError: no implicit conversion of Fixnum into String\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOh no! We broke our program! Clearly, we have a need to regulate the passing in\nof multiple arguments. It would be especially helpful if we could \u003cem\u003ename\u003c/em\u003e the\narguments that we pass in, \u003cem\u003ewhen we invoke the method\u003c/em\u003e. Guess what? We can!\n(Okay, you probably saw that one coming.)\u003c/p\u003e\n\n\u003ch2\u003eKeyword Arguments\u003c/h2\u003e\n\n\u003cp\u003eKeyword arguments are a special way of passing arguments into a method. They\nbehave like hashes, pairing a key that functions as the argument name, with its\nvalue. Let's walk through it together and refactor our \u003ccode\u003ehappy_birthday\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef happy_birthday(name: \"Beyonce\", current_age: 31)\u003cbr\u003e  puts \"Happy Birthday, #{name}\"\u003cbr\u003e  current_age += 1\u003cbr\u003e  puts \"You are now #{current_age} years old\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've defined our method to take in keyword arguments. Our keyword\narguments consist of two key/value pairs, \u003ccode\u003e:name\u003c/code\u003e and \u003ccode\u003e:current_age\u003c/code\u003e. We've\ngiven our keyword arguments default values of \u003ccode\u003e\"Beyonce\"\u003c/code\u003e and \u003ccode\u003e31\u003c/code\u003e, but we\ndidn't have to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef happy_birthday(name:, current_age:)\u003cbr\u003e  puts \"Happy Birthday, #{name}\"\u003cbr\u003e  current_age += 1\u003cbr\u003e  puts \"You are now #{current_age} years old\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we can reference \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ecurrent_age\u003c/code\u003e inside our method body, as\nif they were barewords, \u003cem\u003eeven though they are the keys in our argument hash\u003c/em\u003e.\nThat's how keyword arguments work, they allow you to \u003cem\u003ename\u003c/em\u003e the arguments that\nyou pass in as keys in a hash. Then, the method body can use the values of those\nkeys, referenced by their name. Let's call our method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehappy_birthday(current_age: 31, name: \"Carmelo Anthony\")\u003cbr\u003eHappy Birthday, Carmelo Anthony\u003cbr\u003eYou are now 32 years old\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that even though we changed the order of our key/value pairs, our method\ndidn't break! Not only is this method more robust (i.e. more resistant to\nbreakage) than the previous one, it is also more explicit. Anyone looking at its\ninvocation can tell exactly what kind of data you are passing in.\u003c/p\u003e\n\n\u003ch3\u003eMass Assignment\u003c/h3\u003e\n\n\u003cp\u003eAnother benefit of using keyword arguments is the ability to \"mass assign\"\nattributes to an object. Let's revisit our \u003ccode\u003ePerson\u003c/code\u003e class from an earlier\nlesson. We'd like to initialize individual people with a name and an age:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age\u003cbr\u003e\u003cbr\u003e  def initialize(name, age)\u003cbr\u003e    @name = name\u003cbr\u003e    @age = age\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs it stands, our initialize method is vulnerable to the same issues we\ndiscussed above. Let's refactor it to take in a person's attributes as keyword\narguments:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age\u003cbr\u003e\u003cbr\u003e  def initialize(name:, age:)\u003cbr\u003e    @name = name\u003cbr\u003e    @age = age\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we have the added benefit of being able to use something called \u003cstrong\u003emass\nassignment\u003c/strong\u003e to instantiate new people objects. If a method is defined to accept\nkeyword arguments, we can create the hash that the method is expecting to accept\nas an argument, set that hash equal to a variable, and simply pass that variable\nin to the method as an argument. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson_attributes = {name: \"Sophie\", age: 26}\u003cbr\u003esophie = Person.new(person_attributes)\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis might not seem particularly useful now, but when we start building web\napplications, we'll understand more about how necessary this trick really is.\nFor now, just take our word for it.\u003c/p\u003e","frontPage":false},{"exportId":"has-many-relationships","title":"Has Many Relationships","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-has-many\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe the \"has many\" relationship between Ruby objects.\u003c/li\u003e\n\u003cli\u003eBuild classes that produce objects with a \"belongs-to\" and \"has-many\"\nrelationship.\u003c/li\u003e\n\u003cli\u003eExplain why we need to associate objects in this way.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe know that the programs we write are meant to model real-world environments.\nThis is because the programs we write are designed to carry out real-world jobs\nand solve real-world problems. Whether you're creating an app that connects\nusers around the world in some kind of social network or writing a program for a\nmajor university that manages their course offerings and students, your code\nwill need to be able to realistically map the relationships between different\nentities.\u003c/p\u003e\n\n\u003cp\u003eWe already know about the \"belongs-to\" relationship. Let's say we have a \u003ccode\u003eSong\u003c/code\u003e\nclass that produces individual song objects. Each song belongs to the artist\nwho wrote it. We can build that relationship by creating an \u003ccode\u003eattr_accessor\u003c/code\u003e in\nthe \u003ccode\u003eSong\u003c/code\u003e class for \u003ccode\u003eartist\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :artist, :name, :genre\u003cbr\u003e\u003cbr\u003e  def initialize(name, genre)\u003cbr\u003e    @name = name\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we also have an \u003ccode\u003eArtist\u003c/code\u003e class that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can set the artist attribute of an individual instance of \u003ccode\u003eSong\u003c/code\u003e equal to an\ninstance of the \u003ccode\u003eArtist\u003c/code\u003e class like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki = Song.new(\"In My Feelings\", \"hip-hop\")\u003cbr\u003edrake = Artist.new(\"Drake\")\u003cbr\u003e\u003cbr\u003ekiki.artist = drake\u003cbr\u003e\u003cbr\u003ekiki.artist.name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could just set the \u003ccode\u003eartist\u003c/code\u003e attribute equal to a simple string. However, if\nwe instead use the \u003ccode\u003eartist=\u003c/code\u003e method to set the attribute equal to a real\ninstance of the \u003ccode\u003eArtist\u003c/code\u003e class, we are associating our song to a robust object\nthat has its own attributes and behaviors.\u003c/p\u003e\n\n\u003cp\u003eFor example, in the code above, we are calling the \u003ccode\u003e#name\u003c/code\u003e method on the artist\nassociated with \u003ccode\u003ekiki\u003c/code\u003e, a song instance. With method chaining like this, we can\ndo even more with our code.\u003c/p\u003e\n\n\u003ch2\u003eThe \"has-many\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eThe inverse of the \"belongs-to\" relationship is the \"has-many\" relationship. If\na song belongs to an artist, then an artist should be able to \u003cem\u003ehave many\u003c/em\u003e songs.\nThis makes sense in the real world — most musical artists have authored\nand performed many more than one song.\u003c/p\u003e\n\n\u003cp\u003eHow can we represent an object's \"having many\" of something? Well, having many\nof something means you own a collection of that thing. Ruby offers us a great\nway to store collections of data in list form: arrays.\u003c/p\u003e\n\n\u003cp\u003eWe would like to be able to call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake.songs\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand have returned to us a list, or array, of the songs that Drake has written.\nOne way to implement this is to create an instance variable, an array, that will\nhold the songs belonging to a given artist. As songs are created that belong to\nthat artist, they can be added to the array.\u003c/p\u003e\n\n\u003ch3\u003eInitializing with an Empty Collection\u003c/h3\u003e\n\n\u003cp\u003eIf we want each artist instance to have an instance variable \u003ccode\u003e#songs\u003c/code\u003e to hold\ntheir song instances, it makes sense to create the variable when the artist is\ncreated:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @songs = []\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we set an instance variable, \u003ccode\u003e@songs\u003c/code\u003e, equal to an empty array. Recall that\nwe use instance variables to store the attributes of a given instance of a\nclass. This instance variable is set equal to an empty array because our artist\ndoesn't have any songs yet.\u003c/p\u003e\n\n\u003cp\u003eLet's write the method that will allow us to add some.\u003c/p\u003e\n\n\u003ch3\u003eAdding items to the collection\u003c/h3\u003e\n\n\u003cp\u003eWhose responsibility is it to add a new song to a given artist's collection?\nWell, at what point in time does an artist add another song to their repertoire?\nWhen they write a new song. It makes sense, therefore, that the Artist class be\nresponsible for adding the new song to the artist's collection at the time the\nsong is created.\u003c/p\u003e\n\n\u003cp\u003eLet's write the method that adds songs to an artist's collection in the \u003ccode\u003eArtist\u003c/code\u003e\nclass:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @songs = []\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_song(song)\u003cbr\u003e    @songs \u0026lt;\u0026lt; song\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can execute the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake = Artist.new(\"Drake\")\u003cbr\u003edrake.add_song(\"In My Feelings\")\u003cbr\u003edrake.add_song(\"Hotline Bling\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext we need a method that will allow a given artist to show us all of the songs\nin their collection. Let's do it.\u003c/p\u003e\n\n\u003ch3\u003eExposing the Collection\u003c/h3\u003e\n\n\u003cp\u003eLet's write an instance method, \u003ccode\u003e#songs\u003c/code\u003e, that we can call on an individual\nartist to return the list of songs that the artist has.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @songs = []\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_song(song)\u003cbr\u003e    @songs \u0026lt;\u0026lt; song\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def songs\u003cbr\u003e    @songs\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e#songs\u003c/code\u003e method simply returns the \u003ccode\u003e@songs\u003c/code\u003e array, which contains the list of\nsongs that the artist has many of.\u003c/p\u003e\n\n\u003cp\u003eLet's try it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake.songs\u003cbr\u003e  # =\u0026gt; [\"In My Feelings\", \"Hotline Bling\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eRelating Objects with \"belongs to\" and \"has many\"\u003c/h3\u003e\n\n\u003cp\u003e\"Wow, those look like interesting songs,\" you might be thinking. \"I wonder what\nkind of music Drake makes.\" Well, let's ask \u003ccode\u003edrake\u003c/code\u003e to tell us the genres of the\nsongs he has many of.\u003c/p\u003e\n\n\u003cp\u003eOh no! We can't do that because \u003ccode\u003edrake\u003c/code\u003e's songs are simply a list of strings. We\ncan't ask a plain old string what genre it has — it will have no idea what\nwe are talking about.\u003c/p\u003e\n\n\u003cp\u003eThis is the limitation of one-sided relationships. Earlier we discussed the\ndrawbacks of associating a given song to a string that contains an artist's name\ninstead of to a real \u003ccode\u003eArtist\u003c/code\u003e instance. The same drawbacks apply to associating\na given artist to a list of strings: with this setup, we are limited to\nreferences to a given artist's songs by their name alone. We cannot associate\nany further information to an artist's songs or enact any further behavior on an\nartist's songs.\u003c/p\u003e\n\n\u003cp\u003eLet's fix this now. Instead of calling the \u003ccode\u003e#add_song\u003c/code\u003e  method with an argument\nof a string, let's call that method with an argument of a real song object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki = Song.new(\"In My Feelings\", \"hip-hop\")\u003cbr\u003ehotline = Song.new(\"Hotline Bling\", \"pop\")\u003cbr\u003e\u003cbr\u003edrake.add_song(kiki)\u003cbr\u003edrake.add_song(hotline)\u003cbr\u003e\u003cbr\u003edrake.songs\u003cbr\u003e  # =\u0026gt;[#, #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now our artist has many songs that are real, tangible \u003ccode\u003eSong\u003c/code\u003e instances,\nnot just strings.\u003c/p\u003e\n\n\u003cp\u003eWe can do several useful things with this collection of real song objects, such\nas iterate over them and collect their genres:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake.songs.collect do |song|\u003cbr\u003e  song.genre\u003cbr\u003eend\u003cbr\u003e  # =\u0026gt; [\"hip-hop\", \"pop\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eObject Reciprocity\u003c/h4\u003e\n\n\u003cp\u003eNow that we can ask our given artist for their songs, let's make sure that we can\nask an individual song for its artist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki.artist\u003cbr\u003e  # =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlthough we do have an \u003ccode\u003eattr_accessor\u003c/code\u003e for \u003ccode\u003eartist\u003c/code\u003e in our \u003ccode\u003eSong\u003c/code\u003e class, this\nparticular song doesn't seem to know that it belongs to Drake. That is because\nour \u003ccode\u003e#add_song\u003c/code\u003e method only accomplished associating the song object to the\nartist object. Our artist knows it has a collection of songs and knows how to\nadd songs to that collection. But, we didn't tell the song we added to the\nartist that it belonged to that artist.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many/Image_138_CodeObjectsConvo%28A%29.png\" alt=\"belongs to\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's fix that now. Telling a song that it belongs to an artist should happen\nwhen that song is added to the artist's \u003ccode\u003e@songs\u003c/code\u003e collection. Consequently, we\nwill write the code that accomplishes this inside our \u003ccode\u003e#add_song\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @songs = []\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_song(song)\u003cbr\u003e    @songs \u0026lt;\u0026lt; song\u003cbr\u003e    song.artist = self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def songs\u003cbr\u003e    @songs\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take a closer look at the code in our \u003ccode\u003e#add_song\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef add_song(song)\u003cbr\u003e  @songs \u0026lt;\u0026lt; song\u003cbr\u003e  song.artist = self\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the artist on which we are calling\nthis method. We call the \u003ccode\u003e#artist=\u003c/code\u003e method on the song that is being passed in\nas an argument and set it equal to \u003ccode\u003eself\u003c/code\u003e — the artist.\u003c/p\u003e\n\n\u003cp\u003eLet's try calling \u003ccode\u003e#add_song\u003c/code\u003e again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edrake.add_song(kiki)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we should be able to ask \u003ccode\u003ekiki\u003c/code\u003e for its artist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki.artist.name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! Not only does an artist have many songs, but a song belongs to an\nartist and we built a method that enacts those associations at the appropriate\ntime.\u003c/p\u003e\n\n\u003ch2\u003eMaintaining a Single Source of Truth\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#add_song\u003c/code\u003e method works, but there is a flaw in this setup.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef add_song(song)\u003cbr\u003e  @songs \u0026lt;\u0026lt; song\u003cbr\u003e  song.artist = self\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this implementation, we're maintaining this relationship on both the \u003ccode\u003eSong\u003c/code\u003e\ninstance and the \u003ccode\u003eArtist\u003c/code\u003e instance. We've done this so that an artist knows\nwhich songs it has, and a song knows the artist it belongs to. However, keeping\nthis information maintained on both sides of the relationship means there are\n\u003cstrong\u003e\u003cem\u003etwo sources of truth\u003c/em\u003e\u003c/strong\u003e: the song's knowledge of who its artist is\n(established by using the \u003ccode\u003eartist=\u003c/code\u003e method) and the artist's knowledge of which\nsongs it has (the list of songs in the artist's \u003ccode\u003e@songs\u003c/code\u003e array).\u003c/p\u003e\n\n\u003cp\u003eSo why is this a problem? Well, what happens if we \u003cem\u003edon't\u003c/em\u003e consistently use the\n\u003ccode\u003eadd_song\u003c/code\u003e method? What if, instead, somewhere along the lines we did something\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elil_nas_x = Artist.new(\"Lil Nas X\")\u003cbr\u003eold_town_road = Song.new(\"Old Town Road\",\"hip-hop\")\u003cbr\u003e\u003cbr\u003eold_town_road.artist = lil_nas_x\u003cbr\u003e\u003cbr\u003eold_town_road.artist.name #=\u0026gt; \"Lil Nas X\"\u003cbr\u003elil_nas_x.songs #=\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, the \u003ccode\u003eSong\u003c/code\u003e instance \u003ccode\u003eold_town_road\u003c/code\u003e is associated with an artist, but\n\u003ccode\u003elil_nas_x\u003c/code\u003e \u003cstrong\u003e\u003cem\u003edoes not know about\u003c/em\u003e\u003c/strong\u003e \u003ccode\u003eold_town_road\u003c/code\u003e because the song was not\nadded to \u003ccode\u003elil_nas_x\u003c/code\u003e's \u003ccode\u003e@songs\u003c/code\u003e array. We have two sources of truth about\nartists and their songs — one from the artist side and one from the song\nside — and they're not aligned.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many/Image_138_CodeObjectsConvo%28B%29.png\" alt=\"belongs to\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA better way to approach this would be to figure out how to maintain our\n\"has-many\" / \"belongs-to\" relationship \u003cem\u003eon only one side of the relationship\u003c/em\u003e.\nWe can do that by having the \u003ccode\u003eSong\u003c/code\u003e class keep a list of \u003cem\u003eall of the songs by\nall artists\u003c/em\u003e, and writing the \u003ccode\u003e#songs\u003c/code\u003e method in our Artist class to query that\nlist, asking for the songs that belong to a given artist.\u003c/p\u003e\n\n\u003cp\u003eThis may become clearer if we make some updates to \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e. Say, for\ninstance, in \u003ccode\u003eSong\u003c/code\u003e, we set up a class variable, \u003ccode\u003e@@all\u003c/code\u003e, set to an empty Array,\nand a getter method, \u003ccode\u003e.all\u003c/code\u003e. This way, when a song is initialized, we can push\nthe instance into the \u003ccode\u003e@@all\u003c/code\u003e array and then use \u003ccode\u003eSong.all\u003c/code\u003e to retrieve all\n\u003ccode\u003eSong\u003c/code\u003e instances:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :artist, :name, :genre\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, genre)\u003cbr\u003e    @name = name\u003cbr\u003e    @genre = genre\u003cbr\u003e    save\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, so now that we can get all songs, we should be able to do things like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elil_nas_x = Artist.new(\"Lil Nas X\")\u003cbr\u003erick = Artist.new(\"Rick Astley\")\u003cbr\u003e\u003cbr\u003eold_town_road = Song.new(\"Old Town Road\",\"hip-hop\")\u003cbr\u003enever_gonna_give_you_up = Song.new(\"Never Gonna Give You Up\",\"pop\")\u003cbr\u003e\u003cbr\u003eold_town_road.artist = lil_nas_x\u003cbr\u003enever_gonna_give_you_up.artist = rick\u003cbr\u003e\u003cbr\u003eSong.all.first.name #=\u0026gt; \"Old Town Road\"\u003cbr\u003eSong.all.first.genre #=\u0026gt; \"hip-hop\"\u003cbr\u003eSong.all.first.artist #=\u0026gt; #\u003cbr\u003eSong.all.first.artist.name #=\u0026gt; \"Lil Nas X\"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eSong.all.last.name #=\u0026gt; \"Never Gonna Give You Up\"\u003cbr\u003eSong.all.last.genre #=\u0026gt; \"pop\"\u003cbr\u003eSong.all.last.artist #=\u0026gt; #\u003cbr\u003eSong.all.last.artist.name #=\u0026gt; \"Rick Astley\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we've got a way to get all songs, so if we want a list of all the songs that\nbelong to a particular artist we can just \u003cem\u003eselect\u003c/em\u003e the appropriate songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.all.select {|song| song.artist == lil_nas_x}\u003cbr\u003e#=\u0026gt; [#\u0026gt;]\u003cbr\u003e\u003cbr\u003eSong.all.select {|song| song.artist == rick}\u003cbr\u003e#=\u0026gt; [#\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo we use \u003ccode\u003e.select\u003c/code\u003e to iterate through \u003ccode\u003eSong.all\u003c/code\u003e and return the subset of songs\nassociated with a particular artist. We can incorporate this directly into our\n\u003ccode\u003eArtist\u003c/code\u003e class, replacing the implementation of the \u003ccode\u003e#songs\u003c/code\u003e method so that it\n\u003cem\u003eselects\u003c/em\u003e instead of returning the \u003ccode\u003e@songs\u003c/code\u003e instance variable. Because \u003ccode\u003e#songs\u003c/code\u003e\nis an instance method, we can use \u003ccode\u003eself\u003c/code\u003e to represent the \u003ccode\u003eArtist\u003c/code\u003e instance this\nmethod is called on:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def songs\u003cbr\u003e    Song.all.select {|song| song.artist == self}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we can get the necessary information by selecting from \u003ccode\u003eSong.all\u003c/code\u003e, we\nno longer need the \u003ccode\u003e@songs\u003c/code\u003e instance variable in our \u003ccode\u003eArtist\u003c/code\u003e class. We can get\nrid of that, and update \u003ccode\u003e#add_song\u003c/code\u003e accordingly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def add_song(song)\u003cbr\u003e    song.artist = self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def songs\u003cbr\u003e    Song.all.select {|song| song.artist == self}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this implementation, we're able to achieve a \"has-many\" / \"belongs-to\"\nrelationship while maintaining a single source of truth! Not only that, we were\nable to simplify the \u003ccode\u003eArtist\u003c/code\u003e class without losing any functionality!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many/Image_138_CodeObjectsConvo%28C%29.png\" alt=\"belongs to\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNow, let's go back to the original example in this section. With our new setup,\nthe issue of maintaining both sides of the relationship is solved. Simply by\ntelling the song instance which artist it belongs to, we are able to access the\nlist of songs that belong to a given artist. This works whether we use the\nSong class's \u003ccode\u003eartist=\u003c/code\u003e method or the Artist class's \u003ccode\u003eadd_song\u003c/code\u003e method:\u003c/p\u003e\n\n\u003cp\u003eCalling the \u003ccode\u003eartist=\u003c/code\u003e method on a Song instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elil_nas_x = Artist.new(\"Lil Nas X\")\u003cbr\u003eold_town_road = Song.new(\"Old Town Road\",\"hip-hop\")\u003cbr\u003e\u003cbr\u003eold_town_road.artist = lil_nas_x\u003cbr\u003e\u003cbr\u003eold_town_road.artist.name #=\u0026gt; \"Lil Nas X\"\u003cbr\u003elil_nas_x.songs #=\u0026gt; [#\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCalling the \u003ccode\u003eadd_song\u003c/code\u003e method on an Artist instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erick = Artist.new(\"Rick Astley\")\u003cbr\u003enever_gonna_give_you_up = Song.new(\"Never Gonna Give You Up\",\"pop\")\u003cbr\u003erick.add_song(never_gonna_give_you_up)\u003cbr\u003e\u003cbr\u003erick.songs #=\u0026gt; [#\u0026gt;]\u003cbr\u003enever_gonna_give_you_up.artist #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eExtending the Association and Cleaning up our Code\u003c/h2\u003e\n\n\u003cp\u003eThe code we have so far is pretty good. The best thing about it though is that\nit accommodates future change. We've built solid associations between our\n\u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e classes via our has many/belongs to code. With this\nfoundation we can make our code even better in the following ways:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#add_song_by_name\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eAs it currently stands, we have to \u003cem\u003efirst\u003c/em\u003e create a song and \u003cem\u003ethen\u003c/em\u003e add it to a\ngiven artist's collection of songs. We are lazy programmers, if we could combine\nthese two steps, that would make us happy. Furthermore, if you think about our\ndomain model, i.e. the program we are writing to model the real-world\nenvironment of an artist and their songs, the current need to create a song and\nthen add it to an artist doesn't really make sense. A song doesn't exist\n\u003cem\u003ebefore\u003c/em\u003e an artist creates it.\u003c/p\u003e\n\n\u003cp\u003eInstead, let's build a method \u003ccode\u003e#add_song_by_name\u003c/code\u003e, that takes in an argument of\na name and genre and both creates the new song \u003cem\u003eand\u003c/em\u003e adds that song to the\nartist's collection.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def add_song_by_name(name, genre)\u003cbr\u003e    song = Song.new(name, genre)\u003cbr\u003e    song.artist = self\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we tell the song that it belongs to the artist, just as we do in our\n\u003ccode\u003e#add_song\u003c/code\u003e method, and we also create a new song instance using the name and\ngenre from the arguments.\u003c/p\u003e\n\n\u003cp\u003eThis is not only neater and more elegant — we no longer have to create a\nnew song on a separate line \u003cem\u003eevery time\u003c/em\u003e we want to add one to an artist —\nbut it makes more sense.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#artist_name\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eSince we've already set up these great associations between instances of the\n\u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class, we can use them to build other helpful methods.\u003c/p\u003e\n\n\u003cp\u003eCurrently, to access the name of a given song's artist, we have to chain our\nmethods like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki.artist.name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can imagine knowing the name of an artist that a particular song belongs to\nwould be helpful and probably used in mulitple situations. Rather than having to\nchain multiple methods, wouldn't it be nice if we have one simple and\ndescriptive method that could return the name of a given song's artist? Let's\nbuild one!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def artist_name\u003cbr\u003e    self.artist.name\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekiki.artist_name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better. Notice that we used the \u003ccode\u003eself\u003c/code\u003e keyword inside the \u003ccode\u003e#artist_name\u003c/code\u003e\nmethod to refer to the instance of \u003ccode\u003eSong\u003c/code\u003e on which the method is being called.\nThen we call \u003ccode\u003e#artist\u003c/code\u003e on that song instance. This returns the \u003ccode\u003eArtist\u003c/code\u003e\ninstance associated with the song. Chaining a call to \u003ccode\u003e#name\u003c/code\u003e after that is\nequivalent to saying: call \u003ccode\u003e#name\u003c/code\u003e on the return value of \u003ccode\u003eself.artist\u003c/code\u003e, i.e.\ncall \u003ccode\u003e#name\u003c/code\u003e on the artist of this song.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eUsing the foundation of \"has-many\" / \"belongs-to\" associations, we can create\nmany different useful methods. We can write methods like \u003ccode\u003eadd_song_by_name\u003c/code\u003e\nthat handle initializing and associating instances. We can also create methods\nlike \u003ccode\u003eartist_name\u003c/code\u003e that can simplify retrieving information from an associated\ninstance.\u003c/p\u003e\n\n\u003cp\u003eEstablishing both \"has-many\" and \"belongs-to\" associations between two objects\nallows us to ask a song who its artist is, and ask an artist what their songs\nare. We've established a bi-directional relationship! Can you think of any other\nreal world relationships where these associations could be applied?\u003c/p\u003e","frontPage":false},{"exportId":"mass-assignment-and-class-initialization","title":"Mass Assignment and Class Initialization","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-mass-assignment-and-class-initialization\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-and-class-initialization/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-and-class-initialization\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-and-class-initialization/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand how to use mass assignment to metaprogram a Ruby class.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou might recall that metaprogramming is the practice of writing code that writes code for us. So, what does that have to do with mass assignment? We've learned that we can write a Ruby program that sends a web request to an API and returns particular data to the program.\u003c/p\u003e\n\n\u003cp\u003eLet's say we want to use the Twitter API to create users for our own application. The scenario is that we are developing a web application and we want our users to be able to sign in via Twitter. Thus, our own users are pulled from Twitter and we need to take the data we get from Twitter—for example a user's name, age and location—and use them to make instances of our own User class. Let's take a look at a code snippet:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e  attr_accessor :name, :age, :location, :user_name\u003cbr\u003e\u003cbr\u003e  def initialize(user_name:, name:, age:, location:)\u003cbr\u003e    @user_name = user_name\u003cbr\u003e    @name = name\u003cbr\u003e    @location = location\u003cbr\u003e    @age = age\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have our user class. It initializes with keyword arguments, i.e., a hash of attributes. For the purposes of this example, we won't get into the specifics of how we request and receive data from the Twitter API. Suffice to say that we send a request to the Twitter API and get a return value of a hash full of user attributes. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etwitter_user = {name: \"Sophie\", user_name: \"sm_debenedetto\", age: 26, location: \"NY, NY\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith what we've learned of mass assignment so far, we can use the \u003ccode\u003etwitter_user\u003c/code\u003e hash to instantiate a new instance of our own User class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie = User.new(twitter_user)\u003cbr\u003e =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo far so good. But, what if Twitter changes their API without telling us? (How could they? Don't they know who we are?) After all, we are not in charge of Twitter or their API, they can do whatever they want, whenever they want, with no regard to our application which relies on their data. Let's say Twitter makes a change that we're unaware of. Now when we request data from their API, we get this return value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew_twitter_user = twitter_user = {name: \"Sophie\", user_name: \"sm_debenedetto\", location: \"NY, NY\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the \u003ccode\u003etwitter_user\u003c/code\u003e no longer has an age.  Let's see what happens if we try to create new Users using the same old User class code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUser.new(new_twitter_user)\u003cbr\u003e=\u0026gt;ArgumentError: missing keyword: age\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur program broke! Let's play it with another scenario. Let's say the Twitter API changed and now returns data to us in the following manner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enewest_twitter_user = {name: \"Sophie\", user_name: \"sm_debenedetto\", age: 26, location: \"NY, NY\", bio: \"I'm a programmer living in NY!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's see what happens when we try to make a new instance of our User class with the same old User class code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUser.new(newest_twitter_user)\u003cbr\u003e=\u0026gt; ArgumentError: unknown keyword: bio\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur program breaks! Clearly, we need a way to \u003cem\u003eabstract away\u003c/em\u003e our User class' dependency on specific attributes. If only there were a way for us to tell our User to get ready to accept some unspecified number and type of attributes.\u003c/p\u003e\n\n\u003ch2\u003eMass Assignment and Metaprogramming\u003c/h2\u003e\n\n\u003cp\u003eGuess what? We can achieve exactly that goal using metaprogramming and mass assignment. Let's take a look at how it's done, then we'll break it down together. Here's our new and improved User class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e  attr_accessor :name, :user_name, :age, :location, :bio\u003cbr\u003e\u003cbr\u003e  def initialize(attributes)\u003cbr\u003e    attributes.each {|key, value| self.send((\"#{key}=\"), value)}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe define our initialize method to take in some unspecified \u003ccode\u003eattributes\u003c/code\u003e object. Then, we iterate over each key/value pair in the attributes hash. The name of the key becomes the name of a setter method and the value associated with the key is the name of the value you want to pass to that method. The ruby \u003ccode\u003e.send\u003c/code\u003e method then calls the method name that is the key’s name, with an argument of the value. In other words:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eself.send(key=, value)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIs the same as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstance_of_user.key = value\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhere each key/value pair is a member of our hash, one such iteration might read:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\u003cbr\u003einstance_of_user.name = \"Sophie\"\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd have the same result as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstance_of_user = User.new\u003cbr\u003einstance_of_user.name = \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eA Closer Look at \u003ccode\u003e.send\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.send\u003c/code\u003e method is just another way of calling a method on an object. For example, we know that instances of the User class have a \u003ccode\u003e.name=\u003c/code\u003e method that allows us to set the name of a user to a particular string:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie = User.new\u003cbr\u003esophie.name = \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, when we use the \u003ccode\u003e.name\u003c/code\u003e getter method, it will return the correct name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie.name\u003cbr\u003e  =\u0026gt; \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's look at the same behavior using \u003ccode\u003e.send\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie = User.new\u003cbr\u003esophie.send(\"name=\", \"Sophie\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat is generally considered to be clunky and ugly. It's whats known as \"syntactic vinegar\". We prefer the \"syntactic sugar\" of the first approach.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.send\u003c/code\u003e method, however, is a very useful tool for our metaprogramming purposes. It allows us to abstract away the specific method call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esophie = User.new\u003cbr\u003esophie.send(\"#{method_name}=\", value)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is exactly what's happening in our initialize method in the example above, where \u003ccode\u003eself\u003c/code\u003e refers to the User instance that is being initialized at that point in time.\u003c/p\u003e\n\n\u003ch2\u003eTaking things further: dynamically setting getters and setters\u003c/h2\u003e\n\n\u003cp\u003eLet's say we didn't want to specify the individual getter and setter methods using named symbols like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e  # we don't want to do this anymore :(\u003cbr\u003e  attr_accessor :name, :user_name, :age, :location, :bio\u003cbr\u003e\u003cbr\u003e  def initialize(attributes)\u003cbr\u003e    attributes.each {|key, value| self.send((\"#{key}=\"), value)}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstead we want to dynamically set those methods so that we have a getter and setter automatically declared for every attribute in the \u003ccode\u003eattributes\u003c/code\u003e Hash. How could we do this?\u003c/p\u003e\n\n\u003cp\u003eFirst, we need to remember that \u003ccode\u003eattr_accessor\u003c/code\u003e is a class method just like \u003ccode\u003eattr_reader\u003c/code\u003e and \u003ccode\u003eattr_writer\u003c/code\u003e. This means we can dynamically add getters or setters, or both, by doing the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e  def initialize(attributes)\u003cbr\u003e    attributes.each do |key, value| \u003cbr\u003e      self.class.attr_accessor(key)\u003cbr\u003e      self.send((\"#{key}=\"), value)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy making that one small change, we can now get and set every attribute on an object instantiated from \u003ccode\u003eUser\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eWhy is this useful?\u003c/h2\u003e\n\n\u003cp\u003eWith this pattern, we have made our code much more flexible. We can easily alter the number of attributes in the class and change the hash that we initialize the class with, \u003cem\u003ewithout editing our initialize method.\u003c/em\u003e Now, we're programming for the future. Our initialize method is flexible and we can leave it alone. That is one major goal of design in object oriented programming––the writing of code that accommodates future change and doesn't require a lot of modification, even as it grows.\u003c/p\u003e","frontPage":false},{"exportId":"setting-up-sqlite","title":"Setting up SQLite","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-setting-up-sqlite\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-setting-up-sqlite/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-setting-up-sqlite\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-setting-up-sqlite/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll get started with SQL by installing and trying out SQLite.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCheck to see if SQLite is installed on your computer via a terminal command\u003c/li\u003e\n\u003cli\u003eInstall SQLite on your computer\u003c/li\u003e\n\u003cli\u003eCreate and open a database file and table\u003c/li\u003e\n\u003cli\u003eEnd all SQL commands using proper semicolon notation\u003c/li\u003e\n\u003cli\u003eExit out of SQLite using the .quit command\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstalling SQL\u003c/h2\u003e\n\n\u003cp\u003eIf you are using the Learn IDE, you don't need to install anything. We've already done this for you :)\u003c/p\u003e\n\n\u003ch3\u003eMacOS\u003c/h3\u003e\n\n\u003cp\u003eIf you are on OSX version 10.4 or greater, you probably already have SQLite\ninstalled. Find out by opening up the terminal and running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewhich sqlite3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eif you get back\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/usr/bin/sqlite3\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThen you have a working version of sqlite3 already installed on your system.\nThanks Apple! Skip ahead to the 'Trying it out' section below!\u003c/p\u003e\n\n\u003cp\u003eIf not, then there are a couple of ways you can install SQLite.\u003c/p\u003e\n\n\u003ch3\u003eMacOS Manual Installation Options\u003c/h3\u003e\n\n\u003ch4\u003eInstall With Homebrew:\u003c/h4\u003e\n\n\u003cp\u003eYou can install SQLite using a package manager for your operating system. If you\nare on Mac, Homebrew is the way to go. To install Homebrew run the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe script that runs will explain what it is doing, and pause before it does it.\u003c/p\u003e\n\n\u003cp\u003eAfter installing Homebrew, install SQLite with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrew install sqlite\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eInstall From Binary:\u003c/h4\u003e\n\n\u003cp\u003eIf Homebrew isn't working out for you, you can download one of the pre-compiled\nbinary packages available at the \u003ca href=\"http://www.sqlite.org/download.html\"\u003edownloads page\u003c/a\u003e. Look for your operating system, download and install the appropriate binary.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are receiving an error when trying to install SQLite, make\nsure the Xcode Command-Line Tools have properly installed. Try running\n\u003ccode\u003excode-select --install\u003c/code\u003e to resolve this issue.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eWSL Manual Installation Instructions\u003c/h3\u003e\n\n\u003cp\u003eBelow are the steps for installing SQLite on the Windows Sub-system for Linux:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen your WSL terminal\u003c/li\u003e\n\u003cli\u003eUpdate your Ubuntu packages: \u003ccode\u003esudo apt update\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eOnce the packages have updated, install SQLite3 with: \u003ccode\u003esudo apt install sqlite3\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eConfirm installation and get the version number: \u003ccode\u003esqlite3 --version\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFor additional information, check out \u003ca href=\"https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-database#install-sqlite\"\u003ethis article on getting started with databases in WSL\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eTrying it out\u003c/h2\u003e\n\n\u003cp\u003eOkay, let's make sure everything is up and running. In your terminal, type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 test_sqlite.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will create a new database file called test_sqlite.db and open it in the\nsqlite prompt. You should see something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSQLite version 3.7.12 2013-03-19 12:42:02\u003cbr\u003eEnter \".help\" for instructions\u003cbr\u003esqlite\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou are now looking at the sqlite prompt and can now run SQL statements and\ncommands. Let's create a database table called \"test_table\":\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite\u0026gt; create table test_table(id);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command creates the table inside the test_sqlite.db database file. To\nverify that the table was created, run the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite\u0026gt; .tables\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the table listed. If you have the directory you're working in\nopen in your code editor, you should also see the database file in your file\ntree.\u003c/p\u003e\n\n\u003cp\u003eTo exit sqlite, type \u003ccode\u003e.quit\u003c/code\u003e at the sqlite prompt.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e All SQL statements that you write in your terminal, inside the\nsqlite prompt, \u003ccode\u003esqlite\u0026gt;\u003c/code\u003e, \u003cem\u003emust be terminated with a semi-colon \u003ccode\u003e;\u003c/code\u003e\u003c/em\u003e. If you hit\n\u003ccode\u003eenter\u003c/code\u003e without adding a semi-colon to the end of your line, you will be\ntrapped! Don't worry though, just add that \u003ccode\u003e;\u003c/code\u003e on the new line and hit \u003ccode\u003eenter\u003c/code\u003e\nagain. Note, however, that this does not apply to sqlite commands that begin\nwith a \u003ccode\u003e.\u003c/code\u003e such as \u003ccode\u003e.quit\u003c/code\u003e and \u003ccode\u003e.tables\u003c/code\u003e. These commands will \u003cem\u003enot work\u003c/em\u003e if you\nadd the semi-colon.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.sqlite.org/docs.html\"\u003eSQLite Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://mxcl.github.com/homebrew/\"\u003eHomebrew\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://zetcode.com/db/sqlite/\"\u003eZetCode sqlite3\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"string-interpolation","title":"String Interpolation","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"interpolation-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/interpolation-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/interpolation-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/interpolation-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover when and how to use string interpolation. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eInterpolate variables into strings \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhen to Use String Interpolation\u003c/h2\u003e\n\n\u003cp\u003eYou're a party planner for Beyonce's 35th birthday and you're using Ruby to help you out with the arrangements. There is a variable called \u003ccode\u003enum_of_attendees\u003c/code\u003e and since she's very popular, this variable points to the integer 547. You try and print the value of \u003ccode\u003enum_of_attendees\u003c/code\u003e to the screen with the code below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"There are num_of_attendees people coming to Beyonce's birthday party.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou expect this to print \"There are 547 people coming to Beyonce's birthday party\" but instead it prints \"There are num_of_attendees people coming to Beyonce's birthday party.\" Why is this?\u003c/p\u003e\n\n\u003cp\u003eWell, that's because variables need to be \u003cstrong\u003einterpolated\u003c/strong\u003e inside a string to get their value, and not just referenced by their name, to print to the screen. \u003c/p\u003e\n\n\u003ch2\u003eHow You Interpolate Variables into Strings\u003c/h2\u003e\n\n\u003cp\u003eTo interpolate, you wrap the variable like \u003ccode\u003e#{this}\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eLet's try again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"There are #{num_of_attendees} people coming to Beyonce's birthday party.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis prints \u003ccode\u003eThere are 547 people coming to Beyonce's birthday party.\u003c/code\u003e. Yay!\u003c/p\u003e\n\n\u003ch2\u003eAdditional Practice\u003c/h2\u003e\n\n\u003cp\u003eLet's drop into IRB and copy and paste the code from the following example. \u003c/p\u003e\n\n\u003cp\u003eLet's say you have a super hard question on your biology test asking you to identify the technical term for a group of flamingos. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eanswer = \"\u0026lt; fill in your answer here \u0026gt;\"\u003cbr\u003eputs \"A group of flamingos is called a #{answer}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, set the \u003ccode\u003eanswer\u003c/code\u003e variable equal to \u003ccode\u003e\"flamboyance\"\u003c/code\u003e and run the following code in IRB: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eanswer = \"flamboyance\"\u003cbr\u003eputs \"A group of flamingos is called a #{answer}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis prints \u003ccode\u003eA group of flamingos is called a flamboyance.\u003c/code\u003e to the screen.\u003c/p\u003e\n\n\u003cp\u003eNote that here you're declaring the variable \u003ccode\u003eanswer\u003c/code\u003e before calling \u003ccode\u003eputs\u003c/code\u003e. You need to do it in this order, because our program is read by the computer sequentially. When your computer gets to \u003ccode\u003e#{answer}\u003c/code\u003e, it won't know what that is if \u003ccode\u003eanswer\u003c/code\u003e isn't defined yet.\u003c/p\u003e\n\n\u003ch2\u003eAnother Way to Interpolate Variables into Strings\u003c/h2\u003e\n\n\u003cp\u003eSome Rubyists write this another way, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eanswer = \"Flamboyance\"\u003cbr\u003eputs \"A group of flamingos is called a \" + answer + \".\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere's debate about the best practice but most people here think the first way looks nicer and is easier for your fellow programmers to read.\u003c/p\u003e\n\n\u003ch4\u003eNote:\u003c/h4\u003e\n\n\u003cp\u003eInterpolation will only work on Strings wrapped in double quotes \u003ccode\u003e\"\"\u003c/code\u003e. Single quotes: \u003ccode\u003e''\u003c/code\u003e \u003cstrong\u003edo not support string interpolation\u003c/strong\u003e, so running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eanswer = 'Flamboyance'\u003cbr\u003eputs 'A group of flamingos is called a #{answer}.'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWill just print \u003ccode\u003eA group of flamingos is called a #{answer}.\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you were committed to using single quotes in such a case, it would be the right time to use the alternative method (\u003ccode\u003e'A group of flamingos is called a ' + answer + '.'\u003c/code\u003e) which would work just fine.\u003c/p\u003e","frontPage":false},{"exportId":"object-attributes","title":"Object Attributes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-object-attributes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse methods to abstract or wrap the attributes of an object.\u003c/li\u003e\n\u003cli\u003eExplain the difference between a setter and a getter method.\u003c/li\u003e\n\u003cli\u003eBuild and use setter and getter methods\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've learned how to build classes and even how to give our classes instance methods. Now, we can add the special method \u003ccode\u003einitialize\u003c/code\u003e, which will require certain arguments to be passed when instantiating the class to provide it with initial data. In this example, our Person class has an instance method, \u003ccode\u003e#name\u003c/code\u003e, that is set each time a new Person class is created. This \u003ccode\u003ename\u003c/code\u003e method can be called on an instance of Person (an individual person object) and return that person's name.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    @name\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ekanye = Person.new(\"Kanye\")\u003cbr\u003ekanye.name #=\u0026gt; \"Kanye\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut wait! Kanye has decided he wants to be referred to as \"Yeezy\". Kanye is a huge star so we should probably do what he says. However, as it currently stands, we don't have a way to re-assign Kanye's name. Let's see what happens when we try:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye.name = \"Yeezy\" \u003cbr\u003e#=\u0026gt; NoMethodError: undefined method `name=' for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe get a no method error! Kanye's name change is just one example of the many common situations in which we might want to alter the information or attributes associated with a given object. Let's move on to the next section to learn how to add that functionality to our classes.\u003c/p\u003e\n\n\u003ch2\u003eSetter vs. Getter Methods\u003c/h2\u003e\n\n\u003cp\u003eOur Person class' \u003ccode\u003e#name\u003c/code\u003e method is referred to as a \u003cstrong\u003e\"getter\"\u003c/strong\u003e or reader method. It returns information stored in an instance variable. In order to make a person's name attribute writable, we need to define a \u003cstrong\u003e\"setter\"\u003c/strong\u003e or writer method.\u003c/p\u003e\n\n\u003ch3\u003eDefining a Setter Method\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    @name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name=(new_name)\u003cbr\u003e    @name = new_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA setter method is defined with an \u003ccode\u003e=\u003c/code\u003e, equals sign, appended to the name of the method. The \u003ccode\u003e=\u003c/code\u003e is followed by the \u003ccode\u003e(argument_name)\u003c/code\u003e. Now that we've defined our setter method on the Person class, we can change Kanye's name.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The syntax highlighting may make it look like\nthe \u003ccode\u003e=\u003c/code\u003e sign in \u003ccode\u003ename=\u003c/code\u003e is separate from the name of the definition,\nbut \u003cstrong\u003eit is not\u003c/strong\u003e. The \u003ccode\u003e=\u003c/code\u003e is a necessary piece. Adding it in allows \nus to write \u003ccode\u003ekanye.name = \"Yeezy\"\u003c/code\u003e but this is a bit of syntatic \nsugar. Writing \u003ccode\u003ekanye.name=(\"Yeezy\")\u003c/code\u003e is also a valid way to use \nthis setter method.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eCalling a Setter Method\u003c/h3\u003e\n\n\u003cp\u003eTo call a setter method, you use the \u003ccode\u003e.\u003c/code\u003e notation (dot notation) to call the method and set it equal to a new value.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye = Person.new(\"Kanye\")\u003cbr\u003e\u003cbr\u003ekanye.name\u003cbr\u003e  =\u0026gt; \"Kanye\"\u003cbr\u003e\u003cbr\u003ekanye.name = \"Yeezy\"\u003cbr\u003ekanye.name\u003cbr\u003e  =\u0026gt; \"Yeezy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break it down. We:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eInstantiate a Person instance and name him \"Kanye\".\u003c/li\u003e\n\u003cli\u003eCall our getter method, \u003ccode\u003e#name\u003c/code\u003e to return his name, \u003ccode\u003e\"Kanye\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eCall our setter method \u003ccode\u003e#name=\u003c/code\u003e to change his name to \"Yeezy\"\u003c/li\u003e\n\u003cli\u003eCall our getter method again and see that \u003ccode\u003ekanye\u003c/code\u003e's name is now \u003ccode\u003e\"Yeezy\"\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can also call a setter method like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye.name=(\"Yeezy\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we prefer the first notation.\u003c/p\u003e\n\n\u003ch2\u003eThe Abstraction of Instance Methods\u003c/h2\u003e\n\n\u003cp\u003eIn Ruby, it is possible to simply set an instance variable with the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye.instance_variable_set(:@name, \"Yeezy\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is also possible to simply retrieve an instance variable from an object with the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekanye.instance_variable_get(:@name)\u003cbr\u003e  =\u0026gt; \"Yeezy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eSince this is the case, why do we even use instance setter and getter methods?\u003c/strong\u003e In fact, there are a number of reasons:\u003c/p\u003e\n\n\u003ch3\u003eSyntactic Vinegar vs. Syntactic Sugar\u003c/h3\u003e\n\n\u003cp\u003eThe first reason is a stylistic one but it is important. As object-oriented Rubyists, we care about our program's readability and design. The above method is ugly. It places a verb at the end of the method name. The weird grammar of this method should remind us not to use it.  (This technique of purposely naming methods in a hard to use manner is called syntactic vinegar.)  \u003c/p\u003e\n\n\u003ch3\u003eExposing Literal Variables vs. Abstracting Attributes\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003einstance_variable_set\u003c/code\u003e method depends on a literal, concrete variable, \u003ccode\u003e@name\u003c/code\u003e. It exposes it directly to the person executing our code. This is bad practice because it forces our program to rely directly on the \u003ccode\u003e@name\u003c/code\u003e variable. Why is this so terrible? Let's take a look at the following use case:\u003c/p\u003e\n\n\u003cp\u003eFor example, Kanye (who by the way has commissioned you to write this amazing Person class program) has decided that our program should store both a first and last name. Let's do a quick refactor of our Person class.\u003c/p\u003e\n\n\u003cp\u003eWe'll initialize our \u003ccode\u003ePerson\u003c/code\u003e instances with both a first and last name.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  def initialize(first_name, last_name)\u003cbr\u003e    @first_name = first_name\u003cbr\u003e    @last_name = last_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  #...\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this change, our program does more than just make Kanye happy. It has some added functionality. We could imagine collecting all of our instances of \u003ccode\u003ePerson\u003c/code\u003e and sorting them by last name, for example.\u003c/p\u003e\n\n\u003cp\u003eBUT, now, any other part of our program that was calling \u003ccode\u003einstance_variable_get(:@name)\u003c/code\u003e is broken! Additionally, any part of our program that is calling \u003ccode\u003einstance_variable_set(:@name)\u003c/code\u003e isn't taking advantage of our new first name and last name functionality. Any attempt to change a person's name with \u003ccode\u003einstance_variable_set(:@name)\u003c/code\u003e wouldn't \u003cem\u003ereally\u003c/em\u003e change their name, because it wouldn't touch the \u003ccode\u003e@first_name\u003c/code\u003e and \u003ccode\u003e@last_name\u003c/code\u003evariables set with our \u003ccode\u003einitialize\u003c/code\u003e method. It would just give them a \u003ccode\u003e@name\u003c/code\u003e variable set to a different value than the \u003ccode\u003e@first_name\u003c/code\u003e and \u003ccode\u003e@last_name\u003c/code\u003e variables. That would get confusing, fast.\u003c/p\u003e\n\n\u003cp\u003eAllowing our code to rely on an instance variable directly created a program that \u003cem\u003eis not flexible\u003c/em\u003e. If our program contains multiple occurrences of \u003ccode\u003einstance_variable_get(:@name)\u003c/code\u003e and \u003ccode\u003einstance_variable_set(:@name)\u003c/code\u003e, we would have to hunt down each and every one and change them to accommodate our shift to using both a first and a last name.\u003c/p\u003e\n\n\u003cp\u003eInstead of writing code that depends on instance (or any type of) variables, we write \u003cem\u003emethods\u003c/em\u003e that contain instance variables. This is a form of abstraction, whereas the instance variable \u003ccode\u003e@name\u003c/code\u003e is a literal value. The literal value reference, the variable \u003ccode\u003e@name\u003c/code\u003e, may change as our application grows and we want our application to seamlessly accommodate that change.\u003c/p\u003e\n\n\u003cp\u003eLet's create our abstraction: the \u003ccode\u003e#name=\u003c/code\u003e and \u003ccode\u003e#name\u003c/code\u003e setter and getter instance methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e\u003cbr\u003e  def initialize(first_name, last_name)\u003cbr\u003e    @first_name = first_name\u003cbr\u003e    @last_name = last_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name=(full_name)\u003cbr\u003e    first_name, last_name = full_name.split\u003cbr\u003e    @first_name = first_name\u003cbr\u003e    @last_name = last_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    \"#{@first_name} #{@last_name}\".strip\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNow, even if the content of the \u003ccode\u003e#name\u003c/code\u003e method changes, for example, Kanye changes his mind again and wants to be referred to only as \"Yeezy\" (using our interface this change would be \u003ccode\u003ekanye.name = \"Yeezy\"\u003c/code\u003e), the interface, how our application uses that content, remains constant.\u003c/strong\u003e In other words, we can change the content of these methods according to our needs, without needing to hunt down every appearance of them in our program and change them as well, like we would need to do with our \u003ccode\u003einstance_method_set\u003c/code\u003e and \u003ccode\u003einstance_method_get\u003c/code\u003e usages.\u003c/p\u003e\n\n\u003ch2\u003eComing Up\u003c/h2\u003e\n\n\u003cp\u003eIn the following lab, you'll be defining your own class and setter and getter methods. Then, we'll discuss yet another level of abstraction dealing with these method types.\u003c/p\u003e","frontPage":false},{"exportId":"updating-records","title":"Updating Records","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-updating-records\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a method that will update an existing database record once changes have\nbeen made to that record's equivalent Ruby object.\u003c/li\u003e\n\u003cli\u003eIdentify whether a Ruby object has already been persisted to the database.\u003c/li\u003e\n\u003cli\u003eBuild a method that can \u003cem\u003eeither\u003c/em\u003e find and update \u003cem\u003eor\u003c/em\u003e create a database record.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eUpdating Records\u003c/h2\u003e\n\n\u003cp\u003eIt's hard to imagine a database that would stay totally static and never change.\nFor example, a customer who uses your online marketplace updates their billing\ninformation or makes a new purchase. A user of your social networking site\n\"friends\" another user, creating a new association between them. A hospital\nupdates the medical history of one of its patients. In each of these example\napps that uses a database, we need to be able to update, or change, the records\nthat are stored in that database.\u003c/p\u003e\n\n\u003cp\u003eWhat do we need to do in order to successfully update a record? First, we need\nto find the appropriate record. Then, we make some changes to it, and finally,\nsave it once again.\u003c/p\u003e\n\n\u003cp\u003eIn our Ruby ORM, where attributes of given Ruby objects are stored as an\nindividual row in a database table, we will need to retrieve these attributes,\nreconstitute them into a Ruby object, make changes to that object using Ruby\nmethods, and \u003cem\u003ethen\u003c/em\u003e save those (newly updated) attributes back into the\ndatabase.\u003c/p\u003e\n\n\u003cp\u003eLet's walk through this process together.\u003c/p\u003e\n\n\u003ch2\u003eUpdating a Record in a Ruby ORM\u003c/h2\u003e\n\n\u003cp\u003eFor the purposes of this example, we'll be working with a fictitious music\nmanagement app that allows the user to store their songs. Our app has a \u003ccode\u003eSong\u003c/code\u003e\nclass that maps to a songs database table. Our \u003ccode\u003eSong\u003c/code\u003e class has all the methods\nit needs to create the songs table, insert records into that table and retrieve\nrecords from that table.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003eSong\u003c/code\u003e Class\u003c/h3\u003e\n\n\u003cp\u003eFor this example, we'll assume that our database connection is stored in the \u003ccode\u003eDB[:conn]\u003c/code\u003e constant.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003eattr_accessor :name, :album\u003cbr\u003eattr_reader :id\u003cbr\u003e\u003cbr\u003e  def initialize(id=nil, name, album)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create_table\u003cbr\u003e    sql =  \u0026lt;      CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e        id INTEGER PRIMARY KEY,\u003cbr\u003e        name TEXT,\u003cbr\u003e        album TEXT\u003cbr\u003e        )\u003cbr\u003e        SQL\u003cbr\u003e    DB[:conn].execute(sql)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album)\u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e    @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create(name:, album:)\u003cbr\u003e    song = Song.new(name, album)\u003cbr\u003e    song.save\u003cbr\u003e    song\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    sql = \"SELECT * FROM songs WHERE name = ?\"\u003cbr\u003e    result = DB[:conn].execute(sql, name)[0]\u003cbr\u003e    Song.new(result[0], result[1], result[2])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the \u003ccode\u003eSong\u003c/code\u003e class as defined above, we can create new \u003ccode\u003eSong\u003c/code\u003e instances, save\nthem to the database and retrieve them from the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems = Song.create(name: \"99 Problems\", album: \"The Blueprint\")\u003cbr\u003e\u003cbr\u003eSong.find_by_name(\"99 Problems\")\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we've seen how to create a \u003ccode\u003eSong\u003c/code\u003e instance, save its attributes to the\ndatabase, retrieve those attributes and use them to re-create a \u003ccode\u003eSong\u003c/code\u003e instance,\nlet's move on to updating records and objects.\u003c/p\u003e\n\n\u003ch3\u003eUpdating Songs\u003c/h3\u003e\n\n\u003cp\u003eIn order to update a record, we must first find it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems = Song.find_by_name(\"99 Problems\")\u003cbr\u003e\u003cbr\u003eninety_nine_problems.album\u003cbr\u003e# =\u0026gt; \"The Blueprint\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh, 99 Problems is off The Black Album, as we all know. Let's fix this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems.album = \"The Black Album\"\u003cbr\u003e\u003cbr\u003eninety_nine_problems.album\u003cbr\u003e# =\u0026gt; \"The Black Album\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better. Now we need to save this record back into the database:\u003c/p\u003e\n\n\u003cp\u003eTo do so, we'll need to use an \u003ccode\u003eUPDATE\u003c/code\u003e SQL statement. That statement would look\nsomething like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUPDATE songs\u003cbr\u003eSET album=\"The Black Album\"\u003cbr\u003eWHERE name=\"99 Problems\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's put it all together using our SQLite3-Ruby gem magic. Remember, in this\nexample, we assume our database connection is stored in \u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \"UPDATE songs SET album = ? WHERE name = ?\"\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(sql, ninety_nine_problems.album, ninety_nine_problems.name)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we've updated the album of a given song. What happens when we want to\nupdate some other attribute of a song?\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.create(name: \"Hella\", album: \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's correct the name of the above song from \u003ccode\u003e\"Hella\"\u003c/code\u003e to \u003ccode\u003e\"Hello\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.find_by_name(\"Hella\")\u003cbr\u003e\u003cbr\u003esql = \"UPDATE songs SET name='Hello' WHERE name = ?\"\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(sql, hello.name)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code is almost exactly the same as the code we used to update the album of\nthe first song. The only difference is in the particular attribute we wanted to\nupdate. In the first case, we were updating the album. In this case, we updated\nthe name. Repetitious code has a smell. Let's extract this functionality of\nupdating a record into a method, \u003ccode\u003e#update\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#update\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eHow will we write a method that will allow us to update any attributes of any\nsong? How will we know \u003cem\u003ewhich\u003c/em\u003e attributes have been recently updated and which\nwill remain the same?\u003c/p\u003e\n\n\u003cp\u003eThe best way for us to do this is to simply update \u003cem\u003eall\u003c/em\u003e the attributes whenever\nwe update a record. That way, we will catch any changed attributes, while the\nun-changed ones will simply remain the same.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.find_by_name(\"Hella\")\u003cbr\u003e\u003cbr\u003esql = \"UPDATE songs SET name = 'Hello', album = ? WHERE name = ?\"\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(sql, hello.album, hello.name)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we update \u003cem\u003eboth\u003c/em\u003e the name and album attribute of the song, even though only\nthe name attribute is actually different.\u003c/p\u003e\n\n\u003cp\u003eOkay, now that we've solved this problem, let's build our method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def update\u003cbr\u003e    sql = \"UPDATE songs SET name = ?, album = ? WHERE name = ?\"\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album, self.name)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can update a song with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.create(name: \"Hella\", album: \"25\")\u003cbr\u003ehello.name = \"Hello\"\u003cbr\u003ehello.update\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWait a second, you might be wondering, how can the \u003ccode\u003e#update\u003c/code\u003e method use \u003ccode\u003eWHERE name = #{self.name}\"\u003c/code\u003e if we \u003cem\u003ejust changed the name of the song?\u003c/em\u003e \u003cstrong\u003eWell...it\ncan't!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe above \u003ccode\u003e#update\u003c/code\u003e method \u003cem\u003ewill not work\u003c/em\u003e if we are trying to update the name\nof a song. Think about it: If we change the name of \u003ccode\u003ehello\u003c/code\u003e from \u003ccode\u003e\"Hella\"\u003c/code\u003e to\n\u003ccode\u003e\"Hello\"\u003c/code\u003e with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.name = \"Hello\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen the database table doesn't yet know that we changed the name. We haven't\nsaved that change yet so the database row that stores \u003ccode\u003ehello\u003c/code\u003e's information\nstill has a value of \u003ccode\u003e\"Hella\"\u003c/code\u003e in the \"name\" column. So, after the above line of\ncode is executed, our SQL query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \"UPDATE songs SET name = ?, album = ? WHERE name = ?\"\u003cbr\u003eDB[:conn].execute(sql, self.name, self.album, self.name)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWould be interpreted like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDB[:conn].execute(sql, \"Hello\", \"25\", \"Hello\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd, seeing as our database row still has a value of \u003ccode\u003e\"Hella\"\u003c/code\u003e in the \"name\"\ncolumn, our query would fail to find the correct record and consequently fail to\nupdate it.\u003c/p\u003e\n\n\u003cp\u003eSo using something changeable, like name, to identify the record we want to\nupdate, won't work. If only each individual database record and its analogous\nRuby object had some kind of unique, un-changing identifier...\u003c/p\u003e\n\n\u003cp\u003eThat's where the primary key ID of a database record and the \u003ccode\u003eid\u003c/code\u003e attribute of\nits analogous Ruby object come in.\u003c/p\u003e\n\n\u003ch2\u003eIdentifying Objects and Records Using ID\u003c/h2\u003e\n\n\u003cp\u003eWe need a way to select a Ruby object's analogous table row using some fixed and\nunique attribute. Song records in the database table have a unique \u003ccode\u003eid\u003c/code\u003e, and our\n\u003ccode\u003eSong\u003c/code\u003e instances have an \u003ccode\u003eid\u003c/code\u003e attribute. Recall that we have been setting the\n\u003ccode\u003eid\u003c/code\u003e attribute of individual songs directly after the data regarding that song\ngets inserted into the database table, right at the end of our \u003ccode\u003e#save\u003c/code\u003e method.\nWhy?\u003c/p\u003e\n\n\u003cp\u003eThe unique \u003ccode\u003eid\u003c/code\u003e number of a \u003ccode\u003eSong\u003c/code\u003e instance should \u003cem\u003ecome from the database\u003c/em\u003e.\nWhen a song record gets inserted into the database, that row automatically gets\nassigned a unique ID number. We need to grab that ID number \u003cem\u003efrom the database\nrecord\u003c/em\u003e and assign it to the \u003ccode\u003eSong\u003c/code\u003e instance's \u003ccode\u003eid\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eIf that sounds confusing, check out this diagram:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Untitled%20drawing.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's break it down:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWe create a new instance of the \u003ccode\u003eSong\u003c/code\u003e class. That instance has a \u003ccode\u003ename\u003c/code\u003e and\n\u003ccode\u003ealbum\u003c/code\u003e attribute. But its \u003ccode\u003eid\u003c/code\u003e attribute is \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe name and album of this song instance are used to create a new database\nrecord––a new row in the songs table. That record has an ID of \u003ccode\u003e1\u003c/code\u003e (this would\nappear to be the first song we've ever saved in our database).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe ID of the newly created database record is then taken and assigned to the\n\u003ccode\u003eid\u003c/code\u003e attribute of the original song object.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhat's so great about this? Well, with this pattern, every instance of the\n\u003ccode\u003eSong\u003c/code\u003e class that is ever saved into the database will be assigned a unique \u003ccode\u003eid\u003c/code\u003e\nattribute that we can use to differentiate it from the other \u003ccode\u003eSong\u003c/code\u003e objects we\ncreated and that we can use to find, retrieve and update unique songs.\u003c/p\u003e\n\n\u003cp\u003eNow that we are all convinced that this is the behavior we want to implement,\ntake a closer look at the code that implements it.\u003c/p\u003e\n\n\u003ch3\u003eAssigning Unique IDs on \u003ccode\u003e#save\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAt what point in time should a \u003ccode\u003eSong\u003c/code\u003e instance get assigned a unique \u003ccode\u003eid\u003c/code\u003e? Right\nafter we \u003ccode\u003eINSERT\u003c/code\u003e it into the database. At that point, its equivalent database\nrecord will have a unique ID in the ID column. We want to simply grab that ID\nand use it to assign the \u003ccode\u003eSong\u003c/code\u003e object its \u003ccode\u003eid\u003c/code\u003e value.\u003c/p\u003e\n\n\u003cp\u003eWhen do we \u003ccode\u003eINSERT\u003c/code\u003e a new record into our database? In the \u003ccode\u003e#save\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  sql = \u0026lt;    INSERT INTO songs (name, album)\u003cbr\u003e    VALUES (?, ?)\u003cbr\u003e  SQL\u003cbr\u003e  DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRight after we \u003ccode\u003eexecute\u003c/code\u003e the SQL \u003ccode\u003eINSERT\u003c/code\u003e statement is an appropriate place to\nassign our \u003ccode\u003eSong\u003c/code\u003e object its unique \u003ccode\u003eid\u003c/code\u003e from the database.\u003c/p\u003e\n\n\u003cp\u003eHow do we get the unique ID of the record we just created? We query the database\ntable for the ID of the last inserted row:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT last_insert_rowid() FROM songs\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e When we execute the above SQL statement using our SQLite3-Ruby\ngem, we get back something that may feel unexpected:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")\u003cbr\u003e# =\u0026gt; [[1]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRecall that whenever we execute SQL statements against our database using the\nSQLite3-Ruby gem's \u003ccode\u003e#execute\u003c/code\u003e method, we will get back an array of arrays. Here,\nwe used the \u003ccode\u003elast_insert_rowid()\u003c/code\u003e SQL query to request one thing: the last\ninserted row's ID. Our SQLite3-Ruby gem obliged and gave us an array that\ncontains one array that contains one element––the last inserted row ID. Phew!\u003c/p\u003e\n\n\u003cp\u003eSo, let's put it all together with our new-and-improved \u003ccode\u003e#save\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  sql = \u0026lt;    INSERT INTO songs (name, album)\u003cbr\u003e    VALUES (?, ?)\u003cbr\u003e  SQL\u003cbr\u003e  DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e  @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's see what happens when we create a new song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.create(name: \"Hello\", album: \"25\")\u003cbr\u003e\u003cbr\u003ehello.name\u003cbr\u003e# =\u0026gt; \"Hello\"\u003cbr\u003e\u003cbr\u003ehello.album\u003cbr\u003e# =\u0026gt; \"25\"\u003cbr\u003e\u003cbr\u003ehello.id\u003cbr\u003e# =\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! Now our individual \u003ccode\u003eSong\u003c/code\u003e objects will get assigned a unique \u003ccode\u003eid\u003c/code\u003e\nattribute, as soon as they are saved to the database. That means that we can\nrefactor our \u003ccode\u003e#update\u003c/code\u003e method such that it will only update the correct, unique\nrecord.\u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003eid\u003c/code\u003e to Update Records\u003c/h2\u003e\n\n\u003cp\u003eOur \u003ccode\u003e#update\u003c/code\u003e method should identify the correct record to update based on the\nunique ID that both the song Ruby object and the songs table row share:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def update\u003cbr\u003e    sql = \"UPDATE songs SET name = ?, album = ? WHERE id = ?\"\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album, self.id)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we will never have to worry about accidentally updating the wrong record, or\nbeing unable to find a record once we change its name.\u003c/p\u003e\n\n\u003ch2\u003eRefactoring our \u003ccode\u003e#save\u003c/code\u003e Method to Avoid Duplication\u003c/h2\u003e\n\n\u003cp\u003eOur \u003ccode\u003e#save\u003c/code\u003e method currently looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  sql = \u0026lt;    INSERT INTO songs (name, album)\u003cbr\u003e    VALUES (?, ?)\u003cbr\u003e  SQL\u003cbr\u003e\u003cbr\u003e  DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e  @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method will \u003cem\u003ealways \u003ccode\u003eINSERT\u003c/code\u003e a new row into the database table\u003c/em\u003e. But, what\nhappens if we accidentally call \u003ccode\u003e#save\u003c/code\u003e on an object that has already been\npersisted and has an analogous database row?\u003c/p\u003e\n\n\u003cp\u003eIt would have the effect of creating a new database row with the same attributes\nas an existing row. The only difference would be the \u003ccode\u003eid\u003c/code\u003e number:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003ehello.save\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(\"SELECT * FROM songs WHERE name = 'Hello' AND album = '25'\")\u003cbr\u003e# =\u0026gt; [[1, \"Hello\", \"25\"]]\u003cbr\u003e\u003cbr\u003e# What happens if we save the same song again?\u003cbr\u003e\u003cbr\u003ehello.save\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(\"SELECT * FROM songs WHERE name = 'Hello' AND album = '25'\")\u003cbr\u003e# =\u0026gt; [[1, \"Hello\", \"25\"], [2, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOh no! We have two records in our songs table that contain the same information.\nIt is clear that our \u003ccode\u003e#save\u003c/code\u003e method needs some fail-safes to protect against\nthis kind of thing.\u003c/p\u003e\n\n\u003cp\u003eWe need our \u003ccode\u003e#save\u003c/code\u003e method to check to see if the object it is being called on\nhas already been persisted. If so, \u003cem\u003edon't \u003ccode\u003eINSERT\u003c/code\u003e a new row into the database\u003c/em\u003e,\nsimply \u003cem\u003eupdate\u003c/em\u003e an existing one. Now that we have our handy \u003ccode\u003e#update\u003c/code\u003e method\nready to go, this should be easy.\u003c/p\u003e\n\n\u003cp\u003eHow do we know if an object has been persisted? If it has an \u003ccode\u003eid\u003c/code\u003e that is not\n\u003ccode\u003enil\u003c/code\u003e. Remember that an object's \u003ccode\u003eid\u003c/code\u003e attribute gets set only once it has been\n\u003ccode\u003eINSERT\u003c/code\u003eed into the database.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at our new \u003ccode\u003e#save\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  if self.id\u003cbr\u003e    self.update\u003cbr\u003e  else\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album)\u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e    @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now our \u003ccode\u003e#save\u003c/code\u003e method will never create duplicate records!\u003c/p\u003e","frontPage":false},{"exportId":"active-record-conclusion","title":"Active Record Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe have just explored the world of ORMs: \u003cem\u003eObject Relation Mappers\u003c/em\u003e. When\ncreating applications with Ruby on Rails, we use an ORM called \u003cem\u003eActive Record\u003c/em\u003e,\nintegrated into our projects as a Ruby gem. Active Record creates a link between\nRuby and our database, which means it can take care of translating queries we\nwrite using Ruby into commands the database understands. It makes our work\neasier and faster.\u003c/p\u003e\n\n\u003cp\u003eOver the past several lessons, we covered the basic mechanics of Active Record,\nincluding connecting to a database, creating tables and finding/saving data.\nSince it's always important to know what's going on under the surface of the\ntools we use, we also explored how Active Record abstracts the methods we\nemploy. Of course, we then practiced employing those Active Record methods. We\nalso learned that instead of making individual, manual changes to databases, we\ncan use Active Record migrations, which apply database changes as an organizated\nstructure. Migrations serve as a sort of version control system for our\ndatabase, so we covered how they work and how to write our own. Ultimately, we\nsaw how we can create CRUD actions—create, read, update, delete—for our\napplications with Active Record, an essential skill we'll be using as we create\nweb applications. We also encountered Rake, a tool that helps us create and\nautomate tasks in Ruby.\u003c/p\u003e\n\n\u003cp\u003eWe have Ruby knowledge, we have database knowledge and now we know how to use\nthe ORM layer to communicate between the two. We're ready to move on and learn\nhow to use these blocks to build something powerful.\u003c/p\u003e","frontPage":false},{"exportId":"complex-joins","title":"Complex Joins","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-complex-joins\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-complex-joins/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-complex-joins\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-complex-joins/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eKnow what an outer join is\u003c/li\u003e\n\u003cli\u003eDistinguish an inner join from an outer join\u003c/li\u003e\n\u003cli\u003eIdentify different types of outer joins: left, right, and full\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eWhy is this important?\u003c/h2\u003e\n\n\u003ch4\u003eGrade Example (Inner Join)\u003c/h4\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eImagine you want to get a list of all the students with an \"A\" in the class. We\nonly want those students in the class with top grades, ignoring the other\nstudents in the class.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003eField Trip Example (Complex/Outer Join)\u003c/h4\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNow imagine another scenario where the class is going on a field trip. The cost\nof the field trip is $10 per student. As a teacher, we want to keep track of\nwhich students have paid AND which students still need to pay.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eEverything we've done up until this point looks like the Grade Example. This is\nan inner join. We only want the students with a certain grade. You can imagine a\nVenn Diagram where one circle is \"Grades\" and another circle is \"Students\". We\nonly want the overlapping (or \"inner\") parts of the two circles.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_Venn_InnerJoin.png\" alt=\"inner join\"\u003e\u003c/p\u003e\n\n\u003cp\u003eComplex joins are useful and important when it comes to situations like the\nField Trip Example. Sticking with the Venn Diagrams, we can think about\n\"Students\" as one circle and \"Payments\" as another circle. A complex join (or\nouter join) will return the overlap between the two circles AND the rest (or the\n\"outer\" part) of the \"Students\" circle as well.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_V_LeftOuterJoin_Blank.png\" alt=\"left outer join\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe'll elaborate more on visualizing joins in the Venn Diagrams section below.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eA complex join in SQL is also referred to as an outer join. It is not\nnecessarily more complex than an inner join. It is referred to as \"complex\"\nsimply because SQL is conducting an inner join in addition to gathering a little\nmore information from one or more tables. What is that extra bit of information?\nWe will discover this by looking at the difference between outer and inner\njoins.\u003c/p\u003e\n\n\u003ch2\u003eDifference between Inner Join and Outer Join\u003c/h2\u003e\n\n\u003ch3\u003eInner Join\u003c/h3\u003e\n\n\u003cp\u003eAs you may recall, an inner join is going to return only the rows from the\ndatabase that match the query. For example, imagine we have the following\ntables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTEACHERS TABLE             STUDENTS TABLE\u003cbr\u003eid                 student_id   teacher_id\u003cbr\u003e---------------            ------------------------\u003cbr\u003e1                          1            NULL\u003cbr\u003e2                          2            1\u003cbr\u003e3                          3            NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's look at an inner join.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT *\u003cbr\u003eFROM Teachers\u003cbr\u003eINNER JOIN Students\u003cbr\u003eON Teachers.id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis query returns only the teacher with the \u003ccode\u003eid = 1\u003c/code\u003e because student 2 is in\nthe first teacher's class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid  |  student_id |  teacher_id\u003cbr\u003e--------------------------\u003cbr\u003e1           |  2  |  1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Since we're \u003cem\u003ejoining\u003c/em\u003e tables, running this example SQL command will return a result with both an \u003cem\u003eid\u003c/em\u003e and a \u003cem\u003eteacher\u003c/em\u003eid_, even though they are the same.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eOuter Join\u003c/h3\u003e\n\n\u003cp\u003eOuter Joins, on the other hand, will return all of the matching rows AND all of\nthe additional rows from the specified table. Which table/additional rows are\ndetermined by the type of outer join. There are three types of outer joins: Left\nOuter Join, Right Outer Join, and Full Outer Join.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: SQLite, the database management system that we've been using to\nexplore SQL, does not implement the full SQL standard. Specifically, SQLite does\nnot implement RIGHT OUTER JOIN or FULL OUTER JOIN. However, the concepts\nunderlying these joins are still important to understand (and other databases,\nlike \u003ca href=\"http://www.postgresql.org/about/\"\u003ePostgreSQL\u003c/a\u003e, do implement them), so\nyou'll need to know about these JOINs even if you won't be using them right\naway.\u003c/p\u003e\n\n\u003ch4\u003eLeft Outer Join\u003c/h4\u003e\n\n\u003cp\u003eThis is the most common outer join and the one you'll use most often. This\nreturns the normal inner join result and also \u003cstrong\u003e\u003cem\u003ereturns all of the rows from\nthe left-most (i.e. first mentioned) table\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT *\u003cbr\u003eFROM Teachers\u003cbr\u003eLEFT OUTER JOIN Students\u003cbr\u003eON Teachers.teacher_id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eteacher_id  |  student_id\u003cbr\u003e--------------------------\u003cbr\u003e1           |  2\u003cbr\u003e2           |  NULL\u003cbr\u003e3           |  NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that every row from the teacher's table is returned whether there is a\ncorresponding student or not.\u003c/p\u003e\n\n\u003ch4\u003eRight Outer Join\u003c/h4\u003e\n\n\u003cp\u003eAs you might imagine, this is the same as the Left Outer Join with the minor\ndifference being that it \u003cstrong\u003e\u003cem\u003ereturns all of the rows from the right-most (i.e.\nlast-mentioned) table\u003c/em\u003e\u003c/strong\u003e. Sticking with our example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT *\u003cbr\u003eFROM Teachers\u003cbr\u003eRIGHT OUTER JOIN Students\u003cbr\u003eON Teachers.teacher_id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eteacher_id     |  student_id\u003cbr\u003e--------------------------\u003cbr\u003eNULL           |  1\u003cbr\u003e1              |  2\u003cbr\u003eNULL           |  3\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eFull Outer Join\u003c/h3\u003e\n\n\u003cp\u003eThe full \u003cstrong\u003e\u003cem\u003ereturns all of the rows from all the tables\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT *\u003cbr\u003eFROM Teachers\u003cbr\u003eFULL OUTER JOIN Students\u003cbr\u003eON Teachers.teacher_id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eteacher_id     |  student_id\u003cbr\u003e--------------------------\u003cbr\u003eNULL           |  1\u003cbr\u003e1              |  2\u003cbr\u003eNULL           |  3\u003cbr\u003e2              |  NULL\u003cbr\u003e3              |  NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eVenn Diagrams\u003c/h2\u003e\n\n\u003cp\u003eIt is helpful to think about our queries as a Venn Diagram. Each table can be\nrepresented by a circle.\u003c/p\u003e\n\n\u003cp\u003eAn Inner Join just returns the overlapping areas of the Venn Diagram.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147__InnerJoin_Blank.png\" alt=\"inner join diagram\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA Left Outer Join returns all the the data from the left circle, and it includes\nthe overlapping information from the right circle.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_V_LeftOuterJoin_Blank.png\" alt=\"left outer join diagram\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA Right Outer Join returns all the the data from the right circle, and it\nincludes the overlapping information from the left circle.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_V_RightOuterJoin_Blank.png\" alt=\"right outer join diagram\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA Full Outer Join returns all the data from all the tables, including the\noverlapping data.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/sql-table-relations/Image_147_V_FullOuterJoin_Blank.png\" alt=\"full outer join diagram\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eExamples\u003c/h2\u003e\n\n\u003ch3\u003eCreate Our Students Table\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE students (\u003cbr\u003e    id INTEGER PRIMARY KEY,\u003cbr\u003e    name TEXT,\u003cbr\u003e    teacher_id INTEGER);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInsert Students\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Dave\", 1);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Jessie\", 1);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Bob\", 1);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Sara\", 2);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"George\",  2);\u003cbr\u003eINSERT INTO students (name, teacher_id)\u003cbr\u003e    VALUES (\"Alexis\",  NULL);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eStudents Schema\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eid               name        teacher_id\u003cbr\u003e---------------  ----------  ----------\u003cbr\u003e1                Dave           1\u003cbr\u003e2                Jessie         1\u003cbr\u003e3                Bob            1\u003cbr\u003e4                Sara           2\u003cbr\u003e5                George         2\u003cbr\u003e6                Alexis\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCreate Our Teachers Table\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE teachers (\u003cbr\u003e    id INTEGER PRIMARY KEY,\u003cbr\u003e    name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInsert Into Teachers\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO teachers (name)\u003cbr\u003e    VALUES (\"Joe\");\u003cbr\u003eINSERT INTO teachers (name)\u003cbr\u003e    VALUES (\"Steven\");\u003cbr\u003eINSERT INTO teachers (name)\u003cbr\u003e    VALUES (\"Jeff\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eTeachers Schema\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eid               name\u003cbr\u003e---------------  ---------\u003cbr\u003e1                Joe\u003cbr\u003e2                Steven\u003cbr\u003e3                Jeff\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eLeft Outer Join\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM Teachers\u003cbr\u003e   LEFT OUTER JOIN Students on Teachers.id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis query will return all of the records in the left table (teachers)\nregardless if any of those records have a match in the right table (students).\nIt will also return any matching records from the right table. So for our\nexample, it first returns all of the teachers followed by any student that has a\n\u003ccode\u003eteacher_id\u003c/code\u003e. You can see that Alexis was not returned because her \u003ccode\u003eteacher_id\u003c/code\u003e\ncolumn is \u003ccode\u003eNULL\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eResults\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eid  teacher_name    id      name     teacher_id\u003cbr\u003e--- ------------   ----    ------    -----------\u003cbr\u003e1     Joe          3       Bob          1\u003cbr\u003e1     Joe          1       Dave         1\u003cbr\u003e1     Joe          2       Jessie       1\u003cbr\u003e2     Steven       5       George       2\u003cbr\u003e2     Steven       4       Sara         2\u003cbr\u003e3     Jeff         NULL    NULL         NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eRight Outer Join\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * from Teachers\u003cbr\u003e   RIGHT OUTER JOIN Students on Teachers.id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis query will return all of the records in the right table (students)\nregardless if any of those records have a match in the left table (teachers). It\nwill also return any matching records from the left table. You can see that all\nof the students were returned, but this time Jeff was left out.\u003c/p\u003e\n\n\u003ch3\u003eResults\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eid    teacher_name   id      name     teacher_id\u003cbr\u003e---   ------------  ----    ------    -----------\u003cbr\u003e1       Joe         3       Bob          1\u003cbr\u003e1       Joe         1       Dave         1\u003cbr\u003e1       Joe         2       Jessie       1\u003cbr\u003e2       Steven      5       George       2\u003cbr\u003e2       Steven      4       Sara         2\u003cbr\u003eNULL    NULL        6       Alexis       NULL\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eFull Join\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * from Teachers\u003cbr\u003e   FULL OUTER JOIN Students on Teachers.id = Students.teacher_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis Join can be referred to as a FULL OUTER JOIN or a FULL JOIN. This query will return all of the records from both tables, joining records from the left table (\u003ccode\u003eTeachers\u003c/code\u003e) that match records from the right table (\u003ccode\u003eStudents\u003c/code\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid    teacher_name   id      name     teacher_id\u003cbr\u003e---   ------------  ----    ------    -----------\u003cbr\u003e1       Joe          3       Bob          1\u003cbr\u003e1       Joe          1       Dave         1\u003cbr\u003e1       Joe          2       Jessie       1\u003cbr\u003e2       Steven       5       George       2\u003cbr\u003e2       Steven       4       Sara         2\u003cbr\u003e3       Jeff         NULL    NULL         NULL\u003cbr\u003eNULL    NULL         6       Alexis       NULL\n\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"self-basics","title":"Self Basics","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the concept of self-awareness in object-oriented programming. \u003c/li\u003e\n\u003cli\u003eUnderstand how the \u003ccode\u003eself\u003c/code\u003e keyword works.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eself\u003c/code\u003e within an instance method to refer to the class instance on which that method is being called. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen we create a class, each new instance of a class is considered to be an object. An object is a bundle of code that contains both characteristics and behaviors. \u003c/p\u003e\n\n\u003cp\u003eFor example, if we create a \u003ccode\u003eDog\u003c/code\u003e class like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def bark\u003cbr\u003e    \"Woof!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could create a new instance of \u003ccode\u003eDog\u003c/code\u003e like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido = Dog.new(\"Fido\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could then access Fido's name like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido.name\u003cbr\u003e  =\u0026gt; \"Fido\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eor tell Fido to bark like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido.bark\u003cbr\u003e  =\u0026gt; \"Woof!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFido, the individual dog that we created, has a number of methods we can call on it that will reveal its attributes, like Fido's name, and enact certain behaviors, like barking. \u003c/p\u003e\n\n\u003cp\u003eIf an object, like \u003ccode\u003efido\u003c/code\u003e, is a neat package of attributes and behaviors, does an object know about itself? In other words, does each individual object we create have the ability to enact behaviors \u003cem\u003eon itself\u003c/em\u003e, instead of in isolation, like our \u003ccode\u003e#bark\u003c/code\u003e method?\u003c/p\u003e\n\n\u003cp\u003eIn fact, every object is aware of itself and we can define methods in which we tell objects to operate on themselves. We do so using the \u003ccode\u003eself\u003c/code\u003e keyword, inside the body of an instance method, to refer to the very same object the method is being called on. \u003c/p\u003e\n\n\u003cp\u003eThis is where the analogy of our objects as being alive really resonates. Every object is, quite literally, self aware. \u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003eself\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eTry this:\u003c/p\u003e\n\n\u003cp\u003eCopy and paste the following code into IRB:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def showing_self\u003cbr\u003e    puts self\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have our \u003ccode\u003eDog\u003c/code\u003e class ready to go, copy and paste the following method invocations into IRB:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido = Dog.new\u003cbr\u003efido.showing_self\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe call to \u003ccode\u003e#showing_self\u003c/code\u003e should output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow does this work? Inside the \u003ccode\u003e#showing_self\u003c/code\u003e method we use the \u003ccode\u003eself\u003c/code\u003e keyword. The \u003ccode\u003eself\u003c/code\u003e keyword refers to the instance, or object, that the \u003ccode\u003e#showing_self\u003c/code\u003e method is being called on. \u003c/p\u003e\n\n\u003cp\u003eSo, when we call \u003ccode\u003e#showing_self\u003c/code\u003e on \u003ccode\u003efido\u003c/code\u003e, the method will \u003ccode\u003eputs\u003c/code\u003e out to the terminal the \u003ccode\u003eDog\u003c/code\u003e instance that is \u003ccode\u003efido\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch2\u003eOperating on \u003ccode\u003eself\u003c/code\u003e in an Instance Method\u003c/h2\u003e\n\n\u003cp\u003eLet's say that Fido here is getting adopted. Fido's new owner is Sophie. Let's write an \u003ccode\u003eattr_accessor\u003c/code\u003e on our \u003ccode\u003eDog\u003c/code\u003e for the owner attribute. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :owner\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can set Fido's \u003ccode\u003eowner\u003c/code\u003e attribute equal to the string of \u003ccode\u003e\"Sophie\"\u003c/code\u003e. The name of his new owner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efido.owner = \"Sophie\"\u003cbr\u003e\u003cbr\u003efido.owner\u003cbr\u003e  =\u0026gt; \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, Fido now knows the name of his owner. Let's think about the situation in which \u003ccode\u003efido\u003c/code\u003e gets a new owner. This would occur at the moment in which \u003ccode\u003efido\u003c/code\u003e is adopted. \u003c/p\u003e\n\n\u003cp\u003eTo represent this with code, we could write an \u003ccode\u003e#adopted\u003c/code\u003e method like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef adopted(dog, owner_name)\u003cbr\u003e  dog.owner = owner_name\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have a method that takes in two arguments, an instance of the \u003ccode\u003eDog\u003c/code\u003e class and an owner's name. We could call our method like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eadopted(fido, \"Sophie\")\u003cbr\u003e\u003cbr\u003e# now we can ask Fido who his owner is:\u003cbr\u003e\u003cbr\u003efido.owner\u003cbr\u003e  =\u0026gt; \"Sophie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, the beauty of object-oriented programming is that we can encapsulate, or wrap up, attributes and behaviors into one object. Instead of writing a method that is not associated to any particular object and that takes in certain objects as arguments, we can simply teach our \u003ccode\u003eDog\u003c/code\u003e instances how to get adopted.\u003c/p\u003e\n\n\u003cp\u003eLet's refactor our code above into an instance method on the \u003ccode\u003eDog\u003c/code\u003e class. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :owner\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def bark\u003cbr\u003e    \"Woof!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def get_adopted(owner_name)\u003cbr\u003e    self.owner = owner_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we use the \u003ccode\u003eself\u003c/code\u003e keyword inside of the \u003ccode\u003e#get_adopted\u003c/code\u003e instance method to refer to whichever dog this method is being called on. We set that dog's \u003ccode\u003eowner\u003c/code\u003e property equal to the new owner's name by calling the \u003ccode\u003e#owner=\u003c/code\u003e method on \u003ccode\u003eself\u003c/code\u003e inside the method body. \u003c/p\u003e\n\n\u003cp\u003eThink about it: if \u003ccode\u003eself\u003c/code\u003e refers to the object on which the method is being called, and if that object is an instance of the \u003ccode\u003eDog\u003c/code\u003e class, then we can call any of our other instance methods on \u003ccode\u003eself\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/\"\u003eMetaprogramming in Ruby\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"conditionals","title":"Conditionals","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"conditional-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/conditional-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/conditional-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/conditional-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine control flow for when a Ruby program is executed.\u003c/li\u003e\n\u003cli\u003eImplement control flow in different ways.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, and \u003ccode\u003eelsif\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003cp\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dcNgPOZCaBk\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=dcNgPOZCaBk\"\u003eRuby Conditionals\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eDefine Control Flow\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA control flow construct is a language feature which disrupts the normal\nprogression to the next statement and conditionally or unconditionally\nbranches to another location in source code.\n— \u003ca href=\"http://blog.rubybestpractices.com/posts/rklemme/004-Control_Flow.html\"\u003eRobert Klemme\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn other words, control flow lets you tell your program what code to execute\nconditionally. As humans, we actually enact flow control \u003cem\u003eevery day\u003c/em\u003e. For\ninstance, if you are hungry, you will go and get a snack. Otherwise, you'll stay\nput and continue to read this awesome readme.\u003c/p\u003e\n\n\u003cp\u003eControl flow is an important part of Ruby programming and web development. In\nthe context of a web application, for example, you can easily think of content\nor functionality on a website you've visited that is only available to a user\n\u003cem\u003eif\u003c/em\u003e that user is logged in.\u003c/p\u003e\n\n\u003ch2\u003eImplementing Control Flow\u003c/h2\u003e\n\n\u003cp\u003eThere are several ways to tell your program to conditionally execute certain\ncode, the basic forms of which are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, and \u003ccode\u003eelsif\u003c/code\u003e statements,\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecase\u003c/code\u003e statements,\u003c/li\u003e\n\u003cli\u003eloops.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this reading, we're going to discuss the first group of these \"conditional\"\nstatements: \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, and \u003ccode\u003eelsif\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUse IRB, copying the provided code snippets, to follow along in this lesson.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eif\u003c/code\u003e Statements\u003c/h3\u003e\n\n\u003cp\u003eOne of the most common ways to enact control flow is the \u003ccode\u003eif\u003c/code\u003e statement.\nWhatever block of code that follows the \u003ccode\u003eif\u003c/code\u003e statement will get evaluated\n— i.e. read and enacted by the computer. If this evaluation of the \u003ccode\u003eif\u003c/code\u003e\nstatement results in \u003ccode\u003etrue\u003c/code\u003e, then the code through to the associated \u003ccode\u003eend\u003c/code\u003e\nstatement will run.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a few examples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif 5 \u0026gt; 2\u003cbr\u003e  print \"5 is greater than 2\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe code above will print \"5 is greater than 2\" because the \u003ccode\u003eif\u003c/code\u003e statement\nevaluates as \u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMeanwhile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif 2 \u0026gt; 5\u003cbr\u003e  puts \"2 is greater than 5\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe code above will not print anything because the \u003ccode\u003eif\u003c/code\u003e statement evaluates as \u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo what if we want our program to print something \u003cem\u003eelse\u003c/em\u003e when the \u003ccode\u003eif\u003c/code\u003e condition\nevaluates as \u003ccode\u003efalse\u003c/code\u003e?\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003eelse\u003c/code\u003e Keyword\u003c/h3\u003e\n\n\u003cp\u003eTo accomplish this, we can follow an \u003ccode\u003eif\u003c/code\u003e statement with an \u003ccode\u003eelse\u003c/code\u003e statement. Take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif false\u003cbr\u003e   puts \"This will never get printed because the above\u003cbr\u003e     statement evaluates to false.\"\u003cbr\u003eelse\u003cbr\u003e   puts \"This will get printed!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn \u003ccode\u003eelse\u003c/code\u003e statement sets a \"default\" condition for when your \u003ccode\u003eif\u003c/code\u003e statement's\nconditional evaluates as \u003ccode\u003efalse\u003c/code\u003e. Every condition that doesn't evaluate as\n\u003ccode\u003etrue\u003c/code\u003e will instead pass through the \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\n\u003ch4\u003eFurther Examples\u003c/h4\u003e\n\n\u003cp\u003eSo far, we've seen \u003ccode\u003eif\u003c/code\u003e statements that rely on the explicit use of the \u003ccode\u003etrue\u003c/code\u003e\nand \u003ccode\u003efalse\u003c/code\u003e booleans. Let's look at some examples that require a little more\nthought.\u003c/p\u003e\n\n\u003ch5\u003eExample 1\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003eif 6 + 3 == 9\u003cbr\u003e  puts \"Giraffes have no vocal cords.\"\u003cbr\u003eend\u003cbr\u003e#=\u0026gt; \"Giraffes have no vocal cords.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe code above will print \u003ccode\u003eGiraffes have no vocal cords.\u003c/code\u003e Since \u003ccode\u003e6 + 3\u003c/code\u003e equals\n\u003ccode\u003e9\u003c/code\u003e (i.e. \u003ccode\u003e9\u003c/code\u003e is equal to \u003ccode\u003e9\u003c/code\u003e), the \u003ccode\u003eif\u003c/code\u003e statement's conditional evaluates as\n\u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e \u003cem\u003eRemember that the comparative operator\u003c/em\u003e \u003ccode\u003e==\u003c/code\u003e \u003cem\u003e(\"double-equals\") is\nused to check equality. This is distinct from the assignment operator\u003c/em\u003e\n\u003ccode\u003e=\u003c/code\u003e \u003cem\u003e(\"single-equals\"), which is used to set the value of a variable.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch5\u003eExample 2\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003eif 6 + 3 \u0026lt; 5\u003cbr\u003e  puts \"The hummingbird is the only animal that can fly backwards\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe code above will not print anything because \u003ccode\u003e6 + 3\u003c/code\u003e, which is equivalent to\n\u003ccode\u003e9\u003c/code\u003e, is \u003cem\u003enot\u003c/em\u003e less than \u003ccode\u003e5\u003c/code\u003e, making the \u003ccode\u003eif\u003c/code\u003e statement's conditional evaluate\nas \u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch5\u003eExample 3\u003c/h5\u003e\n\u003cpre\u003e\u003ccode\u003edog = \"satisfied\"\u003cbr\u003e\u003cbr\u003eif dog == \"hungry\"\u003cbr\u003e  puts \"Refilling food bowl.\"\u003cbr\u003eelse\u003cbr\u003e  puts \"Reading newspaper.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e#=\u0026gt; \"Reading newspaper.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\n\u003ccode\u003eelsif\u003c/code\u003e Statements\u003c/h3\u003e\n\n\u003cp\u003eSometimes, we want to control the flow of our program based on more than one\ncondition. For example, if I am hungry, then I will get a snack. If I am\nthirsty, then I will get a drink of water. Otherwise, I will stay here and\ncontinue learning more about control flow.\u003c/p\u003e\n\n\u003cp\u003eWe can add additional layers of complexity to our \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e statements by\nusing the \u003ccode\u003eelsif\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003cp\u003eLet's add an \u003ccode\u003eelsif\u003c/code\u003e statement to Example 3 from above:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog = \"thirsty\"\u003cbr\u003e\u003cbr\u003eif dog == \"hungry\"\u003cbr\u003e  puts \"Refilling food bowl.\"\u003cbr\u003eelsif dog == \"thirsty\"\u003cbr\u003e  puts \"Refilling water bowl.\"\u003cbr\u003eelse\u003cbr\u003e  puts \"Reading newspaper.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e#=\u0026gt; \"Refilling water bowl.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can cascade as many \u003ccode\u003eelsif\u003c/code\u003e statements as we wish, however \u003ccode\u003eelsif\u003c/code\u003e statements\ncan only be used following an \u003ccode\u003eif\u003c/code\u003e statement, and must precede the associated\n\u003ccode\u003eelse\u003c/code\u003e statement (if used).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog = \"cuddly\"\u003cbr\u003e\u003cbr\u003eif dog == \"hungry\"\u003cbr\u003e  puts \"Refilling food bowl.\"\u003cbr\u003eelsif dog == \"thirsty\"\u003cbr\u003e  puts \"Refilling water bowl.\"\u003cbr\u003eelsif dog == \"playful\"\u003cbr\u003e  puts \"Playing tug-of-war.\"\u003cbr\u003eelsif dog == \"cuddly\"\u003cbr\u003e  puts \"Snuggling.\"\u003cbr\u003eelse\u003cbr\u003e  puts \"Reading newspaper.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e#=\u0026gt; \"Snuggling.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we learned how to use control flow to execute code\nconditionally. Specifically, we learned:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003ehow to use an \u003ccode\u003eif\u003c/code\u003e statement to execute code only if a certain condition is\ntrue\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ewe can \u003cem\u003eoptionally\u003c/em\u003e use one or more \u003ccode\u003eelsif\u003c/code\u003e statements if we need to\ncheck multiple conditions and execute different code for each of them\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ewe can \u003cem\u003eoptionally\u003c/em\u003e use an \u003ccode\u003eelse\u003c/code\u003e statement if we want to specify\n\"default\" code that should execute if the condition(s) we are checking\nall evaluate as false\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ethe order of the statements must be: \u003ccode\u003eif\u003c/code\u003e first, followed by any \u003ccode\u003eelsif\u003c/code\u003es,\nand \u003ccode\u003eelse\u003c/code\u003e, if used, last\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThat's all for now — we'll discuss \u003ccode\u003ecase\u003c/code\u003e statements and looping in upcoming\nlessons.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-metaprogramming-in-ruby","title":"Introduction to Metaprogramming in Ruby","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eRuby has impressive \u003cem\u003emetaprogramming\u003c/em\u003e capabilities. A traditional program is\nmainly code that manipulates a data structure and produces output, but\nmetaprogramming allows us to essentially write code that writes code.\nMetaprogramming with Ruby, one can do in a few minutes what other languages may\ntake hours to do. By cleverly planning your code and applying the techniques\nmentioned here, you’ll be able to write code that is DRYer, lighter, more\nintuitive and more scalable.\u003c/p\u003e\n\n\u003cp\u003eIn this section we'll be discussing and working through some metaprogramming\nconcepts such as:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMass assignment\u003c/li\u003e\n\u003cli\u003eKeyword arguments\u003c/li\u003e\n\u003cli\u003eCreating custom errors and using them\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRuby's metaprogramming features offer a lot of functionality. You could, in\ntheory, write everything from scratch yourself, but doing that is very\ninefficient. In this section of lessons and labs, we'll reveal how\nmetaprogramming makes sense, and is very needed in many situations.\u003c/p\u003e","frontPage":false},{"exportId":"sqlite-data-types","title":"SQLite Data Types","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-sqlite-data-types\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-sqlite-data-types/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-sqlite-data-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-sqlite-data-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover the importance of specifying datatypes, and the\ndifferent types of data you can store in a SQLite database.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe data typing and how it allows for operations to be performed with\npredictable results.\u003c/li\u003e\n\u003cli\u003eList four different types of data you can store in a SQLite database.\u003c/li\u003e\n\u003cli\u003eDefine three specific SQLite database types: Text, Integer, and Real.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Do Data Types Matter?\u003c/h2\u003e\n\n\u003cp\u003eWe've learned that when we create a table, we need to include a name for it as\nwell as define at least one column. We define columns in a \u003ccode\u003eCREATE\u003c/code\u003e statement by\nincluding a name and a datatype to let SQLite know the kind of data we will be\nstoring there. The practice of explicitly declaring a type is known as \"typing.\"\u003c/p\u003e\n\n\u003cp\u003eWhy is it important that we use typing in our database? Simply put, typing\nallows us to exercise some level of control over our data. Typing not only\ninforms our database of the kind of data we plan to store in a column but it\nalso restricts it. For instance, look at the age column below in our cats table.\nWhat do we mean by age? What if we had this:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003ename\u003c/th\u003e\n    \u003cth\u003ebreed\u003c/th\u003e\n    \u003cth\u003eage\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eMaru\u003c/td\u003e\n    \u003ctd\u003eScottish Fold\u003c/td\u003e\n    \u003ctd\u003e3\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eHannah\u003c/td\u003e\n    \u003ctd\u003eTabby\u003c/td\u003e\n    \u003ctd\u003etwo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eLil' Bub\u003c/td\u003e\n    \u003ctd\u003eAmerican Shorthair\u003c/td\u003e\n    \u003ctd\u003e5.5\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eDid we intend age to be represented as a whole number, a word, or a decimal? If\nwe asked you to add up the ages of all the cats you could simply convert the\n'two' to 2 in your head, but your database can't do that. It doesn't have that\nability because the logic involved in converting a word into a number would be\ndense and inefficient. What about different languages? What about different\nspellings? Capitalization, typos, or different hyphenation conventions? These\nare just some reasons this might start to get crazy. In other words, because\ndatabases are designed to store large amounts of data, they are very concerned\nwith storing, accessing, and acting upon that data as efficiently and normally\nas possible.\u003c/p\u003e\n\n\u003cp\u003eTyping gives us the ability to perform all kinds of operations with predictable\nresults. For instance, the ability to perform Math operations like \u003ccode\u003eSUM\u003c/code\u003e —\ni.e. summing integers — doesn't just depend on everything being an integer\nof some sort but would also expect it. If you tried, for example,  to \u003ccode\u003eSUM\u003c/code\u003e all\nof the cats in the above table, SQLite would actually attempt to convert, or\ncast, their type to something it can \u003ccode\u003eSUM\u003c/code\u003e. It would try to convert anything it\ncan to an \u003ccode\u003eINTEGER\u003c/code\u003e and ignore alpha characters. This can lead to real problems.\nWithout typing, our data might get complicated and messy, and it would be\ndifficult to ask the database questions about large sets of data.\u003c/p\u003e\n\n\u003cp\u003eWe're going to adhere strictly to only storing data that fits with the datatype\nwe have given to a particular column.\u003c/p\u003e\n\n\u003ch2\u003eDatatypes\u003c/h2\u003e\n\n\u003cp\u003eDifferent database systems also have different datatypes available, which are\nimportant and useful to know whenever you are dealing with those systems. SQLite\nis a good starting point to learn about datatypes because it only has four basic\ncategories of datatypes; they are:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTEXT\u003cbr\u003eINTEGER\u003cbr\u003eREAL\u003cbr\u003eBLOB\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's explore each category in more detail.\u003c/p\u003e\n\n\u003ch3\u003eTEXT\u003c/h3\u003e\n\n\u003cp\u003eAny alphanumeric characters which we want to represent as plain text. The body\nof this paragraph is text. Your name is text. Your email address is a piece of\ntext. Your height, weight, and age, however, are probably not.\u003c/p\u003e\n\n\u003ch3\u003eINTEGER\u003c/h3\u003e\n\n\u003cp\u003eAnything we want to represent as a whole number. If it's a number and contains\nno letter or special characters or decimal points then we should store it as an\ninteger. If we use it to perform math or create a comparison between two\ndifferent rows in our database, then we definitely want to store it as an\ninteger. If it's just a number, it's generally not a bad idea to store it as an\ninteger. You might never add two house address numbers together, but you might\nwant to sort them numerically. For example, in the preceding case you might want\nto get the biggest number and not the longest piece of text.\u003c/p\u003e\n\n\u003ch3\u003eREAL\u003c/h3\u003e\n\n\u003cp\u003eAnything that's a plain old decimal like 1.3 or 2.25. SQLite will store decimals\nup to 15 characters long. You can store 1.2345678912345 or 1234.5678912345, but\n1.23456789123456789 would only store 1.2345678912345. In other database systems\nthis is called 'double precision.'\u003c/p\u003e\n\n\u003cp\u003eWith these three types in hand, we are going to be able to work our way through\nthe next several topics, and this whole typing concept is going to quickly\nbecome second nature for you.\u003c/p\u003e\n\n\u003ch3\u003eBLOB\u003c/h3\u003e\n\n\u003cp\u003eYou may encounter the \u003ccode\u003eBLOB\u003c/code\u003e datatype while you're Googling or doing any further\nreading on SQLite. For now, we will not use \u003ccode\u003eBLOB\u003c/code\u003e. It is generally used for\nholding binary data.\u003c/p\u003e\n\n\u003ch2\u003eBonus: Note on SQLite\u003c/h2\u003e\n\n\u003cp\u003eTo increase its compatibility with other database engines (e.g. mySQL or\nPostgreSQL), SQLite allows the programmer to use other common datatypes outside\nof the four mentioned above. This is why we are referring to \u003ccode\u003eTEXT INTEGER REAL\nBLOB\u003c/code\u003e as datatype \"categories\". All other common datatypes are lumped into one\nof the four existing datatypes recognized by SQLite. \u003c/p\u003e\n\n\u003cp\u003eFor example, \u003ccode\u003eINT\u003c/code\u003e is a common datatype used outside of SQLite. SQLite won't\ncomplain if you define a column as an \u003ccode\u003eINT\u003c/code\u003e datatype. It will simply lump it\ninto the \u003ccode\u003eINTEGER\u003c/code\u003e category and store it as such.\u003c/p\u003e\n\n\u003cp\u003eTo accommodate this, SQLite has a pretty complicated system of categorizing\ndatatypes that involves \u003ccode\u003eStorage Classes\u003c/code\u003e, \u003ccode\u003eType Affinities\u003c/code\u003e, and \u003ccode\u003eDatatypes\u003c/code\u003e.\nFor a deeper dive, check out the \u003ca href=\"http://www.sqlite.org/datatype3.html\"\u003eSQLite3 Documentation on Datatypes\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"truthiness","title":"Truthiness","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"truthiness-in-ruby-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/truthiness-in-ruby-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/truthiness-in-ruby-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/truthiness-in-ruby-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll explain the significance of truthiness in programming and\nidentify boolean values in Ruby.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine control flow and how Boolean values help in implementing it in\nprogramming.\u003c/li\u003e\n\u003cli\u003eList what is truthy and falsey in Ruby.\u003c/li\u003e\n\u003cli\u003eUse the double bang operator to determine truthiness in Ruby.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://upload.wikimedia.org/wikipedia/en/thumb/8/85/Truthiness.png/300px-Truthiness.png\" alt=\"Truthiness\"\u003e\u003c/p\u003e\n\n\u003cp\u003eMany programming languages, including Ruby, have native boolean (true or false)\ndata types. In Ruby they're expressed directly as \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eThis is not the case in all languages. In Python, boolean values\nare capitalized,\u003c/em\u003e \u003ccode\u003eTrue\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003eFalse\u003c/code\u003e, \u003cem\u003ewhile in Objective-C they are different\nwords\u003c/em\u003e \u003ccode\u003eYES\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003eNO\u003c/code\u003e. \u003cem\u003eHowever, they all represent the same concept of\nBoolean logic.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThese boolean values come in handy in programming when we want to implement\ncontrol flow. Control flow is the idea that we can tell our program to execute\ncertain lines of code based upon certain conditions.\u003c/p\u003e\n\n\u003ch3\u003eBooleans and Flow Control\u003c/h3\u003e\n\n\u003cp\u003eFor example, \u003cem\u003eif\u003c/em\u003e I am tired, then I will take a nap. Otherwise, I will keep\nreading this insightful and informative readme. You could also invert the\nperspective like in this example:\u003c/p\u003e\n\n\u003cp\u003eIf it is \u003cem\u003etrue\u003c/em\u003e that I am tired, then I will take a nap. If it is \u003cem\u003efalse\u003c/em\u003e that I\nam tired, then I won't take a nap.\u003c/p\u003e\n\n\u003cp\u003eFlow control is predicated on these true-or-false boolean values. The adjectives\n\"truthy\" and \"falsey\" are a programming convention for describing the \u003cem\u003estate\u003c/em\u003e of\nbeing true and the \u003cem\u003estate\u003c/em\u003e of being false.\u003c/p\u003e\n\n\u003cp\u003eWhat this example amounts to is this: we want to be able to use non-boolean\nvalues (like strings or integers) in a boolean context; we want to be able to\nsay, \"\u003cem\u003eif\u003c/em\u003e a certain statement \u003cem\u003eevaluates\u003c/em\u003e to true (or is \"truthy\"), then\nexecute these certain lines of code.\"\u003c/p\u003e\n\n\u003cp\u003eConsequently, Ruby must have a way of determining what counts as true at a given\nmoment—or what is \"truthy\" versus what is \"falsey\".\u003c/p\u003e\n\n\u003cp\u003eRemember, don't worry about understanding control flow and implementing it right\nnow. This is just to provide some background about why we care about the concept\nof truthiness in Ruby.\u003c/p\u003e\n\n\u003ch2\u003eWhat Is 'truthy' and 'falsey' in Ruby?\u003c/h2\u003e\n\n\u003cp\u003eProgramming languages are software, too! That means the people who built Ruby\nhad to decide what is truthy and what is falsey. Different languages make\ndifferent decisions.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIn Ruby only false and nil are falsey. Everything else is truthy (yes, even 0 is truthy).\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eBecome familiar with the following chart:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003eValue\u003c/th\u003e\n    \u003cth\u003eTruthy?\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003e0\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\"\"\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e[]\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\"hello\"\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003enil\u003c/td\u003e\n    \u003ctd\u003eno\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e6.7\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eTRUE\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003efalse\u003c/td\u003e\n    \u003ctd\u003eno\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFALSE\u003c/td\u003e\n    \u003ctd\u003eno\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e[1,2]\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e{:hi=\u0026gt;\"there\"\u003c/td\u003e\n    \u003ctd\u003eyes\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eYou get the idea!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e Even an empty string, \u003ccode\u003e\"\"\u003c/code\u003e, is truthy! This might seem kind of\nstrange, but it will make more sense once we learn more about object\norientation. For now, keep in mind that even an empty string is an instance of\nthe String class. Again, that sentence might not mean a lot to you right now,\nbut it will soon...\u003c/p\u003e\n\n\u003ch3\u003eBonus: Determining Truthiness\u003c/h3\u003e\n\n\u003cp\u003eIf you forget to memorize this handy chart, there is a trick you can use to\ndetermine if a value is truthy or falsey. A \u003cstrong\u003esingle bang operator\u003c/strong\u003e, \u003ccode\u003e!\u003c/code\u003e, will\nnegate the boolean value it is placed in front of. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!true  #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!false #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe double bang operator:\u003c/strong\u003e A \"double-bang operator\" (\u003ccode\u003e!!\u003c/code\u003e) will return \u003ccode\u003etrue\u003c/code\u003e\nor \u003ccode\u003efalse\u003c/code\u003e based on whether a value is truthy or falsey to begin with.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!!\"hello\" #=\u0026gt; true\u003cbr\u003e\u003cbr\u003e!!nil #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://gist.github.com/jfarmer/\"\u003eJFarmer's Gists\u003c/a\u003e - \u003ca href=\"https://gist.github.com/jfarmer/2647362\"\u003eTruthy and Falsey in Ruby\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"metaprogramming-conclusion","title":"Metaprogramming Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFrom the last few labs, we can see Ruby's metaprogramming capabilities. \nMetaprogramming allows for efficiency, which will be needed as we scale\nup to building larger applications.\u003c/p\u003e\n\n\u003cp\u003eWe discussed concepts such as: \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow mass assignment works\u003c/li\u003e\n\u003cli\u003eCreating custom errors\u003c/li\u003e\n\u003cli\u003eUsing Ruby's metaprogramming features\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith this technique, we're able to write code that is DRYer, lighter,\nmore intuitive and more scalable. Although other languages can do this,\nwe can save a lot more time using Ruby.\u003c/p\u003e","frontPage":false},{"exportId":"sql-joins","title":"SQL Joins","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-intro-to-joins\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-intro-to-joins/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-intro-to-joins\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-intro-to-joins/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll discuss how to retrieve specific sets of data from associated tables using SQL join statements. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe how SQL join clauses combine data from multiple tables based on a common column between them\u003c/li\u003e\n\u003cli\u003eDefine the different types of SQL joins: inner, outer, left outer, right outer\u003c/li\u003e\n\u003cli\u003ePractice writing join statements\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat Is a JOIN?\u003c/h2\u003e\n\n\u003cp\u003eA SQL JOIN clause is a way to combine rows from two or more tables, based on a common column between them. The great thing about relational databases is that they are just that––\u003cem\u003erelational\u003c/em\u003e. Relational databases allow us not only to store data that is interconnected, but to retrieve that data in ways that reflect that interconnectivity. \u003c/p\u003e\n\n\u003cp\u003eLet's say, for example, we have two tables, a Cats table and an Owners table. Cats and owners are associated by a foreign key of \u003ccode\u003eowner_id\u003c/code\u003e in the Cats table. How would we craft a query that would grab us all of the cats with a particular owner, and even include information about that owner in the data returned to us by that query? We know how to write a \u003ccode\u003eSELECT\u003c/code\u003e statement that gets us all of the cats with a particular \u003ccode\u003eowner_id\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE owner_id = 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis would return us the appropriate list of cats. But what if we wanted to query \u003cem\u003eboth\u003c/em\u003e the Cats and the Owners tables and return information about both cats and owners? This is where JOIN statements come in. \u003c/p\u003e\n\n\u003ch2\u003eJOIN Types\u003c/h2\u003e\n\n\u003cp\u003eThere are several different types of joins that we will cover in this lesson. The following JOIN keywords will be crafted into \u003ccode\u003eSELECT\u003c/code\u003e statements to achieve the described return values.  \u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eINNER JOIN\u003c/td\u003e\n\u003ctd\u003eReturns all rows when there is at least one match in BOTH tables\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLEFT [OUTER] JOIN\u003c/td\u003e\n\u003ctd\u003eReturns all rows from the left table, and the matched rows from the right table\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRIGHT JOIN*\u003c/td\u003e\n\u003ctd\u003eReturns all rows from the right table, and the matched rows from the left table\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFULL JOIN*\u003c/td\u003e\n\u003ctd\u003eReturns all rows when there is a match in ONE of the tables\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003ccode\u003e* Not supported by SQLite\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Unfortunately, SQLite does not support the RIGHT JOIN or the FULL OUTER JOIN clauses. However, you can \u003ca href=\"http://www.sqlitetutorial.net/sqlite-full-outer-join/\"\u003eemulate\u003c/a\u003e the FULL OUTER JOIN by using the LEFT JOIN clause.\u003c/p\u003e\n\n\u003cp\u003eIn the following code-along, we'll be crafting JOIN statements of each of the above types in order to return data about a series of connected database tables.\u003c/p\u003e\n\n\u003cp\u003eFor this code-along, we'll be working with a database of pets and owners. Let's set it up:\u003c/p\u003e\n\n\u003ch2\u003eSetting Up the Database\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate your database in your terminal with the following command:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eNow, inside the \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e prompt, create the following tables and insert the values:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eCats Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT,\u003cbr\u003eowner_id INTEGER);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eOwners Table:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eInsert Data:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"mugumogu\");\u003cbr\u003eINSERT INTO owners (name) VALUES (\"Sophie\");\u003cbr\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Maru\", 3, \"Scottish Fold\", 1);\u003cbr\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Hana\", 3, \"Tabby\", 1);\u003cbr\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Nona\", 4, \"Tortoiseshell\", 2);\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Lil' Bub\", 2, \"perma-kitten\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eA Note on Foreign Keys\u003c/h3\u003e\n\n\u003cp\u003eNote that the Cats table has an \u003ccode\u003eowner_id\u003c/code\u003e column. This column is a \u003cstrong\u003eforeign key\u003c/strong\u003e that connects each cat to an individual owner. If an individual cat has an \u003ccode\u003eowner_id\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e, that indicates that that cat belongs to the owner who has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e2\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eTo confirm this, you can run the following \u003ccode\u003eSELECT\u003c/code\u003e statement in your \u003ccode\u003esqlite3\u003c/code\u003e prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE owner_id = 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see just one cat returned to us, the one that belongs to Sophie, our second owner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid               name             age         breed          owner_id        \u003cbr\u003e---------------  ---------------  ----------  -------------  ----------\u003cbr\u003e3                Nona             4           Tortoiseshell  2\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCode Along I: INNER JOIN\u003c/h2\u003e\n\n\u003ch3\u003eDefinition\u003c/h3\u003e\n\n\u003cp\u003eAn INNER JOIN query will return \u003cem\u003eall\u003c/em\u003e the rows from both tables you are querying where a certain condition is met. In other words, INNER JOIN will select all rows from both tables as long as there is a match between the specified columns of each table.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at a boiler-plate INNER JOIN statement, before we try it out on our \u003ccode\u003epets_database\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s)\u003cbr\u003eFROM first_table\u003cbr\u003eINNER JOIN second_table\u003cbr\u003eON first_table.column_name = second_table.column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis may not make sense to you just yet. Let's try it out with our own database in order to gain a better understanding. \u003c/p\u003e\n\n\u003ch3\u003eWriting INNER JOINs\u003c/h3\u003e\n\n\u003cp\u003eEnter into your database via \u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e, if you're not there already. Let's write an INNER JOIN query that will return the name and breed of the cat along with the name of that cat's owner.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name \u003cbr\u003eFROM Cats \u003cbr\u003eINNER JOIN Owners\u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break this down:\n\u003ccode\u003esql\nSELECT Cats.name, Cats.breed, Owners.name ...\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eHere, we are specifying which columns from each table we want to select data from. We use the \u003ccode\u003etable_name.column_name\u003c/code\u003e notation to grab columns from two different tables.\u003c/p\u003e\n\n\u003cp\u003eNext up, we join our two tables together with our \u003ccode\u003eINNER JOIN\u003c/code\u003e keyword: \n\u003ccode\u003esql\n...FROM Cats INNER JOIN Owners\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eLastly, we tell our query \u003cem\u003ehow\u003c/em\u003e to connect, or join, the two tables. In other words, we tell our query which columns in each table function as the foreign key/primary key connection. Through this, our query will correctly identify which cat belongs to which owner and return that information accordingly. \n\u003ccode\u003esql\n...ON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eHere, we are telling our query that the \u003ccode\u003eowner_id\u003c/code\u003e column on the Cats table is filled with data that corresponds to data in the \u003ccode\u003eid\u003c/code\u003e column of the Owners table. We are indicating that a value of \u003ccode\u003e1\u003c/code\u003e, for example, in an individual cat's \u003ccode\u003eowner_id\u003c/code\u003e column refers to the individual owner who has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e. And we are telling our query to return \u003cem\u003eonly\u003c/em\u003e those cats and owners who share this connection.\u003c/p\u003e\n\n\u003cp\u003eThe above statement should return the following:\n```sql\nname             breed            name\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eMaru             Scottish Fold    mugumogu\u003cbr\u003e\nHana             Tabby            mugumogu\u003cbr\u003e\nNona             Tortoiseshell    Sophie\u003cbr\u003e\n```   \u003c/p\u003e\n\n\u003cp\u003eWe did it! We wrote an INNER JOIN query that returns to us all of the data in the specified columns from both tables. \u003c/p\u003e\n\n\u003cp\u003eNotice that the owner's name column is called \u003ccode\u003ename\u003c/code\u003e in the output above. That is because we requested the \u003ccode\u003ename\u003c/code\u003e column from the Owners table. For this particular output though, it would be great if the column could read \"owners_name\", to distinguish it from the cat's name column. \u003c/p\u003e\n\n\u003cp\u003eLet's run that query again, this time aliasing the \u003ccode\u003ename\u003c/code\u003e column of the Owners table as \u003ccode\u003eowners_name\u003c/code\u003e, using the \u003ccode\u003eAS\u003c/code\u003e keyword:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name \u003cbr\u003eAS \"owner_name\" \u003cbr\u003eFROM Cats \u003cbr\u003eINNER JOIN Owners \u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             breed            owner_name\u003cbr\u003e---------------  ---------------  ----------\u003cbr\u003eMaru             Scottish Fold    mugumogu  \u003cbr\u003eHana             Tabby            mugumogu  \u003cbr\u003eNona             Tortoiseshell    Sophie \n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eA Note on INNER JOINs, or, Where's Lil' Bub?\u003c/h3\u003e\n\n\u003cp\u003eWhen we say that an INNER JOIN returns all of the data for which a certain condition is true, we mean that any data that does not meet a JOIN condition will not be returned. The JOIN condition, in this case, is the thing that our two tables are joined \u003cem\u003eon\u003c/em\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e...ON Cats.owner_id = Owners.id;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eOur query, therefore, will select all of the appropriate data concerning cats and owners who \u003cem\u003eare\u003c/em\u003e joined by an \u003ccode\u003eowner_id\u003c/code\u003e/\u003ccode\u003eid\u003c/code\u003e foreign key/primary key relationship. In other words, it will select all of the cats who have a value in the \u003ccode\u003eowner_id\u003c/code\u003e column that matches a value in the \u003ccode\u003eid\u003c/code\u003e column of the Owners table. Any cats that have an empty \u003ccode\u003eowner_id\u003c/code\u003e column, or have a value in that column that does not match the \u003ccode\u003eid\u003c/code\u003e of an existing owner, will not be selected by the query. \u003c/p\u003e\n\n\u003cp\u003eYou might have noticed that the data returned by our query did not include Lil' Bub. That's because when we inserted Lil' Bub into our Cats table, we didn't give her an \u003ccode\u003eowner_id\u003c/code\u003e.  \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Lil_Bub_2013_(crop_for_thumb).jpg\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOther types of JOIN statements, however, can return such data.  \u003c/p\u003e\n\n\u003ch2\u003eCode Along II: LEFT OUTER JOIN\u003c/h2\u003e\n\n\u003cp\u003eI don't know about you, but I miss Lil' Bub. It would be nice if we could query our database for both cat and owner information \u003cem\u003ewithout\u003c/em\u003e excluding her. With a LEFT OUTER JOIN we can do just that. \u003c/p\u003e\n\n\u003ch3\u003eDefinition\u003c/h3\u003e\n\n\u003cp\u003eA LEFT OUTER JOIN query returns \u003cem\u003eall\u003c/em\u003e rows from the left, or first, table, regardless of whether or not they met the JOIN condition. The query will also return the matched data from the right, or second, table. \u003c/p\u003e\n\n\u003cp\u003eIn the case of data from the first table that doesn't meet our JOIN condition, the resulting output will include \u003ccode\u003eNULL\u003c/code\u003e, or empty, values for the missing matched columns. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look at a boiler-plate LEFT OUTER JOIN:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s)\u003cbr\u003eFROM first_table\u003cbr\u003eLEFT [OUTER] JOIN second_table\u003cbr\u003eON first_table.column_name=second_table.column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's try it out on our \u003ccode\u003epets_database\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eWriting LEFT OUTER JOINs\u003c/h3\u003e\n\n\u003cp\u003eExecute the following command in your \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e prompt in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name \u003cbr\u003eFROM Cats \u003cbr\u003eLEFT OUTER JOIN Owners \u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following output returned to you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             breed            name      \u003cbr\u003e---------------  ---------------  ----------\u003cbr\u003eMaru             Scottish Fold    mugumogu  \u003cbr\u003eHana             Tabby            mugumogu  \u003cbr\u003eNona             Tortoiseshell    Sophie \u003cbr\u003eLil' Bub         perma-kitten                \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, our LEFT OUTER JOIN has returned to us \u003cem\u003eall\u003c/em\u003e of the cats (including Lil' Bub!), with matched data regarding owner's name for those cats that have an owner, and empty space in the owner's name column for the cat that doesn't have an owner. \u003c/p\u003e\n\n\u003ch2\u003eRIGHT OUTER JOIN and FULL OUTER JOIN\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e SQLite doesn't currently support RIGHT OUTER JOINs or FULL OUTER JOINs. However, we'll review it briefly here so you can see how it works in other Databases, like Postgres. This section isn't a code-along, just read it through and try to get comfortable with the code provided. \u003c/p\u003e\n\n\u003ch3\u003eRIGHT OUTER JOIN\u003c/h3\u003e\n\n\u003cp\u003eThe RIGHT OUTER JOIN is the reverse of the LEFT OUTER JOIN. It will return \u003cem\u003eall\u003c/em\u003e data from the right, or second, table and the matched data from the left, or first table. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look a boiler-plate RIGHT OUTER JOIN query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s)\u003cbr\u003eFROM first_table\u003cbr\u003eRIGHT JOIN second_table\u003cbr\u003eON first_table.column_name = second_table.column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore we (pretend to) write our own RIGHT OUTER JOIN, let's insert a new owner into our Owners table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"Penny\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have an owner who is not currently associated to a cat. This gives us something to work with to illustrate our RIGHT OUTER JOIN. \u003c/p\u003e\n\n\u003ch3\u003eWriting RIGHT OUTER JOINs\u003c/h3\u003e\n\n\u003cp\u003eThe following query would constitute a RIGHT OUTER JOIN:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name \u003cbr\u003eFROM Cats \u003cbr\u003eRIGHT OUTER JOIN Owners \u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis would return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             breed            name      \u003cbr\u003e---------------  ---------------  ----------\u003cbr\u003eMaru             Scottish Fold    mugumogu  \u003cbr\u003eHana             Tabby            mugumogu  \u003cbr\u003eNona             Tortoiseshell    Sophie    \u003cbr\u003e                                  Penny  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that Lil' Bub is once again missing, but our cat-less owner, Penny, is present and accounted for. That is because the RIGHT OUTER JOIN will select \u003cem\u003eall\u003c/em\u003e of the data from the second table and only the matched data from the first table. \u003c/p\u003e\n\n\u003ch3\u003eFULL OUTER JOIN\u003c/h3\u003e\n\n\u003cp\u003eFULL OUTER JOIN queries will combine the result of both a LEFT and RIGHT OUTER JOIN. In other words, they will return \u003cem\u003eall\u003c/em\u003e the data from both the first and second tables.\u003c/p\u003e\n\n\u003cp\u003eHere's a boiler-plate example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s)\u003cbr\u003eFROM first_table\u003cbr\u003eFULL OUTER JOIN second_table\u003cbr\u003eON first_table.column_name = second_table.column_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eWriting FULL OUTER JOINs\u003c/h3\u003e\n\n\u003cp\u003eA FULL OUTER JOIN for our Cats and Owners tables would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT Cats.name, Cats.breed, Owners.name\u003cbr\u003eFROM Cats\u003cbr\u003eFULL OUTER JOIN Owners\u003cbr\u003eON Cats.owner_id = Owners.id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt would return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             breed            name      \u003cbr\u003e---------------  ---------------  ----------\u003cbr\u003eMaru             Scottish Fold    mugumogu  \u003cbr\u003eHana             Tabby            mugumogu  \u003cbr\u003eNona             Tortoiseshell    Sophie \u003cbr\u003eLil' Bub         perma-kitten \u003cbr\u003e                                  Penny               \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur result includes both cats without owners and owners without cats. In other words, it includes \u003cem\u003eall\u003c/em\u003e of our data. \u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.sqlitetutorial.net/sqlite-full-outer-join/\"\u003eSQLite FULL OUTER JOIN Emulation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-hashes","title":"Introduction to Hashes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-introduction-to-hashes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-introduction-to-hashes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-introduction-to-hashes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-introduction-to-hashes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a Ruby hash\u003c/li\u003e\n\u003cli\u003eDefine hash keys\u003c/li\u003e\n\u003cli\u003eDefine hash values\u003c/li\u003e\n\u003cli\u003eCreate a Hash using its implicit (\"Hash-Literal\") form\u003c/li\u003e\n\u003cli\u003eCreate a Hash with \u003ccode\u003eHash.new\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eUp until this point, we've stored our data in a list form using arrays. An\narray is like a numbered list. It stores a group of items which are accessible\nvia their location, or index number, in the list. A \u003ccode\u003eHash\u003c/code\u003e, in comparison, is a\n\"lookup table\" like a dictionary.\u003c/p\u003e\n\n\u003cp\u003eImagine a grocery list: you need to go to the store and buy milk, eggs and\nbread. You could store your list like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries = [\"milk\", \"eggs\", \"bread\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut now let's say we wanted to \"look up\" the prices of these items. We could\nwrite:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprices = [3.00, 2.15, 2.35] # milk, eggs, bread prices\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut wait, why not write this as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprices = [2.35, 3.00, 2.15]  # bread, milk, eggs prices\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWell, that's perfectly \u003cem\u003elegal\u003c/em\u003e as well to Ruby. But what we want is a way to\nassociate the word \u003ccode\u003e\"milk\"\u003c/code\u003e to the price \u003ccode\u003e3.00\u003c/code\u003e. A code comment isn't a strong\nenough bond between the \u003ccode\u003eString\u003c/code\u003e (grocery item) and the \u003ccode\u003eFloat\u003c/code\u003e (price). When\nyou need to associate a value with a lookup \"\u003cem\u003ekey\u003c/em\u003e\", you want a \u003ccode\u003eHash\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHashes allow us to store named, or associated, data. Think of a dictionary or\nan address book. This allows us to store more complex collections of\ninformation than the arrays we've seen so far. With a hash, we can associate\nitem names to prices.\u003c/p\u003e\n\n\u003ch2\u003eDefine a Ruby Hash\u003c/h2\u003e\n\n\u003cp\u003eA \u003cem\u003ehash\u003c/em\u003e is a collection of data that is separated into pairs of keys and\nvalues. Each key/value pair makes up one unit in the hash. The entire collection\nof key/value pairs, which are comma separated, is enclosed in curly braces \u003ccode\u003e{}\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"key\" =\u0026gt; \"value\", \"another_key\" =\u0026gt; \"another value\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, the \u003ccode\u003eString\u003c/code\u003e \u003ccode\u003e\"key\"\u003c/code\u003e is the key to the value \u003ccode\u003e\"value\"\u003c/code\u003e. The\nkey \u003ccode\u003e\"another_key\"\u003c/code\u003e is used to \"point to\" the \u003ccode\u003eString\u003c/code\u003e value, \u003ccode\u003e\"another_value\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cimg width=\"500\" alt=\"Hash structure with key and value labeled\" src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/introduction-to-hashes/Image_14_HashStructure.png\"\u003e \n\u003c/p\u003e\n\n\u003cp\u003eAs with Arrays, you can use white space to make it more friendly for humans to\nread:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"key\" =\u0026gt; \"value\",\u003cbr\u003e  \"another_key\" =\u0026gt; \"another value\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember just a moment ago we were asking how to associate a grocery item to a\nprice? Here's how a \u003ccode\u003eHash\u003c/code\u003e allows us to do that:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprices = {\u003cbr\u003e\"bread\" =\u0026gt; 2.35,\u003cbr\u003e\"milk\" =\u0026gt;  3.00,\u003cbr\u003e\"eggs\" =\u0026gt;  2.15\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe relationship between a \u003cem\u003ekey\u003c/em\u003e (or lookup name) and its associated value is\nindicated by using the \u003ccode\u003e=\u0026gt;\u003c/code\u003e symbol (sometimes lovingly referred to as a\n\"hash-rocket\").\u003c/p\u003e\n\n\u003ch2\u003eDefine Hash Keys\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003eKeys\u003c/em\u003e are the things we \"look up\" with. In our grocery prices example, the\nkeys are the \u003ccode\u003eString\u003c/code\u003es \u003ccode\u003e\"bread\"\u003c/code\u003e, \u003ccode\u003e\"milk\"\u003c/code\u003e, and \u003ccode\u003e\"eggs\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eHash\u003c/code\u003e keys can be any type of data but most of the time we use\n\u003ca href=\"https://ruby-doc.org/core-2.5.0/String.html\"\u003eStrings\u003c/a\u003e (as seen in the grocery/prices example) or\n\u003ca href=\"https://ruby-doc.org/core-2.5.0/Symbol.html\"\u003eSymbols\u003c/a\u003e like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{:name =\u0026gt; \"John Henry\", :occupation =\u0026gt; \"Steel-driving man\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSomewhat confusingly, Ruby has \u003cstrong\u003eanother\u003c/strong\u003e syntax for writing \u003ccode\u003eHash\u003c/code\u003ees that\nhave a \u003ccode\u003eSymbol\u003c/code\u003e as key. We call \u003ccode\u003eHash\u003c/code\u003ees defined this way \"JSON (pronounced\n'Jay-Sawn') \u003ccode\u003eHash\u003c/code\u003ees.\"\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{name: \"John Henry\", occupation: \"Steel-driving Man\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou'll definitely see both when you do research online, so you need to\nrecognize both.  Ruby gained \"JSON Hashes\" in order to increase its ability to\nshare data with JavaScript (the JS in JSON stands for JavaScript). It's a great\nidea, but (sorry!) it's a little confusing when you're starting out.\u003c/p\u003e\n\n\u003cp\u003eMost of the time, for keys, Rubyists prefer \u003ca href=\"https://ruby-doc.org/core-2.5.0/Symbol.html\"\u003eSymbols\u003c/a\u003e (there are\nperformance reasons that we'll cover elsewhere).\u003c/p\u003e\n\n\u003cp\u003eFor comparison, here's the same hash written using \u003ccode\u003eString\u003c/code\u003es as the key:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"name\" =\u0026gt; \"John Henry\", \"occupation\" =\u0026gt; \"Steel-driving man\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eDefine Hash Values\u003c/h2\u003e\n\n\u003cp\u003eHash values are the bits of data that are returned when we give a \u003ccode\u003eHash\u003c/code\u003e a\n\u003cem\u003ekey\u003c/em\u003e to use to do a look up. The values in the grocery / prices example are:\n\u003ccode\u003e2.35\u003c/code\u003e, \u003ccode\u003e3.00\u003c/code\u003e, and \u003ccode\u003e2.15\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eKeys\u003c/em\u003e are the things we look up by, in our grocery example these are the\n\u003ccode\u003eString\u003c/code\u003es \u003ccode\u003e\"bread\"\u003c/code\u003e, \u003ccode\u003e\"milk\"\u003c/code\u003e, and \u003ccode\u003e\"eggs\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHash values don't need to contain values of all the same type. You can have\n\u003ccode\u003eString\u003c/code\u003es, other scalar data, or even other \u003ccode\u003eArray\u003c/code\u003es or \u003ccode\u003eHash\u003c/code\u003ees!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{:item =\u0026gt; \"banana\", :price =\u0026gt; 0.89, :quantity =\u0026gt; 6, :description =\u0026gt; \"a delicious fruit\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCreate a Hash using its implicit (\"Hash-Literal\") form\u003c/h2\u003e\n\n\u003cp\u003eThe easiest way to create a \u003ccode\u003eHash\u003c/code\u003e is to write it out as we've seen in the\nexamples so far.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew_hash = {\u003cbr\u003e  :created =\u0026gt; Time.now,\u003cbr\u003e  :message =\u0026gt; \"Hello world!\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:created=\u0026gt;2019-04-10 14:05:33 -0400, :message=\u0026gt;\"Hello world!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is what is referred to as the \u003cem\u003eimplicit\u003c/em\u003e or \"\u003ccode\u003eHash\u003c/code\u003e literal\" form. When\nassigning a variable, Ruby will interpret the curly braces on the left hand\nside as a Hash.\u003c/p\u003e\n\n\u003cp\u003eOnce created, we can access this \u003ccode\u003eHash\u003c/code\u003e with our \u003ccode\u003enew_hash\u003c/code\u003e variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew_hash = {\u003cbr\u003e  :created =\u0026gt; Time.now,\u003cbr\u003e  :message =\u0026gt; \"Hello world!\"\u003cbr\u003e}\u003cbr\u003enew_hash\u003cbr\u003e#=\u0026gt; {:created=\u0026gt;2019-04-10 13:42:27 -0400, :message=\u0026gt;\"Hello world!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eMASTER YOUR LEARNING\u003c/strong\u003e: Try writing the sample we just showed you in the\nJSON Hash Style in IRB.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eCreate a Hash with \u003ccode\u003eHash.new\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAlternatively, we can use \u003ccode\u003eHash.new\u003c/code\u003e to create a new hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esecond_new_hash = Hash.new\u003cbr\u003e#=\u0026gt; {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the same as writing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esecond_new_hash = {}\u003cbr\u003e#=\u0026gt; {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe're just getting started with hashes, but hopefully, you can already see why\nthey might be useful. With hashes, we can use hash keys as a way of \u003cem\u003enaming\u003c/em\u003e\nindividual pieces of data. Including multiple key/value pairs allows us to\n\u003cem\u003eassociate\u003c/em\u003e different bits of data, bundling them all up into one object.\u003c/p\u003e\n\n\u003cp\u003eNow that we can create hashes and store data as key/value pairs, in the next\nlesson, we'll look at how we can access, update, and even delete those \"pairs.\"\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/embed/0JSsFQGYaeA\"\u003eIntro to Hashes Video\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/core-2.5.0/Hash.html\"\u003eRuby Hash Class\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"default-arguments","title":"Default Arguments","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"methods-default-arguments\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/methods-default-arguments/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/methods-default-arguments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/methods-default-arguments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll introduce methods that take in optional arguments and cover why they're important to programming. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a method to take in optional arguments by assigning a default value. \u003c/li\u003e\n\u003cli\u003eCall a method with and without its optional arguments. \u003c/li\u003e\n\u003cli\u003eDefine a method that takes in both required and optional arguments.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Optional Arguments?\u003c/h2\u003e\n\n\u003cp\u003eWe should constantly strive for our code to be dynamic and flexible. As programmers, we are lazy (which is a virtue). Consequently, we want the code we write to be re-usable. \u003c/p\u003e\n\n\u003cp\u003eIf we define a method, \u003ccode\u003e#greeting\u003c/code\u003e, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello, Ruby programmer!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have to re-define or re-write that method every time we'd like to use it to greet someone else who might not be a Ruby programmer. Since that's way too much work for us,  we'll define our method to take in an \u003cem\u003eargument\u003c/em\u003e of someone's name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name)\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our method is flexible and dynamic. It can be used again and again to greet different people. \u003c/p\u003e\n\n\u003cp\u003eBut what if we don't know the name of the person we are trying to greet? We can make this method even more flexible by making the \u003ccode\u003ename\u003c/code\u003e argument optional. We do this by using optional, or default, arguments. \u003c/p\u003e\n\n\u003ch2\u003eDefault Arguments\u003c/h2\u003e\n\n\u003cp\u003eIn order to define a method that optionally takes in an argument, we define our method to take in an argument with a \u003cstrong\u003edefault value\u003c/strong\u003e. By defining our method with default arguments, we make it possible to call the method with optional arguments, i.e. with or without arguments. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#             assigning a default value\u003cbr\u003edef greeting(name = \"Ruby programmer\")\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn our argument list, \u003ccode\u003e(name = \"Ruby programmer\")\u003c/code\u003e, we simply assign the argument \u003ccode\u003ename\u003c/code\u003e a default value of \u003ccode\u003e\"Ruby programmer\"\u003c/code\u003e. By doing so, we are really saying:\u003c/p\u003e\n\n\u003cp\u003eIf the method is invoked without any arguments, i.e. like this: \u003ccode\u003egreeting\u003c/code\u003e, Ruby will assume the value of the \u003ccode\u003ename\u003c/code\u003e variable inside the method to be \u003ccode\u003e\"Ruby programmer\"\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eHowever, if the method is invoked with an argument, \u003ccode\u003egreeting(\"Sophie\")\u003c/code\u003e, Ruby will assign the variable \u003ccode\u003ename\u003c/code\u003e to the string \u003ccode\u003e\"Sophie\"\u003c/code\u003e inside the method. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting\u003cbr\u003e# \u0026gt; Hello, Ruby programmer!\u003cbr\u003e\u003cbr\u003egreeting(\"Sophie\")\u003cbr\u003e# \u0026gt; Hello, Sophie!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith default arguments, our once simple machine becomes profoundly useful and abstract.\u003c/p\u003e\n\n\u003ch2\u003eAdding Default Arguments\u003c/h2\u003e\n\n\u003cp\u003eDefault arguments are easy to add, you simply assign them a default value with \u003ccode\u003e=\u003c/code\u003e (\"equals\") in the argument list. There's no limit to the number of arguments that you can make default.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name=\"Ruby programmer\", language=\"Ruby\")\u003cbr\u003e  puts \"Hello, #{name}. We heard you are a great #{language} programmer.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take a look at the different ways we can call this method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting\u003cbr\u003e# \u0026gt; Hello, Ruby programmer. We heard you are a great Ruby programmer. \u003cbr\u003e\u003cbr\u003egreeting(\"Sophie\")\u003cbr\u003e# \u0026gt; Hello, Sophie. We heard you are a great Ruby programmer. \u003cbr\u003e\u003cbr\u003egreeting(\"Steven\", \"Elixir\")\u003cbr\u003e# \u0026gt; Hello, Steven. We heard you are a great Elixir programmer.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUsing Default Argument and Required Arguments\u003c/h2\u003e\n\n\u003cp\u003eIt is possible to define a method that takes in both required and default arguments. To do so, however, we must place the default argument at the end of the argument list in the method definition. \u003c/p\u003e\n\n\u003cp\u003eTake a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(name, language=\"Ruby\")\u003cbr\u003e  puts \"Hello, #{name}. We heard you are a great #{language} programmer.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's call our \u003ccode\u003e#greeting\u003c/code\u003e method with and without an explicit \u003ccode\u003elanguage\u003c/code\u003e argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Sophie\", \"Ember.js\")\u003cbr\u003e# \u0026gt; Hello, Sophie. We heard you are a great Ember.js programmer. \u003cbr\u003e\u003cbr\u003egreeting(\"Dan\")\u003cbr\u003e# \u0026gt; Hello, Dan. We heard you are a great Ruby programmer.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt works! Why must we place the default argument at the end of the argument list?\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at what would happen if we didn't:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting(language=\"Ruby\", name)\u003cbr\u003e  puts \"Hello, #{name}. We heard you are a great #{language} programmer.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, what happens when we try to call our method without an explicit \u003ccode\u003elanguage\u003c/code\u003e argument?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Sophie\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou might expect it to break. Or you might expect it to think that the \u003ccode\u003elanguage\u003c/code\u003e variable is being set equal to \u003ccode\u003e\"Sophie\"\u003c/code\u003e in this method call. \u003c/p\u003e\n\n\u003cp\u003eNeither of those things will happen. The method will work as we intended because Ruby is smart and has a few tricks up its sleeve to help determine what method arguments are being used where in a method's body. \u003c/p\u003e\n\n\u003cp\u003eHowever, defining the default argument first is confusing. We can understand this from our very reasonable expectations that the above method invocation would break. For this reason, it is conventional to place any default arguments at the end of an argument list when defining a method that takes in both required and default arguments. \u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eMethod arguments, both required and optional, make methods powerfully abstract and dynamic machines that are easy to build yet very flexible and adaptable to different situations and requirements. Get used to defining methods with required and default arguments and calling them correctly.\u003c/p\u003e","frontPage":false},{"exportId":"instance-methods","title":"Instance Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-instance-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe an instance method.\u003c/li\u003e\n\u003cli\u003eCall instance methods on an object.\u003c/li\u003e\n\u003cli\u003eBuild instance methods for an object.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eThe Behavior of Objects\u003c/h2\u003e\n\n\u003cp\u003eWe know that classes act as a factory for our objects, capable of instantiating new instances.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut what can this instance of a dog stored in the local variable \u003ccode\u003efido\u003c/code\u003e do? In fact, how do we even ask this object to do something?\u003c/p\u003e\n\n\u003ch3\u003eDot Notation\u003c/h3\u003e\n\n\u003cp\u003eWe send objects messages asking them to perform an operation or task through a syntax known as \"Dot Notation\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new #=\u0026gt; #\u003cbr\u003e\u003cbr\u003efido.object_id #=\u0026gt; 70173135795280\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example above, we send the \u003ccode\u003efido\u003c/code\u003e instance a message \u003ccode\u003eobject_id\u003c/code\u003e by separating the receiving object, \u003ccode\u003efido\u003c/code\u003e and the message, \u003ccode\u003eobject_id\u003c/code\u003e by a dot (\u003ccode\u003e.\u003c/code\u003e). When we send an object a message through dot notation, we are evoking the corresponding method on the object. We are calling the \u003ccode\u003eobject_id\u003c/code\u003e method on \u003ccode\u003efido\u003c/code\u003e. (Note: the \u003ccode\u003eobject_id\u003c/code\u003e you get if you test out the above code will be different.)\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#object_id\u003c/code\u003e method simply tells you the object's identifier in your computer's memory (the place where all things live in your computer).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages. - Alan Kay\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn dot notation, we call the object that received the method message the \"receiver\" and we call the method the \"message\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# The receiver is this very string      # reverse is the message\u003cbr\u003e\"Strings are instances and objects too\".reverse\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInstance Methods\u003c/h3\u003e\n\n\u003cp\u003eAll objects respond to methods and messages, like \u003ccode\u003e#object_id\u003c/code\u003e in the example above. One interesting method provided is the \u003ccode\u003e#methods\u003c/code\u003e method that returns an array of all the methods and messages an object responds to. We can evoke this method via dot-notation. One of the great things you can ask every object in Ruby is \"What methods do you respond to?\"\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido.methods\u003cbr\u003e#=\u0026gt; [:psych_to_yaml, :to_yaml, :to_yaml_properties, :local_methods, :try, :nil?,\u003cbr\u003e# :===, :=~, :!~, :eql?, :hash, :\u0026lt;=\u0026gt;, :class, :singleton_class, :clone, :dup,\u003cbr\u003e# :itself, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :freeze,\u003cbr\u003e# :frozen?, :to_s, :inspect, :methods, :singleton_methods, :protected_methods,\u003cbr\u003e# :private_methods, :public_methods, :instance_variables,\u003cbr\u003e# :instance_variable_get, :instance_variable_set, :instance_variable_defined?,\u003cbr\u003e# :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :tap, :send,\u003cbr\u003e# :public_send, :respond_to?, :extend, :display, :method, :public_method,\u003cbr\u003e# :singleton_method, :define_singleton_method, :object_id, :to_enum, :enum_for,\u003cbr\u003e# :==, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, out of the box, our objects can do a lot of things. Where these things come from and what they do are not so important right now because all of that functionality is very low level and not interesting to our Dogs.\u003c/p\u003e\n\n\u003ch3\u003eBuilding Your Own Instance Methods\u003c/h3\u003e\n\n\u003cp\u003eHow do we add our own methods to our classes? In our Dog example, can we teach our Dog a new trick? Can we teach our Dog to bark for example?\u003c/p\u003e\n\n\u003cp\u003eWe can. We're used to defining methods already with the \u003ccode\u003edef\u003c/code\u003e keyword. If we place this method definition within the body of a class, that method becomes a specific behavior of instances of that class, not a generic procedure we can just call whenever we want.\u003c/p\u003e\n\n\u003cp\u003eWe call the methods defined within the object's class \u003cstrong\u003eInstance Methods\u003c/strong\u003e because they are methods that belong to any instance of the class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  # Class body\u003cbr\u003e\u003cbr\u003e  # Instance Method Definition\u003cbr\u003e  def bark\u003cbr\u003e    puts \"Woof!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido.bark #=\u0026gt; \"Woof!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy defining \u003ccode\u003e#bark\u003c/code\u003e within the \u003ccode\u003eDog\u003c/code\u003e class, \u003ccode\u003ebark\u003c/code\u003e becomes a method of all instances of Dogs. If we make more dogs, they can all bark.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def bark\u003cbr\u003e    puts \"Woof!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido.bark #=\u0026gt; \"Woof!\"\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new\u003cbr\u003esnoopy.bark #=\u0026gt; \"Woof!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eObjects can only do what we teach them to do via the code we write and the methods we define. For example, currently, Dogs do not know how to sit.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def bark\u003cbr\u003e    puts \"Woof!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido.bark #=\u0026gt; \"Woof!\"\u003cbr\u003efido.sit #=\u0026gt; NoMethodError: undefined method `sit' for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the same manner, instance methods, the methods that belong to particular instances of particular classes, are not globally evocable like procedural methods. They cannot be called without an instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def bark\u003cbr\u003e    puts \"Woof!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003e\u003cbr\u003e# Let's try just calling bark without fido\u003cbr\u003ebark #=\u0026gt; NameError: undefined local variable or method `bark' for main:Object\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eClasses as Blueprints\u003c/h3\u003e\n\n\u003cp\u003eThe ability to define methods and behaviors in our classes for our instances makes Ruby classes behave not just as factories, capable of instantiating new individual instances, but also as a blueprint, defining what those instances can do.\u003c/p\u003e","frontPage":false},{"exportId":"sql-queries","title":"SQL Queries","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-queries\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-queries/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-queries\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-queries/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover how to write SQL queries to retrieve and add specific data to SQL database tables.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a query as an SQL statement that retrieves data from a database\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eORDER BY\u003c/code\u003e modifier to order tables by specific \u003ccode\u003eSELECT\u003c/code\u003e statements\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eASC\u003c/code\u003e and \u003ccode\u003eDESC\u003c/code\u003e modifiers to sort queries in ascending or descending\norder\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eLIMIT\u003c/code\u003e modifier to determine the number of records to retrieve from\na dataset\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eBETWEEN\u003c/code\u003e modifier to retrieve records that contain a value that is\nwithin a given range\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eNULL\u003c/code\u003e data type keyword to insert new records into a table\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eCOUNT\u003c/code\u003e function to count the number of records that meet a certain\ncondition\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eGROUP BY\u003c/code\u003e function to group your results according to the values in\na given column\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is a SQL Query?\u003c/h2\u003e\n\n\u003cp\u003eThe term \"query\" refers to any SQL statement that retrieves data from your\ndatabase. In fact, we've already written a number of SQL queries using basic\n\u003ccode\u003eSELECT\u003c/code\u003e statements. We've already seen how to retrieve single units of data, or\nrows, with queries like these:\u003c/p\u003e\n\n\u003cp\u003eTo select all of the rows from a \u003ccode\u003ecats\u003c/code\u003e table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo select only rows representing data meeting certain conditions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE name = \"Maru\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if, however, we wanted to select the oldest cat? Or all of the cats that\ndon't currently belong to an owner? Or all of the cats with short names?\u003c/p\u003e\n\n\u003cp\u003eData storage isn't very useful if we can't manipulate, view, and analyze that\ndata. Luckily for us, SQL is actually a powerful tool for doing just that.\u003c/p\u003e\n\n\u003cp\u003eIn this exercise, we'll walk through executing a handful of common and handy SQL queries.\u003c/p\u003e\n\n\u003ch2\u003eCode Along: SQL Queries\u003c/h2\u003e\n\n\u003ch3\u003eCreating our Database\u003c/h3\u003e\n\n\u003cp\u003eIn this code along, we'll be creating a \u003ccode\u003ecats\u003c/code\u003e table in a \u003ccode\u003epets_database.db\u003c/code\u003e.\nSo, let's navigate to our terminal and get started.\u003c/p\u003e\n\n\u003cp\u003eFirst let's create our \u003ccode\u003epets_database\u003c/code\u003e by running the following command.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have a database, let's create our \u003ccode\u003ecats\u003c/code\u003e table along with \u003ccode\u003eid\u003c/code\u003e,\n\u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eage\u003c/code\u003e, \u003ccode\u003ebreed\u003c/code\u003e, and \u003ccode\u003eowner_id\u003c/code\u003e columns.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  breed TEXT,\u003cbr\u003e  owner_id INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGood work. Let's quit the SQL interface by typing: \u003ccode\u003e.quit\u003c/code\u003e. You'll be returned\nto the shell prompt. Now, output the list of files (\u003ccode\u003els\u003c/code\u003e on Linux-based machines\nand \u003ccode\u003edir\u003c/code\u003e on Windows-based machines) in the terminal and see what just happened.\nA new file should appear called \u003ccode\u003epets_database.db\u003c/code\u003e! This is the binary\nrepresentation of the database. You can think of this like a .jpg file. It won't\nopen up in a text editor, but it does open up in the image viewer app. It is the\nsame way for .db files. They won't open in your editor, but they can be read by\nthe appropriate database engine.\u003c/p\u003e\n\n\u003cp\u003eLet's add some cats to our \u003ccode\u003ecats\u003c/code\u003e table to make this more interesting. Get back\nto the \u003ccode\u003esqlite\u003c/code\u003e prompt by running \u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e again. Then execute\neach of the following INSERT commands:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Maru\", 3 , \"Scottish Fold\", 1);\u003cbr\u003eINSERT INTO cats (name, age, breed, owner_id) VALUES (\"Hana\", 1 , \"Tabby\", 1);\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Lil\\' Bub\", 5, \"American Shorthair\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Moe\", 10, \"Tabby\");\u003cbr\u003eINSERT INTO cats (name, age, breed) VALUES (\"Patches\", 2, \"Calico\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's check out our \u003ccode\u003ecats\u003c/code\u003e table now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1|Maru|3|Scottish Fold|1\u003cbr\u003e2|Hana|1|Tabby|1\u003cbr\u003e3|Lil\\' Bub|5|American Shorthair|\u003cbr\u003e4|Moe|10|Tabby|\u003cbr\u003e5|Patches|2|Calico|\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e You can format the output of your select statements with a few\nhelpful options:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e.headers on      # output the name of each column\n.mode column     # now we are in column mode, enabling us to run the next two .width commands\n.width auto      # adjusts and normalizes column width\u003cbr\u003e# or\n.width NUM1, NUM2 # customize column width\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the first two commands and then execute the above \u003ccode\u003eSELECT\u003c/code\u003e statement again\nand you should see something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed          owner_id  \u003cbr\u003e----------  ----------  ----------  -------------  ----------\u003cbr\u003e1           Maru        3           Scottish Fold  1\u003cbr\u003e2           Hana        1           Tabby          1\u003cbr\u003e3           Lil\\' Bub   5           American Shor\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e5           Patches     2           Calico\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eORDER BY\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe first query modifier we'll explore is \u003ccode\u003eORDER BY\u003c/code\u003e. This modifier allows us to\norder the table rows returned by a certain \u003ccode\u003eSELECT\u003c/code\u003e statement. Here's a\nboilerplate \u003ccode\u003eSELECT\u003c/code\u003e statement that uses \u003ccode\u003eORDER BY\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name FROM table_name ORDER BY column_name ASC|DESC;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's select our cats and order them by age:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY age;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e2           Hana        1           Tabby       1\u003cbr\u003e5           Patches     2           Calico\u003cbr\u003e1           Maru        3           Scottish F  1\u003cbr\u003e3           Lil\\' Bub   5           American S\u003cbr\u003e4           Moe         10          Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003eORDER BY\u003c/code\u003e, the default is to order in ascending order. If we want to\nspecify though, we can use \u003ccode\u003eASC\u003c/code\u003e for \"ascending\" or \u003ccode\u003eDESC\u003c/code\u003e for \"descending.\"\nLet's try to select all of our cats and sort them by age in descending order.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY age DESC;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e3           Lil\\' Bub   5           American S\u003cbr\u003e1           Maru        3           Scottish F  1\u003cbr\u003e5           Patches     2           Calico\u003cbr\u003e2           Hana        1           Tabby       1\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eLIMIT\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWhat if we want the oldest cat? If we want to select extremes from a database\ntable — for example, the employee with the highest paycheck or the patient\nwith the most recent appointment — we can use \u003ccode\u003eORDER BY\u003c/code\u003e in conjunction\nwith \u003ccode\u003eLIMIT\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eLIMIT\u003c/code\u003e is used to determine the number of records you want to return from a dataset. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY age DESC LIMIT 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis part of the statement: \u003ccode\u003eSELECT * FROM cats ORDER BY age DESC\u003c/code\u003e returns all\nof the cats in order from oldest to youngest. Setting a \u003ccode\u003eLIMIT\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e returns\njust the first, i.e. oldest, cat on the list.\u003c/p\u003e\n\n\u003cp\u003eExecute the above statement in your terminal and you should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e4           Moe         10          Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's get the two oldest cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats ORDER BY age DESC LIMIT 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExecute that statement and you should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e3           Lil\\' Bub   5           American S\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAs we've already established, being able to sort and select specific data sets\nis important. Continuing on with our example, let's say we urgently need to\nselect all of the cats whose age is between 1 and 3. To create such a query, we\ncan use \u003ccode\u003eBETWEEN\u003c/code\u003e. Here's a boilerplate \u003ccode\u003eSELECT\u003c/code\u003e statement using \u003ccode\u003eBETWEEN\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's try it out on our \u003ccode\u003ecats\u003c/code\u003e table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT name FROM cats WHERE age BETWEEN 1 AND 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMaru\u003cbr\u003eHana\u003cbr\u003ePatches\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eNULL\u003c/h3\u003e\n\n\u003cp\u003eLet's say the administrator of our Pets Database has found a new cat. This kitty\ndoesn't have a name yet, but should be added to our database right away. We can\nadd data with missing values using the \u003ccode\u003eNULL\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003cp\u003eLet's insert our new cat into the database. Our abandoned kitty has a breed, but\nno name or age as of yet:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed) VALUES (NULL, NULL, \"Tabby\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if we look at our \u003ccode\u003ecats\u003c/code\u003e data with \u003ccode\u003eSELECT * FROM cats;\u003c/code\u003e, we should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed          owner_id  \u003cbr\u003e----------  ----------  ----------  -------------  ----------\u003cbr\u003e1           Maru        3           Scottish Fold  1\u003cbr\u003e2           Hana        1           Tabby          1\u003cbr\u003e3           Lil\\' Bub   5           American Shor\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e5           Patches     2           Calico\u003cbr\u003e6                                   Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can even select the mysterious, nameless kitty with the following query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE name IS NULL;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed       owner_id  \u003cbr\u003e----------  ----------  ----------  ----------  ----------\u003cbr\u003e6                                   Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eCOUNT\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eNow, we'll talk about a SQL aggregate function, \u003ccode\u003eCOUNT\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSQL aggregate functions\u003c/strong\u003e are SQL statements that operate on groups of records\nin our database rather than individual records. For example, we can retrieve\nminimum and maximum values from a column, sum values in a column, get the\naverage of a column's values, or count a number of records that meet certain\nconditions. You can learn more about these SQL aggregators\n\u003ca href=\"http://www.sqlclauses.com/sql+aggregate+functions\"\u003ehere\u003c/a\u003e and\n\u003ca href=\"http://zetcode.com/db/sqlite/select/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor now, we'll just focus on \u003ccode\u003eCOUNT\u003c/code\u003e. \u003ccode\u003eCOUNT\u003c/code\u003e will count the number of records\nthat meet a certain condition. Here's a boilerplate SQL query using \u003ccode\u003eCOUNT\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e \"SELECT COUNT([column name]) FROM [table name] WHERE [column name] = [value]\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's try it out and count the number of cats who have an \u003ccode\u003eowner_id\u003c/code\u003e of \u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT COUNT(owner_id) FROM cats WHERE owner_id = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCOUNT(owner_id)\u003cbr\u003e---------------\u003cbr\u003e2\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eGROUP BY\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eLastly, we'll talk about the handy aggregate function \u003ccode\u003eGROUP BY\u003c/code\u003e. Like its name\nsuggests, it groups your results by a given column.\u003c/p\u003e\n\n\u003cp\u003eLet's take our table of cats\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid          name        age         breed          owner_id  \u003cbr\u003e----------  ----------  ----------  -------------  ----------\u003cbr\u003e1           Maru        3           Scottish Fold  1\u003cbr\u003e2           Hana        1           Tabby          1\u003cbr\u003e3           Lil\\' Bub   5           American Shor\u003cbr\u003e4           Moe         10          Tabby\u003cbr\u003e5           Patches     2           Calico\u003cbr\u003e6                                   Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we can see at a glance that there are three tabby cats and one of every\nother breed — but what if we had a larger database where we couldn't\neasily see the number of cats \u003cem\u003egrouped by\u003c/em\u003e breed? That's where — you\nguessed it! — \u003ccode\u003eGROUP BY\u003c/code\u003e comes in handy.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT breed, COUNT(breed) FROM cats GROUP BY breed;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebreed               COUNT(breed)\u003cbr\u003e------------------  ------------\u003cbr\u003eAmerican Shorthair  1\u003cbr\u003eCalico              1\u003cbr\u003eScottish Fold       1\u003cbr\u003eTabby               3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGROUP BY is a great function for aggregating results into different segments\n— you can even use it on multiple columns!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT breed, owner_id, COUNT(breed) FROM cats GROUP BY breed, owner_id;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBelow you can see that the cats are still grouped by breed but are also now\nfurther broken down by owner\u003cem\u003eid, so the two tabby cats without an owner\u003c/em\u003eid are\nlisted separately from the tabby who belongs to owner 1.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebreed               owner_id    COUNT(breed)\u003cbr\u003e------------------  ----------  ------------\u003cbr\u003eAmerican Shorthair              1\u003cbr\u003eCalico                          1\u003cbr\u003eScottish Fold       1           1\u003cbr\u003eTabby                           2\u003cbr\u003eTabby               1           1\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eNote on \u003ccode\u003eSELECT\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eWe are now familiar with this syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT name FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, you may not know that this can be written like this as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT cats.name FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBoth return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename\u003cbr\u003e----------\u003cbr\u003eMaru\u003cbr\u003eHana\u003cbr\u003eLil\\' Bub\u003cbr\u003eMoe\u003cbr\u003ePatches\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSQLite allows us to explicitly state the tableName.columnName we want to select. This is particularly useful when we want data from two different tables.\u003c/p\u003e\n\n\u003cp\u003eImagine we have another table called \u003ccode\u003edogs\u003c/code\u003e with a column for the dog names:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE dogs (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO dogs (name) VALUES (\"Clifford\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we want to get the names of all the dogs and cats, we can no longer run a\nquery with just the column name. \u003ccode\u003eSELECT name FROM cats,dogs;\u003c/code\u003e will return\n\u003ccode\u003eError: ambiguous column name: name\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eInstead, we must explicitly follow the tableName.columnName syntax.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT cats.name, dogs.name FROM cats, dogs;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou may see this in the future. Don't let it trip you up.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-arrays","title":"Introduction to Arrays","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine arrays in Ruby. \u003c/li\u003e\n\u003cli\u003eLearn why arrays are useful. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is an Array?\u003c/h2\u003e\n\n\u003cp\u003eImagine you are going apple picking. It's a beautiful fall day and you're picking apple after apple. However, you only have two hands. You're holding 2, 3, 4, even 5 apples but you just can't carry any more. Luckily, you've brought along a basket to contain your apples. \u003c/p\u003e\n\n\u003cp\u003eAn array is like a basket––it is a container for a collection of data. Let's take a closer look with the help of the following example.\u003c/p\u003e\n\n\u003cp\u003eSo far, we've used variables to store information. For example, I could create a variable called \u003ccode\u003emy_name\u003c/code\u003e and set it equal to my name: \u003ccode\u003emy_name = \"Severus Snape\"\u003c/code\u003e. However, variables only allow us to store one piece of information at a time. \u003c/p\u003e\n\n\u003cp\u003eWhat if my boss, Headmaster Dumbledore, asks me to deliver the names of all of my students? I could create a bunch of variables like this: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudent1 = \"Harry Potter\"\u003cbr\u003estudent2 = \"Ron Weasley\"\u003cbr\u003estudent3 = \"Hermione Granger\"\u003cbr\u003estudent4 = \"Draco Malfoy\"\u003cbr\u003e\u003cbr\u003eetc...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, I could write a program that passes around these variables \u003cem\u003eone at a time\u003c/em\u003e. This seems messy though. I could easily forget about a student, for example. Or need to create a new student and then have to hunt through my program for every place I ever passed around all of these individual variables. \u003c/p\u003e\n\n\u003cp\u003eIf this was real life, Professor Snape would probably just write down all the students in list form and hand that list to Dumbledore. Well, in Ruby, we can do the same thing using an array.\u003c/p\u003e\n\n\u003ch3\u003eArray Definition\u003c/h3\u003e\n\n\u003cp\u003eAn array is like a list but in code form. It is a way for your program to store pieces of data as a \u003cem\u003ecollection\u003c/em\u003e. Arrays can contain any data types in any combination––strings, integers, other arrays, hashes, etc. \u003c/p\u003e\n\n\u003cp\u003eArrays are declared by listing variable names or literals separated by commas (\u003ccode\u003e,\u003c/code\u003e) and wrapped in square brackets \u003ccode\u003e[]\u003c/code\u003e. To save our four students from above into an array, we write that in our code like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudents = [\"Harry Potter\", \"Ron Weasley\", \"Hermione Granger\", \"Draco Malfoy\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eWhy Use Arrays\u003c/h2\u003e\n\n\u003cp\u003eArrays store information in list form. It's hard to imagine a program you will write in which you \u003cem\u003ewon't\u003c/em\u003e be dealing with collections of data. Whether you're making a command line game or writing a large-scale web application with many users, data is the name of the game. You may need to list the players of your game and their scores, you may need to list the users of your application. You might have an application that connects doctors and their patients and therefore lists the patients of an individual doctor. This list goes on (pun intended). \u003c/p\u003e\n\n\u003cp\u003eArrays allow us to store a collection of information in one organized place. Arrays can be named, i.e. set equal to a variable, and we can access data from an array, add data to an array or change the data that is already stored in an array. \u003c/p\u003e","frontPage":false},{"exportId":"booleans","title":"Booleans","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"booleans-ruby-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/booleans-ruby-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/booleans-ruby-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/booleans-ruby-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eReview the concept of boolean values.\u003c/li\u003e\n\u003cli\u003eUse boolean operators and identify their return values.\u003c/li\u003e\n\u003cli\u003eUse comparison operators and identify their return values.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBooleans\u003c/h2\u003e\n\n\u003cp\u003eWe've already learned a bit about the boolean (true-or-false) data type. In Ruby, a boolean refers to a value of either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, both of which are defined as their very own data types. Every appearance, or instance, of \u003ccode\u003etrue\u003c/code\u003e in a Ruby program is an instance of \u003ccode\u003eTrueClass\u003c/code\u003e, while every appearance of \u003ccode\u003efalse\u003c/code\u003e is an instance of \u003ccode\u003eFalseClass\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor now, we don't need to understand the concept of classes in depth. Just know that classes serve as templates for Ruby objects. Think of \u003ccode\u003eTrueClass\u003c/code\u003e and \u003ccode\u003eFalseClass\u003c/code\u003e like cookie cutters––there is a \u003ccode\u003eTrueClass\u003c/code\u003e cookie cutter and a \u003ccode\u003eFalseClass\u003c/code\u003e cookie cutter and every appearance of \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e is like a cookie made with its respective cookie cutter.\u003c/p\u003e\n\n\u003ch2\u003eBoolean Operators\u003c/h2\u003e\n\n\u003cp\u003eHow do we create boolean values in a Ruby program? Well, you can actually type \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e \u003cem\u003eor\u003c/em\u003e we can write statements that \u003cem\u003ereturn\u003c/em\u003e \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Now that we understand the concept of \"truthiness\"—that certain types of data are \"truthy\" and certain others are \"falsey\"—we can understand how to write such statements.\u003c/p\u003e\n\n\u003cp\u003eWe already know that Strings are one type of data that are truthy. Drop into IRB and use \u003ccode\u003e!!\u003c/code\u003e (the \"double-bang operator\") to determine that the string \u003ccode\u003e\"hi\"\u003c/code\u003e is truthy:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!!\"hi\" #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote:\u003c/em\u003e You may see a warning regarding String literals when you run the above code. Ignore it! Ruby is just reminding us that it is a little strange to use the literal string \u003ccode\u003e\"hi\"\u003c/code\u003e in a statement, instead of saving it to a variable first. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estring = \"hi\"\u003cbr\u003e!!string #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe used the literal string in this example though to highlight the \"truthy\" nature of strings.\u003c/p\u003e\n\n\u003cp\u003eIn the next unit, we will learn how to use the native truthiness of data types like strings to write statements that return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFirst, we're going to learn how to use \u003cstrong\u003eboolean operators\u003c/strong\u003e to write statements that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWhat are Boolean Operators?\u003c/h3\u003e\n\n\u003cp\u003eBoolean operators are really methods which means that they have return values. What do they return? \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e of course!\u003c/p\u003e\n\n\u003cp\u003eIn Ruby there are three main boolean operators:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e!\u003c/code\u003e (\"single-bang\") which represents \"NOT\",\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (\"double-ampersand\") which represents \"AND\", and\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e||\u003c/code\u003e (\"double-pipe\") which represents \"OR\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor an \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (\"and\") to evaluate to \u003ccode\u003etrue\u003c/code\u003e, both values of either side of the symbol must evaluate to \u003ccode\u003etrue\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etrue \u0026amp;\u0026amp; true #=\u0026gt; true\u003cbr\u003e\u003cbr\u003etrue \u0026amp;\u0026amp; false #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor an \u003ccode\u003e||\u003c/code\u003e (\"or\") to evaluate to \u003ccode\u003etrue\u003c/code\u003e, only one value on either side of the symbol must evaluate to \u003ccode\u003etrue\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efalse || true #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, a \u003ccode\u003e!\u003c/code\u003e (\"not\") reverses the logical state of its operand: if a condition is \u003ccode\u003etrue\u003c/code\u003e, then \u003ccode\u003e!\u003c/code\u003e will make it \u003ccode\u003efalse\u003c/code\u003e; if it is \u003ccode\u003efalse\u003c/code\u003e, then \u003ccode\u003e!\u003c/code\u003e will make it \u003ccode\u003etrue\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e!true #=\u0026gt; false\u003cbr\u003e\u003cbr\u003e!false #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eComparison Operators\u003c/h2\u003e\n\n\u003cp\u003eTo check if two values are equal, we use the \u003cem\u003ecomparison operator\u003c/em\u003e represented with \u003ccode\u003e==\u003c/code\u003e (\"double-equal-sign\"). If two values are equal, then the statement will return \u003ccode\u003etrue\u003c/code\u003e. If they are not equal, then it will return \u003ccode\u003efalse\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 == 1 #=\u0026gt; true\u003cbr\u003e\u003cbr\u003e1 == 7 #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e \u003cem\u003eThe comparison operator\u003c/em\u003e \u003ccode\u003e==\u003c/code\u003e \u003cem\u003eis distinct from the assignment operator\u003c/em\u003e \u003ccode\u003e=\u003c/code\u003e \u003cem\u003ethat is used to set a variable equal to a value. Mistaking these for each other is a common cause of unexpected behavior.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eMore Comparison Operators\u003c/h2\u003e\n\n\u003cp\u003eRuby is good at comparing things. For instance, it knows that \u003ccode\u003e14\u003c/code\u003e is larger than \u003ccode\u003e3\u003c/code\u003e. Let's see that in action.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e14 \u0026gt; 3 #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, \u003ccode\u003e14\u003c/code\u003e is larger than \u003ccode\u003e3\u003c/code\u003e, so Ruby evaluates this to \u003ccode\u003etrue\u003c/code\u003e. Comparisons in Ruby always evaluate to \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe commonly used comparison operators are:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003eOperator\u003c/th\u003e\n    \u003cth\u003eOperation\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e==\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the values of the two operands are \u003cem\u003eequal\u003c/em\u003e, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e!=\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the values of the two operands are \u003cem\u003enot equal\u003c/em\u003e, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e  \n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the value of the left operand is \u003cem\u003egreater than\u003c/em\u003e the value of the right operand, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the value of the left operand is \u003cem\u003eless than\u003c/em\u003e the value of the right operand, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the value of the left operand is \u003cem\u003egreater than or equal to\u003c/em\u003e the value of the right operand, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003eIf the value of the left operand is \u003cem\u003eless than or equal to\u003c/em\u003e the value of the right operand, then the evaluation is \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eRuby can compare a lot more than just numbers. It can also compare strings:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"yellow\" == \"yellow\" #=\u0026gt;true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd variables with known values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy_mood = \"happy\"\u003cbr\u003e\u003cbr\u003emy_mood == \"happy\" #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt can also compare variables against other variables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eeaster_eggs = 16\u003cbr\u003educklings = 3\u003cbr\u003e\u003cbr\u003eeaster_eggs \u0026gt; ducklings #=\u0026gt; true\u003cbr\u003e\u003cbr\u003educklings \u0026gt;= easter_eggs #=\u0026gt; false\u003cbr\u003e\u003cbr\u003educklings == easter_eggs #=\u0026gt; false\u003cbr\u003e\u003cbr\u003e# if you call class on a variable, you can see if it's a string, an integer, etc.\u003cbr\u003e\u003cbr\u003educklings.class #=\u0026gt; Fixnum\u003cbr\u003eeaster_eggs.class #=\u0026gt; Fixnum\u003cbr\u003educklings.class == easter_eggs.class #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eComparison operators are essential to developing logical flow.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-active-record-associations","title":"Introduction to Active Record Associations","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-associations-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003ePreviously, we worked through object-relational mapping and building Ruby\nclasses that can represent SQL records. Active Record is like an automation and\nsimplification of those concepts.\u003c/p\u003e\n\n\u003cp\u003eActive Record is the interface that gives you the tools to link a database to your\napplication. It lets you structure your data models in a logical and nearly\nplain-English way.\u003c/p\u003e\n\n\u003cp\u003eWe'll cover topics that will include answers to these questions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat are the advantages of using Active Record?\u003c/li\u003e\n\u003cli\u003eWhat are the features of Rake?\u003c/li\u003e\n\u003cli\u003eWhat are common methods accessible through Active Record associations?\u003c/li\u003e\n\u003cli\u003eHow do you use association macros?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHaving a solid understanding of Active Record will make persisting data much\neasier. This will replace the need for a lot of the custom code we wrote in when\ncreating ORMs. We’ll cover working with models, setting them up, and building\nassociations between them. Over the next several lessons, we'll explain Active\nRecord and work through a few labs that will help reinforce these concepts.\u003c/p\u003e","frontPage":false},{"exportId":"video-scraping-and-orms","title":"Video: Scraping and ORMs","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orm-video-review-codealong-building-a-room-scraper-and-orm\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-codealong-building-a-room-scraper-and-orm/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-codealong-building-a-room-scraper-and-orm\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-codealong-building-a-room-scraper-and-orm/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eCodealong, Building a Room Scraper and ORM- Overview\u003c/h2\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/1eIgKGukBlg?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eAny other comments or feedback you have? Raise an issue and let us know. \u003c/p\u003e","frontPage":false},{"exportId":"looping-with-while-and-until","title":"Looping with While and Until","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"while-and-until-looping-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/while-and-until-looping-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/while-and-until-looping-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/while-and-until-looping-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe the \u003ccode\u003ewhile\u003c/code\u003e construct and how it implements looping\u003c/li\u003e\n\u003cli\u003eDescribe the \u003ccode\u003euntil\u003c/code\u003e looping construct \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003e\u003ccode\u003ewhile\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003ewhile\u003c/code\u003e construct is a little different from the loop construct that we looked at earlier. The \u003ccode\u003ewhile\u003c/code\u003e construct will keep executing a block as long as a specific condition is \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a long and repetitiously-counting code that uses \u003ccode\u003eif\u003c/code\u003e statements to count from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e20\u003c/code\u003e and outputs \"The current number is less than 20.\" if so. Well, we can refactor that into simple, readable, \u003cem\u003eshort\u003c/em\u003e code with the \u003ccode\u003ewhile\u003c/code\u003e construct:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecounter = 0\u003cbr\u003ewhile counter \u0026lt; 20\u003cbr\u003e  puts \"The current number is less than 20.\"\u003cbr\u003e  counter += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThink about the above code like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e While it is true that the variable \u003ccode\u003ecounter\u003c/code\u003e is set to a value that is less than \u003ccode\u003e20\u003c/code\u003e, execute the code in the block.\u003c/li\u003e\n\u003cli\u003e Inside the block, \u003ccode\u003eputs\u003c/code\u003e a phrase, and increment the counter by one.\u003c/li\u003e\n\u003cli\u003e Go back to the top! Check to see if the \u003ccode\u003ecounter\u003c/code\u003e is less than \u003ccode\u003e20\u003c/code\u003e. If it is true that the value is less than \u003ccode\u003e20\u003c/code\u003e, go back into the block. Otherwise, break out of the loop and don't execute the code inside the loop.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe can achieve all of that with just a few lines of code utilizing a \u003ccode\u003ewhile\u003c/code\u003e construct. Go ahead and copy and paste the above code in irb. \u003c/p\u003e\n\n\u003ch2\u003eExamples\u003c/h2\u003e\n\n\u003ch3\u003eBasic \u003ccode\u003ewhile\u003c/code\u003e Example: Hot Dog Eating Contest\u003c/h3\u003e\n\n\u003cp\u003eLet's say you are a world famous competitive eater participating in the Coney Island Nathan's Hot Dog Eating Contest in Brooklyn, NY. You're kind of new to the competitive eating game though, so you only have the capacity for seven (7) hot dogs.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enum_of_hotdogs_eaten = 0\u003cbr\u003e# =\u0026gt; 0 (return value)\u003cbr\u003e\u003cbr\u003ewhile num_of_hotdogs_eaten \u0026lt; 7\u003cbr\u003e  num_of_hotdogs_eaten += 1\u003cbr\u003e  puts \"You have now eaten #{num_of_hotdogs_eaten} hot dog(s).\"\u003cbr\u003eend\u003cbr\u003e# =\u0026gt; nil (return value)\u003cbr\u003e\u003cbr\u003eputs \"You ate a total of #{num_of_hotdogs_eaten} hot dogs!\"\u003cbr\u003e# =\u0026gt; nil (return value)\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"You have now eaten 1 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 2 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 3 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 4 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 5 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 6 hot dog(s).\"\u003cbr\u003e# \u0026gt; \"You have now eaten 7 hot dog(s).\"\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"You ate a total of 7 hot dogs!\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003e\u003ccode\u003euntil\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eUntil\u003c/code\u003e is simply the inverse of a \u003ccode\u003ewhile\u003c/code\u003e loop. An \u003ccode\u003euntil\u003c/code\u003e keyword will keep executing a block \u003cem\u003euntil a specific condition is true\u003c/em\u003e. In other words, the block of code following \u003ccode\u003euntil\u003c/code\u003e will execute while the condition is false. One helpful way to think about it is to read \u003ccode\u003euntil\u003c/code\u003e as \"if not\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecounter = 0\u003cbr\u003euntil counter == 20\u003cbr\u003e  puts \"The current number is less than 20.\"\u003cbr\u003e  counter += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eThe counter once again starts at \u003ccode\u003e0\u003c/code\u003e. If it is \u003cem\u003enot\u003c/em\u003e true that the counter is equal to \u003ccode\u003e20\u003c/code\u003e, the program will execute the code in the block.\u003c/li\u003e\n\u003cli\u003eInside the block, we will \u003ccode\u003eputs\u003c/code\u003e a phrase and increment the counter by \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThen, the program will go back to the top of the \u003ccode\u003euntil\u003c/code\u003e loop and once again check to see if the counter is equal to \u003ccode\u003e20\u003c/code\u003e. If it is \u003cem\u003enot\u003c/em\u003e true that the counter is equal to \u003ccode\u003e20\u003c/code\u003e, then the program will continue executing the code in the block. Otherwise, the program will break out of the loop.\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-getting-remote-data","title":"Introduction to Getting Remote Data","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"getting-remote-data-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eApplications often need to talk to one another. When you go to apply for a job,\nsometimes you will see an option that allows you to import your profile from\nLinkedIn. What’s happening here is the site you’re using is talking to LinkedIn,\nand requesting some information. If you've ever seen a Google map inside of\nanother website or app such as Yelp--you're accessing remote data from a 3rd\nparty source.\u003c/p\u003e\n\n\u003cp\u003eThis data can be very useful. You can pick and choose what parts of an\napplication you want to use without trawling through an entire codebase. You can\nadd a lot of interesting functionality into simple apps.\u003c/p\u003e\n\n\u003cp\u003eWe'll discuss the answers to the following questions along the way:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat is an API?\u003c/li\u003e\n\u003cli\u003eHow can APIs be used?\u003c/li\u003e\n\u003cli\u003eHow do you find the API endpoint?\u003c/li\u003e\n\u003cli\u003eHow do you send a request to an API?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next couple of lessons, we'll talk about leveraging remote data in our\napplications.\u003c/p\u003e","frontPage":false},{"exportId":"complex-objects-conclusion","title":"Complex Objects Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-complex-objects-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this section, we have learned that classes act as blueprints for objects.\nWhen we define a class, we decide what attributes and behaviors (methods) should\nbe associated with the objects. Then when instances of the class are created \nthey have those state and behavioral properties.\u003c/p\u003e\n\n\u003cp\u003eWe worked through a few tasks such as:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eCreating a domain model with different types of object associations\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWriting instance methods that manipulate nested data structures\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuilding a fully functional object-oriented program\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe also introduced code design principles that object-oriented programmers\ncommonly use. With this knowledge, we are able to use the domain model to write\nmaintainable code in larger scale applications.\u003c/p\u003e","frontPage":false},{"exportId":"aggregate-functions","title":"Aggregate Functions","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-aggregate-functions-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover basic aggregate functions and how to write SQL queries that utilize them.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine aggregate functions and when to use them\u003c/li\u003e\n\u003cli\u003eUse the following aggregate functions in SQL queries: \u003ccode\u003eaverage\u003c/code\u003e, \u003ccode\u003esum\u003c/code\u003e,\n\u003ccode\u003ecount\u003c/code\u003e, \u003ccode\u003eminimum\u003c/code\u003e, \u003ccode\u003emaximum\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOperating on Data\u003c/h2\u003e\n\n\u003cp\u003eImagine writing an application for a restaurant owner to track her customers and\ntransactions, or an app that an e-commerce company uses to store users,\ntransactions and shopping behaviors. Think about creating a social networking\napplication whose administrators want to keep track of the number of times users\nlog on to identify who their most frequent users are. It's easy to see that\nstoring or persisting information in an application or program is about more\nthan just keeping track of static data. We can imagine any number of situations\nin which we want to operate on or analyze the data we store. Our restaurant\nowner will want to discover who her biggest spenders are or what they make on\naverage over a busy weekend. Our e-commerce company wants to know who their most\nfrequent buyers are and how much they spend on average on a given item, and so\non.\u003c/p\u003e\n\n\u003cp\u003eWe can do so using the aggregate functions that SQL makes available to us. With\nthese functions we can sum and average column data, request minimum and maximum\nvalues, and more. SQL also includes keywords that allow us to group aggregated\ndata by various categories and narrow our search criteria based on various\nconditions.\u003c/p\u003e\n\n\u003ch2\u003eAggregate Functions\u003c/h2\u003e\n\n\u003cp\u003eAggregate functions perform a calculation on specified values, queried from a\ndatabase table. We will cover the following aggregators here:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eAVG\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSUM\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCOUNT\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMIN\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMAX\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe'll craft queries that select a desired set of values from a table and then\naggregate that data using the above aggregators, in addition to clauses that\nwill group and/or order the returned data based on various conditions.\u003c/p\u003e\n\n\u003cp\u003eFor this walk-through, we'll be utilizing a database of pets and owners.\u003c/p\u003e\n\n\u003ch2\u003eSetting up the Database\u003c/h2\u003e\n\n\u003cp\u003eSome cats are very famous and, accordingly, very wealthy. Our pets database will\nhave a cats table in which each cat has a name, age, breed, and net worth.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCreating the Database:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eCreate the database in your terminal with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eCreating the table:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003esqlite\u0026gt;\u003c/code\u003e prompt in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  breed TEXT,\u003cbr\u003e  net_worth INTEGER\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eInserting the values:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed, net_worth) VALUES (\"Maru\", 3, \"Scottish Fold\", 1000000);\u003cbr\u003eINSERT INTO cats (name, age, breed, net_worth) VALUES (\"Hana\", 1, \"Tabby\", 21000);\u003cbr\u003eINSERT INTO cats (name, age, breed, net_worth) VALUES (\"Grumpy Cat\", 4, \"Persian\", 181800);\u003cbr\u003eINSERT INTO cats (name, age, breed, net_worth) VALUES (\"Lil' Bub\", 2, \"Tortoiseshell\", 3000000);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eConfirming our Data:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eshould return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename             age         breed          net_worth\u003cbr\u003e---------------  ----------  -------------  ----------\u003cbr\u003eMaru             3           Scottish Fold  1000000\u003cbr\u003eHana             1           Tabby          21000\u003cbr\u003eGrumpy Cat       4           Persian        181800\u003cbr\u003eLil' Bub         2           Tortoiseshell  3000000  \n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUsing Aggregators\u003c/h2\u003e\n\n\u003ch3\u003eCode Along I: \u003ccode\u003eAVG()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe average, \u003ccode\u003eAVG()\u003c/code\u003e, function returns the average value of a column. Here's how\nit works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT AVG(column_name) FROM table_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's write a query to grab the average net worth of our very lucrative cats.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT AVG(net_worth) FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAVG(net_worth)\u003cbr\u003e---------------\u003cbr\u003e1050700.0\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat return value is a little ugly, however. Let's use the \u003ccode\u003eAS\u003c/code\u003e keyword to\nrename the column. This is called \"aliasing the return value\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT AVG(net_worth) AS average_net_worth FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaverage_net_worth\u003cbr\u003e--------------------\u003cbr\u003e1050700.0\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along II: \u003ccode\u003eSUM()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe sum, \u003ccode\u003eSUM()\u003c/code\u003e, function returns the sum of all of the values in a particular\ncolumn.\u003c/p\u003e\n\n\u003cp\u003eHere's how it works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT SUM(column_name) FROM table_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's try it out by calculating the sum of the net worths of all of our cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT SUM(net_worth) FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSUM(net_worth)\u003cbr\u003e--------------------\u003cbr\u003e4202800\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along III: \u003ccode\u003eMIN()\u003c/code\u003e and \u003ccode\u003eMAX()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe minimum and maximum aggregator functions return the minimum and maximum\nvalues from a specified column respectively.\u003c/p\u003e\n\n\u003cp\u003eHere's how it works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT MIN(column_name) FROM table_name;\u003cbr\u003eSELECT MAX(column_name) FROM table_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's try it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT MIN(net_worth) FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMIN(net_worth)\u003cbr\u003e--------------------\u003cbr\u003e21000\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCode Along IV: \u003ccode\u003eCOUNT()\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe count function returns the number of rows that meet a certain condition.\u003c/p\u003e\n\n\u003cp\u003eHere's how it works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT COUNT(column_name) FROM table_name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use the \u003ccode\u003eCOUNT()\u003c/code\u003e function to calculate the total number of rows in a\ntable that are not \u003ccode\u003eNULL\u003c/code\u003e. \u003ccode\u003eNULL\u003c/code\u003e means empty. All of our cats have a \u003ccode\u003ename\u003c/code\u003e so\nwe can call \u003ccode\u003eCOUNT\u003c/code\u003e on the name column like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT COUNT(name) FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCOUNT(name)\u003cbr\u003e--------------------\u003cbr\u003e4\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have a total of four cats in our Cats table with a name. If we really didn't\ncare about a specific column and we just wanted the total number of rows in our\ndatabase we can call \u003ccode\u003eCOUNT(*)\u003c/code\u003e. \u003ccode\u003e*\u003c/code\u003e means everything. Sometimes it's called the\n\"wildcard.\" This \u003ccode\u003eCOUNT(*)\u003c/code\u003e will count the rows where at least one column has\ndata in it.\u003c/p\u003e\n\n\u003cp\u003eWe can also use \u003ccode\u003eCOUNT()\u003c/code\u003e to count the total number of rows in a table that meet\na certain condition. Let's use this aggregator to count the number of cats whose\nnet worth is greater than one million:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT COUNT(*) FROM cats WHERE net_worth \u0026gt; 1000000;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCOUNT(*)\u003cbr\u003e--------------------\u003cbr\u003e1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause only Lil' Bub is \u003cem\u003ethat\u003c/em\u003e rich.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-self","title":"Introduction to Self","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFor newly developing Rubyists, \u003ccode\u003eself\u003c/code\u003e can be a bit baffling. You've learned\nabout the concept of the class, and that each object in Ruby has one. The\nkeyword \u003ccode\u003eself\u003c/code\u003e is a special variable that points to the object that \"owns\" the\ncurrently executing code. You can think of it as a Ruby program asking, \"who am\nI right now?\". Ruby is using the concept of \u003ccode\u003eself\u003c/code\u003e to determine which execution\ncontext to use at any point in the program.\u003c/p\u003e\n\n\u003cp\u003eIn these few lessons, we'll demonstrate:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow the \u003ccode\u003eself\u003c/code\u003e keyword works\u003c/li\u003e\n\u003cli\u003eHow to use \u003ccode\u003eself\u003c/code\u003e within an instance method to refer to the class instance on\nwhich that method is being called\u003c/li\u003e\n\u003cli\u003eThe concept of monkey patching\u003c/li\u003e\n\u003cli\u003eHow to use \u003ccode\u003eattr_accessor\u003c/code\u003e, \u003ccode\u003eattr_reader\u003c/code\u003e, and \u003ccode\u003eattr_writer\u003c/code\u003e as needed\u003c/li\u003e\n\u003cli\u003eHow to implement monkey patching with a class that you've created\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, we're going to talk about how to use \u003ccode\u003eself\u003c/code\u003e, and how to apply\n\u003ccode\u003eself\u003c/code\u003e in a variety of situations.\u003c/p\u003e","frontPage":false},{"exportId":"regex-basics","title":"Regex Basics","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"regex-basics-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/regex-basics-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/regex-basics-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/regex-basics-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the range [a-z] as well as the specific character [abc] matchers\u003c/li\u003e\n\u003cli\u003einterpolate required letter with the ranges/patterns. /[hH]ello/\u003c/li\u003e\n\u003cli\u003eUse backslash special characters like \\w\u003c/li\u003e\n\u003cli\u003eUse backslash as escape\u003c/li\u003e\n\u003cli\u003eUse star, dot, and plus\u003c/li\u003e\n\u003cli\u003eUse rubular.com\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we're going to learn the syntax and basic vocabulary of regular expressions. We'll start simple and build from there. A great place to head for RegEx testing and practice is \u003ca href=\"http://rubular.com/\"\u003eRubular\u003c/a\u003e - it allows you to build and test regular expressions against text that you define. In a separate window, open up Rubular. In the text box entitled \"Your Test String\", paste in the following monologue from Shakespeare's \u003cem\u003eThe Merchant of Venice\u003c/em\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf to do were as easy as to know what were good to do, chapels had been churches and poor men's cottages princes' palaces. It is a good divine that follows his own instructions: I can easier teach twenty what were good to be done, than be one of the twenty to follow mine own teaching. The brain may devise laws for the blood, but a hot temper leaps o'er a cold decree: such a hare is madness the youth, to skip o'er the meshes of good counsel the cripple. But this reasoning is not in the fashion to choose me a husband. O me, the word 'choose!' I may neither choose whom I would nor refuse whom I dislike; so is the will of a living daughter curbed by the will of a dead father. Is it not hard, Nerissa, that I cannot choose one nor refuse none?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe've set this up in \u003ca href=\"http://rubular.com/r/s2jizA9W9V\"\u003eRubular for you here\u003c/a\u003e. Your window should look like this:\n\u003cimg src=\"http://curriculum-content.s3.amazonaws.com/web-development/Regex/rubular_setup.png\" alt=\"rubular setup\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eWriting Regular Expressions\u003c/h2\u003e\n\n\u003cp\u003eIn Ruby, regular expressions are generally written between forward slashes: \u003ccode\u003e/your regex/\u003c/code\u003e. This is the 'literal' alternative to creating a regular expression object using the following syntax: \u003ccode\u003eRegexp.new('your regex')\u003c/code\u003e. In Rubular, you can see that these slashes have already been written for you.\u003c/p\u003e\n\n\u003ch3\u003eSimple Text Matching\u003c/h3\u003e\n\n\u003cp\u003eLet's start with the simplest text matching. Add the following RegEx in rubular:\n\u003ccode\u003e\n/twenty/\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/Regex/twenty.png\" alt=\"twenty regex\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNotice that the pattern matches the two instances of \"twenty\" in the passage. Writing a series of letters or numbers in your regular expression will result in a search for exact matches of this pattern anywhere in the string. \u003c/p\u003e\n\n\u003ch3\u003eMetacharacters\u003c/h3\u003e\n\n\u003cp\u003eThe real beauty of regular expressions is revealed in its use of metacharacters. Metacharacters allow you to use a pre-defined shorthand to match specific characters. For example, \u003ccode\u003e\\d\u003c/code\u003e will match any digit in your text, and \u003ccode\u003e\\w\u003c/code\u003e will match any word character (letters, numbers, and underscores). The 'RegEx Quick Reference' at the bottom of Rubular shows metacharacters and patterns that you can use. Play around with these a little. Use \u003ccode\u003e\\W\u003c/code\u003e (notice uppercasing) to match the non-word characters in your text.\u003c/p\u003e\n\n\u003ch3\u003eOnly specific characters\u003c/h3\u003e\n\n\u003cp\u003eIf I want to match all instances of vowels in a string, the RegEx \u003ccode\u003e/aeiou/\u003c/code\u003e won't work (feel free to try it), as it will only match the entire string \"aeiou\" - which clearly isn't in our text. Instead let's use square brackets: \u003ccode\u003e/[aeiou]/\u003c/code\u003e - this is looking for only \u003cstrong\u003eone single\u003c/strong\u003e character in our text which matches any of the characters inside the square brackets. If you add this RegEx to our rubular, you'll see every vowel highlighted in your match result.\u003c/p\u003e\n\n\u003ch3\u003eRanges\u003c/h3\u003e\n\n\u003cp\u003eBased on what we've just learned, we can write a regular expression looking for single characters in the first 10 letters of the alphabet like so:\u003ccode\u003e/[abcdefghij]/\u003c/code\u003e\nWe can actually shorten this in Ruby using a RegEx range:\u003ccode\u003e/[a-j]/\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e[0123456789]\u003c/code\u003e becomes \u003ccode\u003e[0-9]\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eExample: Double Vowels\u003c/h3\u003e\n\n\u003cp\u003eThere are many other metacharacters and ways of building patterns in RegEx, many of which you can refer in the Rubular quick reference guide. However, the best way to actually learn to use regular expressions is to practice building your own patterns. Let's look for instances in our text of two consecutive vowels (for example, 'ae', 'ie', 'oo', etc). The longest way to do this is to hand code the different combinations of two vowels:\u003ccode\u003e/aa|oo|ee|ii|uu|ae|ea|ou|ie|ei|eo|oe/\u003c/code\u003e. It's pretty tedious to hand code each of these combinations (I didn't finish). An improvement is to use two sets of square brackets with vowels, each one representing a single character: \u003ccode\u003e/[aeiou][aeiou]/\u003c/code\u003e. Our most efficient, however, is to use repetitions: \u003ccode\u003e/[aeiou]{2}/\u003c/code\u003e The curly braces surrounding mean that the pattern or character directly preceding it must repeat that number of times. As such, we're looking for a repeat of a vowel two times. As you can see, there are many ways to write a regular expression that does the same thing. \u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://rubular.com/\"\u003eRubular\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://regexone.com/\"\u003eRegEx One\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://regex.alf.nu/\"\u003eRegEx Golf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.regexr.com/\"\u003eRegExr\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"object-initialization","title":"Object Initialization","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-object-initialization\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWhat is the \u003ccode\u003e#initialize\u003c/code\u003e method?\u003c/li\u003e\n\u003cli\u003eHow does it work?\u003c/li\u003e\n\u003cli\u003eWhat do we use it for?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstantiating Instances of Classes\u003c/h2\u003e\n\n\u003cp\u003eWe've already seen new instances of classes being created with the \u003ccode\u003e#new\u003c/code\u003e method. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe code above creates a new instance of the \u003ccode\u003eDog\u003c/code\u003e class and sets that object equal to a variable, \u003ccode\u003esnoopy\u003c/code\u003e. If we want to give our dog a breed, we have to use the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def breed=(breed)\u003cbr\u003e    @breed = breed\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def breed\u003cbr\u003e    @breed\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new #=\u0026gt; #\u003cbr\u003esnoopy.breed #=\u0026gt; nil\u003cbr\u003esnoopy.breed = \"Beagle\"\u003cbr\u003esnoopy.breed #=\u0026gt; \"Beagle\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, most dogs are born \u003cem\u003ewith\u003c/em\u003e a breed, not assigned a breed afterwards. How can we model the behavior of dogs being born with a breed in our \u003ccode\u003eDog\u003c/code\u003e class? If only there was a way for us to assign an individual dog a breed automatically upon creation, or instantiation.\u003c/p\u003e\n\n\u003cp\u003eLucky for us, there is! It's called the \u003ccode\u003e#initialize\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch2\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e Method\u003c/h2\u003e\n\n\u003cp\u003eWe already know that any Ruby class can produce new instances of itself, via the \u003ccode\u003e\u0026lt;Class Name\u0026gt;.new\u003c/code\u003e method, whether or not that class has an \u003ccode\u003e#initialize\u003c/code\u003e method. However, if we want each instance of our class to be created with certain attributes, we must define an \u003ccode\u003e#initialize\u003c/code\u003e method. An \u003ccode\u003e#initialize\u003c/code\u003e method is a method that is called automatically whenever \u003ccode\u003e#new\u003c/code\u003e is used.\u003c/p\u003e\n\n\u003cp\u003eLet's define an \u003ccode\u003e#initialize\u003c/code\u003e method that takes in an argument of a dog's breed and sets a \u003ccode\u003e@breed\u003c/code\u003e variable equal to that argument. In other words, let's define our \u003ccode\u003e#initialize\u003c/code\u003e method to contain the functionality of the \u003ccode\u003e#breed=\u003c/code\u003e method, so that a dog instance will get a breed assigned to it right away when it is created, without us having to explicitly use the \u003ccode\u003e#breed=\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch3\u003eDefining an \u003ccode\u003e#initialize\u003c/code\u003e method\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def initialize(breed)\u003cbr\u003e    @breed = breed\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def breed=(breed)\u003cbr\u003e    @breed = breed\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def breed\u003cbr\u003e    @breed\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we can call \u003ccode\u003e#new\u003c/code\u003e like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elassie = Dog.new(\"Collie\")\u003cbr\u003e\u003cbr\u003elassie.breed #=\u0026gt; \"Collie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eHow does it work?\u003c/h3\u003e\n\n\u003cp\u003eWhen \u003ccode\u003e#new\u003c/code\u003e is called with an argument, it will pass that argument (or arguments) to the \u003ccode\u003e#initialize\u003c/code\u003e method and invoke that method. The code in \u003ccode\u003e#initialize\u003c/code\u003e will then run, using any arguments from \u003ccode\u003e#new\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe initialize method is automatically invoked every time the \u003ccode\u003e#new\u003c/code\u003e method is used to create a new instance of the class.\u003c/p\u003e\n\n\u003cp\u003eYou can also think of the initialize method as a constructor method. A constructor method is invoked upon the creation of an instance of a class and used to help define the instance of that class.\u003c/p\u003e\n\n\u003cp\u003eSo, because of how we defined our initialize method, every time you type \u003ccode\u003eDog.new(\"some breed\")\u003c/code\u003e, a new dog instance is created that has a breed of \"some breed\" (i.e. whatever string you give the \u003ccode\u003e#new\u003c/code\u003e method).\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=UysgBTrJoTc\"\u003eVideo Review- Intro to OO\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"class-variables-and-methods","title":"Class Variables and Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-and-class-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a class variable. \u003c/li\u003e\n\u003cli\u003eDefine a class method. \u003c/li\u003e\n\u003cli\u003eUnderstand why and when to use class variables and methods. \u003c/li\u003e\n\u003cli\u003eUnderstand the scope of class variables and class methods. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction: Classes are Objects Too\u003c/h2\u003e\n\n\u003cp\u003eAll objects are bundles of data and logic––or attributes and behavior. We understand this to be true of instances of a class. Each instance contains attributes or properties as well as methods that can enact behaviors. \u003c/p\u003e\n\n\u003cp\u003eFor example, let's say we have a class, \u003ccode\u003eAlbum\u003c/code\u003e. Every individual album instance should have a release date attribute. To accomplish this, we'll define an instance variable, \u003ccode\u003e@release_date\u003c/code\u003e and an instance method \u003ccode\u003e#release_date\u003c/code\u003e that exposes or reveals that variable. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Album\u003cbr\u003e\u003cbr\u003e  def release_date=(date)\u003cbr\u003e    @release_date = date\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def release_date\u003cbr\u003e    @release_date\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have an instance variable, \u003ccode\u003e@release_date\u003c/code\u003e, which can be set equal to a value using the \u003ccode\u003erelease_date=()\u003c/code\u003e method, a setter method. Then, we have a getter method \u003ccode\u003erelease_date\u003c/code\u003e that returns the value of \u003ccode\u003e@release_date\u003c/code\u003e. Now, we can execute the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ealbum = Album.new\u003cbr\u003ealbum.release_date = 1991\u003cbr\u003ealbum.release_date \u003cbr\u003e  # =\u0026gt; 1991\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat you might not know, however, is that the \u003ccode\u003eAlbum\u003c/code\u003e class itself is also an object. If our definition of an object is a bundle of code that contains attributes and behaviors, then the entire \u003ccode\u003eAlbum\u003c/code\u003e class itself absolutely qualifies. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eAlbum\u003c/code\u003e class can have its own variables and methods. We call these class variables and class methods. \u003c/p\u003e\n\n\u003ch2\u003eWhy Use Class Variables and Methods\u003c/h2\u003e\n\n\u003cp\u003eLet's say you wanted to keep a counter for how many albums you had in your music collection. That way, you can brag to your friends about what a music aficionado you are. The current code in our \u003ccode\u003eAlbum\u003c/code\u003e class has no way to keep such a count. Looks like we will have to write some code to accommodate this new feature of our program.\u003c/p\u003e\n\n\u003cp\u003eWhen it comes to adding new features or functionalities to our code, we start out by asking a question: whose responsibility is it to enact this behavior or functionality? \u003c/p\u003e\n\n\u003cp\u003eRight now, our program is pretty simple. We have an \u003ccode\u003eAlbum\u003c/code\u003e class and we have album instances. So, is it the responsibility of an individual album to keep a count of all of the other albums? Or is it the responsibility of the \u003ccode\u003eAlbum\u003c/code\u003e class, which actually produces the individual albums, to keep a running count? I think we can agree that it \u003cem\u003eisn't\u003c/em\u003e the job of the individual albums, but the job of the \u003ccode\u003eAlbum\u003c/code\u003e class to keep a count of all of the instances it produces. \u003c/p\u003e\n\n\u003cp\u003eNow that we've decided whose job it is to enact the \"keep a count of all albums\" behavior, we can talk about \u003cem\u003ehow\u003c/em\u003e we enact that behavior. \u003c/p\u003e\n\n\u003cp\u003eWe do so with the use of class variables and methods. Our goal is to be able to ask the \u003ccode\u003eAlbum\u003c/code\u003e class: \"how many albums have you produced?\" When we ask an object to tell us something about itself, we use methods. It would be great if we could do something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAlbum.count\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand return the number of existing albums. Let's build out this capability now. \u003c/p\u003e\n\n\u003ch2\u003eBuilding Class Methods and Using Class Variables\u003c/h2\u003e\n\n\u003cp\u003eAn instance variable is responsible for holding information regarding an instance of a class and is accessible only to that instance of the class. A class variable is accessible to the entire class––it has \u003cstrong\u003eclass scope\u003c/strong\u003e. A class method is a method that is called on the class itself, not on the instances of that class. Class variables store information regarding the class as a whole and class methods enact behaviors that belong to the whole class, not just to individual instances of that class. \u003c/p\u003e\n\n\u003ch3\u003eDefining a class variable\u003c/h3\u003e\n\n\u003cp\u003eA class variable looks like this: \u003ccode\u003e@@variable_name\u003c/code\u003e. Just like an instance or a local variable, you can set it equal to any type of data. \u003c/p\u003e\n\n\u003cp\u003eLet's create a class variable, \u003ccode\u003e@@album_count\u003c/code\u003e and set it equal to \u003ccode\u003e0\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Album\u003cbr\u003e\u003cbr\u003e  @@album_count = 0\u003cbr\u003e\u003cbr\u003e  def release_date=(date)\u003cbr\u003e    @release_date = date\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def release_date\u003cbr\u003e    @release_date\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now we have a class variable to store our count of albums in. We can't yet access that variable from outside of our class though. How can we expose the contents of that variable? With a class method. \u003c/p\u003e\n\n\u003ch3\u003eDefining a class method\u003c/h3\u003e\n\n\u003cp\u003eA class method is defined like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef self.class_method_name\u003cbr\u003e  # some code\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, the \u003ccode\u003eself\u003c/code\u003e keyword refers to the entire class itself, \u003cem\u003enot to an instance of the class\u003c/em\u003e. In this case, we are inside the class only, not inside an instance method of that class. So, we are in the class scope, not the instance scope. \u003c/p\u003e\n\n\u003cp\u003eLet's define a class method \u003ccode\u003e.count\u003c/code\u003e that returns the current count of albums. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Album\u003cbr\u003e  @@album_count = 0\u003cbr\u003e\u003cbr\u003e  def self.count\u003cbr\u003e    @@album_count\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now if we call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAlbum.count\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt will return \u003ccode\u003e0\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eOperating on a class variable inside an instance method\u003c/h3\u003e\n\n\u003cp\u003eCurrently, however, our \u003ccode\u003e@@album_count\u003c/code\u003e is stuck at \u003ccode\u003e0\u003c/code\u003e. When and how should we increment it? The count of albums should go up as soon as a new album is created, or initialized. We can hook into this moment in time in our \u003ccode\u003e#initialize\u003c/code\u003e method. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Album\u003cbr\u003e  @@album_count = 0 \u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    @@album_count += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.count\u003cbr\u003e    @@album_count\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we are using the \u003ccode\u003e@@album_count\u003c/code\u003e class variable, inside of our \u003ccode\u003e#initialize\u003c/code\u003e method, which is an instance method. We are saying: when a new album is created, access the \u003ccode\u003e@@album_count\u003c/code\u003e class variable and increment its value by 1. \u003c/p\u003e\n\n\u003cp\u003eWe can access our class variables anywhere in our class: in both class and instance methods. \u003c/p\u003e\n\n\u003cp\u003eNow our code should behave in the following manner:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAlbum.new\u003cbr\u003eAlbum.new\u003cbr\u003eAlbum.new\u003cbr\u003e\u003cbr\u003eAlbum.count\u003cbr\u003e  # =\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf at any point you need a refresher on different types of Ruby variables, \u003ca href=\"https://medium.com/swlh/hitchhikers-guide-to-ruby-variables-1b4cf83d540c\"\u003echeck this blog post\u003c/a\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"boolean-enumerables","title":"Boolean Enumerables","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-boolean-enumerables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-boolean-enumerables/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-boolean-enumerables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-boolean-enumerables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand return values for enumerators.\u003c/li\u003e\n\u003cli\u003eUse true/false expressions within a block.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#all?\u003c/code\u003e enumerator to create a true/false return value.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#none?\u003c/code\u003e enumerator to create a true/false return value.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#any?\u003c/code\u003e enumerator to create a true/false return value.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#include?\u003c/code\u003e enumerator to create a true/false return value.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWhen we are iterating over objects in a collection like with \u003ccode\u003e#each\u003c/code\u003e we generally don't care about the return values.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"Red\", \"Yellow\", \"Blue\"].each do |color|\u003cbr\u003e  puts \"There are #{color.length} letters in #{color}\"\u003cbr\u003eend #=\u0026gt; [\"Red\", \"Yellow\", \"Blue\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you run this code in IRB, you'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e001:0 \u0026gt; [\"Red\", \"Yellow\", \"Blue\"].each do |color|\u003cbr\u003e?\u0026gt;        puts \"There are #{color.length} letters in #{color}\"\u003cbr\u003e003:1 \u0026gt; end\u003cbr\u003e\u003cbr\u003eThere are 3 letters in Red\u003cbr\u003eThere are 6 letters in Yellow\u003cbr\u003eThere are 4 letters in Blue\u003cbr\u003e=\u0026gt; [\"Red\", \"Yellow\", \"Blue\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can see the block did what we intended it to do, it printed our output. You'll notice the last line also indicates that the \u003ccode\u003e#each\u003c/code\u003e method also returned a value. All expressions in ruby must return a value. When you use \u003ccode\u003e#each\u003c/code\u003e on a collection, the return value is always the original collection. Nothing you do inside the block you pass \u003ccode\u003e#each\u003c/code\u003e will ever change the return value. But that's not always the case. With other enumerator methods, the return value of the method is very much dependent on the block.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#all?\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eImagine wanting to know if all the numbers in an array are odd. You could use each with something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eall_odd = true\u003cbr\u003e[1,2,3].each do |number|\u003cbr\u003e  if number.even? # Will evaluate to false for 1, true for 2, false for 3\u003cbr\u003e    all_odd = false\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003eall_odd #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat works, the end value of \u003ccode\u003eall_odd\u003c/code\u003e will be false because \u003ccode\u003e2\u003c/code\u003e  flipped the \u003ccode\u003eall_odd\u003c/code\u003e variable to false. However, something so simple - checking if all the elements in this array are odd - isn't being expressed clearly. Worse than our code not expressing our intention is that our code requires us to maintain variable state, \u003ccode\u003eall_odd\u003c/code\u003e, which can easily lead to errors (say if some other piece of code accidentally changes that variable value).\u003c/p\u003e\n\n\u003cp\u003eConsider the following example using \u003ccode\u003e#all?\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eall_odd = [1,3].all? do |number|\u003cbr\u003e  number.odd? # Will evaluate to true for 1, true for 3\u003cbr\u003eend #=\u0026gt; true\u003cbr\u003eall_odd #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe rule for the \u003ccode\u003e#all?\u003c/code\u003e enumerator is that the block passed to it must return \u003ccode\u003etrue\u003c/code\u003e for every iteration for the entire \u003ccode\u003e#all?\u003c/code\u003e expression or method to return \u003ccode\u003etrue\u003c/code\u003e. If we introduce an even number to the collection, the return value will change.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eall_odd = [1,2,3].all? do |number|\u003cbr\u003e  number.odd? # Will evaluate to true for 1, false for 2, true for 3\u003cbr\u003eend #=\u0026gt; false\u003cbr\u003eall_odd #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's the rule for \u003ccode\u003e#all?\u003c/code\u003e - every iteration, every loop of the block must return \u003ccode\u003etrue\u003c/code\u003e. When the block encounters the value \u003ccode\u003e2\u003c/code\u003e for \u003ccode\u003enumber\u003c/code\u003e, it will run the expression \u003ccode\u003e2.odd?\u003c/code\u003e which will return \u003ccode\u003efalse\u003c/code\u003e. Because there was at least one iteration of the block that had a \u003ccode\u003efalse\u003c/code\u003e return value, the entire \u003ccode\u003e#all?\u003c/code\u003e expression returns \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#none?\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eImagine the opposite of \u003ccode\u003e#all?\u003c/code\u003e, a method \u003ccode\u003e#none?\u003c/code\u003e, where we are interested in none of the elements in a collection producing a true expression within the block passed to \u003ccode\u003e#none?\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,3].none?{|i| i.even?} #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe entire expression \u003ccode\u003e#none?\u003c/code\u003e returns true because none of those numbers will produce a \u003ccode\u003etrue\u003c/code\u003e expression when asked within the block if they are even. Compare the code above to the code required to test that condition using \u003ccode\u003e#each\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enone_even = true\u003cbr\u003e[1,3].each do |i|\u003cbr\u003e  if i.even?\u003cbr\u003e    none_even = false\u003cbr\u003e  end\u003cbr\u003eend #=\u0026gt; [1,3] because `#each` always returns the original collection\u003cbr\u003enone_even #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese high-level boolean enumerators like \u003ccode\u003e#all?\u003c/code\u003e and \u003ccode\u003e#none?\u003c/code\u003e are way cleaner for evaluating elements in a collection for \u003ccode\u003etrue\u003c/code\u003e/\u003ccode\u003efalse\u003c/code\u003e conditions.\u003c/p\u003e\n\n\u003cp\u003eTo recap, if \u003cem\u003eany\u003c/em\u003e of the elements in the collection evaluate to \u003ccode\u003etrue\u003c/code\u003e when passed to the block, \u003ccode\u003e#none?\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e. If \u003cem\u003enone\u003c/em\u003e of the elements evaluate to \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003e#none?\u003c/code\u003e will return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#any?\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eSometimes you want to be a bit more forgiving than \u003ccode\u003e#all?\u003c/code\u003e or \u003ccode\u003e#none?\u003c/code\u003e and just ensure that at least one element in a collection will create a \u003ccode\u003etrue\u003c/code\u003e expression within the block passed. \u003ccode\u003e#any?\u003c/code\u003e is perfect for this. The \u003ccode\u003e#any?\u003c/code\u003e enumerator will return true if at least one iteration of the block evaluates to true, but false if none of them do.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,100].any?{|i| i \u0026gt; 99} #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e#any?\u003c/code\u003e expression above will return \u003ccode\u003etrue\u003c/code\u003e because at least one element, \u003ccode\u003e100\u003c/code\u003e, will produce a \u003ccode\u003etrue\u003c/code\u003e evaluation in the block.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#include?\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWhereas \u003ccode\u003e#any?\u003c/code\u003e is useful for evaluating the truthiness of the logic of a block, \u003ccode\u003e#include?\u003c/code\u003e is helpful if you'd like to merely compare actual contents of a known value.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e#include?\u003c/code\u003e will return \u003ccode\u003etrue\u003c/code\u003e if the given element exists in the object. If it doesn't find a match, it will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe_numbers = [4,8,15,16,23,42]\u003cbr\u003ethe_numbers.include?(42)   #=\u0026gt; true\u003cbr\u003ethe_numbers.include?(6)   #=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e#include?\u003c/code\u003e expression first returns \u003ccode\u003etrue\u003c/code\u003e because \u003ccode\u003ethe_numbers[5] == 42\u003c/code\u003e. When it is run with \u003ccode\u003e6\u003c/code\u003e, it will evaluate to \u003ccode\u003efalse\u003c/code\u003e since that item is not present in the array.\u003c/p\u003e","frontPage":false},{"exportId":"video-blog-cli-with-active-record","title":"Video: Blog CLI with Active Record","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"video-review-blog-cli-with-activerecord-and-associations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/video-review-blog-cli-with-activerecord-and-associations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/video-review-blog-cli-with-activerecord-and-associations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/video-review-blog-cli-with-activerecord-and-associations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/ZfJ1rqFcNFU?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eDisclaimer\u003c/h2\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand ActiveRecord Associations than you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/aviflombaum/blog_cli\"\u003eLesson source code\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"nested-structures-continued","title":"Nested Structures Continued","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-structures\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-structures/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-structures\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-structures/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify that nested structures can be mixed\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've spent the last few lessons learning about a couple of basic nested structures:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es, or \"AoA\"\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees, or \"AoH\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn addition to these, we also have other basic structures:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees, or \"HoH\"\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es, or \"HoA\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou may not have worked with each structure yet, but you should be able to map out\nexamples of each of the above.\u003c/p\u003e\n\n\u003cp\u003eBy using these basic nested data structures, we've gained a foundation for\nmodeling many things in the world: vending machines, fictional characters,\nthe genealogy of a Hollywood family, and a medical record result-set.\u003c/p\u003e\n\n\u003cp\u003eBut brace yourself, here comes something astounding:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWe can nest nested data structures in other nested data structures\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eYour \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHashes\u003c/code\u003e (AoH) can have keys that point to \u003ccode\u003eArray\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es\n(AoA). Or your nested node structure of \u003ccode\u003eHash\u003c/code\u003ees of \u003ccode\u003eHash\u003c/code\u003ees (HoH) can have a\nkey that points to an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees (AoH). By using this mix-and-match\nprinciple, our NDS' can become very complex!\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we're going to walk you through an improved vending\nmachine model. Get a pen and some paper so that you can draw\npictures to help drive these points home. Using sketches will really\nhelp you \"get it.\" This is why developers in professional settings are\nalways sketching their NDS' whiteboards. It really works!\u003c/p\u003e\n\n\u003ch2\u003eDescribe a Physical Vending Machine\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/vending_grid.png\" alt=\"Grid-based vending machine\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe other week we saw a vending machine in a hospital waiting room. After\nswiping your credit card or using your phone's wallet, you entered a \u003cstrong\u003egrid\ncoordinate\u003c/strong\u003e.  At each intersection (coordinate) in the vending machine, there\nwas a \"spinner.\" Pay attention to this noun, \"spinner.\" We're going to use it a\nlot in the coming lessons. It's a device that looks like a corkscrew. It\n\u003cstrong\u003eholds multiple snack packages\u003c/strong\u003e in it.  When you've paid, the spinner spins\nand pushes the front-most snack off of the corkscrew \"spinner.\" The snack then\nfalls to a retrieval box.\u003c/p\u003e\n\n\u003cp\u003eOn each snack's packaging a price and a name.\u003c/p\u003e\n\n\u003cp\u003eWe've preferred to stick with \u003ccode\u003e:price\u003c/code\u003e and \u003ccode\u003e:name\u003c/code\u003e. We've also chosen to keep\nthe price value simple integers for clarity.\u003c/p\u003e\n\n\u003ch2\u003eIdentify that Nested Structures Can Be Mixed\u003c/h2\u003e\n\n\u003cp\u003eUltimately, in order to model a real grid-based vending machine (\u003ccode\u003eC20\u003c/code\u003e is a candy\nbar off of a spinner of gum packages, \u003ccode\u003eB50\u003c/code\u003e is a drink off of a spinner of\ndrinks), we think the right NDS is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArray of Array\n...of Array\n...of Hashes\n.....with keys `:name` and `:price` where\n.......:name points to a `String`\n.......:price points to an `Integer` price\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eYour\u003c/em\u003e Model May Vary\u003c/strong\u003e: It's certainly true that there are many other\ndetails that we could record in this model. Nutritional value, brand,\nmanufacturer, etc.\u003c/p\u003e\n\n\u003cp\u003eIf you think each coordinate should be a \u003ccode\u003eHash\u003c/code\u003e with a \u003ccode\u003e:price\u003c/code\u003e and an\n\u003ccode\u003eArray\u003c/code\u003e of snacks, that also might be entirely appropriate. Discussion of how\nto model an NDS is what developers spend a great number of their meetings and\npair programming sessions discussing!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe're giving you the answer so that you can think about how this might work for\nyourself. Draw it out on paper and see if you can predict how our explanation\nwill work. Teach your friend, your cat, or your imaginary friend Hogarth how \u003cstrong\u003e\u003cem\u003eyou\u003c/em\u003e\u003c/strong\u003e\nthink things work \u003cstrong\u003eand then\u003c/strong\u003e read the explanation below. Don't lose this chance\nto train your brain!\u003c/p\u003e\n\n\u003ch3\u003eExplain the Entire Vending Machine from the Top Down\u003c/h3\u003e\n\n\u003cpre\u003eWe have a coordinate grid. That's an AoA\nIn each coordinate, there's a \"spinner\" with multiple snacks\nEach snack has two important facts associated with it, a :name String and a :price\nInteger\n\u003c/pre\u003e\n\n\u003ch3\u003eExplain the Entire Vending Machine from the Bottom Up\u003c/h3\u003e\n\n\u003cp\u003eHere's a bottom-up view of the NDS:\u003c/p\u003e\n\n\u003cpre\u003eA price of the snack represented as an `Integer`\nEach snack has a name stored as a `String`\nEach snack collects those facts in a `Hash` that has keys `:name` and `:price`.\n\nMultiple snacks are stored in an indexed collection, an `Array`, that represents\nthe \"spinner\" device. Each \"spinner\" is accessible by a coordinate within an AoA \"grid.\"\nThe vending machine is the super-container AoA.\n\u003c/pre\u003e\n\n\u003cp\u003eWhichever approach feels more natural to you, feel free to use it. Sometimes\nour brains find a logical \"foothold\" while working bottom-up. Sometimes our\nbrains are thinking in a big-picture sense first. Either way is OK!\u003c/p\u003e\n\n\u003ch3\u003eShow the Data Structure as Ruby Code\u003c/h3\u003e\n\n\u003cp\u003eA real version of this data structure is the following. We've included the\nstructure, as well as a few Ruby commands, to get some sample data out of\nthe NDS.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evending_machine = [[[{:name=\u0026gt;\"Vanilla Cookies\", :price=\u0026gt;3},\u003cbr\u003e   {:name=\u0026gt;\"Pistachio Cookies\", :price=\u0026gt;3},\u003cbr\u003e   {:name=\u0026gt;\"Chocolate Cookies\", :price=\u0026gt;3},\u003cbr\u003e   {:name=\u0026gt;\"Chocolate Chip Cookies\", :price=\u0026gt;3}],\u003cbr\u003e  [{:name=\u0026gt;\"Tooth-Melters\", :price=\u0026gt;12},\u003cbr\u003e   {:name=\u0026gt;\"Tooth-Destroyers\", :price=\u0026gt;12},\u003cbr\u003e   {:name=\u0026gt;\"Enamel Eaters\", :price=\u0026gt;12},\u003cbr\u003e   {:name=\u0026gt;\"Dentist's Nightmare\", :price=\u0026gt;20}],\u003cbr\u003e  [{:name=\u0026gt;\"Gummy Sour Apple\", :price=\u0026gt;3},\u003cbr\u003e   {:name=\u0026gt;\"Gummy Apple\", :price=\u0026gt;5},\u003cbr\u003e   {:name=\u0026gt;\"Gummy Moldy Apple\", :price=\u0026gt;1}]],\u003cbr\u003e [[{:name=\u0026gt;\"Grape Drink\", :price=\u0026gt;1},\u003cbr\u003e   {:name=\u0026gt;\"Orange Drink\", :price=\u0026gt;1},\u003cbr\u003e   {:name=\u0026gt;\"Pineapple Drink\", :price=\u0026gt;1}],\u003cbr\u003e  [{:name=\u0026gt;\"Mints\", :price=\u0026gt;13},\u003cbr\u003e   {:name=\u0026gt;\"Curiously Toxic Mints\", :price=\u0026gt;1000},\u003cbr\u003e   {:name=\u0026gt;\"US Mints\", :price=\u0026gt;99}]]] #=\u0026gt; [[[{:name=\u0026gt;\"Vanilla Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Pistachio Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Chocolate Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Chocolate Chip Cookies\", :price=\u0026gt;3}], [{:name=\u0026gt;\"Tooth-Melters\", :price=\u0026gt;12}, {:name=\u0026gt;\"Tooth-Destroyers\", :price=\u0026gt;12}, {:name=\u0026gt;\"Enamel Eaters\", :price=\u0026gt;12}, {:name=\u0026gt;\"Dentist's Nightmare\", :price=\u0026gt;20}], [{:name=\u0026gt;\"Gummy Sour Apple\", :price=\u0026gt;3}, {:name=\u0026gt;\"Gummy Apple\", :price=\u0026gt;5}, {:name=\u0026gt;\"Gummy Moldy Apple\", :price=\u0026gt;1}]], [[{:name=\u0026gt;\"Grape Drink\", :price=\u0026gt;1}, {:name=\u0026gt;\"Orange Drink\", :price=\u0026gt;1}, {:name=\u0026gt;\"Pineapple Drink\", :price=\u0026gt;1}], [{:name=\u0026gt;\"Mints\", :price=\u0026gt;13}, {:name=\u0026gt;\"Curiously Toxic Mints\", :price=\u0026gt;1000}, {:name=\u0026gt;\"US Mints\", :price=\u0026gt;99}]]]\u003cbr\u003e\u003cbr\u003e# Get a \"spinner\"\u003cbr\u003evending_machine[0][0] #=\u0026gt; [{:name=\u0026gt;\"Vanilla Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Pistachio Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Chocolate Cookies\", :price=\u0026gt;3}, {:name=\u0026gt;\"Chocolate Chip Cookies\", :price=\u0026gt;3}]\u003cbr\u003e\u003cbr\u003e# Get a spinner's first snack\u003cbr\u003evending_machine[1][1][0] #=\u0026gt; {:name=\u0026gt;\"Mints\", :price=\u0026gt;13}\u003cbr\u003e\u003cbr\u003e# Get a spinner's first snack's price value\u003cbr\u003evending_machine[1][1][0][:price] #=\u0026gt; 13\u003cbr\u003e\u003cbr\u003e# Work with a single snack\u003cbr\u003etest_snack = vending_machine[0][1][0]\u003cbr\u003etest_snack[:price] #=\u0026gt; 12\u003cbr\u003etest_snack[:name] #=\u0026gt; \"Tooth-Melters\"\u003cbr\u003e\u003cbr\u003e# Print out some fun data\u003cbr\u003eputs \"I'm definitely thinking about buying #{test_snack[:name]} and sharing my $#{test_snack[:price]} investment\"\u003cbr\u003e#=\u0026gt; I'm definitely thinking about buying Tooth-Melters and sharing my $12 investment\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eNext Step: Working with the Nested Data Structure\u003c/h3\u003e\n\n\u003cp\u003eRecall the opening lesson of this section. We described John Snow building up\ncomplex maps to discover who had died during a cholera outbreak in\nmid-19\u003csup\u003eth\u003c/sup\u003e century London. At this point, we can build an NDS that\nrepresents a series of facts just as John Snow's surveys did.\u003c/p\u003e\n\n\u003cp\u003eBut that's not \u003cem\u003einsight\u003c/em\u003e. \u003cem\u003eInsight\u003c/em\u003e is when we pair data structures and Ruby\nprogramming to provide answers that enlighten us as \u003cem\u003ehumans\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo let's choose an \u003cem\u003einsight\u003c/em\u003e to pursue that will help guide the rest of this\nmodule.  Our guiding \u003cem\u003einsight\u003c/em\u003e question for the next several lessons is this:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWhat is the total retail value of all the snacks in this vending machine?\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNDS' serve to help us model complex data structures. As you seek to model the\nreal world, you'll build hybrids of the four simple data structures we taught\nyou. In time, you'll find ways to make lookups and updates in those structures\nfaster. Programs that excel at updating and retrieving information from data\nstructures are called \u003cem\u003edatabases\u003c/em\u003e. We didn't want to scare you, but learning to\nbuild NDS' is your first step toward learning to write \u003cem\u003edatabases\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLater you'll learn how to store your NDS outside of your Ruby code (typically\nin a \"data file\"), but for now it's OK to keep the data you work on and the\ncode with which you work on it in the same file.\u003c/p\u003e\n\n\u003cp\u003e...By the way, the total value is $\u003ccode\u003e1192\u003c/code\u003e in the vending machine.  Let's\nfind out how to calculate that \u003cem\u003einsight\u003c/em\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"sorting-arrays","title":"Sorting Arrays","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sorting-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sorting-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sorting-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sorting-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIntroduce the usefulness of sorting data.\u003c/li\u003e\n\u003cli\u003eIntroduce how the basic Ruby \u003ccode\u003esort\u003c/code\u003e method works under the hood.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSorting collections of data is a very common task in programming. As a developer, you can imagine being confronted with the need to sort items by price, or emails by their position in the alphabet, for example. There are a number of ways to execute sorting in Ruby. Here we'll discuss one basic example and learn how to sort a list of words.\u003c/p\u003e\n\n\u003ch2\u003eDinner Party Example\u003c/h2\u003e\n\n\u003cp\u003eYou are a famous chef hired to cater a dinner party for the President of Programlandia. Mr. President has his quirks and he'd like for you to print the dinner menu by listing the dishes in alphabetical order. Unfortunately, you weren't prepared for this request and you already have a list of dishes that are \u003cem\u003enot\u003c/em\u003e alphabetized.  \u003c/p\u003e\n\n\u003cp\u003eSo, we have a program that contains a variable, \u003ccode\u003edishes\u003c/code\u003e, that points to an array of your delicious dishes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edishes = [\"steak\", \"apple pie\", \"vegetable soup\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eComparing Strings\u003c/h3\u003e\n\n\u003cp\u003eWe need to sort the dishes in this array into alphabetical order. We've already learned about comparison operators like \u003ccode\u003e\u0026gt;\u003c/code\u003e (\"greater than\") and \u003ccode\u003e\u0026lt;\u003c/code\u003e (\"less than\") and used them on numbers. These operators work on strings too. If we compare strings using these operators, the comparison operator will look at the first letter of each string and compare their locations in the alphabet. Letters later in the alphabet are considered \u003cem\u003egreater than\u003c/em\u003e letters earlier in the alphabet. For example:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\"zoo\" \u0026gt; \"apple\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWill return\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003etrue\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003eThe \u003ccode\u003e.sort\u003c/code\u003e method\u003c/h2\u003e\n\n\u003cp\u003eIn order to sort our list of dishes, we will have to iterate over the array and compare every set of items. So far, when we've iterated with methods like \u003ccode\u003e.each\u003c/code\u003e or \u003ccode\u003e.collect\u003c/code\u003e, we iterate over \u003cem\u003eone element of the collection\u003c/em\u003e at a time. Now, in order to compare the elements in our array to one another, we need an enumerator that allows us to yield two elements at once. That's where the \u003ccode\u003e.sort\u003c/code\u003e method comes in.\u003c/p\u003e\n\n\u003cp\u003eThe sort method yields to a block with two elements. That block is the comparator, so it should compare the two elements and return 0 if they are the same, -1 if the first is less than the second, and 1 if the first is greater than the second\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at a basic example using an array of numbers:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [7, 3, 1, 2, 6, 5]\u003cbr\u003e\u003cbr\u003earray.sort do |a, b|\u003cbr\u003e  if a == b\u003cbr\u003e    0\u003cbr\u003e  elsif a \u0026lt; b\u003cbr\u003e    -1\u003cbr\u003e  elsif a \u0026gt; b\u003cbr\u003e    1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOther enumerator methods like \u003ccode\u003e.each\u003c/code\u003e we call like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray.each do |num|\u003cbr\u003e    puts num\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e.each\u003c/code\u003e method starts at the beginning of the array and passes each item \u003cem\u003eone at a time\u003c/em\u003e to the code in the block (the code in between \u003ccode\u003edo\u003c/code\u003e...\u003ccode\u003eend\u003c/code\u003e). We see \u003ccode\u003e.each\u003c/code\u003e passing each element of the array to the block here: \u003ccode\u003e|num|\u003c/code\u003e, by placing a placeholder for each element in between the pipes (\u003ccode\u003e| |\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.sort\u003c/code\u003e method is different. It passes elements \u003cem\u003etwo at a time\u003c/em\u003e into the block, and compares those two elements inside the block with our \u003ccode\u003eif\u003c/code\u003e \u0026amp; \u003ccode\u003eelsif\u003c/code\u003e logic:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e are equal, the block will return \u003ccode\u003e0\u003c/code\u003e, and \u003ccode\u003e.sort\u003c/code\u003e will leave them in their current places.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003ea\u003c/code\u003e is less than \u003ccode\u003eb\u003c/code\u003e and belongs before it, the block will return \u003ccode\u003e-1\u003c/code\u003e and \u003ccode\u003e.sort\u003c/code\u003e will once again leave them in their current places (because \u003ccode\u003ea\u003c/code\u003e is already before \u003ccode\u003eb\u003c/code\u003e.)\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eb\u003c/code\u003e and belongs after it, the block will return \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e.sort\u003c/code\u003e will switch the locations of \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e.\u003cbr\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTherefore, when we call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [7, 3, 1, 2, 6, 5]\u003cbr\u003e\u003cbr\u003earray.sort do |a, b|\u003cbr\u003e  if a == b\u003cbr\u003e    0\u003cbr\u003e  elsif a \u0026lt; b\u003cbr\u003e    -1\u003cbr\u003e  elsif a \u0026gt; b\u003cbr\u003e    1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first time through the collection, \u003ccode\u003e.sort\u003c/code\u003e passes \u003ccode\u003e7\u003c/code\u003e and \u003ccode\u003e3\u003c/code\u003e into the block and compares them, since 7 is greater than 3, it switches the location of those two elements. If we were to look at the array after going through just one iteration of \u003ccode\u003e.sort\u003c/code\u003e, it would look like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e[3, 7, 1, 2, 6, 5]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eOn the second pass through the array, \u003ccode\u003e.sort\u003c/code\u003e yields the next two items to the block, in this case \u003ccode\u003e7\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e. It compares them in the same way, makes any necessary changes to the location of the items in the array, and then moves on to the next pair.\u003c/p\u003e\n\n\u003ch2\u003eRuby Abstraction: The Spaceship Operator\u003c/h2\u003e\n\n\u003cp\u003eNow that we have an understanding of how \u003ccode\u003e.sort\u003c/code\u003e works, we can introduce a level of abstraction by using the \"spaceship operator\" (\u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e). The spaceship operator, also called the \u003cstrong\u003ecombined comparison operator\u003c/strong\u003e,\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ereturns \u003ccode\u003e0\u003c/code\u003e if the first operand equals the second,\u003c/li\u003e\n\u003cli\u003ereturns \u003ccode\u003e-1\u003c/code\u003e if the first operand is less than the second, and\u003c/li\u003e\n\u003cli\u003ereturns \u003ccode\u003e1\u003c/code\u003e if the first operand is greater than the second.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo, instead of utilizing \u003ccode\u003eif\u003c/code\u003e \u0026amp; \u003ccode\u003eelsif\u003c/code\u003e logic like we did above, we can simply call \u003ccode\u003e.sort\u003c/code\u003e with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [7, 3, 1, 2, 6, 5]\u003cbr\u003e\u003cbr\u003earray.sort do |a, b|\u003cbr\u003e  a \u0026lt;=\u0026gt; b\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e#  =\u0026gt; [1, 2, 3, 5, 6, 7]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSorting our dinner party menu\u003c/h2\u003e\n\n\u003cp\u003eNow that we understand how strings are compared and how \u003ccode\u003e.sort\u003c/code\u003e works, we're ready to sort our dinner party menu from the earlier example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edishes = [\"steak\", \"apple pie\", \"vegetable soup\"]\u003cbr\u003e\u003cbr\u003edishes.sort do |a, b|\u003cbr\u003e    a \u0026lt;=\u0026gt; b\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e # =\u0026gt; [\"apple pie\", \"steak\", \"vegetable soup\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it—the menu is alphabetized! Now, let's take it a step further.\u003c/p\u003e\n\n\u003ch2\u003eRuby Abstraction: \u003ccode\u003e.sort\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eDrop into IRB and enter the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edishes = [\"steak\", \"apple pie\", \"vegetable soup\"]\u003cbr\u003e\u003cbr\u003edishes.sort\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should return : \u003ccode\u003e[\"apple pie\", \"steak\", \"vegetable soup\"]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSimply calling \u003ccode\u003e.sort\u003c/code\u003e has the desired effect. It implicity executes the code we used in the block in the above example. But now we understand \u003cem\u003ehow\u003c/em\u003e sort works, not just \u003cem\u003ewhat\u003c/em\u003e it does.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eBy default, the \u003ccode\u003e.sort\u003c/code\u003e method is case sensitive. It will prioritize strings that are capitalized.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eThink about customizing a sorting method. Since\u003c/em\u003e \u003ccode\u003e.sort\u003c/code\u003e \u003cem\u003etakes a block, can we tell\u003c/em\u003e \u003ccode\u003e.sort\u003c/code\u003e \u003cem\u003eto sort in reverse alphabetical order? In other words, can we sort a collection of data from greatest to least?\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.dotnetperls.com/sort-ruby\"\u003eDot Net Pearls - Sort Ruby\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://ruby-doc.org/core-2.2.0/Array.html#method-i-sort\"\u003eRuby Docs - Array - sort\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=kPRA0W1kECg\"\u003eWatch sorting happen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.sorting-algorithms.com/\"\u003eCompare different sorting algorithms\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"sql-conclusion","title":"SQL Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-intro-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-intro-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've learned all about the basics of SQL. With SQL, we can store and find our\nstored data. SQL has many variations, but in this module, we specifically\ncovered using SQLite which will be the type of database that we work with\nthroughout this course.\u003c/p\u003e\n\n\u003cp\u003eOver the past several lessons we covered:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eHow to create and open a database file and table\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe three specific SQLite database types\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHow to create advanced queries using aggregator functions\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRelational database mapping in object-oriented programming--including\nconnecting to a database, creating tables and finding/saving data.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis gives us the foundational tools of understanding how to build and\nmanipulate databases. This will tie into future concepts, as we cover databases\nand Ruby more in-depth.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-class-variables-and-methods","title":"Introduction to Class Variables and Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eClasses are like the skeleton from which individual objects are created. When\nyou make use of classes you can reuse code rather than writing similar code over\nand over again. This makes code more readable and \u003cem\u003e\"DRY\"\u003c/em\u003e (\u003cstrong\u003eD\u003c/strong\u003eon’t \u003cstrong\u003eR\u003c/strong\u003eepeat\n\u003cstrong\u003eY\u003c/strong\u003eourself).\u003c/p\u003e\n\n\u003cp\u003eSo far, we've primarily created instance methods and instance variables for our\nindividual objects to use. However, we can also create class methods and\nvariables. Class variables are used to store values related to a class rather\nthan a particular instance. Class methods are similarly used for implementing\nbehavior that is related to a class in general rather than an instance.\u003c/p\u003e\n\n\u003cp\u003eIn the next several lessons we'll be taking a look at:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow to recognize a class constant\u003c/li\u003e\n\u003cli\u003eUtilizing class constants\u003c/li\u003e\n\u003cli\u003eKnowing when to use attr_accessor vs creating the methods manually\u003c/li\u003e\n\u003cli\u003eUse cases for defining private and protected methods\u003c/li\u003e\n\u003cli\u003eThe difference between public, private, and protected methods\u003c/li\u003e\n\u003cli\u003eUsing class variables to keep track of data pertaining to a class\u003c/li\u003e\n\u003cli\u003eThe concept of remembrance in object-oriented programming\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAt a glance, you might assume class variables work like instance variables;\nhowever, this is not the case. In this section, we'll distinguish the difference\nbetween class methods and variables and when to use them.\u003c/p\u003e\n\n\u003cp\u003eIf at any point you need a refresher on different types of Ruby variables, \u003ca href=\"https://medium.com/swlh/hitchhikers-guide-to-ruby-variables-1b4cf83d540c\"\u003echeck this blog post\u003c/a\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"video-abstract-orms","title":"Video: Abstract ORMs","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orm-video-review-building-a-metaprogrammed-abstract-orm\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-building-a-metaprogrammed-abstract-orm/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-building-a-metaprogrammed-abstract-orm\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orm-video-review-building-a-metaprogrammed-abstract-orm/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video reviews the ways to create objects and their attributes from a database using Ruby and SQL. You will learn how to build the necessary methods needed to extract data from a database and instantiate and save instances of a class using said data. Additionally, you will learn how to build methods that update a database. These methods are built out for a specific class. This lesson covers the logic and mechanics of abstracting each method so that, collectively, they can be applied to any class.\u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/hts7TjpPw-8\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eHow You Can Help Us Make These Videos Better\u003c/h2\u003e","frontPage":false},{"exportId":"associating-tables-with-foreign-keys","title":"Associating Tables with Foreign Keys","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-associating-tables-with-foreign-keys\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-associating-tables-with-foreign-keys/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-associating-tables-with-foreign-keys\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-associating-tables-with-foreign-keys/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll relate data from one table to data from another table using foreign keys. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eAssociate two data tables using a foreign key column\u003c/li\u003e\n\u003cli\u003eDetermine which of the two tables you're associating together will take in a foreign key column\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Relate Tables?\u003c/h2\u003e\n\n\u003cp\u003eIt's hard to imagine an application that saves data but doesn't relate it. For example––a Facebook user is associated to other users via \"friendships\", an Amazon user has a shopping cart full of items, a blog's author has many posts and posts might in turn have many tags. All of these examples require different datasets to be related or associated to one another. \u003c/p\u003e\n\n\u003ch2\u003eRelating Tables with Foreign Keys\u003c/h2\u003e\n\n\u003cp\u003eContinuing the posts and authors examples, you could say that an author \u003cem\u003ehas many\u003c/em\u003e posts. The reciprocal of this would be that a post \u003cem\u003ebelongs to\u003c/em\u003e an author. Now we need to figure out how we can represent that relationship within the constraints of SQLite. If you were writing just plain Ruby, how would you represent this relationship? In our \u003ccode\u003eAuthor\u003c/code\u003e class we would have an array of \u003ccode\u003ePost\u003c/code\u003e objects. Our \u003ccode\u003ePost\u003c/code\u003e object would have a single attribute that holds its \u003ccode\u003eAuthor\u003c/code\u003e. This is great in Ruby, but there is no data type for arrays in SQL. You can only have \u003ccode\u003eINTEGER\u003c/code\u003e, \u003ccode\u003eFLOAT\u003c/code\u003e, and \u003ccode\u003eTEXT\u003c/code\u003e. So developers had to figure out how to relate two rows (a \u003ccode\u003ePost\u003c/code\u003e and an \u003ccode\u003eAuthor\u003c/code\u003e) using only those data types. Is there any way we can convert an \u003ccode\u003eINTEGER\u003c/code\u003e into a specific row in a table? OH YEAH. The \u003ccode\u003eid\u003c/code\u003e column or \u003ccode\u003ePRIMARY KEY\u003c/code\u003e for each row is a unique \u003ccode\u003eINTEGER\u003c/code\u003e identifier for that row. Let's say the Post \"10 Ways to Pet Your Cat\" is written by \"Joe Burgess\", and Joe's \u003ccode\u003eid\u003c/code\u003e is 5. We just need to add a new column to our Posts table with the \u003ccode\u003eid\u003c/code\u003e of the Author that it's related to. Let's call this column \u003ccode\u003eauthor_id\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhy didn't we do the reverse? Why didn't we add a list of Post IDs to a single Author row? The answer is pretty straight forward. Is there an array data type? Is there really any way to store multiple items in a single column? Nope! So we just set up the relation in one direction.\u003c/p\u003e\n\n\u003cp\u003eThis \u003ccode\u003eauthor_id\u003c/code\u003e column is called a \"foreign key\".\u003c/p\u003e\n\n\u003cp\u003eTo associate one table to another, give one table a column called \"foreign key\" with a type of \u003ccode\u003eINTEGER\u003c/code\u003e and insert the primary key of another table row into that column. In other words, if we have a blogging app, we might have a users table and a posts table. Posts belong to the user that wrote that post. So, the posts table would have a foreign key column. An individual post's foreign key value would be the primary key ID of the user who authored that post. \u003c/p\u003e\n\n\u003cp\u003eThis is a little confusing, so let's build out our own example together. \u003c/p\u003e\n\n\u003ch3\u003eCode Along I: Relating Cats to Owners\u003c/h3\u003e\n\n\u003cp\u003eLet's say we are creating an app that helps a veterinary office manage the pets it sees as patients and the owners of those pets. Let's say this vet is very particular and specializes in cats. Our app will have a database that has a \u003ccode\u003ecats\u003c/code\u003e table and an \u003ccode\u003eowners\u003c/code\u003e table. We will need a way to relate, or connect, these two tables such that a given cat is associated to its owner and a given owner is associated to the cat (or cats) it owns.\u003c/p\u003e\n\n\u003cp\u003eFor this exercise, we'll be working with a \u003ccode\u003epets_database\u003c/code\u003e. In your terminal, create the database with the \u003ccode\u003esqlite3 pets_database.db\u003c/code\u003e command. Let's set up our two tables now. \u003c/p\u003e\n\n\u003ch4\u003eStep 1: Creating the Cats Table\u003c/h4\u003e\n\n\u003cp\u003eIn the \u003ccode\u003esqlite3\u0026gt;\u003c/code\u003e prompt in your terminal, create the table with the following statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, go ahead and insert the following cats into the table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed)\u003cbr\u003eVALUES (\"Maru\", 3, \"Scottish Fold\");\u003cbr\u003e\u003cbr\u003eINSERT INTO cats (name, age, breed)\u003cbr\u003eVALUES (\"Hana\", 1, \"Tabby\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eStep 2: Creating the Owners Table\u003c/h4\u003e\n\n\u003cp\u003eFirst, we need to create our owners table. An owner should have an ID that is a primary key integer and a name that is text: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have our owners table, we can add a foreign key column to the pets table. \u003c/p\u003e\n\n\u003ch4\u003eStep 3: Add Foreign Key to Cats Table\u003c/h4\u003e\n\n\u003cp\u003eUse the following statement to add this column: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eALTER TABLE cats ADD COLUMN owner_id INTEGER;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCheck your \u003ccode\u003ecats\u003c/code\u003e schema with \u003ccode\u003e.schema\u003c/code\u003e and you should see the following: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003eid INTEGER PRIMARY KEY,\u003cbr\u003ename TEXT,\u003cbr\u003eage INTEGER,\u003cbr\u003ebreed TEXT,\u003cbr\u003eowner_id INTEGER);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now we're ready to associate cats to their owners by creating an owner and assigning that owner's ID to certain cats' \u003ccode\u003eowner_id\u003c/code\u003e column. \u003c/p\u003e\n\n\u003ch4\u003eStep 4: Associating Cats to Owners\u003c/h4\u003e\n\n\u003cp\u003eFirst, let's make a new owner: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO owners (name) VALUES (\"mugumogu\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCheck that we did that correctly with the following statement: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM owners;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 | mugumogu\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMugumogu is the owner of both Hana and Maru. Let's create our associations: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUPDATE cats SET owner_id = 1 WHERE name = \"Maru\";\u003cbr\u003eUPDATE cats SET owner_id = 1 WHERE name = \"Hana\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's check out our updated \u003ccode\u003ecats\u003c/code\u003e table: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE owner_id = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 | Maru | 3 | Scottish Fold | 1\u003cbr\u003e2 | Hana | 1 | Tabby         | 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eEstablishing Foreign Key: Determining Which Table Gets a \"foreign key\" Column\u003c/h3\u003e\n\n\u003cp\u003eWhy did we decide to give our \u003ccode\u003ecats\u003c/code\u003e table the foreign key column and not the \u003ccode\u003eowners\u003c/code\u003e table? Similarly, in the example from the beginning of this exercise, why would we give a \u003ccode\u003eposts\u003c/code\u003e table a foreign key of \u003ccode\u003euser_id\u003c/code\u003e and not the other way around? \u003c/p\u003e\n\n\u003cp\u003eLet's look at what would happen if we tried to add cats directly to the \u003ccode\u003eowners\u003c/code\u003e table.\u003c/p\u003e\n\n\u003cp\u003eAdding the first cat, \"Maru\", to the owner \"mugumogu\" would look something like this: \u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003cth\u003ecat_id\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003emugumogu\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eSo far so good. But what happens when we need to add a second cat, \"Hana\", to the same owner?\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003cth\u003ecat_id1\u003c/th\u003e\n\u003cth\u003ecat_id2\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003emugumogu\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eWhat if this owner gets \u003cem\u003eyet another cat?\u003c/em\u003e We'd have to keep growing our table horizontally, potentially forever. That is not efficient, or organized. \u003c/p\u003e\n\n\u003cp\u003eWe can also think about the relationship between our owners and our cats in the context of a \"has many\" and \"belongs to\" relationship. An owner can have many cats, but –– at least for the purposes of this example –– a cat can only belong to one owner. Similarly, a user can write many posts, but each post was written by, and therefore belongs to, only one user.\u003c/p\u003e\n\n\u003cp\u003eThe thing that \"has many\" is considered to be the parent. The thing that \"belongs to\" we'll call the child. The child table gets the foreign key column, the value of which is the primary key of that data's/row's parent. \u003c/p\u003e\n\n\u003cp\u003ePractice SQL Queries on \u003ca href=\"http://sqlbolt.com/lesson/select_queries_review\"\u003eSQLBolt\u003c/a\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"advanced-class-methods-conclusion","title":"Advanced Class Methods Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-advanced-class-methods-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn the past several lessons, we pushed our Ruby skills even farther to\nincorporate advanced class methods. We covered building custom class\nconstructors, class finders and class operators. We implemented a class method\nto create instances of its own class. We also used class variables to keep track\nof a class's data.\u003c/p\u003e\n\n\u003cp\u003eThese are all some powerful tools you can use for more complex Ruby operations.\nAs we move forward, we'll see opportunities to leverage their power in our\nlarger applications.\u003c/p\u003e","frontPage":false},{"exportId":"classes-and-instances","title":"Classes and Instances","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-classes-and-instances\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe a Ruby class and how it creates objects\u003c/li\u003e\n\u003cli\u003eDescribe a Ruby instance\u003c/li\u003e\n\u003cli\u003eCreate an instance of a class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eDefining a Class\u003c/h2\u003e\n\n\u003cp\u003eLet's say we are building a dog walking app. Our app's users might be dog\nwalkers and dog owners and they can use the app to manage the dog walks. Such an\napp would need to store information about a potentially large number of dogs.\u003c/p\u003e\n\n\u003cp\u003eOur program needs to have a way to bundle up and operate on all the information\nabout a particular dog. And, our program needs to be able to do this again and\nagain. And, once more, we'll need our program to be able to create \u003cem\u003enew\u003c/em\u003e bundles\nof information regarding individual dogs every time a new dog is added to the\napp.\u003c/p\u003e\n\n\u003cp\u003eHow can we tell our Ruby program to deal with these dogs? Well, we can write a\n\u003ccode\u003eDog\u003c/code\u003e class that produces individual dog objects, each of which contains all the\ninformation and behaviors of an individual dog.\u003c/p\u003e\n\n\u003cp\u003eThink of a class like a blueprint that defines how to build an object. The\n\u003ccode\u003eDog\u003c/code\u003e class is different from an individual dog just as the blueprints that show\nhow to build a house are not the actual house. A Ruby class both contains the\ninstructions for creating new objects and has the ability to create those\nobjects. Calling \u003ccode\u003e.new\u003c/code\u003e on the \u003ccode\u003eDog\u003c/code\u003e class is like getting a brand new dog\nobject from an assembly line which produces a series of similar dog objects\nbased on the same \u003ccode\u003eDog\u003c/code\u003e template.\u003c/p\u003e\n\n\u003cp\u003eHere's what our \u003ccode\u003eDog\u003c/code\u003e class would look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  # some code to describe a dog\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eDog\u003c/code\u003e class is defined with the \u003ccode\u003eclass\u003c/code\u003e keyword, followed by the class name\nand closed with an \u003ccode\u003eend\u003c/code\u003e. The body of this class is between the \u003ccode\u003eclass\u003c/code\u003e and\n\u003ccode\u003eend\u003c/code\u003e keywords.\u003c/p\u003e\n\n\u003cp\u003eClass names begin with capital letters because they are stored in Ruby\nconstants. If your class name contains two words, the name should be CamelCased,\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MyClass\u003cbr\u003e  # some code all about your awesome class\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this code alone, we can now make new dogs!\u003c/p\u003e\n\n\u003ch2\u003eCreating Instances of Classes\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the code sample above, once we've defined our \u003ccode\u003eDog\u003c/code\u003e class with the \u003ccode\u003eclass\u003c/code\u003e\nkeyword, we immediately can bring to life new individual dogs, the variable\n\u003ccode\u003efido\u003c/code\u003e which points to a new instance of a dog.\u003c/p\u003e\n\n\u003cp\u003eOn the \u003ccode\u003eDog\u003c/code\u003e class, we call the \u003ccode\u003e.new\u003c/code\u003e method and that will \u003cstrong\u003einstantiate\u003c/strong\u003e a\nnew dog.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstantiate\u003c/strong\u003e means bringing a new object to life, a new individual, like a\nparticular dog, like Snoopy or Lassie or Rover. Each particular dog is an\nindividual that was \u003cstrong\u003einstantiated\u003c/strong\u003e when we called \u003ccode\u003eDog.new\u003c/code\u003e to birth it into\nour world of programming.\u003c/p\u003e\n\n\u003cp\u003eWe call these individuals, each specific dog or version of our class,\n\u003cstrong\u003einstances\u003c/strong\u003e. An \u003cstrong\u003einstance\u003c/strong\u003e is a single occurrence of an object.\n\u003cstrong\u003eInstances\u003c/strong\u003e refer to the individual objects produced from the class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido #=\u0026gt; #\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new\u003cbr\u003esnoopy #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003esnoopy\u003c/code\u003e and \u003ccode\u003efido\u003c/code\u003e are two different variables pointing at separate instances\nof the \u003ccode\u003eDog\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003eDifferent Instances are Different Objects\u003c/h3\u003e\n\n\u003cp\u003eLet's make three dogs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido #=\u0026gt; #\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new\u003cbr\u003esnoopy #=\u0026gt; #\u003cbr\u003e\u003cbr\u003elassie = Dog.new\u003cbr\u003elassie #=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that every time you make an instance of a class, Ruby tells you that the\nreturn value is something that looks like \u003ccode\u003e#\u0026lt;Dog:0x007fc52c2cc588\u0026gt;\u003c/code\u003e. This syntax\nis called Ruby Object Notation and it's just the default way that Ruby\ncommunicates to you that you are dealing with an object or instance of a\nparticular class. The \u003ccode\u003eDog:0x007fc52c2cc588\u003c/code\u003e tells you that the object is an\ninstance of \u003ccode\u003eDog\u003c/code\u003e and the \u003ccode\u003e0x007fc52c2cc588\u003c/code\u003e is called its object identifier and\nit basically means this is where the object lives inside your computer.\u003c/p\u003e\n\n\u003cp\u003eEach of these instances is totally unique, even though they are all born from\n\u003ccode\u003eDog\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003efido = Dog.new\u003cbr\u003efido #=\u0026gt; #\u003cbr\u003e\u003cbr\u003esnoopy = Dog.new\u003cbr\u003esnoopy #=\u0026gt; #\u003cbr\u003e\u003cbr\u003esnoopy == fido #=\u0026gt; false - these dogs are not the same.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eClasses are the blueprints that define the behavior and information our objects\nwill contain. They let us manufacture and instantiate new instances.\u003c/p\u003e","frontPage":false},{"exportId":"each-vs-collect","title":"Each vs Collect","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"each-vs-collect-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/each-vs-collect-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/each-vs-collect-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/each-vs-collect-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIdentify the return values of the \u003ccode\u003eeach\u003c/code\u003e and \u003ccode\u003ecollect\u003c/code\u003e methods.\u003c/li\u003e\n\u003cli\u003eImplement the \u003ccode\u003eeach\u003c/code\u003e and \u003ccode\u003ecollect\u003c/code\u003e methods.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lesson will give a deeper dive on how to use the \u003ccode\u003eeach\u003c/code\u003e and \u003ccode\u003ecollect\u003c/code\u003e methods.\u003c/p\u003e\n\n\u003cp\u003eFor our examples we will be building a \u003ccode\u003ehamburger\u003c/code\u003e method that takes an array of \u003ccode\u003etoppings\u003c/code\u003e as an argument.\u003c/p\u003e\n\n\u003ch3\u003eWhat we want our methods to do\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eTake in an array of hamburger toppings.\u003c/li\u003e\n\u003cli\u003eIterate through each topping, one at a time.\u003c/li\u003e\n\u003cli\u003eManipulate that data (do something to it).\u003c/li\u003e\n\u003cli\u003eReturn the manipulated data.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eEach\u003c/h2\u003e\n\n\u003cp\u003eThe most important thing to remember about \u003ccode\u003eeach\u003c/code\u003e is that it does not change the return value. It implicitly returns the original array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etoppings = [\"pickles\", \"mushrooms\", \"bacon\"]\u003cbr\u003e\u003cbr\u003edef hamburger(toppings)\u003cbr\u003e  toppings.each do |topping|\u003cbr\u003e    puts \"I love #{topping} on my burgers!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eThis method will print:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eI love pickles on my burgers!\u003cbr\u003eI love mushrooms on my burgers!\u003cbr\u003eI love bacon on my burgers!\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eBut the return value is still:\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003e[\"pickles\", \"mushrooms\", \"bacon\"]\u003c/code\u003e\u003c/p\u003e\n\n\u003ch4\u003eIf we want a different return value, we have to explicitly tell it to do so.\u003c/h4\u003e\n\n\u003cp\u003eIn this version of our burger method we set an empty array called \u003ccode\u003emy_statements\u003c/code\u003e, which we will then explicitly return after we finish our loop.\nInside our \u003ccode\u003eeach\u003c/code\u003e statement loop, we manipulate each topping by interpolating it inside a string. We then push that string into our \u003ccode\u003emy_statements\u003c/code\u003e array.\nAfter we iterate over each topping in our array, we return the new \u003ccode\u003emy_statements\u003c/code\u003e array.\u003c/p\u003e\n\n\u003cp\u003eYou'll notice that since the \u003ccode\u003eeach\u003c/code\u003e doesn't return the thing we want, we have to add an extra line at the end that returns the \u003ccode\u003emy_statements\u003c/code\u003e array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef hamburger(toppings)\u003cbr\u003e  my_statements = []\u003cbr\u003e  toppings.each do |topping|\u003cbr\u003e    my_statements \u0026lt;\u0026lt; \"I love #{topping} on my burgers!\"\u003cbr\u003e  end\u003cbr\u003e  my_statements\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eOur new return value:\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e[\"I love pickles on my burgers!\",\u003cbr\u003e \"I love mushrooms on my burgers!\",\u003cbr\u003e \"I love bacon on my burgers!\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, if we do want a different return value, there is a handy method called \u003ccode\u003emap\u003c/code\u003e, also known as \u003ccode\u003ecollect\u003c/code\u003e. These methods are abstractions of our \u003ccode\u003eeach\u003c/code\u003e method. An abstraction is the process of taking away or removing characteristics from something in order to reduce it to a set of essential characteristics. Let's take a look at a few examples.\u003c/p\u003e\n\n\u003ch2\u003eMap \u0026amp; Collect\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003etoppings = [\"pickles\", \"mushrooms\", \"bacon\"]\u003cbr\u003e\u003cbr\u003edef hamburger(toppings)\u003cbr\u003e  toppings.map do |topping|\u003cbr\u003e    puts \"I love #{topping} on my burgers!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003ecollect\u003c/code\u003e are the same thing, this can be expressed exactly the same way with \u003ccode\u003ecollect\u003c/code\u003e, like the following.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etoppings = [\"pickles\", \"mushrooms\", \"bacon\"]\u003cbr\u003e\u003cbr\u003edef hamburger(toppings)\u003cbr\u003e  toppings.collect do |topping|\u003cbr\u003e    puts \"I love #{topping} on my burgers!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eThis method will print:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eI love pickles on my burgers!\u003cbr\u003eI love mushrooms on my burgers!\u003cbr\u003eI love bacon on my burgers!\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eThis method will return:\u003c/h4\u003e\n\n\u003cp\u003e\u003ccode\u003e[nil, nil, nil]\u003c/code\u003e\u003c/p\u003e\n\n\u003ch4\u003eWhy does it return nil?\u003c/h4\u003e\n\n\u003cp\u003eIf you look inside our \u003ccode\u003emap\u003c/code\u003e loop, you will see that we are using \u003ccode\u003eputs\u003c/code\u003e, which always has a \u003ccode\u003enil\u003c/code\u003e return value. What this is telling us is that our return value is indeed being changed by \u003ccode\u003emap\u003c/code\u003e. Let's look at another example.\u003c/p\u003e\n\n\u003cp\u003eHere we are no longer using \u003ccode\u003eputs\u003c/code\u003e, but instead implicitly returning what is inside our block. Again showing that \u003ccode\u003emap\u003c/code\u003e will give us a new return value based on the logic inside our block.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef hamburger(toppings)\u003cbr\u003e  toppings.collect do |topping|\u003cbr\u003e    \"I love #{topping} on my burgers\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eOur new return value:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003e[\"I love pickles on my burgers\",\u003cbr\u003e \"I love mushrooms on my burgers\",\u003cbr\u003e \"I love bacon on my burgers\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eTakeaway:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you want the transformations to be reflected in the return value use \u003ccode\u003emap\u003c/code\u003e or \u003ccode\u003ecollect\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIf you want to return the original return value use \u003ccode\u003eeach\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-looping","title":"Introduction to Looping","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eAbstraction and Repetition in Programming\u003c/h2\u003e\n\n\u003cp\u003eAs programmers, we are lazy. This isn't a bad thing. It means we strive for efficiency in every way. If we can get our program to behave in a certain way or carry out a certain task with fewer lines of code, we do it. We think of our code like an artist thinks of their paintings or an architect thinks of their buildings. We want the programs we write to be beautiful. That means they should be simple and eloquent. \u003c/p\u003e\n\n\u003cp\u003eWhat does it mean to write code that is both efficient and eloquent? It means we rely on abstraction. A method is a form of abstraction. \u003c/p\u003e\n\n\u003cp\u003eFor example, let's say we have a program that we want to greet a given user. We could do so with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"Hello, program user.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code is literal. It greets some un-identified user with the title \u003ccode\u003e\"program user\"\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eIn order to greet someone else later on, we would have to re-write the above code, changing the title of the person we are greeting:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"Hello, someone else.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNot only do we have to repeat the same line of code again and again, changing one consistent thing about it each time, but the use of the line of code above isn't descriptive of the job we are trying to accomplish. \u003c/p\u003e\n\n\u003cp\u003eThis line of code has a responsibility, its responsibility is to greet the user. But in order to understand that, you have to read the text that we are \u003ccode\u003eputs\u003c/code\u003e-ing out and really think about it. \u003c/p\u003e\n\n\u003cp\u003eWe can make this code eloquent, i.e. expressive of the job it is trying to accomplish, and re-usable and flexible by wrapping it in a method that takes an argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greet_user(name)\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have a method name that expresses the job or responsibility of the code it contains \u003cem\u003eand\u003c/em\u003e we have a way to re-use the same bit of code again and again, throughout our program, simply by calling the method. \u003c/p\u003e\n\n\u003cp\u003eRepetition and abstraction in programming go hand-in-hand. It's hard to imagine a program that must carry out a certain responsibilty or do a certain job \u003cem\u003eonly once\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou might be writing code for a game that must ask the user for input again and again, until they either win or lose. You might need to send a user of a web application updates about their account repeatedly. You might need to do something as simple as \u003ccode\u003eputs\u003c/code\u003e out some text to the terminal a specified number of times. \u003c/p\u003e\n\n\u003cp\u003eAll of these scenarios, and many more, can be accomplished with a programming construct called \u003cstrong\u003elooping\u003c/strong\u003e. \u003c/p\u003e\n\n\u003ch2\u003eLooping\u003c/h2\u003e\n\n\u003cp\u003eImagine a scenario in which we are writing a program that needs to \u003ccode\u003eputs\u003c/code\u003e out a greeting to the user a certain number of times, let's say ten times. \u003c/p\u003e\n\n\u003cp\u003eWe might accomplish it like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repititive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eputs \"Hi! Welcome to my very repetitive program\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis implementation has a couple of obvious drawbacks. First, I had to manually type that line of code ten times, which goes against my lazy programmer nature. Secondly, are you sure I typed it ten times? Go ahead and count, I'll wait. \u003c/p\u003e\n\n\u003cp\u003eIt's there eleven times! Another drawback: you need to very closely examine each line to make sure they are in fact identical. In fact, there is a discrepancy in the set of lines above. Can you spot it?\u003c/p\u003e\n\n\u003cp\u003eCode like the snippet above is hard to maintain, but, above all, it is not eloquent. It doesn't immediately convey the task it is responsible for carrying out to the person reading it. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLoops\u003c/strong\u003e, however, allow us to tell our program to do the same thing over and over with just a few simple, clear, and easy to understand lines. \u003c/p\u003e\n\n\u003cp\u003eThere are a number of different looping constructs available to us. In other words, there are a few different types of looping methods and implementation that we will learn. The basic principle, though, is that looping allows us to \u003cstrong\u003eabstract\u003c/strong\u003e away the actual mechanics of enacting the same, or similar, lines of code a certain number of times. Instead of explicitly telling our program to \u003ccode\u003eputs\u003c/code\u003e out a phrase ten times, we can use a loop like this one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e10.times do \u003cbr\u003e  puts \"Hi! Welcome to my very repetitive program\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopy and paste the above code snippet into IRB in your terminal and hit \u003ccode\u003eenter\u003c/code\u003e. You should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003eHi! Welcome to my very repetitive program\u003cbr\u003e# =\u0026gt; 10 \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRegardless of whether we understand how the code above works, we can see the advantages it has over our first implementation. First, we are able to achieve the same result as our first implementation with far fewer lines of code. Secondly, it eliminates the room for error that manually typing out \u003ccode\u003eputs \"Hi! Welcome to my very repetitive program\"\u003c/code\u003e allows. \u003c/p\u003e\n\n\u003cp\u003eLastly, it clearly conveys to the reader exactly what it will accomplish. It reads like this \"ten times do \u003ccode\u003eputs\u003c/code\u003e out this phrase to the terminal\". This is abstract, rather than the explicit typing of ten lines of identical code, which is literal. And this is eloquent, because it speaks for itself. \u003c/p\u003e","frontPage":false},{"exportId":"working-with-nested-data-structures","title":"Working with Nested Data Structures","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWelcome to \"Programming as Collaboration.\" In this series of lessons, we're\ngoing to collaborate with the computer to discover \u003cem\u003einsights\u003c/em\u003e buried in complex\nnested data structures (NDS). Complex nested data structures are things like\n\u003ccode\u003eArrays\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e or \u003ccode\u003eHashes\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e of \u003ccode\u003eHashes\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe italicized \u003cem\u003einsight\u003c/em\u003e because we want to emphasize something very important.\nThere's a difference between raw data and conclusions drawn from that data. When\nprocessed correctly, data can teach us many things. The conclusions we extract\nfrom data with programming are called \u003cem\u003einsights\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a data-into-insight example form history.  In 1854, the physician\nJohn Snow recorded data identifying which Londoners in and about Broad Street\nhad contracted cholera. He thus had an initial data set, something very close to\na nested data structure. Snow then tested multiple hypotheses against the data,\nbut the one that fit the data best was this: cholera was being spread via an\ninfected pump in the neighborhood. This event is called \"In the\n\u003ca href=\"https://en.wikipedia.org/wiki/1854_Broad_Street_cholera_outbreak\"\u003e1854 Broad Street Cholera\u003c/a\u003e.\"\u003c/p\u003e\n\n\u003cp\u003eIt marks the birth of epidemiology and, in truth, the discipline that would come\nto be called \"data science.\"\u003c/p\u003e\n\n\u003ch2\u003eNDS into Insight\u003c/h2\u003e\n\n\u003cp\u003eIn the study of the cholera outbreak, we can see Snow's method:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRaw data\n\n\u003cul\u003e\n\u003cli\u003ehouseholds with death by cholera\u003c/li\u003e\n\u003cli\u003ewater source by households with death\u003c/li\u003e\n\u003cli\u003ewater source by households without death\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHuman Effort\n\n\u003cul\u003e\n\u003cli\u003e\"Is there a common water source for households suffering cholera death?\"\u003c/li\u003e\n\u003cli\u003e\"Do households that don't use the Broad Street water pump avoid cholera\ndeath?\"\u003c/li\u003e\n\u003cli\u003e\"Why do individuals who work at the nearby brewery seem immune to cholera?\"\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eInsight\u003c/em\u003e: \u003cstrong\u003eThe Broad Street pump is spreading disease! And the brewery\nworkers avoid it by drinking low-alcohol beer all day!\u003c/strong\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe work ahead of us looks a lot like John Snow's method:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRaw data in the form of an NDS\n\n\u003cul\u003e\n\u003cli\u003eProvided from our databases, or\u003c/li\u003e\n\u003cli\u003eProvided by a third party\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eForm hypotheses and write code to provide results from the NDS\u003c/li\u003e\n\u003cli\u003eDiscover \u003cem\u003einsights\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTransforming raw data, usually held in complex nested data structures, to\n\u003cem\u003einsights\u003c/em\u003e is one of the most essential roles programmers fulfill in\nbusinesses. These \u003cem\u003einsights\u003c/em\u003e help us decide where to (or not to) build a\nwarehouse, evaluate whether an investment is likely to be positive or negative,\nbuild alternative major-league baseball staffing strategies (\"\u003ca href=\"https://grantland.com/features/the-economics-moneyball/\"\u003eMoneyball\u003c/a\u003e\"),\nor even, in the case of the \u003ca href=\"https://en.wikipedia.org/wiki/1854_Broad_Street_cholera_outbreak\"\u003e1854 outbreak\u003c/a\u003e, \u003cem\u003esave lives\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eThe Road Ahead\u003c/h2\u003e\n\n\u003cp\u003eOur efforts will be divided into two phases:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn to build and evaluate complex NDS' so that we can work with them\u003c/li\u003e\n\u003cli\u003eIdentify a process for writing programs that process NDS' into insights\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNested data structures are tools for representing complex information in a way\nthat humans can read and that computers can process. Reading them and\nprocessing them allows us to create \u003cem\u003einsights\u003c/em\u003e that improve our lives.\u003c/p\u003e\n\n\u003cp\u003eThe remainder of this module will train up our skill in working with NDS with\nthe collaboration of a computer to produce insight.\u003c/p\u003e\n\n\u003cp\u003eTo start, we'll introduce some of the simplest nested data structures. These\nstructures tend to be nested together to build complex data structures, so it's\nhelpful to understand them in isolation. The four we'll be digging into in the\nnext several lessons are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es (AoA)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees (AoH)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es (HoA)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees (HoH)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhile you might have seen these nested data structures before, these lessons use\nmore technical and more precise language to describe them. Additionally, we\ndiscuss them with focus on how we are going to process them. Based on our\nhistorical data, Flatiron students have often encountered difficulty moving from\n\"I understand these structures\" to \"I know how to work with these structures.\"\nDon't lose this opportunity to make sure you know how to turn your knowledge\ninto \u003cem\u003einsight\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's get started!\u003c/p\u003e","frontPage":false},{"exportId":"mapping-ruby-classes-to-a-database","title":"Mapping Ruby Classes to a Database","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-mapping-classes-to-database-tables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eMap a Ruby class to a database table and an instance of a class to a table row.\u003c/li\u003e\n\u003cli\u003eWrite code that maps a Ruby class to a database table. \u003c/li\u003e\n\u003cli\u003eWrite code that inserts data regarding an instance of a class into a database table row. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eMapping a Class to a Table\u003c/h2\u003e\n\n\u003cp\u003eWhen building an ORM to connect our Ruby program to a database, we equate a class with a database table and the instances that the class produces to rows in that table. \u003c/p\u003e\n\n\u003cp\u003eWhy map classes to tables? Our end goal is to persist information regarding songs to a database. In order to persist that data efficiently and in an organized manner, we need to first map or equate our Ruby class to a database table. \u003c/p\u003e\n\n\u003cp\u003eLet's say we are building a music player app that allows users to store their music and browse their songs by song.\u003c/p\u003e\n\n\u003cp\u003eThis program will have a \u003ccode\u003eSong\u003c/code\u003e class. Each song instance will have a name and an album attribute. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :album\u003cbr\u003e\u003cbr\u003e  def initialize(name, album)\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have an \u003ccode\u003eattr_accessor\u003c/code\u003e for \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ealbum\u003c/code\u003e. In order to \"map\" this \u003ccode\u003eSong\u003c/code\u003e class to a songs database table, we need to create our database, then we need to create our songs table. In building an ORM, it is conventional to pluralize the name of the class to create the name of the table. Therefore, the \u003ccode\u003eSong\u003c/code\u003e class equals the \"songs\" table.\u003c/p\u003e\n\n\u003ch3\u003eCreating the Database\u003c/h3\u003e\n\n\u003cp\u003eBefore we can create a songs table we need to create our music database. Whose responsibility is it to create the database? It is not the responsibility of our \u003ccode\u003eSong\u003c/code\u003e class. Remember, classes are mapped to \u003cem\u003etables inside a database\u003c/em\u003e, not to the database as a whole. We may want to build other classes that we equate with other database tables later on. \u003c/p\u003e\n\n\u003cp\u003eIt is the responsibility of our program as a whole to create and establish the database. Accordingly, you'll see our Ruby programs set up such that they have a \u003ccode\u003econfig\u003c/code\u003e directory that contains an \u003ccode\u003eenvironment.rb\u003c/code\u003e file. This file will look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'sqlite3'\u003cbr\u003erequire_relative '../lib/song.rb'\u003cbr\u003e\u003cbr\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/music.db\")}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we set up a constant, \u003ccode\u003eDB\u003c/code\u003e, that is equal to a hash that contains our connection to the database. In our \u003ccode\u003elib/song.rb\u003c/code\u003e file, we can therefore access the \u003ccode\u003eDB\u003c/code\u003e constant and the database connection it holds like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDB[:conn]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, as we move through this reading, let's assume that our hypothetical program has a \u003ccode\u003econfig/environment.rb\u003c/code\u003e file and that the \u003ccode\u003eDB[:conn]\u003c/code\u003e constant refers to our connection to the database. \u003c/p\u003e\n\n\u003cp\u003eNow that our hypothetical database is set up in our hypothetical program, let's move on to our \u003ccode\u003eSong\u003c/code\u003e class and its equivalent database table. \u003c/p\u003e\n\n\u003ch3\u003eCreating the Table\u003c/h3\u003e\n\n\u003cp\u003eAccording to the ORM convention in which a class is mapped to or equated with a database table, we need to create a songs table. We will accomplish this by writing a class method in our \u003ccode\u003eSong\u003c/code\u003e class that creates this table. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTo \"map\" our class to a database table, we will create a table with the same name as our class and give that table column names that match the \u003ccode\u003eattr_accessor\u003c/code\u003es of our class.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eHere's an example of a \u003ccode\u003eSong\u003c/code\u003e class that maps instance attributes to table columns:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :album, :id\u003cbr\u003e\u003cbr\u003e  def initialize(name, album, id=nil)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create_table\u003cbr\u003e    sql =  \u0026lt;      CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e        id INTEGER PRIMARY KEY, \u003cbr\u003e        name TEXT, \u003cbr\u003e        album TEXT\u003cbr\u003e        )\u003cbr\u003e        SQL\u003cbr\u003e    DB[:conn].execute(sql) \u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break down this code.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003eid\u003c/code\u003e Attribute\u003c/h4\u003e\n\n\u003cp\u003eNotice that we are initializing an individual \u003ccode\u003eSong\u003c/code\u003e instance with an \u003ccode\u003eid\u003c/code\u003e attribute that has a default value of \u003ccode\u003enil\u003c/code\u003e. Why are we doing this? First of all, songs need an \u003ccode\u003eid\u003c/code\u003e attribute only because they will be saved into the database and we know that each table row needs an \u003ccode\u003eid\u003c/code\u003e value which is the primary key. \u003c/p\u003e\n\n\u003cp\u003eWhen we create a new song with the \u003ccode\u003eSong.new\u003c/code\u003e method, we \u003cem\u003edo not set that song's id\u003c/em\u003e. A song gets an \u003ccode\u003eid\u003c/code\u003e only when it gets saved into the database (more on inserting songs into the database later). We therefore set the default value of the \u003ccode\u003eid\u003c/code\u003e argument that the \u003ccode\u003e#initialize\u003c/code\u003e method takes equal to \u003ccode\u003enil\u003c/code\u003e, so that we can create new song instances that *do not have an \u003ccode\u003eid\u003c/code\u003e value. We'll leave that up to the database to handle later on. Why leave it up to the database? Remember that in the world of relational database, the \u003ccode\u003eid\u003c/code\u003e of a given record must be unique. If we could replicate a record's \u003ccode\u003eid\u003c/code\u003e, we would have a very disorganized database. Only the database itself, through the magic of SQL, can ensure that the \u003ccode\u003eid\u003c/code\u003e of each record is unique. \u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e.create_table\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eAbove, we created a class method, \u003ccode\u003e.create_table\u003c/code\u003e, that crafts a SQL statement to create a songs table and give that table column names that match the attributes of an individual instance of \u003ccode\u003eSong\u003c/code\u003e. Why is the \u003ccode\u003e.create_table\u003c/code\u003e method a class method? Well, it is \u003cem\u003enot\u003c/em\u003e the responsibility of an individual song to create the table it will eventually be saved into. It is the job of the class as a whole to create the table that it is mapped to. \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e For strings that will take up multiple lines in your text editor, use a \u003ca href=\"https://en.wikipedia.org/wiki/Here_document\"\u003eheredoc\u003c/a\u003e to create a string that runs on to multiple lines.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;\u0026lt;-\u003c/code\u003e + \u003ccode\u003especial word meaning \"End of Document\"\u003c/code\u003e + \u003ccode\u003ethe string, on multiple lines\u003c/code\u003e + \u003ccode\u003especial word meaning \"End of Document\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou don't have to use a heredoc, it's just a helpful tool for crafting long strings in Ruby. Back to our regularly scheduled programming...\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNow that our songs table exists, we can learn how to save data regarding individual songs into that table. \u003c/p\u003e\n\n\u003ch2\u003eMapping Class Instances to Table Rows\u003c/h2\u003e\n\n\u003cp\u003eWhen we say that we are saving data to our database, what data are we referring to? If individual instances of a class are \"mapped\" to rows in  a table, does that mean that the instances themselves, these individual Ruby objects, are saved into the database?\u003c/p\u003e\n\n\u003cp\u003eActually, \u003cstrong\u003ewe are not saving Ruby objects in our database.\u003c/strong\u003e We are going to take the individual attributes of a given instance, in this case a song's name and album, and save \u003cem\u003ethose attributes that describe an individual song\u003c/em\u003e to the database as one, single row.\u003c/p\u003e\n\n\u003cp\u003eFor example, let's say we have a song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egold_digger = Song.new(\"Gold Digger\", \"Late Registration\")\u003cbr\u003e\u003cbr\u003egold_digger.name\u003cbr\u003e# =\u0026gt; \"Gold Digger\"\u003cbr\u003e\u003cbr\u003egold_digger.album\u003cbr\u003e# =\u0026gt; \"Late Registration\" \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis song has its two attributes, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ealbum\u003c/code\u003e, set equal to the above values. In order to save the song \u003ccode\u003egold_digger\u003c/code\u003e into the songs table, we will use the name and album of the song to create a new row in that table. The SQL statement we want to execute would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album) VALUES (\"Gold Digger\", \"Late Registration\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we had another song that we wanted to save?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003e\u003cbr\u003ehello.name \u003cbr\u003e# =\u0026gt; \"Hello\"\u003cbr\u003e\u003cbr\u003ehello.album\u003cbr\u003e# =\u0026gt; \"25\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn order to save \u003ccode\u003ehello\u003c/code\u003e into our database, we do not insert the Ruby object stored in the \u003ccode\u003ehello\u003c/code\u003e variable. Instead, we use \u003ccode\u003ehello\u003c/code\u003e's name and album values to create a new row in the songs table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album) VALUES (\"Hello\", \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that the operation of saving the attributes of a particular song into a database table is common enough. Every time we want to save a record, though, we are repeating the same exact steps and using the same code. The only things that are different are the values that we are inserting into our songs table. Let's abstract this functionality into an instance method, \u003ccode\u003e#save\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eInserting Data into a table with the \u003ccode\u003e#save\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eLet's build an instance method, \u003ccode\u003e#save\u003c/code\u003e, that saves a given instance of our \u003ccode\u003eSong\u003c/code\u003e class into the songs table of our database. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album) \u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break down the code in this method. \u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#save\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eIn order to \u003ccode\u003eINSERT\u003c/code\u003e data into our songs table, we need to craft a SQL \u003ccode\u003eINSERT\u003c/code\u003e statement. Ideally, it would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album)\u003cbr\u003eVALUES songs_name, songs_album\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, we used the heredoc to craft our multi-line SQL statement. How are we going to pass in, or interpolate, the name and album of a given song into our heredoc? \u003c/p\u003e\n\n\u003cp\u003eWe use something called \u003cstrong\u003ebound parameters\u003c/strong\u003e. \u003c/p\u003e\n\n\u003ch4\u003eBound Parameters\u003c/h4\u003e\n\n\u003cp\u003eBound parameters protect our program from getting confused by \u003ca href=\"https://en.wikipedia.org/wiki/SQL_injection\"\u003eSQL injections\u003c/a\u003e and special characters. Instead of interpolating variables into a string of SQL, we are using the \u003ccode\u003e?\u003c/code\u003e characters as placeholders. Then, the special magic provided to us by the SQLite3-Ruby gem's \u003ccode\u003e#execute\u003c/code\u003e method will take the values we pass in as an argument and apply them as the values of the question marks. \u003c/p\u003e\n\n\u003ch4\u003eHow it works\u003c/h4\u003e\n\n\u003cp\u003eSo, our \u003ccode\u003e#save\u003c/code\u003e method inserts a record into our database that has the name and album values of the song instance we are trying to save. We are not saving the Ruby object itself. We are creating a new row in our songs table that has the values that characterize that song instance. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e Notice that we \u003cem\u003edidn't\u003c/em\u003e insert an ID number into the table with the above statement. Remember that the \u003ccode\u003eINTEGER PRIMARY KEY\u003c/code\u003e datatype will assign and auto-increment the id attribute of each record that gets saved.\u003c/p\u003e\n\n\u003ch2\u003eCreating Instances vs. Creating Table Rows\u003c/h2\u003e\n\n\u003cp\u003eThe moment in which we create a new \u003ccode\u003eSong\u003c/code\u003e instance with the \u003ccode\u003e#new\u003c/code\u003e method is \u003cem\u003edifferent than the moment in which we save a representation of that song to our database\u003c/em\u003e. The \u003ccode\u003e#new\u003c/code\u003e method creates a new instance of the song class, a new Ruby object. The \u003ccode\u003e#save\u003c/code\u003e method takes the attributes that characterize a given song and saves them in a new row of the songs table in our database.\u003c/p\u003e\n\n\u003cp\u003eAt what point in time should we actually save a new record? While it is possible to save the record right at the moment the new object is created, i.e. in the \u003ccode\u003e#initialize\u003c/code\u003e method, this is not a great idea. We don't want to force our objects to be saved every time they are created, or make the creation of an object dependent upon/always coupled with saving a record to the database. As our program grows and changes, we may find the need to create objects and not save them. A dependency between instantiating an object and saving that record to the database would preclude this or, at the very least, make it harder to implement. \u003c/p\u003e\n\n\u003cp\u003eSo, we'll keep our \u003ccode\u003e#initialize\u003c/code\u003e and \u003ccode\u003e#save\u003c/code\u003e methods separate:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :album, :id\u003cbr\u003e\u003cbr\u003e  def initialize(name, album, id=nil)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create_table\u003cbr\u003e    sql =  \u0026lt;      CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e        id INTEGER PRIMARY KEY, \u003cbr\u003e        name TEXT, \u003cbr\u003e        album TEXT\u003cbr\u003e        )\u003cbr\u003e        SQL\u003cbr\u003e    DB[:conn].execute(sql) \u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album) \u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we can create and save songs like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.create_table\u003cbr\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003eninety_nine_problems = Song.new(\"99 Problems\", \"The Black Album\")\u003cbr\u003e\u003cbr\u003ehello.save\u003cbr\u003eninety_nine_problems.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eGiving Our \u003ccode\u003eSong\u003c/code\u003e Instance an \u003ccode\u003eid\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eWhen we \u003ccode\u003eINSERT\u003c/code\u003e the data concerning a particular \u003ccode\u003eSong\u003c/code\u003e instance into our database table, we create a new row in that table. That row would look something like this:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eAlbum\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003eHello\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eNotice that the database table's row has a column for \u003ccode\u003eName\u003c/code\u003e, \u003ccode\u003eAlbum\u003c/code\u003e and also \u003ccode\u003eID\u003c/code\u003e. Recall that we created our table to have a column for the primary key, ID, of a given record. So, as each record gets inserted into the database, it is given an ID number automatically. \u003c/p\u003e\n\n\u003cp\u003eIn this way, our \u003ccode\u003ehello\u003c/code\u003e instance is stored in the database with the name and album that we gave it, \u003cem\u003eplus\u003c/em\u003e an ID number that the database assigns to it. \u003c/p\u003e\n\n\u003cp\u003eWe want our \u003ccode\u003ehello\u003c/code\u003e instance to completely reflect the database row it is associated with so that we can retrieve it from the table later on with ease. So, once the new row with \u003ccode\u003ehello\u003c/code\u003e's data is inserted into the table, let's grab the \u003ccode\u003eID\u003c/code\u003e of that newly inserted row and assign it to be the value of \u003ccode\u003ehello\u003c/code\u003e's \u003ccode\u003eid\u003c/code\u003e attribute. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :album, :id\u003cbr\u003e\u003cbr\u003e  def initialize(name, album, id=nil)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    sql = \u0026lt;      INSERT INTO songs (name, album) \u003cbr\u003e      VALUES (?, ?)\u003cbr\u003e    SQL\u003cbr\u003e\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e\u003cbr\u003e    @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt the end of our \u003ccode\u003esave\u003c/code\u003e method, we use a SQL query to grab the value of the \u003ccode\u003eID\u003c/code\u003e column of the last inserted row, and set that equal to the given song instance's \u003ccode\u003eid\u003c/code\u003e attribute. Don't worry too much about how that SQL query works for now, we'll learn more about it later. The important thing to understand is the process of:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eInstantiating a new instance of the \u003ccode\u003eSong\u003c/code\u003e class.\u003c/li\u003e\n\u003cli\u003eInserting a new row into the database table that contains the information regarding that instance.\u003c/li\u003e\n\u003cli\u003eGrabbing the \u003ccode\u003eID\u003c/code\u003e of that newly inserted row and assigning the given \u003ccode\u003eSong\u003c/code\u003e instance's \u003ccode\u003eid\u003c/code\u003e attribute equal to the \u003ccode\u003eID\u003c/code\u003e of its associated database table row.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's revisit our code that instantiated and saved some songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.create_table\u003cbr\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003eninety_nine_problems = Song.new(\"99 Problems\", \"The Black Album\")\u003cbr\u003e\u003cbr\u003ehello.save\u003cbr\u003eninety_nine_problems.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate the songs table. \u003c/li\u003e\n\u003cli\u003eCreate two new song instances. \u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003esong.save\u003c/code\u003e method to persist them to the database.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis approach still leaves a little to be desired, however. Here, we have to first create the new song and then save it, every time we want to create and save a song. This is repetitive and tedious. As programmers (you might remember), we are lazy. If we can accomplish something with fewer lines of code we do it. \u003cstrong\u003eAny time we see the same code being used again and again, we think about abstracting that code into a method.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSince first creating an object and then saving a record representing that object is so common, let's write a method that does just that.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will wrap the code we used above to create a new \u003ccode\u003eSong\u003c/code\u003e instance and save it. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def self.create(name:, album:)\u003cbr\u003e    song = Song.new(name, album)\u003cbr\u003e    song.save\u003cbr\u003e    song\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we use keyword arguments to pass a name and album into our \u003ccode\u003e.create\u003c/code\u003e method. We use that name and album to instantiate a new song. Then, we use the \u003ccode\u003e#save\u003c/code\u003e method to persist that song to the database. \u003c/p\u003e\n\n\u003cp\u003eNotice that at the end of the method, we are returning the \u003ccode\u003esong\u003c/code\u003e instance that we instantiated. The return value of \u003ccode\u003e.create\u003c/code\u003e should always be the object that we created. Why? Imagine you are working with your program and you create a new song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.create(name: \"Hello\", album: \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we would have to run a separate query on our database to grab the record that we just created. That is way too much work for us. It would be much easier for our \u003ccode\u003e.create\u003c/code\u003e method to simply return the new object for us to work with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.create(name: \"Hello\", album: \"25\")\u003cbr\u003e# =\u0026gt; #\u003cbr\u003e\u003cbr\u003esong.name\u003cbr\u003e# =\u0026gt; \"Hello\"\u003cbr\u003e\u003cbr\u003esong.album\u003cbr\u003e# =\u0026gt; \"25\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe important concept to grasp here is the idea that we are \u003cem\u003enot\u003c/em\u003e saving Ruby objects into our database. We are using the attributes of a given Ruby object to create a new row in our database table. \u003c/p\u003e\n\n\u003cp\u003eThink of it like making butter cookies. You have a cookie cutter, which in our case would be our class. It describes what a cookie should look like. Then you use it to cut out a cookie, or instantiate a class object. But that's not enough, you have to show it to your friends. So you take a picture of it and post to your Bookface account and share it with everybody else, like how your database can share information with other parts of your program.\u003c/p\u003e\n\n\u003cp\u003eThe picture doesn't do anything to the cookie itself, but merely captures certain aspects of it. It's a butter cookie, it looks fresh and delicious, and it has little sprinkles on it. Those aspects are captured in the picture, but the cookie and the picture are still two different things. Ceci n'est pas une butter cookie! After you eat the cookie, or in our case after you delete the Ruby object, the database will not change at all until the record is deleted, and vice versa.\u003c/p\u003e","frontPage":false},{"exportId":"active-record-introduction","title":"Active Record Introduction","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow that we've covered object relationships and ORMs, we will introduce Active\nRecord. Active Record is an ORM - it does the same sort of tasks we learned about\npreviously with ORMs. Using Active Record, just like using\nan ORM, can make fetching and representing data easier. Using Active Record saves\nus the trouble of writing our own custom ORMs.\u003c/p\u003e\n\n\u003cp\u003eActive Record gives us a few features. In this section we will discuss:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe Active Record conventions and why programmers use them\u003c/li\u003e\n\u003cli\u003eActive Record query methods\u003c/li\u003e\n\u003cli\u003eUsing Active Record to create a table\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next several lessons, we'll learn how to build tables with Active Record,\nwhere properties and relationships of the objects in an application are stored\nand retrieved from a database without writing SQL statements. \u003c/p\u003e","frontPage":false},{"exportId":"looping","title":"Looping","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIntroduce the concept of a basic \u003ccode\u003eloop\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIntroduce the \u003ccode\u003ebreak\u003c/code\u003e keyword.\u003c/li\u003e\n\u003cli\u003eIntroduce the concept of an incrementing counter.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebreak\u003c/code\u003e out of a \u003ccode\u003eloop\u003c/code\u003e based on a \u003ccode\u003ecounter\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThere are a number of different ways to accomplish looping––the task of telling\nour program to do something a certain number of times. Here, we'll be looking at\nthe most basic way to build a loop: using the \u003ccode\u003eloop\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch2\u003eThe \u003ccode\u003eloop\u003c/code\u003e Keyword\u003c/h2\u003e\n\n\u003cp\u003eThe first looping construct that we'll discuss is \u003ccode\u003eloop\u003c/code\u003e. This is the simplest\nlooping construct that we have in Ruby. It simply executes a block (the code\nthat is between the \u003ccode\u003edo\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e keywords). Try this in IRB in your Terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eloop do\u003cbr\u003e  puts \"I have found the Time Machine!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will output \u003ccode\u003eI have found the Time Machine!\u003c/code\u003e an infinite number of times in\nyour Terminal. Typically, you can use \u003ccode\u003eControl\u003c/code\u003e+\u003ccode\u003eC\u003c/code\u003e to break out of the loop in\nyour terminal, but in IRB this is not the case. Exit the terminal session to\nbreak the infinite loop.\u003c/p\u003e\n\n\u003cp\u003eLoops start with the \u003ccode\u003eloop\u003c/code\u003e keyword and are opened by the following \u003ccode\u003edo\u003c/code\u003e and\n\u003ccode\u003eend\u003c/code\u003e block. All the code that goes inside the \u003ccode\u003edo\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e is considered the\nloop's body or block; that's the code that will execute on repeat.\u003c/p\u003e\n\n\u003ch2\u003eStopping Loops with Break and Counters\u003c/h2\u003e\n\n\u003cp\u003eInfinite loops will break our program. The \u003ccode\u003eloop\u003c/code\u003e keyword alone will create an\ninfinite loop. Generally, we want to loop only a certain number of times. We can\nuse the \u003ccode\u003ebreak\u003c/code\u003e keyword inside the body of the loop to exit or abort the loop\nand continue with the rest of our code. Consider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eloop do\u003cbr\u003e  puts \"You'll see this exactly once.\"\u003cbr\u003e  break # Exit the Loop\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eputs \"And the Loop is Done\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur loop starts, it prints our message, and then the next line of code, \u003ccode\u003ebreak\u003c/code\u003e\nwill actually end the loop. A loop that only runs once isn't useful. Neither is\na loop that runs forever. So how do we actually build a useful loop, say, that\nruns exactly 10 times? Well first, we need a counter. Then we need to\nconditionally break out of the loop when the counter reaches 10. Then we need to\nincrement the counter at every iteration (or execution of the loop).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecounter = 0 # Start our counter at 0, we have never run the loop\u003cbr\u003eloop do # Start our loop\u003cbr\u003e  # increment our counter by 1 and set it equal to the sum of its current value, plus 1. \u003cbr\u003e  counter = counter + 1\u003cbr\u003e\u003cbr\u003e  # Do Something\u003cbr\u003e  puts \"Iteration #{counter} of the loop\"\u003cbr\u003e\u003cbr\u003e  if counter \u0026gt;= 10 # If our counter is 10 or more\u003cbr\u003e    break # Stop the loop\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you copy this to IRB you'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eIteration 1 of the loop\u003cbr\u003eIteration 2 of the loop\u003cbr\u003eIteration 3 of the loop\u003cbr\u003eIteration 4 of the loop\u003cbr\u003eIteration 5 of the loop\u003cbr\u003eIteration 6 of the loop\u003cbr\u003eIteration 7 of the loop\u003cbr\u003eIteration 8 of the loop\u003cbr\u003eIteration 9 of the loop\u003cbr\u003eIteration 10 of the loop\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is a common basic loop. With this construct we can \u003ccode\u003ebreak\u003c/code\u003e a \u003ccode\u003eloop\u003c/code\u003e based\non any condition, but the iteration count is a very common condition for\nstopping the loop.\u003c/p\u003e\n\n\u003ch2\u003eAdvanced: The Add-And-Assignment (or Plus-Equals) Operator \u003ccode\u003e+=\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAbove, we use the addition operator (\u003ccode\u003e+\u003c/code\u003e) and the assignment operator \u003ccode\u003e=\u003c/code\u003e\nseparately to reset the \u003ccode\u003ecounter\u003c/code\u003e variable to the sum of its old value, plus\none, every time we repeat the loop. The add-and-assignment operator combines the\nfunctionality of the addition operator \u003cem\u003eand\u003c/em\u003e the assignment operator. For\nexample, let's say that our favorite cat Maru has just had a birthday:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eadorable_cat = \"Maru\"\u003cbr\u003eage = 7\u003cbr\u003e\u003cbr\u003e# you've just had a birthday! add one year to your age:\u003cbr\u003eage = 7 + 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's take another look at our \u003ccode\u003eage\u003c/code\u003e variable and the operation of incrementing\nit by \u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eage = 7\u003cbr\u003e# age starts at 7 and will get incremented after the birthday\u003cbr\u003eage = age + 1\u003cbr\u003eage #=\u0026gt; 8\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we have one variable, \u003ccode\u003eage\u003c/code\u003e which starts at \u003ccode\u003e7\u003c/code\u003e. Then, we reassign \u003ccode\u003eage\u003c/code\u003e\nto hold the original value of \u003ccode\u003eage\u003c/code\u003e plus \u003ccode\u003e1\u003c/code\u003e. \u003ccode\u003eage + 1\u003c/code\u003e is evaluated first,\nreturning \u003ccode\u003e8\u003c/code\u003e, and then we are assigning the result of that expression\n(everything on the right of \u003ccode\u003eage =\u003c/code\u003e, which again is \u003ccode\u003eage + 1\u003c/code\u003e, which just means\n\u003ccode\u003e8\u003c/code\u003e), as the new value for \u003ccode\u003eage\u003c/code\u003e. We can make this even more elegant by using\nthe add-and-assignment operator \u003ccode\u003e+=\u003c/code\u003e instead:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eage = 7\u003cbr\u003eage += 1\u003cbr\u003eage #=\u0026gt; 8\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, \u003ccode\u003e+=\u003c/code\u003e serves the purpose of the above line: \u003ccode\u003eage = age + 1\u003c/code\u003e. It's simply\ncondensing that action. It adds a numerical value (or other variable) to a\nnumerical variable, and reassigns that variable to hold the sum of that\nvariable's original value plus the added value (or other variable).\u003c/p\u003e\n\n\u003cp\u003eWhen we use \u003ccode\u003e+=\u003c/code\u003e, we call this action \"incrementing\". We are adding a new\nincrement to a known value. Why is that useful? For looping.\u003c/p\u003e\n\n\u003cp\u003eLet's re-write our loop from earlier, this time using the \u003ccode\u003e+=\u003c/code\u003e operator:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecounter = 0\u003cbr\u003e\u003cbr\u003eloop do \u003cbr\u003e  counter += 1\u003cbr\u003e  puts \"Iteration #{counter} of the loop\"\u003cbr\u003e  if counter \u0026gt;= 10 \u003cbr\u003e    break\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you copy this to IRB you'll see the same output as above:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eIteration 1 of the loop\u003cbr\u003eIteration 2 of the loop\u003cbr\u003eIteration 3 of the loop\u003cbr\u003eIteration 4 of the loop\u003cbr\u003eIteration 5 of the loop\u003cbr\u003eIteration 6 of the loop\u003cbr\u003eIteration 7 of the loop\u003cbr\u003eIteration 8 of the loop\u003cbr\u003eIteration 9 of the loop\u003cbr\u003eIteration 10 of the loop\n\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"iterators-and-abstraction","title":"Iterators and Abstraction","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"iterators-and-abstraction-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/iterators-and-abstraction-ruby/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/iterators-and-abstraction-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/iterators-and-abstraction-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cimg src=\"http://ironboard-curriculum-content.s3.amazonaws.com/web-development/abstraction-bull.jpg\" alt=\"Picasso on Abstraction\"\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eNotice that the details of the bull are removed  and the image is still identifiably a bull.\u003c/em\u003e\u003cbr\u003e\n— Pablo Picasso, on Abstraction.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the concept of iteration \u003c/li\u003e\n\u003cli\u003eUnderstand simple iteration or looping\u003c/li\u003e\n\u003cli\u003eGet an introduction to complex iteration\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIteration vs. Looping\u003c/h2\u003e\n\n\u003cp\u003eIn previous readings we discussed the four loop types, \u003ccode\u003eloop\u003c/code\u003e, \u003ccode\u003etimes\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, and \u003ccode\u003euntil\u003c/code\u003e. Now we're going to discuss the difference between looping and iteration. \u003cstrong\u003eLooping\u003c/strong\u003e occurs when you tell your program to do something a certain number of times. \u003cstrong\u003eIteration\u003c/strong\u003e occurs when you have a collection of data (for example, an array), and you operate on each member of that collection. \u003c/p\u003e\n\n\u003cp\u003eFor example, if I tell my program to print out the phrase \"I love programming!\" five times, that's \u003cem\u003elooping\u003c/em\u003e. If I tell my program to enumerate over the array \u003ccode\u003e[1, 2, 3, 4, 5]\u003c/code\u003e and add \u003ccode\u003e10\u003c/code\u003e to each number, that's \u003cem\u003eiteration\u003c/em\u003e. \u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003eloop\u003c/code\u003e - The Least Abstract\u003c/h2\u003e\n\n\u003cp\u003eLet's talk about the algorithm required to go through all the individual items in a set.\u003c/p\u003e\n\n\u003cp\u003eImagine having a basket with ten (10) apples in it. What would you need to do to make sure that you took out all of the apples? You might think that it's enough to take an apple out of the basket one at a time. But that's not necessarily complete—at a certain point there will be no more apples in the basket; you will need to keep track of that or else you might never stop reaching in for more apples. The solution turns out to be a little more complex than it seemed at first; it might look like something like this:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eKeep track of how many apples there are in the basket.\u003c/li\u003e\n\u003cli\u003eKeep track of how many apples you have taken out of the basket.\u003c/li\u003e\n\u003cli\u003eStart a loop.\u003c/li\u003e\n\u003cli\u003eIf the count of apples you take out is less than the count of apples originally in the basket, take one out and increment the count of apples taken out by one.\u003c/li\u003e\n\u003cli\u003eIf the count of apples taken out is NOT less than the count of apples originally in the basket, then break out of the loop.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis will ensure that we take out all the apples and never reach into the basket once it's been emptied of apples.\u003c/p\u003e\n\n\u003cp\u003eIn Ruby, we might implement the above pseudocode into our code similar to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebasket = [\"apple 1\",\"apple 2\",\"apple 3\",\"apple 4\",\"apple 5\",\"apple 6\",\"apple 7\",\"apple 8\",\"apple 9\",\"apple 10\"]\u003cbr\u003e\u003cbr\u003eapples_in_basket = basket.size # Step 1\u003cbr\u003eapples_taken_out = 0 # Step 2\u003cbr\u003e\u003cbr\u003eloop do # Step 3\u003cbr\u003e    if apples_taken_out \u0026lt; apples_in_basket \u003cbr\u003e        # Step 4\u003cbr\u003e        puts \"Taking out #{basket[apples_taken_out]}\"\u003cbr\u003e        apples_taken_out += 1\u003cbr\u003e    else\u003cbr\u003e        # Step 5\u003cbr\u003e        break\u003cbr\u003e    end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo that's the least abstract implementation of the algorithm. All the details are there, every step is accounted for explicitly in the code. We won't change the algorithm, we'll just look at more abstract implementations.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003ewhile\u003c/code\u003e - A Little More Abstract\u003c/h2\u003e\n\n\u003cp\u003eThe goal of abstraction is to remove details.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebasket = [\"apple 1\",\"apple 2\",\"apple 3\",\"apple 4\",\"apple 5\",\"apple 6\",\"apple 7\",\"apple 8\",\"apple 9\",\"apple 10\"]\u003cbr\u003e\u003cbr\u003eapples_in_basket = basket.size # Step 1\u003cbr\u003eapples_taken_out = 0 # Step 2\u003cbr\u003e\u003cbr\u003e# Step 3 + 4\u003cbr\u003ewhile apples_taken_out \u0026lt; apples_in_basket\u003cbr\u003e    puts \"Taking out #{basket[apples_taken_out]}\"\u003cbr\u003e    apples_taken_out += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat we did here first was combine two steps 3 and 4 into a \u003ccode\u003ewhile\u003c/code\u003e loop—initializing a cycle of behavior based upon a condition, which is what the word \u003ccode\u003ewhile\u003c/code\u003e means both in Ruby and in English. Abstraction didn't make our code less clear, it rather made our code \"absolutely precise\". Brevity for the sake of brevity is silly, but our goal is to always express ourselves as clearly and honestly as possible. Because our loop is conditional from the start by using the \u003ccode\u003ewhile\u003c/code\u003e loop construct, we don't need to explicitly break out of it; this makes step 5 implicit.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003eeach\u003c/code\u003e - The Most Abstract\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eBeing abstract is something profoundly different from being vague.... The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise.\u003cbr\u003e\n— Edsger Dijkstra\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003ebasket = [\"apple 1\",\"apple 2\",\"apple 3\",\"apple 4\",\"apple 5\",\"apple 6\",\"apple 7\",\"apple 8\",\"apple 9\",\"apple 10\"]\u003cbr\u003e\u003cbr\u003e# Step 1,2,3,4,5 as one, abstractly\u003cbr\u003ebasket.each do |apple|\u003cbr\u003e  puts \"Taking out #{apple}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we see the full power of the Ruby iterators. To quote Kent Beck, \"you don't use 3-4 lines to express iteration, you use one word.\" If you mean each apple, just say \u003cem\u003eeach apple\u003c/em\u003e. All the details of the algorithm are removed and replaced with the intention of our code, not the implementation of the algorithm.\u003c/p\u003e\n\n\u003cp\u003eDon't worry if you're not fully grasping \u003ccode\u003eeach\u003c/code\u003e. We'll cover this more in depth in subsequent lessons. \u003c/p\u003e","frontPage":false},{"exportId":"case-statements","title":"Case Statements","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"case-statements-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/case-statements-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/case-statements-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/case-statements-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives:\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDistinguish a \u003ccode\u003ecase\u003c/code\u003e statement from other patterns of flow control.\u003c/li\u003e\n\u003cli\u003eIdentify when to use a \u003ccode\u003ecase\u003c/code\u003e statement.\u003c/li\u003e\n\u003cli\u003eWrite a \u003ccode\u003ecase\u003c/code\u003e statement\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is a \u003ccode\u003ecase\u003c/code\u003e Statement?\u003c/h2\u003e\n\n\u003cp\u003eA case statement is a powerful tool to test for certain conditions. They are used to run multiple conditions against one value. There are three basic steps to creating a case statement. First, we'll need a value. Second, we'll want one or more conditions to compare to the value. Third, we'll add the code we want to run if that condition is met. Let's walk through these steps in more detail below.\u003c/p\u003e\n\n\u003ch3\u003eWhy Use a \u003ccode\u003ecase\u003c/code\u003e Statement?\u003c/h3\u003e\n\n\u003cp\u003eIn the previous lessons, we've learned about using \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements to enact flow control in our programs. Let's look at an example of using \u003ccode\u003eif\u003c/code\u003e statements that would benefit from being refactored to use a \u003ccode\u003ecase\u003c/code\u003e statement instead. \u003c/p\u003e\n\n\u003cp\u003eLet's say we have a program that sets a \u003ccode\u003ename\u003c/code\u003e variable equal to a person's name. Our program needs to execute certain code depending on what that person's name is. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename = \"Alice\"\u003cbr\u003e\u003cbr\u003eif name == \"Alice\"\u003cbr\u003e  puts \"Hello, Alice!\"\u003cbr\u003eelsif name == \"The White Rabbit\"\u003cbr\u003e  puts \"Don't be late, White Rabbit\"\u003cbr\u003eelsif name == \"The Mad Hatter\"\u003cbr\u003e  puts \"Welcome to the tea party, Mad Hatter\"\u003cbr\u003eelsif name == \"The Queen of Hearts\"\u003cbr\u003e  puts \"Please don't chop off my head!\"\u003cbr\u003eelse\u003cbr\u003e  puts \"Whoooo are you?\"\u003cbr\u003eend \u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove we are using many \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelsif\u003c/code\u003e statements to check if the value of our name variable matches a particular string by using the comparative operator (\u003ccode\u003e==\u003c/code\u003e) in each one. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e \u003cem\u003eRemember that the assignment operator (\u003c/em\u003e\u003ccode\u003e=\u003c/code\u003e\u003cem\u003e) is distinct from the comparative operator (\u003c/em\u003e\u003ccode\u003e==\u003c/code\u003e\u003cem\u003e).\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelsif\u003c/code\u003e statements in this manner creates \"code smell\"—a piece of code that is needlessly complex or difficult to read. Not only are we using a lot of \u003ccode\u003eif\u003c/code\u003e statements, but we are being repetitive in our use of the comparative operator (\u003ccode\u003e==\u003c/code\u003e). We can eliminate this \"code odor\" by refactoring our flow control to use a \u003ccode\u003ecase\u003c/code\u003e statement instead. The \u003ccode\u003ecase\u003c/code\u003e statement will allow us to run multiple conditions against the same value, meaning that we can check the \u003ccode\u003ename\u003c/code\u003e variable against a variety of conditions without repeating our use of the comparative operator (\u003ccode\u003e==\u003c/code\u003e) in each one. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecase name \u003cbr\u003e\u003cbr\u003e  when \"Alice\"\u003cbr\u003e    puts \"Hello, Alice!\"\u003cbr\u003e  when \"The White Rabbit\"\u003cbr\u003e    puts \"Don't be late, White Rabbit\"\u003cbr\u003e  when \"The Mad Hatter\"\u003cbr\u003e    puts \"Welcome to the tea party, Mad Hatter\"\u003cbr\u003e  when \"The Queen of Hearts\"\u003cbr\u003e    puts \"Please don't chop off my head!\"\u003cbr\u003e  else \u003cbr\u003e    puts \"Whoooo are you?\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eWriting a \u003ccode\u003ecase\u003c/code\u003e Statement\u003c/h3\u003e\n\n\u003cp\u003eNow that we understand \u003cem\u003ewhen\u003c/em\u003e to use a \u003ccode\u003ecase\u003c/code\u003e statement in place of a series of \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelsif\u003c/code\u003e statements, let's look at \u003cem\u003ehow\u003c/em\u003e to build a \u003ccode\u003ecase\u003c/code\u003e statement from scratch. \u003c/p\u003e\n\n\u003ch4\u003eStep 1: Create a Value\u003c/h4\u003e\n\n\u003cp\u003eA case statement starts with the \u003ccode\u003ecase\u003c/code\u003e keyword followed by a value to test.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecase greeting\u003cbr\u003e# ...\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eStep 2: Create the Conditions\u003c/h4\u003e\n\n\u003cp\u003eNext, the \u003ccode\u003ewhen\u003c/code\u003e keyword is followed by a condition.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecase greeting\u003cbr\u003e  when \"unfriendly_greeting\"\u003cbr\u003e    #...\u003cbr\u003e  when \"friendly_greeting\"\u003cbr\u003e    #...\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eStep 3: Add the Code\u003c/h4\u003e\n\n\u003cp\u003eThe functionality that we wish to happen when the condition is met is placed on an indented line directly under the \u003ccode\u003ewhen\u003c/code\u003e line. Let's define the behavior:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting = \"friendly_greeting\"\u003cbr\u003e\u003cbr\u003ecase greeting\u003cbr\u003e  when \"unfriendly_greeting\"\u003cbr\u003e    puts \"What do you want!?\"\u003cbr\u003e  when \"friendly_greeting\"\u003cbr\u003e    puts \"Hi! How are you?\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5\u003eAdvanced: How does it work?\u003c/h5\u003e\n\n\u003cp\u003eUnder the hood, \u003ccode\u003ecase\u003c/code\u003e statements actually evaluate their \u003ccode\u003ewhen\u003c/code\u003e conditionals by implicitly using the \"case equality operator\"; the case equality operator is otherwise represented by \u003ccode\u003e===\u003c/code\u003e (\"threequals\") sign. While \u003ccode\u003ecase\u003c/code\u003e can be used to replace the comparison operator in a situation like the first example in this reading, it's doing something slightly different. \u003ca href=\"http://stackoverflow.com/questions/3422223/vs-in-ruby?lq=1\"\u003eRead more about === here.\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSimilar to the comparison operations above, the \u003ccode\u003ewhen\u003c/code\u003e statement evaluates to a boolean value by using the \u003ccode\u003ecase\u003c/code\u003e value at the start of the \u003ccode\u003ecase\u003c/code\u003e statement and the value following the \u003ccode\u003ewhen\u003c/code\u003e keyword. If this \u003ccode\u003ewhen\u003c/code\u003e condition evaluates to \u003ccode\u003efalse\u003c/code\u003e, then the indented code beneath that condition is skipped; if it evaluates to \u003ccode\u003etrue\u003c/code\u003e, then the indented code beneath it is executed.\u003c/p\u003e\n\n\u003cp\u003eIn the above case, Ruby compares the \u003ccode\u003ecase\u003c/code\u003e value to the two \u003ccode\u003ewhen\u003c/code\u003e conditions; \u003ccode\u003e\"friendly_greeting\" === \"unfriendly_greeting\"\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, so \u003ccode\u003eputs \"What do you want!?\"\u003c/code\u003e is \u003cem\u003enot\u003c/em\u003e run; however, \u003ccode\u003e\"friendly_greeting\" === \"friendly_greeting\"\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, so \u003ccode\u003eputs \"Hi! How are you?\"\u003c/code\u003e \u003cem\u003eis\u003c/em\u003e run.\u003c/p\u003e\n\n\u003cp\u003eIt is not necessary at this point to understand the distinction between the comparative operator (\u003ccode\u003e==\u003c/code\u003e) and the case comparison operator (\u003ccode\u003e===\u003c/code\u003e). Just realize that there \u003cem\u003eis\u003c/em\u003e a distinction, even though the usages relevant to you right now will be similar.\u003c/p\u003e\n\n\u003ch2\u003eExample 1: Weather\u003c/h2\u003e\n\n\u003cp\u003eIn this example, we set the \u003ccode\u003ecurrent_weather\u003c/code\u003e to \u003ccode\u003e\"raining\"\u003c/code\u003e. Next, we use \u003ccode\u003ewhen\u003c/code\u003e statements to describe a list of possible matches. Since \u003ccode\u003ecurrent_weather === \"raining\"\u003c/code\u003e we'd expect this code to put \u003ccode\u003e\"grab an umbrella\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrent_weather = \"raining\"\u003cbr\u003e\u003cbr\u003ecase current_weather\u003cbr\u003e  when \"sunny\"\u003cbr\u003e    puts \"grab some sunscreen!\"\u003cbr\u003e  when \"raining\"\u003cbr\u003e    puts \"grab an umbrella\"\u003cbr\u003e  when \"snowing\"\u003cbr\u003e    puts \"bundle up\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eExample 2: Grades\u003c/h2\u003e\n\n\u003cp\u003eThis example requires a basic understanding of \u003ccode\u003egets.chomp\u003c/code\u003e. It allows us to get a user's input, and use it in our code. \u003ca href=\"http://stackoverflow.com/questions/23193813/how-does-gets-and-gets-chomp-in-ruby-work\"\u003eRead more on what it does here.\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHere, we are prompting the user to input a student's grade. Based on that \u003ccode\u003egrade\u003c/code\u003e, the program then prints out the string associated with the matching condition. If the user enters \"A\", then \u003ccode\u003egrade = \"A\"\u003c/code\u003e. Since \u003ccode\u003egrade === \"A\"\u003c/code\u003e, Ruby will print \u003ccode\u003eGood job, Homestar!\u003c/code\u003e to the screen. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprint \"Enter your grade: \"\u003cbr\u003egrade = gets.chomp\u003cbr\u003e\u003cbr\u003ecase grade\u003cbr\u003e  when \"A\"\u003cbr\u003e    puts \"Good job, Homestar!\"\u003cbr\u003e  when \"B\"\u003cbr\u003e    puts \"You can totally do better!\"\u003cbr\u003e  when \"C\"\u003cbr\u003e    puts \"Find a mentor to help you!\"\u003cbr\u003e  else\u003cbr\u003e    puts \"You're just making that up!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"video-object-model-review","title":"Video: Object Model Review","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oo-ruby-video-review-object-models\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-models/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-models\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-models/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis video gives an overview of object models and how to make our classes more powerful. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a class and add reader and writer methods\u003c/li\u003e\n\u003cli\u003eDefine class methods with an explicit \u003ccode\u003eself\u003c/code\u003e receiver\u003c/li\u003e\n\u003cli\u003eCapture new instances of \u003ccode\u003eself\u003c/code\u003e in the \u003ccode\u003einitialize\u003c/code\u003e method \u003c/li\u003e\n\u003cli\u003eUse a class variable or constant to hold the instances of the class\u003c/li\u003e\n\u003cli\u003eExplain why we avoid using the \u003ccode\u003ereturn\u003c/code\u003e keyword from within a loop\u003c/li\u003e\n\u003cli\u003eDefine a \u003ccode\u003efind_by_location\u003c/code\u003e method to find a particular instance of a class\u003c/li\u003e\n\u003cli\u003eAbstract the logic of the \u003ccode\u003efind_by_location\u003c/code\u003e method to a \u003ccode\u003edetect\u003c/code\u003e enumerable method\u003c/li\u003e\n\u003cli\u003eDefine a class method \u003ccode\u003efind_all_by_location\u003c/code\u003e to find all instances with that location using the \u003ccode\u003eselect\u003c/code\u003e enumerable method\u003c/li\u003e\n\u003cli\u003eDefine a custom constructor method to create instances from attributes scraped from a website \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/vENMFapLonA?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=vXz6ExSdm94\"\u003eAdditional Video on Object Models\u003c/a\u003e\n- This video also covers many of the above topics in the main lesson video. Feel free to use this as another refresher on object models. \u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-object-inheritance","title":"Introduction to Object Inheritance","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThe concept of inheritance in Ruby works similarly to the real world — A prince\ncan inherit a kingdom and everything within it, a baby can inherit genetic\ntraits from a parent. In Ruby, a class can inherit the behaviors of another\nclass, referred to as the \u003cem\u003esuperclass\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn these lessons, we'll cover:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat inheritance is in object-oriented Ruby\u003c/li\u003e\n\u003cli\u003eImplementing class with inherited methods from another class that also has its\nown unique methods\u003c/li\u003e\n\u003cli\u003eRefactoring \"code smells\" into multiple, non-repetitive methods\u003c/li\u003e\n\u003cli\u003eUsing the \u003ccode\u003esuper\u003c/code\u003e keyword to inherit from and augment methods in the parent\nclass\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, we'll explain how we can leverage the power of Ruby to define\nbasic classes with large reusability and smaller subclasses for more\nfine-grained, detailed behaviors.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-object-oriented-ruby","title":"Introduction to Object-Oriented Ruby","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-introduction-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-introduction-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eObject-oriented programming (OOP) is a type of programming based on the concept\nof \"objects\", which can contain data, in the form of fields (often known as\nattributes or properties), and code, in the form of procedures (often known as\nmethods). OOP is all about being able to structure code so that its\nfunctionality can be shared throughout the application. This is opposed to\nprocedural programming (PP), in which you build programs in sequential order and\ncall methods when you want shared behavior between pages in the application.\u003c/p\u003e\n\n\u003cp\u003eWe'll be discussing these basics of OOP in Ruby:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLocal variables and instance variables\u003c/li\u003e\n\u003cli\u003eInstance methods\u003c/li\u003e\n\u003cli\u003eSetting instance variables from initialize\u003c/li\u003e\n\u003cli\u003eGlobal variables\u003c/li\u003e\n\u003cli\u003eVariable scope\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003enew\u003c/code\u003e class method\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRuby is a powerful object-oriented language used by popular applications. In the\nupcoming lessons we'll build the foundational knowledge of OOP to be well on\nyour way to developing your own!\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-nested-hashes","title":"Introduction to Nested Hashes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-nested-hashes-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how nested hashes can store complex associations of data.\u003c/li\u003e\n\u003cli\u003eDescribe the structure of a nested hash.\u003c/li\u003e\n\u003cli\u003eGive examples of real-world situations that can require nested hashes.\u003c/li\u003e\n\u003cli\u003eRetrieve data from a nested hash.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've seen hashes that store values in associated keys. In the hashes\nwe've built up until now, each key points to a single value. Hashes are very\nuseful, however, because they can be nested within each other. A key in a hash\ncan point to a value that is also a \u003cem\u003ecollection of objects\u003c/em\u003e, i.e. an array or\neven another hash. This is also sometimes referred to as a multidimensional\nhash.\u003c/p\u003e\n\n\u003cp\u003eAs programmers, we strive to write code that models the real world. The programs\nwe write to serve a purpose––whether you're creating a simple command line game or\nan app to help hospitals manage patient data, our code is designed to do a real\njob, like run a game or communicate critical information.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we'll introduce nested, or multidimensional, hashes and explain\nhow they're useful in programming.\u003c/p\u003e\n\n\u003ch2\u003eWhere Will You Find Nested Hashes?\u003c/h2\u003e\n\n\u003cp\u003eNested hashes are a very common way to store and operate on complex associated\ndata in a program. You are likely to encounter them any time you find yourself\nworking with a large collection of information. In particular, you will\nencounter these data structures when working with data you will pull from APIs.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAPI stands for \"Application Programming Interface\" and here refers to the way\nin which organizations, companies, and governments will expose their data to the\npublic for use.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNew York City, for example, has a robust API called NYC Open Data. Developers\ncan connect to this API to find information about city programs, public housing,\nparks, schools, construction, health information––like this collection of\n\u003ca href=\"https://data.cityofnewyork.us/resource/7btz-mnc8.json\"\u003eNYC doctors who participate in project REACH\u003c/a\u003e––you name it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e To view the nested hash data from the NYC Open Data API, linked to\nabove, in an organized and legible way in your browser, use the \u003ca href=\"https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=en-US\"\u003eChrome JSON Viewer extension\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen you send a request for data to such an API, the data you get back from them\nwill be in the form of a nested hash that can contain information about\nthousands of records.\u003c/p\u003e\n\n\u003cp\u003eWe'll learn a lot more about APIs later on in this course. For now, just\nunderstand that nested hashes are a very common occurrence in programming. They\nare used to store complex collections of data and you will encounter them when\nworking with APIs, among other places.\u003c/p\u003e\n\n\u003ch2\u003eNested Hashes Model Real-World Data\u003c/h2\u003e\n\n\u003cp\u003eWe can imagine so many real-world situations and environments in which we are\ndealing with complicated collections of data.\u003c/p\u003e\n\n\u003cp\u003eLet's take, for example, a list of instructors at a school. They can\nbe stored in an array like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstructors = [\"Ian\", \"Johann\", \"Alex\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens when we expand our data collection to include the students as well?\nWe could create yet another array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudents = [\"Andrew\", \"Howard\", \"Terrance\", \"Daniel\", \"Rachel\", \"Natalie\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut both of these groups are part of a larger group, their \u003cem\u003eschool\u003c/em\u003e. We'd like\nto group them together into a collection \u003cem\u003ethat contains both\u003c/em\u003e. But we want to do\nthis in a way that keeps a \"label\" describing each \"sub-collection's\" focus.\nOtherwise, we may accidentally mix up instructors and students!\u003c/p\u003e\n\n\u003cp\u003eHow might we convey that these two arrays are related?\u003c/p\u003e\n\n\u003ch2\u003eOur First Nested Hash\u003c/h2\u003e\n\n\u003cp\u003eWith a nested hash, we can store complex collections of data. In other words, we\ncan store data that is associated with other data via categories and\nsubcategories.\u003c/p\u003e\n\n\u003cp\u003eBoth the \u003ccode\u003estudents\u003c/code\u003e array and the \u003ccode\u003einstructors\u003c/code\u003e array should be associated with\nthe same school. So, we can create a hash, \u003ccode\u003eschool\u003c/code\u003e, that contains keys to\ndenote the \u003ccode\u003einstructors\u003c/code\u003e and \u003ccode\u003estudents\u003c/code\u003e categories. We can point these keys to\nthe arrays that contain our instructors and students respectively.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eschool = {\u003cbr\u003e  instructors: [\"Ian\", \"Johann\", \"Alex\"],\u003cbr\u003e  students: [\"Andrew\", \"Howard\", \"Terrance\", \"Daniel\", \"Rachel\", \"Natalie\"]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, each key in our hash points to a value that is an array.\u003c/p\u003e\n\n\u003cp\u003eNested hashes allow us to further group, or associate, the data we are working\nwith. They help us to deal with situations in which a category or piece of data\nis associated not just to one discrete value, but to a collection of values. In\nsuch a situation, we can create a hash key that points to a value of another\nhash or an array.\u003c/p\u003e\n\n\u003ch2\u003eA Note On Mixing our Collection Types\u003c/h2\u003e\n\n\u003cp\u003eYou may have noticed in the above example that we have a hash in which the value\nof a key is an array.\u003c/p\u003e\n\n\u003cp\u003eUnderstand that arrays and hashes can store \u003cem\u003eany type of data\u003c/em\u003e. In other words,\nthe individual index items of an array can be strings, integers, or even other\narrays and hashes. The same is true of hashes. The values that hash keys point\nto may be strings, integers, and even arrays or hashes.\u003c/p\u003e\n\n\u003cp\u003eIn fact, one of the most common nested data structures you'll see when working\nwith APIs, as discussed above, is an \u003cem\u003earray\u003c/em\u003e of hashes.\u003c/p\u003e\n\n\u003ch2\u003eNesting an Array within a Hash\u003c/h2\u003e\n\n\u003cp\u003eWe'll be building up our own nested hash and operating on such data structures\nin a number of ways over the course of the next few lessons. For now, just read\nthrough the next example and get comfortable looking at a nested hash.\u003c/p\u003e\n\n\u003cp\u003eIn this example, we have a hash, \u003ccode\u003eschool\u003c/code\u003e, which stores some data about\nus. This data is broken down into the categories of \u003ccode\u003e:instructors\u003c/code\u003e, \u003ccode\u003e:students\u003c/code\u003e\nand \u003ccode\u003e:classes\u003c/code\u003e, thanks to our nested hash.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eschool = {\u003cbr\u003e  instructors: [\"Ian\", \"Johann\", \"Alex\"],\u003cbr\u003e  students: [\"Andrew\", \"Howard\", \"Terrance\", \"Daniel\", \"Rachel\", \"Natalie\"],\u003cbr\u003e  classes: [\"Software Engineering\", \"Data Science\"]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above example, each key points to an array of strings. We may not know\nhow to work with nested hashes just yet, but we \u003cem\u003edo\u003c/em\u003e know how to work with\none-dimensional hashes and arrays.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eschool\u003c/code\u003e hash has a key of \u003ccode\u003e:instructors\u003c/code\u003e. The value of that key is an array\nof instructors. In order to access that array, we can use the \u003ccode\u003e[]\u003c/code\u003e method we've\nbeen using all along to grab the values of a particular hash key.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstructors = school[:instructors]\u003cbr\u003e # =\u0026gt; [\"Ian\", \"Johann\", \"Alex\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we set a variable, \u003ccode\u003einstructors\u003c/code\u003e, equal to the return value of calling\n\u003ccode\u003eschool[:instructors]\u003c/code\u003e, which is simply the array of instructors.\u003c/p\u003e\n\n\u003cp\u003eNow, to operate on that collection of instructors, we can simply operate on our\n\u003ccode\u003einstructors\u003c/code\u003e array.\u003c/p\u003e\n\n\u003cp\u003eWhat if I wanted to grab \u003cem\u003ejust the first name\u003c/em\u003e in the instructor's array? We use\nthe same methods for accessing array index items that we've been using all\nalong:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstructors[0]\u003cbr\u003e#  =\u0026gt; \"Ian\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could, alternatively, use more than one set of brackets to find our answer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eschool[:instructors][0]\u003cbr\u003e#  =\u0026gt; \"Ian\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eNesting a Hash within a Hash\u003c/h2\u003e\n\n\u003cp\u003eImagine we're putting together information on various TV show characters, each\nincluding information about a particular TV show character. An individual hash\nfor each character might look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehomer = {name: \"Homer Simpson\", occupation: \"Nuclear Safety Inspector\", hobbies: [\"Watching TV\", \"Eating donuts\"]}\u003cbr\u003ejon = {name: \"Jon Snow\", occupation: \"King in the North\", hobbies: [\"Fighting white walkers\", \"Knowing nothing\"]}\u003cbr\u003efred = {name: \"Mr. Rogers\", occupation: \"Neighbor\", hobbies: [\"Making children feel loved and appreciated\", \"Singing songs\"]}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile each hash is about a different character, they are \u003cem\u003eall\u003c/em\u003e part of a larger\ncollection. We \u003cem\u003ecould\u003c/em\u003e put them in an array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {name: \"Homer Simpson\", occupation: \"Nuclear Safety Inspector\", hobbies: [\"Watching TV\", \"Eating donuts\"]},\u003cbr\u003e  {name: \"Jon Snow\", occupation: \"King in the North\", hobbies: [\"Fighting white walkers\", \"Knowing nothing\"]},\u003cbr\u003e  {name: \"Mr. Rogers\", occupation: \"Neighbor\", hobbies: [\"Making children feel loved and appreciated\", \"Singing songs\"]}\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis seems weird though. There isn't a particular order we need to maintain.\nHaving everything in an array makes it more difficult to find a particular hash,\nsince you will need to know the exact index of that hash to access it. It makes\nmore sense to contain these hashes within another hash.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etv_show_characters = {\u003cbr\u003e  \"Homer Simpson\" =\u0026gt; {name: \"Homer Simpson\", occupation: \"Nuclear Safety Inspector\", hobbies: [\"Watching TV\", \"Eating donuts\"]},\u003cbr\u003e  \"Jon Snow\" =\u0026gt; {name: \"Jon Snow\", occupation: \"King in the North\", hobbies: [\"Fighting white walkers\", \"Knowing nothing\"]},\u003cbr\u003e  \"Mr. Rogers\" =\u0026gt; {name: \"Mr. Rogers\", occupation: \"Neighbor\", hobbies: [\"Making children feel loved and appreciated\", \"Singing songs\"]}\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we've used character names as keys to make it more convenient to access\nour hashes even though this data is already stored in the hashes themselves.\nWith this hash, we can directly look up a particular character's information\njust by using their name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etv_show_characters[\"Homer Simpson\"]\u003cbr\u003e#=\u0026gt; {name: \"Homer Simpson\", occupation: \"Nuclear Safety Inspector\", hobbies: [\"Watching TV\", \"Eating donuts\"]}\u003cbr\u003e\u003cbr\u003etv_show_characters[\"Jon Snow\"][:occupation]\u003cbr\u003e#=\u0026gt; \"King in the North\"\u003cbr\u003e\u003cbr\u003etv_show_characters[\"Mr. Rogers\"][:hobbies][1]\u003cbr\u003e#=\u0026gt; \"Singing songs\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that when accessing nested data, we can use bracket notation multiple\ntimes to go deeper into the data. We can even mix hash keys and array indexes,\nas with \u003ccode\u003etv_show_characters[\"Mr. Rogers\"][:hobbies][1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNested hashes can get pretty complicated. Read through the example in this\nlesson again before moving on. It's okay if you don't understand everything;\njust try to get comfortable reading through the above nested hash.\u003c/p\u003e","frontPage":false},{"exportId":"using-symbols-for-hash-keys","title":"Using Symbols for Hash Keys","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-using-symbols-for-hash-keys\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-using-symbols-for-hash-keys/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-using-symbols-for-hash-keys\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-using-symbols-for-hash-keys/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eReview the \u003ccode\u003eSymbol\u003c/code\u003e data type\u003c/li\u003e\n\u003cli\u003eRecognize the immutability of symbols\u003c/li\u003e\n\u003cli\u003eCompare the use of symbols and strings as hash keys\u003c/li\u003e\n\u003cli\u003eRecognize Ruby's alternate syntax for hashes with symbols for keys\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe saw that hashes are data structures comprised of key/value pairs. We also saw\nthat we can create hashes simply by writing out key/value pairs wrapped in curly\nbraces:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog_one = {\u003cbr\u003e  :name =\u0026gt; \"Luca\",\u003cbr\u003e  :breed =\u0026gt; \"German Shepherd\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Luca\", :breed=\u0026gt;\"German Shepherd\"}\u003cbr\u003e\u003cbr\u003edog_two = {\u003cbr\u003e  :name =\u0026gt; \"Lola\",\u003cbr\u003e  :breed =\u0026gt; \"Giant Schnauzer\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Lola\", :breed=\u0026gt;\"Giant Schnauzer\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the previous lessons, we mentioned that hash keys can be any data type. You\nalso may have noticed, though, that we quickly switched to using\n\u003ca href=\"https://ruby-doc.org/core-2.6.3/Symbol.html\"\u003e\u003cem\u003esymbols\u003c/em\u003e\u003c/a\u003e for our keys in most of the examples. There is a particular\nreason for this.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we're going to discuss symbols and why they are ideal to use as\nkeys in our hashes. They are so frequently preferred, in fact, that Ruby has an\nalternative syntax for writing hashes with symbols for keys.\u003c/p\u003e\n\n\u003ch2\u003eUsing Symbols for Hash Keys\u003c/h2\u003e\n\n\u003cp\u003eJust to quickly review, \u003ca href=\"https://ruby-doc.org/core-2.6.3/Symbol.html\"\u003esymbols\u003c/a\u003e are a scalar data type. They share some\nsimilarities with strings, but instead of being wrapped in quotations, symbols\nalways start with a colon (\u003ccode\u003e:\u003c/code\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e:i_am_a_symbol\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEvery piece of data, including the symbol above, takes up a small amount of\nmemory on the computer. When we write out a symbol like \u003ccode\u003e:i_am_a_symbol\u003c/code\u003e, Ruby\nallocates some memory to that piece of data. If we write out \u003ccode\u003e:i_am_a_symbol\u003c/code\u003e\nagain somewhere else, Ruby will refer back to that \u003cem\u003esame allocation in memory\u003c/em\u003e.\nWe can actually see this by using a method built in to all core data types\ncalled \u003ccode\u003eobject_id\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e:i_am_a_symbol.object_id\u003cbr\u003e#=\u0026gt; 1525788\u003cbr\u003e:i_am_a_symbol.object_id\u003cbr\u003e#=\u0026gt; 1525788\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEvery time we call \u003ccode\u003e:i_am_a_symbol.object_id\u003c/code\u003e we will get the same integer back.\nThis integer is Ruby's representation of the location in memory where\n\u003ccode\u003e:i_am_a_symbol\u003c/code\u003e is stored.\u003c/p\u003e\n\n\u003cp\u003eWhat happens, though, when we do the same with a string?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"I am a string\".object_id\u003cbr\u003e#=\u0026gt; 70298611796560\u003cbr\u003e\"I am a string\".object_id\u003cbr\u003e#=\u0026gt; 70298611847740\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDifferent integers are returned. Although these strings are identical when\nwritten, \u003cstrong\u003ethey take up separate allocations of memory\u003c/strong\u003e. Every string we write\nis given a \u003cstrong\u003enew\u003c/strong\u003e allocation. This is because string data can change and Ruby\nneeds to take this into account.\u003c/p\u003e\n\n\u003cp\u003eSymbols, unlike strings, \u003cstrong\u003ecannot be changed\u003c/strong\u003e. That is to say, symbols are\n\u003ca href=\"https://en.wikipedia.org/wiki/Immutable_object\"\u003e\u003cem\u003eimmutable\u003c/em\u003e\u003c/a\u003e. They are \u003cem\u003eunique\u003c/em\u003e in Ruby's eyes, and once created,\nalways refer to the same point in memory. This works well for hash keys. Once a\nkey/value pair is defined in a hash, we might change the \u003cem\u003evalue\u003c/em\u003e of the pair,\nbut we will likely never need to change the \u003cem\u003ekey\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's look back at the first example in this lesson:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog_one = {\u003cbr\u003e  :name =\u0026gt; \"Luca\",\u003cbr\u003e  :breed =\u0026gt; \"German Shepherd\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Luca\", :breed=\u0026gt;\"German Shepherd\"}\u003cbr\u003e\u003cbr\u003edog_two = {\u003cbr\u003e  :name =\u0026gt; \"Lola\",\u003cbr\u003e  :breed =\u0026gt; \"Giant Schnauzer\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Lola\", :breed=\u0026gt;\"Giant Schnauzer\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe symbols \u003ccode\u003e:name\u003c/code\u003e and \u003ccode\u003e:breed\u003c/code\u003e are used multiple times in separate hashes, but\nrefer to the \u003cstrong\u003esame allocation in memory\u003c/strong\u003e. As we'll see soon, we sometimes deal\nwith many, many hashes, all with the same keys pointing to different values. If\nwe use strings, in this case, we would create many, many allocations of\nmemory. By using \u003cem\u003esymbols\u003c/em\u003e for our keys, we only use one! For this reason,\nsymbols are almost always the best choice for keys when creating hashes.\u003c/p\u003e\n\n\u003ch2\u003eUsing the Alternate Hash Syntax\u003c/h2\u003e\n\n\u003cp\u003eWhen using symbols for keys, we have the option of using an alternative syntax\nwhen defining a hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog_one = {\u003cbr\u003e  name: \"Luca\",\u003cbr\u003e  breed: \"German Shepherd\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Luca\", :breed=\u0026gt;\"German Shepherd\"}\u003cbr\u003e\u003cbr\u003edog_two = {\u003cbr\u003e  name: \"Lola\",\u003cbr\u003e  breed: \"Giant Schnauzer\"\u003cbr\u003e}\u003cbr\u003e#=\u0026gt; {:name=\u0026gt;\"Lola\", :breed=\u0026gt;\"Giant Schnauzer\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA few things have changed. For starters, the symbols \u003ccode\u003e:name\u003c/code\u003e and \u003ccode\u003e:breed\u003c/code\u003e no\nlonger have a colon before them. Instead, they have a colon immediately \u003cem\u003eafter\u003c/em\u003e,\nin place of the hash-rocket.\u003c/p\u003e\n\n\u003cp\u003eThis syntax only works for keys that are symbols but is similar in syntax to\nhow other languages like JavaScript write their key/value pairs.\u003c/p\u003e\n\n\u003cp\u003eWhen displaying a hash, Ruby will still display the old hash-rocket format.\u003c/p\u003e\n\n\u003cp\u003eYou might be wondering, why does this even exist? With the rise in popularity\nof JavaScript, full-stack developers got used to writing the following in\nJavaScript (what JavaScript developers call \"JSON,\" pronounced like \"Jay-sawn\"):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edog_two = {\u003cbr\u003e  name: \"Lola\",\u003cbr\u003e  breed: \"Giant Schnauzer\"\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYep, that's valid JavaScript \u003cstrong\u003eand\u003c/strong\u003e valid Ruby! In recent times, when defining\na Hash, it has become more common to use this \"alternate\" format. You'll\ndefinitely see a lot of the old \"hash-rocket\" syntax. Neither is better or\nworse. They're just different ways of expressing the idea of key/value pairs\nwithin a collection.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSymbols are a great choice to use for keys when constructing hashes. Although\nkeys can be made from whatever data type we feel is best, symbols come with\nsome advantages. No matter how many times a symbol is written in your code, Ruby\nwill consider it to be the same thing, allocating just one location in memory\nfor the symbol.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://ruby-doc.org/core-2.6.3/Symbol.html\"\u003eSymbols\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"video-active-record-review","title":"Video: Active Record Review","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-associations-video-review\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-associations-video-review/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThis video review lesson covers many of the concepts that you've learned about in this topic so far. To get the most out of these videos we recommend that you complete the Readings and Labs that come before it. \u003c/p\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/5dqPYRsQd10?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e \n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many\"\u003eMethod provided by \u003ccode\u003ehas_many\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to\"\u003eMethod provided by \u003ccode\u003ebelongs_to\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"private-methods","title":"Private Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-private-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-private-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-private-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-private-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine private methods.\u003c/li\u003e\n\u003cli\u003eUnderstand the context in which you will use such a method.\u003c/li\u003e\n\u003cli\u003eSee how private methods are defined.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBackground: Instance and Class Methods\u003c/h2\u003e\n\n\u003cp\u003eAs we dive deeper into object orientation in Ruby, we've been working with\ndifferent types of methods: instance and class methods. Remember that instance\nmethods are called on instances of a class. Let's make the following class\ncalled \u003ccode\u003eBartender\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bartender\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def intro\u003cbr\u003e    \"Hello, my name is #{name}!\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ephil = Bartender.new(\"Phil\")\u003cbr\u003ephil.intro\u003cbr\u003e#=\u0026gt; \"Hello, my name is Phil!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eintro\u003c/code\u003e is an instance method because we can call it on an instance of the\n\u003ccode\u003eBartender\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eAnd class methods we call on the entire class itself, not the instance. Like if\nwe had a method that kept track of all of the new instances of \u003ccode\u003eBartender\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bartender\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  BARTENDERS = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    BARTENDERS \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    BARTENDERS\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def intro\u003cbr\u003e    \"Hello, my name is #{name}!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we're shoveling in every new instance of \u003ccode\u003eBartender\u003c/code\u003e \u003ccode\u003einitialized\u003c/code\u003e into a\nconstant that holds onto all bartenders. Then we have a class method \u003ccode\u003eself.all\u003c/code\u003e,\nwhich we'll call on the class itself to return all of the bartenders.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephil = Bartender.new(\"Phil\")\u003cbr\u003enancy = Bartender.new(\"Nancy\")\u003cbr\u003e\u003cbr\u003eBartender.all\u003cbr\u003e#=\u0026gt; [#, #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePublic vs. Private Methods\u003c/h2\u003e\n\n\u003ch3\u003ePublic Methods\u003c/h3\u003e\n\n\u003cp\u003eWe've already been writing public methods: \u003ccode\u003eintro\u003c/code\u003e and \u003ccode\u003eself.all\u003c/code\u003e. We can call\nthem from outside the scope of the class declaration, like on the instance of\nthe class or the class itself. Public methods are called by an explicit\nreceiver: the instance of \u003ccode\u003ephil\u003c/code\u003e explicitly receives the method \u003ccode\u003eintro\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003ePrivate Methods\u003c/h3\u003e\n\n\u003cp\u003ePrivate methods cannot be called by an explicit receiver. What does that mean?\nIt means we can only call private methods within the context of the defining\nclass: the receiver of a private method is always \u003ccode\u003eself\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWhy Use Private Methods?\u003c/h3\u003e\n\n\u003cp\u003ePrivate methods are a way of encapsulating functionality within a class. For\nexample, a bartender can make a drink at a customer's request. Part of the\nprocess of making a drink includes choosing liquors, mixers, garnish, and\nstirring everything together. As a customer, you're permitted to ask the\nbartender for a drink (from a menu of options), but you can't instruct him or\nher on each step. The smaller steps that make up the bartender's job can be\nconsidered private methods.\u003c/p\u003e\n\n\u003cp\u003ePrivate methods also signal to other developers that this method is \u003cem\u003edepended\u003c/em\u003e\non by other methods in your program. It signals that they should beware of\nremoving such a method for fear of breaking other parts of the program that they\nmay not realize rely on it.\u003c/p\u003e\n\n\u003ch3\u003eBuilding Private Methods\u003c/h3\u003e\n\n\u003cp\u003eWe've already written a private method in our \u003ccode\u003eBartender\u003c/code\u003e class: \u003ccode\u003einitialize\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephil.initialize\u003cbr\u003e#=\u0026gt;NoMethodError: private method `initialize' called for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePrivate methods, aside from initialize, are usually written with the word\n\u003ccode\u003eprivate\u003c/code\u003e above them. Let's make a private method called \u003ccode\u003echoose_liquor\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWe'll also create a public method \u003ccode\u003emake_drink\u003c/code\u003e that calls on \u003ccode\u003echoose_liquor\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bartender\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  BARTENDERS = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    BARTENDERS \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    BARTENDERS\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def intro\u003cbr\u003e    \"Hello, my name is #{name}!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_drink\u003cbr\u003e    @cocktail_ingredients = []\u003cbr\u003e    choose_liquor\u003cbr\u003e    choose_mixer\u003cbr\u003e    choose_garnish\u003cbr\u003e    return \"Here is your drink. It contains #{@cocktail_ingredients}\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def choose_liquor\u003cbr\u003e    @cocktail_ingredients.push(\"whiskey\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def choose_mixer\u003cbr\u003e    @cocktail_ingredients.push(\"vermouth\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def choose_garnish\u003cbr\u003e    @cocktail_ingredients.push(\"olives\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we try to call \u003ccode\u003e#choose_liquor\u003c/code\u003e with an instance of a bartender, we get an error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephil.choose_liquor\u003cbr\u003e# NoMethodError: private method `choose_liquor' called for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAgain, private methods cannot be called by an explicit receiver. Because \u003ccode\u003ephil\u003c/code\u003e\nis the explicit receiver of \u003ccode\u003echoose_liquor\u003c/code\u003e, the method errors out.\u003c/p\u003e\n\n\u003cp\u003eHowever, if we call \u003ccode\u003emake_drink\u003c/code\u003e, the \u003ccode\u003echoose_liquor\u003c/code\u003e method works. What gives?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephil.make_drink\u003cbr\u003e# Here is your drink. It contains [\"whiskey\", \"vermouth\", \"olives\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003echoose_liquor\u003c/code\u003e method was called without any receiver. Ruby sees the\nmissing receiver and assumes it to be self, or the current object. When\n\u003ccode\u003echoose_liquor\u003c/code\u003e is called, self is an instance of Bartender. Only a Bartender\nobject can tell itself to choose a liquor, a mixer, and a garnish. Phil can tell\nhimself to choose a liquor, garnish, etc., but we cannot instruct Phil to do so.\nPrivate methods restrict an outsider from calling methods that belong to an\nobject. However, we, as customers, are free to ask a bartender to make us a\ndrink (\u003ccode\u003emake_drink\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Prior to version 2.7 of Ruby, if we tried to call our private methods\nfrom \u003ccode\u003e#make_drink\u003c/code\u003e using \u003ccode\u003eself\u003c/code\u003e (e.g., \u003ccode\u003eself.choose_liquor\u003c/code\u003e rather than just\n\u003ccode\u003echoose_liquor\u003c/code\u003e), we would get that same 'private method' error. However,\nbeginning with version 2.7 of Ruby, private methods can be called from other\nmethods in the Class with or without the \u003ccode\u003eself\u003c/code\u003e keyword.\u003c/p\u003e","frontPage":false},{"exportId":"sending-get-requests","title":"Sending GET Requests","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-getting-remote-data-sending-get-requests\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-sending-get-requests/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-sending-get-requests\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-sending-get-requests/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMake a request to a remote resource\u003c/li\u003e\n\u003cli\u003eHandle the response\u003c/li\u003e\n\u003cli\u003eParse JSON\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSimple Ruby applications are capable of powerful feats. We can use them to\nhandle all sorts of routine tasks on our computer. We can use them to represent\nreal-world relationships and systems. It's like we've been given an infinite\nmulti-tool that can help us work all kinds of data and make it useful.\u003c/p\u003e\n\n\u003cp\u003eThe limitation at this point, it seems, is really that we don't have enough data\nto play with. Luckily, we have a massive source of data available to us: the\nInternet!\u003c/p\u003e\n\n\u003cp\u003eWe typically experience the Internet through webpages in a browser, but a lot of\ninformation is accessible as pure data. If we know the tools to retrieve and\norganize that data, we'll have access to a wealth of knowledge. In this lesson,\nwe're going to introduce some of the basic ways in which we can get remote data\nusing Ruby.\u003c/p\u003e\n\n\u003ch2\u003eMaking an HTTP Request through the Internet\u003c/h2\u003e\n\n\u003cp\u003eWhen we go to a website in the browser, we type in a URL and press enter. When\nenter is pressed, the browser sends a request to that URL. The request travels\nto a server somewhere in the world that is hosting the website we want. The\nserver sends back a response. This response includes the HTML code structure of\nthe website, which your browser uses to build the page for you in front of your\neyes.\u003c/p\u003e\n\n\u003cp\u003eThis type of request is known as a HTTP GET request. We are simply retrieving\ninformation at a specified location. There are \u003ca href=\"https://www.w3schools.com/tags/ref_httpmethods.asp\"\u003eother types of requests\u003c/a\u003e for\nsending, updating and deleting information that we explore in later lessons,\nbut for now, we will focus on the GET request. Don't worry though, the GET\nrequest can... \u003cem\u003eget\u003c/em\u003e us quite far on its own!\u003c/p\u003e\n\n\u003cp\u003eIn Ruby code, we don't have the luxurious graphical user interface of a browser,\nbut we can still send GET requests in a similar fashion using built-in Ruby\nmodules and classes.\u003c/p\u003e\n\n\u003ch2\u003eSending an HTTP GET Request Using Ruby\u003c/h2\u003e\n\n\u003cp\u003eTo show how to make requests in Ruby, we'll first make an HTTP GET request in\nIRB. To start, once IRB is open, we need to require \u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html\"\u003e\u003ccode\u003eopen-uri\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'open-uri'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf loaded correctly, this should return \u003ccode\u003etrue\u003c/code\u003e. Next, we will set a URL that we\nwant to get data from. For this example, we'll get data from a GitHub repository\nthat is hosting a webpage:\n\u003ca\u003ehttps://learn-co-curriculum.github.io/json-site-example/\u003c/a\u003e. We can store this\nURL in a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eurl = \"https://learn-co-curriculum.github.io/json-site-example/\"\u003cbr\u003e#=\u0026gt; \"https://learn-co-curriculum.github.io/json-site-example/\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first thing we do is pass this \u003ccode\u003eurl\u003c/code\u003e variable into a method called \u003ccode\u003eparse\u003c/code\u003e\nthat is part of the URI module we loaded with \u003ccode\u003erequire 'open-uri'\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euri = URI.parse(url)\u003cbr\u003e#=\u0026gt; # \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\"\u003eURI\u003c/a\u003e stands for Universal Resource Identifier. URIs, in short, are\na standard way to name a resource. \u003ca href=\"https://en.wikipedia.org/wiki/URL\"\u003eURL\u003c/a\u003e stands for Universal Resource\nLocator. They are a standard way to \u003cem\u003elocate\u003c/em\u003e something. \u003cstrong\u003eURLs also happen to\nact as a standard name\u003c/strong\u003e (a web address acts as both the name of the website\n\u003cem\u003eand\u003c/em\u003e the text you need to enter to visit the website). Therefore, generally\nspeaking, all URLs are considered a subset of URIs (but not all URIs are URLs).\u003c/p\u003e\n\n\u003cp\u003eBy parsing our URL with \u003ccode\u003eURI.parse\u003c/code\u003e, we've stored the URL in a class object and\ngained access to some powerful methods. The main one we want to use is\n\u003ccode\u003eopen\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euri.open\u003cbr\u003e#=\u0026gt; #, @meta={\"server\"=\u0026gt;\"GitHub.com\", \"content-type\"=\u0026gt;\"text/html; charset=utf-8\", \"last-modified\"=\u0026gt;\"Thu, 15 Aug 2019 23:05:32 GMT\", \"etag\"=\u0026gt;\"W/\\\"5d55e53c-284\\\"\", \"access-control-allow-origin\"=\u0026gt;\"*\", \"expires\"=\u0026gt;\"Thu, 22 Aug 2019 19:42:27 GMT\", \"cache-control\"=\u0026gt;\"max-age=600\", \"x-proxy-cache\"=\u0026gt;\"MISS\", \"x-github-request-id\"=\u0026gt;\"D49E:101C:257158:30F953:5D5EEDC6\", \"content-length\"=\u0026gt;\"341\", \"accept-ranges\"=\u0026gt;\"bytes\", \"date\"=\u0026gt;\"Thu, 22 Aug 2019 19:38:38 GMT\", \"via\"=\u0026gt;\"1.1 varnish\", \"age\"=\u0026gt;\"214\", \"connection\"=\u0026gt;\"keep-alive\", \"x-served-by\"=\u0026gt;\"cache-ewr18140-EWR\", \"x-cache\"=\u0026gt;\"HIT\", \"x-cache-hits\"=\u0026gt;\"1\", \"x-timer\"=\u0026gt;\"S1566502719.880905,VS0,VE1\", \"vary\"=\u0026gt;\"Accept-Encoding\", \"x-fastly-request-id\"=\u0026gt;\"bf2550e15c1927f0d65dc31f98747ad56e51d4db\"}, @metas={\"server\"=\u0026gt;[\"GitHub.com\"], \"content-type\"=\u0026gt;[\"text/html; charset=utf-8\"], \"last-modified\"=\u0026gt;[\"Thu, 15 Aug 2019 23:05:32 GMT\"], \"etag\"=\u0026gt;[\"W/\\\"5d55e53c-284\\\"\"], \"access-control-allow-origin\"=\u0026gt;[\"*\"], \"expires\"=\u0026gt;[\"Thu, 22 Aug 2019 19:42:27 GMT\"], \"cache-control\"=\u0026gt;[\"max-age=600\"], \"x-proxy-cache\"=\u0026gt;[\"MISS\"], \"x-github-request-id\"=\u0026gt;[\"D49E:101C:257158:30F953:5D5EEDC6\"], \"content-length\"=\u0026gt;[\"341\"], \"accept-ranges\"=\u0026gt;[\"bytes\"], \"date\"=\u0026gt;[\"Thu, 22 Aug 2019 19:38:38 GMT\"], \"via\"=\u0026gt;[\"1.1 varnish\"], \"age\"=\u0026gt;[\"214\"], \"connection\"=\u0026gt;[\"keep-alive\"], \"x-served-by\"=\u0026gt;[\"cache-ewr18140-EWR\"], \"x-cache\"=\u0026gt;[\"HIT\"], \"x-cache-hits\"=\u0026gt;[\"1\"], \"x-timer\"=\u0026gt;[\"S1566502719.880905,VS0,VE1\"], \"vary\"=\u0026gt;[\"Accept-Encoding\"], \"x-fastly-request-id\"=\u0026gt;[\"bf2550e15c1927f0d65dc31f98747ad56e51d4db\"]}, @status=[\"200\", \"OK\"]\u0026gt; \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we type \u003ccode\u003euri.open\u003c/code\u003e in IRB, we get back an object \u003cem\u003efull of data!\u003c/em\u003e As it\nturns out, we've actually \u003cem\u003ejust made a GET request!\u003c/em\u003e The returned result, in this\ncase, is a \u003ca href=\"https://ruby-doc.org/stdlib-2.5.1/libdoc/stringio/rdoc/StringIO.html\"\u003e\u003ccode\u003eStringIO\u003c/code\u003e\u003c/a\u003e object, \u003cem\u003ewhich is not a \u003ccode\u003eString\u003c/code\u003e\u003c/em\u003e, but can be converted\ninto one using a built-in \u003ccode\u003estring\u003c/code\u003e method. So we could write the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequest_result = uri.open\u003cbr\u003erequest_result.string\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr just chain the methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euri.open.string\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe result? HTML as a String! \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"\\n\\n\\n  \\n  \\n  \\n  JSON Example Site\\n\\n\\n  \\n\\n  \u003ch3\u003eEndpoints available to visit:\u003c/h3\u003e\\n  \u003cul\u003e\\n    \u003cli\u003e\u003ca\u003eendpoints/locations.json\u003c/a\u003e\u003c/li\u003e\\n    \u003cli\u003e\u003ca\u003eendpoints/people.json\u003c/a\u003e\u003c/li\u003e\\n  \u003c/ul\u003e\\n\\n\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe requested and received a \u003cem\u003ewebpage\u003c/em\u003e. While it isn't rendered nicely in the way\na browser would display this, it is a great start! And just to review, we did\nthis using only four lines of Ruby:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'open-uri'\u003cbr\u003eurl = \"https://learn-co-curriculum.github.io/json-site-example/\"\u003cbr\u003euri = URI.parse(url)\u003cbr\u003euri.open.string\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is super cool, but working with \u003ccode\u003eStringIO\u003c/code\u003e can be a little limiting. To\nstick with conventions, we're going to look at a slightly different approach\nnext.\u003c/p\u003e\n\n\u003ch2\u003eReading the Body of a Response\u003c/h2\u003e\n\n\u003cp\u003eRather than use the \u003ccode\u003eopen\u003c/code\u003e method, we're going to bring in another built-in Ruby\nclass, \u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/net/http/rdoc/Net/HTTP.html\"\u003e\u003ccode\u003eNET::HTTP\u003c/code\u003e\u003c/a\u003e. \u003ccode\u003eURI\u003c/code\u003e (also known as \u003ccode\u003eOpenURI\u003c/code\u003e) is actually built using\n\u003ccode\u003eNET::HTTP\u003c/code\u003e. \u003ccode\u003eNET::HTTP\u003c/code\u003e will allow us to get back an object closer to the structure\nof the actual HTTP response being sent.\u003c/p\u003e\n\n\u003cp\u003eStarting from a new IRB session, we'll first require \u003ccode\u003eopen-uri\u003c/code\u003e as before, but\nwe will also need to add a second require line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'open-uri'\u003cbr\u003erequire 'net/http'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we'll keep the URL definition and URI parsing the same:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eurl = \"https://learn-co-curriculum.github.io/json-site-example/\"\u003cbr\u003euri = URI.parse(url)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut instead of \u003ccode\u003euri.open\u003c/code\u003e at the end, we'll enter the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eresponse = Net::HTTP.get_response(uri)\u003cbr\u003e#=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere again we've sent a GET request, only this time, the return value\nisn't a \u003ccode\u003eStringIO\u003c/code\u003e object, but a \u003ccode\u003eNet::HTTPOK\u003c/code\u003e object. This object\nhas a method, \u003ccode\u003ebody\u003c/code\u003e, that should produce a familiar sight when used:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eresponse.body\u003cbr\u003e#=\u0026gt; \"\\n\\n\\n  \\n  \\n  \\n  JSON Example Site\\n\\n\\n  \\n\\n  \u003ch3\u003eEndpoints available to visit:\u003c/h3\u003e\\n  \u003cul\u003e\\n    \u003cli\u003e\u003ca\u003eendpoints/locations.json\u003c/a\u003e\u003c/li\u003e\\n    \u003cli\u003e\u003ca\u003eendpoints/people.json\u003c/a\u003e\u003c/li\u003e\\n  \u003c/ul\u003e\\n\\n\\n\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, we've seen two ways to get the HTML code from a webpage. Although this is cool,\nin its current state, this isn't very useful information. There are actually\ntools designed specifically to take this raw HTML and turn it into organized\ndata for us in a process known as scraping, but we don't need to learn that just\nyet. Plenty of data is already organized and made available to us separate from\nHTML code and we can retrieve it the same way we send a GET request to a website.\u003c/p\u003e\n\n\u003ch2\u003eDefine JSON\u003c/h2\u003e\n\n\u003cp\u003eJSON stands for JavaScript Object Notation and is a standard way store and\ntransfer nested data over the internet. The keyword here is \u003cstrong\u003eNotation\u003c/strong\u003e. Data\nstored in JSON format is actually just data stored \u003cem\u003eas a string\u003c/em\u003e, but structured\nin a way that is easily converted into usable nested data. Ruby has a built-in\n\u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/json/rdoc/JSON.html\"\u003e\u003ccode\u003eJSON\u003c/code\u003e\u003c/a\u003e module that includes a \u003ccode\u003eparse\u003c/code\u003e method to take JSON formatted data and\nturn it into an array or hash.\u003c/p\u003e\n\n\u003ch2\u003eRetrieving JSON Data\u003c/h2\u003e\n\n\u003cp\u003eJust as with the website, we write in the \u003cem\u003eUniversal Resource Locator\u003c/em\u003e, convert\nit to a \u003ccode\u003eURI\u003c/code\u003e object, then send a GET request. Previously, we sent requests to\n\u003ca\u003ehttps://learn-co-curriculum.github.io/json-site-example/\u003c/a\u003e. The server, in\nthis case, had an HTML file to serve in response. If we request a slightly\ndifferent URL, we'll get a different response. This site has some example data\nstored as JSON on it. By changing out the request to\n\u003ca href=\"https://learn-co-curriculum.github.io/json-site-example/endpoints/locations.json\"\u003ehttps://learn-co-curriculum.github.io/json-site-example/endpoints/locations.json\u003c/a\u003e,\ninstead of responding with HTML, this time, the server will send the JSON data.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'open-uri'\u003cbr\u003erequire 'net/http'\u003cbr\u003eurl = \"https://learn-co-curriculum.github.io/json-site-example/endpoints/locations.json\"\u003cbr\u003euri = URI.parse(url)\u003cbr\u003eresponse = Net::HTTP.get_response(uri)\u003cbr\u003eresponse.body\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning the above in in a fresh IRB session, you should see that the \u003ccode\u003eresponse.body\u003c/code\u003e now\nreturns a string of data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"[\\n  {\\n    \\\"name\\\": \\\"Flatiron School Manhattan\\\",\\n    \\\"address\\\": \\\"11 Broadway, New York, NY 10004\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"40.704521\\\",\\n      \\\"longitude\\\": \\\"-74.012833\\\"\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"Flatiron School Austin\\\",\\n    \\\"address\\\": \\\"316 W 12th St, Austin, TX 78701\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"30.275080\\\",\\n      \\\"longitude\\\": \\\"-97.743700\\\"\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"Flatiron School Denver\\\",\\n    \\\"address\\\": \\\"3601 Walnut St 5th Floor, Denver, CO 80205\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"39.743510\\\",\\n      \\\"longitude\\\": \\\"-105.011360\\\"\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"Flatiron School Seattle\\\",\\n    \\\"address\\\": \\\"1411 4th Ave 13th Floor, Seattle, WA 98101\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"47.684879\\\",\\n      \\\"longitude\\\": \\\"-122.201363\\\"\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"Flatiron School London\\\",\\n    \\\"address\\\": \\\"131 Finsbury Pavement, Finsbury, London EC2A 1NT, UK\\\",\\n    \\\"coordinates\\\": {\\n      \\\"latitude\\\": \\\"51.520480\\\",\\n      \\\"longitude\\\": \\\"-0.087190\\\"\\n    }\\n  }\\n]\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is JSON! It isn't very friendly to use yet, so we'll want to convert it. First, we'll need\nto require the \u003ccode\u003ejson\u003c/code\u003e module:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'json'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen we pass in \u003ccode\u003eresponse.body\u003c/code\u003e to the JSON parser:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eJSON.parse(response.body)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe result is an array containing five hashes, each with some data about a\nFlatiron School campus:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[{\"name\"=\u0026gt;\"Flatiron School Manhattan\", \"address\"=\u0026gt;\"11 Broadway, New York, NY 10004\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"40.704521\", \"longitude\"=\u0026gt;\"-74.012833\"}}, {\"name\"=\u0026gt;\"Flatiron School Austin\", \"address\"=\u0026gt;\"316 W 12th St, Austin, TX 78701\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"30.275080\", \"longitude\"=\u0026gt;\"-97.743700\"}}, {\"name\"=\u0026gt;\"Flatiron School Denver\", \"address\"=\u0026gt;\"3601 Walnut St 5th Floor, Denver, CO 80205\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"39.743510\", \"longitude\"=\u0026gt;\"-105.011360\"}}, {\"name\"=\u0026gt;\"Flatiron School Seattle\", \"address\"=\u0026gt;\"1411 4th Ave 13th Floor, Seattle, WA 98101\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"47.684879\", \"longitude\"=\u0026gt;\"-122.201363\"}}, {\"name\"=\u0026gt;\"Flatiron School London\", \"address\"=\u0026gt;\"131 Finsbury Pavement, Finsbury, London EC2A 1NT, UK\", \"coordinates\"=\u0026gt;{\"latitude\"=\u0026gt;\"51.520480\", \"longitude\"=\u0026gt;\"-0.087190\"}}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: If you'd like a better view of this data, require \u003ccode\u003eawesome_print\u003c/code\u003e and\nthen try typing \u003ccode\u003eap JSON.parse(response.body)\u003c/code\u003e to see a better output.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIf you've been following along, you've made three HTTP GET requests! We can make\nthese requests using a URL and some Ruby tools. Some data is readily available as JSON,\nwhich we can retrieve and convert into Ruby data structures.\u003c/p\u003e\n\n\u003cp\u003eHaving these tools unlocks access to \u003cem\u003ea lot of data\u003c/em\u003e. Being able to communicate with\nremote resources is also the cornerstone of web development!\u003c/p\u003e","frontPage":false},{"exportId":"ar-more-models-practice","title":"AR More Models Practice","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ar-more-models-practice\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ar-more-models-practice\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eSWBATs\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e[ ] Practice deciding where the \u003ccode\u003eid\u003c/code\u003e should live in associated tables (remember that it is the joiner's responsibility to know about the other \u003ccode\u003eid\u003c/code\u003e's)\u003c/li\u003e \u003cli\u003e[ ] Practice adding new models and setting up associations from scratch\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eWATCH THIS FIRST\u003c/h2\u003e  \u003cp\u003evideo: \u003ca href=\"https://youtu.be/MXkmCTywFFM\"\u003ehttps://youtu.be/MXkmCTywFFM\u003c/a\u003e\u003c/p\u003e  \u003ch2\u003eERD\u003c/h2\u003e  \u003cp\u003eCurrently, our ERD looks as following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eCategory :name\u003cbr\u003e    |\u003cbr\u003e    ^\u003cbr\u003e  Plant ----\u0026lt; PlantParenthood \u0026gt;---- PlantParent\u003cbr\u003e   :species      :plant_id            :name\u003cbr\u003e   :color        :plant_parent_id     :responsible\u003cbr\u003e   :bought       :affection           :age\u003cbr\u003e   :fussy\u003cbr\u003e   :category_id \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCurrently, one plant can have only one category. This does not represent the real-world situation (some plants are indoor, some are outdoor and some are both). We also see that the only relationship between a plant and a person is \"parenthood\" (ownership) but what about the moment when someone else waters your plants for you when you're away? They are not \u003cstrong\u003eowners\u003c/strong\u003e but they do interact with the plant.\u003c/p\u003e  \u003cp\u003eAt the end of the practice, our ERD will look as following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  Category\u003cbr\u003e    |\u003cbr\u003e    ^\u003cbr\u003e  PlantCategory\u003cbr\u003e    V\u003cbr\u003e    |\u003cbr\u003e  Plant ----\u0026lt; PlantParenthood \u0026gt;----   Person\u003cbr\u003e    |                                   |\u003cbr\u003e    |                                   |\u003cbr\u003e    |                                   |\u003cbr\u003e     --------\u0026lt; Watering \u0026gt;--------------- \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eDescription of the models:\u003c/h3\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eCategory\u003c/code\u003e -- it is a category of the plant, for example: \"leafy\", \"succulent\", \"indoor\", \"outdoor\"\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlant\u003c/code\u003e -- self-explanatory\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlantCategory\u003c/code\u003e -- since now Plant can have many Categories and vice-versa, we have a many-to-many relationship and need a joiner;\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePerson\u003c/code\u003e -- since not everyone interacting with the plant will be a plant_parent, let's change the name of this model to the Person\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlantParenthood\u003c/code\u003e -- describes a relationship of ownership between a person and a plant\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eWatering\u003c/code\u003e -- describes every situation when a person waters the plant\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eRoadmap:\u003c/h3\u003e  \u003col\u003e \u003cli\u003eMake Plant-Category relationship a many-to-many.  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/6ZpZESODKQ8\"\u003ehttps://youtu.be/6ZpZESODKQ8\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003efinished code\u003c/strong\u003e: \u003ca href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/tree/first-and-second\"\u003ehttps://github.com/learn-co-curriculum/ar-more-models-practice/tree/first-and-second\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003ecreate a new migration: delete the \u003ccode\u003ecategory_id\u003c/code\u003e from \u003ccode\u003ePlant\u003c/code\u003e + migrate\u003c/li\u003e \u003cli\u003ecreate a new migration: introduce a new table + migrate\u003c/li\u003e \u003cli\u003ecreate a corresponding model\u003c/li\u003e \u003cli\u003eadd associations\u003c/li\u003e \u003cli\u003etest in seeds\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eChange the name of the \u003ccode\u003ePlantParent\u003c/code\u003e to \u003ccode\u003ePerson\u003c/code\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/P5WVCoWCLhg\"\u003ehttps://youtu.be/P5WVCoWCLhg\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003efinished code\u003c/strong\u003e: \u003ca href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/tree/first-and-second\"\u003ehttps://github.com/learn-co-curriculum/ar-more-models-practice/tree/first-and-second\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003ecreate a new migration: change the name of the table + migrate\u003c/li\u003e \u003cli\u003echange the name of the model file and model name\u003c/li\u003e \u003cli\u003ein all the model files, replace \u003ccode\u003eplant_parent\u003c/code\u003e and \u003ccode\u003eplant_parents\u003c/code\u003e with \u003ccode\u003eperson\u003c/code\u003e and \u003ccode\u003epeople\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ein seeds, change the model name everywhere\u003c/li\u003e \u003cli\u003erun \u003ccode\u003erake db:seed\u003c/code\u003e and check how many people you have and whether you can check number of people associated with a plant (e.g. \u003ccode\u003ePlant.first.people.count\u003c/code\u003e) or a person (e.g. \u003ccode\u003ePerson.first.plants\u003c/code\u003e) -- this should error out! Debug it or watch the video.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eIntroduce a \u003ccode\u003eWatering\u003c/code\u003e model -- since it's a joiner, it will hold the \u003ccode\u003eid\u003c/code\u003es of the other models\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/QU166h3QrAc\"\u003ehttps://youtu.be/QU166h3QrAc\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003efinished code\u003c/strong\u003e: \u003ca href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/tree/third-deliverable\"\u003ehttps://github.com/learn-co-curriculum/ar-more-models-practice/tree/third-deliverable\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003ecreate a new migration: introduce a new table + migrate -- remember to add \u003ccode\u003et.timestamps\u003c/code\u003e to the table, we will need that to see all the Waterings that happened!\u003c/li\u003e \u003cli\u003ecreate a corresponding model\u003c/li\u003e \u003cli\u003eadd associations -- \u003cstrong\u003eplease refer to the video, this one is tricky!\u003c/strong\u003e\n\u003c/li\u003e \u003cli\u003etest in seeds\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eAdd behavior\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003efinished code\u003c/strong\u003e: \u003ca href=\"https://github.com/learn-co-curriculum/ar-more-models-practice/tree/fourth-deliverable\"\u003ehttps://github.com/learn-co-curriculum/ar-more-models-practice/tree/fourth-deliverable\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePerson#water_plant\u003c/code\u003e -- accepts an argument of a plant and creates a new instance of \u003ccode\u003eWatering\u003c/code\u003e between the person and the plant; if there is an associated \u003ccode\u003ePlantParenthood\u003c/code\u003e with both, this method also increases the value of affection by one\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/u8GhZn_u5tg\"\u003ehttps://youtu.be/u8GhZn_u5tg\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlantParenthood#cap_affection\u003c/code\u003e -- introduces a cap on the affection value at 11_000  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/V5vbXF47ASM\"\u003ehttps://youtu.be/V5vbXF47ASM\u003c/a\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ePlant#number_of_days_since_the_last_watering\u003c/code\u003e -- puts \"I was watered NUMBER days ago\"  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003evideo\u003c/strong\u003e: \u003ca href=\"https://youtu.be/AmwKAuL0BXc\"\u003ehttps://youtu.be/AmwKAuL0BXc\u003c/a\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ol\u003e","frontPage":false},{"exportId":"search-enumerables","title":"Search Enumerables","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-search-enumerators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-search-enumerators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-search-enumerators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-search-enumerators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand return values for enumerators.\u003c/li\u003e\n\u003cli\u003eUse a truthy or falsey evaluation in a block.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e#select\u003c/code\u003e to select matching elements from a collection based on a block.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e#detect\u003c/code\u003e to find a matching element from a collection based on a block.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e#reject\u003c/code\u003e to filter matching elements from a collection based on a block. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eEvery method in ruby must return a value. When we iterate or enumerate over a collection with \u003ccode\u003e#each\u003c/code\u003e, the return value is always the original collection. This is an example of a static return value, no matter what we do with \u003ccode\u003e#each\u003c/code\u003e, it will always return the same object that received the call to \u003ccode\u003e#each\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"Red\", \"Yellow\", \"Blue\"].each do |color|\u003cbr\u003e  puts \"There are #{color.length} letters in #{color}\"\u003cbr\u003eend #=\u0026gt; [\"Red\", \"Yellow\", \"Blue\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOften we want to search for elements in a collection based on a condition. Imagine wanting to find all even numbers in a collection of numbers using \u003ccode\u003e#each\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ematches = []\u003cbr\u003e[1,2,3,4,5].each do |i|\u003cbr\u003e  matches \u0026lt;\u0026lt; i if i.even? # add i to the matches array if it is even\u003cbr\u003eend #=\u0026gt; [1,2,3,4,5]\u003cbr\u003ematches #=\u0026gt; [2,4]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eImplementing a selection routine with a low-level enumerator like \u003ccode\u003e#each\u003c/code\u003e is costly in a few ways.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWe have to hang on to the matches within the local array \u003ccode\u003ematches\u003c/code\u003e.\nProgrammers use the phrase \u003cstrong\u003emaintain state\u003c/strong\u003e to refer to this task. Cars\ncan be in a state like \"Reverse, Drive, Neutral\". Our \u003ccode\u003ematches\u003c/code\u003e array has\nstates of \"Empty, \u003ccode\u003e[2]\u003c/code\u003e, \u003ccode\u003e[2,4]\u003c/code\u003e\".\u003c/li\u003e\n\u003cli\u003eOur block is complicated with conditional logic that can be implicit with a better enumerator.\u003c/li\u003e\n\u003cli\u003eOur code lacks intention and clear semantics. If we mean, \u003ccode\u003e#find_all\u003c/code\u003e or \u003ccode\u003e#select\u003c/code\u003e, why don't we just say that?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003e\u003ccode\u003e#select\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWhen you evoke \u003ccode\u003e#select\u003c/code\u003e on a collection, the return value will be a new array containing all the elements of the collection that cause the block passed to \u003ccode\u003e#select\u003c/code\u003e to return true. That means for each iteration, if the block evaluates to true, the element yielded to that iteration will be kept in the return value array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3,4,5].select do |number|\u003cbr\u003e  number.even?\u003cbr\u003eend #=\u0026gt; [2,4]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the first iteration of the block above, \u003ccode\u003enumber\u003c/code\u003e will be assigned the value \u003ccode\u003e1\u003c/code\u003e. Because \u003ccode\u003e1.even?\u003c/code\u003e will return false, \u003ccode\u003e1\u003c/code\u003e \u003cstrong\u003ewill not\u003c/strong\u003e be in the return array for this call to \u003ccode\u003e#select\u003c/code\u003e (same for \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e5\u003c/code\u003e). In the second iteration, \u003ccode\u003enumber\u003c/code\u003e will be \u003ccode\u003e2\u003c/code\u003e. Because \u003ccode\u003e2.even?\u003c/code\u003e will return true, \u003ccode\u003e2\u003c/code\u003e \u003cstrong\u003ewill\u003c/strong\u003e be in the return array (same for \u003ccode\u003e4\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eYou can see the clarity and expressiveness of this syntax in the short block from below.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3,4,5].select{|i| i.odd?} #=\u0026gt; [1,3,5]\u003cbr\u003e\u003cbr\u003e[1,2,3].select{|i| i.is_a?(String)} #=\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that if no element makes the block evaluate to \u003ccode\u003etrue\u003c/code\u003e, an empty array is returned.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003e#detect\u003c/code\u003e or \u003ccode\u003e#find\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003eNOTE: \u003ccode\u003edetect\u003c/code\u003e and \u003ccode\u003efind\u003c/code\u003e are two names for the same method. For every example below we'll use \u003ccode\u003edetect\u003c/code\u003e, but you can use them interchangeably.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eWhereas \u003ccode\u003e#select\u003c/code\u003e will return all elements from the original collection that cause the block to evaluate to true, \u003ccode\u003e#detect\u003c/code\u003e will only return the first element that makes the block true.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3].detect{|i| i.odd?} #=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3].find{|i| i.odd?} #=\u0026gt; 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, even though both \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e3\u003c/code\u003e would cause the block to evaluate to true, because \u003ccode\u003e1\u003c/code\u003e is first in the array, it alone is returned.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2,3,4].detect{|i| i.even?} #=\u0026gt; 2\u003cbr\u003e[1,2,3,4].detect{|i| i.is_a?(String)} #=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice also that \u003ccode\u003e#detect\u003c/code\u003e will always return a single object where \u003ccode\u003e#select\u003c/code\u003e will always return an array.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003e#reject\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003e#reject\u003c/code\u003e will return an array with the elements for which the block is false.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2].reject{|i| i.even?} #=\u0026gt; [1]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003e#select\u003c/code\u003e, \u003ccode\u003e#detect\u003c/code\u003e, and \u003ccode\u003e#reject\u003c/code\u003e are part of a family of search and filter type enumerators whose purpose is to help you refine a collection to only matching elements. They are way easier to manage than using lower-level methods like \u003ccode\u003e#each\u003c/code\u003e and create meaningful return values based on expressions in a block.\u003c/p\u003e\n\n\u003ch2\u003eVideo Review\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=t2A6xPbh0I8\u0026amp;feature=youtu.be\"\u003eYield and Enumerables\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"object-relational-mapping-conclusion","title":"Object-Relational Mapping Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow that we've discussed Object-Relational-Mappers in depth, it should feel a\nlittle less intimidating. We've established that they can make it easier to\nwrite code, without using the SQL that you've already learned and practiced\nseveral times. With Object-relational-mapping, we are able to write those and\nmore complicated SQL queries we're familiar with, with less code using Ruby.\u003c/p\u003e\n\n\u003cp\u003eWe've learned the many benefits of ORMs such as: Abstracting database logic,\ncode that can insert data into the database, find and update existing\ndatabase records when changes are made its related Ruby object, identify whether\nor not a Ruby object has already been persisted to the database (and add it if\nnot). We can map a database table to a Ruby object as well as can make Ruby\nobjects from database rows, and can scrape and save data to the database. Now we\ncan leverage the power of SQL without needing to write it often (or be fluent in\nit)! Being able to leverage this functionality is awesome!\u003c/p\u003e","frontPage":false},{"exportId":"phase-3-code-challenge-instructions","title":"Phase 3 Code Challenge Instructions","type":"WikiPage","content":"\u003cp\u003eBefore you can start working on the code challenge, be sure to follow the steps below:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFind your code challenge in the Phase 3 Milestones module\u003c/li\u003e\n\u003cli\u003eOpen the code challenge assignment and download the linked ZIP file\u003c/li\u003e\n\u003cli\u003eUnzip the file on your computer\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e into the directory in your terminal (after, run \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ls \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;; you should see a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;bin/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory and a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file)\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/start \u0026lt;your-name\u0026gt;\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e from the directory; this will create a new directory called \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e to and open the new \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory in your code editor\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo work on your code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEnsure that you're in the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory\u003c/li\u003e\n\u003cli\u003eFollow the instructions in the \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;README.md \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git add . \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;and \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git commit \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;inside of the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory often as you're working\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo submit the code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNavigate to the parent directory of \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in your terminal.\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/end \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e, which will create a new file, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in that directory (for example, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;alicia.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e).\u003c/li\u003e\n\u003cli\u003eNavigate back to the code challenge assignment in the Phase 1 Milestones module in Canvas\u003c/li\u003e\n\u003cli\u003eUpload \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;to the assignment and submit\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eReach out to your instructors\u0026nbsp;\u003cstrong\u003eimmediately\u0026nbsp;\u003c/strong\u003eif you run into issues downloading, working on, or uploading your code challenge.\u003c/p\u003e\n\u003cp\u003eUse this video to guide you through these instructions:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube-nocookie.com/embed/3AM3qXUtnQY\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e","frontPage":false},{"exportId":"defining-object-orientation","title":"Defining Object-Orientation","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-defining-object-orientation\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-defining-object-orientation/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-defining-object-orientation\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-defining-object-orientation/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll introduce the concept of Object-Oriented Programming (OOP)\u003c/p\u003e\n\n\u003ch2\u003eObject-Oriented Programming (OOP)\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003eAn object-oriented approach to application development makes programs more intuitive to design, faster to develop, more amenable to modification, and easier to understand.\u003c/em\u003e\u003cbr\u003e\n—\u003ca href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/OOP_ObjC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005149-CH1-SW2\"\u003e\u003cem\u003eObject-Oriented Programming with Objective-C\u003c/em\u003e\u003c/a\u003e, Apple Inc.\u003c/p\u003e\n\n\u003cp\u003eIt's natural to wonder, \"how can a string of ones and zeroes be referred to as an 'object'?\" The use of the word \"object\" is an abstraction of thought. An \"object\" in code has no more physical form than does a word in any human language. Sure, words have physical representations: speaking a word causes air to vibrate in a sound wave, ink on a page can be shaped into symbols that represent the word, a meaning can be pointed at or mimed out; but none of these are the word itself. Human language is a system of abstraction: it communicates the \u003cem\u003eidea\u003c/em\u003e of a thing, but not the thing itself.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/en/b/b9/MagrittePipe.jpg\" alt=\"\"\u003e\u003cbr\u003e\nTranslation: \"This is not a pipe.\" - \u003ca href=\"https://en.wikipedia.org/wiki/The_Treachery_of_Images\"\u003e\u003cem\u003eThe Treachery of Images\u003c/em\u003e\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/Ren%C3%A9_Magritte\"\u003eRené Magritte\u003c/a\u003e, 1927  \u003c/p\u003e\n\n\u003cp\u003eThis image of a pipe is no more a pipe than the word \"pipe\" is a pipe; in the same way, a code object named \u003ccode\u003epipe\u003c/code\u003e is not a pipe, but only another form of representing a pipe.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAs humans, we’re constantly faced with myriad facts and impressions that we must make sense of. To do so, we must abstract underlying structure away from surface details and discover the fundamental relations at work. Abstractions reveal causes and effects, expose patterns and frameworks, and separate what’s important from what’s not. Object orientation provides an abstraction of the data on which you operate; moreover, it provides a concrete grouping between the data and the operations you can perform with the data—in effect giving the data behavior.\u003cbr\u003e\n—\u003ca href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/OOP_ObjC/Articles/ooOOP.html#//apple_ref/doc/uid/TP40005149-CH8-SW3\"\u003e\u003cem\u003eObject-Oriented Programming with Objective-C\u003c/em\u003e\u003c/a\u003e, Apple Inc.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA code object representing a water pipe (instead of a smoking pipe) might contain values for \u003ccode\u003elength\u003c/code\u003e, \u003ccode\u003ediameter\u003c/code\u003e, \u003ccode\u003ematerial\u003c/code\u003e, and \u003ccode\u003emanufacturer\u003c/code\u003e. The bundling of these individual pieces of information together begins to form a larger whole.\u003c/p\u003e\n\n\u003cp\u003eObject-Oriented Programming, however, does more than just bundle up individual pieces of data that represent a \"thing\" — it also bundles customized functions that can be performed \u003cem\u003eon\u003c/em\u003e that data. These are called \u003cstrong\u003emethods\u003c/strong\u003e: behaviors that an object performs upon its internal data and even upon other code objects.\u003c/p\u003e\n\n\u003cp\u003eAn object in code is a thing with all the data and all the logic required to complete a task. Objects are models and metaphors for the problems we solve in code.\u003c/p\u003e\n\n\u003cp\u003eObject-oriented programming was born from the trend of making digital lives reflect our real lives. In the 1970's, \u003ca href=\"https://en.wikipedia.org/wiki/Adele_Goldberg_%28computer_scientist%29\"\u003eAdele Goldberg\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Alan_Kay\"\u003eAlan Kay\u003c/a\u003e developed an object-oriented language at Xerox PARC called SmallTalk, which was used in the first personal computer.\u003c/p\u003e\n\n\u003cp\u003eRuby comes with a few types of Objects to get us started, things like \u003ccode\u003eInteger\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eArray\u003c/code\u003e, etc. We call these base types of Objects \"Primitives.\" But what if we wanted to create a new type in our programming universe, a new kind of object for our code? That's what the \u003ccode\u003eclass\u003c/code\u003e keyword and object orientation allows us to do.\u003c/p\u003e","frontPage":false},{"exportId":"method-scope","title":"Method Scope","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"method-scope\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/method-scope/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-scope\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-scope/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll introduce the concepts of method scope and variable scope. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how scope prevents you from accidentally overwriting previous work.\u003c/li\u003e\n\u003cli\u003eDifferentiate between the functionality of local variables created inside and outside of methods. \u003c/li\u003e\n\u003cli\u003eDefine methods that pass variables in as arguments.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eVariable Names and Scope\u003c/h2\u003e\n\n\u003cp\u003eNaming variables is hard, but it is important. We need our code to be as descriptive as possible. Any other developer reading over one of our programs should be able to understand what our code does. A big part of this is having variable (and method) names that are sensible and descriptive. \u003c/p\u003e\n\n\u003cp\u003eOur variable names should be descriptive of what they hold, but they should also be concise. This can be difficult to achieve. You might even be worrying that you'll run out of unique, descriptive and concise variable names. Don't worry though, all programming languages have what is called \u003cstrong\u003escope\u003c/strong\u003e. Scope means that not all variables exist everywhere in a program. If they did, then a variable that you'd be writing in file A could accidentally overwrite a variable made by your friend in file B. Having a scope for variables allows you to have greater confidence that you aren't overwriting someone else's work when you create variables.\u003c/p\u003e\n\n\u003ch2\u003eWhat is Scope?\u003c/h2\u003e\n\n\u003cp\u003eMethods in ruby create their own scope. \"Scope\" refers to the areas of your program in which certain data is available to you. \u003cstrong\u003eAny local variable created outside of a method will be unavailable inside of a method. In addition, local variables created inside of a method (i.e. in between the \u003ccode\u003edef\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e keywords of a method) 'fall out of scope' once you're outside the method.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the following example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename = \"Joe\"\u003cbr\u003e\u003cbr\u003edef greeting(name)\u003cbr\u003e   puts \"Hello, #{name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this code snippet, we have a variable, \u003ccode\u003ename\u003c/code\u003e, set equal to a string, \u003ccode\u003e\"Joe\"\u003c/code\u003e. Then we define a method, \u003ccode\u003e#greeting\u003c/code\u003e,  that takes in an argument of name. Are the \u003ccode\u003ename\u003c/code\u003e variable that is set equal to \u003ccode\u003e\"Joe\"\u003c/code\u003e and the \u003ccode\u003ename\u003c/code\u003e variable we are using as a parameter (or argument) for our \u003ccode\u003e#greeting\u003c/code\u003e method definition the same? Let's see. \u003c/p\u003e\n\n\u003cp\u003eIf we call our greeting method in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egreeting(\"Sophie\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat do we expect to be outputted to the terminal?\u003c/p\u003e\n\n\u003cp\u003eIn this case, the above method invocation would \u003ccode\u003eputs\u003c/code\u003e out \u003ccode\u003eHello, Sophie\u003c/code\u003e to the terminal. It is true that we are setting a variable, \u003ccode\u003ename\u003c/code\u003e, equal to \u003ccode\u003e\"Joe\"\u003c/code\u003e in this code snippet. But we are not using \u003cem\u003ethat\u003c/em\u003e variable anywhere else in our code. The \u003ccode\u003ename\u003c/code\u003e argument of the \u003ccode\u003e#greeting\u003c/code\u003e method is just a placeholder. It means: when we call the \u003ccode\u003e#greeting\u003c/code\u003e method with an argument of, say, \u003ccode\u003e\"Sophie\"\u003c/code\u003e, set the variable \u003ccode\u003ename\u003c/code\u003e \u003cem\u003einside of the method\u003c/em\u003e equal to that string argument. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e variable inside of the \u003ccode\u003e#greeting\u003c/code\u003e method is different from the \u003ccode\u003ename\u003c/code\u003e variable that we set equal to \u003ccode\u003e\"Joe\"\u003c/code\u003e outside of the method. The \u003ccode\u003e#greeting\u003c/code\u003e method has its own scope, and variables inside of it don't know about variables outside of it and vice versa. \u003c/p\u003e\n\n\u003ch2\u003eMethod Scope in Ruby\u003c/h2\u003e\n\n\u003cp\u003eThink of a method as a castle. The \u003ccode\u003edef\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e keywords are like the gates that keep out the barbarian hordes, dragons, etc. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevil_monster = \"Bowser\"\u003cbr\u003e\u003cbr\u003edef princess_peaches_castle\u003cbr\u003e  puts \"#{evil_monster} is trying to kidnap Princess Peach!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've defined the variable \u003ccode\u003eevil_monster\u003c/code\u003e \u003cem\u003eoutside\u003c/em\u003e of the method, \u003ccode\u003eprincess_peaches_castle\u003c/code\u003e. Then, we try to call on the \u003ccode\u003eevil_monster\u003c/code\u003e variable inside that method. Watch what happens when we invoke the method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprincess_peaches_castle\u003cbr\u003e# \u0026gt; NameError: undefined local variable or method `evil_monster' for main:Object\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eevil_monster\u003c/code\u003e variable is out of scope for this method. The method can't access it \u003cstrong\u003eunless we pass it in as an argument\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf we define our method to accept an argument, we can pass our variable into the method and the method will be able to operate on/use that variable. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eevil_monster = \"Bowser\"\u003cbr\u003e\u003cbr\u003edef princess_peaches_castle(evil_monster)\u003cbr\u003e  puts \"#{evil_monster} is trying to kidnap Princess Peach!\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprincess_peaches_castle(evil_monster)\u003cbr\u003e# \u0026gt; \"Bowser is trying to kidnap Princess Peach!\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe method call, which happens outside the method itself, has access to our \u003ccode\u003eevil_monster\u003c/code\u003e variable. We can therefore make the value stored in \u003ccode\u003eevil_monster\u003c/code\u003e available to \u003ccode\u003eprincess_peaches_castle\u003c/code\u003e by passing it as an argument when we call the method. So now Mario can start his adventure.\u003c/p\u003e\n\n\u003cp\u003eSo far, we've seen that variables defined outside of methods are not available inside methods (unless we pass them in as arguments). This works the other way around as well: variables defined inside of methods are not available outside of those methods. Let's take a look. \u003c/p\u003e\n\n\u003cp\u003eIf we define the following method to include a local variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef practicing_method_scope\u003cbr\u003e  im_trapped_in_the_method = \"You can't access me outside this method!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTrying to access that variable elsewhere in our program, \u003cem\u003eoutside of this method\u003c/em\u003e, will raise the following error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eim_trapped_in_the_method\u003cbr\u003e#=\u0026gt; NameError: undefined local variable or method `im_trapped_in_the_method' for main:Object\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eRemember: A variable defined inside a method can't leave that method. It is not available to your program outside of the method. A variable defined outside of a method can only be made available to the code inside the method if you pass that variable in to the method as an argument. \u003c/p\u003e","frontPage":false},{"exportId":"advanced-class-methods","title":"Advanced Class Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-advanced-class-methods-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-advanced-class-methods-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-advanced-class-methods-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-advanced-class-methods-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild class finders\u003c/li\u003e\n\u003cli\u003eBuild class constructors\u003c/li\u003e\n\u003cli\u003eBuild class operators\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eAdvanced Class Methods\u003c/h2\u003e\n\n\u003cp\u003eConsider the method \u003ccode\u003e.all\u003c/code\u003e on the \u003ccode\u003eSong\u003c/code\u003e class, \u003ccode\u003eSong.all\u003c/code\u003e. This method acts as\na reader for the \u003ccode\u003e@@all\u003c/code\u003e class variable. This method \u003cem\u003eexposes\u003c/em\u003e this piece of\ndata to the rest of our application. Class methods provide an interface for the\ndata held within a class. This data, stored in a class variable, would otherwise\nbe inaccessible outside of the class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eself.all\u003c/code\u003e is a class method for reading the data stored in the class\nvariable\u003ccode\u003e@@all\u003c/code\u003e. This is a \u003cem\u003eclass\u003c/em\u003e reader, very similar to an \u003cem\u003einstance\u003c/em\u003e reader\nmethod that reads an instance property:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etim = Person.new(\"Tim\")\u003cbr\u003etim.name #=\u0026gt; \"Tim\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat else can class methods help us with? What other common class-level\nfunctionality can be exposed through class methods?\u003c/p\u003e\n\n\u003ch2\u003eClass Finders\u003c/h2\u003e\n\n\u003cp\u003eImagine a \u003ccode\u003ePerson\u003c/code\u003e class that provides access to all of its instances through\n\u003ccode\u003ePerson.all\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egrace_hopper = Person.new(\"Grace Hopper\")\u003cbr\u003esandi_metz = Person.new(\"Sandi Metz\")\u003cbr\u003e\u003cbr\u003ePerson.all #=\u0026gt; [#,\u003cbr\u003e                #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow might you find a specific person by name given this \u003ccode\u003ePerson\u003c/code\u003e model?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.new(\"Grace Hopper\")\u003cbr\u003ePerson.new(\"Sandi Metz\")\u003cbr\u003e\u003cbr\u003esandi_metz = Person.all.find{|person| person.name == \"Sandi Metz\"}\u003cbr\u003esandi_metz #=\u0026gt; #\u003cbr\u003e\u003cbr\u003egrace_hopper = Person.all.find{|person| person.name == \"Grace Hopper\"}\u003cbr\u003egrace_hopper #=\u0026gt; #\u003cbr\u003e\u003cbr\u003eavi_flombaum = Person.all.find{|person| person.name == \"Avi Flombaum\"}\u003cbr\u003eavi_flombaum #=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEvery time your application requires you to find a particular person by name,\nyou will have to use \u003ccode\u003e#find\u003c/code\u003e, passing in the appropriate block. This stinks!\nImagine how unsustainable it will get to write out \u003ccode\u003ePerson.all.find\u003c/code\u003e over and\nover as your application grows.\u003c/p\u003e\n\n\u003ch2\u003eThere's Gotta Be a Better Way!\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/xsATxBQfeKHCg/giphy.gif\" alt=\"Home Video Infomercial GIF\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eInstead of writing \u003ccode\u003e#find\u003c/code\u003e every time we want to \u003cem\u003esearch\u003c/em\u003e for an object, we can\n\u003cstrong\u003eencapsulate\u003c/strong\u003e this logic into a class method, like \u003ccode\u003ePerson.find_by_name\u003c/code\u003e.\nInstead of writing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePerson.find{|p| p.name == \"Grace Hopper\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eevery single time we need to search, we can simply teach our \u003ccode\u003ePerson\u003c/code\u003e class\n\u003cem\u003ehow\u003c/em\u003e to search by defining a class method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    @@all.find{|person| person.name == name}\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.new(\"Grace Hopper\")\u003cbr\u003ePerson.new(\"Sandi Metz\")\u003cbr\u003e\u003cbr\u003esandi_metz = Person.find_by_name(\"Sandi Metz\")\u003cbr\u003esandi_metz #=\u0026gt; #\u003cbr\u003e\u003cbr\u003egrace_hopper = Person.find_by_name(\"Grace Hopper\")\u003cbr\u003egrace_hopper #=\u0026gt; #\u003cbr\u003e\u003cbr\u003eavi_flombaum = Person.find_by_name(\"Avi Flombaum\")\u003cbr\u003eavi_flombaum #=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe call class methods like \u003ccode\u003ePerson.find_by_name\u003c/code\u003e 'finders'. Finder class methods\nare responsible for finding instances based on some property or condition.\u003c/p\u003e\n\n\u003ch4\u003eSlight Digression on Abstraction:\u003c/h4\u003e\n\n\u003cp\u003eBut we can improve the code above slightly. Code that relies on abstraction is\nmore maintainable and extendable over time. In general, we advance as a species\nand a civilization when technology provides an abstraction for us to use instead\nof the literal implementation. When you want light, you don't need to start a\nfire, you can just flick a light switch. \u003cem\u003eThis is an \u003cstrong\u003eabstraction\u003c/strong\u003e\u003c/em\u003e. We\npromise. If creating and using abstractions have gotten people this far, we\nshould probably continue embracing that design principle in our code.\u003c/p\u003e\n\n\u003ch4\u003eCool Tangent but What Can We Abstract Away Here?\u003c/h4\u003e\n\n\u003cp\u003eOur current implementation of \u003ccode\u003ePerson.find_by_name\u003c/code\u003e reads the instance data for\nthe class \u003cstrong\u003edirectly\u003c/strong\u003e out of the class variable \u003ccode\u003e@@all\u003c/code\u003e. Would this break if we\nneed to rename the \u003ccode\u003e@@all\u003c/code\u003e variable? What if it makes more sense to call it\n\u003ccode\u003e@@people\u003c/code\u003e? Every method that relies on that literal variable name —\n\u003ccode\u003ePerson.all\u003c/code\u003e, \u003ccode\u003ePerson.find_by_name\u003c/code\u003e, etc. — would break, and we'd have to\nupdate all of our methods to read from the new variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@people = [] # changed from @@all\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@people \u0026lt;\u0026lt; self # changed from @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@people # changed from @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    @@people.find{|person| person.name == name}\u003cbr\u003e    # changed from @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eVariable names are a very low-level abstraction. They are like making light by\nfire. Methods that read out of a variable provide an abstraction for the literal\nvariable name. Using a reader method is almost always better and more reliable\nthan using the variable.\u003c/p\u003e\n\n\u003cp\u003eWe already have a method to read \u003ccode\u003e@@people\u003c/code\u003e, \u003ccode\u003ePerson.all\u003c/code\u003e, so why not use that\nmethod in \u003ccode\u003ePerson.find_by_name\u003c/code\u003e? Within a class method, how do we call another\nclass method? What is the scope of the class method? What is self? \u003cstrong\u003eThe class\nitself\u003c/strong\u003e. Consider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@people = []\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    # self in the initialize method is our new instance\u003cbr\u003e    # self.class is Person\u003cbr\u003e    # self.class.all == Person.all\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@people\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    self.all.find{|person| person.name == name}\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo what's happening in our \u003ccode\u003e#initialize\u003c/code\u003e method now? Recall that \u003ccode\u003e#initialize\u003c/code\u003e\nis an instance method, so \u003ccode\u003eself\u003c/code\u003e will refer to an instance, not the entire\nclass. In order to access \u003ccode\u003ePerson.all\u003c/code\u003e, we need to go from the instance, \u003ccode\u003eself\u003c/code\u003e,\nto its class by using \u003ccode\u003eself.class\u003c/code\u003e. So using \u003ccode\u003eself.class.all \u0026lt;\u0026lt; self\u003c/code\u003e is the\nsame as using \u003ccode\u003e@@people \u0026lt;\u0026lt; self\u003c/code\u003e, but we have abstracted away the use of the\nvariable.\u003c/p\u003e\n\n\u003cp\u003eIf the variable \u003ccode\u003e@@people\u003c/code\u003e changes names, we only have to update it in one\nplace, the \u003ccode\u003ePerson.all\u003c/code\u003e reader. All code that relies on that method still works.\n1 conceptual change -\u0026gt; 1 line-of-code (LOC) change. Nice.\u003c/p\u003e\n\n\u003cp\u003eIn addition to improving the maintainability of our code, class methods also\nprovide a more readable API for the rest of our application. Consider just one\nmore time the difference in seeing the following two lines littered throughout\nyour code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePerson.all.find{|p| p.name == \"Ada Lovelace\"}\u003cbr\u003e# literal implementation, no abstraction or encapsulation\u003cbr\u003e# our program would be littered with this\u003cbr\u003e\u003cbr\u003ePerson.find_by_name(\"Ada Lovelace\")\u003cbr\u003e# abstract implementation with logic entirely encapsulated.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhenever we use \u003ccode\u003ePerson.find_by_name\u003c/code\u003e the intention of our code is clear.\nInstead of iterating over an array, our code reads clearly. Instead of\ndescribing the implementation of finding a person by name, our code simply says\nwhat it is doing, not how. You want to build objects that provide a semantic and\nobvious API, or interface. Methods that reveal what the object will do, not how\nit does that. Always hide the how and show the what.\u003c/p\u003e\n\n\u003cp\u003eFinders are just one example of a more semantic API for our classes. Let's look\nat another way class methods can improve the readability of our code.\u003c/p\u003e\n\n\u003ch2\u003eCustom Class Constructors\u003c/h2\u003e\n\n\u003cp\u003eOur marketing team has provided us with a list of people in comma-separated\nvalues (CSV), a common formatting convention when exporting from spreadsheets.\nThe raw data looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eElon Musk, 45, Tesla/SpaceX\u003cbr\u003eMark Zuckerberg, 32, Facebook\u003cbr\u003eMartha Stewart, 74, MSL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThey tell us that they will often need to upload CSVs of people data.  Let's\nlook at how we'd create a person instance from a CSV:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age, :company\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ecsv_data = \"Elon Musk, 45, Tesla\u003cbr\u003eMark Zuckerberg, 32, Facebook\u003cbr\u003eMartha Stewart, 74, MSL\"\u003cbr\u003e\u003cbr\u003erows = csv_data.split(\"\\n\")\u003cbr\u003epeople = rows.collect do |row|\u003cbr\u003e  data = row.split(\", \")\u003cbr\u003e  name = data[0]\u003cbr\u003e  age = data[1]\u003cbr\u003e  company = data[2]\u003cbr\u003e  person = Person.new\u003cbr\u003e  person.name = name\u003cbr\u003e  person.age = age\u003cbr\u003e  person.company = company\u003cbr\u003e  person\u003cbr\u003eend\u003cbr\u003epeople\u003cbr\u003e#=\u0026gt; [\u003cbr\u003e  #,\u003cbr\u003e  #,\u003cbr\u003e  # ...\u003cbr\u003e# ]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePretty complex. We don't want to do that throughout our application. In an ideal\nworld, every time we got CSV data we'd just want the \u003ccode\u003ePerson\u003c/code\u003e class to be\nresponsible for parsing it. Could we build something like \u003ccode\u003ePerson.new_from_csv\u003c/code\u003e?\nOf course! Let's look at how we might implement a custom constructor.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age, :company\u003cbr\u003e\u003cbr\u003e  def self.new_from_csv(csv_data)\u003cbr\u003e    rows = csv_data.split(\"\\n\")\u003cbr\u003e    people = rows.collect do |row|\u003cbr\u003e      data = row.split(\", \")\u003cbr\u003e      name = data[0]\u003cbr\u003e      age = data[1]\u003cbr\u003e      company = data[2]\u003cbr\u003e\u003cbr\u003e      person = self.new # This is an important line.\u003cbr\u003e      person.name = name\u003cbr\u003e      person.age = age\u003cbr\u003e      person.company = company\u003cbr\u003e      person\u003cbr\u003e    end\u003cbr\u003e    people\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ecsv_data = \"Elon Musk, 45, Tesla\u003cbr\u003eMark Zuckerberg, 32, Facebook\u003cbr\u003eMartha Stewart, 74, MSL\"\u003cbr\u003e\u003cbr\u003epeople = Person.new_from_csv(csv_data)\u003cbr\u003epeople #=\u0026gt; [\u003cbr\u003e  #,\u003cbr\u003e  #,\u003cbr\u003e  # ...\u003cbr\u003e# ]\u003cbr\u003e\u003cbr\u003enew_csv_data = \"Avi Flombaum, 31, Flatiron School\u003cbr\u003ePayal Kadakia, 30, ClassPass\"\u003cbr\u003e\u003cbr\u003epeople \u0026lt;\u0026lt; Person.new_from_csv(new_csv_data)\u003cbr\u003epeople.flatten\u003cbr\u003epeople #=\u0026gt; [\u003cbr\u003e#,\u003cbr\u003e#\u003cbr\u003e#,\u003cbr\u003e#,\u003cbr\u003e#\u003cbr\u003e# ]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that, when needing to parse multiple sets of CSV data, having a\n\u003ccode\u003ePerson.new_from_csv\u003c/code\u003e class method greatly simplifies our code. Let's take a\ncloser look at how that class method works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name, :age, :company\u003cbr\u003e\u003cbr\u003e  def self.new_from_csv(csv_data)\u003cbr\u003e    # Split the CSV data into an array of individual rows.\u003cbr\u003e    rows = csv_data.split(\"\\n\")\u003cbr\u003e    # For each row, let's collect a Person instance based on the data\u003cbr\u003e    people = rows.collect do |row|\u003cbr\u003e      # Split the row into 3 parts, name, age, company, at the \", \"\u003cbr\u003e      data = row.split(\", \")\u003cbr\u003e      name = data[0]\u003cbr\u003e      age = data[1]\u003cbr\u003e      company = data[2]\u003cbr\u003e\u003cbr\u003e      # Make a new instance\u003cbr\u003e      person = self.new # self refers to the Person class. This is Person.new\u003cbr\u003e      # Set the properties on the person.\u003cbr\u003e      person.name = name\u003cbr\u003e      person.age = age\u003cbr\u003e      person.company = company\u003cbr\u003e      # Return the person to collect\u003cbr\u003e      person\u003cbr\u003e    end\u003cbr\u003e    # Return the array of newly created people.\u003cbr\u003e    people\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLike in any class method, \u003ccode\u003eself\u003c/code\u003e refers to the class itself so we can call\n\u003ccode\u003eself.new\u003c/code\u003e to piggyback, wrap, or extend the functionality of \u003ccode\u003ePerson.new\u003c/code\u003e. When\nwe call \u003ccode\u003ePerson.new_from_csv\u003c/code\u003e, who is receiving the method call? It's the\n\u003ccode\u003ePerson\u003c/code\u003e class itself. Therefore, \u003ccode\u003eself\u003c/code\u003e in this context is \u003ccode\u003ePerson\u003c/code\u003e. We parse\nthe raw data, create an instance, and assign the data to the corresponding\ninstance properties.\u003c/p\u003e\n\n\u003cp\u003eWhy do this? If we need to be able to create people from CSVs, why not just\nbuild that directly into \u003ccode\u003e#initialize\u003c/code\u003e? Well, the honest answer is because we\ndon't always want to create people from CSV data. Anything we build into\ninitialize will happen \u003cstrong\u003ealways\u003c/strong\u003e. Another key to writing maintainable code is\ndesigning functionality that is closed to modification but open to extension.\u003c/p\u003e\n\n\u003cp\u003eInitialize should be closed to modification. It should only handle the most\noften required and common cases of initializing an object. Anything we add to\ninitialize should be permanent and never modified. If we need more functionality\nwhen making an instance, instead of modifying initialize, we can extend it by\nwrapping it within a custom constructor.\u003c/p\u003e\n\n\u003cp\u003eIf we ever need to make people from xml or json we can continue to extend the\nobject with custom constructors instead of constantly modifying initialize with\ncomplex logic.\u003c/p\u003e\n\n\u003cp\u003eLet's look at a somewhat simpler example of a custom constructor that wraps\n\u003ccode\u003e.new\u003c/code\u003e. When building objects that can be saved into a class variable \u003ccode\u003e@@all\u003c/code\u003e,\nwe might not always want to save the newly instantiated instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith that code, no matter what, person instances will always be saved. We could\ninstead implement a simple \u003ccode\u003e.create\u003c/code\u003e class method to provide the functionality\nof instantiating and creating the instance, leaving \u003ccode\u003e.new\u003c/code\u003e to function as\nnormal.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def self.create\u003cbr\u003e    @@all \u0026lt;\u0026lt; self.new\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eClass Operators\u003c/h2\u003e\n\n\u003cp\u003eBeyond finders and custom constructors that return existing instances or create\nnew instances, class methods can also manipulate class-level data.\u003c/p\u003e\n\n\u003cp\u003eA basic case of this might be printing all the people in our application.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create(name)\u003cbr\u003e    person = self.new\u003cbr\u003e    person.name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; person\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.create(\"Ada Lovelace\")\u003cbr\u003ePerson.create(\"Grace Hopper\")\u003cbr\u003e\u003cbr\u003e# Printing each person\u003cbr\u003ePerson.all.each do |person|\u003cbr\u003e  puts \"#{person.name}\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven that logic is worth encapsulating within a class method \u003ccode\u003e.print_all\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create(name)\u003cbr\u003e    person = self.new\u003cbr\u003e    person.name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; person\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.print_all\u003cbr\u003e    self.all.each{|person| puts \"#{person.name}\"}\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.create(\"Ada Lovelace\")\u003cbr\u003ePerson.create(\"Grace Hopper\")\u003cbr\u003e\u003cbr\u003ePerson.print_all\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWay nicer.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, class methods might provide a global operation on data. Imagine\nthat one of the CSVs we were provided with has people's names in lowercase\nletters. We want proper capitalization. We can build a class method\n\u003ccode\u003ePerson.normalize_names\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.normalize_names\u003cbr\u003e    self.all.each do |person|\u003cbr\u003e      person.name = person.name.split(\" \").collect{|w| w.capitalize}.join(\" \")\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe logic for actually normalizing a person's name is pretty complex:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eperson.name.split(\" \").collect{|w| w.capitalize}.join(\" \")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat we're doing is splitting a name, like \u003ccode\u003e\"ada lovelace\"\u003c/code\u003e, into an array at\nthe space, \u003ccode\u003e\" \"\u003c/code\u003e, which returns \u003ccode\u003e[\"ada\", \"lovelace\"]\u003c/code\u003e. With that array we\ncollect each word into a new array after it has been capitalized, returning\n\u003ccode\u003e[\"Ada\", \"Lovelace\"]\u003c/code\u003e. We then join the elements in that array with a \u003ccode\u003e\" \"\u003c/code\u003e\nreturning the final capitalized name, \u003ccode\u003e\"Ada Lovelace\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eGiven how complex normalizing a person's name is, we should actually encapsulate\nthat into the \u003ccode\u003ePerson\u003c/code\u003e instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def normalize_name\u003cbr\u003e    self.name.split(\" \").collect{|w| w.capitalize}.join(\" \")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.normalize_names\u003cbr\u003e    self.all.each do |person|\u003cbr\u003e      person.name = person.normalize_name\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith \u003ccode\u003e#normalize_name\u003c/code\u003e, we've taught a \u003ccode\u003ePerson\u003c/code\u003e instance how to properly convert\nits name into a capitalized version. The class method that acts on the global\ndata of all people is simplified and delegates the actual normalization to the\noriginal instances. This is a common pattern for global class operators.\u003c/p\u003e\n\n\u003cp\u003eA final example of this type of global data manipulation might be deleting all\nthe people. We would build a \u003ccode\u003ePerson.destroy_all\u003c/code\u003e class method that will clear\nout the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  attr_accessor :name\u003cbr\u003e  @@all = []\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.destroy_all\u003cbr\u003e    self.all.clear\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere our \u003ccode\u003ePerson.destroy_all\u003c/code\u003e method uses the\n\u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-clear\"\u003e\u003ccode\u003eArray#clear\u003c/code\u003e\u003c/a\u003e method to\nempty the \u003ccode\u003e@@all\u003c/code\u003e array through the class reader \u003ccode\u003ePerson.all\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=-jrEbj4iCQ8\"\u003eVideo Review- Object Orientation: Key Mechanics\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=vENMFapLonA\"\u003eVideo Review- Object Models\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=Z_IoQCVNWtM\"\u003eVideo Review- Object Orientation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"finding-or-creating-by","title":"Finding or Creating By","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-find-or-create-by\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-find-or-create-by/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-find-or-create-by\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-find-or-create-by/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAvoid creating duplicate records in a database that is mapped to a Ruby\nprogram\u003c/li\u003e\n\u003cli\u003eBuild a \u003ccode\u003e#find_or_create_by\u003c/code\u003e method\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eThe Dreaded Duplication\u003c/h2\u003e\n\n\u003cp\u003eWhat happens when two Ruby objects get created using the same attributes? If we\nare trying to persist representations of such objects to a database, would we\nend up with essentially identical rows in our table? That would make for a very\nconfusing database and our program would quickly become useless as a way to\nstore and manage information.\u003c/p\u003e\n\n\u003cp\u003eFor example, lets say we have a \u003ccode\u003eSong\u003c/code\u003e class that produces individual song\nobjects, each of which has a \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ealbum\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eNothing stops us from creating two objects, each of which has the exact same\nname and album.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.new(\"Hello\", \"25\")\u003cbr\u003ehello_again = Song.new(\"Hello\", \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens when we save these objects to our database?\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eFor this example\u003c/em\u003e, we'll assume our connection to the database is stored in\n\u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.save\u003cbr\u003ehello_again.save\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(\"SELECT * FROM songs WHERE name = \"Hello\")\u003cbr\u003e# =\u0026gt; [[1, \"Hello\", \"25\"], [2, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have two records that contain the same information! How can we avoid this?\nWhen we try to save a new \u003ccode\u003eSong\u003c/code\u003e instance, we should first check to see whether\nthe object we are trying to save already has an equivalent record in the\ndatabase. If it does, we should simply update it. Otherwise, we can go ahead and\nsave it.\u003c/p\u003e\n\n\u003ch2\u003eSaving vs. Updating\u003c/h2\u003e\n\n\u003cp\u003eLet's say we have a song, \u003ccode\u003ehello\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.new(\"Hello\", \"25\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore we call \u003ccode\u003e#save\u003c/code\u003e on our \u003ccode\u003ehello\u003c/code\u003e object, we need to check and see if a\nrecord containing this name and album already exists in the database. The SQL\nstatement to accomplish that would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM songs\u003cbr\u003eWHERE name = \"Hello\", album = \"25\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf this statement returns a record, we don't need to create a new record, only\nupdate the existing one. Otherwise, we need to insert a new record into our\ndatabase table.\u003c/p\u003e\n\n\u003cp\u003eLet's build a method that will allow us to either \u003cem\u003efind an existing record\u003c/em\u003e or\n\u003cem\u003ecreate and save\u003c/em\u003e a new one.\u003c/p\u003e\n\n\u003ch2\u003eThe \u003ccode\u003e#find_or_create_by\u003c/code\u003e Method\u003c/h2\u003e\n\n\u003cp\u003eTake a look at our \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003eattr_accessor :name, :album\u003cbr\u003eattr_reader :id\u003cbr\u003e\u003cbr\u003e  def initialize(id=nil, name, album)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    if self.id\u003cbr\u003e      self.update\u003cbr\u003e    else\u003cbr\u003e      sql = \u0026lt;        INSERT INTO songs (name, album)\u003cbr\u003e        VALUES (?, ?)\u003cbr\u003e      SQL\u003cbr\u003e\u003cbr\u003e      DB[:conn].execute(sql, self.name, self.album)\u003cbr\u003e      @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM songs\")[0][0]\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create(name:, album:)\u003cbr\u003e    song = Song.new(name, album)\u003cbr\u003e    song.save\u003cbr\u003e    song\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_id(id)\u003cbr\u003e    sql = \"SELECT * FROM songs WHERE id = ?\"\u003cbr\u003e    result = DB[:conn].execute(sql, id)[0]\u003cbr\u003e    Song.new(result[0], result[1], result[2])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def update\u003cbr\u003e    sql = \"UPDATE songs SET name = ?, album = ? WHERE id = ?\"\u003cbr\u003e    DB[:conn].execute(sql, self.name, self.album, self.id)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's build our \u003ccode\u003e#find_or_create_by\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  def self.find_or_create_by(name:, album:)\u003cbr\u003e    song = DB[:conn].execute(\"SELECT * FROM songs WHERE name = ? AND album = ?\", name, album)\u003cbr\u003e    if !song.empty?\u003cbr\u003e      song_data = song[0]\u003cbr\u003e      song = Song.new(song_data[0], song_data[1], song_data[2])\u003cbr\u003e    else\u003cbr\u003e      song = self.create(name: name, album: album)\u003cbr\u003e    end\u003cbr\u003e    song\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break this down:\u003c/p\u003e\n\n\u003cp\u003eFirst, we query the database: does a record exist that has this name and album?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = DB[:conn].execute(\"SELECT * FROM songs WHERE name = ? AND album = ?\", name, album)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf such a record exists, the \u003ccode\u003esong\u003c/code\u003e variable will now point to an array that\nwould look something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003esong name and album name provided as a hypothetical example\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[[1, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf this is the case, then the statement: \u003ccode\u003e!song.empty?\u003c/code\u003e will return \u003ccode\u003etrue\u003c/code\u003e.\nTherefore, we will use the returned values to make a new \"Hello\" object that\nRuby can play around with, but we will \u003cem\u003enot\u003c/em\u003e save it to the database. That\nre-instantiation of an existing Song object is accomplished with these lines:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong_data = song[0]\u003cbr\u003esong = Song.new(song_data[0], song_data[1], song_data[2])\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe grab the \u003ccode\u003esong_data\u003c/code\u003e from the \u003ccode\u003esong\u003c/code\u003e array of arrays, setting \u003ccode\u003esong_data\u003c/code\u003e\nequal to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1, \"Hello\", \"25\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we use this array to create a new \u003ccode\u003eSong\u003c/code\u003e instance with the given id, name\nand album.\u003c/p\u003e\n\n\u003cp\u003eHowever, if no record exists that matches the name and album passed in as\narguments, then \u003ccode\u003e!song.empty?\u003c/code\u003e will return \u003ccode\u003efalse\u003c/code\u003e, and we will instead create\nand save a new \u003ccode\u003eSong\u003c/code\u003e instance with the \u003ccode\u003e#create\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eAt the end of our \u003ccode\u003e#find_or_create_by\u003c/code\u003e method, we will return the song object\nwhose database entry we either found or created. This method assumes that there\nisn't already a song object matching these attributes, but that there may\nalready exist a database entry with the same name and album. Therefore, it\ninstantiates a new instance of the \u003ccode\u003eSong\u003c/code\u003e class while preventing a duplicate\ndatabase entry.\u003c/p\u003e\n\n\u003ch3\u003eOur Code in Action\u003c/h3\u003e\n\n\u003cp\u003eNow, we can use our \u003ccode\u003eSong\u003c/code\u003e class without worrying about creating duplicate records:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.find_or_create_by(name: \"Hello\", album: \"25\")\u003cbr\u003eSong.find_or_create_by(name: \"Hello\", album: \"25\")\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(\"SELECT * FROM songs WHERE name = Hello, album = 25\")\u003cbr\u003e# =\u0026gt; [[1, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlthough we called \u003ccode\u003e#find_or_create_by\u003c/code\u003e twice \u003cem\u003ewith the same data\u003c/em\u003e (gasp!), we\nonly created \u003cem\u003eone record with that data\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eBonus Section- Video Reviews\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=mZROu5oSWfI\"\u003eVideo Review- ORMs and SQL Joins\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=hts7TjpPw-8\"\u003eVideo Review- Building a Metaprogrammed Abstract ORM\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=1eIgKGukBlg\"\u003eVideo Review- Code-along: Building a Room Scraper and ORM\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"object-relationships-conclusion","title":"Object Relationships Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eOver the past several lessons and labs, we've seen in detail how relationships\nbetween Ruby objects work. Always keep in mind that when we're writing programs,\nwe're reflecting real-world situations and environments. We can model these\nassociations in our code with relationship patterns such as \"belongs to\" and\n\"has many.\" We also looked at how classes and methods within classes can\ncollaboratively send messages to one another and explored how to use the concept of a\n\"join\" class to represent more complex relationships.\u003c/p\u003e\n\n\u003cp\u003eRuby object relationships will provide the foundations of the programs you write\nin the future, and the more accurately you can create associations between your\nprogram and the real-world, the more your program's users will benefit from your\nwork.\u003c/p\u003e","frontPage":false},{"exportId":"getting-remote-data-conclusion","title":"Getting Remote Data Conclusion","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"getting-remote-data-conclusion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-conclusion/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-conclusion\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-conclusion/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've established how you can build classes and object that perform various\nfunctions in an application, however, sometimes we want to incorporate remote\ndata into our applications. We've seen demonstrated that many applications give\nus access to data via APIs.\u003c/p\u003e\n\n\u003cp\u003eAPIs give us selective access to which parts of the that codebase the developers\nwant to expose. This can make it easier to work with. We should now understand\nhow APIs can be used, how to find API endpoint, and how to send a request for\ndata to an API.\u003c/p\u003e\n\n\u003cp\u003eWith the ability to leverage remote data in our applications, we can increase\nthe functionality of our applications or even save time!\u003c/p\u003e\n\n\u003ch3\u003eFurther reading\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.scrapingbee.com/blog/web-scraping-ruby/\"\u003eWeb Scraping with Ruby\u003c/a\u003e\u003c/strong\u003e: Create a job tracker with this code-along tutorial, which introduces you to industry-standard tools such as Selenium + headless Chrome.\u003c/p\u003e","frontPage":false},{"exportId":"collaborating-objects","title":"Collaborating Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-collaborating-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eGain a deeper understanding of object relations\u003c/li\u003e\n\u003cli\u003eUse other classes and methods within another class to collaboratively send messages to one another\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's stick with our song/artist example. Our song class is responsible for handling songs. Our artist class is responsible for handling artists. However, these things clearly have some relation to one another. Remember, a song belongs to an artist, and an artist has many songs. These two classes will have to collaborate.\u003c/p\u003e\n\n\u003cp\u003eIn fact, the classes do not even need to have any relationship (\u003ccode\u003e\"has many\"\u003c/code\u003e or \u003ccode\u003e\"belongs to\"\u003c/code\u003e) to collaborate. Imagine we have an MP3 Importer that is responsible for taking in a bunch of MP3 files and making a song for each unique filename. It is not hard to imagine that to make a song, the MP3 Importer will have to have some sort of communication with the \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at each of these collaborations in more detail.\u003c/p\u003e\n\n\u003ch2\u003eMP3 Importer collaborating with Songs\u003c/h2\u003e\n\n\u003cp\u003eThe purpose of this MP3 Importer is to take in a list of mp3s and send each mp3 filename to the \u003ccode\u003eSong\u003c/code\u003e class to make a \u003ccode\u003eSong\u003c/code\u003e. Let's just focus on the collaboration. Our \u003ccode\u003eMP3Importer\u003c/code\u003e class will receive a list of filenames that look like this \"Drake - Hotline Bling\". \u003ccode\u003eMP3Importer\u003c/code\u003e will then send each of those filenames to the \u003ccode\u003eSong\u003c/code\u003e class to be created.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :title\u003cbr\u003e\u003cbr\u003e  def self.new_by_filename(filename)\u003cbr\u003e    song = self.new\u003cbr\u003e    song.title = filename.split(\" - \")[1]\u003cbr\u003e    song\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eclass MP3Importer\u003cbr\u003e  def import(list_of_filenames)\u003cbr\u003e    list_of_filenames.each{ |filename| Song.new_by_filename(filename) }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice how \u003cem\u003ewithin the \u003ccode\u003eMP3Importer\u003c/code\u003e class we are calling the \u003ccode\u003eSong\u003c/code\u003e class and a method within the \u003ccode\u003eSong\u003c/code\u003e class: \u003ccode\u003e.new_by_filename\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen we hit this line of code, it will send us to the \u003ccode\u003eSong\u003c/code\u003e class to do whatever behavior we have defined in the \u003ccode\u003e.new_by_filename\u003c/code\u003e class method. Then we will return to the \u003ccode\u003eMP3Importer\u003c/code\u003e class to continue executing the code. This is at the heart of collaborating objects.\u003c/p\u003e\n\n\u003ch2\u003eSongs collaborating with Artists\u003c/h2\u003e\n\n\u003cp\u003eSince our song belongs to an artist, we will want to collaborate with the \u003ccode\u003eArtist\u003c/code\u003e class at some point. Imagine we have the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :artist\u003cbr\u003e\u003cbr\u003e  # other methods\u003cbr\u003e\u003cbr\u003e  def artist_name=(name)\u003cbr\u003e    if (self.artist.nil?)\u003cbr\u003e      self.artist = Artist.new(name)\u003cbr\u003e    else\u003cbr\u003e      self.artist.name = name\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # other methods\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe point of this code is that we want to be able to execute the following code given a song \u003ccode\u003ehotline_bling = Song.new('Hotline Bling')\u003c/code\u003e (Let's use Hotline Bling by Drake):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist_name = \"Drake\"\u003cbr\u003ehotline_bling.artist\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should then return the new \u003ccode\u003eArtist\u003c/code\u003e object that was created by the \u003ccode\u003e#artist_name\u003c/code\u003e method.\u003c/p\u003e","frontPage":false},{"exportId":"layers-of-abstraction","title":"Layers of Abstraction","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"why-layers-of-abstraction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/why-layers-of-abstraction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/why-layers-of-abstraction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/why-layers-of-abstraction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eBefore we start our journey to Rails, let's pause and discuss the route to get there. We'll first explore two lower-level Ruby web tools: Rack and Sinatra. Rails does \u003cem\u003eso much\u003c/em\u003e that it might seem like magic. But as a web app developer, we can't rely on magic to see us through. We need to understand everything we're doing at a layer (or two!) deeper than the layer at which we're operating.\u003c/p\u003e\n\n\u003cp\u003eEventually, the magic will break. In other words, your programs will break. If you can't take Rails apart and understand the fundamentals of what's going on, you'll never be able to fix the magic. You may not be entirely comfortable with all of the internals of Rails, but you will know the foundations. Think about auto mechanics. They may not know every part of every car but they know the foundations. They know common features of all cars, and how even the smallest parts connect to other parts. This allows them to diagnose and suggest fixes faster, and gives them a holistic picture of the mechanics of cars which again will guide them towards solutions. \u003c/p\u003e\n\n\u003cp\u003eWith Rails, you'll understand how HTTP works and how Rails is able to translate all of the complexities of HTTP and modern web servers into something that is easy to work with. With all its features, it can also be confusing to see how they fit together to make a response to give to the user. In building up to Rails, you'll build a simple version of most Rails features. Once you \u003ccode\u003erequire 'rails'\u003c/code\u003e it should feel familiar.\u003c/p\u003e\n\n\u003cp\u003eBe prepared! It's going to be hard to go up layers of abstraction. You are no longer just a driver on the web. You are now a maker on the web.\u003c/p\u003e","frontPage":false},{"exportId":"array-methods","title":"Array Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-methods-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-methods-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-methods-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-methods-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lesson will present some useful methods you can use when working with arrays.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eSort arrays with the sort method\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFind the first and last elements of an array\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFind the size of an array\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFind if an element is in the array with the include? method\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWorking With Arrays\u003c/h2\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.sort\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method rearranges the contents of the array by sorting them. For strings,\nthis means alphabetically, for numerical values, this means from smallest number\nto highest number.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e ​\u003cem\u003eThe\u003c/em\u003e​ \u003ccode\u003e.sort\u003c/code\u003e ​\u003cem\u003emethod works by implicitly comparing elements\nwith the \"spaceship\" operator\u003c/em\u003e​ \u003ccode\u003e\u0026lt;=\u0026gt;\u003c/code\u003e ​\u003cem\u003e(because it looks like a flying saucer,\nswoosh!) and moving them accordingly.\u003c/em\u003e​\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"maru\"]\u003cbr\u003efamous_cats.sort\u003cbr\u003e  =\u0026gt; [\"grumpy cat\", \"lil' bub\", \"maru\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOne thing to be aware of is that the return value of \u003ccode\u003efamous_cats\u003c/code\u003e remains\nunchanged after using the \u003ccode\u003esort\u003c/code\u003e method on it. Meaning if you call \u003ccode\u003efamous_cats\u003c/code\u003e\nagain after the sort, it will still return \u003ccode\u003e[\"lil' bub\", \"grumpy cat\", \"maru\"]\u003c/code\u003e,\nnot the previously sorted array.\u003c/p\u003e\n\n\u003cp\u003eBecause \u003ccode\u003esort\u003c/code\u003e returns a new array, we generally store it into another variable.\nSo we would do \u003ccode\u003esorted_cats = famous_cats.sort\u003c/code\u003e. Now we have two copies of the\narray. One unsorted (\u003ccode\u003efamous_cats\u003c/code\u003e) and one sorted (\u003ccode\u003esorted_cats\u003c/code\u003e). If you don't\ncare about the unsorted version of the array you can call \u003ccode\u003esort!\u003c/code\u003e. This will\nsort the existing array without requiring you to save the return into a new\nvariable. You'll notice the \u003ccode\u003e!\u003c/code\u003e. It's a ruby convention that a method with the\n\u003ccode\u003e!\u003c/code\u003e will do the operation in place. It will modify the receiver of the method\n(AKA the thing to the left of the dot).\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.reverse\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method reverses an array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_wizards = [\"Dumbledore\", \"Gandalf\", \"Merlin\"]\u003cbr\u003efamous_wizards.reverse\u003cbr\u003e  =\u0026gt; [\"Merlin\", \"Gandalf\", \"Dumbledore\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly to \u003ccode\u003esort!\u003c/code\u003e, you can call \u003ccode\u003ereverse!\u003c/code\u003e, again modifying the receiver of\nthe method in place.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.include?\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will return a boolean of whether or not the array contains (or\n​\u003cem\u003eincludes\u003c/em\u003e​) the element submitted to it inside the parentheses:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003efamous_cats.include?(\"Garfield\")\u003cbr\u003e  =\u0026gt; false\u003cbr\u003efamous_cats.include?(\"Maru\")\u003cbr\u003e  =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince we are just returning \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, the receiver of the method,\n\u003ccode\u003efamous_cats\u003c/code\u003e, remains unchanged.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.first\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will return the first element of the array, as its name suggests.\nAgain, it does not change the return value of the original array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003efamous_cats.first\u003cbr\u003e  =\u0026gt; \"lil' bub\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003e.last\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will return the last element of the array, as its name suggests.\nAgain, it does not change the original array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003efamous_cats.last\u003cbr\u003e  =\u0026gt; \"Maru\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe \u003ccode\u003e.size\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method will return the number of elements in the array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efamous_cats = [\"lil' bub\", \"grumpy cat\", \"Maru\"]\u003cbr\u003efamous_cats.size\u003cbr\u003e  =\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven though arrays start with a 0 \u003ccode\u003eindex\u003c/code\u003e, this method returns the actual number\nof elements, starting from 1.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Be aware that all of the methods we have covered in this reading are\ncase sensitive. For example, \u003ccode\u003ereverse\u003c/code\u003e not \u003ccode\u003eReverse\u003c/code\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"super","title":"Super","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-super\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've seen the benefits of using inheritance to create a group of classes that share certain characteristics and behaviors. However, up until now, the implementation of shared characteristics has been somewhat rigid. If class \u003ccode\u003eStudent\u003c/code\u003e inherits from class \u003ccode\u003eUser\u003c/code\u003e, we can choose to either allow the \u003ccode\u003eStudent\u003c/code\u003e class to inherit a certain method from \u003ccode\u003eUser\u003c/code\u003e or overwrite that method with another implementation that is specific to \u003ccode\u003eStudent\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eBut what if there is a method in the parent class that we want our child to share \u003cem\u003esome\u003c/em\u003e of the functionality of? Or what if we want our child class to inherit a method from the parent and then augment it in some way? We can achieve this with the use of the \u003ccode\u003esuper\u003c/code\u003e keyword. \u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003esuper\u003c/code\u003e to supercharge inheritance\u003c/h2\u003e\n\n\u003cp\u003eLet's say we are working on an education app in which users are either students or teachers. We have a parent, \u003ccode\u003eUser\u003c/code\u003e class, that both our \u003ccode\u003eStudent\u003c/code\u003e and \u003ccode\u003eTeacher\u003c/code\u003e classes inherit from. \u003c/p\u003e\n\n\u003cp\u003eOur \u003ccode\u003eUser\u003c/code\u003e class has a method, \u003ccode\u003elog_in\u003c/code\u003e, that sets an instance variable, \u003ccode\u003e@logged_in\u003c/code\u003e equal to \u003ccode\u003etrue\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass User\u003cbr\u003e\u003cbr\u003e  def log_in\u003cbr\u003e    @logged_in = true\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, when a student logs into our app, we need to not only set their logged in attribute to \u003ccode\u003etrue\u003c/code\u003e, we need to set their \"in class\" attribute to true. We could simply edit the \u003ccode\u003e#log_in\u003c/code\u003e method in the \u003ccode\u003eUser\u003c/code\u003e class to account for this. But that doesn't make sense here. Remember that both \u003ccode\u003eStudent\u003c/code\u003e and \u003ccode\u003eTeacher\u003c/code\u003e inherit from \u003ccode\u003eUser\u003c/code\u003e. Teachers don't need to indicate that they are \"in class\", so we don't want to alter the \u003ccode\u003e#log_in\u003c/code\u003e method of our parent class and inadvertently give teachers some behavior that they don't want or need. \u003c/p\u003e\n\n\u003cp\u003eInstead, we can augment, or supercharge, the \u003ccode\u003e#log_in\u003c/code\u003e method \u003cem\u003einside\u003c/em\u003e of the \u003ccode\u003eStudent\u003c/code\u003e class. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Student \u0026lt; User\u003cbr\u003e  def log_in\u003cbr\u003e    super\u003cbr\u003e    @in_class = true\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we re-define the \u003ccode\u003e#log_in\u003c/code\u003e method and tell it to inherit any functionality of the \u003ccode\u003e#log_in\u003c/code\u003e method defined in the parent, or \"super\", class, which is \u003ccode\u003eUser\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003e#log_in\u003c/code\u003e method above, the \u003ccode\u003esuper\u003c/code\u003e keyword will call on the \u003ccode\u003e#log_in\u003c/code\u003e method as defined in the super class. \u003cem\u003eThen\u003c/em\u003e, the additional code that we're adding into our \u003ccode\u003eStudent#log_in\u003c/code\u003e method will also run. We have therefore supercharged our \u003ccode\u003e#log_in\u003c/code\u003e method, for the \u003ccode\u003eStudent\u003c/code\u003e class only. \u003c/p\u003e","frontPage":false},{"exportId":"nested-data-structures-to-insights","title":"Nested Data Structures to Insights","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nds-to-insights\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nds-to-insights/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nds-to-insights\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nds-to-insights/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBy now you've seen the power of nested data structures (NDS) to represent the\nworld around us. NDS are giant collections of facts, like an encyclopedia. We\nhave to take the knowledge from an encyclopedia and do work with those facts to\ncreate new \u003cem\u003einsights\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example, by researching Colombia, the history of soccer, and South American\nhistory, we can write a report about \"Soccer in South America.\" We can\n\u003cem\u003esynthesize\u003c/em\u003e facts into \u003cem\u003einsight\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe do the same with NDS. By applying code to NDS, we can \u003cem\u003esynthesize\u003c/em\u003e insights\nfrom the raw facts contained in the NDS.\u003c/p\u003e\n\n\u003cp\u003eHere are some examples:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\"What's the average age of people in the NDS representing a class of students?\"\u003c/li\u003e\n\u003cli\u003e\"How many pieces of candy are in this vending machine?\"\u003c/li\u003e\n\u003cli\u003e\"In what year will most of my employees reach retirement age so I can plan\n401K contributions?\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut sometimes it can be downright scary to get started. You get a big old blob\nof \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003e literals and you get stuck. Never\nfear!  In this lesson, we're going to show you a process that will help you get\nstarted whenever you have an NDS that you need to process for insights.\u003c/p\u003e\n\n\u003ch2\u003eNDS to Insight Strategy\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the NDS\n\n\u003cul\u003e\n\u003cli\u003e\"Pretty-Print\" NDS with \u003ccode\u003epp\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eHome-Grown Pretty-Print NDS\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e[]\u003c/code\u003e to verify your understanding from Step 1\n\n\u003cul\u003e\n\u003cli\u003ePrint values to verify your understanding\u003c/li\u003e\n\u003cli\u003eLeave code comments and documentation for yourself\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWrap uses of \u003ccode\u003e[]\u003c/code\u003e from Step 2 into new methods\n\n\u003cul\u003e\n\u003cli\u003eCreate simple methods with meaningful names (\"First-Order Methods\")\u003c/li\u003e\n\u003cli\u003eEnsure \"First-Order Methods\" use arguments to create flexibility\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSee-saw between bottom-up and top-down method writing\n\n\u003cul\u003e\n\u003cli\u003eWrite a method that provides an insight e.g. \u003ccode\u003eoldest_student\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eEvaluate your First Order Methods\u003c/li\u003e\n\u003cli\u003eCan you use your First-Order Methods to build the insight method's\nimplementation?\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eYES\u003c/strong\u003e: Great! Your method is done!\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eNO\u003c/strong\u003e: Build a new method that combines \u003cem\u003eother\u003c/em\u003e methods to get closer to what the insight method needs. Repeat step 4\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eInsight method provides an insight! We're done!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe'll explain all these terms in the strategy in the coming lessons.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eLearning Strategy\u003c/strong\u003e: Read over the strategy and see if you can formulate\nquestions you expect us to answer example. Cognitive research suggests that\n\u003cem\u003eyou\u003c/em\u003e learn more when you have an overview that you don't fully understand\nthat you expect us to fill in!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe recommend printing this list out and keep it handy as you complete labs that\nrequire you to transform NDS' into \u003cem\u003einsights\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn Renaissance Florence, a large block of marble sat for twenty-six years,\nunfinished. Rain, sun, snow, it sat because no one was brave enough to face\nsuch an enormous task.  It took a person of courage and conviction to make that\nfirst chip in it. His name was Michaelangelo Buonarotti. \"The Giant\" became the\nmasterpiece, \"David.\"\u003c/p\u003e\n\n\u003cp\u003eStarting large programs that center on huge NDS can feel like facing \"The\nGiant.\" This process gives you the confidence to make the first chip.\u003c/p\u003e\n\n\u003cp\u003eAt Flatiron School, we've seen that most students get the basics of programming\neasily: variables, statements, loops, all that. But what stymies \u003cstrong\u003e\u003cem\u003eall\u003c/em\u003e\u003c/strong\u003e\ndevelopers — all \u003cem\u003ecreators\u003c/em\u003e as the story of \"The Giant\" demonstrates\n— is not being able to get started. This strategy is designed to help you\nget over that initial activation cliff and get on your way.\u003c/p\u003e\n\n\u003cp\u003eWhile it might feel silly to think this carefully about process, we can promise\nyou that students who have process don't get overwhelmed and give up before\nthey've even begun. Take this process seriously, and you'll find yourself\nvaccinated against \"getting started\" anxiety!\u003c/p\u003e\n\n\u003cp\u003eLet's learn to make masterpieces.\u003c/p\u003e","frontPage":false},{"exportId":"active-record-mechanics","title":"Active Record Mechanics","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-mechanics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-mechanics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-mechanics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-mechanics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Understand the connection between an ORM and Active Record\u003c/li\u003e\n\u003cli\u003e Understand why Active Record is useful\u003c/li\u003e\n\u003cli\u003e Develop a basic understanding of how to get started with Active Record\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eORM vs Active Record\u003c/h2\u003e\n\n\u003cp\u003eBy now you are familiar with the concept of an \u003ca href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\"\u003eORM\u003c/a\u003e, an Object-Relation\nMapper, and should have written something of your own in the \u003ccode\u003eStudent\u003c/code\u003e and\n\u003ccode\u003eInteractiveRecord\u003c/code\u003e classes. Our latest iteration was our most powerful yet,\nit could give us lots of functionality via inheritance.\u003c/p\u003e\n\n\u003cp\u003eWhile building your own ORM for a single \u003ccode\u003eClass\u003c/code\u003e is a great way to learn about\nhow object-oriented programming languages commonly interact with a database,\nimagine you had \u003cem\u003emany\u003c/em\u003e more classes. To test and maintain custom code for each\nproject we work on would distract our attention from making cool stuff to\nbuilding database connectivity. To save themselves and other developers this\nheadache, the \u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html\"\u003eActiveRecord\u003c/a\u003e Ruby gem team built the \u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html\"\u003eActiveRecord\u003c/a\u003e\ngem.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson we'll read about how to to have \u003ccode\u003eActiveRecord\u003c/code\u003e link our Ruby\nmodels with rows in a database table. We won't write the code yet, but we'll\nfamiliarize ourself with common code blocs used in \u003ccode\u003eActiveRecord\u003c/code\u003e-using\nprojects.\u003c/p\u003e\n\n\u003ch2\u003eActive Record ORM\u003c/h2\u003e\n\n\u003cp\u003eActive Record is a Ruby gem, meaning we get an entire library of code just by\nrunning \u003ccode\u003egem install activerecord\u003c/code\u003e or by including it in our \u003ccode\u003eGemfile\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eConnect to DB\u003c/h4\u003e\n\n\u003cp\u003eOnce our Gem environment knows to put \u003ccode\u003eActiveRecord\u003c/code\u003e into the picture, we need\nto tell \u003ccode\u003eActiveRecord\u003c/code\u003e where the database is located that it will be working\nwith.\u003c/p\u003e\n\n\u003cp\u003eWe do this by running \u003ccode\u003eActiveRecord::Base.establish_connection\u003c/code\u003e. Once\n\u003ccode\u003eestablish_connection\u003c/code\u003e is run, \u003ccode\u003eActiveRecord::Base\u003c/code\u003e keeps it stored as a class\nvariable at \u003ccode\u003eActiveRecord::Base.connection\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: If you'd like to type along in an IDE environment, you can experiment by using\nIRB with: \u003ccode\u003eirb -r active_record\u003c/code\u003e provided you've installed \u003ccode\u003eActiveRecord\u003c/code\u003e and \u003ccode\u003esqlite3\u003c/code\u003e with\n\u003ccode\u003egem install activerecord sqlite3\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003eActiveRecord::Base.establish_connection(\u003cbr\u003e  :adapter =\u0026gt; \"sqlite3\",\u003cbr\u003e  :database =\u0026gt; \"db/students.sqlite\"\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eCreate a table\u003c/h4\u003e\n\n\u003cp\u003eBut our database is empty. Let's create a table to hold students.\u003c/p\u003e\n\n\u003cp\u003eLet's create our table using SQL:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \u0026lt;  CREATE TABLE IF NOT EXISTS students (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT\u003cbr\u003e  )\u003cbr\u003eSQL\u003cbr\u003e\u003cbr\u003e# Remember, the previous step has to run first so that `connection` is set!\u003cbr\u003eActiveRecord::Base.connection.execute(sql)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eLink a Student \"model\" to the database table \u003ccode\u003estudents\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eThe last step is to tell your Ruby class to make use of \u003ccode\u003eActiveRecord\u003c/code\u003e's\nbuilt-in ORM methods. With Active Record and other ORMs, this is managed\nthrough \u003ca href=\"http://rubylearning.com/satishtalim/ruby_inheritance.html\"\u003eClass Inheritance\u003c/a\u003e. We simply make \u003cem\u003eour\u003c/em\u003e class (\u003ccode\u003eStudent\u003c/code\u003e) a\nsubclass of \u003ccode\u003eActiveRecord::Base\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Student \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur \u003ccode\u003eStudent\u003c/code\u003e class is now our gateway for talking to the \u003ccode\u003estudents\u003c/code\u003e table in\nthe database. The \u003ccode\u003eStudent\u003c/code\u003e class has gained a whole bunch of \u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html#creating-active-record-models\"\u003enew\nmethods\u003c/a\u003e via its inheritance relationship to \u003ccode\u003eActiveRecord\u003c/code\u003e. Let's\nlook at a few of them\u003c/p\u003e\n\n\u003ch6\u003e\u003ccode\u003e.column_names\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eRetrieve a list of all the columns in the table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStudent.column_names\u003cbr\u003e#=\u0026gt; [:id, :name]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003e.create\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eCreate a new \u003ccode\u003eStudent\u003c/code\u003e entry in the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStudent.create(name: 'Jon')\u003cbr\u003e# INSERT INTO students (name) VALUES ('Jon')\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003e.find\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eRetrieve a \u003ccode\u003eStudent\u003c/code\u003e from the database by \u003ccode\u003eid\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStudent.find(1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003e.find_by\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eFind by any attribute, such as \u003ccode\u003ename\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStudent.find_by(name: 'Jon')\u003cbr\u003e# SELECT * FROM students WHERE (name = 'Jon') LIMIT 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003eattr_accessors\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eYou can get or set attributes of an instance of \u003ccode\u003eStudent\u003c/code\u003e once you've retrieved\nit:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudent = Student.find_by(name: 'Jon')\u003cbr\u003estudent.name\u003cbr\u003e#=\u0026gt; 'Jon'\u003cbr\u003e\u003cbr\u003estudent.name = 'Steve'\u003cbr\u003e\u003cbr\u003estudent.name\u003cbr\u003e#=\u0026gt; 'Steve'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch6\u003e\u003ccode\u003e#save\u003c/code\u003e\u003c/h6\u003e\n\n\u003cp\u003eAnd then save those changes to the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estudent = Student.find_by(name: 'Jon')\u003cbr\u003estudent.name = 'Steve'\u003cbr\u003estudent.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that our \u003ccode\u003eStudent\u003c/code\u003e class doesn't have any methods defined for \u003ccode\u003e#name\u003c/code\u003e\neither. Nor does it make use of Ruby's built-in \u003ccode\u003eattr_accessor\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Student \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eYou've now seen how \u003ccode\u003eActiveRecord\u003c/code\u003e creates a link between Ruby and databases.\u003c/p\u003e","frontPage":false},{"exportId":"variables","title":"Variables","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"variable-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/variable-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/variable-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/variable-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a variable.\u003c/li\u003e\n\u003cli\u003eCreate and reassign variables.\u003c/li\u003e\n\u003cli\u003eDefine pass-by-value as it relates to variables.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eVideo\u003c/h2\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ieYmBf67u7A\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003e\u003ca href=\"http://learn-co-videos.s3.amazonaws.com/ruby/about-variables-ruby.mp4\"\u003eDownload MP4\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThis video is meant as optional supplemental material to augment the written curriculum. If you feel you already understand variables, you are welcome to skip the video and continue forward. Feel free to come back here if you ever want a review.\u003c/p\u003e\n\n\u003cp\u003eIf you would like to code along you can use: \u003ca href=\"https://repl.it/\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eVariables in Ruby\u003c/h2\u003e\n\n\u003cp\u003eLet's dive right in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efirst_number = 7\u003cbr\u003esecond_number = 14\u003cbr\u003e\u003cbr\u003esum = first_number + second_number\u003cbr\u003e\u003cbr\u003eputs sum\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe code above will print '21'.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrent_president = \"Barack Obama\"\u003cbr\u003eputs \"In 2016, the president was #{current_president}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code will print \u003ccode\u003eIn 2016, the president was Barack Obama.\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The syntax of \u003ccode\u003e#{current_president}\u003c/code\u003e simply injects the value of the\nvariable \u003ccode\u003ecurrent_president\u003c/code\u003e into the string. This is called \u003ca href=\"http://stackoverflow.com/questions/10076579/string-concatenation-vs-interpolation-in-ruby\"\u003eInterpolation\u003c/a\u003e\nand we'll cover it later -- in this case, you can think of it as \u003ccode\u003e\"In 2016,\nthe president was \" + current_president + \".\"\u003c/code\u003e where you are simply adding\ntogether multiple strings.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode\u003efirst_number\u003c/code\u003e, \u003ccode\u003esecond_number\u003c/code\u003e, \u003ccode\u003esum\u003c/code\u003e, and \u003ccode\u003ecurrent_president\u003c/code\u003e are all \u003cstrong\u003evariables\u003c/strong\u003e.  Much like in math, variables are words or characters that hold values. In algebra, however, variables are only placeholders for numbers. In Ruby, a variable can point to almost any type of value including numbers, strings, arrays, and hashes.\u003c/p\u003e\n\n\u003ch2\u003eWhat is a Variable\u003c/h2\u003e\n\n\u003cp\u003eAs the examples above show, variables allow us to store information. We tell our computer to set aside some space to hold that information so we can retrieve it later. A variable is the location where the information resides, when we need it we know just where to look.\u003c/p\u003e\n\n\u003ch4\u003eA Variable has a Name\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003ei\u003cbr\u003eresult\u003cbr\u003euser1\u003cbr\u003ebrkfstCereal\u003cbr\u003eall_words_in_the_dictionary\u003cbr\u003eCountryOfOrigin\u003cbr\u003eFIRST_NAME\u003cbr\u003eage\u003cbr\u003elongest_word\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese would all be valid variable names in Ruby. They would not all be good variable names. There is strong convention among Rubyists to use what is known as \u003cem\u003esnake case\u003c/em\u003e \u003ccode\u003ethis_is_an_example_of_snake_case\u003c/code\u003e words are separated by underscores.  This is opposed to \u003cem\u003ecamel case\u003c/em\u003e\n\u003ccode\u003ethisIsAnExampleOfCamelCase\u003c/code\u003e where upcased characters indicate word breaks.\u003c/p\u003e\n\n\u003cp\u003eVariable names should start with a lowercase letter. A variable that begins with an uppercase letter is known as a \u003cstrong\u003econstant\u003c/strong\u003e and has different characteristics.\u003c/p\u003e\n\n\u003cp\u003eThere are also some rules that mark invalid variable names:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# X Invalid X\u003cbr\u003e1st_place\u003cbr\u003eend\u003cbr\u003edanny's_age   \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA Ruby variable cannot start with a number, be a Ruby reserved word, or have punctuation or space characters.\u003c/p\u003e\n\n\u003ch4\u003eA Variable has a Value\u003c/h4\u003e\n\n\u003cp\u003eA variable's name is like a label on a container. Its value is what is stored inside that container. The name points to the value. Above, \u003ccode\u003ecurrent_president\u003c/code\u003e holds onto the value \"Barack Obama\" and \u003ccode\u003efirst_number\u003c/code\u003e has the value of the number 7. As we will see, the value of a variable can change even when its name stays the same.\u003c/p\u003e\n\n\u003ch4\u003eA Variable has a Type\u003c/h4\u003e\n\n\u003cp\u003eA variable's type is the type of the value it holds. Ruby is what is known as a \u003cem\u003edynamically typed\u003c/em\u003e language. That means the value of a variable can change its type and does not need to be explicitly and permanently defined. There is nothing stopping you from changing the value of \u003ccode\u003esum\u003c/code\u003e, which now is the number 21, to the string \"whatever I want\". \u003c/p\u003e\n\n\u003cp\u003eIt is also a \u003cem\u003estrongly typed\u003c/em\u003e language. This means a variable will never be automatically \u003cem\u003ecoerced\u003c/em\u003e to another type without you explicitly changing the type. Adding two numbers will return a number, 2 + 2 returns 4; adding two strings will return a string, \"2\" + \"2\" returns \"22\"; adding a number and a string will raise an error, 2 + \"2\" raises a \u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen you are building larger programs it is important to have in mind the type of the value that a variable refers to.\u003c/p\u003e\n\n\u003ch2\u003eCreating Variables\u003c/h2\u003e\n\n\u003cp\u003eVariables are assigned values using \u003ccode\u003e=\u003c/code\u003e (\"equal sign\"), called the assignment operator.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrent_president = \"Barack Obama\"\u003cbr\u003eputs \"In 2016, the president was #{current_president}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eReassigning Variables\u003c/h2\u003e\n\n\u003cp\u003eNow the variable \u003ccode\u003ecurrent_president\u003c/code\u003e is equal to the string Barack Obama. Let's say somehow Stephen Colbert got elected as president in the 2016 election. To update \u003ccode\u003ecurrent_president\u003c/code\u003e, you would just reassign the variable much in the same way that you first defined it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurrent_president = \"Barack Obama\"\u003cbr\u003eputs \"In 2016, the president was #{current_president}.\"\u003cbr\u003e\u003cbr\u003ecurrent_president = \"Stephen Colbert\"\u003cbr\u003eputs \"Now, it being the year 2017, the president is #{current_president}.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will print out:  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eIn 2016, the president was Barack Obama.\u003cbr\u003eNow, it being the year 2017, the president is Stephen Colbert.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eVariable Example\u003c/h2\u003e\n\n\u003cp\u003eWithin this repository is a file named \u003ccode\u003evariables.rb\u003c/code\u003e with some examples you can read and play with. \u003ca href=\"https://github.com/learn-co-curriculum/variable-readme/archive/1.0.0.zip\"\u003eDownload the Source Files\u003c/a\u003e for this lesson to see how it behaves.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e'This is data, it is a string. Strings start and end with  \" '\u003cbr\u003e\u003cbr\u003e\"Part of being data, or a string, is that ruby doesn't interpret it.\"\u003cbr\u003e\u003cbr\u003eputs 1+1\u003cbr\u003eputs \"1+1\"\u003cbr\u003e\u003cbr\u003eexample = \"The word 'example' is equal to this sentence, it's a named variable.\"\u003cbr\u003e\u003cbr\u003eputs example\u003cbr\u003eputs example\u003cbr\u003eputs example\u003cbr\u003e\u003cbr\u003eputs \"variables are any previously undefined word that\"\u003cbr\u003eputs \"starts with a lowercase letter.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning this file will print:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2\u003cbr\u003e1+1\u003cbr\u003eThe word 'example' is equal to this sentence, it's a named variable.\u003cbr\u003eThe word 'example' is equal to this sentence, it's a named variable.\u003cbr\u003eThe word 'example' is equal to this sentence, it's a named variable.\u003cbr\u003evariables are any previously undefined word that\u003cbr\u003estarts with a lowercase letter.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eBonus: 'Pass-By-Value'\u003c/h2\u003e\n\n\u003cp\u003eWe have seen that the variable itself, the location where information is stored, is distinct from the value stored at that location. Let's try something out to demonstrate this. We'll first declare a new variable with an original value, then do something to change that value, and finally we'll take a peek at our variable again.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Open up IRB and follow along\u003cbr\u003esound = \"squeak\"\u003cbr\u003e\u003cbr\u003e# We can peek at the value of sound by typing its name\u003cbr\u003esound\u003cbr\u003e# =\u0026gt; \"squeak\"\u003cbr\u003e\u003cbr\u003esound.upcase\u003cbr\u003e# =\u0026gt; \"SQUEAK\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, the moment of suspense has arrived! Now if we type \u003ccode\u003esound\u003c/code\u003e again what do you think its value will be?\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esound\u003cbr\u003e# =\u0026gt; \"squeak\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHmmm... \u003ccode\u003esound\u003c/code\u003e is still pointing to the original lowercased value. What does this tell us? When \u003ccode\u003eupcase\u003c/code\u003e did its thing to the variable, what MUST \u003ccode\u003esound\u003c/code\u003e have handed over to \u003ccode\u003eupcase\u003c/code\u003e for us to see this result?\u003c/p\u003e\n\n\u003cp\u003eOnly its \u003cem\u003evalue\u003c/em\u003e. In fact it must have made a \u003cem\u003ecopy of that value\u003c/em\u003e that \u003ccode\u003eupcase\u003c/code\u003e could operate on while still holding onto the original unaltered value. If this process did not happen the value 'squeak' wouldn't exist for us to look up and we'd only be able to see 'SQUEAK'.\u003c/p\u003e\n\n\u003cp\u003eThis is what we mean by pass-by-value. A variable makes a copy of the value it holds and passes the copy over to something else that alters or changes it. The alternative process is known as pass-by-reference. Here, changes to a variable would alter what is stored in the actual location it refers to. After the process was complete the variable would be holding a new and different value.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://zetcode.com/lang/rubytutorial/variables/\"\u003eZetCode Ruby Variables\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Variables_and_Constants\"\u003eWikibooks: Ruby Programming/Syntax/Variables and Constants\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"sql-select-and-update","title":"SQL Select and Update","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-select-and-update\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-select-and-update/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-select-and-update\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-select-and-update/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll cover different ways to manipulate and select data from\nSQL database tables.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003eINSERT INTO\u003c/code\u003e command to insert data (i.e. rows) into a database\ntable\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eSELECT\u003c/code\u003e statements to select data from a database table\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eWHERE\u003c/code\u003e clause to select data from specific table rows\u003c/li\u003e\n\u003cli\u003eUse comparison operators, like \u003ccode\u003e\u0026lt;\u003c/code\u003e or \u003ccode\u003e\u0026gt;\u003c/code\u003e, to select specific data\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eUPDATE\u003c/code\u003e statements to update data within a database table\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eDELETE\u003c/code\u003e statements to delete data from a database table\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eSetting Up Our Database\u003c/h2\u003e\n\n\u003cp\u003eIn this code along, we'll be creating a \u003ccode\u003ecats\u003c/code\u003e table in a \u003ccode\u003epets_database.db\u003c/code\u003e.\nSo, let's navigate to our terminal and get started.\u003c/p\u003e\n\n\u003cp\u003eFirst let's create our \u003ccode\u003epets_database\u003c/code\u003e by running the following the command in\nthe terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have a database, let's create our \u003ccode\u003ecats\u003c/code\u003e table along with \u003ccode\u003eid\u003c/code\u003e,\n\u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eage\u003c/code\u003e and \u003ccode\u003ebreed\u003c/code\u003e columns.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE cats (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  breed TEXT\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, let's start storing some cats.\u003c/p\u003e\n\n\u003ch3\u003eCode Along I: INSERT INTO\u003c/h3\u003e\n\n\u003cp\u003eIn your terminal, in the sqlite prompt, type the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO cats (name, age, breed) VALUES ('Maru', 3, 'Scottish Fold');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe use the \u003ccode\u003eINSERT INTO\u003c/code\u003e command, followed by the name of the table to which we\nwant to add data. Then, in parentheses, we put the column names that we will be\nfilling with data. This is followed by the \u003ccode\u003eVALUES\u003c/code\u003e keyword, which is\naccompanied by a parentheses enclosed list of the values that correspond to each\ncolumn name.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e Note that we \u003cem\u003edidn't specify\u003c/em\u003e the \"id\" column name or value.\nSince we created the \u003ccode\u003ecats\u003c/code\u003e table with an \"id\" column whose type is \u003ccode\u003eINTEGER\nPRIMARY KEY\u003c/code\u003e, we don't have to specify the id column values when we insert data.\nPrimary Key columns are auto-incrementing. As long as you have defined an id\ncolumn with a data type of \u003ccode\u003eINTEGER PRIMARY KEY\u003c/code\u003e, a newly inserted row's id\ncolumn will be automatically given the correct value.\u003c/p\u003e\n\n\u003cp\u003eLet's add a few more cats to our table. This time we'll do this via our text\neditor. Create a file, \u003ccode\u003e01_insert_cats_into_cats_table.sql\u003c/code\u003e. Use two \u003ccode\u003eINSERT\nINTO\u003c/code\u003e statements to insert the following cats into the table:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003ename\u003c/th\u003e\n    \u003cth\u003eage\u003c/th\u003e\n    \u003cth\u003ebreed\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\"Lil' Bub\"\u003c/td\u003e\n    \u003ctd\u003e5\u003c/td\u003e\n    \u003ctd\u003e\"American Shorthair\"\u003c/td\u003e\n  \u003c/tr\u003e  \n  \u003ctr\u003e\n    \u003ctd\u003e\"Hannah\"\u003c/td\u003e\n    \u003ctd\u003e1\u003c/td\u003e\n    \u003ctd\u003e\"Tabby\"\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eEach \u003ccode\u003eINSERT INTO\u003c/code\u003e statement gets its own line in the \u003ccode\u003e.sql\u003c/code\u003e file in your text\neditor. Each line needs to end with a \u003ccode\u003e;\u003c/code\u003e. Run the file with the following code\nin your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esqlite3 pets_database.db \u0026lt; 01_insert_cats_into_cats_table.sql\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e This command should be run from your terminal prompt, not in the\n\u003ccode\u003esqlite\u003c/code\u003e console.\u003c/p\u003e\n\n\u003cp\u003eNow, we'll learn how to \u003ccode\u003eSELECT\u003c/code\u003e data from a table, which will help us to\nconfirm that we inserted the above data correctly.\u003c/p\u003e\n\n\u003ch2\u003eSelecting Data\u003c/h2\u003e\n\n\u003cp\u003eNow that we've inserted some data into our \u003ccode\u003ecats\u003c/code\u003e table, we likely want to read\nthat data. This is where the \u003ccode\u003eSELECT\u003c/code\u003e statement comes in. We use it to retrieve\ndatabase data, or rows.\u003c/p\u003e\n\n\u003ch3\u003eCode Along II: SELECT FROM\u003c/h3\u003e\n\n\u003cp\u003eA basic \u003ccode\u003eSELECT\u003c/code\u003e statement works like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT [names of columns we are going to select] FROM [table we are selecting from];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe specify the names of the columns we want to SELECT and then tell SQL the\ntable we want to select them FROM.\u003c/p\u003e\n\n\u003cp\u003eWe want to select all the rows in our table, and we want to return the data\nstored in any and all columns in those rows. To do this, we could pass the name\nof each column explicitly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT id, name, age, breed FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich should give us back:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1|Maru|3|Scottish Fold\u003cbr\u003e2|Lil' Bub|5|American Shorthair\u003cbr\u003e3|Hannah|1|Tabby\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA faster way to get data from every column in our table is to use a special\nselector, known commonly as the 'wildcard' selector \u003ccode\u003e*\u003c/code\u003e. The \u003ccode\u003e*\u003c/code\u003e selector means:\n\"Give me all the data from all the columns for all of the cats\" Using the\nwildcard, we can \u003ccode\u003eSELECT\u003c/code\u003e all the data from all of the columns in the cats table\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's try out some more specific \u003ccode\u003eSELECT\u003c/code\u003e statements:\u003c/p\u003e\n\n\u003ch4\u003eSelecting by Column Names\u003c/h4\u003e\n\n\u003cp\u003eTo select just certain columns from a table, use the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT name FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat should return the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMaru\u003cbr\u003eLil' Bub\u003cbr\u003eHannah\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can even select more than one column name at a time. For example, try out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT name, age FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e If you have duplicate data (for example, two cats with the same\nname) and you only want to select unique values, you can use the \u003ccode\u003eDISTINCT\u003c/code\u003e\nkeyword. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT DISTINCT name FROM cats;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eSelecting Based on Conditions: The \u003ccode\u003eWHERE\u003c/code\u003e Clause\u003c/h4\u003e\n\n\u003cp\u003eWhat happens when we want to retrieve a specific table row? For example the row\nthat belongs to Maru? Or to retrieve all the baby cats who are younger than two\nyears old? We can use the \u003ccode\u003eWHERE\u003c/code\u003e keyword to select data based on specific\nconditions. Here's an example of a boilerplate \u003ccode\u003eSELECT\u003c/code\u003e statement using a\n\u003ccode\u003eWHERE\u003c/code\u003e clause.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM [table name] WHERE [column name] = [some value];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's retrieve \u003cem\u003ejust Maru\u003c/em\u003e from our \u003ccode\u003ecats\u003c/code\u003e table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE name = \"Maru\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat statement should return the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1|Maru|3|Scottish Fold\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also use comparison operators, like \u003ccode\u003e\u0026lt;\u003c/code\u003e or \u003ccode\u003e\u0026gt;\u003c/code\u003e to select specific data.\nLet's give it a shot. Use the following statement to select the young cats:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM cats WHERE age \u0026lt; 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e The SQL statements we're learning here will eventually be used to\nintegrate the applications you'll build with a database. For example, it's easy\nto imagine a web application that has many users. When a user signs into your\napp, you'll need to access your database and select the user that matches the\ncredentials an individual is using to log in.\u003c/p\u003e\n\n\u003ch2\u003eUpdating Data\u003c/h2\u003e\n\n\u003cp\u003eLet's talk about updating, or changing, data in our table rows. We do this with\nthe \u003ccode\u003eUPDATE\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch3\u003eCode Along III: UPDATE\u003c/h3\u003e\n\n\u003cp\u003eA boilerplate \u003ccode\u003eUPDATE\u003c/code\u003e statement looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUPDATE [table name] SET [column name] = [new value] WHERE [column name] = [value];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eUPDATE\u003c/code\u003e statement uses a \u003ccode\u003eWHERE\u003c/code\u003e clause to grab the row you want to update.\nIt identifies the table name you are looking in and resets the data in a\nparticular column to a new value.\u003c/p\u003e\n\n\u003cp\u003eLet's update one of our cats. Turns out Maru's friend Hannah is actually Maru's\nfriend \u003cem\u003eHana\u003c/em\u003e. Let's update that row to change the name to the correct spelling:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUPDATE cats SET name = \"Hana\" WHERE name = \"Hannah\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOne last thing before we move on: deleting table rows.\u003c/p\u003e\n\n\u003ch2\u003eDeleting Data\u003c/h2\u003e\n\n\u003cp\u003eTo delete table rows, we use the \u003ccode\u003eDELETE\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch3\u003eCode Along IV: DELETE\u003c/h3\u003e\n\n\u003cp\u003eA boilerplate \u003ccode\u003eDELETE\u003c/code\u003e statement looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDELETE FROM [table name] WHERE [column name] = [value];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's go ahead and delete Hana from our \u003ccode\u003ecats\u003c/code\u003e table (it turns out Hana is\nactually an iguana):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDELETE FROM cats WHERE id = 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that this time we selected the row to delete using the Primary Key\ncolumn. Remember that every table row has a Primary Key column that is unique.\nHana was the third row in the database and thus had an id of \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"video-object-orientation-review-and-scraping","title":"Video: Object-Orientation Review and Scraping","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oo-ruby-video-review-object-orientation-and-scraping\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-orientation-and-scraping/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-orientation-and-scraping\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oo-ruby-video-review-object-orientation-and-scraping/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this two part video review, we'll cover the history of Object Orientation, a basic overview of writing tests, and creating objects from data that we've scraped. In this walkthrough, we'll work with data that we've scraped from Wikipedia. \u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain Esdger Dijkstra's influence on programming\u003c/li\u003e\n\u003cli\u003eWrite tests that describe our objects\u003c/li\u003e\n\u003cli\u003eDefine Hook, class getter and constructor method for our class\u003c/li\u003e\n\u003cli\u003eDefine a class constructor method to scrape from a data source and return a hash of properties\u003c/li\u003e\n\u003cli\u003eDynamically assign attributes for our instance using the \u003ccode\u003esend\u003c/code\u003e method\u003c/li\u003e\n\u003cli\u003eUse the tap method to fix 'sandwich code' and dynamically assign properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/LcVasuO5uKA?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe width=\"100%\" height=\"720\" src=\"https://www.youtube.com/embed/oXwdOdBUyCI?rel=0\u0026amp;showinfo=0\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e","frontPage":false},{"exportId":"object-relationship-basics","title":"Object Relationship Basics","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've mainly worked with classes that do not play well with other custom classes. In other words, we've defined classes that create objects that do not interact with other objects that we've created. Instead, they have methods that allow them to operate on themselves, or operate with some of the built-in Ruby classes. For example, a \u003ccode\u003eDog\u003c/code\u003e class might have methods that describe an individual dog's attributes and behaviors. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  attr_reader :name, :size, :temperament\u003cbr\u003e  def initialize(name, size, temperament)\u003cbr\u003e    @name = name\u003cbr\u003e    @size = size\u003cbr\u003e    @temperament = temperament\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def bark\u003cbr\u003e    if quiet?\u003cbr\u003e      puts \"#{name}, the #{size} dog, says rf\"\u003cbr\u003e    else\u003cbr\u003e      puts \"#{name}, the #{size} dog, says RUFF!\"\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def quiet?\u003cbr\u003e    temperament == 'quiet'\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have a class that changes the way a dog barks based on its\ntemperament. This object isn't capable of interacting with any other dog object\nthough.\u003c/p\u003e\n\n\u003cp\u003eIn object-oriented programming, however, we write programs that reflect real-world situations and environments. In the real world, different entities are related to one another and interact with one another in various ways. Luckily for us, individual objects in object-oriented Ruby can interact with one another in ways that reflect that real-world relatedness. In fact, it's hard to imagine an application without some degree of interaction, or association, between your classes, or models. \u003c/p\u003e\n\n\u003cp\u003eHere are just a few examples:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYour users sign in to your app and \"friend\" other users. All of a sudden, users are associated through friendship.\u003c/li\u003e\n\u003cli\u003eYour app connects users to animal shelters through which they can adopt pets. Users are associated to shelters and to pets. At the same time shelters are associated to pets.\u003c/li\u003e\n\u003cli\u003eYour app allows users to aggregate their most recent tweets and those of their friends and followers. In this example, users are associated to tweets and users might even be associated to each other.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese are just a few examples of the sorts of domain models you will soon develop, almost all of which will involve object relations––the idea that instances of your classes (also referred to as models in such a situation) can interact with each other and be associated with one another.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we'll be taking a look at one of the most basic ways that two classes, or models, can be related to one another: the \"belongs to\" relationship. \u003c/p\u003e\n\n\u003ch2\u003eThe \"Belongs To\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eImagine we are creating an app that allows users to list and interact with their music library. We're used to writing single classes to represent single concepts in our program. In this application, it makes sense for us to have a class to represent an individual song. Our \u003ccode\u003eSong\u003c/code\u003e class might look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :title\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can create a new song like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling = Song.new(\"Hotline Bling\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we can return its title to us like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.title\u003cbr\u003e  # =\u0026gt; \"Hotline Bling\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs far as modeling our program on the real world however, this isn't very realistic. Songs have many more attributes than just a title. The most important of which, from a user's point of view at least, is the song's artist. In the real world, a song belongs to an artist and an artist owns the many songs he or she has created. How can we model this relationship through our code? Let's give individual songs an artist attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e\u003cbr\u003e  attr_accessor :title, :artist\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have a setter and getter for a song's artist attribute, we can do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist = \"Drake\"\u003cbr\u003ehotline_bling.artist\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that a song can have an artist, we might be wondering what other attributes might be related to songs and artists in this domain model. \u003c/p\u003e\n\n\u003cp\u003eFor example, users of our music app might want to know some more info about an individual artist. What albums has Drake created, for example? What about the genre of Drake's work?\u003c/p\u003e\n\n\u003cp\u003eLet's ask him:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist.genre\u003cbr\u003e  NoMethodError: undefined method `genre' for \"Drake\":String\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh! Looks like the string, \u003ccode\u003e\"Drake\"\u003c/code\u003e, that we assigned this song's \u003ccode\u003eartist\u003c/code\u003e attribute equal to, doesn't (shockingly) have a \u003ccode\u003e#genre\u003c/code\u003e method. The relationship model that we have set up is incomplete. An individual song does have an artist attribute, but instead of setting it equal to a complex object, such as an instance of some kind of \u003ccode\u003eArtist\u003c/code\u003e class that we can get more information from, we've set it equal to a simple string. A string can't tell us what genre of music it makes, how many albums it has created or anything else necessary to modeling our music app. This makes sense. The developer of Ruby can only make building blocks. They can only create general purpose blocks that we compose into great creations. \u003c/p\u003e\n\n\u003cp\u003eSo, instead of setting the \u003ccode\u003e#artist=()\u003c/code\u003e method equal to a string of an artist's name, let's create an \u003ccode\u003eArtist\u003c/code\u003e class and assign an individual song's artist attribute equal to an instance of that class. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  attr_accessor :name, :genre\u003cbr\u003e\u003cbr\u003e  def initialize(name, genre) \u003cbr\u003e    @name = name\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edrake = Artist.new(\"Drake\", \"rap\")\u003cbr\u003ehotline_bling = Song.new(\"Hotline Bling\")\u003cbr\u003e\u003cbr\u003ehotline_bling.artist = drake\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eJust like we were able to set the artist attribute equal to the string, \u003ccode\u003e\"Drake\"\u003c/code\u003e, we can set the attribute equal to an instance of the \u003ccode\u003eArtist\u003c/code\u003e class, stored in the \u003ccode\u003edrake\u003c/code\u003e local variable. \u003c/p\u003e\n\n\u003cp\u003eNow we can ask for the genre of the artist of \u003ccode\u003ehotline_bling\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist.genre\u003cbr\u003e  # =\u0026gt; \"rap\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd the name of the artist of \u003ccode\u003ehotline_bling\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehotline_bling.artist.name\u003cbr\u003e  # =\u0026gt; \"Drake\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our relationship between songs and their artists is complete. \u003cstrong\u003eThis is called the \"belongs to\" relationship\u003c/strong\u003e. A song can only have one artist (at least in our domain model), so we say that a song \"belongs to\" an artist. We enact this relationship by giving songs a setter and a getter method for their artist. There is nothing that requires that the artist attribute be filled with an instance of the \u003ccode\u003eArtist\u003c/code\u003e class. This is an internal contract that you must keep. As the developer you must make sure that you only put \u003ccode\u003eArtist\u003c/code\u003e instances in there!\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-advanced-class-methods","title":"Introduction to Advanced Class Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-advanced-class-methods-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've learned about building complex class objects, the \u003ccode\u003eself\u003c/code\u003e keyword, and class\nvariables and methods. We'll continue to expand on building out classes by\nintroducing these concepts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuilding custom class constructors\u003c/li\u003e\n\u003cli\u003eBuilding class finders\u003c/li\u003e\n\u003cli\u003eBuild class operators\u003c/li\u003e\n\u003cli\u003eImplementing a class method which creates instances of its own class\u003c/li\u003e\n\u003cli\u003eUsing class variables to keep track of data pertaining to a class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this section, we'll be focusing on building out more complex object-oriented\nRuby programs that combine the concepts we've discussed thus far.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-table-relations-in-sql","title":"Introduction to Table Relations in SQL","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-introduction/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eKnowing at least the basics of writing SQL is a useful programming skill. The\nmajority of databases you'll work with as a developer will have more than one\ntable, and those tables will be connected together in various ways to form table\nrelationships.\u003c/p\u003e\n\n\u003cp\u003eIn this section we'll cover:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe structure of a relational database as tables\u003c/li\u003e\n\u003cli\u003ePrimary key and foreign keys\u003c/li\u003e\n\u003cli\u003eHow to associate data tables using a foreign key column\u003c/li\u003e\n\u003cli\u003eHow to model a \"many-to-many\" object association\u003c/li\u003e\n\u003cli\u003eHow a join table is used\u003c/li\u003e\n\u003cli\u003eDistinguishing the different types of relationships between data in a database\u003c/li\u003e\n\u003cli\u003eDifferent types of joins\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOver the next several lessons we'll discuss having multiple tables in a\ndatabase, how to define relationships between different tables, and explain the\ndifferent types of table relationships that can exist.\u003c/p\u003e","frontPage":false}],"assignments":[{"exportId":"geba19bf289e0877187d1e9e6ca9a9976","title":"Active Record Association Methods","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-associations-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand the common methods we have access to from our Active Record\nassociations\u003c/li\u003e\n\u003cli\u003eUse the methods that Active Record gives you based on your associations\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePreviously, we learned what Active Record associations are and how to use them.\nIn this lab, we are going to start with the association relationships already\ncoded for \u003ccode\u003eSongs\u003c/code\u003e, \u003ccode\u003eGenres\u003c/code\u003e, and \u003ccode\u003eArtists\u003c/code\u003e. These associations look like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eArtists have many songs and a song belongs to an artist.\u003c/li\u003e\n\u003cli\u003eArtists have many genres through songs.\u003c/li\u003e\n\u003cli\u003eSongs belong to a genre.\u003c/li\u003e\n\u003cli\u003eA genre has many songs.\u003c/li\u003e\n\u003cli\u003eA genre has many artists through songs.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou may recall that by writing a few migrations and making use of the\nappropriate Active Record macros, we will be able to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eask an Artist about its songs and genres\u003c/li\u003e\n\u003cli\u003eask a Song about its genre and its artist\u003c/li\u003e\n\u003cli\u003eask a Genre about its songs and artists.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe will build these associations through the use of Active Record migrations and\nmacros.\u003c/p\u003e\n\n\u003ch3\u003eBuilding our Migrations\u003c/h3\u003e\n\n\u003cp\u003eYou can take a look at the migration, if you need a reminder of the tables'\nstructures. Run \u003ccode\u003erake db:migrate\u003c/code\u003e in your terminal to execute our table\ncreations.\u003c/p\u003e\n\n\u003ch3\u003eBuilding our Associations using AR Macros\u003c/h3\u003e\n\n\u003cp\u003eWe used the following AR macros (or methods): \u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-association\"\u003e\u003ccode\u003ehas_many\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association\"\u003e\u003ccode\u003ehas_many\nthrough\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association\"\u003e\u003ccode\u003ebelongs_to\u003c/code\u003e\u003c/a\u003e. They helped us associate \u003ccode\u003esongs\u003c/code\u003e, \u003ccode\u003egenres\u003c/code\u003e, and\n\u003ccode\u003eartists\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song \u0026lt; Active Record::Base\u003cbr\u003e  belongs_to :artist\u003cbr\u003e  belongs_to :genre\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist \u0026lt; Active Record::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e  has_many :genres, through: :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Genre \u0026lt; Active Record::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e  has_many :artists, through: :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd that's it! With this relatively small amount of code, we now have access to\na whole host of methods provided by Active Record.\u003c/p\u003e\n\n\u003ch2\u003eAssociation Methods\u003c/h2\u003e\n\n\u003cp\u003eGo ahead and run the test suite and you'll see that we are passing the first 14\ntests. Our associations are all working, just because of our migrations and use\nof macros.\u003c/p\u003e\n\n\u003cp\u003eWe can now call methods on the objects we associated with one another. Let's\nplay around with our code using the console task we wrote for you in the\nRakefile.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake console\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003ehello = Song.create(name: \"Hello\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eadele = Artist.create(name: \"Adele\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, we know that an individual song has an \u003ccode\u003eartist_id\u003c/code\u003e attribute. We \u003cem\u003ecould\u003c/em\u003e\nassociate \u003ccode\u003ehello\u003c/code\u003e to \u003ccode\u003eadele\u003c/code\u003e by setting \u003ccode\u003ehello.artist_id=\u003c/code\u003e equal to the \u003ccode\u003eid\u003c/code\u003e of\nthe \u003ccode\u003eadele\u003c/code\u003e object. BUT! Active Record makes it so easy for us. The macros we\nimplemented in our classes allow us to associate a song object directly to an\nartist object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.artist = adele\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we can ask \u003ccode\u003ehello\u003c/code\u003e who its artist is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can even chain methods to ask \u003ccode\u003ehello\u003c/code\u003e for the \u003cem\u003ename\u003c/em\u003e of its artist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello.artist.name\u003cbr\u003e=\u0026gt; \"Adele\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can tell the artist about their song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erolling_in_the_deep = Song.create(name: \"Rolling in the Deep\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eadele.songs \u0026lt;\u0026lt; rolling_in_the_deep\u003cbr\u003e=\u0026gt; #[  ]\u003cbr\u003e\u003cbr\u003erolling_in_the_deep.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eStarting the Lab\u003c/h2\u003e\n\n\u003cp\u003eBe sure to run \u003ccode\u003erake db:migrate\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWe are going to write some methods of our own. We want to take advantage of our\nnew methods, thanks to the Active Record macros. Therefore, every method we write\nwill use some code that was generated by a macro. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  def get_first_song\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow would you write the \u003ccode\u003e#get_first_song\u003c/code\u003e method so that it returns the first\n\u003ccode\u003esong\u003c/code\u003e object saved to the artist it's called on? By using the macros! Just like\nabove when we called \u003ccode\u003eadele.songs\u003c/code\u003e, we now want to call \u003ccode\u003esongs\u003c/code\u003e on the instance\nthat the method will be called on in the future. How do we do that? Yes, \u003ccode\u003eself\u003c/code\u003e!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  def get_first_song\u003cbr\u003e    self.songs\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will return an array of the artist's songs. Since our method is\nspecifically looking for the first song, we just have to chain on a \u003ccode\u003efirst\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  def get_first_song\u003cbr\u003e    self.songs.first\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'll do a handful of methods like this one for the \u003ccode\u003eSong\u003c/code\u003e, \u003ccode\u003eArtist\u003c/code\u003e, and\n\u003ccode\u003eGenre\u003c/code\u003e classes. This lab is test-driven, so follow the specs and read the test\nerror messages for additional information.\u003c/p\u003e\n\n\u003cp\u003eThe below methods are defined in the \u003ccode\u003eartist.rb\u003c/code\u003e, \u003ccode\u003egenre.rb\u003c/code\u003e and \u003ccode\u003esong.rb\u003c/code\u003e\nwithin \u003ccode\u003eapp/models\u003c/code\u003e, but are all currently empty. Write implementations for each\nusing ActiveRecord methods.\u003c/p\u003e\n\n\u003ch3\u003eArtist Methods\u003c/h3\u003e\n\n\u003ch4\u003e\u003ccode\u003e#get_genre_of_first_song\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturns the genre of the artist's first saved song (maybe the \u003ccode\u003e#get_first_song\u003c/code\u003e method can be used here?)\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#song_count\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the total number of songs associated with the artist\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#genre_count\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the total number of genres associated with the artist\u003c/p\u003e\n\n\u003ch3\u003eGenre Methods\u003c/h3\u003e\n\n\u003ch4\u003e\u003ccode\u003e#song_count\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the total number of songs associated with the genre\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#artist_count\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the number of artists associated with the genre\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#all_artist_names\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn an array of strings containing every musician's name\u003c/p\u003e\n\n\u003ch3\u003eSong Methods\u003c/h3\u003e\n\n\u003ch4\u003e\u003ccode\u003e#get_genre_name\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eReturn the name of the genre this song belongs to\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#drake_made_this\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eFor the final method in this lab, rather than return a specific value or set of\nvalues like the previous labs, your task is to create an association between\na song and an artist. In this case, we'll use one artist for simplicity - Drake.\u003c/p\u003e\n\n\u003cp\u003eWhen this method is called, it should assign the song's artist to Drake.\nDrake doesn't exist in the database as an artist yet, so you'll have to\ncreate a record. However, if this method is run multiple times, you won't want\nto create a new record \u003cem\u003eeach time\u003c/em\u003e. Rather, you only want to create a record\nif Drake is not found in the database already. Once found or created, assign\nthis song to the drake Artist instance.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8d4ab2add4e072af5798b5649eb66adf","title":"Active Record CRUD Operations Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-crud-operations-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-crud-operations-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-crud-operations-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-crud-operations-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003cp\u003eThe goal of this lab is to get comfortable performing CRUD (Create, Read,\nUpdate, Delete) actions using Active Record.\u003c/p\u003e\n\n\u003cp\u003eThere are different ways to solve this lab so feel free to experiment!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eBefore starting this lab run \u003ccode\u003ebundle\u003c/code\u003e, to get the proper gem dependencies. If\nyour operating system is OSX El Capitan, and you have an issue installing\n\u003ccode\u003eEventMachine\u003c/code\u003e, first check to make sure Open SSL is installed by entering \u003ccode\u003ebrew install openssl\u003c/code\u003e in terminal. Once it's installed, enter \u003ccode\u003ebrew link openssl --force\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlso enter \u003ccode\u003erake -T\u003c/code\u003e, which will list all of the rake tasks you have available\nin this lab. These tasks come with the \u003ccode\u003esinatra-activerecord\u003c/code\u003e gem.\u003c/p\u003e\n\n\u003cp\u003eStart the lab by running \u003ccode\u003elearn test\u003c/code\u003e or keep reading for more instructions.\u003c/p\u003e\n\n\u003ch3\u003eCreate Table\u003c/h3\u003e\n\n\u003cp\u003eTry using the rake task \u003ccode\u003erake db:create_migration NAME=create_movies\u003c/code\u003e to create\nyour migration file. Once you have a migration file add columns like so:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eColumn Name\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(string)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003erelease_date\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(integer)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003edirector\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(string)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003elead\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(string)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ein_theaters\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(boolean)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eAfter your migration is ready run \u003ccode\u003erake db:migrate\u003c/code\u003e to\nmigrate your table and \u003ccode\u003erake db:migrate SINATRA_ENV=test\u003c/code\u003e to migrate a test\ndatabase so you will be able to run \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eTests\u003c/h3\u003e\n\n\u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e to see the tests. To make them pass open\n\u003ccode\u003emovie_controller.rb\u003c/code\u003e and complete each method. It will help to open\n\u003ccode\u003espec/models/movie_spec.rb\u003c/code\u003e to see exactly what each spec is testing for.\u003c/p\u003e\n\n\u003cp\u003eIn each method the \u003ccode\u003e__\u003c/code\u003e corresponds to a line of code you will need to write to\nmake the spec pass.\u003c/p\u003e\n\n\u003cp\u003eEach test will take us through performing a basic CRUD action using the database\nwe just created. These tests will take you through:\u003c/p\u003e\n\n\u003ch4\u003eCreate\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eA movie can be instantiated, given a title, and saved\u003c/li\u003e\n\u003cli\u003eA movie can be instantiated with a hash containing all of its attributes\u003c/li\u003e\n\u003cli\u003eA movie can be created in a block\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eRead\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou can return the first item in the table\u003c/li\u003e\n\u003cli\u003eYou can return the last item in the table\u003c/li\u003e\n\u003cli\u003eYou can return the number of records in the table\u003c/li\u003e\n\u003cli\u003eYou can return a movie from the table based on its attributes\u003c/li\u003e\n\u003cli\u003eYou can use a \u003ccode\u003ewhere\u003c/code\u003e clause to select the appropriate movies and sort them by\nrelease date\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eUpdate\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eCan be found, updated, and saved\u003c/li\u003e\n\u003cli\u003eCan be updated using the \u003ccode\u003eupdate\u003c/code\u003e method\u003c/li\u003e\n\u003cli\u003eCan update all records at once\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eDestroy\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eCan destroy a single item\u003c/li\u003e\n\u003cli\u003eCan destroy all items at once\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html\"\u003eActive Record Query Interface\u003c/a\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge88a907a97f50c12231292bd29954efc","title":"Active Record Migrations","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-migrations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-migrations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-migrations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-migrations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate, connect to, and manipulate a SQLite database using ActiveRecord.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eSetup\u003c/h2\u003e\n\n\u003cp\u003eWe're going to use the \u003ccode\u003eactiverecord\u003c/code\u003e gem to create a mapping between our\ndatabase and model. Clone down this lesson and code-along to get to the\nsolution.\u003c/p\u003e\n\n\u003ch2\u003eMigrations\u003c/h2\u003e\n\n\u003cp\u003eFrom \u003ca href=\"http://guides.rubyonrails.org/v3.2.8/migrations.html\"\u003ethe \u003cem\u003eRailsGuides\u003c/em\u003e section on Migrations\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eMigrations are a convenient way for you to alter your database in a structured\nand organized manner. You could edit fragments of SQL by hand but you would\nthen be responsible for telling other developers that they need to go and run\nthem. You’d also have to keep track of which changes need to be run against\nthe production machines next time you deploy.\u003c/p\u003e\n\n\u003cp\u003eMigrations also allow you to describe these transformations using Ruby. The\ngreat thing about this is that (like most of Active Record’s functionality)\nit is database-independent: you don’t need to worry about the precise syntax\nof \u003ccode\u003eCREATE TABLE\u003c/code\u003e any more than you worry about variations on \u003ccode\u003eSELECT *\u003c/code\u003e (you\ncan drop down to raw SQL for database-specific features). For example, you\ncould use SQLite3 in development, but MySQL in production.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnother way to think of migrations is like version control for your database.\nYou might create a table, add some data to it, and then make some changes to it\nlater on. By adding a new migration for each change you make to the database,\nyou won't lose any data you don't want to, and you can easily revert changes.\u003c/p\u003e\n\n\u003cp\u003eExecuted migrations are tracked by ActiveRecord in your database so that they\naren't used twice. Using the migrations system to apply the schema changes is\neasier than keeping track of the changes manually and executing them manually\nat the appropriate time.\u003c/p\u003e\n\n\u003ch3\u003eSetting Up Your Migration\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a directory called \u003ccode\u003edb\u003c/code\u003e at the top level of the lesson's directory.\nThen, within the \u003ccode\u003edb\u003c/code\u003e directory, create a \u003ccode\u003emigrate\u003c/code\u003e directory. The\n\u003ccode\u003emkdir\u003c/code\u003e command is the appropriate tool to use here.\u003c/li\u003e\n\u003cli\u003eIn the \u003ccode\u003edb/migrate\u003c/code\u003e directory, create a file called \u003ccode\u003e01_create_artists.rb\u003c/code\u003e\n(we'll talk about why we added the \u003ccode\u003e01\u003c/code\u003e later).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003emechanics-of-migrations-v-000/\u003cbr\u003e  config/\u003cbr\u003e    environment.rb\u003cbr\u003e  db/\u003cbr\u003e    migrate/\u003cbr\u003e      01_create_artists.rb\u003cbr\u003e  spec/\u003cbr\u003e    artist_spec.rb\u003cbr\u003e    spec_helper.rb\u003cbr\u003e  .gitignore\u003cbr\u003e  .learn\u003cbr\u003e  .rspec\u003cbr\u003e  artist.rb\u003cbr\u003e  CONTRIBUTING.md\u003cbr\u003e  Gemfile\u003cbr\u003e  Gemfile.lock\u003cbr\u003e  LICENSE.md\u003cbr\u003e  Rakefile\u003cbr\u003e  README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the file created, we'll need to add in the migration code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/01_create_artists.rb\u003cbr\u003e\u003cbr\u003eclass CreateArtists \u0026lt; ActiveRecord::Migration[5.2]\u003cbr\u003e  def up\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def down\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eActive Record 5.x Migration Syntax Update\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eIMPORTANT\u003c/strong\u003e: Active Record is primarily used in Rails applications and as of\nActive Record 5.x, we must specify which version of Rails the migration\nwas written for, even in situations like this lab where we do not have Rails\nconfigured.\u003c/p\u003e\n\n\u003cp\u003eThis lesson was originally created with gem versions that support Rails \u003cstrong\u003e4.2\u003c/strong\u003e,\nso we need to make have our \u003ccode\u003eCreateArtist\u003c/code\u003e migration inherit from\n\u003ccode\u003eActiveRecord::Migration[4.2]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDon't worry too much about this until you get to the Rails section. Until then,\nif you encounter an error like this...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCaused by:\u003cbr\u003eStandardError: Directly inheriting from ActiveRecord::Migration is not supported. Please specify the Rails release the migration was written for:\u003cbr\u003e\u003cbr\u003e  class CreateArtists \u0026lt; ActiveRecord::Migration[4.2]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...simply add \u003ccode\u003e[4.2]\u003c/code\u003e or whatever number is displayed to the end of\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e in your migration file, exactly as the error message\ninstructs.\u003c/p\u003e\n\n\u003ch3\u003eActive Record Migration Methods: up, down, change\u003c/h3\u003e\n\n\u003cp\u003eHere we're creating a class called \u003ccode\u003eCreateArtists\u003c/code\u003e that inherits from\nActiveRecord's \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e module. Within the class, we have an\n\u003ccode\u003eup\u003c/code\u003e method to define the code to execute when the migration is run and a\n\u003ccode\u003edown\u003c/code\u003e method to define the code to execute when the migration is rolled back.\nThink of it like \"do\" and \"undo.\"\u003c/p\u003e\n\n\u003cp\u003eAnother method is available to use besides \u003ccode\u003eup\u003c/code\u003e and \u003ccode\u003edown\u003c/code\u003e: \u003ccode\u003echange\u003c/code\u003e, which is\nmore common for basic migrations.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/01_create_artists.rb\u003cbr\u003e\u003cbr\u003eclass CreateArtists \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFrom \u003ca href=\"http://edgeguides.rubyonrails.org/active_record_migrations.html#using-the-change-method\"\u003ethe Active Record Migrations RailsGuide\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe change method is the primary way of writing migrations. It works for the\nmajority of cases, where Active Record knows how to reverse the migration\nautomatically\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's take a look at how to finish off our \u003ccode\u003eCreateArtists\u003c/code\u003e migration, which\nwill generate our \u003ccode\u003eartists\u003c/code\u003e table with the appropriate columns.\u003c/p\u003e\n\n\u003ch3\u003eCreating a Table\u003c/h3\u003e\n\n\u003cp\u003eRemember how we created a table using SQL with ActiveRecord?\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Recall, we can do this with IRB: \u003ccode\u003eirb -r active_record\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFirst, we connect to a database, then write the necessary SQL to create the\ntable. So, first, we'd have to connect to a database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eActiveRecord::Base.establish_connection(\u003cbr\u003e  :adapter =\u0026gt; \"sqlite3\",\u003cbr\u003e  :database =\u0026gt; \"db/artists.sqlite\"\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen write some SQL to create the table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esql = \u0026lt;  CREATE TABLE IF NOT EXISTS artists (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  genre TEXT,\u003cbr\u003e  age INTEGER,\u003cbr\u003e  hometown TEXT\u003cbr\u003e  )\u003cbr\u003eSQL\u003cbr\u003e\u003cbr\u003eActiveRecord::Base.connection.execute(sql)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing migrations, we will still need establish Active Record's connection to the\ndatabase, but \u003cstrong\u003e\u003cem\u003ewe no longer need the SQL!\u003c/em\u003e\u003c/strong\u003e Instead of dealing with SQL\ndirectly, we provide the migrations we want and Active Record takes care of creating \u003c/p\u003e\n\n\u003cp\u003eSince we still need to connect to the database, let's make the connection\ninside \u003ccode\u003econfig/environment.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/environment.rb\u003cbr\u003erequire 'rake'\u003cbr\u003erequire 'active_record'\u003cbr\u003erequire 'yaml/store'\u003cbr\u003erequire 'ostruct'\u003cbr\u003erequire 'date'\u003cbr\u003e\u003cbr\u003erequire 'bundler/setup'\u003cbr\u003eBundler.require\u003cbr\u003e\u003cbr\u003e# put the code to connect to the database here\u003cbr\u003eActiveRecord::Base.establish_connection(\u003cbr\u003e  :adapter =\u0026gt; \"sqlite3\",\u003cbr\u003e  :database =\u0026gt; \"db/artists.sqlite\"\u003cbr\u003e)\u003cbr\u003e\u003cbr\u003erequire_relative \"../artist.rb\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder\u003c/strong\u003e: The \u003ccode\u003eenvironment.rb\u003c/code\u003e file commonly contains things we want to\nread and make available to our Ruby application when it starts. It isn't\nnecessary that you totally grasp all the parts of this file, but looking through\nit with this in mind, you might be able to gather what is happening: some gems,\nincluding \u003ccode\u003eactive_record\u003c/code\u003e are required; something happens with \u003ccode\u003eBundler\u003c/code\u003e; our\ndatabase connection is established; the \u003ccode\u003eartist.rb\u003c/code\u003e file is read.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWith the connection to the database configured, we should have access to\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e, and can create tables using only Ruby!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/01_create_artists.rb\u003cbr\u003edef change\u003cbr\u003e  create_table :artists do |t|\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we've added the \u003ccode\u003ecreate_table\u003c/code\u003e method and passed the name of the table we\nwant to create as a symbol. Pretty simple, right? Other methods we can use here\nare things like \u003ccode\u003eremove_table\u003c/code\u003e, \u003ccode\u003erename_table\u003c/code\u003e, \u003ccode\u003eremove_column\u003c/code\u003e, \u003ccode\u003eadd_column\u003c/code\u003e\nand others. See \u003ca href=\"http://guides.rubyonrails.org/migrations.html#writing-a-migration\"\u003ethis list\u003c/a\u003e for more.\u003c/p\u003e\n\n\u003cp\u003eNo point in having a table that has no columns in it, so let us add a few:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/01_create_artists.rb\u003cbr\u003e\u003cbr\u003eclass CreateArtists \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :artists do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.string :genre\u003cbr\u003e      t.integer :age\u003cbr\u003e      t.string :hometown\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooks a little familiar? On the left we've given the data type we'd like to\ncast the column as, and on the right, we've given the name we'd like to give the\ncolumn. The only thing that we're missing is the primary key. Active Record\nwill generate that column for us, and for each row added, a key will be\nauto-incremented.\u003c/p\u003e\n\n\u003cp\u003eAnd that's it! You've created your first Active Record migration. Next, we're\ngoing to see it in action!\u003c/p\u003e\n\n\u003ch3\u003eRunning Migrations\u003c/h3\u003e\n\n\u003cp\u003eThe simplest way is to run our migrations through a Rake task that we're given\nthrough the \u003ccode\u003eactiverecord\u003c/code\u003e gem. How do we access these?\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003erake -T\u003c/code\u003e to see the list of commands we have.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If you get an error when trying to run \u003ccode\u003erake\u003c/code\u003e commands, you may have\na newer version of rake already installed compared to this lesson, causing a\nconflict. To avoid this error, run \u003ccode\u003ebundle exec rake -T\u003c/code\u003e. Adding \u003ccode\u003ebundle exec\u003c/code\u003e\nindicates that you want \u003ccode\u003erake\u003c/code\u003e to run within the context of this lesson's\nbundle (defined in the \u003ccode\u003eGemfile\u003c/code\u003e), not the default version of \u003ccode\u003erake\u003c/code\u003e you have\ninstalled globally on your computer.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's look at the \u003ccode\u003eRakefile\u003c/code\u003e. The commands listed when running \u003ccode\u003erake -T\u003c/code\u003e are\nmade available as Rake tasks through \u003ccode\u003erequire 'sinatra/activerecord/rake'\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow take a look again at \u003ccode\u003eenvironment.rb\u003c/code\u003e, which our \u003ccode\u003eRakefile\u003c/code\u003e also requires:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/environment.rb\u003cbr\u003e\u003cbr\u003erequire 'bundler/setup'\u003cbr\u003eBundler.require\u003cbr\u003e\u003cbr\u003eActiveRecord::Base.establish_connection(\u003cbr\u003e  :adapter =\u0026gt; \"sqlite3\",\u003cbr\u003e  :database =\u0026gt; \"db/artists.sqlite\"\u003cbr\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis file is requiring the gems in our Gemfile and giving our program access to\nthem. We're using the \u003ccode\u003eestablish_connection\u003c/code\u003e method from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e\nto connect to our \u003ccode\u003eartists\u003c/code\u003e database, which will be created in the migration\nvia SQLite3 (the adapter).\u003c/p\u003e\n\n\u003cp\u003eAfter we've added the above code to \u003ccode\u003econfig/environment.rb\u003c/code\u003e, it's time to run\n\u003ccode\u003erake db:migrate\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Here again, if you encounter an error after running \u003ccode\u003erake db:migrate\u003c/code\u003e,\ntry running \u003ccode\u003ebundle exec rake db:migrate\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTake a look at \u003ccode\u003eartist.rb\u003c/code\u003e. Let's create an Artist class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# artist.rb\u003cbr\u003e\u003cbr\u003eclass Artist\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we'll extend the class with \u003ccode\u003eActiveRecord::Base\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# artist.rb\u003cbr\u003e\u003cbr\u003eclass Artist \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo test our newly-created class out, let's use the rake task \u003ccode\u003erake console\u003c/code\u003e (or\n\u003ccode\u003ebundle exec rake console\u003c/code\u003e), which we've created in the \u003ccode\u003eRakefile\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eTry Out The Following:\u003c/h3\u003e\n\n\u003cp\u003eCheck that the class exists:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist\u003cbr\u003e# =\u0026gt; Artist (call 'Artist.connection' to establish a connection)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eView the columns in its corresponding table in the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.column_names\u003cbr\u003e# =\u0026gt; [\"id\", \"name\", \"genre\", \"age\", \"hometown\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstantiate a new Artist named Jon, set his age to 30, and save him to the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ea = Artist.new(name: 'Jon')\u003cbr\u003e# =\u0026gt; #\u003cbr\u003e\u003cbr\u003ea.age = 30\u003cbr\u003e# =\u0026gt; 30\u003cbr\u003e\u003cbr\u003ea.save\u003cbr\u003e# =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e.new\u003c/code\u003e method creates a new instance in memory, but for that instance to\npersist, we need to save it. If we want to create a new instance and save it all\nin one go, we can use \u003ccode\u003e.create\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.create(name: 'Kelly')\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReturn an array of all Artists from the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.all\u003cbr\u003e# =\u0026gt; [#,\u003cbr\u003e #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFind an Artist by name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.find_by(name: 'Jon')\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are several methods you can now use to create, retrieve, update, and\ndelete data from your database, and a whole lot more.\u003c/p\u003e\n\n\u003cp\u003eTake a look at these \u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html#crud-reading-and-writing-data\"\u003eCRUD methods\u003c/a\u003e, and play around with them.\u003c/p\u003e\n\n\u003ch2\u003eUsing Migrations To Manipulate Existing Tables\u003c/h2\u003e\n\n\u003cp\u003eHere is another place where migrations really shine. Let's add a\n\u003ccode\u003efavorite_food\u003c/code\u003e column to our \u003ccode\u003eartists\u003c/code\u003e table. Remember that Active Record\nkeeps track of the migrations we've already run, so adding the new code to our\n\u003ccode\u003e01_create_artists.rb\u003c/code\u003e file won't work. Since we aren't rolling back our\nprevious migration (or dropping the entire table), the \u003ccode\u003e01_create_artists.rb\u003c/code\u003e\nmigration won't be re-executed when we run \u003ccode\u003erake db:migrate\u003c/code\u003e again. Generally,\nthe best practice for database management (especially in a production\nenvironment) is creating new migrations to modify existing tables. That way,\nwe'll have a clear, linear record of all of the changes that have led to our\ncurrent database structure.\u003c/p\u003e\n\n\u003cp\u003eTo make this change we're going to need a new migration, which we'll call\n\u003ccode\u003e02_add_favorite_food_to_artists.rb\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/02_add_favorite_food_to_artists.rb\u003cbr\u003e\u003cbr\u003eclass AddFavoriteFoodToArtists \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    add_column :artists, :favorite_food, :string\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePretty awesome, right? We just told Active Record to add a column to the\n\u003ccode\u003eartists\u003c/code\u003e table called \u003ccode\u003efavorite_food\u003c/code\u003e and that it will contain a string.\u003c/p\u003e\n\n\u003cp\u003eNotice how we incremented the number in the file name there? Imagine for a\nminute that you deleted your original database and wanted to execute the\nmigrations again. Active Record is going to execute each file, but it does so\nin alpha-numerical order. If we didn't have the numbers, our \u003ccode\u003eadd_column\u003c/code\u003e\nmigration would have tried to run first (\u003ccode\u003e[a]dd_favorite...\u003c/code\u003e comes before\n\u003ccode\u003e[c]reate_artists...\u003c/code\u003e), and our \u003ccode\u003eartists\u003c/code\u003e table wouldn't have even been created\nyet! So we used some numbers to make sure the migrations execute in order. In\nreality, our two-digit system is very rudimentary. As you'll see later on,\nframeworks like Rails have generators that create migrations with very accurate\ntimestamps, so you'll never have to worry about hand-numbering.\u003c/p\u003e\n\n\u003cp\u003eNow that you've saved the migration, go back to the terminal to run \n\u003ccode\u003erake db:migrate\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAwesome! Now go back to the console with the \u003ccode\u003erake console\u003c/code\u003e command, and check\nit out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.column_names\u003cbr\u003e# =\u0026gt; [\"id\", \"name\", \"genre\", \"age\", \"hometown\", \"favorite_food\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat!\u003c/p\u003e\n\n\u003cp\u003eNope- wait. Word just came down from the boss- you weren't supposed to ship\nthat change yet! OH NO! No worries, we'll roll back to the first migration.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003erake -T\u003c/code\u003e. Which command should we use?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake db:rollback\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen drop back into the console to double check:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.column_names\u003cbr\u003e# =\u0026gt; [\"id\", \"name\", \"genre\", \"age\", \"hometown\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOh good, your job is saved. Thanks, Active Record! When the boss says it's\nactually time to add that column, you can just run \u003ccode\u003erake db:migrate\u003c/code\u003e again!\u003c/p\u003e\n\n\u003cp\u003eWoohoo!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7fa22da088dd34a8a01e3c444466e428","title":"Active Record Querying Methods Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-querying-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-querying-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-querying-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-querying-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a table using ActiveRecord.\u003c/li\u003e\n\u003cli\u003eUse Active Record's querying methods.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be working in a TV show domain. We have a TV show model, the\n\u003ccode\u003eShow\u003c/code\u003e class, and a \u003ccode\u003eshows\u003c/code\u003e table that you'll create in your database.\u003c/p\u003e\n\n\u003cp\u003eYou'll be required not only to write a migration that creates a \u003ccode\u003eshows\u003c/code\u003e table\nand gives the \u003ccode\u003eShow\u003c/code\u003e class certain attributes, but also to use Active Record's\nquerying methods.\u003c/p\u003e\n\n\u003ch3\u003eActive Record Querying Methods\u003c/h3\u003e\n\n\u003cp\u003eActive Record makes it easy to ask our database for certain information and\ndatasets by providing a bunch of built-in methods for us. For example, we can\nrequest the sum of all of the values of a particular column with the \u003ccode\u003e#sum\u003c/code\u003e\nmethod:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e.sum(:)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can query our database based on certain conditions using the \u003ccode\u003e#where\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eLet's say we have a \u003ccode\u003eSong\u003c/code\u003e class and table and each song has a \u003ccode\u003enumber_of_stars\u003c/code\u003e\nrating attribute. We could query for songs with more than 3 stars like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.where(\"number_of_stars \u0026gt; ?\", 3)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's look at one more example: Let's say we want to query our database for the\nlowest value in the \u003ccode\u003enumber_of_stars\u003c/code\u003e column, i.e., the lowest rating that any\nsong has:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.minimum(:number_of_stars)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou'll be writing methods that \u003cem\u003erely on Active Record methods like \u003ccode\u003e#minimum\u003c/code\u003e,\n\u003ccode\u003e#sum\u003c/code\u003e, and \u003ccode\u003e#where\u003c/code\u003e\u003c/em\u003e to get these tests passing.\u003c/p\u003e\n\n\u003cp\u003eUse the following resources to help you find the Active Record query methods\nthat will help you pass these tests:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html#calculations\"\u003eCalculations\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html#ordering\"\u003eOrdering\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html#conditions\"\u003eConditions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eMigration\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eRun \u003ccode\u003emkdir db\u003c/code\u003e and then \u003ccode\u003emkdir db/migrate\u003c/code\u003e to create the \u003ccode\u003emigrate\u003c/code\u003e folder\nwithin \u003ccode\u003edb\u003c/code\u003e. Then create a file in the \u003ccode\u003edb/migrate\u003c/code\u003e folder called\n\u003ccode\u003e001_create_shows.rb\u003c/code\u003e. In this file, write the migration code to create a\n\u003ccode\u003eshows\u003c/code\u003e table. The table should have \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003enetwork\u003c/code\u003e, \u003ccode\u003eday\u003c/code\u003e, and \u003ccode\u003erating\u003c/code\u003e\ncolumns. \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003enetwork\u003c/code\u003e, and \u003ccode\u003eday\u003c/code\u003e have a datatype of string, and \u003ccode\u003erating\u003c/code\u003e\nhas a datatype of integer.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate an \u003ccode\u003eapp\u003c/code\u003e folder with a \u003ccode\u003emodels\u003c/code\u003e folder within it, and then create a\nfile, \u003ccode\u003eshow.rb\u003c/code\u003e, in \u003ccode\u003eapp/models\u003c/code\u003e. In this file, you will define a \u003ccode\u003eShow\u003c/code\u003e class\nthat inherits from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNow we need to create a second migration to add another column to our \u003ccode\u003eshows\u003c/code\u003e\ntable. In the \u003ccode\u003edb/migrate\u003c/code\u003e folder, create another file,\n\u003ccode\u003e002_add_season_to_shows.rb\u003c/code\u003e, and write a migration to add a column, \u003ccode\u003eseason\u003c/code\u003e,\nto the \u003ccode\u003eshows\u003c/code\u003e table. The datatype of this column is string.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: This lab is using ActiveRecord 5.2. You will need to specify this\nversion in your migrations by having your classes inherit from\n\u003ccode\u003eActiveRecord::Migration[5.2]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eMethods\u003c/h3\u003e\n\n\u003cp\u003eYou'll be defining the following methods:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ehighest_rating\u003c/code\u003e: this method should return the highest value in the ratings\ncolumn. \u003cem\u003ehint\u003c/em\u003e: if there is a \u003ccode\u003eminimum\u003c/code\u003e Active Record method, might there be a\n\u003ccode\u003emaximum\u003c/code\u003e method?\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003emost_popular_show\u003c/code\u003e: this method should return the show with the highest\nrating. \u003cem\u003ehint\u003c/em\u003e: use the \u003ccode\u003ehighest_rating\u003c/code\u003e method as a helper method.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elowest_rating\u003c/code\u003e: returns the lowest value in the ratings column.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eleast_popular_show\u003c/code\u003e: returns the show with the lowest rating.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eratings_sum\u003c/code\u003e: returns the sum of all of the ratings.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003epopular_shows\u003c/code\u003e: returns an array of all of the shows that have a rating\ngreater than \u003ccode\u003e5\u003c/code\u003e. \u003cem\u003ehint\u003c/em\u003e: use the \u003ccode\u003ewhere\u003c/code\u003e Active Record method.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eshows_by_alphabetical_order\u003c/code\u003e: returns an array of all of the shows sorted in\nalphabetical order according to their names. \u003cem\u003ehint\u003c/em\u003e: use the \u003ccode\u003eorder\u003c/code\u003e Active\nRecord method.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g1ddbb29216d93b0bf40711ff713bd024","title":"Active Record Theater Work","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Active-Record-Theater-Work\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Active-Record-Theater-Work/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Active-Record-Theater-Work\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Active-Record-Theater-Work/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eThe Flatiron Theater Company is holding Auditions!\u003c/p\u003e  \u003cp\u003eAn actor may only \u003ccode\u003eAudition\u003c/code\u003e for one \u003ccode\u003eRole\u003c/code\u003e, while a \u003ccode\u003eRole\u003c/code\u003e may have many \u003ccode\u003eAuditions\u003c/code\u003e for it! \u003c/p\u003e  \u003cp\u003e\u003cimg src=\"one_to_many.png\" alt=\"one to many\"\u003e\u003c/p\u003e  \u003ch2\u003eGetting started\u003c/h2\u003e  \u003cp\u003erun \u003ccode\u003ebundle install\u003c/code\u003e\u003c/p\u003e  \u003ch2\u003eMigrations\u003c/h2\u003e  \u003cp\u003eCreate your migrations.  - \u003ccode\u003eAuditions\u003c/code\u003e should have an actor(string), location(string) and belong_to a role(integer)\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eRoles\u003c/code\u003e should only have a character_name\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003e\n\u003ccode\u003eauditions\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003eactor\u003c/td\u003e \u003ctd\u003estring\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003elocation\u003c/td\u003e \u003ctd\u003estring\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003ephone\u003c/td\u003e \u003ctd\u003einteger\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003ehired\u003c/td\u003e \u003ctd\u003eboolean\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003erole_id\u003c/td\u003e \u003ctd\u003einteger\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch4\u003e\n\u003ccode\u003eroles\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003echaracter_name\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch2\u003eRelationship\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWhat associations will this need?\u003c/li\u003e \u003cli\u003e(i.e. \u003ccode\u003ehas_many\u003c/code\u003e, \u003ccode\u003ehas_many through\u003c/code\u003e, and \u003ccode\u003ebelongs_to\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eAudition\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAudition#role\u003c/code\u003e returns an instance of role associated with this audition\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAudition#call_back\u003c/code\u003e will change the the hired attribute to \u003ccode\u003etrue\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eRoles\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#auditions\u003c/code\u003e returns all of the auditions associated with this role \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#actors\u003c/code\u003e returns an array of names from the actors associated with this role\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#locations\u003c/code\u003e returns an array of locations from the auditions associated with this role\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#lead\u003c/code\u003e returns the first instance of the audition that was hired for this role or returns a string 'no actor has been hired for this role'\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eRole#understudy\u003c/code\u003e returns the second instance of the audition that was hired for this role or returns a string 'no actor has been hired for understudy for this role'\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g4c98cb71f66a3c552ba2bfa085e6655c","title":"Active Record - TV Land Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-associations-tvland-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-tvland-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-tvland-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-tvland-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate and modify tables using Active Record migrations.\u003c/li\u003e\n\u003cli\u003eBuild associations between models using Active Record macros.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be working with a TV show domain model. We will have a show,\nnetwork, and character model. They will be associated in the following way:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn actor has many characters and has many shows through characters.\u003c/li\u003e\n\u003cli\u003eA character belongs to an actor and belongs to a show.\u003c/li\u003e\n\u003cli\u003eA show has many characters and has many actors through characters.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe've given you a few migrations in the \u003ccode\u003edb/migrate\u003c/code\u003e directory to create the\nnetworks and shows table, but you'll have to add additional tables and modify\nthese existing tables as per the guidelines below.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRemember to run \u003ccode\u003erake db:migrate\u003c/code\u003e in the terminal before you run your tests and after you make any new migrations!\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe tests in this lab are run for each model/migration - actor, character,\nnetwork (solution already provided), and show. Because of this, when run, you\nwill see \u003cem\u003eall the tests\u003c/em\u003e for the Actor model first, then _all the tests for\nCharacter, etc... the tricky thing here is that \u003cstrong\u003eyou will not be able to pass\nall the tests for Actor until the migrations for other models are working\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis makes sense, and mirrors normal development of associations - you can't ask\nan Actor instance about what characters it has if there isn't characters table\nor a model configured.\u003c/p\u003e\n\n\u003ch3\u003eMigrations\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a migration for the actors table. An actor should have a \u003ccode\u003efirst_name\u003c/code\u003e\nand a \u003ccode\u003elast_name\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWrite a migration for the characters table. A character should have a \u003ccode\u003ename\u003c/code\u003e,\n\u003ccode\u003eactor_id\u003c/code\u003e, and a \u003ccode\u003eshow_id\u003c/code\u003e––a character will belong to a show (the show\nmigration is already provided) and an actor, and we'll keep track of this\nrelationship with these database table columns.\u003c/li\u003e\n\u003cli\u003eWrite a migration that adds the column \u003ccode\u003ecatchphrase\u003c/code\u003e to your character model.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eAssociations\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eAssociate the \u003ccode\u003eActor\u003c/code\u003e model with the \u003ccode\u003eCharacter\u003c/code\u003e and \u003ccode\u003eShow\u003c/code\u003e model. An actor\nshould have many characters and many shows through characters.\u003c/li\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eActor\u003c/code\u003e class, \u003ccode\u003e#full_name\u003c/code\u003e, that returns the first and\nlast name of an actor.\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWrite a method in the \u003ccode\u003eActor\u003c/code\u003e class, \u003ccode\u003e#list_roles\u003c/code\u003e, that lists all of the\ncharacters that actor has alongside the show that the character is in. So, for\ninstance, if we had an actor, Peter Dinklage, a character, Tyrion Lannister,\nand a show, Game of Thrones, we with\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epeter = Actor.new(:first_name =\u0026gt; \"Peter\", :last_name =\u0026gt; \"Dinklage\")\u003cbr\u003etyrion = Character.new(:name =\u0026gt; \"Tyrion Lannister\")\u003cbr\u003etyrion.actor = peter\u003cbr\u003ethrones = Show.new(:name =\u0026gt; \"Game of Thrones\")\u003cbr\u003etyrion.show = thrones\u003cbr\u003etyrion.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd then, when we run \u003ccode\u003epeter.list_roles\u003c/code\u003e, we would get an Array containing a\n  string with both the character and the show:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eruby\n    ['Tyrion Lannister - Game of Thrones']\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDefine a method in the \u003ccode\u003eCharacter\u003c/code\u003e class, \u003ccode\u003e#say_that_thing_you_say\u003c/code\u003e, using a\ngiven character's catchphrase. Using Tyrion as an example again, the returned\nstring should look like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etyrion.catchphrase = 'A Lannister always pays his debts'\u003cbr\u003etyrion.say_that_thing_you_say\u003cbr\u003e#=\u0026gt; 'Tyrion Lannister always says: A Lannister always pays his debts'\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDefine a method in the \u003ccode\u003eShow\u003c/code\u003e class called \u003ccode\u003e#actors_list\u003c/code\u003e that returns an\nArray of the full names of each actor associated with the a show. Remember,\na show should have many actors through characters.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhile we've connected shows, characters and actors together, we haven't\nconnected these models to the existing network model. Update the associations\nso that a show belongs to a network. In the network model, an association has\nalready been added so that a network has many shows.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Once connected, this allows us to do some interesting things, like\n  chain-building. We could, for instance, create a character, and with that\n  character created, tell Active Record to \u003cem\u003echain build\u003c/em\u003e an associated show.\n  With a \u003cem\u003eshow\u003c/em\u003e created on the spot, we can immediately tell Active Record to\n  then \u003cem\u003echain build an associated network.\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  rick = Character.new(:name =\u0026gt; \"Rick Grimes\")\u003cbr\u003e  rick.build_show(:name =\u0026gt; \"The Walking Dead\").build_network(:call_letters =\u0026gt; \"AMC\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis doesn't \u003cem\u003esave\u003c/em\u003e these instances, but will set up the right associations\n  for us and when we save our character, the new show and network are also\n  saved.\u003c/p\u003e\n\n\u003ch3\u003eFinal Migrations\u003c/h3\u003e\n\n\u003cp\u003eFor the last couple of tests, update the shows table with a new migration. This\nmigration should add a \u003ccode\u003eday\u003c/code\u003e column to indicate which day of the week the show\nis on, a \u003ccode\u003egenre\u003c/code\u003e column for the show genre, and \u003ccode\u003eseason\u003c/code\u003e to indicate which\nseason the show is currently on. All three should be strings.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRails Guide - \u003ca href=\"http://guides.rubyonrails.org/association_basics.html\"\u003eActive Record Associations\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eAPI dock - \u003ca href=\"http://apidock.com/rails/ActiveRecord/Associations\"\u003eActive Record Associations\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eRails Guide - \u003ca href=\"http://edgeguides.rubyonrails.org/active_record_migrations.html\"\u003eActive Record Migrations\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g79baf8ae17031f777e9ceb7c98b38fd8","title":"Advanced Class Methods Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-advanced-class-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild custom class constructors.\u003c/li\u003e\n\u003cli\u003eBuild class finders.\u003c/li\u003e\n\u003cli\u003eBuild class operators.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis lab has provided you with a base \u003ccode\u003eSong\u003c/code\u003e class that provides the following\ndefinition:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :name, :artist_name\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def save\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eSong\u003c/code\u003e class provides a class variable \u003ccode\u003e@@all\u003c/code\u003e to store all instances for\n\u003ccode\u003eSong\u003c/code\u003e that are created through the instance method \u003ccode\u003eSong#save\u003c/code\u003e. Additionally,\n\u003ccode\u003eSong\u003c/code\u003e instances have basic properties of a name and an artist name.\u003c/p\u003e\n\n\u003cp\u003eYou have to build class methods that interact on the class data of \u003ccode\u003e@@all\u003c/code\u003e and\nprovide the rest of our program with a semantic API on the \u003ccode\u003eSong\u003c/code\u003e class with\nmethods such as \u003ccode\u003eSong.find_or_create_by_name(\"Blank Space\")\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eSong.create\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor \u003ccode\u003eSong.create\u003c/code\u003e that initializes a song and saves it to\nthe \u003ccode\u003e@@all\u003c/code\u003e class variable either literally or through the class method\n\u003ccode\u003eSong.all\u003c/code\u003e. This method should return the song instance that was initialized and\nsaved.\u003c/p\u003e\n\n\u003cp\u003eConsider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.create\u003cbr\u003eSong.all.include?(song) #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.new_by_name\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor \u003ccode\u003eSong.new_by_name\u003c/code\u003e that takes in the string name of a\nsong and returns a song instance with that name set as its name property.\n\u003ccode\u003eSong.new_by_name\u003c/code\u003e should return an instance of \u003ccode\u003eSong\u003c/code\u003e and not a simple string\nor anything else. Implement the following functionality:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.new_by_name(\"The Middle\")\u003cbr\u003e#=\u0026gt; #\u003cbr\u003esong.name #=\u0026gt; \"The Middle\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.create_by_name\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor \u003ccode\u003eSong.create_by_name\u003c/code\u003e that takes in the string name of\na song and returns a song instance with that name set as its name property and\nthe song being saved into the \u003ccode\u003e@@all\u003c/code\u003e class variable.\u003c/p\u003e\n\n\u003cp\u003eConsider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.create_by_name(\"The Middle\")\u003cbr\u003e#=\u0026gt; #\u003cbr\u003esong\u003cbr\u003e#=\u0026gt; #\u003cbr\u003eSong.all.include?(song)\u003cbr\u003e#=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.find_by_name\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class finder \u003ccode\u003eSong.find_by_name\u003c/code\u003e that accepts the string name of a song\nand returns the matching instance of the song with that name. Consider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe_middle = Song.create_by_name(\"The Middle\")\u003cbr\u003e#=\u0026gt; #\u003cbr\u003e\u003cbr\u003eSong.find_by_name(\"The Middle\")\u003cbr\u003e#\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.find_or_create_by_name\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn order to prevent duplicate songs being created that actually represent the\nsame song (based on the song name), we're going to build a\n\u003ccode\u003eSong.find_or_create_by_name\u003c/code\u003e class method. This method will accept a string\nname for a song and either return a matching song instance with that name or\ncreate a new song with the name and return the song instance.\u003c/p\u003e\n\n\u003cp\u003eConsider:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong_1 = Song.find_or_create_by_name(\"Blank Space\")\u003cbr\u003esong_2 = Song.find_or_create_by_name(\"Blank Space\")\u003cbr\u003e\u003cbr\u003e# song_1 and song_2 are conceptually the same song and should return the same song instance because of `.find_or_create_by_name.`\u003cbr\u003e\u003cbr\u003esong_1 == song_2 #=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.alphabetical\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class method \u003ccode\u003eSong.alphabetical\u003c/code\u003e that returns all the songs in ascending\n(a-z) alphabetical order.\u003c/p\u003e\n\n\u003cp\u003eUse \u003ca href=\"http://ruby-doc.org/core/Enumerable.html#method-i-sort_by\"\u003eArray#sort_by\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eSong.new_from_filename\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor that accepts a filename in the format of \u003ccode\u003e\"\u0026lt;Artist\nName\u0026gt; - \u0026lt;Song Name\u0026gt;.mp3\"\u003c/code\u003e, for example, \"Taylor Swift - Blank Space.mp3\".\u003c/p\u003e\n\n\u003cp\u003eGiven \u003ccode\u003eSong.new_from_filename(\"Taylor Swift - Blank Space.mp3\")\u003c/code\u003e, the\nconstructor should return a new \u003ccode\u003eSong\u003c/code\u003e instance with \u003ccode\u003esong_name\u003c/code\u003e set to Blank\nSpace and \u003ccode\u003eartist_name\u003c/code\u003e set to Taylor Swift. The filename input sent to\n\u003ccode\u003eSong.new_from_filename\u003c/code\u003e in the format of \u003ccode\u003eTaylor Swift - Blank Space.mp3\u003c/code\u003e must\nbe parsed for the relevant components. Separate the artist name from the rest of\nthe data based on the \u003ccode\u003e-\u003c/code\u003e delimiter. Don't forget that when you parse the song\nname, you have to remove the \u003ccode\u003e'.mp3'\u003c/code\u003e part of the string.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esong = Song.new_from_filename(\"Taylor Swift - Blank Space.mp3\")\u003cbr\u003esong.name #=\u0026gt; \"Blank Space\"\u003cbr\u003esong.artist_name #=\u0026gt; \"Taylor Swift\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSong.create_from_filename\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eBuild a class constructor that accepts a filename in the format of \u003ccode\u003e\"\u0026lt;Artist\nName\u0026gt; - \u0026lt;Song Name\u0026gt;.mp3\"\u003c/code\u003e, for example \"Taylor Swift - Blank Space.mp3\". The\n\u003ccode\u003eSong.create_from_filename\u003c/code\u003e class method should not only parse the filename\ncorrectly but should also save the Song instance that was created.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eSong.destroy_all\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eSong.destroy_all\u003c/code\u003e class method should reset the state of the \u003ccode\u003e@@all\u003c/code\u003e class\nvariable to an empty array thereby deleting all previous song instances.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8829b92272a6bfccd209af92dfe5a0d6","title":"Aggregate Functions Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-aggregate-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-aggregate-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFind the min and max of a number set\u003c/li\u003e\n\u003cli\u003eCount the total of a number set\u003c/li\u003e\n\u003cli\u003eFind the average of a number set\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe have a database full of students. The schema is as follows:\n\u003cimg src=\"http://readme-pics.s3.amazonaws.com/sql-students.png\" alt=\"\"\u003e\nRun \u003ccode\u003elearn test\u003c/code\u003e to get started. Write your \u003ccode\u003eSQL\u003c/code\u003e in \u003ccode\u003elib/students.rb\u003c/code\u003e to get the specs in \u003ccode\u003espec/student_spec.rb\u003c/code\u003e to pass.\u003c/p\u003e\n\n\u003cp\u003eNote: Since it's a Ruby file, write your queries as strings inside each method already defined in \u003ccode\u003elib/students.rb\u003c/code\u003e .\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge3cb9c1f92560615736ca372c5297f62","title":"Anagram Detector Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"anagram-detector\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/anagram-detector/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/anagram-detector\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/anagram-detector/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Build a class with an initialize method and use an \u003ccode\u003eattr_accessor\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eYou will write a program that, given a word and a list of possible\n\u003ca href=\"http://www.dictionary.com/browse/anagram\"\u003eanagrams\u003c/a\u003e, selects the correct one(s).\u003c/p\u003e\n\n\u003cp\u003eYour class, \u003ccode\u003eAnagram\u003c/code\u003e should take a word on initialization, and instances should\nrespond to a \u003ccode\u003ematch\u003c/code\u003e method that takes an array of possible anagrams. It should\nreturn all matches in an array. If no matches exist, it should return an empty\narray.\u003c/p\u003e\n\n\u003cp\u003eIn other words, given: \u003ccode\u003e\"listen\"\u003c/code\u003e and \u003ccode\u003e%w(enlists google inlets banana)\u003c/code\u003e the\nprogram should return \u003ccode\u003e[\"inlets\"]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elisten = Anagram.new(\"listen\")\u003cbr\u003elisten.match(%w(enlists google inlets banana))\u003cbr\u003e\u003cbr\u003e# =\u0026gt; [\"inlets\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e \u003ca href=\"http://stackoverflow.com/questions/1274675/ruby-what-does-warray-mean\"\u003e\u003ccode\u003e%w(some words)\u003c/code\u003e\u003c/a\u003e is simply a shortcut for\ninstantiating an array with items in it!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eOnce again, this lab is test-driven. Run the test suite to get started. Remember\nthat you can use the \u003ccode\u003elearn/rspec --fail-fast\u003c/code\u003e option to run the tests only up\nuntil the first failure, in order to work progressively through the tests.\u003c/p\u003e\n\n\u003cp\u003eWrite your solution in \u003ccode\u003eanagram.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eUse an \u003ccode\u003eattr_accessor\u003c/code\u003e to create a setter and getter method for the word that\nthe Anagram class instances are initialized with.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHow will you determine if one word is an anagram for another?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou'll need to iterate over the array of words that the \u003ccode\u003e.match\u003c/code\u003e method\ntakes as an argument. You will compare each word of that array to the word\nthat the Anagram class is initialized with.\u003c/li\u003e\n\u003cli\u003eTo determine if they are anagrams, try determining if they are composed of\nthe same letters. Remember that you can split a word into an array of letters\nusing \u003ccode\u003esome_word.split(\"\")\u003c/code\u003e. You can compare two arrays using the \u003ccode\u003e==\u003c/code\u003e. For\nexample:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e[1, 2, 3] == [1, 2, 3]\u003cbr\u003e=\u0026gt; true\u003cbr\u003e\u003cbr\u003e[1, 3, 2] == [1, 2, 3]\u003cbr\u003e=\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTwo arrays are equal if they contain the same elements, in the same order.\nRemember that you can \u003ccode\u003e.sort\u003c/code\u003e an array's elements. This will help in your\ncomparison:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1, 3, 2].sort == [3, 2, 1].sort\u003cbr\u003e=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://stackoverflow.com/\"\u003eStackOverflow\u003c/a\u003e - \u003ca href=\"http://stackoverflow.com/questions/1274675/ruby-what-does-warray-mean\"\u003eRuby: what does %w(array) mean?\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g1b792008703bfd98720d404669c77b04","title":"Array CRUD Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-CRUD-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-CRUD-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-CRUD-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-CRUD-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you will create arrays, add data to arrays, remove data from arrays and retrieve data from arrays.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a new array that contains data as well as a new array that is empty.\u003c/li\u003e\n\u003cli\u003eAdd an element to the end of an array.\u003c/li\u003e\n\u003cli\u003eAdd an element to the front of an array.\u003c/li\u003e\n\u003cli\u003eRemove an element from the front of an array.\u003c/li\u003e\n\u003cli\u003eRemove an element from the end of an array.\u003c/li\u003e\n\u003cli\u003eRetrieve data from a specific array index.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we will be coding the solutions for each of the above tasks in the body of a method. In \u003ccode\u003elib/array_crud.rb\u003c/code\u003e we've defined a series of methods for you, each of which is responsible for one of the tasks above. Your job is to write the code in the body of each method to get the test passing.\u003c/p\u003e\n\n\u003cp\u003eLet's go through the first challenge together.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#create_an_empty_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eLet's run our test suite to get started. Run the tests one at a time with the \u003ccode\u003elearn test --fail-fast\u003c/code\u003e command in your terminal.\u003c/p\u003e\n\n\u003cp\u003eIf we do so, we'll see our first failure:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-10-26%20at%202.05.07%20PM.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOur test is telling us that we are expected to code the content of our \u003ccode\u003e#create_an_empty_array\u003c/code\u003e method such that a new, empty array is created and returned. Our test \u003ccode\u003eexpected\u003c/code\u003e an empty array, \u003ccode\u003e[]\u003c/code\u003e, but got \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/array_crud.rb\u003c/code\u003e and check out the \u003ccode\u003e#create_an_empty_array\u003c/code\u003e method. It's empty! Let's write the code that will get the test passing.\u003c/p\u003e\n\n\u003cp\u003eWe'll use the literal constructor to make a new array with nothing in it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef create_an_empty_array\u003cbr\u003e  []\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test suite again and we should be passing that first test.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#create_an_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should use the literal constructor to create a new array, just like we did above. This time, however, create an array that contains four elements. The four elements can be any elements of your choosing, as long as there are only four of them.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#add_element_to_end_of_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in two arguments, an array and the element we want to add to it. Use the \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e (shovel) method or the \u003ccode\u003e#push\u003c/code\u003e method to add that element to the end of the new array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#add_element_to_start_of_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in two arguments, an array and the element we want to add to it. Use the \u003ccode\u003e#unshift\u003c/code\u003e method to add that element to the start of that array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#remove_element_from_end_of_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in one argument, the array on which we want to operate. Use the \u003ccode\u003e#pop\u003c/code\u003e method to remove the last item from the array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#remove_element_from_start_of_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in one argument, the array on which we want to operate. Use the \u003ccode\u003e#shift\u003c/code\u003e method to remove the first item from the array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#retrieve_element_from_index\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in two arguments, an array and the index number whose element we want to retrieve. Use the \u003ccode\u003e[]\u003c/code\u003e, bracket method, to return the element stored at that index number of the given array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#retrieve_first_element_from_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in one argument, the array from which we want to retrieve an element. Use \u003ccode\u003e[]\u003c/code\u003e notation to return the value stored at the first index of the array. Remember that arrays are zero-indexed. This means that the first index number is \u003ccode\u003e0\u003c/code\u003e and it counts up from there. So, the first element of an array is stored at index \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#retrieve_last_element_from_array\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in one argument, the array from which we want to retrieve an element. There are a number of ways to do this, but we recommend using the \u003ccode\u003e[]\u003c/code\u003e method with the following hint:\u003c/p\u003e\n\n\u003cp\u003eThe last element of an array is considered to be stored at an index of \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd9a92f9e8811b447caec943adcaec547","title":"Array Methods Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"array-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/array-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/array-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you will call methods on arrays, like \u003ccode\u003e#sort\u003c/code\u003e and \u003ccode\u003e#include?\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDetermine if an array contains a particular element using the \u003ccode\u003e#include?\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eSort an array using the \u003ccode\u003e#sort\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eReverse the contents of an array using the \u003ccode\u003e#reverse\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eFind the first and last elements in an array using the \u003ccode\u003e#first\u003c/code\u003e and \u003ccode\u003e#last\u003c/code\u003e methods.\u003c/li\u003e\n\u003cli\u003eDetermine the size, or length, of an array using the \u003ccode\u003e#size\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we will be coding the solutions for each of the above tasks in the body of a method. In \u003ccode\u003elib/array_methods.rb\u003c/code\u003e we've defined a series of methods for you, each of which is responsible for one of the tasks above. Your job is to write the code in the body of each method to get the tests passing.\u003c/p\u003e\n\n\u003cp\u003eEach method takes in an argument of an array. You will call the appropriate method, such as \u003ccode\u003e#include?\u003c/code\u003e or \u003ccode\u003e#first\u003c/code\u003e, on that array to get the test passing.\u003c/p\u003e\n\n\u003cp\u003eThis lab is test-driven so run \u003ccode\u003elearn test\u003c/code\u003e to get started and use the test output to guide you.\u003c/p\u003e\n\n\u003cp\u003eWe'll do the first one together:\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_include\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in two arguments: an array and an element. The test is expecting the \u003ccode\u003e#using_include\u003c/code\u003e method to return \u003ccode\u003etrue\u003c/code\u003e if the array contains that element and \u003ccode\u003efalse\u003c/code\u003e if it doesn't.\u003c/p\u003e\n\n\u003cp\u003eWe already know about a method that does just that: \u003ccode\u003e#include?\u003c/code\u003e. This method is called on an array and takes in an argument of an element. It returns \u003ccode\u003etrue\u003c/code\u003e if the array contains that element and \u003ccode\u003efalse\u003c/code\u003e if it does not.\u003c/p\u003e\n\n\u003cp\u003eLet's get our test passing with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/array_methods.rb\u003cbr\u003e\u003cbr\u003edef using_include(array, element)\u003cbr\u003e  array.include?(element)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun your test suite again, and you should be passing the first one.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_sort\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the array, sorted in ascending order. Use the \u003ccode\u003e#sort\u003c/code\u003e method on the array to get this test passing.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_reverse\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the array with the contents in reverse order. Use the \u003ccode\u003e#reverse\u003c/code\u003e method on the array to get this test passing.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_first\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the first element of that array. Try to get this test passing without using the \u003ccode\u003e[]\u003c/code\u003e method. Use the \u003ccode\u003e#first\u003c/code\u003e method instead.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_last\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the last element of that array. Try to get this test passing without using the \u003ccode\u003e[]\u003c/code\u003e method. Use the \u003ccode\u003e#last\u003c/code\u003e method instead.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#using_size\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in an argument of an array and should return the size, or length, of that array. Use the \u003ccode\u003e#size\u003c/code\u003e method on that array to get this test passing.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g873f3f51451e7fc85e94634fec68df1b","title":"Associations and Migrations","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-associations-and-migrations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-and-migrations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-and-migrations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-associations-and-migrations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand how and why Active Record implements associations between models.\u003c/li\u003e\n\u003cli\u003eUse Active Record migrations and methods to build out a domain model that\nassociates classes via the has-many/belongs-to \u003cem\u003eand\u003c/em\u003e the many-to-many (or\nhas-many-through) relationships.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat are Active Record Associations?\u003c/h2\u003e\n\n\u003cp\u003eWe already know that we can build our classes such that they associate with one\nanother. We also know that it takes a lot of code to do it. Active Record\nassociations allow us to associate models \u003cem\u003eand their analogous database tables\u003c/em\u003e\nwithout having to write tons of code.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, Active Record associations make actually working with our\nassociated objects even quicker, neater and easier.\u003c/p\u003e\n\n\u003cp\u003eSounds great, right? Now that we have you totally hooked, let's take a look at\nhow we use these AR associations.\u003c/p\u003e\n\n\u003ch2\u003eHow do we use AR Associations?\u003c/h2\u003e\n\n\u003cp\u003eActive Record makes it easy to implement the following relationships between\nmodels:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ebelongs_to\u003c/li\u003e\n\u003cli\u003ehas_one\u003c/li\u003e\n\u003cli\u003ehas_many\u003c/li\u003e\n\u003cli\u003ehas_many :through\u003c/li\u003e\n\u003cli\u003ehas_one :through\u003c/li\u003e\n\u003cli\u003ehas\u003cem\u003eand\u003c/em\u003ebelongs\u003cem\u003eto\u003c/em\u003emany\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe don't need to worry about most of these right now. We'll concern ourselves\nwith relationships that should sound familiar:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ebelongs to\u003c/li\u003e\n\u003cli\u003ehas many\u003c/li\u003e\n\u003cli\u003ehas many through\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn order to implement these relationships, we will need to do two things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite a migration that creates tables with associations. For example, if a\ncat belongs to an owner, the cats table should have an \u003ccode\u003eowner_id\u003c/code\u003e column.\u003c/li\u003e\n\u003cli\u003eUse Active Record macros in the models.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe'll go through both of these steps together, using our Playlister domain model.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this walk-through, we'll be building out a domain model for our fictitious\nmusic playing app, Playlister. This app will catalog songs and their\nassociated artists and genres.  \u003c/p\u003e\n\n\u003cp\u003eWe'll have three models: Artists, Songs, and Genres. By writing a few migrations\nand making use of the appropriate Active Record macros (more on that later), we\nwill be able to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eask an Artist about its songs and genres\u003c/li\u003e\n\u003cli\u003eask a Song about its genre and its artist\u003c/li\u003e\n\u003cli\u003eask a Genre about its songs and artists.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe relationships between artists, songs and genres will be enacted as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eArtists have many songs and a song belongs to an artist.\u003c/li\u003e\n\u003cli\u003eArtists have many genres through songs.\u003c/li\u003e\n\u003cli\u003eSongs belong to a genre.\u003c/li\u003e\n\u003cli\u003eA genre has many songs.\u003c/li\u003e\n\u003cli\u003eA genre has many artists through songs.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe will build these associations through the use of Active Record migrations and\nmacros.\u003c/p\u003e\n\n\u003ch2\u003eBuilding our Migrations\u003c/h2\u003e\n\n\u003ch3\u003eThe Song model\u003c/h3\u003e\n\n\u003cp\u003eA song will belong to an artist \u003cem\u003eand\u003c/em\u003e belong to a genre. Before we worry about\nthe migration that will implement this in our songs table, let's think about\nwhat that table will look like:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003cth\u003eartist_id\u003c/th\u003e\n\u003cth\u003egenre_id\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003eShake It Off\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eWe can see that the songs table will have an \u003ccode\u003eartist_id\u003c/code\u003e column and a \u003ccode\u003egenre_id\u003c/code\u003e\ncolumn. We will give a given song an \u003ccode\u003eartist_id\u003c/code\u003e value of the artist it belongs\nto. The same goes for genre. These foreign keys, in conjunction with the\nActive Record association macros will allow our query to get an artist's songs or\ngenres, a song's artist or genre, and a genre's songs and artists entirely\nthrough Active Record provided methods on our classes.\u003c/p\u003e\n\n\u003cp\u003eLet's write the migration that will make this happen.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOpen a file, \u003ccode\u003edb/migrate/03_create_songs.rb\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite the following migration:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateSongs \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :songs do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.integer :artist_id\u003cbr\u003e      t.integer :genre_id\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe Artist Model\u003c/h3\u003e\n\n\u003cp\u003eAn artist will have many songs and it will have many genres \u003cem\u003ethrough\u003c/em\u003e songs.\nThese associations will be taken care of entirely through AR macros, which we'll\nget to in a bit. What do we mean by \u003cem\u003ethrough\u003c/em\u003e songs? The table songs is the\n\u003ccode\u003eJOIN\u003c/code\u003e table! Remember that from previous labs? That means that songs has both\nan \u003ccode\u003eartist_id\u003c/code\u003e and a \u003ccode\u003egenre_id\u003c/code\u003e to combine those two tables together in a\nmany-to-many relationship.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at what our \u003ccode\u003eartists\u003c/code\u003e table will need to look like:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003eTaylor Swift\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eOur artists table just needs a \u003ccode\u003ename\u003c/code\u003e column. Let's write the migration. In\n\u003ccode\u003edb/migrate/01_create_artists.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateArtists \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :artists do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe Genre Model\u003c/h3\u003e\n\n\u003cp\u003eA genre will have many songs and it will have many artists through songs. These\nassociations will be taken care of entirely through AR macros, which we'll get\nto in a bit.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at what our genres table will need to look like:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eid\u003c/th\u003e\n\u003cth\u003ename\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003epop\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eLet's write our migration. In \u003ccode\u003edb/migrate/02_create_genres.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateGenres \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :genres do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! Now go ahead and run \u003ccode\u003erake db:migrate\u003c/code\u003e in your terminal to execute our\ntable creations.\u003c/p\u003e\n\n\u003ch2\u003eBuilding our Associations using AR Macros\u003c/h2\u003e\n\n\u003ch3\u003eWhat is a macro?\u003c/h3\u003e\n\n\u003cp\u003eA macro is a method that writes code for us (think metaprogramming). By invoking\na few methods that come with Active Record, we can implement all of the\nassociations we've been discussing.\u003c/p\u003e\n\n\u003cp\u003eWe'll be using the following AR macros (or methods):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-association\"\u003e\u003ccode\u003ehas_many\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association\"\u003e\u003ccode\u003ehas_many through\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association\"\u003e\u003ccode\u003ebelongs_to\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's get started.\u003c/p\u003e\n\n\u003ch3\u003eA Song Belongs to an Artist and A Genre\u003c/h3\u003e\n\n\u003cp\u003eCreate a file, \u003ccode\u003eapp/models/song.rb\u003c/code\u003e. Define your \u003ccode\u003eSong\u003c/code\u003e class to inherit from\n\u003ccode\u003eActiveRecord::Base\u003c/code\u003e. This is very important! If we don't inherit from Active\nRecord Base, we won't get our fancy macro methods.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe need to tell the \u003ccode\u003eSong\u003c/code\u003e class that it will produce objects that can belong to\nan artist. We will do it with the \u003ccode\u003ebelongs_to\u003c/code\u003e macro:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :artist\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSongs also belong to a genre, so we'll use the same macro to implement that\nrelationship:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :artist\u003cbr\u003e  belongs_to :genre\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAn Artist Has Many Songs\u003c/h3\u003e\n\n\u003cp\u003eCreate a file, \u003ccode\u003eapp/models/artist.rb\u003c/code\u003e. Define your \u003ccode\u003eArtist\u003c/code\u003e class to inherit\nfrom \u003ccode\u003eActiveRecord::Base\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe need to tell the \u003ccode\u003eArtist\u003c/code\u003e class that each artist object can have many songs.\nWe will use the \u003ccode\u003ehas_many\u003c/code\u003e macro to do it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd that's it! Now, because our songs table has an \u003ccode\u003eartist_id\u003c/code\u003e column and\nbecause our \u003ccode\u003eArtist\u003c/code\u003e class uses the \u003ccode\u003ehas_many\u003c/code\u003e macro, an artist has many songs!\u003c/p\u003e\n\n\u003cp\u003eIt is also true that an artist has many genres through songs. We will use the\n\u003ccode\u003ehas_many through\u003c/code\u003e macro to implement this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e  has_many :genres, through: :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eGenres Have Many Songs and Have Many Artists\u003c/h3\u003e\n\n\u003cp\u003eCreate a file \u003ccode\u003eapp/models/genre.rb\u003c/code\u003e. In it, define a class, \u003ccode\u003eGenre\u003c/code\u003e, to inherit\nfrom \u003ccode\u003eActiveRecord::Base\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Genre \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA genre can have many songs. Let's implement that with the \u003ccode\u003ehas_many\u003c/code\u003e macro:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Genre \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA genre also has many artists through its songs. Let's implement this\nrelationship with the \u003ccode\u003ehas_many through\u003c/code\u003e macro:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Genre \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :songs\u003cbr\u003e  has_many :artists, through: :songs\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd that's it! The tests in this lesson are in place to ensure you've properly\nset up these associations. You can go ahead and run \u003ccode\u003elearn test\u003c/code\u003e now to see if you\npass them all before continuing.\u003c/p\u003e\n\n\u003ch2\u003eOur Code in Action: Working with Associations\u003c/h2\u003e\n\n\u003cp\u003eGo ahead and run the test suite and you'll see that we are passing all of our\ntests! Amazing! Our associations are all working, just because of our migrations\nand use of macros.\u003c/p\u003e\n\n\u003cp\u003eLet's play around with our code.\u003c/p\u003e\n\n\u003cp\u003eIn your console, run \u003ccode\u003erake console\u003c/code\u003e. Now we are in a Pry console that accesses\nour models.\u003c/p\u003e\n\n\u003cp\u003eLet's make a few new songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1]pry(main)\u0026gt; hello = Song.new(name: \"Hello\")\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[2]pry(main)\u0026gt; hotline_bling = Song.new(name: \"Hotline Bling\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, here we have two songs. Let's make some artists to associate them to. In\nthe \u003cem\u003esame PRY sessions as above\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[3] pry(main)\u0026gt; adele = Artist.new(name: \"Adele\")\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[4] pry(main)\u0026gt; drake = Artist.new(name: \"Drake\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, we know that an individual song has an \u003ccode\u003eartist_id\u003c/code\u003e attribute. We \u003cem\u003ecould\u003c/em\u003e\nassociate \u003ccode\u003ehello\u003c/code\u003e to \u003ccode\u003eadele\u003c/code\u003e by setting \u003ccode\u003ehello.artist_id=\u003c/code\u003e equal to the \u003ccode\u003eid\u003c/code\u003e of\nthe \u003ccode\u003eadele\u003c/code\u003e object. BUT! Active Record makes it so easy for us. The macros we\nimplemented in our classes allow us to associate a song object directly to an\nartist object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[5] pry(main)\u0026gt; hello.artist = adele\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, we can ask \u003ccode\u003ehello\u003c/code\u003e who its artist is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[6] pry(main)\u0026gt; hello.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can even chain methods to ask \u003ccode\u003ehello\u003c/code\u003e for the \u003cem\u003ename\u003c/em\u003e of its artist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[7] pry(main)\u0026gt; hello.artist.name\u003cbr\u003e=\u0026gt; \"Adele\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWow! This is great, but we're not quite where we want to be. Right now, we've\nbeen able to assign an artist to a song, but is the reverse true?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[7] pry(main)\u0026gt; adele.songs\u003cbr\u003e=\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this case, we still need to tell the \u003ccode\u003eadele\u003c/code\u003e Artist instance which songs\nit has. We can do this by pushing the song instance into \u003ccode\u003eadele.songs\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[7] pry(main)\u0026gt; adele.songs.push(hello)\u003cbr\u003e=\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, now both sides of the relationships are updated, but so far all the work\nwe've done has been with temporary instances of Artist and Song. To persist\nthese relationships, we can use Active Record's \u003ccode\u003esave\u003c/code\u003e functionality:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; adele.save\u003cbr\u003e=\u0026gt; true\u003cbr\u003e[9] pry(main)\u0026gt; adele\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that \u003ccode\u003eadele\u003c/code\u003e now has an \u003ccode\u003eid\u003c/code\u003e. What about \u003ccode\u003ehello\u003c/code\u003e?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[10] pry(main)\u0026gt; hello\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa! We didn't mention \u003ccode\u003ehello\u003c/code\u003e when we saved. However, we established an\nassociation by assigning \u003ccode\u003ehello\u003c/code\u003e as a song \u003ccode\u003eadele\u003c/code\u003e \u003cem\u003ehas\u003c/em\u003e. In order for \u003ccode\u003eadele\u003c/code\u003e\nto save, \u003ccode\u003ehello\u003c/code\u003e must also be saved. Thus, \u003ccode\u003ehello\u003c/code\u003e has also been given an \u003ccode\u003eid\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and do the same for \u003ccode\u003ehotline_bling\u003c/code\u003e and \u003ccode\u003edrake\u003c/code\u003e to try it out on your\nown.\u003c/p\u003e\n\n\u003ch2\u003eAdding Additional Associations\u003c/h2\u003e\n\n\u003cp\u003eNow, let's make a second song for adele:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; someone_like_you = Song.new(name: \"Someone Like You\")\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[8] pry(main)\u0026gt; someone_like_you.artist = adele\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've only updated the song, so we should expect that \u003ccode\u003eadele\u003c/code\u003e is not\naware of this song:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; someone_like_you.artist\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[9] pry(main)\u0026gt; adele.songs\u003cbr\u003e=\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven if we save the song, \u003ccode\u003eadele\u003c/code\u003e will not be updated.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; someone_like_you.save\u003cbr\u003e=\u0026gt; true\u003cbr\u003e[8] pry(main)\u0026gt; someone_like_you\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[9] pry(main)\u0026gt; adele.songs\u003cbr\u003e=\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut lets see what happens when we switch some things around. Creating one more\nsong:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; set_fire_to_the_rain = Song.new(name: \"Set Fire to the Rain\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen add the song to \u003ccode\u003eadele\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[9] pry(main)\u0026gt; adele.songs.push(set_fire_to_the_rain)\u003cbr\u003e=\u0026gt; [#, #]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa! Check it out - we did not explicitly save \u003ccode\u003eset_fire_to_the_rain\u003c/code\u003e, but just\nby pushing the instance into \u003ccode\u003eadele.songs\u003c/code\u003e, Active Record has gone ahead and\nsaved the instance. Not only that, notice that the song instance \u003cem\u003ealso has an\naritst\u003c/em\u003eid!_\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[8] pry(main)\u0026gt; set_fire_to_the_rain.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo what is happening? Active Record is doing things for us behind the scenes,\nbut when dealing with associations, it will behave differently depending on\nwhich side of a relationship between two models you are updating.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRemember\u003c/strong\u003e: In a \u003ccode\u003ehas_many\u003c/code\u003e/\u003ccode\u003ebelongs_to\u003c/code\u003e relationship, we can think of the\nmodel that \u003ccode\u003ehas_many\u003c/code\u003e as the parent in the relationship. The model that\n\u003ccode\u003ebelongs_to\u003c/code\u003e, then, is the child. If you tell the child that it belongs to\nthe parent, \u003cem\u003ethe parent won't know about that relationship\u003c/em\u003e. If you tell the\nparent that a certain child object has been added to its collection, \u003cem\u003eboth the\nparent and the child will know about the association\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's see this in action again. Let's create another new song and add it to \u003ccode\u003eadele\u003c/code\u003e's\nsongs collection:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[10] pry(main)\u0026gt; rolling_in_the_deep = Song.new(name: \"Rolling in the Deep\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e[11] pry(main)\u0026gt; adele.songs \u0026lt;\u0026lt; rolling_in_the_deep\u003cbr\u003e=\u0026gt; [ #]\u003cbr\u003e[12] pry(main)\u0026gt; rolling_in_the_deep.artist\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe added \u003ccode\u003erolling_in_the_deep\u003c/code\u003e to \u003ccode\u003eadele\u003c/code\u003e's collection of songs and we can see\nthe \u003ccode\u003eadele\u003c/code\u003e knows it has that song in the collection \u003cem\u003eand\u003c/em\u003e \u003ccode\u003erolling_in_the_deep\u003c/code\u003e\nknows about its artist. Not only that, \u003ccode\u003erolling_in_the_deep\u003c/code\u003e is now persisted to\nthe database.\u003c/p\u003e\n\n\u003cp\u003eNotice that \u003ccode\u003eadele.songs\u003c/code\u003e returns an array of songs. When a model \u003ccode\u003ehas_many\u003c/code\u003e of\nsomething, it will store those objects in an array. To add to that collection,\nwe use the shovel operator, \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, to operate on that collection, and treat\n\u003ccode\u003eadele.songs\u003c/code\u003e like any other array.\u003c/p\u003e\n\n\u003cp\u003eLet's play around with some genres and our has many through association.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[13] pry(main)\u0026gt; pop = Genre.create(name: \"pop\")\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis time, we'll just use \u003ccode\u003ecreate\u003c/code\u003e directly, which would be the same as running\n\u003ccode\u003eGenre.new\u003c/code\u003e, then \u003ccode\u003eGenre.save\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[14] pry(main)\u0026gt; pop.songs \u0026lt;\u0026lt; rolling_in_the_deep\u003cbr\u003e=\u0026gt; [#]\u003cbr\u003e[15] pry(main)\u0026gt; pop.songs\u003cbr\u003e=\u0026gt; [#]\u003cbr\u003e[16] pry(main)\u0026gt; rolling_in_the_deep.genre\u003cbr\u003e=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's working! But even cooler is that we've established has many \u003cem\u003ethrough\u003c/em\u003e\nrelationships. By creating a genre, then pushing a song into that genre's list\nof songs, \u003cem\u003ethe genre will now be able to produce its associated artists!\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[16] pry(main)\u0026gt; rolling_in_the_deep.artist\u003cbr\u003e=\u0026gt; #\u003cbr\u003e[17] pry(main)\u0026gt; pop.artists\u003cbr\u003e=\u0026gt; [#]\u003cbr\u003e[28] pry(main)\u0026gt; adele.genres\u003cbr\u003e=\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSo, order and direction of operations does matter when establishing associations\nbetween models - it is typically better to update the \u003ccode\u003ehas_many\u003c/code\u003e side of a\nrelationship to get the full benefit of Active Record's power. Still, as we can\nsee, with just migrations and Active Record macros, we can start to build and\npersist associations between things!\u003c/p\u003e\n\n\u003ch2\u003eVideo Reviews\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=5dqPYRsQd10\"\u003eActive Record Associations\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=l9JCzNN2Z2U\"\u003eActive Record Associations II\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=WVBWlnUghOI\"\u003eAliasing Active Record Associations\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=ZfJ1rqFcNFU\"\u003eBlog CLI with Active Record and Associations\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g22910e3f6c2fc9f1304203283fb3059e","title":"Attribute Accessors Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-attribute-accessors-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-attribute-accessors-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice defining a class\u003c/li\u003e\n\u003cli\u003eUse macros to create setter and getter methods\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-fundamentals/attribute-accessors-lab/Image_137_CatInaBox%28B%29.jpg\" alt=\"Image by Dominic Albers from Pixabay\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be creating a Cat class. Every instance of a Cat should have\na name and be able to meow. In other words, I should be able to do:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emaru = Cat.new\u003cbr\u003emaru.name = \"Maru\"\u003cbr\u003e\u003cbr\u003emaru.name\u003cbr\u003e# =\u0026gt; \"Maru\"\u003cbr\u003e\u003cbr\u003emaru.meow\u003cbr\u003e# \"meow!\"\u003cbr\u003e# =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eRun the test suite to get started. You'll be writing all your code in the \u003ccode\u003elib/meowing_cat.rb\u003c/code\u003e file.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a class, called Cat.\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eattr_accessor\u003c/code\u003e macro to create a setter and getter method for a cat's name.\u003c/li\u003e\n\u003cli\u003eWrite a method, \u003ccode\u003e.meow\u003c/code\u003e, that outputs \"meow!\" to the terminal using the \u003ccode\u003eputs\u003c/code\u003e method when called on an instance of Cat.\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6d18d8e99ce852eb648faa1f16409a53","title":"Badges and Schedules Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"badges-and-schedules\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/badges-and-schedules/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/badges-and-schedules\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/badges-and-schedules/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine methods that use iteration and control the return values of those methods.\u003c/li\u003e\n\u003cli\u003eDefine methods that call other methods.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab you'll be learning how to iterate through an array and output the\nresults in different ways. Write your code in the \u003ccode\u003econference_badges.rb\u003c/code\u003e file\nand you can run the test suite using the \u003ccode\u003elearn test\u003c/code\u003e command.\u003c/p\u003e\n\n\u003ch3\u003eCreate a \u003ccode\u003ebadge_maker\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eYou're hosting a conference and need to print badges for the speakers. Each\nbadge should read: \u003ccode\u003e\"Hello, my name is _____.\"\u003c/code\u003e Write a \u003ccode\u003ebadge_maker\u003c/code\u003e method that,\nwhen provided a person's name, will create and return this message. E.g.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebadge_maker(\"Arel\")\u003cbr\u003e=\u0026gt; \"Hello, my name is Arel.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eCreate a \u003ccode\u003ebatch_badge_creator\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eOnce the list of speakers for your conference has been finalized you'll want to\nget the badges printed for all of your speakers.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a \u003ccode\u003ebatch_badge_creator\u003c/code\u003e method that takes an array of names as an\nargument and returns an array of badge messages.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCreate an \u003ccode\u003eassign_rooms\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eYou just realized that you also need to give each speaker a room assignment.\nWrite a method called \u003ccode\u003eassign_rooms\u003c/code\u003e that takes the list of speakers and assigns\neach speaker to a room. Make sure that each room only has one speaker.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eYou have rooms 1-7.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ereturn a list of room assignments in the form of: \"Hello, _____! You'll\nbe assigned to room _____!\"\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cem\u003eHint\u003c/em\u003e: Think about how you will assign a room number to each person. Array\nitems are indexed, meaning that you can access each element by its index\nnumber. When you are iterating through an array, you can keep track of the\nindex number of the current iteration using an enumerator method called\n\u003ca href=\"http://ruby-doc.org/core-2.2.2/Enumerable.html#method-i-each_with_index\"\u003e\u003ccode\u003eeach_with_index\u003c/code\u003e\u003c/a\u003e or a closely related method called \u003ca href=\"https://stackoverflow.com/questions/20258086/difference-between-each-with-index-and-each-with-index-in-ruby\"\u003e\u003ccode\u003e.with_index\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cem\u003eHint\u003c/em\u003e: Remember that the return value of the \u003ccode\u003eeach\u003c/code\u003e (or \u003ccode\u003eeach_with_index\u003c/code\u003e)\nmethod is the original array that you are calling it on. What we need to do\nhere is iterate through the array containing the list of speakers, create the\nroom assignment strings for each speaker, and return a \u003cem\u003enew\u003c/em\u003e array containing\nthe messages. There is an enumerator method that does just that. Google or use\n\u003ca href=\"http://docs.ruby-lang.org/en/2.0.0/Enumerable.html\"\u003eRuby Docs\u003c/a\u003e to find the\ncorrect method.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCreate a \u003ccode\u003eprinter\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eNow you have to tell the printer what to print. Create a method called \u003ccode\u003eprinter\u003c/code\u003e\nthat will output first the results of the \u003ccode\u003ebatch_badge_creator\u003c/code\u003e method and then\nof the \u003ccode\u003eassign_rooms\u003c/code\u003e method to the screen.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eHint\u003c/em\u003e: Remember that methods can call other methods. If the return value of\n\u003ccode\u003eassign_rooms\u003c/code\u003e is an array of room assignments, how can you print out each\nassignment? You'll need to iterate over your array of room assignments in\norder to \u003ccode\u003eputs\u003c/code\u003e out each individual assignment.\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3004b4a8ad0947bfeb61c43643882ef6","title":"Basic Hashes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-basic-hashes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-basic-hashes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-basic-hashes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-basic-hashes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild simple hashes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIt's time to practice what we've learned about Ruby hashes. In this lab, your\ntask is to implement a set of three methods. Each method will require you to\ncomplete some basic hash creation.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eCode your solutions for the following four methods in the\n\u003ccode\u003elib/intro_to_ruby_hashes_lab.rb\u003c/code\u003e file.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eImplement a method called \u003ccode\u003enew_hash\u003c/code\u003e that creates and returns a new, empty\nhash.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eImplement a method called \u003ccode\u003emy_hash\u003c/code\u003e that returns a valid hash. This hash should\nhave at least one key/value pair of your choice.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eImplement a method called \u003ccode\u003epioneer\u003c/code\u003e that returns a hash. This hash should have a\nkey that is a symbol \u003ccode\u003e:name\u003c/code\u003e and whose value is a string, \u003ccode\u003e'Grace Hopper'\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eImplement a method called \u003ccode\u003eid_hash_generator\u003c/code\u003e that takes in one parameter, an\ninteger. This method should create and return a hash with a key \u003ccode\u003e:id\u003c/code\u003e with\nthe integer as the value.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTry your best to solve these. Use \u003ccode\u003elearn\u003c/code\u003e and follow the test suite messages as\nyou work through your solution and \u003ccode\u003elearn submit\u003c/code\u003e when you're finished with your\nwork. Check out the walkthrough below if you get stuck.\u003c/p\u003e\n\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\n\u003cp\u003eThe four methods we'll be working in are already provided in\n\u003ccode\u003elib/intro_to_ruby_hashes.rb\u003c/code\u003e, so all we need to do is write the implementation\nfor each.\u003c/p\u003e\n\n\u003cp\u003eThe first method, \u003ccode\u003enew_hash\u003c/code\u003e, should return a new, empty hash. The most direct way\nto do this is to write a hash in its implicit form:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef new_hash\u003cbr\u003e  {}\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlternatively, we could explicitly create a new \u003ccode\u003eHash\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef new_hash\u003cbr\u003e  Hash.new\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we don't see this as often.\u003c/p\u003e\n\n\u003cp\u003eWhen first learning to work with hashes, it is common to think we always need to\nassign it to a variable, so your solution might look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef new_hash\u003cbr\u003e  hash = {}\u003cbr\u003e  hash\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr even this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef new_hash\u003cbr\u003e  hash = {}\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile both of these are valid code and return an empty hash, the variable is not\nneeded. All that matters is what gets returned. Because Ruby methods use\nimplicit return, when we create a hash using \u003ccode\u003e{}\u003c/code\u003e, we can return that directly.\u003c/p\u003e\n\n\u003cp\u003eFor the second method, \u003ccode\u003emy_hash\u003c/code\u003e, we will also return a hash. This hash must have some\nkey/value pair included. Your choice.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef my_hash\u003cbr\u003e  { :favorite_color =\u0026gt; \"blue\" }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using symbols for keys, we can write key/value pairs as seen above, or\nwith the alternative syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef my_hash\u003cbr\u003e  { favorite_color: \"blue\" }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor the third method, \u003ccode\u003epioneer\u003c/code\u003e, the task is the same as the previous method.\nExcept this time, the key should be \u003ccode\u003e:name\u003c/code\u003e and the value should be \u003ccode\u003eGrace\nHopper\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef pioneer\u003cbr\u003e  { name: \"Grace Hopper\" }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the final method, \u003ccode\u003eid_hash_generator\u003c/code\u003e, we need to use a parameter. This\nparameter should be assigned to the \u003ccode\u003e:id\u003c/code\u003e key in a hash, and the hash should be\nreturned. Similar to the previous methods, we return a hash, giving it one key.\nThe value will be set to whatever the parameter is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef id_hash_generator(number)\u003cbr\u003e  { id: number }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eHashes are an essential data type that we will use frequently. Now that you've\npracticed the basics of creating hashes, we will practice reading and updating\nthem.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby.about.com/od/rubyfeatures/a/hashes.htm\"\u003eWhat is a Hash in Ruby?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/core-2.5.1/Hash.html\"\u003eRuby Documentation on Hashes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd552bf91e2f25211c9601cc0e35b773a","title":"Building Nested Hashes Code-Along Part 1","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-building-nested-hashes-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a nested hash.\u003c/li\u003e\n\u003cli\u003eAccess and manipulate data in nested hashes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCode Along Challenge: Epic Tragedy\u003c/h2\u003e\n\n\u003cp\u003eYou're 16 years old and back in high school English class. Luckily for us, our\nteacher is kind of lazy and we get to watch the \u003cem\u003eRomeo and Juliet\u003c/em\u003e movie from\nthe '90s starring Leonardo DiCaprio and Claire Danes.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/RomeoandJuliet5.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBut there's a Romeo and Juliet quiz our teacher has scheduled for us that we\nneed to get ready for. We will definitely be required to answer some questions\non the cast of characters and their attributes and relationships to one another.\nLet's map out that information:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/nested-hashes/Image_7_NestedHash.png\" alt=\"Montague/Capulet Family Tree\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat we have here is a nested data structure. There are different levels or\ntiers of information. On the top tier, we have family names. Beneath that we\nhave key characters, and beneath that we have their attributes. We have an\nadditional layer of the hero/heroine's friends because there are multiple\nfriends. Now that we have a sense of the structure that our collection of\ninformation is taking, we're going to build a nested hash that displays it in\nthe same nested way. Our end result will look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e  :montague =\u0026gt; {\u003cbr\u003e    :patriarch =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Lord Montague\",\u003cbr\u003e      :age =\u0026gt; \"53\"\u003cbr\u003e  },\u003cbr\u003e    :matriarch =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Lady Montague\",\u003cbr\u003e      :age =\u0026gt; \"54\"\u003cbr\u003e  },\u003cbr\u003e    :hero =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Romeo\",\u003cbr\u003e      :age =\u0026gt; \"15\"\u003cbr\u003e  },\u003cbr\u003e    :hero_friends =\u0026gt; [\u003cbr\u003e      {\u003cbr\u003e         :name =\u0026gt; \"Benvolio\",\u003cbr\u003e         :age =\u0026gt; \"17\",\u003cbr\u003e         :attitude =\u0026gt; \"worried\"\u003cbr\u003e      },\u003cbr\u003e      {\u003cbr\u003e        :name =\u0026gt; \"Mercutio\",\u003cbr\u003e        :age =\u0026gt; \"18\",\u003cbr\u003e        :attitude =\u0026gt; \"hot-headed\"\u003cbr\u003e      }\u003cbr\u003e    ]\u003cbr\u003e  },\u003cbr\u003e  :capulet =\u0026gt; {\u003cbr\u003e    :patriarch =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Lord Capulet\",\u003cbr\u003e      :age =\u0026gt; \"50\"\u003cbr\u003e    },\u003cbr\u003e    :matriarch =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Lady Capulet\",\u003cbr\u003e      :age =\u0026gt; \"51\"\u003cbr\u003e    },\u003cbr\u003e    :heroine =\u0026gt; {\u003cbr\u003e      :name =\u0026gt; \"Juliet\",\u003cbr\u003e      :age =\u0026gt; \"15\",\u003cbr\u003e      :status =\u0026gt; \"alive\"\u003cbr\u003e    },\u003cbr\u003e    :heroine_friends=\u0026gt; [\u003cbr\u003e      {\u003cbr\u003e        :name =\u0026gt; \"Steven\",\u003cbr\u003e        :age =\u0026gt; \"30\",\u003cbr\u003e        :attitude =\u0026gt; \"confused\"\u003cbr\u003e      },\u003cbr\u003e      {\u003cbr\u003e        :name =\u0026gt; \"Nurse\",\u003cbr\u003e        :age =\u0026gt; \"44\",\u003cbr\u003e        :attitude =\u0026gt; \"worried\"\u003cbr\u003e      }\u003cbr\u003e    ]\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You might notice that we are storing ages as strings. That is\nbecause the ages here are not numbers that we need to frequently do math with.\nIf a hash value was a number that we needed to manipulate, then we would store\nit as an integer. For example, if it was the price of an item that we need to\ncalculate the tax on, then the price would be stored as an integer or float.\nOtherwise, it is conventional to store information like a person's age as a\nstring.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eRemember that the \u003ccode\u003ekey: value\u003c/code\u003e syntax is the same as the \u003ccode\u003e:key =\u0026gt; value\u003c/code\u003e syntax\nused above. Get ready to see them both used in different applications and\nsources.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis is a complicated data structure. We're going to build it up one step at a\ntime, so for each challenge, a separate file is provided in \u003ccode\u003elib\u003c/code\u003e. Follow along\nwith the walk-through below. When finished, use \u003ccode\u003elearn\u003c/code\u003e and \u003ccode\u003elearn_submit\u003c/code\u003e to\nregister completion of this lesson.\u003c/p\u003e\n\n\u003ch3\u003eCode Along Challenge I: Family Names\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/first_challenge.rb\u003c/code\u003e, you're going to fill out the content of the\n\u003ccode\u003eepic_tragedy\u003c/code\u003e hash. The first level of our nested hash are the keys for the\nfamily names, \"Montague\" and \"Capulet\". We've made them symbols above, because\nsymbols make better hash keys than strings.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSet the \u003ccode\u003eepic_tragedy\u003c/code\u003e variable equal to a hash with two key/value pairs. The\nkeys should be symbols of the family names (\u003ccode\u003e:montague\u003c/code\u003e and \u003ccode\u003e:capulet\u003c/code\u003e) and the\nvalues should be empty hashes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAt this point, we have a hash that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e  :montague =\u0026gt; {},\u003cbr\u003e  :capulet =\u0026gt; {}\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow it's time to fill out the second level of our hash — the collection of data\nthat constitutes the value hashes of each family name key.\u003c/p\u003e\n\n\u003ch3\u003eCode Along Challenge II: Character Roles\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/second_challenge.rb\u003c/code\u003e, you'll find the hash you built in the previous\nchallenge.\u003c/p\u003e\n\n\u003cp\u003eFill out the empty hash that is the value of the \u003ccode\u003e:montague\u003c/code\u003e key. There are four\nkeys in this hash:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:patriarch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:matriarch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:hero\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:hero_friends\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe first three of these keys point to the value of an empty hash. The fourth key\n\u003ccode\u003e:hero_friends\u003c/code\u003e has the value of an empty array.\u003c/p\u003e\n\n\u003cp\u003eThen, do the same for the empty hash that is the value of the \u003ccode\u003e:capulet\u003c/code\u003e key.\nThis time, your keys are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:patriarch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:matriarch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:heroine\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:heroine_friends\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe values are the same as described above. Once you get this test passing, you\nshould have a hash that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e   :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {},\u003cbr\u003e      :matriarch =\u0026gt; {},\u003cbr\u003e      :hero =\u0026gt; {},\u003cbr\u003e      :hero_friends =\u0026gt; []\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {},\u003cbr\u003e      :matriarch =\u0026gt; {},\u003cbr\u003e      :heroine =\u0026gt; {},\u003cbr\u003e      :heroine_friends =\u0026gt; []\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we're ready to fill out the empty hashes that constitute the values for the\n\u003ccode\u003e:patriarch\u003c/code\u003e, \u003ccode\u003e:matriarch\u003c/code\u003e and \u003ccode\u003e:hero\u003c/code\u003e/\u003ccode\u003e:heroine\u003c/code\u003e keys, nested inside the family\nname keys of our epic \u003ccode\u003eepic_tragedy hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eCode Along Challenge III: Character Attributes\u003c/h3\u003e\n\n\u003cp\u003eAccording to the diagram that we saw at the very beginning of this exercise,\neach character has a set of attributes. Matriarch and Patriarchs have a name and\nan age. The hero and heroine each have a name, age and status.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/third_challenge\u003c/code\u003e, you'll find the hash that you built in the previous\nchallenge. Fill out the empty hashes that are the values of the \u003ccode\u003e:patriarch\u003c/code\u003e,\n\u003ccode\u003e:matriarch\u003c/code\u003e, and \u003ccode\u003e:hero\u003c/code\u003e/\u003ccode\u003e:heroine\u003c/code\u003e keys with the following key/value pairs.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe Montague \u003ccode\u003e:patriarch\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Lord Montague\" and\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"53\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Montague \u003ccode\u003e:matriarch\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Lady Montague\" and\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"54\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Montague \u003ccode\u003e:hero\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Romeo\",\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"15\", and\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:status\u003c/code\u003e of \"alive\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Capulet \u003ccode\u003e:patriarch\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Lord Capulet\" and\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"50\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Capulet \u003ccode\u003e:matriarch\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Lady Capulet\" and\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"51\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Capulet \u003ccode\u003e:heroine\u003c/code\u003e has\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:name\u003c/code\u003e of \"Juliet\",\u003c/li\u003e\n\u003cli\u003ean \u003ccode\u003e:age\u003c/code\u003e of \"15\", and\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:status\u003c/code\u003e of \"alive\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOnce you get this test passing, you should have the following hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e   :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; []\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; []\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe're almost done. Our hero and heroine have two friends each. That constitutes\na collection of friends. Since they each have a collection of friends, it makes\nsense to collect those friends in an array. Since each friend will have his or\nher own attributes (name, age, etc), our array will be \u003cem\u003ean array of hashes\u003c/em\u003e!\u003c/p\u003e\n\n\u003ch3\u003eCode Along Challenge IV: Nesting Friends and Attributes\u003c/h3\u003e\n\n\u003cp\u003eThe values of the \u003ccode\u003e:hero_friends\u003c/code\u003e and \u003ccode\u003e:heroine_friends\u003c/code\u003e keys currently point to\nempty arrays. Why arrays? Well, we know that an individual person can be\nrepresented by a hash. However, our hero and heroine have multiple friends. So,\nwe need a way to store their friends in list-form. Luckily for us, that's just\nwhat arrays are for.\u003c/p\u003e\n\n\u003cp\u003eFill out these empty arrays with a series of hashes that will contain key/value\npairs describing these friends.\u003c/p\u003e\n\n\u003cp\u003eThe hero's two friends are Benvolio and Mercutio. So, the \u003ccode\u003e:hero_friends\u003c/code\u003e array\nwill contain two hashes. Each of these two hashes has the following three keys:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:name\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:age\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:attitude\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe hero's first friend has\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea name of \"Benvolio\",\u003c/li\u003e\n\u003cli\u003ean age of \"17\", and\u003c/li\u003e\n\u003cli\u003ean attitude of \"worried\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe hero's second friend has\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea name of \"Mercutio\",\u003c/li\u003e\n\u003cli\u003ean age of \"18\", and\u003c/li\u003e\n\u003cli\u003ean attitude of \"hot-headed\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe heroine's two friends are Steven and Nurse. So, the \u003ccode\u003e:heroine_friends\u003c/code\u003e array\nwill contain two hashes. Each of these two hashes has the following three keys:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:name\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:age\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:attitude\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe heroine's first friend has\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea name of \"Steven\",\u003c/li\u003e\n\u003cli\u003ean age of \"30\", and\u003c/li\u003e\n\u003cli\u003ean attitude of \"confused\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe heroine's second friend has\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea name of \"Nurse\",\u003c/li\u003e\n\u003cli\u003ean age of \"44\", and\u003c/li\u003e\n\u003cli\u003ean attitude of \"worried\".\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOnce you get this test passing, your hash should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e   :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; [\u003cbr\u003e         {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e         {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e      ]\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; [\u003cbr\u003e          {name: \"Steven\", age: \"30\", attitude: \"confused\"},\u003cbr\u003e          {name: \"Nurse\", age: \"44\", attitude: \"worried\"}\u003cbr\u003e      ]\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNested hashes can be very complex! However, their structure is very consistent.\nOnce data is contained within a hash, as long as we have the right keys, we can\naccess data from anywhere on the hash, no matter how deeply nested the data is.\u003c/p\u003e\n\n\u003cp\u003eGood night, good night! parting is such sweet sorrow, That I shall say good\nnight till it be morrow.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g02480f3d8d7450f000d0070f55fee067","title":"Building Nested Hashes Code-Along Part 2","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-building-nested-hashes-code-along-part-2\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along-part-2/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along-part-2\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes-code-along-part-2/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAccess and manipulate data in nested hashes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eEpic Tragedy Returned\u003c/h2\u003e\n\n\u003cp\u003eWe are going to continue with our previous example of Shakespearean works. This\ntime, we will spare you the literature lesson - the nested hashes of characters\nare provided this time. Your task will be to access and modify those hashes.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch2\u003eManipulating A Hash\u003c/h2\u003e\n\n\u003cp\u003eIn previous lessons, we learned that you can access a value in a hash like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehash = {first: \"first value!\", second: \"second value!\"}\u003cbr\u003e\u003cbr\u003ehash[:first]\u003cbr\u003e#  =\u0026gt; \"first value!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo access the values in a nested hash, we simply tack on additional keys,\nuntil we have the last key that points to the value we want to access.\u003c/p\u003e\n\n\u003cp\u003eFor example, if we had the following hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e  :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; [\u003cbr\u003e         {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e         {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e      ]\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; [\u003cbr\u003e        {name: \"Steven\", age: \"30\", attitude: \"confused\"},\u003cbr\u003e        {name: \"Nurse\", age: \"44\", attitude: \"worried\"}\u003cbr\u003e      ]\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo access the Montague patriarch's name, we use the hash name, \u003ccode\u003eepic_tragedy\u003c/code\u003e,\nfollowed by a chained list of all of the key names that precede the value of his\nname, enclosed in brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:patriarch][:name]\u003cbr\u003e#  =\u0026gt; \"Lord Montague\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can even use this method to change the value of a particular key. If we\nwanted to reset the Montague patriarch's name to \"Michael Jordan\", we would do\nit in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:patriarch][:name] = \"Michael Jordan\"\u003cbr\u003e\u003cbr\u003eputs epic_tragedy\u003cbr\u003e\u003cbr\u003e#  =\u0026gt;\u003cbr\u003e{\u003cbr\u003e   :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Michael Jordan\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; [\u003cbr\u003e        {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e        {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e      ]\u003cbr\u003e   },\u003cbr\u003e   :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; [\u003cbr\u003e        {name: \"Steven\", age: \"30\", attitude: \"confused\"},\u003cbr\u003e        {name: \"Nurse\", age: \"44\", attitude: \"worried\"}\u003cbr\u003e      ]\u003cbr\u003e   }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/nested-hashes/Image_8_NestedHash.png\" alt=\"Montague/Capulet Family Tree w/ Michael Jordan\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eArrays in Hashes\u003c/h2\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eepic_tragedy\u003c/code\u003e hash, both the \u003ccode\u003e:montague\u003c/code\u003e and \u003ccode\u003e:capulet\u003c/code\u003e nested hashes\ncontain arrays, \u003ccode\u003e:hero_friends\u003c/code\u003e and \u003ccode\u003eheroine_friends\u003c/code\u003e. Similar to how we chain\nmultiple keys in brackets to access nested hashes, we can also chain brackets\nwith integers for nested arrays. For instance, if we wanted to access the hash\ncontaining Mercutio's information, we would need to access the second element in\nthe \u003ccode\u003e:hero_friends\u003c/code\u003e array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero_friends][1]\u003cbr\u003e#  =\u0026gt; {:name=\u0026gt;\"Mercutio\", :age=\u0026gt;\"18\", :attitude=\u0026gt;\"hot-headed\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd if we wanted to go further, we can continue to chain brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero_friends][1][:name]\u003cbr\u003e#  =\u0026gt; \"Mercutio\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eChallenge\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/updating_nested_hashes.rb\u003c/code\u003e, your task is to finish two methods,\n\u003ccode\u003eupdate_status\u003c/code\u003e and \u003ccode\u003eadd_characters\u003c/code\u003e. In each, a hash is provided that need to\nbe modified. Rather than directly change the hash, try to write a programmatic\nsolution for modifying the hash content.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003eupdate_status\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eFor the \u003ccode\u003eupdate_status\u003c/code\u003e method,  you'll see an \u003ccode\u003eepic_tragedy\u003c/code\u003e hash is provided.\nWe've come to the end of the epic tragedy of Romeo and Juliet. At this point in\nthe story, Romeo and Juliet are — as in every good tragedy — quite dead.\u003c/p\u003e\n\n\u003cp\u003eAdd code to the \u003ccode\u003eupdate_status\u003c/code\u003e method to change the status of our hero Romeo\nand our heroine Juliet from \"alive\" to \"dead\".\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003efix_roles\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn the second method for this lab, \u003ccode\u003eadd_characters\u003c/code\u003e, we are starting again with\nan \u003ccode\u003eepic_tragedy\u003c/code\u003e hash. This time your task is to add some nested content into\nthe hash. We want to shout out some of the important characters from the play\nthat aren't a part of either family. Alongside \u003ccode\u003e:montague\u003c/code\u003e and \u003ccode\u003e:capulet\u003c/code\u003e, add a\nthird key to \u003ccode\u003eepic_tragedy\u003c/code\u003e, \u003ccode\u003e:additional_characters\u003c/code\u003e. This key should point to\nan array.\u003c/p\u003e\n\n\u003cp\u003eInside this array, add \u003cstrong\u003etwo hashes\u003c/strong\u003e. Each hash should contain a single key,\n\u003ccode\u003e:name\u003c/code\u003e. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFor the first hash, assign \u003ccode\u003e\"Prince Escalus\"\u003c/code\u003e as the \u003ccode\u003e:name\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eFor the  second  hash, assign \u003ccode\u003e\"Apothecary\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn\u003c/code\u003e to track your progress and \u003ccode\u003elearn submit\u003c/code\u003e when you've finished your\nwork. A walkthrough is provided below, but try to first solve these as best you\ncan.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNested hashes can be very complex! However, their structure is very consistent.\nOnce data is contained within a hash, as long as we have the right keys, we can\naccess data from anywhere on the hash, no matter how deeply nested the data is.\u003c/p\u003e\n\n\u003cp\u003eGood night, good night! parting is such sweet sorrow, That I shall say good\nnight till it be morrow.\u003c/p\u003e\n\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\n\u003ch3\u003e\u003ccode\u003eupdate_status\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor \u003ccode\u003eupdate_status\u003c/code\u003e,  we're given the following array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy = {\u003cbr\u003e  :montague =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :hero_friends =\u0026gt; [\u003cbr\u003e        {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e        {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e      ]\u003cbr\u003e  },\u003cbr\u003e  :capulet =\u0026gt; {\u003cbr\u003e      :patriarch =\u0026gt; {name: \"Lord Capulet\", age: \"50\"},\u003cbr\u003e      :matriarch =\u0026gt; {name: \"Lady Capulet\", age: \"51\"},\u003cbr\u003e      :heroine =\u0026gt; {name: \"Juliet\", age: \"15\", status: \"alive\"},\u003cbr\u003e      :heroine_friends =\u0026gt; [\u003cbr\u003e      {name: \"Steven\", age: \"30\", attitude: \"confused\"},\u003cbr\u003e      {name: \"Nurse\", age: \"44\", attitude: \"worried\"}\u003cbr\u003e      ]\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe  need to change the \u003ccode\u003e:status\u003c/code\u003e of Romeo and Juliet to \u003ccode\u003e\"dead\"\u003c/code\u003e. The first step\nwould be to find a way to \u003cem\u003eaccess\u003c/em\u003e status.  We can read the hash above and see\nwhat needs to change (and change it directly), but the task is to think of a\nprogrammatic solution.\u003c/p\u003e\n\n\u003cp\u003eFor Romeo, we see that the \u003ccode\u003eepic_tragedy\u003c/code\u003e hash contains a \u003ccode\u003e:montague\u003c/code\u003e key\npointing to a nested hash. We can start by accessing this nested hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague]\u003cbr\u003e # =\u0026gt; {\u003cbr\u003e #      :patriarch =\u0026gt; {name: \"Lord Montague\", age: \"53\"},\u003cbr\u003e #      :matriarch =\u0026gt; {name: \"Lady Montague\", age: \"54\"},\u003cbr\u003e #      :hero =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"},\u003cbr\u003e #      :hero_friends =\u0026gt; [\u003cbr\u003e #        {name: \"Benvolio\", age: \"17\", attitude: \"worried\"},\u003cbr\u003e #        {name: \"Mercutio\", age: \"18\", attitude: \"hot-headed\"}\u003cbr\u003e #      ]\u003cbr\u003e #    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis hash contains a \u003ccode\u003e:hero\u003c/code\u003e key, which points to\nanother hash. We can chain brackets and add this key to previous code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero]\u003cbr\u003e # =\u0026gt; {name: \"Romeo\", age: \"15\", status: \"alive\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is in \u003cem\u003ethis\u003c/em\u003e hash that the \u003ccode\u003e:status\u003c/code\u003e key is present. We'll chain another\nbracket, this time for \u003ccode\u003e:status\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero][:status]\u003cbr\u003e # =\u0026gt; \"alive\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we can access \u003ccode\u003e:status\u003c/code\u003e, we can modify it by assigning it a different\nvalue, in our case, \u003ccode\u003e\"dead\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:montague][:hero][:status] = \"dead\"\u003cbr\u003e # =\u0026gt; \"dead\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor Juliet, we follow the same process using the \u003ccode\u003e:capulet\u003c/code\u003e and \u003ccode\u003e:heroine\u003c/code\u003e keys\ninstead.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eadd_characters\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor the second method, we are again given an \u003ccode\u003eepic_tragedy\u003c/code\u003e hash (don't worry\nthat Romeo and Juliet are still alive, we're not testing for that). This time,\nwe need to add an \u003ccode\u003e:additional_characters\u003c/code\u003e key to the hash. This key should\npoint to an array of two hashes, each with a \u003ccode\u003e:name\u003c/code\u003e key. The first name will be\n\u003ccode\u003e\"Prince Escalus\"\u003c/code\u003e, and the second will be \u003ccode\u003e\"Apothecary\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSimilar to changing a value in a hash, we can add a key/value pair by providing\nboth the key we want to add and the value it should point to. If the key doesn't\nexist, it will be created.\u003c/p\u003e\n\n\u003cp\u003eWe can first add the key and assign it to an empty array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters] = []\u003cbr\u003e # =\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe next step would be to add the two hashes. We might do this with variables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprince = { name: \"Prince Escalus\" }\u003cbr\u003eapothecary = { name: \"Apothecary\" }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd then push these into the array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters] \u0026lt;\u0026lt; prince\u003cbr\u003eepic_tragedy[:additional_characters] \u0026lt;\u0026lt; apothecary\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we can skip over the variables entirely and go straight to pushing the\nhashes when they're created:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters] \u0026lt;\u0026lt; { name: \"Prince Escalus\" }\u003cbr\u003eepic_tragedy[:additional_characters] \u0026lt;\u0026lt; { name: \"Apothecary\" }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr we could assign these hashes using chained brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters][0] = { name: \"Prince Escalus\" }\u003cbr\u003eepic_tragedy[:additional_characters][1] = { name: \"Apothecary\" }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAny of these options will work. It is also perfectly valid to compose the\ncreation of both hashes when creating the array they are in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eepic_tragedy[:additional_characters] = [\u003cbr\u003e  { name: \"Prince Escalus\" },\u003cbr\u003e  { name: \"Apothecary\" }\u003cbr\u003e]\u003cbr\u003e # =\u0026gt; [{:name=\u0026gt;\"Prince Escalus\"}, {:name=\u0026gt;\"Apothecary\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expression above will handle everything needed for the \u003ccode\u003eadd_characters\u003c/code\u003e\nmethod.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g77706b22896b0ace277c93dfe0a3a32c","title":"Building Nested Hashes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-building-nested-hashes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-building-nested-hashes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a nested hash\u003c/li\u003e\n\u003cli\u003eAdd key/value pairs in a nested hash\u003c/li\u003e\n\u003cli\u003eUpdate key/value pairs in a nested hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we will practice constructing deeply-nested \u003ccode\u003eHash\u003c/code\u003e. This means\nthat we'll have a \u003ccode\u003eHash\u003c/code\u003e that contains a \u003ccode\u003eHash\u003c/code\u003e inside of it. Those \"interior\"\nor \"inner\" \u003ccode\u003eHash\u003c/code\u003ees might \u003cem\u003ethemselves\u003c/em\u003e contain \u003ccode\u003eHash\u003c/code\u003ees.\u003c/p\u003e\n\n\u003cp\u003eAs a reminder, this might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Greatly abbreviated!\u003cbr\u003ecountries_and_capitals_of_the_world = {\u003cbr\u003e  :north_america =\u0026gt; {\u003cbr\u003e    \"Canada\" =\u0026gt; {\u003cbr\u003e      :capital =\u0026gt; \"Ottawa\",\u003cbr\u003e      :capital_climate =\u0026gt; \"Kőppen Dfb\"\u003cbr\u003e    },\u003cbr\u003e    \"USA\" =\u0026gt; {\u003cbr\u003e      :capital =\u0026gt; \"Washington D.C.\",\u003cbr\u003e      :capital_climate =\u0026gt; \"Kőppen Cfa\"\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  :africa =\u0026gt; {\u003cbr\u003e    \"Ghana\" =\u0026gt; {\u003cbr\u003e      :capital =\u0026gt; \"Accra\",\u003cbr\u003e      :capital_climate =\u0026gt; \"Kőppen Aw\"\u003cbr\u003e    },\u003cbr\u003e    \"Nigeria\" =\u0026gt; {\u003cbr\u003e      :capital =\u0026gt; \"Abuja\",\u003cbr\u003e      :capital_climate =\u0026gt; \"Kőppen Aw\"\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe will work through this lab by filling out the \u003cem\u003eimplementation\u003c/em\u003e of four\nmethods. Each method will return a \u003ccode\u003eHash\u003c/code\u003e that is \u003cstrong\u003e\u003cem\u003elocally defined\u003c/em\u003e\u003c/strong\u003e within\nthat method's implementation. The comments in \u003ccode\u003e./intro_to_ruby_hashes_lab.rb\u003c/code\u003e\nand the results of running the tests will guide you.\u003c/p\u003e\n\n\u003ch3\u003eProcess\u003c/h3\u003e\n\n\u003cp\u003eWe're going to write the implementation of 4 methods to gradually build out a\ndeeply nested hash:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebase_hash\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emonopoly_with_second_tier\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emonopoly_with_third_tier\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emonopoly_with_fourth_tier\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor the second, third and fourth methods, we'll be updating the hash we created\nin the previous method, only one tier deeper into the hash.\u003c/p\u003e\n\n\u003cp\u003eThis means that after successfully implementing the first method, \u003ccode\u003ebash_hash\u003c/code\u003e,\ncopy your solution into \u003ccode\u003emonopoly_with_second_tier\u003c/code\u003e. There are some additional\nexpectations for the \u003ccode\u003emonopoly_with_second_tier\u003c/code\u003e, so what you just copied won't\n\u003cem\u003equite\u003c/em\u003e work. Modify the hash until you're passing all the tests for this second\nmethod. Repeate this process by copying this solution into\n\u003ccode\u003emonopoly_with_third_tier\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis lab has a detailed set of tests to guide you, so use \u003ccode\u003elearn\u003c/code\u003e to get\nadditional information on what is required.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ebash_hash\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should do the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ereturn a hash with one key called \u003ccode\u003e:railroads\u003c/code\u003e that points to an empty hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003emonopoly_with_second_tier\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method builds on the hash returned by \u003ccode\u003ebase_hash\u003c/code\u003e, updating the nested\n\u003ccode\u003e:railroads\u003c/code\u003e hash so that it includes\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea key called \u003ccode\u003e:pieces\u003c/code\u003e set to \u003ccode\u003e4\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ea key called \u003ccode\u003e:rent_in_dollars\u003c/code\u003e set to an empty hash\u003c/li\u003e\n\u003cli\u003ea key called \u003ccode\u003e:names\u003c/code\u003e set to an empty hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003emonopoly_with_third_tier\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method builds on the hash returned by monopoly\u003cem\u003ewith\u003c/em\u003esecond\u003cem\u003etier updating\nthe nested `:rent\u003c/em\u003ein_dollars` hash so that it includes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:one_piece_owned\u003c/code\u003e key set to \u003ccode\u003e25\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:two_pieces_owned\u003c/code\u003e key set to \u003ccode\u003e50\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:three_pieces_owned\u003c/code\u003e key set to \u003ccode\u003e100\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:four_pieces_owned\u003c/code\u003e key set to \u003ccode\u003e200\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn addition, this method should also update the nested \u003ccode\u003e:names\u003c/code\u003e hash so that it includes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea \u003ccode\u003e:reading_railroad\u003c/code\u003e key that points to an empty hash\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:pennsylvania_railroad\u003c/code\u003e key that points to an empty hash\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:b_and_o_railroad\u003c/code\u003e key that points to an empty hash\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e:shortline_railroad\u003c/code\u003e key that points to an empty hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\u003ccode\u003emonopoly_with_fourth_tier\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method builds on the hash returned by monopoly\u003cem\u003ewith\u003c/em\u003ethird_tier, updating\neach of the nested hashes inside the \u003ccode\u003e:names\u003c/code\u003e hash so that\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethe hash assigned to \u003ccode\u003e:reading_railroad\u003c/code\u003e includes a \u003ccode\u003e:mortgage_value\u003c/code\u003e key set\nto \u003ccode\u003e100\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ethe hash assigned to \u003ccode\u003e:pennsylvania_railroad\u003c/code\u003e includes a \u003ccode\u003e:mortgage_value\u003c/code\u003e key set to \u003ccode\u003e200\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ethe hash assigned to \u003ccode\u003e:b_and_o_railroad\u003c/code\u003e includes a \u003ccode\u003e:mortgage_value\u003c/code\u003e key set to \u003ccode\u003e400\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ethe hash assigned to \u003ccode\u003e:shortline_railroad\u003c/code\u003e includes a \u003ccode\u003e:mortgage_value\u003c/code\u003e key set to \u003ccode\u003e800\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf you get stumped, we've included the final \u003ccode\u003eHash\u003c/code\u003e in the\nfile \u003ccode\u003efinal_hash.rb\u003c/code\u003e in this repository.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ePATTERN FOR LEARNING\u003c/strong\u003e: We've seen many students take the final answer and\npare it down to get the tests passing. This is not a good path to mastering\nthis concept. The path that requires work in programming, at the gym, or in\nrelationships creates the most benefit. Passing tests now is not as valuable\nas understanding these concepts later.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations! You've built a pretty complex \u003ccode\u003eHash\u003c/code\u003e with nesting. This should\nprove to you that there's very little in this world that \u003cem\u003ecan't\u003c/em\u003e be modeled\nwith nesting of \u003ccode\u003eHash\u003c/code\u003ees, scalar values, and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby-doc.org/core-2.5.0/Hash.html\"\u003eRuby Documentation on Hashes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://ruby.about.com/od/rubyfeatures/a/hashes.htm\"\u003eWhat is a Hash in Ruby?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g07a1445500508e6e48733e24d69fc5af","title":"Cartoon Collections Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cartoon-collections\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/cartoon-collections/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cartoon-collections\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cartoon-collections/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eCartoon Collections\u003c/h2\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eGet familiar iterating through arrays with enumerator methods like\n\u003ccode\u003e.collect\u003c/code\u003e or \u003ccode\u003e.map\u003c/code\u003e, \u003ccode\u003e.find\u003c/code\u003e, and \u003ccode\u003e.include?\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eBuild methods and control their return values.\u003c/li\u003e\n\u003cli\u003ePractice control flow with \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThere are four methods to complete in this lab:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e \u003ccode\u003eroll_call_dwarves\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e \u003ccode\u003esummon_captain_planet\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e \u003ccode\u003elong_planeteer_calls\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e \u003ccode\u003efind_the_cheese\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003eMethod 1 — \u003ccode\u003eroll_call_dwarves\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/web-dev-readme-photos/cartoon-collections/dwarves.jpg\" alt=\"dwarves\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis method should accept an array of dwarf names, for instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"Doc\", \"Dopey\", \"Bashful\", \"Grumpy\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should then print out each name, in number order, using \u003ccode\u003eputs\u003c/code\u003e. The print-out\nshould look like this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003col\u003e\n\u003cli\u003e Doc\u003c/li\u003e\n\u003cli\u003e Dopey\u003c/li\u003e\n\u003cli\u003e Bashful\u003c/li\u003e\n\u003cli\u003e Grumpy\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLook into the \u003ca href=\"http://ruby-doc.org/core/Enumerable.html#method-i-each_with_index\"\u003e\u003ccode\u003eeach_with_index\u003c/code\u003e\u003c/a\u003e method.\u003c/p\u003e\n\n\u003cp\u003eOnce the test for this method is passing, move on to the next method.\u003c/p\u003e\n\n\u003ch4\u003eMethod 2 — \u003ccode\u003esummon_captain_planet\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/web-dev-readme-photos/cartoon-collections/captain-planet.jpeg\" alt=\"captain-planet\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis method should accept an array argument of planeteer calls that will look\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eplaneteer_calls = [\"earth\", \"wind\", \"fire\", \"water\", \"heart\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should then capitalize each element and add an exclamation point at the end.\nThe return value of this method should be an array, in this example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esummon_captain_planet(planeteer_calls)\u003cbr\u003e#=\u0026gt; [\"Earth!\", \"Wind!\", \"Fire!\", \"Water!\", \"Heart!\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e.map\u003c/code\u003e or \u003ccode\u003e.collect\u003c/code\u003e method might be appropriate for this task, take a look\nat it \u003ca href=\"http://stackoverflow.com/a/12084555/2890716\"\u003ehere\u003c/a\u003e and \u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-map\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eOnce the test for this method is passing, move on to the next method, long\nplaneteer calls.\u003c/p\u003e\n\n\u003ch4\u003eMethod 3 — \u003ccode\u003elong_planeteer_calls\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003elong_planeteer_calls\u003c/code\u003e method should accept an array of calls. The method\nshould tell us if any of the calls are longer than four characters. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshort_words = [\"puff\", \"go\", \"two\"]\u003cbr\u003elong_planeteer_calls(short_words)\u003cbr\u003e#=\u0026gt; false\u003cbr\u003e\u003cbr\u003eassorted_words = [\"two\", \"go\", \"industrious\", \"bop\"]\u003cbr\u003elong_planeteer_calls(assorted_words)\u003cbr\u003e#=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice the return value of this method is either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, depending on\nthe array it was given as an argument.\u003c/p\u003e\n\n\u003cp\u003eCheckout the \u003ca href=\"http://ruby-doc.org/core/Array.html\"\u003eRuby docs on arrays\u003c/a\u003e for a hint.\u003c/p\u003e\n\n\u003cp\u003eOnce the test for this method is passing, move on to the last method.\u003c/p\u003e\n\n\u003ch4\u003eMethod 4 — \u003ccode\u003efind_the_cheese\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/web-dev-readme-photos/cartoon-collections/cheese.jpg\" alt=\"dancing-mice\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003efind_the_cheese\u003c/code\u003e method should accept an array of strings. It should then\nlook through these strings to find and return the first string that is a type of\ncheese. The types of cheese that appear are \u003ccode\u003e\"cheddar\"\u003c/code\u003e, \u003ccode\u003e\"gouda\"\u003c/code\u003e, and\n\u003ccode\u003e\"camembert\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esnacks = [\"crackers\", \"gouda\", \"thyme\"]\u003cbr\u003efind_the_cheese(snacks)\u003cbr\u003e#=\u0026gt; \"gouda\"\u003cbr\u003e\u003cbr\u003esoup = [\"tomato soup\", \"cheddar\", \"oyster crackers\", \"gouda\"]\u003cbr\u003efind_the_cheese(soup)\u003cbr\u003e#=\u0026gt; \"cheddar\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf, sadly, a list of ingredients does not include cheese, return \u003ccode\u003enil\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eingredients = [\"garlic\", \"rosemary\", \"bread\"]\u003cbr\u003efind_the_cheese(ingredients)\u003cbr\u003e#=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can assume that all strings will be lowercase. Take a look at the\n\u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-include-3F\"\u003e\u003ccode\u003e.include\u003c/code\u003e\u003c/a\u003e method for a hint. This method asks you to return a string\nvalue instead of printing it so keep that in mind.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"http://ruby-doc.org/core/Enumerable.html#method-i-each_with_index\"\u003e\u003ccode\u003e.each_with_index\u003c/code\u003e method\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eThe \u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-map\"\u003e\u003ccode\u003e.map\u003c/code\u003e method\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eThe \u003ca href=\"http://ruby-doc.org/core/Array.html#method-i-include-3F\"\u003e\u003ccode\u003e.include\u003c/code\u003e method\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g855fff1e296ac436eb6793ae654d0f6e","title":"Class Constants","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-class-constants\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-class-constants/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-class-constants\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-class-constants/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand what a class constant is\u003c/li\u003e\n\u003cli\u003eUse a class constant\u003c/li\u003e\n\u003cli\u003eKnow when to use \u003ccode\u003eattr_accessor\u003c/code\u003e VS creating the methods yourself\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003ePreviously, we saw how to make each individual instance of a class hold on to the information about itself.  A book object, an instance of the \u003ccode\u003eBook\u003c/code\u003e class, knew its own title and author and genre.  Building upon that, you will learn to add functionality that allows a class to hold information from across all the instances of that class that have been created.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRead through the tutorial, following along as you go.\u003c/li\u003e\n\u003cli\u003eOnce you've finished, make the tests in \u003ccode\u003espec/01_book_spec.rb\u003c/code\u003e pass. Run only those tests by typing \u003ccode\u003elearn spec/01_book_spec.rb\u003c/code\u003e on your command line.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eTutorial\u003c/h2\u003e\n\n\u003cp\u003eIn this tutorial, we are given a simple \u003ccode\u003eBook\u003c/code\u003e class that has already been implemented with some basic functionality. It has properties like a title, an author, a page count, etc. Our job is to have the class somehow be able to keep track of all of the genres of all of the Books we create.\u003c/p\u003e\n\n\u003ch3\u003eClass Constants\u003c/h3\u003e\n\n\u003cp\u003eLet's run the tests for the first time, and see what our first failure is. The output in your terminal should be something similar to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book GENRES keeps track of all genres\u003cbr\u003e     Failure/Error: expect(Book::GENRES).to include(genre)\u003cbr\u003e     NameError:\u003cbr\u003e       uninitialized constant Book::GENRES\u003cbr\u003e     # ./spec/01_book_spec.rb:11:in `block (4 levels) in '\u003cbr\u003e     # ./spec/01_book_spec.rb:10:in `each'\u003cbr\u003e     # ./spec/01_book_spec.rb:10:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, so this is new. This syntax, \u003ccode\u003eBook::GENRES\u003c/code\u003e tells us a couple of things. First, whenever we see \u003ccode\u003e::\u003c/code\u003e, it indicates \"name spacing\". In other words, it tells us that the thing on the right side of the colons is a thing defined within the context, or name space, of the thing on the left side of the colons.\u003c/p\u003e\n\n\u003cp\u003eIn this case, this is telling us that there is a constant, \u003ccode\u003eGENRES\u003c/code\u003e (we know it's a constant because it's written in all caps) that is defined within our \u003ccode\u003eBook\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eThis is what is known as a Class Constant.\u003c/p\u003e\n\n\u003cp\u003eClass Constants are available to all instances of a particular class. Whereas instance variables, i.e. title, author, etc., are individual to each instance of a class, class constants are shared among \u003cstrong\u003eall\u003c/strong\u003e instances. They all have access to the same data, and if that data should change for some reason, all instances will know about that change.\u003c/p\u003e\n\n\u003cp\u003eLet's go ahead and define this constant. Since it's plural, I'm going to guess that it should be an array, so I'll start by defining it as an empty array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  attr_accessor :author, :page_count, :genre\u003cbr\u003e  attr_reader :title\u003cbr\u003e\u003cbr\u003e  GENRES = []\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis next error, after running the specs again, though, is kind of weird:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book GENRES keeps track of all genres\u003cbr\u003e     Failure/Error: expect(Book::GENRES).to include(genre)\u003cbr\u003e       expected [] to include \"Thriller\"\u003cbr\u003e     # ./spec/01_book_spec.rb:11:in `block (4 levels) in '\u003cbr\u003e     # ./spec/01_book_spec.rb:10:in `each'\u003cbr\u003e     # ./spec/01_book_spec.rb:10:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe really have no clue how in the world our array would magically contain \"Thriller\", so let's look at the specific test to figure out what's going on. Here's what we have in \u003ccode\u003espec/01_book_spec.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe 'GENRES' do\u003cbr\u003e  it 'keeps track of all genres' do\u003cbr\u003e    genres = [\"Thriller\", \"Science Fiction\", \"Romance\"]\u003cbr\u003e    genres.each_with_index do |genre, i|\u003cbr\u003e      book = Book.new(\"Book_#{i}\")\u003cbr\u003e      book.genre = genre\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    genres.each do |genre|\u003cbr\u003e      expect(Book::GENRES).to include(genre)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, it looks like what's going on is this:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe test is creating a bunch of books.\u003c/li\u003e\n\u003cli\u003eThe test is assigning each of those books a genre.\u003c/li\u003e\n\u003cli\u003eThe test is expecting our GENRES class constant to keep track of those genres.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOk, so let's think about this for a second. Where in that sequence of events can \u003ccode\u003eGENRES\u003c/code\u003e be updated? Well, it can't be in step one. None of the books starts out having a genre. Maybe it happens in step two, but I'm not sure.\u003c/p\u003e\n\n\u003cp\u003eNo, wait...it \u003cem\u003ehas\u003c/em\u003e to happen in step two. After the books are assigned their genres, nothing else happens before the test checks to see that \u003ccode\u003eBook::GENRES\u003c/code\u003e knows about those genres. What does this mean, then?\u003c/p\u003e\n\n\u003cp\u003eIt means that something else needs to happen in our \u003ccode\u003egenre=\u003c/code\u003e method. We need to somehow update our \u003ccode\u003eGENRES\u003c/code\u003e constant in that method. Remember, our \u003ccode\u003egenre=\u003c/code\u003e method (along with our \u003ccode\u003egenre\u003c/code\u003e method) is created by the following line of code: \u003ccode\u003eattr_accessor :genre\u003c/code\u003e. Since we want to add some customization to the method, we'll have to do three things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eExplicitly define the \u003ccode\u003egenre=\u003c/code\u003e method, to integrate our class constant into the method\u003c/li\u003e\n\u003cli\u003eRemove the \u003ccode\u003eattr_accessor\u003c/code\u003e for \u003ccode\u003e:genre\u003c/code\u003e since we no longer need to generate a reader AND a writer.\u003c/li\u003e\n\u003cli\u003eAdd an \u003ccode\u003eattr_reader\u003c/code\u003e for \u003ccode\u003e:genre\u003c/code\u003e, since we still want Ruby to generate a reader for us.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSo, let's do that!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  attr_accessor :author, :page_count  # remove the attr_accessor for genre\u003cbr\u003e  attr_reader :title, :genre  # add an attr_reader for genre\u003cbr\u003e\u003cbr\u003e  GENRES = []\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # create the writer for genre and add the logic for the class constant\u003cbr\u003e  def genre=(genre)\u003cbr\u003e    @genre = genre\u003cbr\u003e    GENRES \u0026lt;\u0026lt; genre \u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow all the tests will pass!\nTry to complete the similar exercise below where the \u003ccode\u003eShoe\u003c/code\u003e class can keep track of all of the brands of the different show objects.\u003c/p\u003e\n\n\u003ch2\u003eShoe Class\u003c/h2\u003e\n\n\u003cp\u003eOpen \u003ccode\u003espec/02_shoe_spec.rb\u003c/code\u003e and start making the tests pass. Write your code in \u003ccode\u003eshoe.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo run the specs, type \u003ccode\u003elearn spec/02_shoe_spec.rb\u003c/code\u003e on your command line.\u003c/p\u003e\n\n\u003cp\u003eHappy coding!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge2dff3b4e4d762ebb575b402d05ac9ca","title":"Classes and Instances Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-classes-and-instances-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-classes-and-instances-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine new Ruby classes with the \u003ccode\u003eclass\u003c/code\u003e keyword.\u003c/li\u003e\n\u003cli\u003eInstantiate instances of a \u003ccode\u003eclass\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lab is all about defining classes and instantiating instances.\u003c/p\u003e\n\n\u003ch3\u003e1. Define \u003ccode\u003eDog\u003c/code\u003e in \u003ccode\u003elib/dog.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eOpen \u003ccode\u003elib/dog.rb\u003c/code\u003e and add a class definition for a \u003ccode\u003eDog\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003e2. Make 3 dogs in \u003ccode\u003elib/dog.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eUnder your \u003ccode\u003eDog\u003c/code\u003e class definition, create three dogs in local variables, \u003ccode\u003efido\u003c/code\u003e, \u003ccode\u003esnoopy\u003c/code\u003e, and \u003ccode\u003elassie\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e3. Define a \u003ccode\u003ePerson\u003c/code\u003e in \u003ccode\u003elib/person.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eOpen \u003ccode\u003elib/person.rb\u003c/code\u003e and add a class definition for a \u003ccode\u003ePerson\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003e4. Make 2 people in \u003ccode\u003elib/person.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eUnder your \u003ccode\u003ePerson\u003c/code\u003e class definition, create two people in local variables, \u003ccode\u003eadele_goldberg\u003c/code\u003e and \u003ccode\u003ealan_kay\u003c/code\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8f2fb972913d348e5d5f279f26f1e47f","title":"Class Variables and Class Methods Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-class-variables-and-class-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-class-variables-and-class-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse class variables to keep track of data pertaining to a class.\u003c/li\u003e\n\u003cli\u003eDefine class methods to expose data pertaining to a class.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be dealing with a \u003ccode\u003eSong\u003c/code\u003e class. The \u003ccode\u003eSong\u003c/code\u003e class can produce individual songs. Each song has a name, an artist and a genre. We need our \u003ccode\u003eSong\u003c/code\u003e class to be able to keep track of the number of songs that it creates.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.count\u003cbr\u003e  # =\u0026gt; 30\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe need our \u003ccode\u003eSong\u003c/code\u003e class to be able to show us all of the artists of existing songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.artists\u003cbr\u003e  # =\u0026gt; [\"Jay-Z\", \"Drake\", \"Beyonce\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe need our \u003ccode\u003eSong\u003c/code\u003e class to be able to show us all of the genres of existing songs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.genres\u003cbr\u003e  # =\u0026gt; [\"Rap\", \"Pop\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe also need our \u003ccode\u003eSong\u003c/code\u003e class to be able to keep track of the number of songs of each genre it creates.\u003c/p\u003e\n\n\u003cp\u003eIn other words, calling:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.genre_count\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eShould return something like this;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"rap\" =\u0026gt; 5, \"rock\" =\u0026gt; 1, \"country\" =\u0026gt; 3}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLastly, we want our \u003ccode\u003eSong\u003c/code\u003e class to reveal to us the number of songs each artist is responsible for.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSong.artist_count\u003cbr\u003e  # =\u0026gt; {\"Beyonce\" =\u0026gt; 17, \"Jay-Z\" =\u0026gt; 40}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'll accomplish this with the use of class variables and methods.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine your \u003ccode\u003eSong\u003c/code\u003e class such that an individual song is initialized with a name, artist and genre.\u003c/li\u003e\n\u003cli\u003eThere should be an \u003ccode\u003eattr_accessor\u003c/code\u003e for those three attributes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eninety_nine_problems = Song.new(\"99 Problems\", \"Jay-Z\", \"rap\")\u003cbr\u003e\u003cbr\u003eninety_nine_problems.name\u003cbr\u003e  # =\u0026gt; \"99 Problems\"\u003cbr\u003e\u003cbr\u003eninety_nine_problems.artist\u003cbr\u003e  # =\u0026gt; \"Jay-Z\"\u003cbr\u003e\u003cbr\u003eninety_nine_problems.genre\u003cbr\u003e  # =\u0026gt; \"rap\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a class variable, \u003ccode\u003e@@count\u003c/code\u003e. We will use this variable to keep track of the number of new songs that are created from the \u003ccode\u003eSong\u003c/code\u003e class. Set this variable equal to \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAt what point should we increment our \u003ccode\u003e@@count\u003c/code\u003e of songs? Whenever a new song is created. Your \u003ccode\u003e#initialize\u003c/code\u003e method should use the \u003ccode\u003e@@count\u003c/code\u003e variable and increment the value of that variable by \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.count\u003c/code\u003e, that returns the total number of songs created.\u003c/li\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.genres\u003c/code\u003e that returns an array of all of the genres of existing songs. This array should contain only unique genres––no duplicates! Think about what you'll need to do to get this method working.\n\n\u003cul\u003e\n\u003cli\u003eYou'll need a class variable, let's call it \u003ccode\u003e@@genres\u003c/code\u003e, that is equal to an empty array.\u003c/li\u003e\n\u003cli\u003eWhen should you add genres to the array? Whenever a new song is created. Your \u003ccode\u003e#initialize\u003c/code\u003e method should add the genre of the song being created to the \u003ccode\u003e@@genres\u003c/code\u003e array. All genres should be added to the array. Control for duplicates when you code your \u003ccode\u003e.genres\u003c/code\u003e class method, not when you add genres to the original \u003ccode\u003e@@genres\u003c/code\u003e array. We will want to know how many songs of each genre have been created. We'll revisit that job a little later on.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.artists\u003c/code\u003e, that returns an array of all of the artists of the existing songs. This array should only contain unique artists––no repeats! Once again think about what you need to do to implement this behavior.\n\n\u003cul\u003e\n\u003cli\u003eYou'll need a class variable, let's call it \u003ccode\u003e@@artists\u003c/code\u003e, that is equal to an empty array.\u003c/li\u003e\n\u003cli\u003eWhen should you add artists to this array? Whenever a new song is intialized. Your \u003ccode\u003e#initialize\u003c/code\u003e method should add artists to the \u003ccode\u003e@@artists\u003c/code\u003e array.  All artists should be added to the array.  Control for duplicates when you code your \u003ccode\u003e.artists\u003c/code\u003e class method, not when you add artists to the original \u003ccode\u003e@@artists\u003c/code\u003e array.  We will want to know how many songs each have been assigned to each artist.  We'll revisit that job a little later on when we write our \u003ccode\u003e.artist_count\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.genre_count\u003c/code\u003e, that returns a hash in which the keys are the names of each genre. Each genre name key should point to a value that is the number of songs that have that genre.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eSong.genre_count\u003cbr\u003e  # =\u0026gt; {\"rap\" =\u0026gt; 5, \"rock\" =\u0026gt; 1, \"country\" =\u0026gt; 3}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis manner of displaying numerical data is called a \u003ca href=\"https://en.wikipedia.org/wiki/Histogram\"\u003ehistogram\u003c/a\u003e. How will you create your histogram? You will need to iterate over the \u003ccode\u003e@@genres\u003c/code\u003e array and populate a hash with the key/value pairs. You will need to check to see if the hash already contains a key of a particular genre. If so, increment the value of that key by one, otherwise, create a new key/value pair.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a class method, \u003ccode\u003e.artist_count\u003c/code\u003e, that returns a histogram similar to the one above, but for artists rather than genres. \u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9f3736f50013fdf744e734e5c2e39839","title":"Collaborating Objects Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-collaborating-objects-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-collaborating-objects-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eGain a deeper understanding of object relations.\u003c/li\u003e\n\u003cli\u003eBuild classes that interact with one another through associations and behavior.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis is a test-driven lab. Use the test file and test output to understand what\nis being asked of you as you follow the guidelines below.\u003c/p\u003e\n\n\u003cp\u003eIn this lab, we'll be dealing with an \u003ccode\u003eArtist\u003c/code\u003e class, a \u003ccode\u003eSong\u003c/code\u003e class, and an\n\u003ccode\u003eMP3Importer\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eBecause of the relationships between your classes, the \u003ccode\u003eArtist\u003c/code\u003e tests, i.e. the\ntests in \u003ccode\u003espec/artist_spec.rb\u003c/code\u003e, rely on some code in the \u003ccode\u003eSong\u003c/code\u003e class and vice\nversa. So, as you proceed through solving this lab, you will go back and forth\nbetween coding in \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe recommend starting out by getting some of the initial \u003ccode\u003eArtist\u003c/code\u003e tests passing\nand switching to write code in the \u003ccode\u003eSong\u003c/code\u003e class as directed by the test output.\nBecause of the complexity, let's walk through a guideline of how to think about\nthe problem as you're building out the solution.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eYou will be building an \u003ccode\u003eArtist\u003c/code\u003e class, a \u003ccode\u003eSong\u003c/code\u003e class, and an \u003ccode\u003eMP3Importer\u003c/code\u003e\nclass. At the top level, you can think about what we'll be doing in 3 steps:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe \u003ccode\u003eMP3Importer\u003c/code\u003e class will parse all the filenames in the \u003ccode\u003espec/fixtures\u003c/code\u003e folder\nand send the filenames to the Song class\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eSong\u003c/code\u003e class will be responsible for creating songs given each filename and\nsending the artist's name (a string) to the Artist class\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class will be responsible for either creating the artist (if the\nartist doesn't exist in our program yet) or finding the instance of that\nartist (if the artist does exist).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThinking about it this way will get us started. From this breakdown, it looks\nlike the \u003ccode\u003eMP3Importer\u003c/code\u003e relies on \u003ccode\u003eSong\u003c/code\u003e in order to do its job of parsing\nfilenames. \u003ccode\u003eSong\u003c/code\u003e relies on the \u003ccode\u003eArtist\u003c/code\u003e instances to build associations.\nTherefore, we'll start by working on \u003ccode\u003eArtist\u003c/code\u003e. Keep in mind though, that you\nwill need to build out related classes together in order to pass some tests, as\nthey work in collaboration.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eArtist\u003c/code\u003e class\u003c/h3\u003e\n\n\u003cp\u003eAn \u003ccode\u003eArtist\u003c/code\u003e should be initialized with a name and should have an attribute\naccessor for this name. The class should have an \u003ccode\u003e@@all\u003c/code\u003e class variable and\nstore all \u003ccode\u003eArtist\u003c/code\u003e instances in this variable.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist.all\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis class method should return all \u003ccode\u003eArtist\u003c/code\u003e instances.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist#add_song\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis instance method exists to tell a passed in \u003ccode\u003eSong\u003c/code\u003e instance it belongs to\n\u003cem\u003ethis\u003c/em\u003e \u003ccode\u003eArtist\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist#songs\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis instance method returns an Array of all songs that belong to this \u003ccode\u003eArtist\u003c/code\u003e\ninstance. This method should get all existing \u003ccode\u003eSong\u003c/code\u003e instances from \u003ccode\u003eSong\u003c/code\u003e and\nselect only the ones that are associated with this \u003ccode\u003eArtist\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist.find_or_create_by_name\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis class method should take the name that is passed in (remember, it will be a\nstring), and do one of two things: find the artist instance that has that name\nor create one if it doesn't exist. Either way, the return value of the method\nwill be an instance of an artist with the name attribute filled out.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eArtist#print_songs\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis instance methods outputs the names of all songs associated with this\n\u003ccode\u003eArtist\u003c/code\u003e instance.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eSong\u003c/code\u003e class\u003c/h3\u003e\n\n\u003cp\u003eA \u003ccode\u003eSong\u003c/code\u003e should be initialized with a name and have attribute accessors for\n\u003cstrong\u003ename\u003c/strong\u003e and \u003cstrong\u003eartist\u003c/strong\u003e. The \u003ccode\u003eSong\u003c/code\u003e class should have an \u003ccode\u003e@@all\u003c/code\u003e class variable\nand store all \u003ccode\u003eSong\u003c/code\u003e instances in this variable.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eSong.all\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis class method should return all \u003ccode\u003eSong\u003c/code\u003e instances.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eSong.new_by_filename\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis method will do four things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eIt must parse a filename to find the song name and artist name. (\u003cem\u003eHint: every\nfile separates the song and artist with a \u003ccode\u003e\" - \"\u003c/code\u003e\u003c/em\u003e).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFrom here, we will create a new song instance using the song name we gathered\nfrom the filename.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe'll also want to associate that new song with the appropriate artist. Use\nthe \u003ccode\u003eartist\u003c/code\u003e attribute accessor to assign this\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eReturn the new song instance.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYou may have seen something similar in the past where we have the instance of\nthe artist. If we had the artist object, we could simply assign the artist to\nthe song with some code that looks like this: \u003ccode\u003eour_song_instance.artist =\nour_artist_instance\u003c/code\u003e. Since we only have the artist name as a string (not an\ninstance of the Artist class), we'll create a method that takes in the name and\ngets the artist object. Let's call this \u003ccode\u003eSong#artist_name=\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003eSong#artist_name=\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis method will do two things. Both of these things will involve collaboration\nwith the \u003ccode\u003eArtist\u003c/code\u003e class:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTurn the artist's name as a string into an \u003ccode\u003eArtist\u003c/code\u003e object.\u003c/p\u003e\n\n\u003cp\u003eFirst we need to get the instance of the \u003ccode\u003eArtist\u003c/code\u003e class that represents that\nartist. There are two possibilities here:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEither we have to create that \u003ccode\u003eArtist\u003c/code\u003e instance, or\u003c/li\u003e\n\u003cli\u003eit already exists and we have to find that \u003ccode\u003eArtist\u003c/code\u003e instance.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTo achieve this, we'll need to collaborate with the \u003ccode\u003eArtist\u003c/code\u003e class. We want\nto send an artist's name (a string — remember we are getting this from\nthe parsed filename) to the \u003ccode\u003eArtist\u003c/code\u003e class and either create or find the\nartist instance. This sounds like a great place to use method\n\u003ccode\u003eArtist.find_or_create_by_name\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAssign the song to the artist. Now that we have the artist instance, we'll\nwant to again collaborate with the \u003ccode\u003eArtist\u003c/code\u003e class by calling on the\n\u003ccode\u003eArtist#add_song(some_song)\u003c/code\u003e method.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003e\n\u003ccode\u003eMP3Importer\u003c/code\u003e class\u003c/h3\u003e\n\n\u003cp\u003eBuild an \u003ccode\u003eMP3Importer\u003c/code\u003e class that:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eHas a \u003ccode\u003epath\u003c/code\u003e attribute that gets set on initialization.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eContains a \u003ccode\u003e#files\u003c/code\u003e method that parses the files in the \u003ccode\u003epath\u003c/code\u003e, returning an\narray that contains the file names. Make sure you only get \u003ccode\u003e.mp3\u003c/code\u003e files.\n\u003cstrong\u003eHint\u003c/strong\u003e: Google around for how to get a list of files in a directory! You\nmay want to look at the \u003ca href=\"https://ruby-doc.org/core-2.6.1/Dir.html\"\u003edocumentation for Ruby's built-in Dir\nclass\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eContains an \u003ccode\u003e#import\u003c/code\u003e method that sends the song names to the \u003ccode\u003eSong\u003c/code\u003e class.\nSpecifically, the method should call \u003ccode\u003eSong.new_by_filename\u003c/code\u003e, which will\nhandle the creation of \u003ccode\u003eSong\u003c/code\u003e instances and their associated \u003ccode\u003eArtist\u003c/code\u003e\ninstances.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eConclusion\u003c/h3\u003e\n\n\u003cp\u003eThese are just a few hints and guidelines to help you through this lab. Rely on\nthe guides here, refer to the previous lessons on object relations, and\n\u003cstrong\u003eread the test output and test files\u003c/strong\u003e. Never forget to ask a question \nif you are stuck. Good luck!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g83ef469c171c7ef08629316298118934","title":"Collections Practice Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"collections_practice\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/collections_practice/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/collections_practice\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/collections_practice/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBecome proficient at manipulating arrays\u003c/li\u003e\n\u003cli\u003ePractice using higher level Ruby enumerators like \u003ccode\u003e.collect\u003c/code\u003e and \u003ccode\u003e.sort\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe goal of this lab is to become proficient at manipulating arrays.  Try experimenting with the built in Ruby methods as well as implementing your own logic to solve these.  Write methods that solve each of the rspec tests.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 1: \u003ccode\u003e#sort_array_asc\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esort_array_asc\u003c/code\u003e that takes in an array of integers and returns a copy of the array with the integers in ascending order.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 2: \u003ccode\u003e#sort_array_desc\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esort_array_desc\u003c/code\u003e that takes in an array of integers and returns a copy of the array with the integers in descending order. Remember that \u003ccode\u003e.sort\u003c/code\u003e takes a block in which you can specify how you want your array sorted.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 3: \u003ccode\u003e#sort_array_char_count\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esort_array_char_count\u003c/code\u003e that takes in an array of strings and returns a copy of the array with the strings ordered in ascending order by length. Remember that \u003ccode\u003e.sort\u003c/code\u003e takes a block in which you can specify how you want your array sorted.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 4: \u003ccode\u003e#swap_elements\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003eswap_elements\u003c/code\u003e that takes in an array and swaps the second and third elements. Remember that array indices start at \u003ccode\u003e0\u003c/code\u003e, so the second element has an index of \u003ccode\u003e1\u003c/code\u003e and the third element has an index of \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eTry building a method\u003c/em\u003e \u003ccode\u003eswap_elements_from_to\u003c/code\u003e \u003cem\u003ethat takes in three arguments,\u003c/em\u003e \u003ccode\u003earray, index, destination_index\u003c/code\u003e\u003cem\u003e, that will allow you to specify the index of the element you would like to move to a new index. So:\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eswap_elements_from_to([\"a\", \"b\", \"c\"],0,2) #=\u0026gt; [\"c\", \"b\", \"a\"]\u003cbr\u003eswap_elements_from_to([\"a\", \"b\", \"c\"],2,1) #=\u0026gt; [\"a\", \"c\", \"b\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced #2:\u003c/strong\u003e \u003cem\u003eTry writing test coverage for it!\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eQuestion 5: \u003ccode\u003e#reverse_array\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003ereverse_array\u003c/code\u003e that takes in an array of integers and returns a copy of the array with the elements in reverse order.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 6: \u003ccode\u003e#kesha_maker\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method called \u003ccode\u003ekesha_maker\u003c/code\u003e that takes in an array of strings and replaces the third character in each string with a \u003ccode\u003e$\u003c/code\u003e (\"dollar sign\")—Ke$ha style. Use the \u003ccode\u003e.each\u003c/code\u003e method to iterate and build a new array to return at the end of your method, just like we did in the \"My Each\" lab.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 7: \u003ccode\u003e#find_a\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003efind_a\u003c/code\u003e that returns all the strings in the array passed to it that \u003ccode\u003estart_with?\u003c/code\u003e (\u003cstrong\u003ehint\u003c/strong\u003e) the letter \u003ccode\u003e\"a\"\u003c/code\u003e. You'll want to use a high level iterator for this that finds, selects, or detects elements based on a condition.\u003c/p\u003e\n\n\u003ch2\u003eQuestion 8: \u003ccode\u003e#sum_array\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esum_array\u003c/code\u003e that adds together all of the integers in the array and returns their sum.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eTry using the\u003c/em\u003e \u003ccode\u003e.inject\u003c/code\u003e \u003cem\u003emethod here.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eQuestion 9: \u003ccode\u003e#add_s\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBuild a method that adds an \u003ccode\u003e\"s\"\u003c/code\u003e to each word in the array except for the second element in the array (\"feet\" is already plural).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e \u003cem\u003eIterators in Ruby are chainable, see if you can use\u003c/em\u003e \u003ccode\u003e.each_with_index\u003c/code\u003e \u003cem\u003ein addition to\u003c/em\u003e \u003ccode\u003e.collect\u003c/code\u003e \u003cem\u003eto solve this one in an elegant way. What happens if you write:\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1,2].each_with_index.collect{|element, index| }\n\u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g46203ba98efcce0dd221d36cb56e7932","title":"Complex Objects - Putting the Pieces Together","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-complex-objects-putting-the-pieces-together\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-putting-the-pieces-together/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-putting-the-pieces-together\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-complex-objects-putting-the-pieces-together/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eThis lab will walk you, step by step, through the basics of programming a\nsimple\u003ccode\u003eBook\u003c/code\u003e class. We've covered many of the concepts in this lab over a series\nof lessons. Now it is time to put everything togetheer. Once you've completed\nthe tutorial, you should know enough to complete a similar object-oriented\nproblem on your own.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRead through the tutorial, following along as you go.\u003c/li\u003e\n\u003cli\u003eOnce you've finished, make the tests in \u003ccode\u003espec/01_book_spec.rb\u003c/code\u003e pass. Run only\nthose tests by typing \u003ccode\u003elearn spec/01_book_spec.rb\u003c/code\u003e on your command line.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eTutorial\u003c/h2\u003e\n\n\u003cp\u003eObject-oriented programming, or OOP, is an extremely useful programming paradigm\nin which we can organize our code according to how real-world objects might\ninteract with one another. We can wrap properties/data and behavior up in\nclasses, and then create instances, or individual \"members\", of those classes\nthat can interact with one another.\u003c/p\u003e\n\n\u003cp\u003eOne common misperception about OOP is that everything MUST model the \u003cem\u003ereal\nworld\u003c/em\u003e. If we limit our objects to things in the real world, the limitations\nwill start jumping out at us.\u003c/p\u003e\n\n\u003cp\u003eImagine a phone call between 2 people. Sure, the PEOPLE are real, but what about\nthe phone call? If we think about the phone call through OOP, we can model it\ntoo! A phone call has a \u003ccode\u003ecaller\u003c/code\u003e and a \u003ccode\u003ereceiver\u003c/code\u003e, a \u003ccode\u003eduration\u003c/code\u003e, and even a\n\u003ccode\u003ecost_per_minute\u003c/code\u003e. In the \u003cem\u003ereal world\u003c/em\u003e, it's not a real thing, but in OOP IT IS!\u003c/p\u003e\n\n\u003cp\u003eIn this tutorial, our goal is to create a simple \u003ccode\u003eBook\u003c/code\u003e class. We'll want it to\nhave properties like a title, an author, a page count, etc. We'd also like the\nclass to somehow be able to keep track of all of the genres of all of the Books\nwe create. Finally, we'll give our books the total non-sensical ability to turn\ntheir own pages.\u003c/p\u003e\n\n\u003ch3\u003eSet Up\u003c/h3\u003e\n\n\u003cp\u003eThe project directory structure is pretty much set up for us already. We have a\n\u003ccode\u003espec\u003c/code\u003e folder that contains our tests, and we have a \u003ccode\u003ebook.rb\u003c/code\u003e file in the 'lib'\ndirectory that we'll actually be coding in.\u003c/p\u003e\n\n\u003cp\u003eWhenever the tutorial says to 'run the specs', you should type the following\ninto your command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elearn spec/01_book_spec.rb\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will run only the tests that we are interested in completing for this\ntutorial.\u003c/p\u003e\n\n\u003cp\u003eReady?\u003c/p\u003e\n\n\u003ch3\u003eRunning the Tests\u003c/h3\u003e\n\n\u003cp\u003eLet's run the tests for the first time, and see what our first failure is. The\noutput in your terminal should be something similar to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book ::new gets initialized with a title\u003cbr\u003e     Failure/Error: expect{Book.new(\"And Then There Were None\")}.to_not raise_error\u003cbr\u003e       expected no Exception, got # with backtrace:\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `block (4 levels) in '\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `block (3 levels) in '\u003cbr\u003e     # ./spec/01_book_spec.rb:6:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis looks kind of overwhelming, but the phrase \u003ccode\u003euninitialized constant Book\u003c/code\u003e\nholds the answer: we need to define our Book class!\u003c/p\u003e\n\n\u003ch3\u003eDefining the Book Class\u003c/h3\u003e\n\n\u003cp\u003eTo create a new class in Ruby, we use the \u003ccode\u003eclass\u003c/code\u003e keyword, followed by the name\nof a class starting with a capital letter. Let's define an empty \u003ccode\u003eBook\u003c/code\u003e class in\n\u003ccode\u003ebook.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNot too hard, right? Let's run those tests again and see what happens:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book ::new gets initialized with a title\u003cbr\u003e     Failure/Error: expect{Book.new(\"And Then There Were None\")}.to_not raise_error\u003cbr\u003e       expected no Exception, got # with backtrace:\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `initialize'\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `new'\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `block (4 levels) in '\u003cbr\u003e         # ./spec/01_book_spec.rb:6:in `block (3 levels) in '\u003cbr\u003e     # ./spec/01_book_spec.rb:6:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHmm...an argument error? That's weird. In the test it looks like we're trying to\ninitialize a new book (create a new book) using the following line of code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eBook.new(\"And Then There Were None\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, I have no clue what \"And Then There Were None\" is in the context of our\nBook class, but what this is telling us is that somehow our Book needs to accept\nan argument on initialization.\u003c/p\u003e\n\n\u003cp\u003eI'm going to go out on a limb and guess that \"And Then There Were None\" is a\ntitle, so let's agree to call that argument \u003ccode\u003etitle\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHow exactly do we pass an argument in on initialization, though? Enter the\n\u003ccode\u003einitialize\u003c/code\u003e method!\u003c/p\u003e\n\n\u003ch3\u003eInitialize\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003einitialize\u003c/code\u003e method is what is known as a \"hook\" or a \"callback\". In other\nwords, it is a method that gets triggered automatically when something else\nhappens. In the case of \u003ccode\u003einitialize\u003c/code\u003e, it gets triggered when we call \u003ccode\u003e.new\u003c/code\u003e on a\nclass. It also happens to be the method that we can pass arguments to when\ninitializing a new instance of a class.\u003c/p\u003e\n\n\u003cp\u003eLet's add an initialize method to our book class, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'll figure out what we need to do with \u003ccode\u003etitle\u003c/code\u003e in just a minute, but for now,\nall we should remember is that the \u003ccode\u003einitialize\u003c/code\u003e method is a place that we'll\nprobably be doing some setup in. Cool?\u003c/p\u003e\n\n\u003cp\u003eLet's run those tests again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book properties has a title\u003cbr\u003e     Failure/Error: expect(book.title).to eq(\"And Then There Were None\")\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `title' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:14:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHey, look! That test passed, and we're on to a different one!\u003c/p\u003e\n\n\u003ch3\u003eGiving a Book a Title\u003c/h3\u003e\n\n\u003cp\u003eIt looks like we don't have a method \u003ccode\u003etitle\u003c/code\u003e for our book. We know how to fix\nthis error... we're just writing Ruby, after all. Let's write a \u003ccode\u003etitle\u003c/code\u003e method\nin our \u003ccode\u003eBook\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd if we run the specs again, we see this output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book properties has a title\u003cbr\u003e     Failure/Error: expect(book.title).to eq(\"And Then There Were None\")\u003cbr\u003e\u003cbr\u003e       expected: \"And Then There Were None\"\u003cbr\u003e            got: nil\u003cbr\u003e\u003cbr\u003e       (compared using ==)\u003cbr\u003e     # ./spec/01_book_spec.rb:14:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, it seems like, if I'm reading the test correctly, we are initializing a book\nwith \"And Then There Were None\" as an argument, and then magically, when we call\n\u003ccode\u003etitle\u003c/code\u003e on that book, it should return \"And Then There Were None\".\u003c/p\u003e\n\n\u003cp\u003eThis means that somewhere between calling \u003ccode\u003e.new\u003c/code\u003e and \u003ccode\u003e.title\u003c/code\u003e, our book is\nsomehow getting assigned a title. Where \u003cem\u003emust\u003c/em\u003e that be happening, then?\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003einitialize\u003c/code\u003e method! It really can't happen anywhere else.\u003c/p\u003e\n\n\u003ch3\u003eInstance Variables\u003c/h3\u003e\n\n\u003cp\u003eThis is where instance variables come into play. Instance variables are preceded\nwith an \"@\" symbol, and are in scope within an instance of a class. This means\nthat any method within an instance has access to any instance variable. This is\nawesome, because within our instances, we don't need to worry about passing\nvariables around. Sweet, huh?\u003c/p\u003e\n\n\u003cp\u003eYou can also, sort of, think of instance variables as properties of any\nparticular instance of a class. Our book seems to have a \u003ccode\u003etitle\u003c/code\u003e property, so\nlet's create a \u003ccode\u003e@title\u003c/code\u003e instance variable for it! We'll do that in the\ninitialize method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEasy as pie. Run those specs again and let's see what happens:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book properties has a title\u003cbr\u003e     Failure/Error: expect(book.title).to eq(\"And Then There Were None\")\u003cbr\u003e\u003cbr\u003e       expected: \"And Then There Were None\"\u003cbr\u003e            got: nil\u003cbr\u003e\u003cbr\u003e       (compared using ==)\u003cbr\u003e     # ./spec/01_book_spec.rb:14:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHmm...that looks awfully familiar. It seems like our \u003ccode\u003etitle\u003c/code\u003e method is still\nreturning \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut, wait. Didn't we just set an instance variable, or property, in our\ninitialize method?\u003c/p\u003e\n\n\u003cp\u003eWe did, but we forgot to, you know, use it in any way. If, when we call \u003ccode\u003e.title\u003c/code\u003e\non a Book instance, we're interested in its title property, maybe we should just\nreturn that property, or instance variable, in that method?\u003c/p\u003e\n\n\u003cp\u003eLet's do that (the difference is in the \u003ccode\u003etitle\u003c/code\u003e method):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the specs, and boom! New error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book properties has an author name\u003cbr\u003e     Failure/Error: book.author = \"Agatha Christie\"\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `author=' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:18:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSetter Methods\u003c/h3\u003e\n\n\u003cp\u003eThat's a weird looking \"undefined method\" error. It says we have no \u003ccode\u003eauthor=\u003c/code\u003e\nmethod.\u003c/p\u003e\n\n\u003cp\u003eWhat? That's gotta be a mistake, right? Nope.\u003c/p\u003e\n\n\u003cp\u003eLet's step back for a second. That \u003ccode\u003etitle\u003c/code\u003e method we wrote before is what is\ncalled a \"getter\". We call it this because, well, it \"gets\" a property for us.\nBut what happens if we want to, say, \u003cem\u003eset\u003c/em\u003e a property, or an instance variable?\nThis is where \"setters\" come into play.\u003c/p\u003e\n\n\u003cp\u003eSetters are methods that allow us to set instance variables. It seems weird, but\nthey all are named like this: \u003ccode\u003eproperty=\u003c/code\u003e. This is because Ruby gives us a nice\nbit of syntactic sugar that allows us to use these methods like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einstance.property = \"something\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCool, huh?\u003c/p\u003e\n\n\u003cp\u003eSo if we want to give our books an author, they need to also have a setter\nmethod for author. Let's add one to our class. And, since we know all about\ninstance variables, let's go ahead and set an instance variable, \u003ccode\u003e@author\u003c/code\u003e\nwithin that method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens if we run the specs now?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book properties has an author name\u003cbr\u003e     Failure/Error: expect(book.author).to eq(\"Agatha Christie\")\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `author' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:19:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSetters and Getters Usually (well, sometimes, mostly, kinda) Come in Pairs\u003c/h3\u003e\n\n\u003cp\u003eNow it looks like we're missing an \u003ccode\u003eauthor\u003c/code\u003e method. Just like with \u003ccode\u003etitle\u003c/code\u003e, if\nwe want to access a property of our book, we need a getter for that property.\nFor this reason, getters and setters tend to come in pairs. This is definitely\nnot a hard and fast rule, but for our purposes now, it's a general rule of thumb\nwe can live by.\u003c/p\u003e\n\n\u003cp\u003eLet's go ahead and add the \"getter\" for \u003ccode\u003eauthor\u003c/code\u003e to our book:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd another run of the tests gives us this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) Book properties has a page count\u003cbr\u003e     Failure/Error: book.page_count = 272\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `page_count=' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:23:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHey, look! We know how to fix this! It looks like our model (class) needs a\nsetter (and probably a getter) for \u003ccode\u003epage_count\u003c/code\u003e. Let's add both of those now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count=(num)\u003cbr\u003e    @page_count = num\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count\u003cbr\u003e    @page_count\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnother run of the specs gives us a very similar error for \u003ccode\u003egenre=\u003c/code\u003e. Let's also\nadd a setter and a getter for that property:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count=(num)\u003cbr\u003e    @page_count = num\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count\u003cbr\u003e    @page_count\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre=(genre)\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre\u003cbr\u003e    @genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun \u003ccode\u003elearn spec/01_book_spec.rb\u003c/code\u003e now, and we get the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book #turn_page can turn the page\u003cbr\u003e     Failure/Error: book.turn_page\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `turn_page' for #\u003cbr\u003e     # ./spec/01_book_spec.rb:37:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eGiving Our Classes Behavior\u003c/h3\u003e\n\n\u003cp\u003eSo, this is pretty silly. Books can't turn their own pages, but we'll use the\nmissing \u003ccode\u003eturn_page\u003c/code\u003e method to demonstrate that we don't only give our classes\nproperties.\u003c/p\u003e\n\n\u003cp\u003eLike I said above, OOP gives us the opportunity to encapsulate both data \u003cem\u003eand\u003c/em\u003e\nbehavior within our classes. Here, we want to be able to make our books turn\ntheir pages.\u003c/p\u003e\n\n\u003cp\u003eHow do we give our books a behavior? Well, we give them methods that do stuff!\nSo, let's give our book a \u003ccode\u003eturn_page\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count=(num)\u003cbr\u003e    @page_count = num\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count\u003cbr\u003e    @page_count\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre=(genre)\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre\u003cbr\u003e    @genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick run of the tests gives us this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) Book #turn_page can turn the page\u003cbr\u003e     Failure/Error: expect($stdout).to receive(:puts).with(\"Flipping the page...wow, you read fast!\")\u003cbr\u003e       (#).puts(\"Flipping the page...wow, you read fast!\")\u003cbr\u003e           expected: 1 time with arguments: (\"Flipping the page...wow, you read fast!\")\u003cbr\u003e           received: 0 times with arguments: (\"Flipping the page...wow, you read fast!\")\u003cbr\u003e     # ./spec/01_book_spec.rb:35:in `block (3 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt looks like our \u003ccode\u003eturn_page\u003c/code\u003e method doesn't really need to \u003cem\u003edo\u003c/em\u003e much aside from\nprint something to the screen. So, to make the test pass, let's add a \u003ccode\u003eputs\u003c/code\u003e\nstatement to our \u003ccode\u003eturn_page\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author=(author)\u003cbr\u003e    @author = author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def author\u003cbr\u003e    @author\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count=(num)\u003cbr\u003e    @page_count = num\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def page_count\u003cbr\u003e    @page_count\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre=(genre)\u003cbr\u003e    @genre = genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def genre\u003cbr\u003e    @genre\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis means that we can very easily tell our books to turn the page, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebook = Book.new(\"Some Title\")\u003cbr\u003ebook.turn_page\u003cbr\u003e# =\u0026gt; \"Flipping the page...wow, you read fast!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the tests, and, boom! All the tests pass!\u003c/p\u003e\n\n\u003ch3\u003eFinal Steps\u003c/h3\u003e\n\n\u003cp\u003eSo, yay! We've passed the tests, but our simple class is looking kind of, umm,\nlong, no?\u003c/p\u003e\n\n\u003cp\u003eWe seem to have a bunch of setters and getters that look really, really similar\naside from their name. There's got to be a better way.\u003c/p\u003e\n\n\u003cp\u003eAnd there is!\u003c/p\u003e\n\n\u003ch4\u003eAttribute Accessors and Attribute Readers\u003c/h4\u003e\n\n\u003cp\u003eThis is where Attribute Accessors and Attribute Readers come into play. (There\nare also Attribute Writers, but we don't need them for this tutorial.)\u003c/p\u003e\n\n\u003cp\u003eThis is a really simplistic explanation, but here's what they do:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAttribute Readers\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAttribute readers give us a getter, or reader, for free.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn other words, if we have an attribute reader (\u003ccode\u003eattr_reader\u003c/code\u003e) for \u003ccode\u003e:name\u003c/code\u003e, Ruby will create a \u003ccode\u003ename\u003c/code\u003e method for us.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003col\u003e\n\u003cli\u003eAttribute Accessors\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAttribute accessors give us both a getter and a setter for free!\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn other words, if we have an attribute accessor (\u003ccode\u003eattr_accessor\u003c/code\u003e) for \u003ccode\u003e:name\u003c/code\u003e, Ruby will create both \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ename=\u003c/code\u003e methods for us.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe can really, really simplify our code now! Since the \u003ccode\u003eauthor\u003c/code\u003e, \u003ccode\u003epage_count\u003c/code\u003e,\nand \u003ccode\u003egenre\u003c/code\u003e setters or getters do not do anything special (they just set\nproperties), we can turn those into \u003ccode\u003eattr_accessors\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  attr_accessor :author, :page_count, :genre\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def title\u003cbr\u003e    @title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur \u003ccode\u003etitle\u003c/code\u003e reader (or getter) is also super basic, so let's add an\n\u003ccode\u003eattr_reader\u003c/code\u003e for it. Remember, this will give us a getter method for free!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# book.rb\u003cbr\u003e\u003cbr\u003eclass Book\u003cbr\u003e  attr_accessor :author, :page_count, :genre\u003cbr\u003e  attr_reader :title\u003cbr\u003e\u003cbr\u003e  def initialize(title)\u003cbr\u003e    @title = title\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def turn_page\u003cbr\u003e    puts \"Flipping the page...wow, you read fast!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eWrap Up\u003c/h3\u003e\n\n\u003cp\u003eAnd there you have it! We created a pretty simple Book class that has a bunch of\nproperties, and even turns its own page! Now it's your turn to try some of this\non your own.\u003c/p\u003e\n\n\u003ch2\u003eShoe Class\u003c/h2\u003e\n\n\u003cp\u003eOpen \u003ccode\u003espec/02_shoe_spec.rb\u003c/code\u003e and start making the tests pass. Write your code in\n\u003ccode\u003eshoe.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo run the specs, type \u003ccode\u003elearn spec/02_shoe_spec.rb\u003c/code\u003e on your command line.\u003c/p\u003e\n\n\u003cp\u003eHappy coding!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc34aabe449549774520273766f2ebac0","title":"Converting Database Records to Ruby Objects Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-mapping-database-records-to-ruby-objects-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-database-records-to-ruby-objects-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a method that turns database rows into Ruby objects\u003c/li\u003e\n\u003cli\u003eWrite methods that allow you to search a database\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe are going to continue building out the \u003ccode\u003eStudent\u003c/code\u003e class of our app. We are in\nthe middle of building an app to help a public school's administrators keep\ntrack of their students. In this app, we have a \u003ccode\u003eStudent\u003c/code\u003e class. Each individual\nstudent has two attributes, a \u003ccode\u003ename\u003c/code\u003e and a \u003ccode\u003egrade\u003c/code\u003e, i.e. 9th, 10th, 11th, etc.\u003c/p\u003e\n\n\u003cp\u003eOur administrators need to save the student objects that this class produces to\na database. We've set up the database for you in the \u003ccode\u003econfig/environment.rb\u003c/code\u003e\nfile.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'sqlite3'\u003cbr\u003erequire_relative '../lib/student'\u003cbr\u003e\u003cbr\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/students.db\")}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour connection to the database can be referred to, throughout your program,\nlike this: \u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo far we built the ability to create the \u003ccode\u003estudents\u003c/code\u003e table in the database\n(\u003ccode\u003eStudent.create_table\u003c/code\u003e), drop that table (\u003ccode\u003eStudent.drop_table\u003c/code\u003e), and \u003ccode\u003e#save\u003c/code\u003e a\nstudent to the database.\u003c/p\u003e\n\n\u003cp\u003eNow, we will need to create a method that takes a row from the database and\nturns it back into a Student object. We will call this \u003ccode\u003e.new_from_db\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNext, we want to build a couple of methods to get information from the database.\nWe will call these \u003ccode\u003e.find_by_name\u003c/code\u003e and \u003ccode\u003e.all\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's get started!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.new_from_db\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that accepts a row from the database as an argument. It\nthen creates a new student object based on the information in the row. Remember,\nour database doesn't store Ruby objects, so we have to manually convert it\nourselves.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.find_by_name\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that accepts the name of a student. You will first run a\nSQL query to get the result from the database where the student's name matches\nthe name passed into the argument.\u003c/p\u003e\n\n\u003cp\u003eNext, you will take the result and create a new student instance using the\n\u003ccode\u003e.new_from_db\u003c/code\u003e method you just created.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.all\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that is very similar to the \u003ccode\u003e.find_by_name\u003c/code\u003e method. You\nwill not need an argument since we are returning everything in the database. Run\nthe SQL to return everything (\u003ccode\u003e*\u003c/code\u003e) from a table.\u003c/p\u003e\n\n\u003cp\u003eAgain, you will use the \u003ccode\u003e.new_from_db\u003c/code\u003e method to create a student instance for\neach row that comes back from the database.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.all_students_in_grade_9\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that does not need an argument. This method should return\nan array of all the students in grade 9.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.students_below_12th_grade\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that does not need an argument. This method should return\nan array of all the students below 12th grade.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.first_X_students_in_grade_10\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that takes in an argument of the number of students from\ngrade 10 to select. This method should return an array of exactly \u003ccode\u003eX\u003c/code\u003e number of\nstudents.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.first_student_in_grade_10\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that does not need an argument. This should return the\nfirst student that is in grade 10.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.all_students_in_grade_X\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that takes in an argument of a grade for which to\nretrieve the roster. This method should return an array of all students for\ngrade \u003ccode\u003eX\u003c/code\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gdfb9e812593c0776a0fb6c85f8f91be7","title":"Costume Store Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-costume-store-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-costume-store-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-costume-store-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-costume-store-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eContents\u003c/h2\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSection\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#objectives\"\u003eObjectives\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#active-record\"\u003eActive Record\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#example\"\u003eExample\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#instructions\"\u003eInstructions\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"#resources\"\u003eResources\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cp\u003e:jack\u003cem\u003eo\u003c/em\u003elantern: :ghost: :jack\u003cem\u003eo\u003c/em\u003elantern:\u003c/p\u003e\n\n\u003cp\u003eIn this lab, you'll be creating the following tables: \u003ccode\u003ecostumes\u003c/code\u003e,\n\u003ccode\u003ecostume_stores\u003c/code\u003e, and \u003ccode\u003ehaunted_houses\u003c/code\u003e. You'll be creating the following\nclasses: \u003ccode\u003eCostume\u003c/code\u003e, \u003ccode\u003eCostumeStore\u003c/code\u003e, and \u003ccode\u003eHauntedHouse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecostumes\u003c/code\u003e table will have four columns:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ename\u003c/li\u003e\n\u003cli\u003eprice\u003c/li\u003e\n\u003cli\u003esize\u003c/li\u003e\n\u003cli\u003eimage url\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cem\u003eas well as\u003c/em\u003e the two \"timestamp\" columns:  \u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e. This\nwill provide a grand total of \u003cem\u003esix\u003c/em\u003e columns.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecostume_stores\u003c/code\u003e table will have seven columns:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ename\u003c/li\u003e\n\u003cli\u003elocation\u003c/li\u003e\n\u003cli\u003enumber of costumes, or \"costume inventory\"\u003c/li\u003e\n\u003cli\u003enumber of employees\u003c/li\u003e\n\u003cli\u003ewhether or not it's still in business\u003c/li\u003e\n\u003cli\u003eopening time\u003c/li\u003e\n\u003cli\u003eclosing time\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe \u003ccode\u003ehaunted_houses\u003c/code\u003e table will have eight columns:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ename\u003c/li\u003e\n\u003cli\u003elocation\u003c/li\u003e\n\u003cli\u003etheme\u003c/li\u003e\n\u003cli\u003eprice\u003c/li\u003e\n\u003cli\u003ewhether they're family friendly or not\u003c/li\u003e\n\u003cli\u003eopening date\u003c/li\u003e\n\u003cli\u003eclosing date\u003c/li\u003e\n\u003cli\u003elong description\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBefore coding out the creation of these tables, read about Active Record below:\u003c/p\u003e\n\n\u003ch2\u003eActive Record Review\u003c/h2\u003e\n\n\u003cp\u003eActive Record is magic. Well, not really. But it does build out a bunch of\nmethods for you. For instance, when it's used properly it will give you access\nto methods such as \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003esave\u003c/code\u003e, and \u003ccode\u003efind_by\u003c/code\u003e. Rejoice! Never again will\nyou have to manually build out these methods!\u003c/p\u003e\n\n\u003cp\u003eActive Record allows you to create a database that interacts with your class\nwith only a few lines of code. These lines of code go to creating a model, which\nresides in the \u003ccode\u003eapp/models\u003c/code\u003e folder, and a migration, which resides in the\n\u003ccode\u003edb/migrate\u003c/code\u003e folder.\u003c/p\u003e\n\n\u003cp\u003eThe model inherits from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e while the migration inherits from\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e. Many migrations these days have a \u003ccode\u003echange\u003c/code\u003e method,\nbut you might also see migrations with an \u003ccode\u003eup\u003c/code\u003e and a \u003ccode\u003edown\u003c/code\u003e method instead. To\nuse Active Record, you have to stick to some specific naming conventions: while\nthe migrations are plural, the models are singular.\u003c/p\u003e\n\n\u003ch3\u003eMigrations\u003c/h3\u003e\n\n\u003cp\u003eWhen creating migrations, the class names in the migration files must match\ntheir file names. For instance, a class in the migration file called\n\u003ccode\u003e20141013204115_create_candies.rb\u003c/code\u003e must be named \u003ccode\u003eCreateCandies\u003c/code\u003e while a class\nin a migration file called \u003ccode\u003e20130915204319_add_addresses_to_houses.rb\u003c/code\u003e must be\ncalled AddAddressesToHouses.\u003c/p\u003e\n\n\u003cp\u003eYou might notice that in both the examples above, the numbers at the front of\nthe file name were ignored. These numbers are in the form \u003ccode\u003eYYYYMMDDHHMMSS\u003c/code\u003e.\nLater on, these timestamps will become important as Rails uses them to determine\nwhich migration should be run and in what order. For instance, if you made a\ntable called \u003ccode\u003edog_walkers\u003c/code\u003e and then added a column to it called \u003ccode\u003erating\u003c/code\u003e, that\nwould be fine as the timestamp on the \u003ccode\u003edog_walkers\u003c/code\u003e table creation would\nindicate it needs to be migrated before adding the \u003ccode\u003erating\u003c/code\u003e column to it.\nHowever, if you did this in reverse order, that is adding a column to a table\nthat doesn't exist, then creating the table, you would get an error.\u003c/p\u003e\n\n\u003cp\u003eMigrations, as it was mentioned before, inherit from \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e\nand usually have a method called \u003ccode\u003echange\u003c/code\u003e. In change, you can create a table\nwith the \u003ca href=\"http://guides.rubyonrails.org/migrations.html#creating-a-table\"\u003ecreate_table\u003c/a\u003e method. This method automatically will create a\nprimary key column called \u003ccode\u003eid\u003c/code\u003e, but this default can be overridden if you'd like\nto customize it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As of Active Record 5.x, we can no longer inherit directly from\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e and must instead specify which version of Active\nRecord / Rails the migration was written for. If we were writing a migration for\nActive Record 5.1, we would inherit from \u003ccode\u003eActiveRecord::Migration[5.1]\u003c/code\u003e. Don't\nworry too much about this until you get to the Rails section. Until then, if you\nencounter an error like this...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStandardError: Directly inheriting from ActiveRecord::Migration is not supported. Please specify the Rails release the migration was written for:\u003cbr\u003e\u003cbr\u003e  class CreateDogs \u0026lt; ActiveRecord::Migration[4.2]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...simply add \u003ccode\u003e[4.2]\u003c/code\u003e to the end of \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e, exactly as the\nerror message instructs.\u003c/p\u003e\n\n\u003cp\u003eHere's a simple example of the \u003ccode\u003ecreate_table\u003c/code\u003e method in action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateDogs \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :dogs do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.string :breed\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above code would create a table called \u003ccode\u003edogs\u003c/code\u003e with three columns: \u003ccode\u003ename\u003c/code\u003e,\n\u003ccode\u003ebreed\u003c/code\u003e (both explicitly created), and an implicitly created \u003ccode\u003eid\u003c/code\u003e column.\u003c/p\u003e\n\n\u003cp\u003eTake a look at a few data types that Active Record supports below:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eData Type\u003c/th\u003e\n\u003cth\u003eExamples\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003etrue, false\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003einteger\u003c/td\u003e\n\u003ctd\u003e2, -13, 485\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e\"Halloween\", \"Boo!\", strings between 1-255 characters\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003edatetime\u003c/td\u003e\n\u003ctd\u003eDateTime.now, DateTime.new(2014,10,31)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003efloat\u003c/td\u003e\n\u003ctd\u003e2.234, 32.2124, -6.342\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etext\u003c/td\u003e\n\u003ctd\u003estrings between 1 and 2 ^ 32 - 1 characters\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch3\u003eModels\u003c/h3\u003e\n\n\u003cp\u003eLike migrations, models also inherit, but they inherit from\n\u003ccode\u003eActiveRecord::Base\u003c/code\u003e. A simple model would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven though there are no explicit methods for retrieving \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ebreed\u003c/code\u003e,\nthis \u003ccode\u003eDog\u003c/code\u003e model is associated with the created \u003ccode\u003edogs\u003c/code\u003e table above. Because of\nthis integration, we can call \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ebreed\u003c/code\u003e, and \u003ccode\u003eid\u003c/code\u003e on any new instance of\nthe Dog class. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshiloh = Dog.new\u003cbr\u003e=\u0026gt; #\u003cbr\u003eshiloh.name = \"Shiloh\"\u003cbr\u003e=\u0026gt; \"Shiloh\"\u003cbr\u003eshiloh.breed = \"Beagle\"\u003cbr\u003e=\u0026gt; \"Beagle\"\u003cbr\u003eshiloh.save\u003cbr\u003e=\u0026gt; true\u003cbr\u003e\u003cbr\u003eDog.find_by(:name =\u0026gt; \"Shiloh\") == shiloh\u003cbr\u003e=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that you had access to reader and writer methods that cooperated with the\ndatabase that you never had to actually code. You could set the name without\never writing \u003ccode\u003edef name=()\u003c/code\u003e and call the \u003ccode\u003eself.find_by(attribute)\u003c/code\u003e method without\never teaching your Dog class how to look up data in the database. It's pretty\nawesome. Take a look at an example below.\u003c/p\u003e\n\n\u003ch4\u003eExample\u003c/h4\u003e\n\n\u003cp\u003eLet's say you wanted to make a class called \u003ccode\u003eCandy\u003c/code\u003e. Candies should have two\nattributes, a name (string) and the number of calories (integer), you would\nwrite the migration as seen below:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003edb/migrations/20130915204319_create_candies.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateCandies \u0026lt; ActiveRecord::Migration[4.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :candies do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.integer :calories\u003cbr\u003e      t.timestamps\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You might be wondering what \u003ccode\u003et.timestamps\u003c/code\u003e is doing here. Well, it\ncreates two new columns, \u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e. These are handy columns\nto have around as sometimes you want to query based on the time of creation or\nupdate-tion instead of querying using attributes or ids. To read more about\ntimestamps, go to Active Record's \u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Timestamp.html\"\u003edocs on them\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhile the migration was plural, the model would be singular:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eapp/models/candy.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Candy \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter saving the code above, running \u003ccode\u003erake db:migrate\u003c/code\u003e will apply the desired\nchanges to the database by running the change method. Then you can alter the\ndatabase with simple Ruby statements.\u003c/p\u003e\n\n\u003cp\u003eFor instance, you could create three rows in the table easily:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCandy.create(:name =\u0026gt; \"Milky Way Midnight\", :calories =\u0026gt; 220)\u003cbr\u003eCandy.create(:name =\u0026gt; \"Snickers\", :calories =\u0026gt; 550)\u003cbr\u003eCandy.create(:name =\u0026gt; \"Reese's Peanut Butter Cups\", :calories =\u0026gt; 210)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRetrieving information is just as painless:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereeses = Candy.find_by(:name =\u0026gt; \"Reese's Peanut Butter Cups\")\u003cbr\u003e# =\u0026gt; #\u003cbr\u003eCandy.first\u003cbr\u003e# =\u0026gt; #\u003cbr\u003esnickers = Candy.find(2)\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs is viewing attributes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereeses = Candy.find(3)\u003cbr\u003e# =\u0026gt; #\u003cbr\u003ereeses.calories\u003cbr\u003e# =\u0026gt; 210\u003cbr\u003ereeses.name\u003cbr\u003e# =\u0026gt; \"Reese's Peanut Batter Cups\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUpdating information and viewing table info is also quite simple:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esnickers = Candy.find(2)\u003cbr\u003e# =\u0026gt; #\u003cbr\u003esnickers.update(:calories =\u0026gt; 250)\u003cbr\u003e# =\u0026gt; true\u003cbr\u003e\u003cbr\u003ereeses = Candy.last\u003cbr\u003e# =\u0026gt; #\u003cbr\u003ereeses.update(:name =\u0026gt; \"Reeeese's Peanut Butter Cups\")\u003cbr\u003e# =\u0026gt; true\u003cbr\u003e\u003cbr\u003eCandy.find(2)\u003cbr\u003e# =\u0026gt; #\u003cbr\u003eCandy.last\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIsn't that amazing? Eleven lines of code allows you to create a table and a\nclass that interact with each other elegantly and efficiently. It builds out\nmethods like, \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eupdate\u003c/code\u003e, \u003ccode\u003ecount\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ecalories\u003c/code\u003e, along with others\nsuch as \u003ccode\u003ebuild\u003c/code\u003e and \u003ccode\u003esave\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eFile Structure\u003c/h3\u003e\n\n\u003cp\u003eYou will only be altering code in six files, the three files in the \u003ccode\u003emodels\u003c/code\u003e\nfolder and the three files in the \u003ccode\u003edb/migrations\u003c/code\u003e folder.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── app\u003cbr\u003e│   └── models\u003cbr\u003e│       ├── costume.rb\u003cbr\u003e│       ├── costume_store.rb\u003cbr\u003e│       └── haunted_house.rb\u003cbr\u003e└──db\u003cbr\u003e    └── migrations\u003cbr\u003e        ├── 001_create_costumes.rb\u003cbr\u003e        ├── 002_create_costume_stores.rb\u003cbr\u003e        └── 003_create_haunted_houses.rb\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eGetting Started\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eThis is a test-driven lab so start with the first test and work your way down.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eYour models should be no longer than two lines of code.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe first step is to run \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCreate the Costume class in \u003ccode\u003eapp/models/\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFill out the Active Record migration for costumes such that it passes the\nspecs.\u003c/li\u003e\n\u003cli\u003eCreate the CostumeStore class in \u003ccode\u003eapp/models/\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFill out the Active Record migration for \u003ccode\u003ecostume_stores\u003c/code\u003e such that it passes\nthe specs.\u003c/li\u003e\n\u003cli\u003eCreate the HauntedHouse class in \u003ccode\u003eapp/models/\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFill out the Active Record migration for haunted_houses such that it passes\nthe specs.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eJust like for any other lab, run \u003ccode\u003elearn test\u003c/code\u003e to view your test progress. However,\nunlike some of the other labs in thie section, for this lab, when updating an\nexisting migration, \u003cstrong\u003eyou will need to rollback your previous migrations for\nthat table using the rake command \u003ccode\u003erake db:rollback\u003c/code\u003e\u003c/strong\u003e. Otherwise, the schema\nwill remain unchanged and the changes you make to your migrations will not\nbe seen.\u003c/p\u003e\n\n\u003cp\u003eFor example, say you've run \u003ccode\u003erake db:migrate\u003c/code\u003e and \u003ccode\u003elearn test\u003c/code\u003e once to start, and see\nthat you need to add an attribute to the \u003ccode\u003ecostume_stores\u003c/code\u003e table. Since this\ntable is the second migration of three, you will need to run \u003ccode\u003erake db:rollback\u003c/code\u003e\ntwice to remove the previous migration for this table, then run \n\u003ccode\u003erake db:migrate\u003c/code\u003e again to update the schema. Your code, however, may break if the other migration files are empty.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://guides.rubyonrails.org/migrations.html\"\u003eActive Record Migrations\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003eJust look at the code for the example migrations\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_basics.html#creating-active-record-models\"\u003eCreating Active Record Models\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Timestamp.html\"\u003eTimestamps\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd9e12abf6787232c9d531f7478c574d2","title":"Countdown to Midnight Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"countdown-to-midnight\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/countdown-to-midnight/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/countdown-to-midnight\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/countdown-to-midnight/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice building a \u003ccode\u003ewhile\u003c/code\u003e loop\u003c/li\u003e\n\u003cli\u003ePractice using the subtract-and-assign operator (\u003ccode\u003e-=\u003c/code\u003e)—the inverse of the add-and-assign operator (\u003ccode\u003e+=\u003c/code\u003e). \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eReview\u003c/h2\u003e\n\n\u003ch4\u003eOn \u003ccode\u003ewhile\u003c/code\u003e Loops\u003c/h4\u003e\n\n\u003cp\u003eThis lab is going to test your skills in writing \u003ccode\u003ewhile\u003c/code\u003e loops. Remember, a \u003ccode\u003ewhile\u003c/code\u003e loop will execute your block of code only \u003cem\u003ewhile\u003c/em\u003e your defined conditional evaluates as \u003ccode\u003etrue\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eFor example, this script:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ex = 1\u003cbr\u003ewhile x \u0026lt; 10\u003cbr\u003e  puts \"#{x} is less than 10\"\u003cbr\u003e  x += 1\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWill print this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 is less than 10\u003cbr\u003e2 is less than 10\u003cbr\u003e3 is less than 10\u003cbr\u003e4 is less than 10\u003cbr\u003e5 is less than 10\u003cbr\u003e6 is less than 10\u003cbr\u003e7 is less than 10\u003cbr\u003e8 is less than 10\u003cbr\u003e9 is less than 10\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd return \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eString Interpolation\u003c/h4\u003e\n\n\u003cp\u003eUsing the \u003ccode\u003e#{}\u003c/code\u003e is called interpolation. In this case, it's going to actually print out the value of \u003ccode\u003ex\u003c/code\u003e. If we just wrote \u003ccode\u003eputs \"x is less than 10\"\u003c/code\u003e it would print out the letter 'x' instead of the number \u003ccode\u003ex\u003c/code\u003e is representing.\u003c/p\u003e\n\n\u003ch4\u003eThe Add-And-Assign Operator (\u003ccode\u003e+=\u003c/code\u003e)\u003c/h4\u003e\n\n\u003cp\u003eThis is a shorthand useful for incrementing, or \"stepping up\", values. It's an operator that adds the submitting value to the value of \u003ccode\u003ex\u003c/code\u003e. In the example above \u003ccode\u003ex\u003c/code\u003e begins with a value of \u003ccode\u003e1\u003c/code\u003e, and is incremented by \u003ccode\u003e1\u003c/code\u003e each time the \u003ccode\u003ewhile\u003c/code\u003e loop runs. The line \u003ccode\u003ex += 1\u003c/code\u003e is the same as the line \u003ccode\u003ex = x + 1\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eThe loop is going to stop executing as soon as \u003ccode\u003ex\u003c/code\u003e hits \u003ccode\u003e10\u003c/code\u003e, since that was the condition that we set.\u003c/p\u003e\n\n\u003ch4\u003eThe Subtract-And-Assign Operator (\u003ccode\u003e-=\u003c/code\u003e)\u003c/h4\u003e\n\n\u003cp\u003eWe can also use the subtract-and-assign operator (\u003ccode\u003e-=\u003c/code\u003e) which instead \u003cem\u003esubtracts\u003c/em\u003e the submitted value from the given variable and reassigns that variable to the resulting difference.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this lab. \u003c/li\u003e\n\u003cli\u003eOpen it in your IDE and run the test suite. You'll be coding your solution in \u003ccode\u003ecountdown.rb\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a method that takes in an integer argument and uses a while loop to countdown from that integer to \u003ccode\u003e1\u003c/code\u003e, outputting \u003ccode\u003e\"#{number} SECOND(S)!\"\u003c/code\u003e in each iteration of the loop. The method should return \u003ccode\u003e\"HAPPY NEW YEAR!\"\u003c/code\u003e after the loop finishes. \u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eIn Ruby, a method will return the very last line of code that it executes.\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003eOur Ruby program executes so quickly that it doesn't actually count down at the speed of one second per number. See if you can make the loop pause for one second each trip around (\u003ca href=\"http://stackoverflow.com/questions/1329967/tell-ruby-program-to-wait-some-amount-of-time\"\u003ehint\u003c/a\u003e). Write this in a new method called \u003ccode\u003ecountdown_with_sleep\u003c/code\u003e that also takes one integer argument for the countdown.\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g86809c235d7ebc9f8ca7e8b83d43550c","title":"Counting Sentences Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-count-sentences-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-count-sentences-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-count-sentences-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-count-sentences-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice defining instance methods on a class.\u003c/li\u003e\n\u003cli\u003ePractice defining instance methods that use the self keyword to operate on the object on which the method is being called.\u003c/li\u003e\n\u003cli\u003eLearn about monkey patching.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be adding a few instance methods to Ruby's \u003ccode\u003eString\u003c/code\u003e class. We generally want to avoid altering built-in classes (especially if we are working with other people), but in this case, we're not overwriting any methods, and it's a good exercise in OO programming. The practice of adding methods to or altering Ruby's built in classes is called monkey patching. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eString\u003c/code\u003e class is just like any other class that we might define, such as a \u003ccode\u003eDog\u003c/code\u003e class or a \u003ccode\u003ePerson\u003c/code\u003e class. The \u003ccode\u003eString\u003c/code\u003e class, however, is native to, or included in, Ruby. So, we can add or change methods in the \u003ccode\u003eString\u003c/code\u003e class just like we would in any of the classes that we define ourselves. \u003c/p\u003e\n\n\u003ch3\u003eMonkey Patching\u003c/h3\u003e\n\n\u003cp\u003eMonkey patching is the practice of adding methods to or altering Ruby's core classes. Monkey patching is dangerous! What if, for example, you decide to monkey patch Ruby's String class to produce a quick-fix that shortens a certain section of code in your program. Then, months later, you run into major bugs as a result, or some of your collaborators don't know about your monkey patch and develop bugs of their own that they don't know the origin of? For reasons like these, monkey patching should be considered very, very carefully. We're going to do it today, just for fun, but you do want to avoid doing it when working on your own programs. \u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou'll be coding your solution in \u003ccode\u003elib/count_sentences.rb\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#sentence?\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eDefine this instance method to return \u003ccode\u003etrue\u003c/code\u003e if the string you are calling it on ends in a period and false if it does not. \u003c/p\u003e\n\n\u003cp\u003eYou will need to use the \u003ccode\u003eself\u003c/code\u003e keyword in the body of this method to refer to the string on which the method is being called. You can use the \u003ccode\u003e#end_with?\u003c/code\u003e method to determine what the final character in a string is. \u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"HI!\".end_with?(\"!\")\u003cbr\u003e  =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCall the \u003ccode\u003eend_with?\u003c/code\u003e method on \u003ccode\u003eself\u003c/code\u003e inside of your \u003ccode\u003e#sentence?\u003c/code\u003e method. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#question?\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis instance method should use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the string on which it is being called. This method should return true if a string ends with a question mark and false if it does not. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003eexclamation?\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis instance method should use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the string on which it is being called. This method should return true if a string ends with an exclamation mark and false if it does not. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#count_sentences\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eWhat we'd like to be able to do is call a \u003ccode\u003ecount_sentences\u003c/code\u003e method on a string, and get back a, well, count of sentences in that string. In other words:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"This is a string! It has three sentences. Right?\".count_sentences\u003cbr\u003e# =\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour \u003ccode\u003e#count_sentences\u003c/code\u003e method should use the \u003ccode\u003eself\u003c/code\u003e keyword to refer to the string on which it is called. \u003c/p\u003e\n\n\u003cp\u003eThink about the steps you need to go through to enact the desired behavior:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://ruby-doc.org/core-2.2.0/String.html#method-i-split\"\u003e\u003ccode\u003esplit\u003c/code\u003e\u003c/a\u003e the string on any and all periods, question marks and exclamation marks. \u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://ruby-doc.org/core-2.2.0/Array.html#method-i-count\"\u003e\u003ccode\u003ecount\u003c/code\u003e\u003c/a\u003e the number of elements that results from that \u003ccode\u003esplit\u003c/code\u003e. \u003c/li\u003e\n\u003cli\u003eRemember to consider edge cases such as the following sentence: \u003ccode\u003e\"This, well, is a sentence. This is too!! And so is this, I think? Woo...\"\u003c/code\u003e. What would happen if we split this sentence on the punctuation characters? We would end up with an array that contains empty strings as well as strings containing sentences. How would you eliminate empty strings from an array? We recommend placing \u003ccode\u003erequire 'pry'\u003c/code\u003e on the top of the file and placing a \u003ccode\u003ebinding.pry\u003c/code\u003e inside of the \u003ccode\u003e#count_sentences\u003c/code\u003e method to help you get this test passing. \u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g62f4023e43e688cc2cf02738f5023118","title":"Debugging with Pry","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"debugging-with-pry\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/debugging-with-pry/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/debugging-with-pry\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/debugging-with-pry/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe'll cover Pry, a type of REPL, and discuss how to install and use it to debug\na program.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain how Pry is a more flexible REPL than IRB.\u003c/li\u003e\n\u003cli\u003eInstall Pry on your computer (already installed for IDE users).\u003c/li\u003e\n\u003cli\u003eDebug a program using binding.pry within the body of your file.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat Is a REPL?\u003c/h2\u003e\n\n\u003cp\u003eYou've already been introduced to REPLs through using IRB (Interactive Ruby).\nREPL stands for \u003cem\u003eRead, Evaluate, Print, Loop\u003c/em\u003e. It is an interactive programming\nenvironment that takes a user's input, evaluates it and returns the result to\nthe user.\u003c/p\u003e\n\n\u003cp\u003eRuby installs with its own REPL, which is IRB, that you've already been using.\nEvery time you type \u003ccode\u003eirb\u003c/code\u003e into your terminal, you're entering into a REPL.\u003c/p\u003e\n\n\u003ch2\u003eWhat Is Pry?\u003c/h2\u003e\n\n\u003cp\u003ePry is another Ruby REPL with some added functionality. When you enter IRB, you\nare entering a brand new interactive environment. Any code you want to play with\nin IRB, you have to write in IRB or copy and paste into IRB. Pry, on the other\nhand, is like a REPL that you can inject into your program.\u003c/p\u003e\n\n\u003cp\u003ePry is far more flexible than IRB. Once you install the Pry library (via the Pry\ngem—we'll walk through installation in a bit), you can use a \u003ccode\u003ebinding.pry\u003c/code\u003e\nanywhere in your code.\u003c/p\u003e\n\n\u003ch2\u003eWait... What's 'binding'?\u003c/h2\u003e\n\n\u003cp\u003eBinding is a built-in ruby class whose objects can encapsulate the context of\nyour current scope (variables, methods etc.), and retain them for use outside of\nthat context.\u003c/p\u003e\n\n\u003cp\u003eCalling \u003ccode\u003ebinding.pry\u003c/code\u003e is essentially 'prying' into the current binding or\ncontext of the code, from outside your file.\u003c/p\u003e\n\n\u003cp\u003eSo when you place the line \u003ccode\u003ebinding.pry\u003c/code\u003e in your code, that line will get\ninterpreted at runtime (as your program is executed). When the interpreter hits\nthat line, your program will actually \u003cem\u003efreeze\u003c/em\u003e and your terminal will turn into\na REPL that exists right in the middle of your program, wherever you added the\n\u003ccode\u003ebinding.pry\u003c/code\u003e line.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look. In this repository, you'll see a file called\n\u003ccode\u003epry_is_awesome.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInstructions Part I\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eFork and clone this repository.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eInstall Pry on your computer by navigating to your home directory (\u003ccode\u003ecd ~\u003c/code\u003e in\nyour terminal) and execute \u003ccode\u003egem install pry\u003c/code\u003e. (You don't need to do this if\nyou are working in the IDE.)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLook at the code in \u003ccode\u003elib/pry_is_awesome.rb\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYou should see the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003edef prying_into_the_method\u003cbr\u003e    inside_the_method = \"We're inside the method\"\u003cbr\u003e    puts inside_the_method\u003cbr\u003e    puts \"We're about to stop because of pry!\"\u003cbr\u003e    binding.pry\u003cbr\u003e    this_variable_hasnt_been_interpreted_yet = \"The program froze before it could read me!\" \u003cbr\u003e    puts this_variable_hasnt_been_interpreted_yet\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprying_into_the_method\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we are requiring \u003ccode\u003epry\u003c/code\u003e, \u003cem\u003ewhich you must do to use pry\u003c/em\u003e, defining a method,\nand then calling that method.\u003c/p\u003e\n\n\u003cp\u003eIn the directory of this repo, in your terminal, run the file by typing \u003ccode\u003eruby\nlib/pry_is_awesome.rb\u003c/code\u003e. Now, look at your terminal. You should see something\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  3: def prying_into_the_method\u003cbr\u003e     4:     inside_the_method = \"We're inside the method\"\u003cbr\u003e     5:     puts inside_the_method\u003cbr\u003e     6:     puts \"We're about to stop because of pry!\"\u003cbr\u003e     7:     binding.pry\u003cbr\u003e =\u0026gt;  8:     this_variable_hasnt_been_interpreted_yet = \"The program froze before it could read me!\"\u003cbr\u003e     9:     puts this_variable_hasnt_been_interpreted_yet\u003cbr\u003e    10: end\u003cbr\u003e[1] pry(main)\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou have frozen your program \u003cem\u003eas it executes\u003c/em\u003e and are now inside a REPL \u003cem\u003einside\nyour program\u003c/em\u003e. You basically just stopped time! How cool is that?\u003c/p\u003e\n\n\u003cp\u003eIn the terminal, in your pry console, type the variable name \u003ccode\u003einside_the_method\u003c/code\u003e\nand hit enter. You should see a return value of \u003ccode\u003e\"We're inside the method\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eYou are able to explore the data \u003cem\u003einside\u003c/em\u003e the method in which you've placed your\nbinding.\u003c/p\u003e\n\n\u003cp\u003eNow, in the terminal, in your pry console, type the variable name\n\u003ccode\u003ethis_variable_hasnt_been_interpreted_yet\u003c/code\u003e. You should see a return value of\n\u003ccode\u003enil\u003c/code\u003e. That's because the binding you placed on line 7 actually froze the\nprogram on line 7 and the variable you just called hasn't been interpreted yet.\nConsequently, our REPL doesn't know about it.\u003c/p\u003e\n\n\u003cp\u003eNow, in the terminal, type \u003ccode\u003eexit\u003c/code\u003e, and you'll leave your pry console and the\nprogram will continue to execute.\u003c/p\u003e\n\n\u003ch2\u003eInstructions Part II: Using Pry to Debug\u003c/h2\u003e\n\n\u003cp\u003eIn addition to \u003cem\u003eexploring\u003c/em\u003e code inside Pry, you can also manipulate variables\nand try code out. This is where Pry really becomes helpful for debugging. If you\nhave a method that isn't doing what it's supposed to do, instead of making\nchanges in your text editor and running the tests over and over until you get it\nworking, you can put a binding in your code and try things out. Once you've\nfigured out how to fix the problem, you then update the code in your text editor\naccordingly.\u003c/p\u003e\n\n\u003cp\u003eLet's walk through an example together. In this repository that you've forked\nand cloned down onto your computer, you'll see a \u003ccode\u003espec\u003c/code\u003e folder containing a file\n\u003ccode\u003epry_debugging_spec.rb\u003c/code\u003e. This is a test for the file \u003ccode\u003elib/pry_debugging.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003epry_debugging.rb\u003c/code\u003e, we have a broken method. Run \u003ccode\u003elearn test\u003c/code\u003e to see the\nfailing test. You should see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1) #plus_two takes in a number as an argument and returns the sum of that number and 2\u003cbr\u003e     Failure/Error: expect(plus_two(3)).to eq(5)\u003cbr\u003e\u003cbr\u003e       expected: 5\u003cbr\u003e            got: 3\u003cbr\u003e\u003cbr\u003e       (compared using ==)\u003cbr\u003e     # ./spec/pry_debugging_spec.rb:6:in `block (2 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo what's happening? In the second line (the line starting with\n\u003ccode\u003eFailure/Error\u003c/code\u003e), we can see that the test is calling the \u003ccode\u003eplus_two\u003c/code\u003e method and\npassing in \u003ccode\u003e3\u003c/code\u003e as an argument. Below that we can see that the test is expecting\n\u003ccode\u003e5\u003c/code\u003e to be returned, but that \u003ccode\u003e3\u003c/code\u003e is being returned instead. We remember that the\nreturn value of a method in Ruby is generally the value of the last line of the\nmethod, in this case, \u003ccode\u003enum\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef plus_two(num)\u003cbr\u003e    num + 2\u003cbr\u003e    num\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo while our method is adding 2 to \u003ccode\u003enum\u003c/code\u003e on the second line, it appears that it\nis not \u003cem\u003eupdating\u003c/em\u003e \u003ccode\u003enum\u003c/code\u003e. We have Pry required at the top of our\n\u003ccode\u003espec/pry_debugging_spec.rb\u003c/code\u003e file so we can use it to verify this. Let's place a\n\u003ccode\u003ebinding.pry\u003c/code\u003e in our code, right after that line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef plus_two(num)\u003cbr\u003e    num + 2\u003cbr\u003e    binding.pry\u003cbr\u003e    num\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, run the test suite again and drop into your Pry console. Your terminal\nshould look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFrom: /Users/sophiedebenedetto/Desktop/Dev/Ruby-Methods_and_Variables/pry-readme/lib/pry_debugging.rb @ line 4 Object#plus_two:\u003cbr\u003e\u003cbr\u003e    1: def plus_two(num)\u003cbr\u003e    2:  num + 2\u003cbr\u003e    3:  binding.pry\u003cbr\u003e =\u0026gt; 4:  num\u003cbr\u003e    5: end\u003cbr\u003e\u003cbr\u003e[1] pry(#)\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's check our current return value by typing \u003ccode\u003enum\u003c/code\u003e at the Pry prompt. You\nshould see something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1] pry(#)\u0026gt; num\u003cbr\u003e=\u0026gt; 3\u003cbr\u003e[2] pry(#)\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy checking the value of the variable inside our pry console, we can confirm\nthat \u003ccode\u003enum\u003c/code\u003e is still equal to \u003ccode\u003e3\u003c/code\u003e and, as a result, the method is returning \u003ccode\u003e3\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHow can we modify the code on line 2 so that the method behaves in the expected\nway? We need to \u003cem\u003eupdate\u003c/em\u003e the value of our \u003ccode\u003enum\u003c/code\u003e variable so that it's equal to\nthe sum of itself and 2. Play around inside your Pry console: try code that you\nthink will update \u003ccode\u003enum\u003c/code\u003e as needed, then check the value of \u003ccode\u003enum\u003c/code\u003e to see if it\nworked. Once you figure it out you can type \u003ccode\u003eexit\u003c/code\u003e in your terminal to get out\nof Pry, update the code in your text editor, and rerun the test to verify it's\npassing. Be sure to remove the \u003ccode\u003ebinding.pry\u003c/code\u003e!\u003c/p\u003e\n\n\u003cp\u003eIt can take a little while to get the hang of using Pry so don't worry if it's\nstill a little confusing. As you start working with more complex methods and\ndata structures, you'll find it can be a very helpful tool.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://pry.github.io/\"\u003ePry documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/elimerrell/debugging-with-pry-a-beginners-guide-3p99\"\u003eDebugging with Pry: A Beginner's Guide\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gcc450da5158ed8df7c8142ffce2ab189","title":"Defining Object Inheritance","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-defining-inheritance\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-defining-inheritance/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-defining-inheritance\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-defining-inheritance/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn about inheritance in object oriented Ruby.\u003c/li\u003e\n\u003cli\u003eWrite classes that inherit from another class.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction: Why Inheritance?\u003c/h2\u003e\n\n\u003cp\u003eIn the real-world, different entities (people, animals, cars, you name it) are related in various ways. Within a single entity or group, there exist systems of classification. For example, the \"dogs\" entity or category includes pugs, corgis, labs, etc. All of these breeds share common features because they are all dogs. But they all have certain unique traits as well.\u003c/p\u003e\n\n\u003cp\u003eAnother example: you are writing a web application in which users are either admins, instructors or students. All of these entities are \"users\" and have common features, but they all have some unique traits as well.\u003c/p\u003e\n\n\u003cp\u003eHow can our code reflect that fact that these different categories of things all share some, or even many, characteristics but all have some unique attributes as well? Well, we could write separate admin, instructor and student class that each contain repetitious code to lend each of these classes shared attributes and behaviors. We know, however, that repetitious code is always something to be avoided. Not only is it time consuming, but what happens when we need to make a change to this shared behavior? We'd have to code the same change in three places.\u003c/p\u003e\n\n\u003cp\u003eInstead, we can use \u003cstrong\u003einheritance\u003c/strong\u003e. The use of inheritance allows us to create a family of classes with shared behavior, while still differentiating those classes. With inheritance, we could \u003cem\u003einherit\u003c/em\u003e the admin, instructor and student classes from a user class. Then, any changes made to the user class would apply to the other class.\u003c/p\u003e\n\n\u003cp\u003eWhile you may not write your own classes that use inheritance very frequently, you will encounter it frequently as a Ruby on Rails web developer. Once we introduce the use of databases and the challenge of connecting our programs to our database, you'll encounter inheritance in nearly every program you write for the web. More on that (much) later.\u003c/p\u003e\n\n\u003ch2\u003eWhat is Inheritance?\u003c/h2\u003e\n\n\u003cp\u003eIn Ruby, classes can inherit from one another. This means that they adopt all of the attributes and behaviors (i.e. all of the methods) of the parent, also called the \u003cstrong\u003esuper\u003c/strong\u003e class. In this exercise, we'll be building our own chain of inheritance.\u003c/p\u003e\n\n\u003ch2\u003eCode Along: Basic Inheritance\u003c/h2\u003e\n\n\u003cp\u003eIn this domain model, we have class \u003ccode\u003eVehicle\u003c/code\u003e that will act as the parent, or super, class. We will create child classes, also known as \u003cstrong\u003esubclasses\u003c/strong\u003e for different types of \u003ccode\u003eVehicle\u003c/code\u003es, such as car.\u003c/p\u003e\n\n\u003ch3\u003eStep 1: Defining the Super Class\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/vehicle.rb\u003c/code\u003e. We're going to define some methods in this parent class so that our subclasses, when we make them, will have access to them.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Vehicle\u003cbr\u003e\u003cbr\u003e  attr_accessor :wheel_size, :wheel_number\u003cbr\u003e\u003cbr\u003e  def initialize(wheel_size, wheel_number)\u003cbr\u003e    @wheel_size = wheel_size\u003cbr\u003e    @wheel_number = wheel_number\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def go\u003cbr\u003e    \"vrrrrrrrooom!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def fill_up_tank\u003cbr\u003e    \"filling up!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstances of \u003ccode\u003eVehicle\u003c/code\u003e initialize with a wheel size and number. We also have \u003ccode\u003e#go\u003c/code\u003e and \u003ccode\u003e#fill_up_tank\u003c/code\u003e instance methods that describe some common vehicle behavior.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and paste the above Vehicle class code into your Vehicle class, and run the test suite and you'll see that you are passing all of the tests for the \u003ccode\u003eVehicle\u003c/code\u003e class but none of the tests for the \u003ccode\u003eCar\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003eStep 2: Defining the Subclass\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/car.rb\u003c/code\u003e. Notice that we are requiring \u003ccode\u003elib/vehicle.rb\u003c/code\u003e. That is because our \u003ccode\u003eCar\u003c/code\u003e class will need access to the \u003ccode\u003eVehicle\u003c/code\u003e class and will therefore need access to the file that contains that class.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and define the class in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Car \u0026lt; Vehicle\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe use the \u003ccode\u003e\u0026lt;\u003c/code\u003e to inherit the \u003ccode\u003eCar\u003c/code\u003e class from \u003ccode\u003eVehicle\u003c/code\u003e. Notice that there are \u003cem\u003eno methods defined in the \u003ccode\u003eCar\u003c/code\u003e class\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eRun the test suite again and you'll see that you are passing a number of tests for the \u003ccode\u003eCar\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eWow! We didn't write \u003cem\u003eanything\u003c/em\u003e in our \u003ccode\u003eCar\u003c/code\u003e class but instances of \u003ccode\u003eCar\u003c/code\u003e class \u003cem\u003einherit\u003c/em\u003e all of the \u003ccode\u003eVehicle\u003c/code\u003e methods and therefore have access to them. We're still failing the \u003ccode\u003e#go\u003c/code\u003e test however. Looks like the test is expecting the \u003ccode\u003e#go\u003c/code\u003e method on an individual car to return the phrase: \u003ccode\u003e\"VRRROOOOOOOOOOOOOOOOOOOOOOOM!!!!!\"\u003c/code\u003e. This is different than the return value of the \u003ccode\u003e#go\u003c/code\u003e method that we inherited from the \u003ccode\u003eVehicle\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eLet's overwrite the inherited \u003ccode\u003ego\u003c/code\u003e method with one specific to \u003ccode\u003eCar\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eStep 3: Overwriting Inherited Methods\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/car.rb\u003c/code\u003e, write the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Car \u0026lt; Vehicle\u003cbr\u003e  def go\u003cbr\u003e    \"VRRROOOOOOOOOOOOOOOOOOOOOOOM!!!!!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, run the tests again and you should be passing all of them.\u003c/p\u003e\n\n\u003ch4\u003eMethod Look-Up in Ruby\u003c/h4\u003e\n\n\u003cp\u003eHow does our above example work? Well, when your program is being executed, at the point at which the \u003ccode\u003e#go\u003c/code\u003e method is invoked, the compiler will first look in the class to which the instance of car that we are calling the method on belongs. If it finds a \u003ccode\u003e#go\u003c/code\u003e method there, it will execute \u003cem\u003ethat method\u003c/em\u003e. If it doesn't find such a method there, it will move on to look in the parent class that this class inherits from.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga0b77f6b8142f210275e6e38ffe919ac","title":"Deli Counter Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"deli-counter\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/deli-counter/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/deli-counter\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/deli-counter/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice building methods that use iteration and controlling their return values.\u003c/li\u003e\n\u003cli\u003ePractice manipulating arrays (adding elements, removing elements, etc.).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe local deli is putting in a new computerized queue to keep track of their customers and improve productivity. At the beginning of the day, the deli is empty so the queue should be represented by an empty array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekatz_deli = []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWrite all of your code in \u003ccode\u003edeli_counter.rb\u003c/code\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eBuild the \u003ccode\u003eline\u003c/code\u003e method that shows everyone their current place in the line. If there is nobody in line, it should say \u003ccode\u003e\"The line is currently empty.\"\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuild a method that a new customer will use when entering the deli. The \u003ccode\u003etake_a_number\u003c/code\u003e method should accept two arguments, the array for the current line of people (\u003ccode\u003ekatz_deli\u003c/code\u003e), and a string containing the name of the person joining the end of the line. The method should call out (\u003ccode\u003eputs\u003c/code\u003e) the person's name along with their position in line. \u003cstrong\u003eTop-Tip:\u003c/strong\u003e \u003cem\u003eRemember that people like to count from\u003c/em\u003e \u003ccode\u003e1\u003c/code\u003e\u003cem\u003e, not from\u003c/em\u003e \u003ccode\u003e0\u003c/code\u003e \u003cem\u003e(\"zero\") like computers.\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuild the \u003ccode\u003enow_serving\u003c/code\u003e method which should call out (i.e. \u003ccode\u003eputs\u003c/code\u003e) the next person in line and then remove them from the front. If there is nobody in line, it should call out (\u003ccode\u003eputs\u003c/code\u003e) that \u003ccode\u003e\"There is nobody waiting to be served!\"\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eExample usage:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  katz_deli = []\u003cbr\u003e\u003cbr\u003e  take_a_number(katz_deli, \"Ada\") #=\u0026gt; Welcome, Ada. You are number 1 in line.\u003cbr\u003e  take_a_number(katz_deli, \"Grace\") #=\u0026gt; Welcome, Grace. You are number 2 in line.\u003cbr\u003e  take_a_number(katz_deli, \"Kent\") #=\u0026gt; Welcome, Kent. You are number 3 in line.\u003cbr\u003e\u003cbr\u003e  line(katz_deli) #=\u0026gt; \"The line is currently: 1. Ada 2. Grace 3. Kent\"\u003cbr\u003e\u003cbr\u003e  now_serving(katz_deli) #=\u0026gt; \"Currently serving Ada.\"\u003cbr\u003e\u003cbr\u003e  line(katz_deli) #=\u0026gt; \"The line is currently: 1. Grace 2. Kent\"\u003cbr\u003e\u003cbr\u003e  take_a_number(katz_deli, \"Matz\") #=\u0026gt; Welcome, Matz. You are number 3 in line.\u003cbr\u003e\u003cbr\u003e  line(katz_deli) #=\u0026gt; \"The line is currently: 1. Grace 2. Kent 3. Matz\"\u003cbr\u003e\u003cbr\u003e  now_serving(katz_deli) #=\u0026gt; \"Currently serving Grace.\"\u003cbr\u003e\u003cbr\u003e  line(katz_deli) #=\u0026gt; \"The line is currently: 1. Kent 2. Matz\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e Review adding and removing elements from an array as well as iterating with index numbers. Also, many of the methods to add and remove elements from an array can also be used to add and remove elements to a string. This will help you solve the lab.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gf392e0d8c8c10f456c8d8b8903c1de66","title":"Display Data from an Array of Arrays Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-iteration-lab-part-1\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-1/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-1\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-1/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDisplay the cells in an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to practice what we reviewed in the previous lesson -\ndisplaying content from an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eWe're going to give you a bit of \"reference code.\" Reference code is code that's\na little generic. It probably doesn't solve any \u003cem\u003ereal\u003c/em\u003e problem, but which is\nkept intentionally \u003cstrong\u003e\u003cem\u003every simple\u003c/em\u003e\u003c/strong\u003e so that you can see how it might be adapted\nto your particular need. Some people call these \"reference implementations.\"\u003c/p\u003e\n\n\u003ch2\u003eDisplay the Cells in an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es\u003c/h2\u003e\n\n\u003cp\u003eIt's not often we say this, but this next bit of code is worth memorizing.\nIf you want to learn to speak any human language, it's a good idea to learn the\ngrammar, grow your vocabulary and talk with native speakers as much as\npossible.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBut\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThat takes years, and, in a pinch, you should \u003cem\u003ereally know\u003c/em\u003e how to ask for\nfood, water, emergency services, and a bathroom. Even if you don't understand\nwhat's happening grammatically, having a few \"stock phrases\" in times of need\nis helpful.  The following code is a good \"stock phrase.\"\u003c/p\u003e\n\n\u003cp\u003eAssuming the following AoA:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe display it like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003erow_index = 0\u003cbr\u003ewhile row_index \u0026lt; spice_rack.count do\u003cbr\u003e  element_index = 0\u003cbr\u003e  while element_index \u0026lt; spice_rack[row_index].count do\u003cbr\u003e    p spice_rack[row_index][element_index]\u003cbr\u003e    element_index += 1\u003cbr\u003e  end\u003cbr\u003e  row_index += 1\u003cbr\u003eend #=\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis prints out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePosh\u003cbr\u003eScary\u003cbr\u003eSporty\u003cbr\u003ePaprika\u003cbr\u003eFajita Mix\u003cbr\u003eCoriander\u003cbr\u003eParsley\u003cbr\u003eSage\u003cbr\u003eRosemary\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis \"formula\" can be expanded and changed. Maybe you want something more\ndescriptive than \u003ccode\u003erow_index\u003c/code\u003e or \u003ccode\u003eelement_index\u003c/code\u003e index. Or, perhaps, you need to\nadjust behavior slightly. That's fine! But if you're not sure how to start,\nthis is always a good start and will get you un-stuck!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this lab, your task is to write the implementation for one method,\n\u003ccode\u003efind_even_values\u003c/code\u003e. Write your code in \u003ccode\u003elib/iteration_with_loops.rb\u003c/code\u003e using the\nguidance in the comments there and below.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003efind_even_values\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method is already defined but does not contain any code. It should accept\nan array of arrays as a parameter. Your task is to iterate over the AoA to\naccess the elements of each nested array and print out every even number\npresent. So, given the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays = [\u003cbr\u003e  [1,2,3],\u003cbr\u003e  [4,5,6],\u003cbr\u003e  [7,8,9]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003efind_even_values(array_of_arrays)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expected output would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2\u003cbr\u003e4\u003cbr\u003e6\u003cbr\u003e8\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUse \u003ccode\u003elearn\u003c/code\u003e to check your solution and \u003ccode\u003elearn submit\u003c/code\u003e to submit it. Try to solve\nthis on your own first, but if you get stuck, a walkthrough is provided below.\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\n\u003cp\u003eOur solution is going to be similar to the first example provided in this\nlesson, but before we get there, let's look at solving this for a single array\nof arrays using specific, concrete code. If we had the following array of arrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_arrays = [\u003cbr\u003e  [1,2,3],\u003cbr\u003e  [4,5,6],\u003cbr\u003e  [7,8,9]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we only wanted to print out even values, a specific solution could be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep array_of_arrays[0][1]\u003cbr\u003e # =\u0026gt; 2\u003cbr\u003ep array_of_arrays[1][0]\u003cbr\u003e # =\u0026gt; 4\u003cbr\u003ep array_of_arrays[1][2]\u003cbr\u003e # =\u0026gt; 6\u003cbr\u003ep array_of_arrays[2][1]\u003cbr\u003e # =\u0026gt; 8\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see which values are even, and go straight to printing only those. What\nif we had this exact structure (an array of three arrays, each with three\nelement), but we couldn't see the values contained?\u003c/p\u003e\n\n\u003cp\u003eWe would have to check every element using a conditional statement. \u003ca href=\"https://ruby-doc.org/core-2.7.0/Integer.html\"\u003eIntegers\u003c/a\u003e\nin Ruby have a built-in methods to tell if something is even or odd - \u003ccode\u003e.even?\u003c/code\u003e\nand \u003ccode\u003e.odd?\u003c/code\u003e. We can use this to determine whether or not a value should be\nprinted:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif array_of_arrays[0][0].even?\u003cbr\u003e p array_of_arrays[0][0]\u003cbr\u003eend\u003cbr\u003eif array_of_arrays[0][1].even?\u003cbr\u003e p array_of_arrays[0][1]\u003cbr\u003eend\u003cbr\u003eif array_of_arrays[0][2].even?\u003cbr\u003e p array_of_arrays[0][2]\u003cbr\u003eend\u003cbr\u003eif array_of_arrays[1][0].even?\u003cbr\u003e p array_of_arrays[1][0]\u003cbr\u003eend\u003cbr\u003eif array_of_arrays[1][1].even?\u003cbr\u003e p array_of_arrays[1][1]\u003cbr\u003eend\u003cbr\u003e# etc...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, regardless of the elements contained, we would be able to print out only\nthe even values.\u003c/p\u003e\n\n\u003cp\u003eThis code still relies on the assumption that the array of arrays is structured\nprecisely how we expect. When writing a looping solution, the implementation for\ndeciding whether or not to print a value is going to be like we see above.\nLoops, however, abstract away the specific indices being used.\u003c/p\u003e\n\n\u003cp\u003eTo implement a looping solution, first, we'll start with a generic double loop:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef find_even_values(src)\u003cbr\u003e  row_index = 0\u003cbr\u003e  while row_index \u0026lt; src.count do\u003cbr\u003e    element_index = 0\u003cbr\u003e    while element_index \u0026lt; src[row_index].count do\u003cbr\u003e      # inside this loop, src[row_index][element_index] will access the current element\u003cbr\u003e      element_index += 1\u003cbr\u003e    end\u003cbr\u003e    row_index += 1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe know thata the \u003ccode\u003esrc\u003c/code\u003e parameter is an array of arrays, so we can use\n\u003ccode\u003esrc.count\u003c/code\u003e to get the length of the outer array and compare it to \u003ccode\u003erow_index\u003c/code\u003e\nwhen setting up the first \u003ccode\u003ewhile\u003c/code\u003e loop. Inside this loop, we create a second\nvariable, \u003ccode\u003eelement_index\u003c/code\u003e. Every time the outer loop runs, \u003ccode\u003eelement_index\u003c/code\u003e is\nset to \u003ccode\u003e0\u003c/code\u003e. When setting up the inner \u003ccode\u003ewhile\u003c/code\u003e loop, we use\n\u003ccode\u003esrc[row_index].count\u003c/code\u003e. This gives us the length of the current nested array\nwe're working with.\u003c/p\u003e\n\n\u003cp\u003eInside this second \u003ccode\u003ewhile\u003c/code\u003e loop, we can access nested values with\n\u003ccode\u003esrc[row_index][element_index]\u003c/code\u003e. To output only even values, here is where we\nwill put a conditional statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef find_even_values(src)\u003cbr\u003e  row_index = 0\u003cbr\u003e  while row_index \u0026lt; src.count do\u003cbr\u003e    element_index = 0\u003cbr\u003e    while element_index \u0026lt; src[row_index].count do\u003cbr\u003e      if src[row_index][element_index].even?\u003cbr\u003e        p src[row_index][element_index]\u003cbr\u003e      end\u003cbr\u003e      element_index += 1\u003cbr\u003e    end\u003cbr\u003e    row_index += 1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eUsing loops with an array of arrays, we can access every value regardless of how\nmany nested arrays are present and how long each nested array is. We will see\nall sorts of data structures, arrays of arrays of arrays, hashes of arrays,\narrays of hashes of arrays, etc... to work with each, we will need a slightly\ncustomized loop implementation. An array of array of arrays, for instance, would\nrequire \u003cem\u003ethree\u003c/em\u003e \u003ccode\u003ewhile\u003c/code\u003e loops. Once we've worked out the particular\nimplementation, though, we gain a powerful tool in working with data!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc4211052c675946e234e14eefc98590f","title":"Dynamic ORMs","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"dynamic-orms-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/dynamic-orms-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dynamic-orms-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/dynamic-orms-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain why a dynamic ORM is useful to us as developers\u003c/li\u003e\n\u003cli\u003eBuild a basic dynamic ORM\u003c/li\u003e\n\u003cli\u003eBuild a dynamic ORM that can be used by any given Ruby class\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Dynamic ORMs?\u003c/h2\u003e\n\n\u003cp\u003eAs developers, we understand the need for our Ruby programs to be able to connect with a database. Any complex application is going to need to persist some data. Along with this need, we recognize the need for the connection between our program and our database to be, like all of our code, organized and sensible. That is why we use the ORM design pattern in which a Ruby class is mapped to a database table and instances of that class are represented as rows in that table.\u003c/p\u003e\n\n\u003cp\u003eWe can implement this mapping by using a class to create a database table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  attr_accessor :name, :album\u003cbr\u003e  attr_reader :id\u003cbr\u003e\u003cbr\u003e  def initialize(id=nil, name, album)\u003cbr\u003e    @id = id\u003cbr\u003e    @name = name\u003cbr\u003e    @album = album\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.create_table\u003cbr\u003e    sql =  \u0026lt;      CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e        id INTEGER PRIMARY KEY,\u003cbr\u003e        name TEXT,\u003cbr\u003e        album TEXT\u003cbr\u003e        )\u003cbr\u003e    SQL\u003cbr\u003e    DB[:conn].execute(sql)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we create our \u003ccode\u003esongs\u003c/code\u003e table, so-named because we are mapping this table to an existing class, \u003ccode\u003eSong\u003c/code\u003e. The column names for the table are taken from the known \u003ccode\u003eattr_accessor\u003c/code\u003es of the \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eThis is one way to map our program to our database, but it has some limitations. For one thing, our \u003ccode\u003e#create_table\u003c/code\u003e method is dependent on our knowing exactly what to name our table and columns. So, every class in our program would require us to re-write this \u003ccode\u003e#create_table\u003c/code\u003e method, swapping out different table and column names each time. This is repetitive. As you know, we programmers are lazy and we hate to repeat ourselves. Any smelly, repetitious code, begs the question: can we abstract this into a re-usable method? In this case––can we extract our class-specific \u003ccode\u003e#create_table\u003c/code\u003e method into one that is flexible and abstract and be used across any class?\u003c/p\u003e\n\n\u003cp\u003eWell, with a dynamic ORM, we can abstract all of our conventional ORM methods into just such flexible, abstract, and shareable methods.\u003c/p\u003e\n\n\u003ch2\u003eWhat is a Dynamic ORM?\u003c/h2\u003e\n\n\u003cp\u003eA dynamic ORM allows us to map an existing database table to a class and write methods that can use nothing more than information regarding a specific database table to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate \u003ccode\u003eattr_accessors\u003c/code\u003e for a Ruby class.\u003c/li\u003e\n\u003cli\u003eCreate shareable methods for inserting, updating, selecting, and deleting data from the database table.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis pattern –– first creating the database table and having your program do all the work of writing your ORM methods for you, based on that table –– is exactly how we will develop web applications in Sinatra and Rails.\u003c/p\u003e\n\n\u003ch2\u003eCreating Our ORM\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e Writing an ORM is hard! It will require a lot of abstract thinking and we will be doing some metaprogramming. That's why we've provided you all of the code we'll be looking at in this walk-through. You'll find the code in \u003ccode\u003elib/song.rb\u003c/code\u003e. You should clone down this repo and play around with the code to get more familiar with it.\u003c/p\u003e\n\n\u003ch2\u003eStep 1: Setting Up the Database\u003c/h2\u003e\n\n\u003cp\u003eFor this exercise, we'll be working with a \u003ccode\u003eSong\u003c/code\u003e class. To create a dynamic ORM, we start by creating our database and songs table. In \u003ccode\u003econfig/environment.rb\u003c/code\u003e you'll find the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'sqlite3'\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/songs.db\")}\u003cbr\u003eDB[:conn].execute(\"DROP TABLE IF EXISTS songs\")\u003cbr\u003e\u003cbr\u003esql = \u0026lt;  CREATE TABLE IF NOT EXISTS songs (\u003cbr\u003e  id INTEGER PRIMARY KEY,\u003cbr\u003e  name TEXT,\u003cbr\u003e  album TEXT\u003cbr\u003e  )\u003cbr\u003eSQL\u003cbr\u003e\u003cbr\u003eDB[:conn].execute(sql)\u003cbr\u003eDB[:conn].results_as_hash = true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we are doing a couple of things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreating the database.\u003c/li\u003e\n\u003cli\u003eDrop \u003ccode\u003esongs\u003c/code\u003e to avoid an error.\u003c/li\u003e\n\u003cli\u003eCreating the \u003ccode\u003esongs\u003c/code\u003e table.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eLastly, we use the \u003ccode\u003e#results_as_hash\u003c/code\u003e method, available to use from the SQLite3-Ruby gem. This method says: when a \u003ccode\u003eSELECT\u003c/code\u003e statement is executed, don't return a database row as an array, return it as a hash with the column names as keys.\u003c/p\u003e\n\n\u003cp\u003eSo, instead of \u003ccode\u003eDB[:conn].execute(\"SELECT * FROM songs LIMIT 1\")\u003c/code\u003e returning something that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[[1, \"Hello\", \"25\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt will return something that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"id\"=\u0026gt;1, \"name\"=\u0026gt;\"Hello\", \"album\"=\u0026gt;\"25\", 0 =\u0026gt; 1, 1 =\u0026gt; \"Hello\", 2 =\u0026gt; \"25\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will be helpful to us as we use information requested from our database table to build attributes and methods on our \u003ccode\u003eSong\u003c/code\u003e class, but more on that later.\u003c/p\u003e\n\n\u003cp\u003eOkay, now that we see how our database and table have been set up, let's move onto metaprogramming our \u003ccode\u003eSong\u003c/code\u003e class using information from our database.\u003c/p\u003e\n\n\u003ch2\u003eStep 2: Building \u003ccode\u003eattr_accessor\u003c/code\u003es from column names\u003c/h2\u003e\n\n\u003cp\u003eThe next step of building our dynamic ORM is to use the column names of the \u003ccode\u003esongs\u003c/code\u003e table to dynamically create the \u003ccode\u003eattr_accessor\u003c/code\u003es of our \u003ccode\u003eSong\u003c/code\u003e class. In order to do that, we first need to collect the column names from our \u003ccode\u003esongs\u003c/code\u003e table. In order to collect the column names from the songs table we need to tell our \u003ccode\u003eSong\u003c/code\u003e class what table to query. However, we \u003cem\u003edon't\u003c/em\u003e want to tell the \u003ccode\u003eSong\u003c/code\u003e class to query the \u003ccode\u003esongs\u003c/code\u003e table explicitly. This would not be flexible. If we defined a method that explicitly referenced the \u003ccode\u003esongs\u003c/code\u003e table, we would not be able to extract that method into a \u003cem\u003eshareable\u003c/em\u003e method later on. Remember, the goal of our dynamic ORM is to define a series of methods that can be shared by \u003cem\u003eany class\u003c/em\u003e. So, we need to avoid explicitly referencing table and column names.\u003c/p\u003e\n\n\u003cp\u003eNow that we understand what we need to do, let's write a method that returns the name of a table, given the name of a class:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#table_name\u003c/code\u003e Method\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.table_name\u003cbr\u003e    self.to_s.downcase.pluralize\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method, which you'll see in the \u003ccode\u003eSong\u003c/code\u003e class in \u003ccode\u003elib/song.rb\u003c/code\u003e, takes the name of the class, referenced by the \u003ccode\u003eself\u003c/code\u003e keyword, turns it into a string with \u003ccode\u003e#to_s\u003c/code\u003e, downcases (or \"un-capitalizes\") that string and then \"pluralizes\" it, or makes it plural.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The \u003ccode\u003e#pluralize\u003c/code\u003e method is provided to us by the \u003ccode\u003eactive_support/inflector\u003c/code\u003e code library, required at the top of \u003ccode\u003elib/song.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow that we have a method that grabs us the table name we want to query for column names, let's build a method that actually grabs us those column names.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#column_names\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eQuerying a table for column names:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eHow do you query a table for the names of its columns? For this we need to use the following SQL query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePRAGMA table_info()\n\n\u003cp\u003eThis line of code that utilizes \u003ca href=\"#resources\"\u003ePRAGMA\u003c/a\u003e will return to us (thanks to our handy \u003ccode\u003e#results_as_hash\u003c/code\u003e method) an array of hashes describing the table itself. Each hash will contain information about one column. The array of hashes will look something like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e [{\"cid\"=\u0026gt;0,\u003cbr\u003e  \"name\"=\u0026gt;\"id\",\u003cbr\u003e  \"type\"=\u0026gt;\"INTEGER\",\u003cbr\u003e  \"notnull\"=\u0026gt;0,\u003cbr\u003e  \"dflt_value\"=\u0026gt;nil,\u003cbr\u003e  \"pk\"=\u0026gt;1,\u003cbr\u003e  0=\u0026gt;0,\u003cbr\u003e  1=\u0026gt;\"id\",\u003cbr\u003e  2=\u0026gt;\"INTEGER\",\u003cbr\u003e  3=\u0026gt;0,\u003cbr\u003e  4=\u0026gt;nil,\u003cbr\u003e  5=\u0026gt;1},\u003cbr\u003e {\"cid\"=\u0026gt;1,\u003cbr\u003e  \"name\"=\u0026gt;\"name\",\u003cbr\u003e  \"type\"=\u0026gt;\"TEXT\",\u003cbr\u003e  \"notnull\"=\u0026gt;0,\u003cbr\u003e  \"dflt_value\"=\u0026gt;nil,\u003cbr\u003e  \"pk\"=\u0026gt;0,\u003cbr\u003e  0=\u0026gt;1,\u003cbr\u003e  1=\u0026gt;\"name\",\u003cbr\u003e  2=\u0026gt;\"TEXT\",\u003cbr\u003e  3=\u0026gt;0,\u003cbr\u003e  4=\u0026gt;nil,\u003cbr\u003e  5=\u0026gt;0},\u003cbr\u003e {\"cid\"=\u0026gt;2,\u003cbr\u003e  \"name\"=\u0026gt;\"album\",\u003cbr\u003e  \"type\"=\u0026gt;\"TEXT\",\u003cbr\u003e  \"notnull\"=\u0026gt;0,\u003cbr\u003e  \"dflt_value\"=\u0026gt;nil,\u003cbr\u003e  \"pk\"=\u0026gt;0,\u003cbr\u003e  0=\u0026gt;2,\u003cbr\u003e  1=\u0026gt;\"album\",\u003cbr\u003e  2=\u0026gt;\"TEXT\",\u003cbr\u003e  3=\u0026gt;0,\u003cbr\u003e  4=\u0026gt;nil,\u003cbr\u003e  5=\u0026gt;0}]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat's a lot of information! The only thing we need to grab out of this hash is the name of each column. Each hash has a \u003ccode\u003e\"name\"\u003c/code\u003e key that points to a value of the column name.\u003c/p\u003e\u003cp\u003eNow that we know how to get information about each column from our table, let's write our \u003ccode\u003e#column_names\u003c/code\u003e method:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBuilding our method:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef self.column_names\u003cbr\u003e  DB[:conn].results_as_hash = true\u003cbr\u003e\u003cbr\u003e  sql = \"PRAGMA table_info('#{table_name}')\"\u003cbr\u003e\u003cbr\u003e  table_info = DB[:conn].execute(sql)\u003cbr\u003e  column_names = []\u003cbr\u003e\u003cbr\u003e  table_info.each do |column|\u003cbr\u003e    column_names \u0026lt;\u0026lt; column[\"name\"]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  column_names.compact\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere we write a SQL statement using the \u003ccode\u003epragma\u003c/code\u003e keyword and the \u003ccode\u003e#table_name\u003c/code\u003e method (to access the name of the table we are querying). We iterate over the resulting array of hashes to collect \u003cem\u003ejust the name of each column\u003c/em\u003e. We call \u003ccode\u003e#compact\u003c/code\u003e on that just to be safe and get rid of any \u003ccode\u003enil\u003c/code\u003e values that may end up in our collection.\u003c/p\u003e\u003cp\u003eThe return value of calling \u003ccode\u003eSong.column_names\u003c/code\u003e will therefore be:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\"id\", \"name\", \"album\"]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow that we have a method that returns us an array of column names, we can use this collection to create the \u003ccode\u003eattr_accessors\u003c/code\u003e of our \u003ccode\u003eSong\u003c/code\u003e class.\u003c/p\u003e\u003ch3\u003eMetaprogramming our \u003ccode\u003eattr_accessor\u003c/code\u003es\u003c/h3\u003e\u003cp\u003eWe can tell our \u003ccode\u003eSong\u003c/code\u003e class that it should have an \u003ccode\u003eattr_accessor\u003c/code\u003e named after each column name with the following code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eclass Song\u003cbr\u003e  def self.table_name\u003cbr\u003e    #table_name code\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.column_names\u003cbr\u003e    #column_names code\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  self.column_names.each do |col_name|\u003cbr\u003e    attr_accessor col_name.to_sym\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, we iterate over the column names stored in the \u003ccode\u003ecolumn_names\u003c/code\u003e class method and set an \u003ccode\u003eattr_accessor\u003c/code\u003e for each one, making sure to convert the column name string into a symbol with the \u003ccode\u003e#to_sym\u003c/code\u003e method, since \u003ccode\u003eattr_accessor\u003c/code\u003es must be named with symbols.\u003c/p\u003e\u003cp\u003eThis is metaprogramming because we are writing code that writes code for us. By setting the \u003ccode\u003eattr_accessor\u003c/code\u003es in this way, a reader and writer method for each column name is dynamically created, without us ever having to explicitly name each of these methods.\u003c/p\u003e\u003ch2\u003eStep 3: Building an abstract \u003ccode\u003e#initialize\u003c/code\u003e Method\u003c/h2\u003e\u003cp\u003eNow that our \u003ccode\u003eattr_accessor\u003c/code\u003es are defined, we can build the \u003ccode\u003e#initialize\u003c/code\u003e method for the \u003ccode\u003eSong\u003c/code\u003e class. Just like everything else about our dynamic ORM, we want our \u003ccode\u003e#initialize\u003c/code\u003e method to be abstract, i.e. not specific to the \u003ccode\u003eSong\u003c/code\u003e class, so that we can later remove it into a parent class that any other class can inherit from. Once again, we'll use metaprogramming to achieve this.\u003c/p\u003e\u003cp\u003eWe want to be able to create a new song like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003esong = Song.new(name: \"Hello\", album: \"25\")\u003cbr\u003e\u003cbr\u003esong.name\u003cbr\u003e# =\u0026gt; \"Hello\"\u003cbr\u003e\u003cbr\u003esong.album\u003cbr\u003e# =\u0026gt; \"25\"\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo, we need to define our \u003ccode\u003e#initialize\u003c/code\u003e method to take in a hash of named, or keyword, arguments. However, we \u003cem\u003edon't\u003c/em\u003e want to explicitly name those arguments. Here's how we can do it:\u003c/p\u003e\u003ch3\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e Method\u003c/h3\u003e\u003cpre\u003e\u003ccode\u003edef initialize(options={})\u003cbr\u003e  options.each do |property, value|\u003cbr\u003e    self.send(\"#{property}=\", value)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, we define our method to take in an argument of \u003ccode\u003eoptions\u003c/code\u003e, which defaults to an empty hash. We expect \u003ccode\u003e#new\u003c/code\u003e to be called with a hash, so when we refer to \u003ccode\u003eoptions\u003c/code\u003e inside the \u003ccode\u003e#initialize\u003c/code\u003e method, we expect to be operating on a hash.\u003c/p\u003e\u003cp\u003eWe iterate over the \u003ccode\u003eoptions\u003c/code\u003e hash and use our fancy metaprogramming \u003ccode\u003e#send\u003c/code\u003e method to interpolate the name of each hash key as a method that we set equal to that key's value. As long as each \u003ccode\u003eproperty\u003c/code\u003e has a corresponding \u003ccode\u003eattr_accessor\u003c/code\u003e, this \u003ccode\u003e#initialize\u003c/code\u003e method will work.\u003c/p\u003e\u003ch2\u003eStep 4: Writing our ORM Methods\u003c/h2\u003e\u003cp\u003eLet's move on to writing some of the conventional ORM methods, like \u003ccode\u003e#save\u003c/code\u003e and \u003ccode\u003e#find_by_name\u003c/code\u003e, in a dynamic fashion. In other words, we will write these methods to be abstract, not specific to the \u003ccode\u003eSong\u003c/code\u003e class, so that we can later extract them and share them among any number of classes.\u003c/p\u003e\u003ch3\u003eSaving Records in a Dynamic Manner\u003c/h3\u003e\u003cp\u003eLet's take a look at the basic SQL statement required to save a given song record:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album)\u003cbr\u003eVALUES 'Hello', '25';\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn order to write a method that can \u003ccode\u003eINSERT\u003c/code\u003e any record to any table, we need to be able to craft the above SQL statement without explicitly referencing the \u003ccode\u003esongs\u003c/code\u003e table or column names and without explicitly referencing the values of a given \u003ccode\u003eSong\u003c/code\u003e instance.\u003c/p\u003e\u003cp\u003eLet's take this one step at a time.\u003c/p\u003e\u003ch4\u003eAbstracting the Table Name\u003c/h4\u003e\u003cp\u003eLuckily for us, we already have a method to give us the table name associated to any given class: \u003ccode\u003e\u0026lt;class name\u0026gt;.table_name\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eRecall, however, that the conventional \u003ccode\u003e#save\u003c/code\u003e is an \u003cem\u003einstance\u003c/em\u003e method. So, inside a \u003ccode\u003e#save\u003c/code\u003e method, \u003ccode\u003eself\u003c/code\u003e will refer to the instance of the class, not the class itself. In order to use a class method inside an instance method, we need to do the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef some_instance_method\u003cbr\u003e  self.class.some_class_method\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo, to access the table name we want to \u003ccode\u003eINSERT\u003c/code\u003e into from inside our \u003ccode\u003e#save\u003c/code\u003e method, we will use the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eself.class.table_name\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can wrap up this code in a handy method, \u003cstrong\u003e\u003ccode\u003e#table_name_for_insert\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef table_name_for_insert\u003cbr\u003e  self.class.table_name\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGreat, now let's grab our column names in an abstract manner.\u003c/p\u003e\u003ch4\u003eAbstracting the Column Names\u003c/h4\u003e\u003cp\u003eWe already have a handy method for grabbing the column names of the table associated with a given class:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eself.class.column_names\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the case of our \u003ccode\u003eSong\u003c/code\u003e class, this will return:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\"id\", \"name\", \"album\"]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere's one problem though. When we \u003ccode\u003eINSERT\u003c/code\u003e a row into a database table for the first time, we \u003cem\u003edon't\u003c/em\u003e \u003ccode\u003eINSERT\u003c/code\u003e the \u003ccode\u003eid\u003c/code\u003e attribute. In fact, our Ruby object has an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003enil\u003c/code\u003e before it is inserted into the table. The magic of our SQL database handles the creation of an ID for a given table row and then we will use that ID to assign a value to the original object's \u003ccode\u003eid\u003c/code\u003e attribute.\u003c/p\u003e\u003cp\u003eSo, when we \u003ccode\u003esave\u003c/code\u003e our Ruby object, we should not include the id column name or insert a value for the id column. Therefore, we need to remove \u003ccode\u003e\"id\"\u003c/code\u003e from the array of column names returned from the method call above:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eself.class.column_names.delete_if {|col| col == \"id\"}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will return:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\"name\", \"album\"]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe're almost there with the list of column names needed to craft our \u003ccode\u003eINSERT\u003c/code\u003e statement. Let's take another look at what the statement needs to look like:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album)\u003cbr\u003eVALUES 'Hello', '25';\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNotice that the column names in the statement are comma separated. Our column names returned by the code above are in an array. Let's turn them into a comma separated list, contained in a string:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eself.class.column_names.delete_if {|col| col == \"id\"}.join(\", \")\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will return:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\"name, album\"\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePerfect! Now we have all the code we need to grab a comma separated list of the column names of the table associated with any given class.\u003c/p\u003e\u003cp\u003eWe can wrap up this code in a handy method, \u003cstrong\u003e\u003ccode\u003e#col_names_for_insert\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef col_names_for_insert\u003cbr\u003e  self.class.column_names.delete_if {|col| col == \"id\"}.join(\", \")\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLastly, we need an abstract way to grab the \u003cem\u003evalues\u003c/em\u003e we want to insert.\u003c/p\u003e\u003ch4\u003eAbstracting the Values to Insert\u003c/h4\u003e\u003cp\u003eWhen inserting a row into our table, we grab the values to insert by grabbing the values of that instance's \u003ccode\u003eattr_reader\u003c/code\u003es. How can we grab these values without calling the reader methods by name?\u003c/p\u003e\u003cp\u003eLet's break this down.\u003c/p\u003e\u003cp\u003eWe already know that the names of that \u003ccode\u003eattr_accessor\u003c/code\u003e methods were derived from the column names of the table associated to our class. Those column names are stored in the \u003ccode\u003e#column_names\u003c/code\u003e class method.\u003c/p\u003e\u003cp\u003eIf only there was some way to \u003cem\u003einvoke\u003c/em\u003e those methods, without naming them explicitly, and capture their return values...\u003c/p\u003e\u003cp\u003eIn fact, we already know how to programmatically invoke a method, without knowing the exact name of the method, using the \u003ccode\u003e#send\u003c/code\u003e method.\u003c/p\u003e\u003cp\u003eLet's iterate over the column names stored in \u003ccode\u003e#column_names\u003c/code\u003e and use the \u003ccode\u003e#send\u003c/code\u003e method with each individual column name to invoke the method by that same name and capture the return value:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003evalues = []\u003cbr\u003e\u003cbr\u003eself.class.column_names.each do |col_name|\u003cbr\u003e  values \u0026lt;\u0026lt; \"'#{send(col_name)}'\" unless send(col_name).nil?\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, we push the return value of invoking a method via the \u003ccode\u003e#send\u003c/code\u003e method, unless that value is \u003ccode\u003enil\u003c/code\u003e (as it would be for the \u003ccode\u003eid\u003c/code\u003e method before a record is saved, for instance).\u003c/p\u003e\u003cp\u003eNotice that we are wrapping the return value in a string. That is because we are trying to craft a string of SQL. Also notice that each individual value will be enclosed in single quotes, \u003ccode\u003e' '\u003c/code\u003e, inside that string. That is because the final SQL string will need to look like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eINSERT INTO songs (name, album)\u003cbr\u003eVALUES 'Hello', '25';\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSQL expects us to pass in each column value in single quotes.\u003c/p\u003e\u003cp\u003eThe above code, however, will result in a \u003ccode\u003evalues\u003c/code\u003e array\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\"'the name of the song'\", \"'the album of the song'\"]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe need comma separated values for our SQL statement. Let's join this array into a string:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003evalues.join(\", \")\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet's wrap up this code in a handy method, \u003cstrong\u003e\u003ccode\u003e#values_for_insert\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef values_for_insert\u003cbr\u003e  values = []\u003cbr\u003e  self.class.column_names.each do |col_name|\u003cbr\u003e    values \u0026lt;\u0026lt; \"'#{send(col_name)}'\" unless send(col_name).nil?\u003cbr\u003e  end\u003cbr\u003e  values.join(\", \")\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow that we have abstract, flexible ways to grab each of the constituent parts of the SQL statement to save a record, let's put them all together into the \u003ccode\u003e#save\u003c/code\u003e method:\u003c/p\u003e\u003ch4\u003eThe \u003ccode\u003e#save\u003c/code\u003e Method:\u003c/h4\u003e\u003cpre\u003e\u003ccode\u003edef save\u003cbr\u003e  DB[:conn].execute(\"INSERT INTO #{table_name_for_insert} (#{col_names_for_insert}) VALUES (?)\", [values_for_insert])\u003cbr\u003e\u003cbr\u003e  @id = DB[:conn].execute(\"SELECT last_insert_rowid() FROM #{table_name_for_insert}\")[0][0]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Using \u003ccode\u003eString\u003c/code\u003e interpolation for a SQL query creates a SQL injection vulnerability, which we've previously stated is a bad idea as it creates a security issue, however, we're using these examples to illustrate how dynamic ORMs work.\u003c/p\u003e\u003ch3\u003eSelecting Records in a Dynamic Manner\u003c/h3\u003e\u003cp\u003eNow that we have a better understanding of how our dynamic, abstract, ORM works, let's build the \u003ccode\u003e#find_by_name\u003c/code\u003e method.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edef self.find_by_name(name)\u003cbr\u003e  DB[:conn].execute(\"SELECT * FROM #{self.table_name} WHERE name = ?\", [name])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Using \u003ccode\u003eString\u003c/code\u003e interpolation for a SQL query creates a SQL injection vulnerability, which we've previously stated is a bad idea as it creates a security issue, however, we're using these examples to illustrate how dynamic ORMs work.\u003c/p\u003e\u003cp\u003eThis method is dynamic and abstract because it does not reference the table name explicitly. Instead it uses the \u003ccode\u003e#table_name\u003c/code\u003e class method we built that will return the table name associated with any given class.\u003c/p\u003e\u003ch2\u003eConclusion\u003c/h2\u003e\u003cp\u003eRemember, dynamic ORMs are hard. Spend some time reading over the code in \u003ccode\u003elib/song.rb\u003c/code\u003e and playing with the code in \u003ccode\u003ebin/run\u003c/code\u003e. Practice creating, saving and querying songs in the \u003ccode\u003ebin/run\u003c/code\u003e file and run the program again and again until you get a better feel for it. \u003c/p\u003e\u003cp\u003eNow that we have all of these great dynamic, abstract methods that connect a class to a database table, we'll move on to extracting into a parent class that any other class can inherit from.\u003c/p\u003e\u003ch2\u003eResources\u003c/h2\u003e\u003cp\u003e\u003ca name=\"pragma\"\u003e\u003c/a\u003e\n\u003ca href=\"http://www.tutorialspoint.com/sqlite/sqlite_pragma.htm\"\u003eSQLite- PRAGMA\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.sqlite.org/pragma.html#pragma_table_info\"\u003ePRAGMA\u003c/a\u003e\u003c/p\u003e\u003ctable\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003c/table\u003e\u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfb4852b3addd400499faa60458cbab1f","title":"Dynamic Routes","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-dynamic-routes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-routes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-routes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-routes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've provided a basic \u003ccode\u003eItem\u003c/code\u003e class. Let's get more information on our items.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eYour application should only accept the \u003ccode\u003e/items/\u0026lt;ITEM NAME\u0026gt;\u003c/code\u003e route. Everything else should \u003ccode\u003e404\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIf a user requests \u003ccode\u003e/items/\u0026lt;Item Name\u0026gt;\u003c/code\u003e it should return the price of that item\u003c/li\u003e\n\u003cli\u003eIF a user requests an item that you don't have, then return a \u003ccode\u003e400\u003c/code\u003e and an error message\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gf95956e2aed18931c1b1bab8860b3f1b","title":"Dynamic Web Apps","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-dynamic-web-apps\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-web-apps/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-web-apps\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-dynamic-web-apps/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eTranslate a command line Ruby app to a dynamic web app\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#write\u003c/code\u003e method in a \u003ccode\u003eRack::Response\u003c/code\u003e object to make a dynamic web app\nin Rack\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreating a Dynamic Web App\u003c/h2\u003e\n\n\u003cp\u003eMaking web apps that always give the same response are boring. Programming is\nfun because of its ability to create dynamic responses that change depending on\nthe input. A dynamic web app in Rack is pretty straightforward. Let's say we\nwanted to create a simple slots game.\u003c/p\u003e\n\n\u003cp\u003eFirst, let's set up our basic Rack app inside of \u003ccode\u003eapp/application.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e    resp.write \"Hello, World\"\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen run it with \u003ccode\u003erackup config.ru\u003c/code\u003e. You should see something like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[2016-07-28 10:09:08] INFO  WEBrick 1.3.1\u003cbr\u003e[2016-07-28 10:09:08] INFO  ruby 2.3.0 (2015-12-25) [x86_64-darwin15]\u003cbr\u003e[2016-07-28 10:09:08] INFO  WEBrick::HTTPServer#start: pid=38967 port=9292\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMake note of \u003ccode\u003eport=9292\u003c/code\u003e — that shows which port we'll access the application on\nin the browser. But what's the host? If we're developing locally, we can just\nuse \u003ccode\u003elocalhost\u003c/code\u003e — so in this case we'd visit \u003ccode\u003ehttp://localhost:9292\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf we're using the IDE, we should also see a line like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStarting server at 104.131.138.76:6868\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat is the full URL to use. (\u003cstrong\u003eYours will most likely be different!\u003c/strong\u003e) So in\nthis case, we'd visit \u003ccode\u003ehttp://104.131.138.76:6868\u003c/code\u003e in the browser. If we're using\nthe IDE, \u003cstrong\u003elocalhost will not work\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen we visit the appropriate URL in our browser, we should see \"Hello, World\".\nLet's liven things up a bit. The amazing part of Rack and everything (like\nRails) that is built on top of Rack is that it's \u003cem\u003ejust Ruby\u003c/em\u003e. If you were\nwriting a command line slots game generator, you would first need to generate\nthree numbers between 1 and 20. You could do that like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Don't sweat the \u003ccode\u003eKernel\u003c/code\u003e bit — \u003ca href=\"http://ruby-doc.org/core-2.3.0/Kernel.html\"\u003eKernel\u003c/a\u003e\nis a module that holds many of Ruby's most useful bits. We're just using it here\nto generate some random numbers.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enum_1 = Kernel.rand(1..20)\u003cbr\u003enum_2 = Kernel.rand(1..20)\u003cbr\u003enum_3 = Kernel.rand(1..20)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, to check to see if you won or not, we'd have an if statement like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enum_1 = Kernel.rand(1..20)\u003cbr\u003enum_2 = Kernel.rand(1..20)\u003cbr\u003enum_3 = Kernel.rand(1..20)\u003cbr\u003e\u003cbr\u003eif num_1==num_2 \u0026amp;\u0026amp; num_2==num_3\u003cbr\u003e  puts \"You Win\"\u003cbr\u003eelse\u003cbr\u003e  puts \"You Lose\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo how do we now make this application work on the web? Almost none of the code\nactually is specific to a command line interface. The only parts that require a\ncommand line are the two \u003ccode\u003eputs\u003c/code\u003e lines. All that needs to change to adapt this\nfor the web is a different way than \u003ccode\u003eputs\u003c/code\u003e to express output to our user.\nBecause this is the web, that means adding it to our response. Instead of \u003ccode\u003eputs\u003c/code\u003e\nnow we'll use the \u003ccode\u003e#write\u003c/code\u003e method in our \u003ccode\u003eRack::Response\u003c/code\u003e object.\u003c/p\u003e\n\n\u003cp\u003eRemember that to modify our web server, we have to first exit out of the running\nserver by typing CTRL-C. Then open up your Application and modify it to look\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e\u003cbr\u003e    num_1 = Kernel.rand(1..20)\u003cbr\u003e    num_2 = Kernel.rand(1..20)\u003cbr\u003e    num_3 = Kernel.rand(1..20)\u003cbr\u003e\u003cbr\u003e    if num_1==num_2 \u0026amp;\u0026amp; num_2==num_3\u003cbr\u003e      resp.write \"You Win\"\u003cbr\u003e    else\u003cbr\u003e      resp.write \"You Lose\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we only changed the \u003ccode\u003eputs\u003c/code\u003e statements into \u003ccode\u003eresp.write\u003c/code\u003e statements.\nThat's it! Web servers are just big ruby apps that respond to the user in an\nHTTP response rather than via \u003ccode\u003eputs\u003c/code\u003e statements. Let's give the user a bit more\ninformation about what numbers they received by writing the numbers to the\nresponse as well. The \u003ccode\u003e#write\u003c/code\u003e method can be called many times to build up the\nfull response. The response isn't sent back to the user until \u003ccode\u003e#finish\u003c/code\u003e is\ncalled.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Application\u003cbr\u003e\u003cbr\u003e  def call(env)\u003cbr\u003e    resp = Rack::Response.new\u003cbr\u003e\u003cbr\u003e    num_1 = Kernel.rand(1..20)\u003cbr\u003e    num_2 = Kernel.rand(1..20)\u003cbr\u003e    num_3 = Kernel.rand(1..20)\u003cbr\u003e\u003cbr\u003e    resp.write \"#{num_1}\\n\"\u003cbr\u003e    resp.write \"#{num_2}\\n\"\u003cbr\u003e    resp.write \"#{num_3}\\n\"\u003cbr\u003e\u003cbr\u003e    if num_1==num_2 \u0026amp;\u0026amp; num_2==num_3\u003cbr\u003e      resp.write \"You Win\"\u003cbr\u003e    else\u003cbr\u003e      resp.write \"You Lose\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    resp.finish\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\\n\u003c/code\u003es are just a special character which gets rendered by the browser as a\nnew line. Kill your running server with CTRL-C and re-run it and refresh your\nbrowser. Feel free to cheat a bit and change the random numbers to just be\nbetween one and two. That way you can test that both work.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gbcdbb8a67d25959120b1e094544f7021","title":"Email Parser Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-email-parser-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-email-parser-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-email-parser-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-email-parser-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice defining a class and using an \u003ccode\u003eattr_accessor\u003c/code\u003e to create setter and\ngetter methods\u003c/li\u003e\n\u003cli\u003eUse TDD to write working code\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eYou will be writing an \u003ccode\u003eEmailAddressParser\u003c/code\u003e class that gets initialized with a string\nof emails.\u003c/p\u003e\n\n\u003cp\u003eYour job is to parse those email addresses into a useful array using an instance\nmethod, \u003ccode\u003eparse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eI should be able to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eemail_addresses = \"john@doe.com, person@somewhere.org\"\u003cbr\u003eparser = EmailAddressParser.new(email_addresses)\u003cbr\u003e\u003cbr\u003eparser.parse\u003cbr\u003e# =\u0026gt; [\"john@doe.com\", \"person@somewhere.org\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should be able to initialize with a list of email addresses either separated\nwith spaces \u003cem\u003eor\u003c/em\u003e separated with commas. The \u003ccode\u003eparse\u003c/code\u003e method should, additionally,\nonly return unique addresses.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis lab is test-driven, so run the test suite to get started and use the test\noutput to get the program working.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHints:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow will you control for parsing a list of email addresses that is \u003cem\u003eeither\u003c/em\u003e\ncomma separated \u003cem\u003eor\u003c/em\u003e separated by a white space?\u003c/li\u003e\n\u003cli\u003eUse an \u003ccode\u003eattr_accessor\u003c/code\u003e to set and get the list of email addresses\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7d3c552344496bf249ccdeb776f7e822","title":"Extract Data from an Array of Arrays Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-iteration-lab-part-2\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-2/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-2\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-2/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to extract some information from a nested data\nstructure. We will again be using an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es and two \u003ccode\u003ewhile\u003c/code\u003e loops\nto handle the iteration. However, this time, you will need to collect specific\nvalues and return them in a new array.\u003c/p\u003e\n\n\u003ch2\u003eTraverse \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es to Produce a New Data Structure\u003c/h2\u003e\n\n\u003cp\u003eThe same \"formula\" that we suggested in the last lab can easily be adapted for\ndoing work other than \u003ccode\u003eputs\u003c/code\u003e-ing things. Let's say we wanted to gather all the\nelements that start with \u003ccode\u003eP\u003c/code\u003e into a new array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003eouter_results = []\u003cbr\u003erow_index = 0\u003cbr\u003ewhile row_index \u0026lt; spice_rack.count do\u003cbr\u003e  element_index = 0\u003cbr\u003e  while element_index \u0026lt; spice_rack[row_index].count do\u003cbr\u003e    # How to read the following line of code:\u003cbr\u003e    #   Array at row_index\u003cbr\u003e    #   Element of the inner array at element_index\u003cbr\u003e    #   The first character of that element...\u003cbr\u003e    if spice_rack[row_index][element_index][0] == \"P\"\u003cbr\u003e      outer_results \u0026lt;\u0026lt; spice_rack[row_index][element_index]\u003cbr\u003e    end\u003cbr\u003e    element_index += 1\u003cbr\u003e  end\u003cbr\u003e  row_index += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eouter_results #=\u0026gt;  [\"Posh\", \"Paprika\", \"Parsley\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe might say we are \u003cem\u003efiltering\u003c/em\u003e the values in this data structure. When you\nlearn Ruby's Enumerable methods in just a little while, remembering this name\nwill help a lot!\u003c/p\u003e\n\n\u003cp\u003eA slight variation on this code will allow us to \u003cem\u003ecompare\u003c/em\u003e values - handy for\nwhen we need to do things like find a maximum or minimum value. Say, for\ninstance, we wanted to collect the longest string in each nested array from our\nprevious example. Instead of using a conditional to check for \u003ccode\u003e\"P\"\u003c/code\u003e, we could\nuse a variable to keep track of the longest string.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e  [\"Posh\", \"Scary\", \"Sporty\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003eouter_results = []\u003cbr\u003erow_index = 0\u003cbr\u003ewhile row_index \u0026lt; spice_rack.count do\u003cbr\u003e  element_index = 0\u003cbr\u003e  longest_string_element = \"\"\u003cbr\u003e  while element_index \u0026lt; spice_rack[row_index].count do\u003cbr\u003e\u003cbr\u003e    # Array at row_index\u003cbr\u003e    # Element of the inner array at element_index\u003cbr\u003e    # If the length of the current element is greater than the length of longest_string_element\u003cbr\u003e    # Set longest_string_element to the current element\u003cbr\u003e    if spice_rack[row_index][element_index].length \u0026gt; longest_string_element.length\u003cbr\u003e      longest_string_element = spice_rack[row_index][element_index]\u003cbr\u003e    end\u003cbr\u003e    element_index += 1\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # We have to check every element in each inner array, so after the loop finishes\u003cbr\u003e  # The current value of longest_string_element is pushed into outer_results\u003cbr\u003e  outer_results \u0026lt;\u0026lt; longest_string_element\u003cbr\u003e  row_index += 1\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eouter_results # =\u0026gt; [\"Sporty\", \"Fajita Mix\", \"Rosemary\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this lab, imagine you are working with a bit of weather data - you have the\nhourly local temperatures for the last seven days in an array of arrays, and you\nwould like to find the low temperature for each day.\u003c/p\u003e\n\n\u003cp\u003eWrite a method, \u003ccode\u003efind_min_in_nested_arrays\u003c/code\u003e that can take in an array of arrays\nof integers. This method should collect the minimum value in each nested array\ninto a new array and return it. If we had the following data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray_of_daily_temperatures = [\u003cbr\u003e  [19, 21, 24, 26, 30, 34, 37, 39, 40, 45, 48, 50, 55, 60, 63, 59, 49, 45, 40, 39, 34, 32, 25, 18],\u003cbr\u003e  [17, 18, 22, 26, 31, 35, 38, 40, 43, 45, 49, 52, 55, 61, 60, 59, 55, 49, 45, 38, 32, 30, 24, 19],\u003cbr\u003e  [13, 15, 20, 23, 33, 37, 39, 41, 45, 48, 50, 53, 57, 62, 61, 58, 52, 48, 44, 36, 35, 31, 23, 20],\u003cbr\u003e  [19, 20, 25, 28, 30, 35, 38, 40, 41, 46, 48, 51, 56, 60, 59, 55, 50, 45, 43, 39, 36, 34, 25, 24],\u003cbr\u003e  [21, 25, 28, 30, 35, 41, 47, 49, 50, 55, 56, 57, 58, 64, 63, 58, 49, 44, 42, 36, 33, 33, 27, 20],\u003cbr\u003e  [25, 29, 30, 36, 39, 45, 49, 50, 52, 57, 58, 59, 60, 66, 65, 59, 54, 49, 45, 40, 36, 30, 26, 24],\u003cbr\u003e  [30, 36, 38, 39, 40, 45, 47, 49, 50, 59, 60, 60, 65, 63, 61, 56, 49, 43, 40, 39, 35, 32, 23, 22],\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we passed in into our method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efind_min_in_nested_arrays(array_of_daily_temperatures)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe should expect to get the following array in return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[18, 17, 13, 19, 20, 24, 22]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUse \u003ccode\u003elearn\u003c/code\u003e to check your solution and \u003ccode\u003elearn submit\u003c/code\u003e to submit your work.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eSometimes data is not in a format that is useful to us. Sometimes, there is so much data, it\nwould be difficult to visually extract information out. Mapping over data structures and extracting\nwhat we want is a very helpful ability in these situations. We can turn data into what we need and\nshape it in a way that suits us.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb0e3ed2190c99f154642b1c306ecb66a","title":"Finding Prime Numbers Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"prime-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/prime-ruby/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prime-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/prime-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice iteration and looping.\u003c/li\u003e\n\u003cli\u003ePractice defining methods and controlling return values.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this repository. Run the test suite to learn what is required of you. \u003c/p\u003e\n\n\u003cp\u003eYou'll be defining a method, \u003ccode\u003eprime?()\u003c/code\u003e, that takes in an integer argument and returns a boolean of whether or not that integer is a prime number.\u003c/p\u003e\n\n\u003cp\u003eA few things to think about:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat defines an integer as a prime number? Research algorithms for how to determine if a number is prime.\u003c/li\u003e\n\u003cli\u003eHow do you create a range of numbers? How do you turn a range into an array so that it can be iterated over?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRequirements:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDo not use any other Ruby library. You must build a method that can verify whether a number is prime. Don't \u003ccode\u003erequire 'math'\u003c/code\u003e and just piggyback off their implementation of prime number.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAdvanced\u003c/h2\u003e\n\n\u003cp\u003eThink about the efficiency of your algorithm. How many iterations does it do? Look into Benchmarking in Ruby and profile a few different approaches to implementing \u003ccode\u003eprime?()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://rubylearning.com/blog/2013/06/19/how-do-i-benchmark-ruby-code/\"\u003eBasic Benchmarking in Ruby\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://en.wikipedia.org/\"\u003eWikipedia\u003c/a\u003e - \u003ca href=\"http://en.wikipedia.org/wiki/Prime_number\"\u003ePrime number\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge7d1352d7c4ccbb0bcfd0ae46ce8c8b7","title":"Gems and Bundler","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-building-applications-gems-and-bundler\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-gems-and-bundler/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-gems-and-bundler\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-gems-and-bundler/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eLearn about requiring external code libraries, called gems, in your Ruby\napplications.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLearn how to use Bundler and a Gemfile to manage gems and their dependencies\nin your applications.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eDefine Ruby Gems\u003c/h3\u003e\n\n\u003cp\u003eNothing you ever write will be 100% your code. While you probably haven't\nnoticed it, every day you use somebody else's code. You didn't write your text\neditor, you didn't write Ruby, you didn't write your operating system. Those are\nthe types of things that regular users interact with. As a developer, you will\nhave a new set of outside code to work with: Libraries. Libraries (or \"gems\" in\nRuby parlance) are just bundles of code that someone else wrote for you to\nintegrate into your codebase. For example, remember RSpec? That's a gem.\nInstead of everyone having to re-invent a way to do testing for Ruby, initially\none person and now hundreds of people have worked together to make a single\namazing library that everyone can use. What a time saver for us! We don't need\nto create our own testing framework.\u003c/p\u003e\n\n\u003cp\u003eRSpec is open source, and you integrate into a Ruby application using the\nRubyGems tool. There are thousands of gems like RSpec that are incredibly\nhelpful to us and are free to use and incorporate into your projects. That is\nthe power of open source. Together we can create something no single person\ncould make! In this lesson, we're going to take a look at gems and how to use\nthem in your applications.\u003c/p\u003e\n\n\u003ch3\u003eHow to Install a Gem\u003c/h3\u003e\n\n\u003cp\u003eGems are primarily hosted by \u003ca href=\"https://rubygems.org\"\u003eRubyGems (https://rubygems.org)\u003c/a\u003e, \na free service provided for\nthe Ruby community. If you've gone through the manual setup for your local\nenvironment or are using the in-browser IDE, you should be able to write the\nfollowing in your terminal and type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem install rspec\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd see your terminal respond by indicating that RSpec has been installed. When\nwe run this command, Ruby locates the gem, \u003ca href=\"https://rubygems.org/gems/rspec/versions/3.8.0\"\u003elooking in RubyGems by default\u003c/a\u003e, and\nif found, downloads and installs the latest version to your computer.\u003c/p\u003e\n\n\u003cp\u003eThe key, really, is knowing the correct name so that you install the gem that\nyou want.\u003c/p\u003e\n\n\u003ch3\u003eHow to Find a Gem\u003c/h3\u003e\n\n\u003cp\u003eTo find gems, Google is often a good starting place. Often, you may find a\nGitHub repository that maintains the gem files this way, and if the gem is well\nmaintained, this repository's README should contain info about how to install\nit.\u003c/p\u003e\n\n\u003cp\u003eAlternatively, you can also search for gems directly using\n\u003ca href=\"https://rubygems.org/\"\u003ehttps://rubygems.org/\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo, for instance, let's imagine we are looking for a gem to improve how Ruby\nprints data to the terminal. We could google something like\n\u003ccode\u003eruby gem print output\u003c/code\u003e. Another option is to go to\n\u003ca href=\"https://rubygems.org/search/advanced\"\u003ehttps://rubygems.org/search/advanced\u003c/a\u003e and enter \u003ccode\u003eprint\u003c/code\u003e in the search bar.\u003c/p\u003e\n\n\u003ch4\u003eHow to Choose the Right Gem\u003c/h4\u003e\n\n\u003cp\u003eLet's assume we decided to search \u003ccode\u003ehttps://rubygems.org\u003c/code\u003e for the right gem.\nLet's head to their advanced search interface\n\u003ccode\u003ehttps://rubygems.org/search/advanced\u003c/code\u003e and search for \u003ccode\u003eprint\u003c/code\u003e using the\ndescription field. The advanced search interface will give us more flexibility\nin the way we search for the ideal gem.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/gem_advanced_search.png\" alt=\"advanced gem search\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSearching by entering \u003ccode\u003eprint\u003c/code\u003e into the name field yields the following results:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/gem_search_result.png\" alt=\"search results\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou might be asking which one is the best? How to choose from those many\noptions? Which one should I use for my application?\u003c/p\u003e\n\n\u003cp\u003eThere are a few indicators that should help:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow many people have downloaded the gem?\u003c/li\u003e\n\u003cli\u003eDoes the description match what we're looking for?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this example, one gem stand way out from the rest - \u003ccode\u003eawesome_print\u003c/code\u003e, and the\ndescription sounds pretty close to what we're looking for. The second contender,\n\u003ccode\u003etable_print\u003c/code\u003e might \u003cem\u003ealso\u003c/em\u003e be an option, though it has fewer downloads.\nContinuing down the list, the third option is clearly \u003cem\u003enot what we want\u003c/em\u003e - it\nseems to be a gem specific to a certain API and has few downloads.\u003c/p\u003e\n\n\u003cp\u003eIf you are in a situation where it isn't clear what gem to use, there are\nadditional things to consider. For one, most gems will have homepages and files\nmaintained on GitHub (linked as the gem's 'Homepage' on RubyGems). Looking at\nGitHub directly, we can ask additional questions to help us find the right gem.\nFor instance:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eDoes the README indicate this gem is what you are looking for?\u003c/strong\u003e At a\nminimum, scan over the README to see if the gem fits what you are looking for.\nA well-developed README may also be a good indicator of a more professionally\ndeveloped gem.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eLooking at the repository in general, has it been updated fairly recently?\u003c/strong\u003e\nSometimes great gems can become abandoned and a lack of updates might indicate\nthis.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eHow many people have contributed to the repo?\u003c/strong\u003e Many contributors is a good\nindicator that the gem has been well maintained and updated. A single\ncontributor, while not disqualifying, could indicate the gem is a personal\nproject rather than a professionally built tool.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eHow many open issues does the repo have?\u003c/strong\u003e Real, professional tools have\nissues. Looking at issues, however, can give you a sense of how well\nmaintained the tool is.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eDoes the repo have a test suite?\u003c/strong\u003e A well-developed set of tests is an\nindicator that the gem was built with a thought out process.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eHow many people have forked the repository?\u003c/strong\u003e More forks is an indicator of\na more popular gem.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSeems like \u003ca href=\"https://github.com/awesome-print/awesome_print\"\u003e\u003ccode\u003eawesome_print\u003c/code\u003e\u003c/a\u003e is a good gem to try for our printing example.\nWhile \u003ca href=\"https://github.com/arches/table_print\"\u003e\u003ccode\u003etable_print\u003c/code\u003e\u003c/a\u003e has some cool specific features, \u003ccode\u003eawesome_print\u003c/code\u003e seems\nto be widely used and is well maintained.\u003c/p\u003e\n\n\u003cp\u003eFrom the instructions, looks like we can install \u003ccode\u003eawesome_print\u003c/code\u003e by typing\n\u003ccode\u003egem install awesome_print\u003c/code\u003e. We can test out the gem in IRB by requiring it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'awesome_print'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFrom the gem instructions, this gem will print out arrays and hashes nicely, so\nlet's try the following in IRB:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earray = [1,2,3,4]\u003cbr\u003ehash = {:a =\u0026gt; 1, :b =\u0026gt; 5}\u003cbr\u003eap array\u003cbr\u003eap hash\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstead of the normal output, \u003ccode\u003eawesome_print\u003c/code\u003e should print \u003ccode\u003earray\u003c/code\u003e and \u003ccode\u003ehash\u003c/code\u003e\nwith each value or key/value separated on a new line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e    [0] 1,\u003cbr\u003e    [1] 2,\u003cbr\u003e    [2] 3,\u003cbr\u003e    [3] 4\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e    :a =\u0026gt; 1,\u003cbr\u003e    :b =\u0026gt; 5\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNeat! With the gem installed locally, all we need to do is include the \u003ccode\u003erequire\u003c/code\u003e\nstatement in our own code and we will be able to use the gem.\u003c/p\u003e\n\n\u003ch4\u003eUsing a Gemfile and Bundler\u003c/h4\u003e\n\n\u003cp\u003eWhen it comes to building applications that others will use, if a Ruby\napplication relies on a gem, anyone using that app will need to install the gem\nto get the application to function correctly.\u003c/p\u003e\n\n\u003cp\u003eTo make this process easy, we use a \u003ccode\u003eGemfile\u003c/code\u003e. A \u003ccode\u003eGemfile\u003c/code\u003e lists all the gem\ndependencies for your application as well as the source where they can be\ndownloaded, allowing \u003cem\u003eother users\u003c/em\u003e to quickly install all the gems at once. We\ndo this using \u003ca href=\"https://bundler.io/\"\u003eBundler\u003c/a\u003e, typing \u003ccode\u003ebundle install\u003c/code\u003e in the terminal while in a\nRuby application directory. Bundler will install any gems listed.\u003c/p\u003e\n\n\u003ch4\u003eHow to Add the Gem to your Gemfile\u003c/h4\u003e\n\n\u003cp\u003eA typical Gemfile has two parts - a source at the top and a list of gems. A\nminimal Gemfile could look like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esource \"https://rubygems.org\"\u003cbr\u003e\u003cbr\u003egem 'awesome_print'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAny gems your application relies on should be listed out in the \u003ccode\u003eGemfile\u003c/code\u003e with\n\u003ccode\u003egem\u003c/code\u003e preceding them. This line of code says that we're using the\n\u003ccode\u003eawesome_print\u003c/code\u003e gem in this application.\u003c/p\u003e\n\n\u003ch3\u003eGem Versions\u003c/h3\u003e\n\n\u003cp\u003eIn addition to listing the gem, we can also specify which versions this\napplication works with. For instance, we could add the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'awesome_print', '~\u0026gt; 1.8'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhy specify version? Sometimes, a gem developer makes a major change to their\ngem. If you've built an app to work using \u003cem\u003eone\u003c/em\u003e version of a gem, a future\nversion might require a different code implementation, causing your app to\nbreak until you fix it!\u003c/p\u003e\n\n\u003cp\u003eAll gems go through several types of updates: major version changes, minor\nversion changes and patches.\u003c/p\u003e\n\n\u003cp\u003eA major version change is reflected by the first number (reading from left to\nright). Major version changes don't have to be backward compatible. This means\nthat if your app is built using version 1, and the gem updates to version 2, the\nnew version can potentially break your app.\u003c/p\u003e\n\n\u003cp\u003eA minor version change is reflected by the number after the first decimal point.\nAll minor version changes should be backward compatible. This means that while\nversion 1.2 has more functionality than version 1.0, all the features in 1.0 are\nsupported in 1.2.\u003c/p\u003e\n\n\u003cp\u003eSometimes, a third number will be listed after a decimal point (i.e. \u003ccode\u003e1.8.0\u003c/code\u003e).\nThis number reflects a patch, which is a change to a gem to fix a bug but not\nintroduce new functionality. \u003ccode\u003e1.8.3\u003c/code\u003e means major version 1, minor version 8, and\na patch version 3.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e'~\u0026gt; 1.8'\u003c/code\u003e listed after \u003ccode\u003eawesome_print\u003c/code\u003e  means this application should use\nversion 1.8 \u003cem\u003eor the latest minor version\u003c/em\u003e up to 1.x, \u003cstrong\u003ebut not 2.0\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Writing \u003ccode\u003e'~\u0026gt; 1.8.0'\u003c/code\u003e will result in different behavior - rather than\nusing the last minor version, our application will use the latest \u003cem\u003epatch\u003c/em\u003e, so\nour application would use version 1.8.0 up to 1.8.x, \u003cstrong\u003ebut not 1.9.0\u003c/strong\u003e!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eAside:\u003c/strong\u003e For some reason lost to history, Rubyists have decided to call this\n\u003ccode\u003e~\u0026gt;\u003c/code\u003e \"Twiddle-Wakka.\" \u003ccode\u003e'~\u0026gt; 2.6'\u003c/code\u003e means any minor version above 2.6. 2.7, 2.8,\nand 2.9 would work (including patches); but version 3.0 wouldn't work because it\nindicates a new major version.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eYou can read more about controlling gem versions and additional options in the\n\u003ca href=\"https://guides.rubygems.org/patterns/\"\u003edocumentation on RubyGems\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eGem Sources\u003c/h2\u003e\n\n\u003cp\u003eAt the top of a Gemfile, we include the default source where our gems are\nlocated (typically \u003ccode\u003esource \"https://rubygems.org\"\u003c/code\u003e). By default, Bundler will\ntry to find gems at the default \u003ccode\u003esource\u003c/code\u003e that you specified in the top of your\nGemfile. But sometimes you might be working with a gem whose developer(s)\nhaven't yet pushed the code to RubyGems.org. Maybe you're one of those\ndevelopers yourself! In that case, Bundler provides a few options.\u003c/p\u003e\n\n\u003cp\u003eYou can refer to the gem via its GitHub repository:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'rack', git: 'https://github.com/rack/rack'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eProvided that the GitHub repository is for the gem only, this simple invocation\nshould work. If the gem code is in a subdirectory of the repository, several\noptions are available to help you help Bundler find the gem. Consult the Bundler\n\u003ca href=\"https://bundler.io/guides/git.html\"\u003edocumentation\u003c/a\u003e for options.\u003c/p\u003e\n\n\u003cp\u003eOr, perhaps the gem is private and needs to be accessed via SSH. No problem.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'nokogiri', :git =\u0026gt; 'login@example.com:some-user-account/some-private-gem.git'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eConfiguring the Gemfile\u003c/h3\u003e\n\n\u003cp\u003eThe Gemfile lets you set up groups, so gems are only loaded under specific\ncircumstances. For example, you might have a gem like Pry in your \u003ccode\u003edevelopment\u003c/code\u003e\ngroup because you only need to use Pry to debug when you are in the development\nphase. Your code in \u003ccode\u003eproduction\u003c/code\u003e, i.e. when your app is being used by a user,\ndoesn't need to use the Pry gem.\u003c/p\u003e\n\n\u003cp\u003eHere's an example Gemfile with a group specified:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esource \"https://rubygems.org\"\u003cbr\u003e\u003cbr\u003egem \"sinatra\"\u003cbr\u003e\u003cbr\u003egroup :development do\u003cbr\u003e  gem \"pry\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eThe Group Syntax\u003c/h4\u003e\n\n\u003cp\u003eThe group syntax uses the keyword \u003ccode\u003egroup\u003c/code\u003e, followed by the app environment as a\nsymbol (\u003ccode\u003e:development\u003c/code\u003e, \u003ccode\u003e:test\u003c/code\u003e, and \u003ccode\u003e:production\u003c/code\u003e are the standard\nenvironments), followed by the keyword \u003ccode\u003edo\u003c/code\u003e. Inside the block, we list all the\ngems specific to that group.\u003c/p\u003e\n\n\u003cp\u003eIn the example above, we grouped \u003ccode\u003epry\u003c/code\u003e in the development environment. This\nmeans that pry isn't accessible in testing or in production. There are a lot of\ngems specific to the testing environment, like \u003ccode\u003erspec\u003c/code\u003e and \u003ccode\u003ecapybara\u003c/code\u003e. You don't\nneed to run tests in the development or production environments, so you don't\nneed those gems loaded there. Groups allow us to specify which environment needs\nour gems.\u003c/p\u003e\n\n\u003ch4\u003eThe Hash Syntax\u003c/h4\u003e\n\n\u003cp\u003eThere is another format with which to group gems in your Gemfile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem \"pry\", :group =\u0026gt; :development\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is called the hash syntax and can also be written as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem \"pry\", group: :development\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we wanted \u003ccode\u003epry\u003c/code\u003e to be available in both our development \u003cem\u003eand\u003c/em\u003e testing\nenvironments, we can include them both in an array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem \"pry\", :groups =\u0026gt; [:development, :test]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo quickly review, once you've got gems listed in the Gemfile, \u003ca href=\"http://bundler.io/\"\u003eBundler\u003c/a\u003e will handle the process of installing them when other users download\nthe application.\u003c/p\u003e\n\n\u003cp\u003eIncluding \u003ccode\u003egem\u003c/code\u003e followed by the name of the gem will make sure that gem is\ninstalled for the project. Listing a gem without a version will cause Bundler to\ndownload the newest version of that gem.\u003c/p\u003e\n\n\u003cp\u003eIncluding a specific version, like  \u003ccode\u003egem 'sinatra', '1.4.5'\u003c/code\u003e will lock the version\nso your app only uses that version.\u003c/p\u003e\n\n\u003cp\u003eIncluding \u003ccode\u003e~\u0026gt;\u003c/code\u003e before the version number will limit your app to using either the\nversion you list or a version with only minor updates (or patches, depending on your\nsyntax).\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://bundler.io/gemfile.html\"\u003eRead more about the Gemfile here\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWith this, you can make sure everyone working on your app is using the right\nversion. Now, let's try practicing what we've learned.\u003c/p\u003e\n\n\u003ch2\u003eCode-Along\u003c/h2\u003e\n\n\u003ch3\u003eUsing Bundler\u003c/h3\u003e\n\n\u003cp\u003eTo get started with Bundler, we'll first create a Gemfile. To create a Gemfile,\ntype \u003ccode\u003ebundle init\u003c/code\u003e in your terminal. You'll notice we created one for you in the\nrepo so running \u003ccode\u003ebundle init\u003c/code\u003e will give you an error.\u003c/p\u003e\n\n\u003ch3\u003eAnatomy of Bundler Files\u003c/h3\u003e\n\n\u003cp\u003eThere's only one file Bundler requires you have (Gemfile). The other files are\nconventional for a typical Ruby application, but not required by the use of\nBundler for gem management.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eGemfile\u003c/code\u003e - This file is required by Bundler and contains a source and a list of\nfile requirements. That's all.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003econfig/environment.rb\u003c/code\u003e - The environment file is where we'll be loading all of our\napp's dependencies, from gems to database connections.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebin/run.rb\u003c/code\u003e - This file will start our application. This file will require the\nenvironment file we created earlier to provide our app with access to our gems.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe'll be using these files in the test suite, so don't rename them.\u003c/p\u003e\n\n\u003ch3\u003eConfigure Gemfile\u003c/h3\u003e\n\n\u003cp\u003eAdd this code to your \u003ccode\u003eGemfile\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esource \"https://rubygems.org\"\u003cbr\u003egem \"rspec\"\u003cbr\u003egem \"sinatra\"\u003cbr\u003e\u003cbr\u003egroup :development do\u003cbr\u003e  gem \"pry\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eRun your test suite with \u003ccode\u003erspec\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e to see what gems you'll be adding to\nyour gem file. Add the appropriate gems, specifying their version when\nnecessary, to get the tests passing\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter getting all of your gems in your Gemfile, run \u003ccode\u003ebundle install\u003c/code\u003e from your\nterminal. This will install the listed gems for you. They won't show up in the\ndirectory, but they are in your system, and available.\u003c/p\u003e\n\n\u003cp\u003eRunning \u003ccode\u003ebundle install\u003c/code\u003e also creates a new file: \u003ccode\u003eGemfile.lock\u003c/code\u003e. This file\nnotes which specific gem versions were installed. If this file is committed and\nincluded in a project, Bundler will default to using the exact versions listed\nin this file when installing gems.\u003c/p\u003e\n\n\u003ch3\u003eWorking with \u003ccode\u003econfig/environment.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eWhen you start up an app, your app needs to know the order in which to load\nfiles. If your app uses gems, your code will depend on these external libraries.\nThis means we'd want the gems to be loaded in our app \u003cem\u003ebefore\u003c/em\u003e our own code. If\nwe loaded our code first, we'd get uninitialized constant errors or undefined\nvariable or method errors. Load order matters. We can specify load information\nin \u003ccode\u003econfig/environment.rb\u003c/code\u003e to configure our load path (or load order) so that\nnothing breaks.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003econfig/environment.rb\u003c/code\u003e, we can specify which Bundler groups we want to load.\nThe following code is used to load the \u003ccode\u003edefault\u003c/code\u003e group (anything not explicitly\nin a group) and the \u003ccode\u003edevelopment\u003c/code\u003e group.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePlace the following code in \u003ccode\u003econfig/environment.rb\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'bundler/setup'\u003cbr\u003eBundler.require(:default, :development)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example above, we're first requiring \u003ccode\u003e'bundler/setup'\u003c/code\u003e. If we don't do\nthis, our app won't know to use bundler to install our gems. Without that line,\nour \u003ccode\u003eGemfile\u003c/code\u003e becomes pointless.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e The two arguments that you are passing into the \u003ccode\u003e.require\u003c/code\u003e method\n\u003cem\u003emust be passed in the correct order, shown above\u003c/em\u003e. The test you are trying to\npass is testing for order.\u003c/p\u003e\n\n\u003ch3\u003eWorking with \u003ccode\u003ebin/run.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThis is where the action is. This is where our app logic goes, and where we make\nour millions.\u003c/p\u003e\n\n\u003cp\u003eTo take advantage of all of the work we did in the environment file, let's\nrequire it here.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePlace the following code in \u003ccode\u003ebin/run.rb\u003c/code\u003e:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative '../config/environment'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's it! Now we can access all of our gems from our \u003ccode\u003erun.rb\u003c/code\u003e file.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith a Gemfile, you can augment your own applications and bring in many gems.\nSome gems, like Rails and Sinatra, are complex enough that they are used to\nbuild major websites. Some gems are extremely simple and serve a single purpose.\u003c/p\u003e\n\n\u003cp\u003eThe installation of gems from the Gemfile is handled by Bundler. We can actually\nmake sure these gems get loaded by using an environment file and Bundler, then\nrequiring the environment file in our run file. Whenever the run file is\nexecuted, Bundler requires the appropriate gems for us or prompts us to run\n\u003ccode\u003ebundle install\u003c/code\u003e if it hasn't been run.\u003c/p\u003e\n\n\u003cp\u003eFrom here, we can add whatever application logic we'd like - we have a way to\ninclude gems, a place to configure and load them and a file that starts\neverything!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://railscasts.com/\"\u003eRailsCasts\u003c/a\u003e - \u003ca href=\"http://railscasts.com/episodes/201-bundler-revised\"\u003e#201 Bundler (revised)\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://bundler.io/docs.html\"\u003eBundler Docs\u003c/a\u003e - \u003ca href=\"http://bundler.io/v1.16/guides/sinatra.html\"\u003eBundler with Sinatra\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3e4761913f2579099ccee6f70649fd80","title":"Get Params Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-get-params-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-get-params-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-get-params-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-get-params-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe've provided the code for a basic list of items. Now it's your turn to extend it.\nDo your work in \u003ccode\u003eapp/application.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eVocabulary Word: \"Route\"\u003c/h2\u003e\n\n\u003cp\u003eIn applications built on Rack, we use the noun \"route\" to to refer to a path\nthat the application has a special response to.\u003c/p\u003e\n\n\u003cp\u003eSo, for example, if we navigated to a \u003ccode\u003e/shoes\u003c/code\u003e route, we would expect the\napplication to show us information about shoes. A \u003ccode\u003e/profile\u003c/code\u003e route might show\ninformation about a user who's logged in to an application. Finally, a \u003ccode\u003e/logout\u003c/code\u003e\nroute might update some information to let the server know the user is no longer\nlogged in.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a new class array called \u003ccode\u003e@@cart\u003c/code\u003e to hold any items in your cart.\u003c/li\u003e\n\u003cli\u003eCreate a new route called \u003ccode\u003e/cart\u003c/code\u003e to show the items in your cart.\u003c/li\u003e\n\u003cli\u003eCreate a new route called \u003ccode\u003e/add\u003c/code\u003e that takes in a \u003ccode\u003eGET\u003c/code\u003e param with the key \u003ccode\u003eitem\u003c/code\u003e. This should check to see if that item is in \u003ccode\u003e@@items\u003c/code\u003e and add it to the cart if it is. Otherwise it should give an error.\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga858802e95f261f1bf5f5ee9ee4a5abf","title":"Getting Remote Data Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-getting-remote-data-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-getting-remote-data-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice sending GET requests using Ruby\u003c/li\u003e\n\u003cli\u003eBuild a reusable class for sending requests and handling responses\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIt is time to practice building out your own class for retrieving remote data.\nIn this lab, you are tasked with building a generic \u003ccode\u003eGetRequester\u003c/code\u003e class. This\nclass will be able to take in a URL on initialization and send an HTTP GET\nrequest on command. You will also need to build a method for dealing with\nrequests that return JSON.\u003c/p\u003e\n\n\u003cp\u003eWhen complete, you will have a simple, but versatile class for getting\ninformation from all kinds of sources over the internet.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eAll work should be completed in \u003ccode\u003elib/get_requester.rb\u003c/code\u003e. Use the previous\ncode-along on getting data from APIs as a reference when building out your\nclass.\u003c/p\u003e\n\n\u003cp\u003eStart by creating a \u003ccode\u003eGetRequester\u003c/code\u003e class. This class should be able to\ninitialize with a string URL.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eGetRequester\u003c/code\u003e class should have a \u003ccode\u003eget_response_body\u003c/code\u003e method that sends a\nGET request to the URL passed in on initialization. This method should return\nthe \u003cem\u003ebody\u003c/em\u003e of the response.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eGetRequester\u003c/code\u003e class should have a \u003ccode\u003eparse_json\u003c/code\u003e method should use\n\u003ccode\u003eget_response_body\u003c/code\u003e to send a request, then return a Ruby Array or Hash made up\nof data converted from the response of that request.\u003c/p\u003e\n\n\u003cp\u003eThe tests in this lab will use your code to send a request for some JSON data,\nlocated at\n\u003ca href=\"https://learn-co-curriculum.github.io/json-site-example/endpoints/people.json\"\u003ehttps://learn-co-curriculum.github.io/json-site-example/endpoints/people.json\u003c/a\u003e.\nRead the test error messages for additional as you work for additional\ninformation. Don't forget to require the necessary Ruby modules and classes!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eOnce you've successfully passed the tests, from this lesson's directory, you\nshould be able to open IRB, use \u003ccode\u003erequire_relative\u003c/code\u003e to load\n\u003ccode\u003elib/get_requester.rb\u003c/code\u003e, and send out some requests!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eget_requester = GetRequester.new('https://learn-co-curriculum.github.io/json-site-example/endpoints/people.json')\u003cbr\u003eget_requester.parse_json\u003cbr\u003e#=\u0026gt; [{\"name\"=\u0026gt;\"Daniel\", \"occupation\"=\u0026gt;\"LG Fridge Salesman\"}, {\"name\"=\u0026gt;\"Joe\", \"occupation\"=\u0026gt;\"WiFi Fixer\"}, {\"name\"=\u0026gt;\"Avi\", \"occupation\"=\u0026gt;\"DJ\"}, {\"name\"=\u0026gt;\"Howard\", \"occupation\"=\u0026gt;\"Mountain Legend\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis class won't work for all cases but is a good starting place to get us off\nthe ground. We can now augment our applications with data from the internet!\nCombined with our knowledge of Ruby, we have all the tools we need to start\nbuilding smarter Ruby applications populated with real data.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g2b846d4f7cb26aa8f79fa1c91eb9c740","title":"Has Many Through Relationships","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-has-many-through\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand Has Many Through relationships\u003c/li\u003e\n\u003cli\u003eConstruct indirect relationships between models (Customers, Waiters, and Meals)\u003c/li\u003e\n\u003cli\u003eExplore the concept of a 'joining' model\u003c/li\u003e\n\u003cli\u003eContinue to write code using a Single Source of Truth\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've seen how objects can be related to one another directly when one object\ncontains a reference to another. This is the \"has many\"/\"belongs to\"\nassociation, and is a direct relationship. For example, an artist may have many\nsongs or a book might have many reviews.\u003c/p\u003e\n\n\u003cp\u003eIn addition to these one-to-one and one-to-many relationships, some\nrelationships also need something to join them together. For example, you don't\nneed to have a direct relationship with the pilot of a flight you're on. You\nhave a relationship with that flight (you're taking the flight after all), and\nthe pilot has a relationship with the flight (they're flying it). So you have a\nrelationship to that pilot \u003cem\u003ethrough\u003c/em\u003e the flight.\u003c/p\u003e\n\n\u003cp\u003eIf you take more than one flight, you'll have these kinds of relationships with\nmore than one pilot, all still using your ticket as the middle man. The way we\nrefer to this is that each customer \u003cem\u003ehas many\u003c/em\u003e pilots \u003cem\u003ethrough\u003c/em\u003e tickets.\u003c/p\u003e\n\n\u003cp\u003eCheck out some more examples:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA company that offers a network of doctors to their employees \u003cem\u003ethrough\u003c/em\u003e the\ncompany's insurance program\u003c/li\u003e\n\u003cli\u003eA user on a popular media sharing site can have many \"likes\", that occur\n\u003cem\u003ethrough\u003c/em\u003e the pictures they post\u003c/li\u003e\n\u003cli\u003eA Lyft driver that you are connected to \u003cem\u003ethrough\u003c/em\u003e the rides you've taken with\nthem\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this lesson, we'll build out just such a relationship using waiters,\ncustomers, and meals. A customer has many meals, and a customer has many waiters\n\u003cem\u003ethrough\u003c/em\u003e those meals. Similarly, a waiter has many meals and has many customers\n\u003cem\u003ethrough\u003c/em\u003e meals.\u003c/p\u003e\n\n\u003ch2\u003eBuilding Out Our Classes\u003c/h2\u003e\n\n\u003cp\u003eLet's start by building out the \u003ccode\u003eCustomer\u003c/code\u003e class and \u003ccode\u003eWaiter\u003c/code\u003e class.  We want to\nmake sure when building out classes, that there's something to store each\ninstance.  That is to say: the \u003ccode\u003eCustomer\u003c/code\u003e class should know about every\n\u003ccode\u003ecustomer\u003c/code\u003e instance that gets created.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/customer.rb\u003cbr\u003eclass Customer\u003cbr\u003e  attr_accessor :name, :age\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, age)\u003cbr\u003e    @name = name\u003cbr\u003e    @age = age\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, each \u003ccode\u003ecustomer\u003c/code\u003e instance has a name and an age. Their name and\nage are set upon initialization, and because we created an attribute accessor\nfor both, the customer can change their name or age. If we wanted to limit this\nability to read-only, we would create an attribute reader instead. The\n\u003ccode\u003eCustomer\u003c/code\u003e class also has a class variable that tracks every instance of\n\u003ccode\u003ecustomer\u003c/code\u003e upon creation.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/waiter.rb\u003cbr\u003eclass Waiter\u003cbr\u003e\u003cbr\u003e  attr_accessor :name, :yrs_experience\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, yrs_experience)\u003cbr\u003e    @name = name\u003cbr\u003e    @yrs_experience = yrs_experience\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach instance of the \u003ccode\u003eWaiter\u003c/code\u003e class has a name and an attribute describing their\nyears of experience. Just like the \u003ccode\u003eCustomer\u003c/code\u003e class, the \u003ccode\u003eWaiter\u003c/code\u003e class has a\nclass variable that stores every \u003ccode\u003ewaiter\u003c/code\u003e instance upon initialization.\u003c/p\u003e\n\n\u003ch2\u003eThe \"Has Many Through\" Relationship\u003c/h2\u003e\n\n\u003cp\u003eIn real life, as a customer, each time you go out to eat, you have a different\nmeal. Even if you order the same exact thing in the exact same restaurant, it's\na different instance of that meal. So it goes without saying that a customer can\nhave many meals.\u003c/p\u003e\n\n\u003cp\u003eIt's a safe bet to assume that unless you only eat at one very small restaurant,\nyou'll have many different waiters as well. Not all at once of course, because\nyou only have one waiter per meal. So it could be said that your relationship\nwith the waiter is through your meal. The same could be said of the waiter's\nrelationship with each customer.\u003c/p\u003e\n\n\u003cp\u003eThat's the essence of the has many through relationship.\u003c/p\u003e\n\n\u003ch2\u003eHow Does That Work in Code?\u003c/h2\u003e\n\n\u003cp\u003eGreat question! The way we're going to structure this relationship is by setting\nup our \u003ccode\u003eMeal\u003c/code\u003e class as a 'joining' model between our \u003ccode\u003eWaiter\u003c/code\u003e and our \u003ccode\u003eCustomer\u003c/code\u003e\nclasses. And because we're obeying the \u003ccode\u003esingle source of truth\u003c/code\u003e, we're going to\ntell the \u003ccode\u003eMeal\u003c/code\u003e class to know all the details of each \u003ccode\u003emeal\u003c/code\u003e instance. That\nincludes not only the total cost and the tip (which defaults to 0) but also who\nthe \u003ccode\u003ecustomer\u003c/code\u003e and \u003ccode\u003ewaiter\u003c/code\u003e were for each meal.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/meal.rb\u003cbr\u003eclass Meal\u003cbr\u003e\u003cbr\u003e  attr_accessor :waiter, :customer, :total, :tip\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(waiter, customer, total, tip=0)\u003cbr\u003e    @waiter = waiter\u003cbr\u003e    @customer = customer\u003cbr\u003e    @total = total\u003cbr\u003e    @tip = tip\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat looks great! And even better, it's going to give both the \u003ccode\u003ecustomer\u003c/code\u003e and\n\u003ccode\u003ewaiter\u003c/code\u003e instances the ability to get all the information about the meal that\nthey need without having to store it themselves. Let's build some methods.\u003c/p\u003e\n\n\u003ch2\u003eBuilding on the Relationship\u003c/h2\u003e\n\n\u003cp\u003eIf you take a look at our \u003ccode\u003ecustomer\u003c/code\u003e right now, they aren't capable of doing\nmuch. Let's change that and give them the ability to create a \u003ccode\u003emeal\u003c/code\u003e. To do\nthis, they'll need to take in an instance of a \u003ccode\u003ewaiter\u003c/code\u003e and supply the \u003ccode\u003etotal\u003c/code\u003e\nand \u003ccode\u003etip\u003c/code\u003e, which we'll have defaulted to 0 here as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/customer.rb\u003cbr\u003e\u003cbr\u003e  def new_meal(waiter, total, tip=0)\u003cbr\u003e    Meal.new(waiter, self, total, tip)\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, we don't need to take \u003ccode\u003ecustomer\u003c/code\u003e in as an argument, because\nwe're passing in \u003ccode\u003eself\u003c/code\u003e as a reference to the current instance of customer. This\nmethod will allow us to create new meals as a \u003ccode\u003ecustomer\u003c/code\u003e, and automatically\nassociate each new \u003ccode\u003emeal\u003c/code\u003e with the \u003ccode\u003ecustomer\u003c/code\u003e that created it. We can do the\nsame thing for the \u003ccode\u003eWaiter\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/waiter.rb\u003cbr\u003e\u003cbr\u003e  def new_meal(customer, total, tip=0)\u003cbr\u003e    Meal.new(self, customer, total, tip)\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the \u003cem\u003eparameters\u003c/em\u003e are different for the \u003ccode\u003enew_meal\u003c/code\u003e method are\ndifferent for \u003ccode\u003ecustomer\u003c/code\u003e and \u003ccode\u003ewaiter\u003c/code\u003e, but the order of \u003cem\u003earguments\u003c/em\u003e for\n\u003ccode\u003eMeal.new()\u003c/code\u003e remains the same - a waiter, a customer, a total and a tip. Great!\nNow we can create \u003ccode\u003ewaiters\u003c/code\u003e, \u003ccode\u003ecustomers\u003c/code\u003e and \u003ccode\u003emeals\u003c/code\u003e to our heart's content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  sam = Customer.new(\"Sam\", 27)\u003cbr\u003e  pat = Waiter.new(\"Pat\", 2)\u003cbr\u003e  alex = Waiter.new(\"Alex\", 5)\u003cbr\u003e\u003cbr\u003e  sam.new_meal(pat, 50, 10) # A Customer creates a Meal, passing in a Waiter instance\u003cbr\u003e  sam.new_meal(alex, 20, 3) # A Customer creates a Meal, passing in a Waiter instance\u003cbr\u003e  pat.new_meal(sam, 30, 5) # A Waiter creates a Meal, passing in a Customer instance\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eReminder\u003c/strong\u003e: If you would like to practice creating these instances, you can\nload these classes up using IRB. Run \u003ccode\u003eirb\u003c/code\u003e from this lesson's main directory,\nthen load up each class into the IRB environment by using \u003ccode\u003erequire_relative\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative './lib/customer.rb'\u003cbr\u003erequire_relative './lib/meal.rb'\u003cbr\u003erequire_relative './lib/waiter.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCompleting the Has Many Through Relationship\u003c/h2\u003e\n\n\u003cp\u003eThis is awesome, but it isn't done yet! To complete our goal of establishing a\nhas many through relationship, we need a way for our \u003ccode\u003ecustomer\u003c/code\u003e and \u003ccode\u003ewaiter\u003c/code\u003e\ninstances to get information about each other. The only way they can get that\ninformation is through the meals they've created.\u003c/p\u003e\n\n\u003cp\u003eRelating this to real life, we can imagine a situation where a waiter might want\nto know who their regular customers are and what meals those customers usually\norder. Or, a customer might want to know the name of the waiter of their last\nmeal so they can leave a good review. To get our waiters and customers this\ninformation, we're going to consult the \u003ccode\u003eMeal\u003c/code\u003e class \u003cem\u003efrom\u003c/em\u003e the \u003ccode\u003eCustomer\u003c/code\u003e and\n\u003ccode\u003eWaiter\u003c/code\u003e classes. Let's start with the \u003ccode\u003eCustomer\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eIn plain English, the customer is going to look at all of the meals, and then\nselect only the ones that belong to them. Translated into code, that could be\nwritten like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/customer.rb\u003cbr\u003e\u003cbr\u003edef meals\u003cbr\u003e  Meal.all.select do |meal|\u003cbr\u003e    meal.customer == self\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBoom. We're iterating through every instance of \u003ccode\u003eMeal\u003c/code\u003e and returning only the\nones where the meal's \u003ccode\u003ecustomer\u003c/code\u003e matches the current \u003ccode\u003ecustomer\u003c/code\u003e instance. If a\ncustomer, Rachel, wants to know about all of her meals, all we need to do is call\nthe \u003ccode\u003e#meals\u003c/code\u003e method on her Customer instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ealex = Customer.new(\"Alex\", 30)\u003cbr\u003erachel = Customer.new(\"Rachel\", 27)\u003cbr\u003edan = Waiter.new(\"Dan\", 3)\u003cbr\u003e\u003cbr\u003erachel.new_meal(dan, 50, 10)\u003cbr\u003ealex.new_meal(dan, 30, 5)\u003cbr\u003e\u003cbr\u003erachel.meals #=\u0026gt; [#, @customer=#, @total=50, @tip=10\u0026gt;]\u003cbr\u003erachel.meals.length #=\u0026gt; 1\u003cbr\u003e\u003cbr\u003eMeal.all.length #=\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, two meals were created, one for \u003ccode\u003erachel\u003c/code\u003e and one for \u003ccode\u003ealex\u003c/code\u003e, both with the\nsame waiter. However, running \u003ccode\u003erachel.meals\u003c/code\u003e only returns the meal \u003ccode\u003erachel\u003c/code\u003e is\nassociated with.\u003c/p\u003e\n\n\u003cp\u003eSo \u003ccode\u003erachel.meals\u003c/code\u003e will return an array of all of Rachel's meals, but what if we now\nwant a list of all of the waiters that Rachel has interacted with?  Each meal is\nalso associated with a waiter, so to get every waiter from every meal Rachel has\nhad, we need to take the array of all of Rachel's meals, map over it, getting the\nwaiter from each of those meals.\u003c/p\u003e\n\n\u003cp\u003eSince we already have a \u003ccode\u003e#meals\u003c/code\u003e method to get an array of meals, we can reuse it\nhere and write a \u003ccode\u003e#waiters\u003c/code\u003e method like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/customer.rb\u003cbr\u003e\u003cbr\u003edef waiters\u003cbr\u003e  meals.map do |meal|\u003cbr\u003e    meal.waiter\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eterrance = Customer.new(\"Terrance\", 27)\u003cbr\u003ejason = Waiter.new(\"Jason\", 4)\u003cbr\u003eandrew = Waiter.new(\"Andrew\", 7)\u003cbr\u003eyomi = Waiter.new(\"Yomi\", 10)\u003cbr\u003e\u003cbr\u003eterrance.new_meal(jason, 50, 6)\u003cbr\u003eterrance.new_meal(andrew, 60, 8)\u003cbr\u003eterrance.new_meal(yomi, 30, 4)\u003cbr\u003e\u003cbr\u003eterrance.waiters #=\u0026gt; [#, #, #] \u003cbr\u003eterrance.waiters.length #=\u0026gt; 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd to finish out first real-life example, if Terrance wanted to find the name of\nhis last waiter, we can use the \u003ccode\u003e#waiters\u003c/code\u003e method, then just get the \u003ccode\u003ename\u003c/code\u003e of the\nlast \u003ccode\u003ewaiter\u003c/code\u003e in the Array.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eterrance.waiters.last.name #=\u0026gt; \"Yomi\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo reinforce this concept, let's look at the same sort of relationship, but in\nthe other direction. This time, we will build out methods so a waiter\ncan find the customer that tips the the best.\u003c/p\u003e\n\n\u003cp\u003eAgain to start, just like the customer, the waiter needs a way to get all the meals they have served. We'll create a \u003ccode\u003e#meals\u003c/code\u003e method again, with a subtle change:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/waiter.rb\u003cbr\u003e\u003cbr\u003edef meals\u003cbr\u003e  Meal.all.select do |meal|\u003cbr\u003e    meal.waiter == self #checking for waiter now\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo find the best tipper, we can write another method, \u003ccode\u003e#best_tipper\u003c/code\u003e, use the\narray we get from \u003ccode\u003e#meals\u003c/code\u003e, then return the customer of the meal with the\nhighest tip:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./lib/waiter.rb\u003cbr\u003e\u003cbr\u003edef best_tipper\u003cbr\u003e  best_tipped_meal = meals.max do |meal_a, meal_b|\u003cbr\u003e    meal_a.tip \u0026lt;=\u0026gt; meal_b.tip\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  best_tipped_meal.customer\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003ejason = Waiter.new(\"Jason\", 4)\u003cbr\u003elisa = Customer.new(\"Lisa\", 24)\u003cbr\u003etim = Customer.new(\"Tim\", 35)\u003cbr\u003eterrance = Customer.new(\"Terrance\", 27)\u003cbr\u003e\u003cbr\u003eterrance.new_meal(jason, 50, 3)\u003cbr\u003elisa.new_meal(jason, 40, 10)\u003cbr\u003etim.new_meal(jason, 45, 8)\u003cbr\u003e\u003cbr\u003ejason.best_tipper #=\u0026gt; #\u003cbr\u003ejason.best_tipper.name #=\u0026gt; \"Lisa\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd there you have it - customers have access to waiters, and waiters have\naccess to customers. Notice as well that neither the \u003ccode\u003eCustomer\u003c/code\u003e class, nor the\n\u003ccode\u003eWaiter\u003c/code\u003e class needed additional attributes - they don't need to keep track of\nthis information; they only need to have the methods that ask the write\nquestions - in this case to the \u003ccode\u003eMeal\u003c/code\u003e class, the \u003cem\u003ejoin\u003c/em\u003e between customer and\nwaiter.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWhy associate customers to waiter objects \u003cem\u003ethrough\u003c/em\u003e meals? By associating meals\nto waiters, we are not only reflecting the real-world situation that our program\nis meant to model, but we are also creating clean and re-usable code. Each class\nonly knows about what they specifically need to know about, and we create a\nsingle source of truth by keeping our information central in our relationship\nmodel.\u003c/p\u003e\n\n\u003ch2\u003eFurther Practice\u003c/h2\u003e\n\n\u003cp\u003eBelow you'll find all the code for the \u003ccode\u003eCustomer\u003c/code\u003e class, including a few new\nmethods. Think about expanding on the \u003ccode\u003eCustomer\u003c/code\u003e and \u003ccode\u003eWaiter\u003c/code\u003e classes and about\nwhat other methods might be possible using the has many through relationship.\nFor starters, try some of the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA waiter's most frequent customer\u003c/li\u003e\n\u003cli\u003eThe meal of a waiter's worst tipping customer\u003c/li\u003e\n\u003cli\u003eThe average tips for the most experienced waiter and the average tips for the\nleast experienced waiter\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Customer\u003cbr\u003e  attr_accessor :name, :age\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name, age)\u003cbr\u003e    @name = name\u003cbr\u003e    @age = age\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def meals\u003cbr\u003e    Meal.all.select do |meal|\u003cbr\u003e      meal.customer == self\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def waiters\u003cbr\u003e    meals.map do |meal|\u003cbr\u003e      meal.waiter\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def new_meal(waiter, total, tip=0)\u003cbr\u003e    Meal.new(waiter, self, total, tip)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def new_meal_20_percent(waiter, total)\u003cbr\u003e    tip = total * 0.2\u003cbr\u003e    Meal.new(waiter, self, total, tip)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.oldest_customer\u003cbr\u003e    oldest_age = 0\u003cbr\u003e    oldest_customer = nil\u003cbr\u003e    self.all.each do |customer|\u003cbr\u003e      if customer.age \u0026gt; oldest_age\u003cbr\u003e        oldest_age = customer.age\u003cbr\u003e        oldest_customer = customer\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e    oldest_customer\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0ba407ff4efc069f2f001a95ed8795ed","title":"Higher Level Hash Methods","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"other-hash-methods-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/other-hash-methods-code-along/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/other-hash-methods-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/other-hash-methods-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the \u003ccode\u003e#values\u003c/code\u003e method to return the values in a hash\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#keys\u003c/code\u003e method to return the keys in a hash\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003e#min\u003c/code\u003e method to return the minimum value of hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's learn some interesting methods we can call on hashes. Previously, you were asked to iterate over a hash and collect the key that pointed to the lowest value. We asked you not to use some of the higher level hash methods there. Now, we're going to learn a few tricks that can make a task like that much easier.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#values\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eYou can collect all of the values in a hash with the \u003ccode\u003e#values\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries = {fruit: \"Banana\", vegetable: \"Broccoli\", dessert: \"Cookie\"}\u003cbr\u003e\u003cbr\u003egroceries.values\u003cbr\u003e#  =\u0026gt; [\"Banana\", \"Broccoli\", \"Cookie\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that the \u003ccode\u003e#values\u003c/code\u003e method returns an array of the values of the keys in the hash.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e#keys\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method, not surprisingly, returns an array containing all of the keys in the hash that \u003ccode\u003e#keys\u003c/code\u003e has been called on:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries = {fruit: \"Banana\", vegetable: \"Broccoli\", dessert: \"Cookie\"}\u003cbr\u003e\u003cbr\u003egroceries.keys\u003cbr\u003e#  =\u0026gt; [:fruit, :vegetable, :dessert]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003e#min\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eYou can use the \u003ccode\u003e#min\u003c/code\u003e method on a hash to return the key/value \u003cem\u003epair\u003c/em\u003e whose key is the \u003cstrong\u003elowest\u003c/strong\u003e value. What return type can return two different things? Arrays!:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters = {a: 1, b: 2}\u003cbr\u003e\u003cbr\u003eletters.min\u003cbr\u003e#  =\u0026gt; [:a, 1]\u003cbr\u003e\u003cbr\u003ealphabetical_order = {c: 100, d: 1}\u003cbr\u003ealphabetical_order.min\u003cbr\u003e#  =\u0026gt; [c:, 100] # Because the key :c is lower than :d in alphabetical order.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese are only a few of the many helpful methods out there. Be sure to check out the \u003ca href=\"http://ruby-doc.org/core/Hash.html\"\u003eRuby Docs on Hashes\u003c/a\u003e to learn more.\u003c/p\u003e\n\n\u003cp\u003eLet's practice before you move on to the next challenge:\u003c/p\u003e\n\n\u003ch2\u003eCode Along: Manipulating Nested Hashes\u003c/h2\u003e\n\n\u003cp\u003eYou'll be coding your solution to this challenge in \u003ccode\u003elib/values.rb\u003c/code\u003e, \u003ccode\u003elib/keys.rb\u003c/code\u003e, and \u003ccode\u003elib/min.rb\u003c/code\u003e. We have a nested hash of grocery items.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries = {\u003cbr\u003e  dairy: [\"milk\", \"yogurt\", \"cheese\"],\u003cbr\u003e  vegetable: [\"carrots\", \"broccoli\", \"cucumbers\"],\u003cbr\u003e  meat: [\"chicken\", \"steak\", \"salmon\"],\u003cbr\u003e  grains: [\"rice\", \"pasta\"]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eChallenge 1: Return the keys\u003c/h2\u003e\n\n\u003cp\u003eUse the \u003ccode\u003e#keys\u003c/code\u003e method to collect all of the keys of the hash. This one is simple enough.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries.keys\u003cbr\u003e#=\u0026gt; [:dairy, :vegetable, :meat, :grains]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter you have written the correct code in \u003ccode\u003elib/keys\u003c/code\u003e, check the return value of your method by running \u003ccode\u003eruby bin/keys\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003ch2\u003eChallenge 2: Return the values\u003c/h2\u003e\n\n\u003cp\u003eUse the \u003ccode\u003e#values\u003c/code\u003e method to collect all of the values of the grocery type keys (\u003ccode\u003e:dairy\u003c/code\u003e, \u003ccode\u003e:vegetables\u003c/code\u003e, \u003ccode\u003e:meat\u003c/code\u003e, \u003ccode\u003e:grains\u003c/code\u003e). The method should return a \u003cem\u003eone-dimensional\u003c/em\u003e (or \"flat\") array that \u003cem\u003eonly\u003c/em\u003e includes the values (groceries such as \"milk\" and \"carrots\") without their keys.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e What happens when you call \u003ccode\u003e#values\u003c/code\u003e on a nested hash? What is the return value? How can you \u003cem\u003eflatten\u003c/em\u003e an array of arrays? Make sure to use \u003ccode\u003ebinding.pry\u003c/code\u003e to help you solve this one.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries.values\u003cbr\u003e#=\u0026gt; [[\"milk\", \"yogurt\", \"cheese\"], [\"carrots\", \"broccoli\", \"cucumbers\"], [\"chicken\", \"steak\", \"salmon\"], [\"rice\", \"pasta\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, to get all the values in a flat array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries.values.flatten\u003cbr\u003e#=\u0026gt; [\"milk\", \"yogurt\", \"cheese\", \"carrots\", \"broccoli\", \"cucumbers\", \"chicken\", \"steak\", \"salmon\", \"rice\", \"pasta\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter you have written the correct code in \u003ccode\u003elib/values\u003c/code\u003e, check the return value of your method by running \u003ccode\u003eruby bin/values\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003ch2\u003eChallenge 3: Return the min\u003c/h2\u003e\n\n\u003cp\u003eUse the \u003ccode\u003e#min\u003c/code\u003e method to collect the value that comes first alphabetically (\"broccoli\").\u003c/p\u003e\n\n\u003ch3\u003eStep 1. Grab all the grocery values\u003c/h3\u003e\n\n\u003cp\u003eLucky for us, we already did this in Challenge 2. If we call, \u003ccode\u003egroceries.values.flatten\u003c/code\u003e we should get back: \u003ccode\u003e[\"milk\", \"yogurt\", \"cheese\", \"carrots\", \"broccoli\", \"cucumbers\", \"chicken\", \"steak\", \"salmon\", \"rice\", \"pasta\"]\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eStep 2. Get the minimum value\u003c/h3\u003e\n\n\u003cp\u003eSimply calling \u003ccode\u003e#min\u003c/code\u003e on what we did in Step 1 should do the trick:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egroceries.values.flatten.min\u003cbr\u003e#=\u0026gt; \"broccoli\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter you have written the correct code in \u003ccode\u003elib/min\u003c/code\u003e, check the return value of your method by running \u003ccode\u003eruby bin/min\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003cp\u003eNote: \u003ccode\u003e#min\u003c/code\u003e will also work for the entire hash. Play around in pry to see what is returned when you call \u003ccode\u003egroceries.min\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby-doc.org/core/Hash.html\"\u003eRuby Docs on Hashes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga7cce6915a3311fb4542bf8ac7ab7b4f","title":"Instance Methods Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-instance-methods-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-methods-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a class.\u003c/li\u003e\n\u003cli\u003eBuild instance methods for the class.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we will practice defining classes and building instance methods\ninside them. Specifically, you are going to be adding 2 instance methods to a\n\u003ccode\u003eDog\u003c/code\u003e and \u003ccode\u003ePerson\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eOpen this lab clicking the \"Fork\" button, cloning, and running your tests with \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e1. Define \u003ccode\u003eDog\u003c/code\u003e in \u003ccode\u003elib/dog.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eOpen \u003ccode\u003elib/dog.rb\u003c/code\u003e and add a class definition for a \u003ccode\u003eDog\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003e2. Define \u003ccode\u003e#bark\u003c/code\u003e in \u003ccode\u003eDog\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an instance method \u003ccode\u003e#bark\u003c/code\u003e to your \u003ccode\u003eDog\u003c/code\u003e class in \u003ccode\u003elib/dog.rb\u003c/code\u003e that will puts \u003ccode\u003e\"Woof!\"\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003e3. Define \u003ccode\u003e#sit\u003c/code\u003e in \u003ccode\u003eDog\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an instance method \u003ccode\u003e#sit\u003c/code\u003e to your \u003ccode\u003eDog\u003c/code\u003e class in \u003ccode\u003elib/dog.rb\u003c/code\u003e that will puts\n\u003ccode\u003e\"The Dog is sitting\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e4. Define a \u003ccode\u003ePerson\u003c/code\u003e in \u003ccode\u003elib/person.rb\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eOpen \u003ccode\u003elib/person.rb\u003c/code\u003e and add a class definition for a \u003ccode\u003ePerson\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch3\u003e5. Define \u003ccode\u003e#talk\u003c/code\u003e in \u003ccode\u003ePerson\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an instance method \u003ccode\u003e#talk\u003c/code\u003e to your \u003ccode\u003ePerson\u003c/code\u003e class in \u003ccode\u003elib/person.rb\u003c/code\u003e that\nwill puts \u003ccode\u003e\"Hello World!\"\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003e6. Define \u003ccode\u003e#walk\u003c/code\u003e in \u003ccode\u003ePerson\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eAdd an instance method \u003ccode\u003e#walk\u003c/code\u003e to your \u003ccode\u003ePerson\u003c/code\u003e class in \u003ccode\u003elib/person.rb\u003c/code\u003e that\nwill puts \u003ccode\u003e\"The Person is walking\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen you're done, submit the lab with \u003ccode\u003elearn submit\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith all tests passing, you have successfully written multiple instance methods\nand \u003cem\u003etwo\u003c/em\u003e different classes!\u003c/p\u003e\n\n\u003ch3\u003eAdditional Note on Lab Testing\u003c/h3\u003e\n\n\u003cp\u003eIn this lab, we asked that you code your two classes in separate \u003ccode\u003edog.rb\u003c/code\u003e and\n\u003ccode\u003eperson.rb\u003c/code\u003e files. You could, in theory, code both classes in the same file, or\neven \u003cem\u003ecode them in opposite files\u003c/em\u003e and still pass all tests. Why do you think that is?\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003eWhen the tests are run in this lab, RSpec loads both the \u003ccode\u003edog.rb\u003c/code\u003e and\n\u003ccode\u003eperson.rb\u003c/code\u003e files (this happens in the first two lines of \u003ccode\u003espec/spec_helper.rb\u003c/code\u003e\n\u003ca href=\"https://apidock.com/ruby/Kernel/require_relative\"\u003eusing \u003ccode\u003erequire_relative\u003c/code\u003e\u003c/a\u003e). As long as you place your classes in one of the\nfiles that RSpec loads, the tests will have access to them.\u003c/p\u003e\n\n\u003cp\u003eWhile it isn't enforced, we do encourage you to separate classes into\nindividual, accurately named files. In a larger application, you might not\nalways need to load the \u003ccode\u003eDog\u003c/code\u003e class when loading the \u003ccode\u003ePerson\u003c/code\u003e class. As classes\nget larger, it also becomes easier to manage your code if you know each file\ncontains \u003cem\u003eone\u003c/em\u003e class. Keeping to these conventions makes it easier in the future\nto go back and read code you've previously written. \u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g63b6d160efa1c43447a3edde0b0cddfb","title":"Instance Variables Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-instance-variables-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-variables-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-variables-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-instance-variables-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine instance variables.\u003c/li\u003e\n\u003cli\u003eDistinguish instance variables from local variables.\u003c/li\u003e\n\u003cli\u003eDescribe how instance variables give objects attributes and properties.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWhen we build objects through our own classes we know we can add behavior to the objects through instance methods. But how do we give our objects data? For example, how would we teach a dog what its name is? Or what breed it is? How do we put data inside of an instance of an object so that each dog can have its own name and own breed? How do we give objects attributes or properties?\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eRun your tests with \u003ccode\u003elearn test\u003c/code\u003e to get an overview of what we are trying to do. Then follow along below for how to get your tests to pass.\u003c/p\u003e\n\n\u003ch2\u003eWhat is an instance variable?\u003c/h2\u003e\n\n\u003cp\u003eWe've been working with variables for a while now. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebro_greeting = \"Sup, bro?\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe code above sets a variable, \u003ccode\u003ebro_greeting\u003c/code\u003e, equal to the string \u003ccode\u003e\"Sup, bro?\"\u003c/code\u003e. Now we can use that variable to read and operate on that string.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebro_greeting #=\u0026gt; \"Sup, bro?\"\u003cbr\u003e\u003cbr\u003ebro_greeting.upcase #=\u0026gt; \"SUP, BRO?\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ebro_greeting\u003c/code\u003e variable is what's known as a \u003cstrong\u003elocal variable\u003c/strong\u003e, so named because it can only be accessed in a specific, local environment.\u003c/p\u003e\n\n\u003cp\u003eA local variable that is defined inside one method, for example, cannot be accessed by another method. In order to get around this limitation, we can use \u003cstrong\u003einstance variables\u003c/strong\u003e inside our Ruby classes.\u003c/p\u003e\n\n\u003cp\u003eAn \u003cstrong\u003einstance variable\u003c/strong\u003e is a variable that is accessible in any instance method in a particular instance of a class.\u003c/p\u003e\n\n\u003ch2\u003eWe need instance variables\u003c/h2\u003e\n\n\u003cp\u003eLet's say we have a class called \u003ccode\u003eDog\u003c/code\u003e that is responsible for producing individual dog objects. We want each dog to be able to have a name and show its name. So we need to write some methods:\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003edog.rb\u003c/code\u003e inside the \u003ccode\u003elib\u003c/code\u003e folder. This is where we'll create our Dog class. Type in the following code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e  def name=(dog_name)\u003cbr\u003e    this_dogs_name = dog_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    this_dogs_name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we've defined two instance methods, the \u003ccode\u003ename=\u003c/code\u003e, or \"name equals\" method, and the \u003ccode\u003ename\u003c/code\u003e method. The first method takes in an argument of a dog's name and sets that argument equal to a variable, \u003ccode\u003ethis_dogs_name\u003c/code\u003e. The second method is responsible for reporting, or reading the name. The methods act as mechanisms to expose data from inside of the object to the outside world.\u003c/p\u003e\n\n\u003cp\u003eOur two methods therefore are responsible for \"setting\" and \"getting\" an individual dog's name.\u003c/p\u003e\n\n\u003cp\u003eHere's the functionality we want to achieve:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elassie = Dog.new\u003cbr\u003elassie.name = \"Lassie\"\u003cbr\u003e\u003cbr\u003elassie.name #=\u0026gt; \"Lassie\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur new dog instance should be assigned a name and know its name.\u003c/p\u003e\n\n\u003cp\u003eIn your \u003ccode\u003edog.rb\u003c/code\u003e file add the above code. This should create a new dog instance, give it a name (Lassie) and try to access- or read- its name.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e again. You should see an error message, with the following snippet inside it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e `name': undefined local variable or method `this_dogs_name''\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUh-oh. Looks like the \u003ccode\u003e#name\u003c/code\u003e method doesn't know about the \u003ccode\u003ethis_dogs_name\u003c/code\u003e variable from the \u003ccode\u003e#name=\u003c/code\u003e method. That is because \u003ccode\u003ethis_dogs_name\u003c/code\u003e is a \u003cstrong\u003elocal variable\u003c/strong\u003e. A local variable has a \u003cstrong\u003elocal scope\u003c/strong\u003e. That means that it cannot be accessed outside of the method in which it is defined.\u003c/p\u003e\n\n\u003ch2\u003eImplementing instance variables\u003c/h2\u003e\n\n\u003cp\u003eWe define an instance variable by prefacing the variable name with an \u003ccode\u003e@\u003c/code\u003e symbol.\u003c/p\u003e\n\n\u003cp\u003eInstance variables are bound to an instance of a class. That means that the value held by an instance variable is specific to whatever instance of the class it happens to belong to. Instance variables hold information about an instance, usually an attribute of that instance, and can be called on throughout the class, without needing to be passed into other methods as arguments (as would be the case with local variables).\u003c/p\u003e\n\n\u003cp\u003eLet's refactor our \u003ccode\u003eDog\u003c/code\u003e class to use an instance variable instead of a local variable to set and get an individual dog's name.\u003c/p\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003edog.rb\u003c/code\u003e and change the \u003ccode\u003eDog\u003c/code\u003e class in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dog\u003cbr\u003e\u003cbr\u003e  def name=(dogs_name)\u003cbr\u003e    @this_dogs_name = dogs_name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def name\u003cbr\u003e    @this_dogs_name\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003elassie = Dog.new\u003cbr\u003elassie.name = \"Lassie\"\u003cbr\u003e\u003cbr\u003eputs lassie.name\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e again and your tests should now be passing.\u003c/p\u003e\n\n\u003cp\u003eWhy did it work? Inside the \u003ccode\u003e#name=\u003c/code\u003e method, we set the value of \u003ccode\u003e@this_dogs_name\u003c/code\u003e equal to whatever string is passed in as an argument. Then, we are able to call on that same instance variable in a totally separate method, the \u003ccode\u003e#name\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAs we dive deeper into object-oriented Ruby, we'll be using instance variables frequently to pass information around the instance methods of a class. Think of instance variables as the containers for instance-specific information. The ability of instance variables to store information and be accessible within different instance methods is one of the things that makes it possible for us to create similar but unique objects in object-oriented Ruby.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g80abae2a29e212f2abcaa6d19fdf487f","title":"Introduction to Rack","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eExplain the mechanics of Rack \u003c/li\u003e\n\u003cli\u003eCreate a basic web app \u003c/li\u003e\n\u003cli\u003eSet up an HTTP web server using a \u003ccode\u003econfig.ru\u003c/code\u003e file and the \u003ccode\u003erackup\u003c/code\u003e command\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Rack?\u003c/h2\u003e\n\n\u003cp\u003eHow does a web server work?\u003c/p\u003e\n\n\u003cp\u003eWe open a browser (or, these days, an \"app\") and it uses HTTP to connect to a\nremote server. Servers are just code. But somehow when you say\n\u003ccode\u003e/search?item=shoes\u0026amp;size=13M\u003c/code\u003e it knows how to find some more code that knows\nhow to search (in this case, for shoes of size 13M).\u003c/p\u003e\n\n\u003cp\u003eAll web servers have a core architecture in common. By looking at it, we can\nbuild a mental model for how all web servers work. In the same way, we can\nexplain how all cars work by:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt;  Explosions made by gasoline and fire make an inside wheel go round and that\n\u0026gt;  inside wheel makes the outside wheels go round\"\u003c/p\u003e\n\n\u003cp\u003eIn the same way, we can say that all web servers:\u003c/p\u003e\n\n\u003cp\u003e\u0026gt; They look at an HTTP request and look at the HTTP verb and path and then run\n\u0026gt; some conditional logic to find out which stuff to send back\u003c/p\u003e\n\n\u003cp\u003eIn Ruby, this idea of \"a common foundation for all web-server like things\" is\ncaptured in a gem called \u003ca href=\"https://rack.github.io/\"\u003eRack\u003c/a\u003e. Rails \"rides on top\nof\" Rack. Sinatra \"rides on top of\" Rack. In fact, the idea of a base, common\nweb-server library was such a good idea, other languages like Python and\nNode.JS implemented their own \"base\" web server.\u003c/p\u003e\n\n\u003cp\u003eBefore we get to the complexity of things built on top of Rack, let's get a\nsimple server working on Rack.\u003c/p\u003e\n\n\u003ch2\u003eSetting up Rack\u003c/h2\u003e\n\n\u003cp\u003eTo work with Rack, we need to create a thing that responds to a single method:\n\u003ccode\u003e#call\u003c/code\u003e. Often, this will be a new class. However, new instances of the\n\u003ca href=\"https://docs.ruby-lang.org/en/2.0.0/Proc.html\"\u003e\u003ccode\u003eProc\u003c/code\u003e\u003c/a\u003e class are run by calling \u003ccode\u003ecall\u003c/code\u003e on them, so one could simply use\na \u003ccode\u003eProc\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll this method needs to do is return an \u003ccode\u003eArray\u003c/code\u003e with three elements:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eHTTP Status code\u003c/a\u003e where \u003ccode\u003e200\u003c/code\u003e is used for \u003ccode\u003eOK\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eA \u003ccode\u003eHash\u003c/code\u003e with a \u003ccode\u003e\"Content-Type\"\u003c/code\u003e key that returns the value (for HTML-based\ndocuments) of \u003ccode\u003etext/html\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eSomething that responds to \u003ccode\u003eeach\u003c/code\u003e which contains the multiple lines of a\ndocument of the \u003ccode\u003e\"Content-Type\"\u003c/code\u003e's type (here, \u003ccode\u003eString\u003c/code\u003es that look like HTML:\n\u003ccode\u003e\"\u0026lt;p\u0026gt;Like this!\u0026lt;/p\u0026gt;\"\u003c/code\u003e. The most common \"each-able\" thing is an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHere's a sample that returns HTML:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[200, {\"Content-Type\" =\u0026gt; \"text/html\"}, [\"Hello \u0026lt;em\u0026gt;World\u0026lt;/em\u0026gt;!\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e[200, {\"Content-Type\" =\u0026gt; \"plain/text\"}, [\"Hello World!\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn real life, we tend to read HTML content from a file...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehtml_from_file = File.open(\"my_html.html\").readlines\u003cbr\u003e[200, {\"Content-Type\" =\u0026gt; \"plain/text\"}, html_from_file]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCreating a Rack-Based Web Server\u003c/h2\u003e\n\n\u003cp\u003eUsing this, let's create a basic web app. Follow along with the below instructions. \u003c/p\u003e\n\n\u003cp\u003eLet's create a file called \u003ccode\u003efirst.ru\u003c/code\u003e. Files that are used by Rack end with\n\u003ccode\u003e.ru\u003c/code\u003e instead of \u003ccode\u003e.rb\u003c/code\u003e because they're normally loaded with a command called\n\u003ccode\u003erackup\u003c/code\u003e. It's a way to say \"Hey this is a server definition\" to anyone\ncasually using \u003ccode\u003els\u003c/code\u003e in the directory.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'rack'\u003cbr\u003e\u003cbr\u003e# Instances of Proc automatically have a call method that runs the block that\u003cbr\u003e# they're initialized with.\u003cbr\u003emy_server = Proc.new do\u003cbr\u003e  [200, { 'Content-Type' =\u0026gt; 'text/html' }, ['\u0026lt;em\u0026gt;Hello\u0026lt;/em\u0026gt;']]\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003erun my_server\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun this code by executing, from the command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ rackup first.ru\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRack will print out something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[2019-10-28 12:04:12] INFO  WEBrick 1.4.2\u003cbr\u003e[2019-10-28 12:04:12] INFO  ruby 2.6.3 (2019-04-16) [x86_64-darwin17]\u003cbr\u003e[2019-10-28 12:04:12] INFO  WEBrick::HTTPServer#start: pid=5567 port=9292\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u0026gt;Note: If you're using the Learn IDE, you won't be able to get to your website\n\u0026gt;with \u003ccode\u003elocalhost\u003c/code\u003e. Instead, you'll see a line that looks something like this -\n\u0026gt;\u003ccode\u003eStarting server on 159.203.101.28:30001\u003c/code\u003e. To see the webpage, just go to\n\u0026gt;\u003ccode\u003e159.203.101.28:30001\u003c/code\u003e in your web browser. Anywhere these instructions tell\n\u0026gt;you to go to \u003ccode\u003elocalhost\u003c/code\u003e, replace that with this IP address instead!\u003c/p\u003e\n\n\u003cp\u003eLet's deconstruct this URL a little bit though. The URL is\n\u003ccode\u003ehttp://localhost:9292/\u003c/code\u003e. The protocol is \u003ccode\u003ehttp\u003c/code\u003e. That makes sense, but the\ndomain is \u003ccode\u003elocalhost:9292\u003c/code\u003e. What's going on there? \u003ccode\u003elocalhost\u003c/code\u003e is normally where\na server like \u003ccode\u003egoogle.com\u003c/code\u003e goes. In this case, since you are running the server\non your computer, \u003ccode\u003elocalhost\u003c/code\u003e is the server name of your own computer. Nobody\nelse can get that URL though. That's good for right now. This allows you to play\naround with writing websites without the security concerns of opening it up to\nthe entire web. The last part of that URL is the \u003ccode\u003e:9292\u003c/code\u003e section. This the \"port\nnumber\" of your server. Don't worry too much about this, but you may want to run\nmultiple servers on one computer and having different ports allows them to be\nrunning simultaneously without conflicting.\u003c/p\u003e\n\n\u003cp\u003eThe resource that you are requesting is \u003ccode\u003e/\u003c/code\u003e. This is effectively like saying the\nhome or default.  If you're doing local development, you should be able to go to\n\u003ccode\u003ehttp://localhost:9292/\u003c/code\u003e and see \u003cem\u003eHello\u003c/em\u003e printed out by your web server!\u003c/p\u003e\n\n\u003cp\u003eFeel free to change \u003ccode\u003efirst.ru\u003c/code\u003e to add changes to your web server. If you make\nchanges to \u003ccode\u003efirst.ru\u003c/code\u003e \u003cstrong\u003e\u003cem\u003eyou'll have to shut down the server (Control-C) and\nre-start it to see the changes\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eInterestingly, we can swap out the simple \u003ccode\u003eProc\u003c/code\u003e for a \u003cem\u003eclass\u003c/em\u003e. So long as it\nresponds to \u003ccode\u003e#call\u003c/code\u003e, Rack will let us make a substitution.\u003c/p\u003e\n\n\u003cp\u003eCreate a new file called \u003ccode\u003esecond.ru\u003c/code\u003e and fill it out like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'rack'\u003cbr\u003e\u003cbr\u003e# Something that responds to call, that's what Rack demands\u003cbr\u003eclass MyServer\u003cbr\u003e  def call(env)\u003cbr\u003e    return [ 200, {'Content-Type' =\u0026gt; 'text/html'}, pretty_response ]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def pretty_response\u003cbr\u003e    (Time.now.to_i % 2).zero? ?  [\"\u0026lt;em\u0026gt;Hello\u0026lt;/em\u0026gt;\"] : [\"\u0026lt;strong\u0026gt;Hello\u0026lt;/strong\u0026gt;\"]\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003erun MyServer.new\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eStart it up with: \u003ccode\u003erackup second.ru\u003c/code\u003e. Visit the web page and hit refresh\nseveral times. When the present time, as an \u003ccode\u003eInteger\u003c/code\u003e, is even, the output is\nemphatic; when odd, it's strong.\u003c/p\u003e\n\n\u003cp\u003eIt's not too far of a step from this \"conditional\" logic to realize that if a\nweb server knew what was after the \u003ccode\u003e/\u003c/code\u003e in the URL path, it could make\ndecisions, run logic, etc... and change what's displayed in response to what's in\nthe URL. That's basically what web servers do all day long. Rails, Sinatra, any\nweb programming framework is a way to organize the code that fills out that\nthird \u003ccode\u003eArray\u003c/code\u003e element in our Rack responses. Amazing!\u003c/p\u003e\n\n\u003cp\u003eWe could make things look a bit more like a web server by taking our server\ncode out of the \u003ccode\u003erackup\u003c/code\u003e file and put it into a class file. We could create:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# ./my_server.rb\u003cbr\u003e\u003cbr\u003eclass MyServer\u003cbr\u003e  def call(env)\u003cbr\u003e    return [ 200, {'Content-Type' =\u0026gt; 'text/html'}, pretty_response ]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def pretty_response\u003cbr\u003e    (Time.now.to_i % 2).zero? ?  [\"\u0026lt;em\u0026gt;Hello\u0026lt;/em\u0026gt;\"] : [\"\u0026lt;strong\u0026gt;Hello\u0026lt;/strong\u0026gt;\"]\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd create a new \u003ccode\u003erackup\u003c/code\u003e file: \u003ccode\u003ethird.ru\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative './my_server'\u003cbr\u003erun MyServer.new\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we're honoring the way most Rack applications are built: the server setup\ncode lives in the \u003ccode\u003erackup\u003c/code\u003e file and our application logic lives in a class\nthat's referenced by the \u003ccode\u003erun\u003c/code\u003e command in the \u003ccode\u003erackup\u003c/code\u003e file.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3aa1055fd722124aefe0af050315f18c","title":"Intro to Rake","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-intro-to-rake\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-intro-to-rake/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-intro-to-rake\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-intro-to-rake/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Introduce Rake and Rake tasks.\u003c/li\u003e\n\u003cli\u003e Understand what Rake is used for in our Ruby programs.\u003c/li\u003e\n\u003cli\u003e Learn how to build a basic Rake task.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhat is Rake?\u003c/h2\u003e\n\n\u003cp\u003eRake is a tool that is available to us in Ruby that allows us to automate\ncertain jobs––anything from execute SQL to \u003ccode\u003eputs\u003c/code\u003e-ing out a friendly message to\nthe terminal.\u003c/p\u003e\n\n\u003cp\u003eRake allows us to define something called \"Rake tasks\" that execute these jobs.\nOnce we define a task, that task can be executed from the command line.\u003c/p\u003e\n\n\u003ch2\u003eWhy Rake?\u003c/h2\u003e\n\n\u003cp\u003eEvery program has some jobs that must be executed now and then. For example, the\ntask of creating a database table, the task of making or maintaining certain\nfiles. Before Rake was invented, we would have to write scripts that accomplish\nthese tasks in BASH, or we would have to make potentially confusing and\narbitrary decisions about what segment of our Ruby program would be responsible\nfor executing these tasks.\u003c/p\u003e\n\n\u003cp\u003eWriting scripts in BASH is tough, and BASH just isn't as powerful as Ruby. On\nthe other hand, for each developer to make his or her own decisions about where\nto define and execute certain common tasks related to databases or file\nmaintenance is confusing.\u003c/p\u003e\n\n\u003cp\u003eRake provides us a standard, conventional way to define and execute such tasks\nusing Ruby.\u003c/p\u003e\n\n\u003ch2\u003eWhere did Rake Come From?\u003c/h2\u003e\n\n\u003cp\u003eIn fact, the C community was the first to implement the pattern of writing all\ntheir recurring system maintenance tasks in a separate file. They called this\nfile the MakeFile because it was generally used to gather all of the source\nfiles and make it into one compiled executable file.\u003c/p\u003e\n\n\u003cp\u003eRake was later developed by \u003ca href=\"https://en.wikipedia.org/wiki/Jim_Weirich\"\u003eJim Weirich\u003c/a\u003e as the task management tool for Ruby.\u003c/p\u003e\n\n\u003ch2\u003eHow to Define and Use Rake Tasks\u003c/h2\u003e\n\n\u003cp\u003eBuilding a Rake task is easy, since Rake is already available to us as a part of\nRuby. All we need to do is create a file in the top level of our directory\ncalled \u003ccode\u003eRakefile\u003c/code\u003e. Here we define our task:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etask :hello do\u003cbr\u003e  # the code we want to be executed by this task\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe define tasks with \u003ccode\u003etask\u003c/code\u003e + \u003ccode\u003ename of task as a symbol\u003c/code\u003e + a block that contains\nthe code we want to execute.\u003c/p\u003e\n\n\u003cp\u003eIf you open up the \u003ccode\u003eRakefile\u003c/code\u003e in this directory, you'll see our \u003ccode\u003e:hello\u003c/code\u003e task:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etask :hello do\u003cbr\u003e  puts \"hello from Rake!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, in your terminal in the directory of this project, type:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003erake hello\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eYou should see the following outputted to your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehello from Rake!\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eDescribing our Tasks for \u003ccode\u003erake -T\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eRake comes with a handy command, \u003ccode\u003erake -T\u003c/code\u003e, that we can run in the terminal to\nview a list of available Rake tasks and their descriptions. In order for \u003ccode\u003erake -T\u003c/code\u003e to work though, we need to give our Rake tasks descriptions. Let's give our\n\u003ccode\u003ehello\u003c/code\u003e task a description now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edesc 'outputs hello to the terminal'\u003cbr\u003etask :hello do\u003cbr\u003e  puts \"hello from Rake!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if we run \u003ccode\u003erake -T\u003c/code\u003e in the terminal, we should see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake hello       # outputs hello to the terminal\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo handy!\u003c/p\u003e\n\n\u003ch3\u003eNamespacing Rake Tasks\u003c/h3\u003e\n\n\u003cp\u003eIt is possible to namespace your Rake tasks. What does \"namespace\" mean? A\nnamespace is really just a way to group or contain something, in this case our\nRake tasks. So, we might namespace a series of greeting Rake tasks, like\n\u003ccode\u003ehello\u003c/code\u003e above, under the \u003ccode\u003egreeting\u003c/code\u003e heading.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at namespacing now. Let's say we create another greeting-type\nRake task, \u003ccode\u003ehola\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edesc 'outputs hola to the terminal'\u003cbr\u003etask :hola do\u003cbr\u003e  puts \"hola de Rake!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, let's namespace both \u003ccode\u003ehello\u003c/code\u003e and \u003ccode\u003ehola\u003c/code\u003e under the \u003ccode\u003egreeting\u003c/code\u003e heading:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enamespace :greeting do\u003cbr\u003edesc 'outputs hello to the terminal'\u003cbr\u003e  task :hello do\u003cbr\u003e    puts \"hello from Rake!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  desc 'outputs hola to the terminal'\u003cbr\u003e  task :hola do\u003cbr\u003e    puts \"hola de Rake!\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, to use either of our Rake tasks, we use the following syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake greeting:hello\u003cbr\u003ehello from Rake!\u003cbr\u003e\u003cbr\u003erake greeting:hola\u003cbr\u003ehola de Rake!\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCommon Rake Tasks\u003c/h2\u003e\n\n\u003cp\u003eAs we move towards developing Sinatra and Rails web applications, you'll begin\nto use some common Rake tasks that handle certain database-related jobs.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003erake db:migrate\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eOne common pattern you'll soon become familiar with is the pattern of writing\ncode that creates database tables and then \"migrating\" that code using a rake\ntask.\u003c/p\u003e\n\n\u003cp\u003eOur \u003ccode\u003eStudent\u003c/code\u003e class currently has a \u003ccode\u003e#create_table\u003c/code\u003e method, so let's use that\nmethod to build out our own \u003ccode\u003emigrate\u003c/code\u003e Rake task.\u003c/p\u003e\n\n\u003cp\u003eWe'll namespace this task under the \u003ccode\u003edb\u003c/code\u003e heading. This namespace will contain a\nfew common database-related tasks.\u003c/p\u003e\n\n\u003cp\u003eWe'll call this task \u003ccode\u003emigrate\u003c/code\u003e, because it is a convention to say we are\n\"migrating\" our database by applying SQL statements that alter that database.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enamespace :db do\u003cbr\u003e  desc 'migrate changes to your database'\u003cbr\u003e  task :migrate =\u0026gt; :environment do\u003cbr\u003e    Student.create_table\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut, if we run \u003ccode\u003erake db:migrate\u003c/code\u003e now, we're going to hit an error.\u003c/p\u003e\n\n\u003ch4\u003eTask Dependency\u003c/h4\u003e\n\n\u003cp\u003eYou might be wondering what is happening with this snippet:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etask :migrate =\u0026gt; :environment do\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis creates a \u003cem\u003etask dependency\u003c/em\u003e. Since our \u003ccode\u003eStudent.create_table\u003c/code\u003e code would\nrequire access to the \u003ccode\u003econfig/environment.rb\u003c/code\u003e file (which is where the student\nclass and database are loaded), we need to give our task access to this file. In\norder to do that, we need to define yet another Rake task that we can tell to\nrun before the \u003ccode\u003emigrate\u003c/code\u003e task is run.\u003c/p\u003e\n\n\u003cp\u003eLet's check out that \u003ccode\u003eenvironment\u003c/code\u003e task:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# in Rakefile\u003cbr\u003e\u003cbr\u003etask :environment do\u003cbr\u003e  require_relative './config/environment'\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter adding our environment task, running \u003ccode\u003erake db:migrate\u003c/code\u003e should create our\nstudents table.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003erake db:seed\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAnother task you will become familiar with is the \u003ccode\u003eseed\u003c/code\u003e task. This task is\nresponsible for \"seeding\" our database with some dummy data.\u003c/p\u003e\n\n\u003cp\u003eThe conventional way to seed your database is to have a file in the \u003ccode\u003edb\u003c/code\u003e\ndirectory, \u003ccode\u003edb/seeds.rb\u003c/code\u003e, that contains some code to create instances of your\nclass.\u003c/p\u003e\n\n\u003cp\u003eIf you open up \u003ccode\u003edb/seeds.rb\u003c/code\u003e you'll see the following code to create a few\nstudents:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative \"../lib/student.rb\"\u003cbr\u003e\u003cbr\u003eStudent.create(name: \"Melissa\", grade: \"10th\")\u003cbr\u003eStudent.create(name: \"April\", grade: \"10th\")\u003cbr\u003eStudent.create(name: \"Luke\", grade: \"9th\")\u003cbr\u003eStudent.create(name: \"Devon\", grade: \"11th\")\u003cbr\u003eStudent.create(name: \"Sarah\", grade: \"10th\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we define a rake task that executes the code in this file. This task will\nalso be namespaced under \u003ccode\u003edb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enamespace :db do\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  desc 'seed the database with some dummy data'\u003cbr\u003e  task :seed do\u003cbr\u003e    require_relative './db/seeds.rb'\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if we run \u003ccode\u003erake db:seed\u003c/code\u003e in our terminal (provided we have already run\n\u003ccode\u003erake db:migrate\u003c/code\u003e to create the database table), we will insert five records\ninto the database.\u003c/p\u003e\n\n\u003cp\u003eIf only there was some way to interact with our class and database without\nhaving to run our entire program...\u003c/p\u003e\n\n\u003cp\u003eWell, we can build a Rake task that will load up a Pry console for us.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003erake console\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWe'll define a task that starts up the Pry console. We'll make this task\ndependent on our \u003ccode\u003eenvironment\u003c/code\u003e task so that the \u003ccode\u003eStudent\u003c/code\u003e class and the database\nconnection load first.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edesc 'drop into the Pry console'\u003cbr\u003etask :console =\u0026gt; :environment do\u003cbr\u003e  Pry.start\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, provided we ran \u003ccode\u003erake db:migrate\u003c/code\u003e and \u003ccode\u003erake db:seed\u003c/code\u003e, we can drop into our\nconsole with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erake console\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should bring up the following in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1] pry(main)\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's check to see that we did in fact successfully migrate and seed our\ndatabase:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[1] pry(main)\u0026gt; Student.all\u003cbr\u003e=\u0026gt; [[1, \"Melissa\", \"10th\"],\u003cbr\u003e [2, \"April\", \"10th\"],\u003cbr\u003e [3, \"Luke\", \"9th\"],\u003cbr\u003e [4, \"Devon\", \"11th\"],\u003cbr\u003e [5, \"Sarah\", \"10th\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0f1e3880f1f691661289e5d0091da0b7","title":"Iterating Over Hashes - Apples and Holidays Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"apples-and-holidays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/apples-and-holidays/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/apples-and-holidays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/apples-and-holidays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIterate over nested, or multidimensional, hashes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eThe Holiday Suppliers\u003c/h2\u003e\n\n\u003ch3\u003eInstructions\u003c/h3\u003e\n\n\u003cp\u003eYou have a bunch of decorations for various holidays organized by season.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eholiday_supplies = {\u003cbr\u003e  :winter =\u0026gt; {\u003cbr\u003e    :christmas =\u0026gt; [\"Lights\", \"Wreath\"],\u003cbr\u003e    :new_years =\u0026gt; [\"Party Hats\"]\u003cbr\u003e  },\u003cbr\u003e  :summer =\u0026gt; {\u003cbr\u003e    :fourth_of_july =\u0026gt; [\"Fireworks\", \"BBQ\"]\u003cbr\u003e  },\u003cbr\u003e  :fall =\u0026gt; {\u003cbr\u003e    :thanksgiving =\u0026gt; [\"Turkey\"]\u003cbr\u003e  },\u003cbr\u003e  :spring =\u0026gt; {\u003cbr\u003e    :memorial_day =\u0026gt; [\"BBQ\"]\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWrite your methods in \u003ccode\u003elib/holiday.rb\u003c/code\u003e; use the comments in each method as\nguides.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a method that returns the second supply for the Fourth of July. For\nexample:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003edef second_supply_for_fourth_of_july(holiday_supplies)\u003cbr\u003e  holiday_supplies[:summer][:fourth_of_july][1]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWrite a method that adds a supply to both Winter holidays.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWrite a method that adds a supply to Memorial Day.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWrite a method that adds a new holiday and its associated supplies to any\nseason.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWrite a method to collect all Winter supplies from all the winter holidays.\nFor example:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003ewinter_supplies(holiday_supplies) #=\u0026gt; [\"Lights\", \"Wreath\", etc]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWrite a method that uses a loop to list out all the supplies you have for each\nholiday and the season. Use string manipulation to get your output to match\nwhat the test is expecting.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHere are a few helpful tips:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOur hash keys are symbols. We need to convert them into strings. Use the\n\u003ccode\u003e.to_s\u003c/code\u003e method on a symbol to convert it into a string.\u003c/li\u003e\n\u003cli\u003eLook closely at the output string that the test is expecting. You'll notice\nthat it expects holiday names, like \"New Years\", to have both words\ncapitalized. Ruby has a \u003ccode\u003e.capitalize\u003c/code\u003e method that you can call on a string.\n\u003cstrong\u003eBut, note:\u003c/strong\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e.capitalize\u003c/code\u003e returns the capitalized string but \u003cem\u003edoesn't change\u003c/em\u003e the\noriginal string. So, when you call on that same string in the future, it\n\u003cem\u003eisn't capitalized!\u003c/em\u003e You can capitalize a string for now and evermore by\nusing the bang operator (\u003ccode\u003e!\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eYou'll need to capitalize \u003cem\u003eboth words\u003c/em\u003e in a given holiday's name. If you\ncall \u003ccode\u003e\"new years\".capitalize!\u003c/code\u003e, it will return \u003ccode\u003e\"New years\"\u003c/code\u003e. In order to\ncapitalize \u003cem\u003eboth\u003c/em\u003e words, you'll need to \u003ccode\u003e.split\u003c/code\u003e the string into an array\nand iterate over that array to \u003ccode\u003e.capitalize!\u003c/code\u003e each word in it. Then, you'll\nneed to \u003ccode\u003e.join\u003c/code\u003e the array back into a string.\u003c/li\u003e\n\u003cli\u003eIf you're unfamiliar with the methods mentioned above, look them up in the\nRuby documentation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eExample of expected output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWinter:\u003cbr\u003e  Christmas: Lights, Wreath\u003cbr\u003e  New Years: Party Hats\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWrite a method to collect all holidays with \"BBQ\" in the supply array. The\nmethod should behave as seen below:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eholidays_with_bbqs(holiday_supplies)\u003cbr\u003e#=\u0026gt; [:fourth_of_july, :memorial_day]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e This is a challenging lab, so remember to use Pry, Google, and the Flatiron School community to help you get the tests passing.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://stackoverflow.com/questions/5544858/accessing-elements-of-nested-hashes-in-ruby\"\u003eStackOverflow: Accessing Elements of Nested Hashes in Ruby\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://blog.honeybadger.io/advanced-ruby-hash-techniques/\"\u003ehoneybadger - Advanced Ruby Hash Techniques\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd926a7a79b2ac1f316d542cdb3365631","title":"Looping with Times","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-times\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-times/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-times\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-times/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the \u003ccode\u003etimes\u003c/code\u003e construct and how it implements looping\u003c/li\u003e\n\u003cli\u003eBuild a method using \u003ccode\u003etimes\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThe next construct in our list is \u003ccode\u003etimes\u003c/code\u003e. There are two important distinctions to be mindful of when using \u003ccode\u003etimes\u003c/code\u003e. The first one is that it has to be called on an Integer (like \u003ccode\u003e1\u003c/code\u003e or \u003ccode\u003e10000\u003c/code\u003e). The second is that it executes the block a certain number of times, which is dependent on the number that it's called on. Let's look at the example below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e5.times do\u003cbr\u003e  puts \"Penguins like to jump off icebergs!\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis outputs \u003ccode\u003ePenguins like to jump off icebergs!\u003c/code\u003e five times in your Terminal.\u003c/p\u003e\n\n\u003ch2\u003eExamples\u003c/h2\u003e\n\n\u003ch3\u003eBasic \u003ccode\u003etimes\u003c/code\u003e Example: Dinner Party\u003c/h3\u003e\n\n\u003cp\u003eLet's take a look at some more complex examples: \u003c/p\u003e\n\n\u003cp\u003eYou just had a wildly successful dinner party with seven of your very best friends. Then they went home and left you with \u003cem\u003eall\u003c/em\u003e of the dishes. They will \u003cem\u003enot\u003c/em\u003e be invited back. \u003c/p\u003e\n\n\u003cp\u003eLet's clean those dishes using the \u003ccode\u003etimes\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e7.times do \u003cbr\u003e  puts \"I am doing the dishes left by my former friends.\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e# \u0026gt; \"I am doing the dishes left by my former friends.\"\u003cbr\u003e\u003cbr\u003e# =\u0026gt; 7 (return value)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eIntermediate \u003ccode\u003etimes\u003c/code\u003e Example: Crime Spree\u003c/h3\u003e\n\n\u003cp\u003eOkay, that's fine, but all we did was print some text––what if we wanted to change the value of a variable within a loop? Let's see how that works: \u003c/p\u003e\n\n\u003cp\u003eYou are a jewel thief who has stolen one hundred (100) very valuable jewels (you are a really good jewel thief). But now you need to unload your stolen jewels from your bag into the safe in your secret hideout!  \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejewels_in_bag = 100\u003cbr\u003e\u003cbr\u003e3.times do \u003cbr\u003e  puts \"Hiding 10 stolen jewels.\"\u003cbr\u003e  jewels_in_bag = jewels_in_bag - 10\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e# =\u0026gt; 3 (return value)\u003cbr\u003e\u003cbr\u003eputs \"We have #{jewels_in_bag} jewels still to hide!\"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"We have 70 jewels still to hide!\"\u003cbr\u003e\u003cbr\u003e# =\u0026gt; nil (return value)\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eAdvanced \u003ccode\u003etimes\u003c/code\u003e Example\u003c/h4\u003e\n\n\u003cp\u003eThis is fun and all, but so far we've only printed text within the block of code within the loop. What if we wanted to do something more, say, keep track of the number of jewels we are hiding \u003cem\u003eas we hide them\u003c/em\u003e? \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ejewels_in_bag = 100\u003cbr\u003e\u003cbr\u003e3.times do \u003cbr\u003e  puts \"Hiding 10 stolen jewels.\"\u003cbr\u003e  jewels_in_bag = jewels_in_bag - 10\u003cbr\u003e  puts \"Now there are only #{jewels_in_bag} jewels left to hide!\"\u003cbr\u003eend\u003cbr\u003e# =\u0026gt; 3 (return value)\u003cbr\u003e\u003cbr\u003eputs \"We have #{jewels_in_bag} jewels still to hide!\"\u003cbr\u003e# =\u0026gt; nil (return value)\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Now there are only 90 jewels left to hide!\"\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Now there are only 80 jewels left to hide!\"\u003cbr\u003e# \u0026gt; \"Hiding 10 stolen jewels.\"\u003cbr\u003e# \u0026gt; \"Now there are only 70 jewels left to hide!\"\u003cbr\u003e\u003cbr\u003e# \u0026gt; \"We have 70 jewels still to hide!\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUsing the \u003ccode\u003etimes\u003c/code\u003e method\u003c/h2\u003e\n\n\u003cp\u003eWe're still struggling to master that levitation charm. Since we need to keep practicing, let's write some code that allows us to \u003ccode\u003eputs\u003c/code\u003e the phrase \"Wingardium Leviosa\" only seven times (instead of infinitely, like when we used just a plain \u003ccode\u003eloop\u003c/code\u003e construct).\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this lab.\u003c/li\u003e\n\u003cli\u003eRun the test suite with the \u003ccode\u003elearn test\u003c/code\u003e command. \u003c/li\u003e\n\u003cli\u003eYou'll be coding your solution in \u003ccode\u003etimes.rb\u003c/code\u003e: \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003eFill out the content of the \u003ccode\u003eusing_times\u003c/code\u003e method so that calling it will \u003ccode\u003eputs\u003c/code\u003e the desired phrase, \u003ccode\u003e\"Wingardium Leviosa\"\u003c/code\u003e seven times by using the \u003ccode\u003etimes\u003c/code\u003e keyword.\u003cbr\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc55b6ccef10de7b662ed9a697c68d35a","title":"Manipulating Nested Hashes Code-Along","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"nested-hash-iteration-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration-code-along/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/nested-hash-iteration-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIterate through a nested hash\u003c/li\u003e\n\u003cli\u003eModify the correct element in a nested hash\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eWhy Nested Hashes Matter\u003c/h2\u003e\n\n\u003cp\u003eSo much of what we do in programming involves storing data in hashes. Often the\nhashes that we will encounter will have more than one level. As we get into the\nweb, this will become abundantly clear. To build programs in the future, we'll\nabsolutely need to get comfortable working with hashes. Let's get started!\u003c/p\u003e\n\n\u003ch2\u003eCode Along Exercise\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lab. You'll be coding your solution in \u003ccode\u003elib/contacts.rb\u003c/code\u003e.\nYou'll be manipulating the following \u003ccode\u003eHash\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts = {\u003cbr\u003e  \"Jon Snow\" =\u0026gt; {\u003cbr\u003e    name: \"Jon\",\u003cbr\u003e    email: \"jon_snow@thewall.we\",\u003cbr\u003e    favorite_ice_cream_flavors: [\"chocolate\", \"vanilla\"]\u003cbr\u003e  },\u003cbr\u003e  \"Freddy Mercury\" =\u0026gt; {\u003cbr\u003e    name: \"Freddy\",\u003cbr\u003e    email: \"freddy@mercury.com\",\u003cbr\u003e    favorite_ice_cream_flavors: [\"strawberry\", \"cookie dough\", \"mint chip\"]\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour good buddy Freddy Mercury has recently developed a strawberry allergy! You\nneed to delete \u003ccode\u003e\"strawberry\"\u003c/code\u003e from his list of favorite ice cream flavors in the\n\u003ccode\u003eremove_strawberry\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eIterate over the \u003ccode\u003econtacts\u003c/code\u003e hash and when you reach the key\n\u003ccode\u003e:favorite_ice_cream_flavors\u003c/code\u003e, remove \u003ccode\u003e\"strawberry\"\u003c/code\u003e from the Array of Freddy's\nfavorite ice cream flavors.\u003c/p\u003e\n\n\u003cp\u003eThere are at least two ways you can accomplish this, and for this codealong,\nwe'll work with the second way.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eYou can directly iterate over the hash that is the value of the \u003ccode\u003e\"Freddy\nMercury\"\u003c/code\u003e key by calling an enumerator method in \u003ccode\u003econtacts[\"Freddy Mercury\"]\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou can set a conditional to iterate through the hash for \u003ccode\u003eFreddy Mercury\u003c/code\u003e \nonly; when you reach the appropriate level, check to see if the key \u003ccode\u003e==\u003c/code\u003e \n(\"is equal to\") \u003ccode\u003e:favorite_ice_cream_flavors\u003c/code\u003e. If it is, check to see if the \narray of flavors contains \u003ccode\u003e\"strawberry\"\u003c/code\u003e. If it does, then delete it from the \n\u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003eStep 1: Iterate over the first level\u003c/h4\u003e\n\n\u003cp\u003eInside the \u003ccode\u003eremove_strawberry\u003c/code\u003e method, let's take our first dive into the\ncontacts \u003ccode\u003eHash\u003c/code\u003e. Then we'll use \u003ccode\u003ebinding.pry\u003c/code\u003e to see where we are.\u003c/p\u003e\n\n\u003cp\u003eWe are going to first iterate over the top level of the \u003ccode\u003eHash\u003c/code\u003e where the keys\nshould be the person and the values should be a \u003ccode\u003eHash\u003c/code\u003e  of details about the\nperson.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote on variable naming:\u003c/strong\u003e This process will be remarkably easier if you name\nyour variables to accurately reflect the data they represent. For now, when the\nvalue we're iterating over is another hash, we will explicitly add a \u003ccode\u003e_hash\u003c/code\u003e to\nthe end of the variable name (E.G. \u003ccode\u003econtact_details_hash\u003c/code\u003e below).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, contact_details_hash|\u003cbr\u003e  binding.pry\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can enter the \u003ccode\u003epry\u003c/code\u003e in one of two ways: by running \u003ccode\u003elearn test\u003c/code\u003e or by\nrunning \u003ccode\u003eruby lib/contacts.rb\u003c/code\u003e. We'll use \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's run \u003ccode\u003elearn test\u003c/code\u003e in the terminal and, at the \u003ccode\u003epry\u003c/code\u003e prompt, check that \nour defined variables (\u003ccode\u003eperson\u003c/code\u003e and \u003ccode\u003econtact_details_hash\u003c/code\u003e) match our \nexpectations.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; person\u003cbr\u003e=\u0026gt; \"Jon Snow\"\u003cbr\u003e\u003cbr\u003e\u0026gt; contact_details_hash\u003cbr\u003e=\u0026gt; {:name=\u0026gt;\"Jon\", :email=\u0026gt;\"jon_snow@thewall.we\", :favorite_ice_cream_flavors=\u0026gt;[\"chocolate\", \"vanilla\"]}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExcellent! They do!\u003c/p\u003e\n\n\u003cp\u003eType \u003ccode\u003eexit\u003c/code\u003e while in \u003ccode\u003epry\u003c/code\u003e to continue. The \u003ccode\u003epry\u003c/code\u003e should trigger a second time \nbecause we have \u003cem\u003etwo\u003c/em\u003e contacts. You can verify that we're in the second loop \nthrough our hash by checking the values of \u003ccode\u003eperson\u003c/code\u003e and \u003ccode\u003edata\u003c/code\u003e at the \u003ccode\u003epry\u003c/code\u003e \nprompt. \u003c/p\u003e\n\n\u003cp\u003eTyping \u003ccode\u003eexit\u003c/code\u003e now will end the loop and exit \u003ccode\u003epry\u003c/code\u003e since we've finished \niterating through our contacts. It will also display the results of the test, \nwhich we haven't passed just yet.\u003c/p\u003e\n\n\u003ch4\u003eStep 2. Iterate over the second level\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, contact_details_hash|\u003cbr\u003e  if person == \"Freddy Mercury\"\u003cbr\u003e    contact_details_hash.each do |attribute, data|\u003cbr\u003e      binding.pry\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAgain, let's jump into our \u003ccode\u003ebinding.pry\u003c/code\u003e using \u003ccode\u003elearn test\u003c/code\u003e. We can verify\nthat we've found the record for Freddy Mercury by checking the values\nof our variables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; attribute\u003cbr\u003e=\u0026gt; :name\u003cbr\u003e\u003cbr\u003e\u0026gt; data\u003cbr\u003e=\u0026gt; \"Freddy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore we move on, you will need to exit \u003ccode\u003epry\u003c/code\u003e again so you can see the\nresults of the new code we'll be writing in Step 3. We are now inside the \nloop through the attributes. Because there are three of them, we will need \nto run \u003ccode\u003eexit\u003c/code\u003e three times to finish the loop and exit \u003ccode\u003epry\u003c/code\u003e. Alternatively, \nyou can run \u003ccode\u003eexit!\u003c/code\u003e or \u003ccode\u003e!!!\u003c/code\u003e at any time to exit out of \u003ccode\u003epry\u003c/code\u003e entirely.\u003c/p\u003e\n\n\u003ch4\u003eStep 3. Locate the element we're looking for\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, contact_details_hash|\u003cbr\u003e  if person == \"Freddy Mercury\"\u003cbr\u003e    contact_details_hash.each do |attribute, data|\u003cbr\u003e      if attribute == :favorite_ice_cream_flavors\u003cbr\u003e        binding.pry\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis time we are still iterating through the attributes but we've added a\nconditional so the \u003ccode\u003epry\u003c/code\u003e will only hit when the attribute is equal to\n\u003ccode\u003e:favorite_ice_cream_flavors\u003c/code\u003e. If we check the value of \u003ccode\u003edata\u003c/code\u003e in our \nbinding, we should see the array containing Freddy's favorite flavors.\u003c/p\u003e\n\n\u003ch4\u003eStep 4. Update the hash\u003c/h4\u003e\n\n\u003cp\u003eLastly, we will use \u003ccode\u003edelete_if\u003c/code\u003e to iterate through the ice cream array and\nremove any element that matches \"strawberry\". Recall that \u003ccode\u003edata\u003c/code\u003e is the array\ncontaining Freddy's favorite ice cream flavors. \u003ccode\u003edelete_if\u003c/code\u003e will iterate through\nthe array, check each element to see if it is equal to \"strawberry\", and delete \nthe key/value pair if the block returns \u003ccode\u003etrue\u003c/code\u003e. \u003ca href=\"https://docs.ruby-lang.org/en/2.0.0/Hash.html#method-i-delete_if\"\u003eLearn more about it in the ruby \ndocs.\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econtacts.each do |person, contact_details_hash|\u003cbr\u003e  if person == \"Freddy Mercury\"\u003cbr\u003e    contact_details_hash.each do |attribute, data|\u003cbr\u003e      if attribute == :favorite_ice_cream_flavors\u003cbr\u003e        data.delete_if {|ice_cream| ice_cream == \"strawberry\"}\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe full method should now be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef remove_strawberry(contacts)\u003cbr\u003e  contacts.each do |person, contact_details_hash|\u003cbr\u003e    if person == \"Freddy Mercury\"\u003cbr\u003e      contact_details_hash.each do |attribute, data|\u003cbr\u003e        if attribute == :favorite_ice_cream_flavors\u003cbr\u003e          data.delete_if {|ice_cream| ice_cream == \"strawberry\"}\u003cbr\u003e        end\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCongrats! You made it. Test that your method works by running \u003ccode\u003eruby\nbin/contacts\u003c/code\u003e in the terminal. It should output the hash without strawberry ice\ncream. Also, be sure to run the specs to make sure they pass.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g17c0e3b1fa54b04554618ffc346c4b1c","title":"Mapping Ruby Classes to a Database Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-mapping-classes-to-database-tables-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-mapping-classes-to-database-tables-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite a class that is mapped, or equated, to a database table. \u003c/li\u003e\n\u003cli\u003eBuild a method that creates a table that maps to the given class. \u003c/li\u003e\n\u003cli\u003eWrite a method that drops that table. \u003c/li\u003e\n\u003cli\u003eWrite a method that saves a given instance to the database table. \u003c/li\u003e\n\u003cli\u003eWrite a method that both creates a new instance of the class \u003cem\u003eand\u003c/em\u003e saves that instance to a database table. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eLet's say we're building an app to help a public school's administrators keep track of their students. In this app we have a \u003ccode\u003eStudent\u003c/code\u003e class. Each individual student will have two attributes, a \u003ccode\u003ename\u003c/code\u003e and a \u003ccode\u003egrade\u003c/code\u003e, i.e. 9th, 10th, 11th, etc. \u003c/p\u003e\n\n\u003cp\u003eOur administrators need to save the student objects that this class produces to a database. We've set up the database for you in the \u003ccode\u003econfig/environment.rb\u003c/code\u003e file. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'sqlite3'\u003cbr\u003erequire_relative '../lib/student'\u003cbr\u003e\u003cbr\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/students.db\")}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour connection to the database can be referred to, throughout your program, like this: \u003ccode\u003eDB[:conn]\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eYour job is to build out the \u003ccode\u003eStudent\u003c/code\u003e class such that it has the two attributes described above. You'll also need to build a class method on the \u003ccode\u003eStudent\u003c/code\u003e class that creates the students table in the database, a method that can drop that table and a method, \u003ccode\u003e#save\u003c/code\u003e, that can save the data concerning an individual student object to the database. \u003c/p\u003e\n\n\u003cp\u003eLastly, you'll create a method that \u003cem\u003eboth creates a new instance of the student class and then saves it to the database.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's get started!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eAttributes\u003c/h3\u003e\n\n\u003cp\u003eYour \u003ccode\u003eStudent\u003c/code\u003e instances should initialize with a name, grade and an optional id. The default value of the \u003ccode\u003eid\u003c/code\u003e parameter should be set to \u003ccode\u003enil\u003c/code\u003e. This is because when we create new \u003ccode\u003eStudent\u003c/code\u003e instances, we will not assign them an \u003ccode\u003eid\u003c/code\u003e. That is the responsibility of the database and we will learn more about that later. \u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eStudent\u003c/code\u003e attributes should have an \u003ccode\u003eattr_accessor\u003c/code\u003e for \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003egrade\u003c/code\u003e but only an \u003ccode\u003eattr_reader\u003c/code\u003e for \u003ccode\u003eid\u003c/code\u003e. The only place \u003ccode\u003eid\u003c/code\u003e can be set equal to something is inside the initialize method, via: \u003ccode\u003e@id = id\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create_table\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that creates the students table. Use a heredoc to set a variable, \u003ccode\u003esql\u003c/code\u003e, equal to the necessary SQL statement. Remember, the attributes of a student, \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003egrade\u003c/code\u003e, and \u003ccode\u003eid\u003c/code\u003e, should correspond to the column names you are creating in your students table. The \u003ccode\u003eid\u003c/code\u003e column should be the primary key. \u003c/p\u003e\n\n\u003cp\u003eWith your \u003ccode\u003esql\u003c/code\u003e variable pointing to the correct SQL statement, you can execute that statement using the \u003ccode\u003e#execute\u003c/code\u003e method provided to us by the SQLite3-Ruby gem. Remember that this method is called on whatever object stores your connection to the database, in this case \u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.drop_table\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that drops the students table. Once again, create a variable \u003ccode\u003esql\u003c/code\u003e, and set it equal to the SQL statement that drops the students table. Execute that statement against the database using \u003ccode\u003eDB[:conn].execute(sql)\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#save\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is an instance method that saves the attributes describing a given student to the students table in our database. Once again, create a variable, \u003ccode\u003esql\u003c/code\u003e, and set it equal to the SQL statement that will \u003ccode\u003eINSERT\u003c/code\u003e the correct data into the table. \u003c/p\u003e\n\n\u003cp\u003eUse bound paremeters to pass the given student's name and grade into the SQL statement. Remember that you don't need to insert a value for the \u003ccode\u003eid\u003c/code\u003e column. Because it is the primary key, the \u003ccode\u003eid\u003c/code\u003e column's value will be automatically assigned. \u003cstrong\u003eHowever\u003c/strong\u003e, at the end of your \u003ccode\u003e#save\u003c/code\u003e method, you do need to grab the ID of the last inserted row, i.e. the row you just inserted into the database, and assign it to the be the value of the @id attribute of the given instance.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis is a class method that uses keyword arguments. The keyword arguments are \u003ccode\u003ename:\u003c/code\u003e and \u003ccode\u003egrade:\u003c/code\u003e. Use the values of these keyword arguments to: 1) instantiate a new \u003ccode\u003eStudent\u003c/code\u003e object with \u003ccode\u003eStudent.new(name, grade)\u003c/code\u003e and 2) save that new student object via \u003ccode\u003estudent.save\u003c/code\u003e. The \u003ccode\u003e#create\u003c/code\u003e method should return the student object that it creates. \u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga2e35dcb61ac20d009b3bacbd094b983","title":"Mass Assignment Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-metaprogramming-mass-assignment-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-metaprogramming-mass-assignment-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse keyword arguments to define an initialize method.\u003c/li\u003e\n\u003cli\u003eUse mass assignment to metaprogram an initialize method. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a Person class that accepts a hash upon initialization. The keys of the hash should conform to the attributes below: \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eallowable properties: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e:name, :birthday, :hair_color, :eye_color, :height, \u003cbr\u003e:weight, :handed, :complexion, :t_shirt_size, \u003cbr\u003e:wrist_size, :glove_size, :pant_length, :pant_width\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eEach key in the attributes hash will become a property of an initialized Person instance. So, you should make an \u003ccode\u003eattr_accessor\u003c/code\u003e for each of the above properties\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eex:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebob_attributes = {name: \"Bob\", hair_color: \"Brown\"}\u003cbr\u003e\u003cbr\u003ebob = Person.new(bob_attributes)\u003cbr\u003ebob.name       # =\u0026gt; \"Bob\"\u003cbr\u003ebob.hair_color # =\u0026gt; \"Brown\"\u003cbr\u003e\u003cbr\u003esusan_attributes = {name: \"Susan\", height: \"5'11\\\"\", eye_color: \"Green\"}\u003cbr\u003e\u003cbr\u003esusan = Person.new(susan_attributes)\u003cbr\u003esusan.name      # =\u0026gt; \"Susan\"\u003cbr\u003esusan.height    # =\u0026gt; \"5'11\"\"\u003cbr\u003esusan.eye_color # =\u0026gt; \"Green\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eYour initialize method should use iteration and the \u003ccode\u003e.send\u003c/code\u003e method to mass assign the value of each key/value pair to its associated key (i.e. method). Refer to the previous reading to help you solve this one.\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g73e5099a8cad78b9696e078aaf796e50","title":"Method Parameters Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"method-arguments-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/method-arguments-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-arguments-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-arguments-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eDefine a method that takes in an argument and uses that argument in the\nmethod body.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDefine a method that takes in two arguments and uses both arguments in the\nmethod body.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou'll be coding your methods in \u003ccode\u003elib/introduction.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#introduction\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eWe'll be using our test errors to guide us through the requirements for this lab, so let's run the test suite to get started. To do that, run \u003ccode\u003elearn test\u003c/code\u003e in your terminal. Let's take a look at the first error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) #introduction takes in an argument of a name and puts out a phrase with that name using string interpolation\u003cbr\u003e     Failure/Error: expect{introduction(\"Josh\")}.to output(\"Hi, my name is Josh.\\n\").to_stdout\u003cbr\u003e     NoMethodError:\u003cbr\u003e       undefined method `introduction' for #\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (3 levels) in '\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (2 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWow, that's a lot of information. The important part for us though is the line that tells us \u003cem\u003ewhat kind of error\u003c/em\u003e we are experiencing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNoMethodError:\u003cbr\u003e       undefined method `introduction`\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooks like our test is expecting to test a method called \u003ccode\u003e#introduction\u003c/code\u003e. Let's define that method in \u003ccode\u003elib/introduction.rb\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/introduction.rb\u003cbr\u003e\u003cbr\u003edef introduction\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we'll run our test suite again. You should see the following error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) #introduction takes in an argument of a name and puts out a phrase with that name using string interpolation\u003cbr\u003e     Failure/Error:\u003cbr\u003e       def introduction\u003cbr\u003e       end\u003cbr\u003e\u003cbr\u003e     ArgumentError:\u003cbr\u003e       wrong number of arguments (given 1, expected 0)\u003cbr\u003e     # ./lib/introduction.rb:1:in `introduction'\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (3 levels) in '\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (2 levels) in '\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce again the important part of this error message is the part where the type\nof error is described:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArgumentError:\u003cbr\u003e       wrong number of arguments (given 1, expected 0)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have an ArgumentError. The test is trying to call our \u003ccode\u003e#introduction\u003c/code\u003e\nmethod with an argument (notice it says \u003ccode\u003egiven 1\u003c/code\u003e) but we haven't defined our method\nto take in any arguments, the \u003ccode\u003eexpected 0\u003c/code\u003e part of the error message.\u003c/p\u003e\n\n\u003cp\u003eLet's fix that now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/introduction.rb\u003cbr\u003e\u003cbr\u003edef introduction(name)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test again and you'll see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) #introduction takes in an argument of a name and puts out a phrase with that name using string interpolation\u003cbr\u003e     Failure/Error: expect{introduction(\"Josh\")}.to output(\"Hi, my name is Josh.\\n\").to_stdout\u003cbr\u003e\u003cbr\u003e       expected block to output \"Hi, my name is Josh.\\n\" to stdout, but output nothing\u003cbr\u003e       Diff:\u003cbr\u003e       @@ -1,2 +1 @@\u003cbr\u003e       -Hi, my name is Josh.\u003cbr\u003e\u003cbr\u003e     # ./spec/introduction_spec.rb:5:in `block (2 levels) in '\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow the important part of our error message is here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpected block to output \"Hi, my name is Josh.\\n\" to stdout, but output nothing\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur test is expecting our method to \u003ccode\u003eputs\u003c/code\u003e out the exact phrase, using the value\nof the \u003ccode\u003ename\u003c/code\u003e argument that the method is called with.\u003c/p\u003e\n\n\u003cp\u003eLet's fix that:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/introduction.rb\u003cbr\u003e\u003cbr\u003edef introduction(name)\u003cbr\u003e  puts \"Hi, my name is #{name}.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test again and we should be passing the first of our two tests. Use the\ntest output and the procedure we just followed to get the second test passing.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#introduction_with_language\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eDefine a method, \u003ccode\u003e#introduction_with_language\u003c/code\u003e that takes in two arguments,\n\u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elanguage\u003c/code\u003e and outputs the phrase: `\"Hi, my name is #{name} and I am\nlearning to program in #{language}.\"\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga0633055c830f526bd79f9970690236d","title":"Methods","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-methods-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-methods-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-methods-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-methods-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll introduce methods, distinguish them from data types, and\ncover how to create and execute them in your Ruby program.\u003c/p\u003e\n\n\u003cp\u003eYou can follow along using IRB by typing \u003ccode\u003eirb\u003c/code\u003e in your terminal and copying the\nprovided code examples. Alternatively, in the \u003ccode\u003elib\u003c/code\u003e folder, there is also a\nfile, \u003ccode\u003eexample.rb\u003c/code\u003e, that you can use to copy the code examples into. You can run\nthis file from the lesson's main directory by typing \u003ccode\u003eruby lib/example.rb\u003c/code\u003e to\nsee what it produces.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how methods can define new routines and procedures for our code.\u003c/li\u003e\n\u003cli\u003eDefine a method with the \u003ccode\u003edef\u003c/code\u003e keyword, supply the method's body, and close\nthe method definition with the \u003ccode\u003eend\u003c/code\u003e keyword.\u003c/li\u003e\n\u003cli\u003eInvoke a method by calling it by name.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eVideo\u003c/h3\u003e\n\n\u003cp\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/njJB-fuE-qE?rel=0\u0026amp;modestbranding=1\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=njJB-fuE-qE\"\u003eIntroduction to Ruby Methods\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003eWhy Use Methods\u003c/h3\u003e\n\n\u003cp\u003eMethods define a new thing that your program can do. Variables are a mechanism\nto teach your Ruby program about data; methods teach your Ruby program about a\nnew routine or behavior it can use. Variables are like nouns, methods are like\nverbs.\u003c/p\u003e\n\n\u003cp\u003eFor example, imagine needing to say \"Hello World!\" ten times. You might do something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephrase = \"Hello World!\"\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat works pretty well. You made use of a variable to encapsulate the data you\nwanted to print and then the next ten lines literally print the phrase.\u003c/p\u003e\n\n\u003cp\u003eNow imagine later in your program you again want to say \"Hello World!\" ten\ntimes. The entire program would look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephrase = \"Hello World!\"\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003e\u003cbr\u003e# ... The rest of the program\u003cbr\u003e\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\u003cbr\u003eputs phrase\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have to repeat the literal procedure for printing the value of \u003ccode\u003ephrase\u003c/code\u003e ten\ntimes. If variables encapsulate and abstract data, methods encapsulate and\nabstract procedure. Instead of literally \u003ccode\u003eputs phrase\u003c/code\u003e ten times, we can instead\nbuild a method—a little machine that does exactly that whenever we want.\u003c/p\u003e\n\n\u003cp\u003eThe method would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef say_hello_world_ten_times\u003cbr\u003e  phrase = \"Hello World!\"\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, when we use the bareword \u003ccode\u003esay_hello_world_ten_times\u003c/code\u003e in our program, it\nwill invoke the method, running the code within the method. So the script above,\nsaying hello ten times, doing other things, then saying hello ten times again\ncould be rewritten as this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef say_hello_world_ten_times\u003cbr\u003e  phrase = \"Hello World!\"\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003e  puts phrase\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003esay_hello_world_ten_times\u003cbr\u003e\u003cbr\u003e# ... The rest of the program\u003cbr\u003e\u003cbr\u003esay_hello_world_ten_times\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's way cleaner and follows the code principle \"Don't Repeat Yourself\" or\nDRY. We abstract the action or procedure of putting \"Hello World!\" ten times\ninto a method. By defining the method  \u003ccode\u003esay_hello_world_ten_times\u003c/code\u003e once, we can\n\"call\" or \"invoke\" the method as many times as we want in the future. Let's look\nat methods in greater detail.\u003c/p\u003e\n\n\u003ch3\u003eDefining a Method\u003c/h3\u003e\n\n\u003cp\u003eYou can define a method in Ruby with the \u003ccode\u003edef\u003c/code\u003e keyword. A method's name can\nbegin with any lowercase letter. Here's a quick example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting # Method Signature\u003cbr\u003e  puts \"Hello World\" # Method Body\u003cbr\u003eend # Method Closing\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: In the snippet above, we are using the \u003ccode\u003e#\u003c/code\u003e in a different way than\nwe've seen before. Here we are using it to put comments inside our code. Ruby\nwill see the \u003ccode\u003e#\u003c/code\u003e in the line of code (without the rest of the syntax required\nfor string interpolation) and will not interpret anything that follows. You can\nuse \u003ccode\u003e#\u003c/code\u003e in this way to add comments or clarifications to your code, either at\nthe end of a line of code as shown above or on a line by themselves. You can\nalso use it to \"comment out\" code (by putting \u003ccode\u003e#\u003c/code\u003e at the beginning of each line)\nif you want to keep the code from executing temporarily. This can come in handy\nduring debugging.\u003c/p\u003e\n\n\u003cp\u003eThe first line in the code snippet above, \u003ccode\u003edef greeting\u003c/code\u003e, is called the method\nsignature, it defines the basic properties of the method including the name of\nthe method, \u003ccode\u003egreeting\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOnce you 'open' a method definition with the \u003ccode\u003edef\u003c/code\u003e keyword, all subsequent lines\nin your program are considered the method's body, the actual procedure or code\nthat your method will run every time it's called.\u003c/p\u003e\n\n\u003cp\u003eYou must terminate every opening \u003ccode\u003edef\u003c/code\u003e of a method with a corresponding \u003ccode\u003eend\u003c/code\u003e in\norder to close the method body. If you don't correctly \u003ccode\u003eend\u003c/code\u003e a method, your\nprogram will have unexpected results or break entirely because of a syntax\nerror. A good practice is to define the method and then immediately close it\nbefore programming anything into the method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  # Leave a line break for the method body\u003cbr\u003eend # Immediately close the method.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we set up the method's structure first, ensuring a proper termination\nbefore adding any other complexity.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: It's also a great practice to indent methods correctly. The body of\na method should be indented two (2) spaces, placing it visually within the\nmethod. When you \u003ccode\u003eend\u003c/code\u003e the method, go back to the same indentation of the\n\u003ccode\u003edef\u003c/code\u003e, aligning the opening and closing of the method visually. Then you can\neasily define the body of the method and never worry about forgetting to \u003ccode\u003eend\u003c/code\u003e\nthe method.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\" # Now code the body of the method.\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eInvoking a Method\u003c/h3\u003e\n\n\u003cp\u003eOnce you define a method, you can execute the method whenever you want by using\nthe method name in your code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting # Executing the method by name\u003cbr\u003e#=\u0026gt; \"Hello World\"\u003cbr\u003e\u003cbr\u003egreeting # Executing the method again\u003cbr\u003e#=\u0026gt; \"Hello World\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If you have been using IRB so far, exit out of it before continuing.\nThe remaining portion of this lesson involves bash commands you will need to\nenter into the terminal.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's try making a method we can use over and over. Make a new file called\n\u003ccode\u003egreeting.rb\u003c/code\u003e (you can use: \u003ccode\u003etouch greeting.rb\u003c/code\u003e from your terminal). Put the\nfollowing code in it:\u003c/p\u003e\n\n\u003cp\u003eFile: \u003ccode\u003egreeting.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSave your file and run it with \u003ccode\u003eruby greeting.rb\u003c/code\u003e. You'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ruby greeting.rb\u003cbr\u003e$\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou'll notice that when you run your program, nothing happens. Your program\nsuccessfully defined the method but it never executed it. Just because you built\na machine doesn't mean that you turned it on. Update your \u003ccode\u003egreeting.rb\u003c/code\u003e to\nentirely read:\u003c/p\u003e\n\n\u003cp\u003eFile: \u003ccode\u003egreeting.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSave your file and run it with \u003ccode\u003eruby greeting.rb\u003c/code\u003e. You'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ruby greeting.rb\u003cbr\u003eHello World\u003cbr\u003e$\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow your program actually executed the program. Update the code again to\nentirely read:\u003c/p\u003e\n\n\u003cp\u003eFile: \u003ccode\u003egreeting.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef greeting\u003cbr\u003e  puts \"Hello World\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egreeting\u003cbr\u003egreeting\u003cbr\u003egreeting\u003cbr\u003egreeting\u003cbr\u003egreeting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSave your file and run it with \u003ccode\u003eruby greeting.rb\u003c/code\u003e. You'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ ruby greeting.rb\u003cbr\u003eHello World\u003cbr\u003eHello World\u003cbr\u003eHello World\u003cbr\u003eHello World\u003cbr\u003eHello World\u003cbr\u003e$\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe bareword \u003ccode\u003egreeting\u003c/code\u003e will execute the body of the defined method.\u003c/p\u003e\n\n\u003ch4\u003eWriting Code vs Reading About Code\u003c/h4\u003e\n\n\u003cp\u003eLet's end by talking briefly about one additional use of \u003ccode\u003e#\u003c/code\u003e. Programmers love\nconventions, or agreed upon rules that help them talk to each other about code.\nA common syntax convention for Ruby methods is to preface them with a \u003ccode\u003e#\u003c/code\u003e, and\nin subsequent lessons, you might see method names written with a \u003ccode\u003e#\u003c/code\u003e in front of\nthem. For example, if a method is named 'greeting', rubyists will often refer to \nit as \u003ccode\u003e#greeting\u003c/code\u003e. This is so that other rubyists can instantly recognize it as \na method, as opposed to a variable or a bareword or a class. But remember that \nwhen you write it in your code, it should be \u003ccode\u003egreeting\u003c/code\u003e and not \u003ccode\u003e#greeting\u003c/code\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga612b519fd0d449fe2786e4a415487e8","title":"Method Scope Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"method-scope-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/method-scope-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-scope-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/method-scope-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a method that takes in an argument and pass a variable in as that argument.\u003c/li\u003e\n\u003cli\u003eUnderstand that a variable defined inside a method cannot be used outside of that method.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003ePart I: Passing a Variable Into a Method\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/catch_phrase.rb\u003c/code\u003e. You should see the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef catch_phrase\u003cbr\u003e  puts phrase\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that the method is trying to \u003ccode\u003eputs\u003c/code\u003e out a variable called \u003ccode\u003ephrase\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the test for this method in \u003ccode\u003espec/catch_phrase_spec.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe \"#catch_phrase\" do\u003cbr\u003e  it \"puts out a catch phrase\" do\u003cbr\u003e    phrase = \"It's-a me, Mario!\"\u003cbr\u003e    expect{catch_phrase}.to output(\"It's-a me, Mario!\\n\").to_stdout\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo ahead and run the test for this method only by typing \u003ccode\u003erspec\nspec/catch_phrase_spec.rb\u003c/code\u003e into your terminal in the directory of this lab. You\nshould see the following error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNameError:\u003cbr\u003e  undefined local variable or method `phrase' for #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis error is occurring because the code inside the \u003ccode\u003e#catch_phrase\u003c/code\u003e method is\ntrying to use the \u003ccode\u003ephrase\u003c/code\u003e variable \u003cstrong\u003ebut\u003c/strong\u003e it's not present inside the \u003cem\u003escope\u003c/em\u003e\nof the \u003ccode\u003e#catch_phrase\u003c/code\u003e method. \u003cstrong\u003eIt is out of scope.\u003c/strong\u003e Let's fix it!\u003c/p\u003e\n\n\u003cp\u003eWe need to pass \u003ccode\u003ephrase\u003c/code\u003e into our \u003ccode\u003e#catch_phrase\u003c/code\u003e as an argument. Let's do it:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRe-define the \u003ccode\u003e#catch_phrase\u003c/code\u003e method to take in an argument of a phrase.\u003c/li\u003e\n\u003cli\u003eChange the test in \u003ccode\u003espec/catch_phrase_spec.rb\u003c/code\u003e to match the following:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003erequire \"spec_helper\"\u003cbr\u003edescribe \"#catch_phrase\" do\u003cbr\u003e  it \"puts out a catch phrase\" do\u003cbr\u003e    phrase = \"It's-a me, Mario!\"\u003cbr\u003e    expect{catch_phrase(phrase)}.to output(\"It's-a me, Mario!\\n\").to_stdout\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003ePart II: Understanding Method Scope\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/rescue_princess_peach.rb\u003c/code\u003e and take a look at the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef rescue_princess_peach\u003cbr\u003e  status = \"rescued\"\u003cbr\u003e  puts \"Hooray! Mario has rescued Princess Peach.\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the body of this method is setting a variable, \u003ccode\u003estatus\u003c/code\u003e equal to a\nvalue of \u003ccode\u003e\"rescued\"\u003c/code\u003e. Do you think we will be able to access this variable\noutside of the method? Let's find out!\u003c/p\u003e\n\n\u003cp\u003e1 . Un-comment the lines below in your \u003ccode\u003elib/rescue_princess_peach.rb\u003c/code\u003e file. You\ncan do this by removing the \u003ccode\u003e#\u003c/code\u003e at the front of each line.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erescue_princess_peach\u003cbr\u003eputs status\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e2 . Run the file with \u003ccode\u003eruby lib/rescue_princess_peach.rb\u003c/code\u003e in your terminal. You should see the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHooray! Mario has rescued Princess Peach.\u003cbr\u003elib/rescue_princess_peach.rb:9:in `': undefined local variable or method `status' for main:Object (NameError)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe are getting a \u003ccode\u003eNameError\u003c/code\u003e because \u003ccode\u003estatus\u003c/code\u003e is undefined. Wait a minute, you\nmight be wondering. Didn't we define \u003ccode\u003estatus\u003c/code\u003e inside the\n\u003ccode\u003e#rescue_princess_peach\u003c/code\u003e method? We did, but \u003cstrong\u003evariables defined inside a\nmethod are not available outside of that method\u003c/strong\u003e. They are only available\nwithin the \u003ccode\u003escope\u003c/code\u003e of that method.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eGo back and comment out lines 8 and 9 of \u003ccode\u003erescue_princess_peach.rb\u003c/code\u003e by\nadding back the \u003ccode\u003e#\u003c/code\u003es.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eRun the test suite and you'll see that we are passing all of our tests. If you\nopen up the \u003ccode\u003espec/rescue_princess_peach_spec.rb\u003c/code\u003e file, you'll see the following\ntest:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire \"spec_helper\"\u003cbr\u003e\u003cbr\u003edescribe \"#rescue_princess_peach\" do\u003cbr\u003e  it \"outputs a message and sets a variable, status, that is not available outside of this method\" do\u003cbr\u003e    expect{rescue_princess_peach}.to output(\"Hooray! Mario has rescued Princess Peach.\\n\").to_stdout\u003cbr\u003e    expect{puts status}.to raise_error(NameError)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice the last expectation of our test: \u003ccode\u003eexpect{puts status}.to\nraise_error(NameError)\u003c/code\u003e. We expect any attempt to use the \u003ccode\u003estatus\u003c/code\u003e variable to\nbe met with a \u003ccode\u003eNameError\u003c/code\u003e. Our program, outside of the\n\u003ccode\u003e#rescue_princess_peach\u003c/code\u003emethod, just doesn't know what it is.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge717ea6bed452b2d6395db896c3048cb","title":"Modules","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-modules\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLearn about modules — another way to lend functionality across classes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we discussed the concept of inheritance. We learned that through subclasses, a certain class under a super class, the subclass has access to all of the methods of its parent. Inheriting one class from another makes sense. The subclass can be understood as a child or subordinate of the super class. For example, a car is a type of vehicle, so it makes sense for the \u003ccode\u003eCar\u003c/code\u003e class to \u003cem\u003einherit\u003c/em\u003e from the \u003ccode\u003eVehicle\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eLet's think about a slightly different type of example, one that is less hierarchical. We could easily envision writing an app that models the environment of a dance performance. Such an app might have a \u003ccode\u003eDancer\u003c/code\u003e class. Dancers, we know, perform dances. Similarly, we could imagine a little girl going to see the Nutcracker ballet one Christmas, coming home and wanting to practice all of the ballet moves from the show. So, we might write a \u003ccode\u003eKid\u003c/code\u003e class in which an instance of that class, our little girl who has gone to see the ballet, should have access to all those ballet moves (her performance skill notwithstanding). This situation is not hierarchical, like our \u003ccode\u003eCar\u003c/code\u003e and \u003ccode\u003eVehicle\u003c/code\u003e example. Instead, \u003ccode\u003eKid\u003c/code\u003e and \u003ccode\u003eDancer\u003c/code\u003e simply need to share some functionality, without being related in any other meaningful way.\u003c/p\u003e\n\n\u003cp\u003eThis is where modules come in. Modules allow us to collect and bundle a group of methods and make those methods available to any number of classes. In this exercise, we'll be defining a \u003ccode\u003eDance\u003c/code\u003e module and making it available to both the \u003ccode\u003eDancer\u003c/code\u003e and \u003ccode\u003eKid\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch2\u003eCode Along I: Including Module Methods as Instance Methods\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eThis is a code along exercise. Fork and clone this repo by clicking the Github link at the top of the page. Follow along with the walk-through below to get your code working. Get the tests to pass.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003eStep I: Defining Our Module\u003c/h3\u003e\n\n\u003cp\u003eWe'll code our \u003ccode\u003eDance\u003c/code\u003e module inside the \u003ccode\u003elib/dance_module.rb\u003c/code\u003e file. Open up that file and define your module with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Dance\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's give our \u003ccode\u003eDance\u003c/code\u003e module some fabulous moves:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Dance\u003cbr\u003e  def twirl\u003cbr\u003e    \"I'm twirling!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def jump\u003cbr\u003e    \"Look how high I'm jumping!\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def pirouette\u003cbr\u003e    \"I'm doing a pirouette\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def take_a_bow\u003cbr\u003e    \"Thank you, thank you. It was a pleasure to dance for you all.\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOkay, now we'll define our \u003ccode\u003eKid\u003c/code\u003e class and tell it to \u003cem\u003einclude\u003c/em\u003e the capabilities of the \u003ccode\u003eDance\u003c/code\u003e module.\u003c/p\u003e\n\n\u003ch3\u003eStep 2: Defining the Classes\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/kid.rb\u003c/code\u003e and define your \u003ccode\u003eKid\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Kid\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's do the same for the \u003ccode\u003eDancer\u003c/code\u003e class in \u003ccode\u003elib/dancer.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dancer\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we're ready to include our module in our classes:\u003c/p\u003e\n\n\u003ch3\u003eStep 3: Including the Module\u003c/h3\u003e\n\n\u003cp\u003eTo lend our two classes all of the methods of the \u003ccode\u003eDance\u003c/code\u003e module, we use the \u003ccode\u003einclude\u003c/code\u003e keyword:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Kid\u003cbr\u003e  include Dance\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dancer\u003cbr\u003e  include Dance\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we use the \u003ccode\u003einclude\u003c/code\u003e keyword, we allow our classes to use all of the methods of the included module as \u003cem\u003einstance\u003c/em\u003e methods. We'll talk about how to lend a module's methods as \u003cem\u003eclass\u003c/em\u003e methods in a minute.\u003c/p\u003e\n\n\u003cp\u003eNow that we've included the module, open up \u003ccode\u003ebin/dance_party\u003c/code\u003e and get familiar with following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative \"../lib/kid.rb\"\u003cbr\u003erequire_relative \"../lib/dancer.rb\"\u003cbr\u003e\u003cbr\u003eangelina = Kid.new(\"Angelina\")\u003cbr\u003emikhail_baryshnikov = Dancer.new(\"Mikhail\")\u003cbr\u003e\u003cbr\u003eputs \"#{angelina.name} says: #{angelina.twirl}\"\u003cbr\u003eputs \"#{mikhail_baryshnikov.name} says: #{mikhail_baryshnikov.take_a_bow}\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, run the file by typing \u003ccode\u003eruby bin/dance_party\u003c/code\u003e and you should see the following output in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAngelina says: I'm twirling!\u003cbr\u003eMikhail says: Thank you, thank you. It was a pleasure to dance for you all.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCode Along II: Extending Module Methods as Class Methods\u003c/h2\u003e\n\n\u003cp\u003eIn order to lend a module's methods to a class as \u003cem\u003eclass methods\u003c/em\u003e, we use the \u003ccode\u003eextend\u003c/code\u003e keyword. Let's write yet another module that we can extend into our classes as class methods. For the purposes of this example, let's create a shareable class method, \u003ccode\u003emetadata\u003c/code\u003e, which will report on some pertinent (shared) information regarding both classes.\u003c/p\u003e\n\n\u003cp\u003eOpen up the \u003ccode\u003elib/class_methods_module.rb\u003c/code\u003e and define the following module and methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule MetaDancing\u003cbr\u003e\u003cbr\u003e  def metadata\u003cbr\u003e    \"This class produces objects that love to dance.\"\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's \u003ccode\u003eextend\u003c/code\u003e this module into both the \u003ccode\u003eKid\u003c/code\u003e and \u003ccode\u003eDancer\u003c/code\u003e classes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dancer\u003cbr\u003e  extend MetaDancing\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Kid\u003cbr\u003e  extend MetaDancing\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, open up the bin/extending file and familiarize yourself with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative \"../lib/kid.rb\"\u003cbr\u003erequire_relative \"../lib/dancer.rb\"\u003cbr\u003e\u003cbr\u003eputs Kid.metadata\u003cbr\u003eputs Dancer.metadata\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the file with \u003ccode\u003eruby bin/extending\u003c/code\u003e and you should see the following output in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThis class produces objects that love to dance.\u003cbr\u003eThis class produces objects that love to dance.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the tests to make sure some of your tests are passing.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Run the \u003ccode\u003elearn test\u003c/code\u003e command to pass all the local tests for this lab. We will be altering the methods where these tests will no longer be valid.\u003c/p\u003e\n\n\u003ch2\u003eCode Along III: Nested Modules\u003c/h2\u003e\n\n\u003cp\u003eIn the first code along, we built a module called \u003ccode\u003eDance\u003c/code\u003e, which contained methods that we intended to be used as instances methods in the \u003ccode\u003eDancer\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eIn the second code along, we built the module \u003ccode\u003eMetaDancing\u003c/code\u003e, whose methods were intended to be used as class methods in the \u003ccode\u003eKid\u003c/code\u003e and \u003ccode\u003eDancer\u003c/code\u003e classes.\u003c/p\u003e\n\n\u003cp\u003eThere are two drawbacks to this approach. First, if another developer looks at your modules, there is absolutely no way to determine how those methods are intended to be used. Are they class methods? Are they instance methods? Nobody knows!\u003c/p\u003e\n\n\u003cp\u003eSecondly, we had to build two separate modules that contained methods that were all related to the same functionality (dancing). But because there was no way to designate class methods versus instance methods, we were forced to define two separate modules, which violates the single responsibility principle. Wouldn't it be great if there was a way to define one module and specify which methods were intended as class methods and which methods as instance methods.\u003c/p\u003e\n\n\u003cp\u003eGuess what?? There is!! We're going to refactor the two modules into one, and use nested module namespacing to clarify our code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule FancyDance\u003cbr\u003e  module InstanceMethods\u003cbr\u003e\u003cbr\u003e    def twirl\u003cbr\u003e      \"I'm twirling!\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def jump\u003cbr\u003e      \"Look how high I'm jumping!\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def pirouette\u003cbr\u003e      \"I'm doing a pirouette\"\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def take_a_bow\u003cbr\u003e      \"Thank you, thank you. It was a pleasure to dance for you all.\"\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  module ClassMethods\u003cbr\u003e\u003cbr\u003e    def metadata\u003cbr\u003e      \"This class produces objects that love to dance.\"\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFirst, we define our \u003ccode\u003eFancyDance\u003c/code\u003e module. Then, inside the \u003ccode\u003eFancyDance\u003c/code\u003e module, we define a second module, \u003ccode\u003eInstanceMethods\u003c/code\u003e. Inside the \u003ccode\u003eInstanceMethods\u003c/code\u003e module, we place all our methods that we intend to be used as instance methods (\u003ccode\u003etwirl\u003c/code\u003e, \u003ccode\u003ejump\u003c/code\u003e, \u003ccode\u003epirouette\u003c/code\u003e, \u003ccode\u003etake_a_bow\u003c/code\u003e). Next, we define a second nested module (nested inside of \u003ccode\u003eFancyDance\u003c/code\u003e) called \u003ccode\u003eClassMethods\u003c/code\u003e. Inside, we place the \u003ccode\u003emetadata\u003c/code\u003e method, which we intend to be used as a class method.\u003c/p\u003e\n\n\u003cp\u003eSo how do we use these nested modules?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Dancer\u003cbr\u003e  extend FancyDance::ClassMethods\u003cbr\u003e  include FancyDance::InstanceMethods\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Kid\u003cbr\u003e  extend FancyDance::ClassMethods\u003cbr\u003e  include FancyDance::InstanceMethods\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote: remember to require the \u003ccode\u003efancy_dance.rb\u003c/code\u003e file inside the \u003ccode\u003edancer.rb\u003c/code\u003e and \u003ccode\u003ekid.rb\u003c/code\u003e, just like we did with our other file requirements.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eWe refer to the name-spaced modules or classes with \u003ccode\u003e::\u003c/code\u003e. This syntax references the parent and child relationship of the nested modules.\u003c/p\u003e\n\n\u003cp\u003eRemember, \u003ccode\u003einclude\u003c/code\u003e is used to add functionality to our classes via instance methods. The \u003ccode\u003eInstanceMethods\u003c/code\u003e module inside the \u003ccode\u003eFancyDance\u003c/code\u003e module contains the methods \u003ccode\u003etwirl\u003c/code\u003e, \u003ccode\u003ejump\u003c/code\u003e, \u003ccode\u003epirouette\u003c/code\u003e, and \u003ccode\u003etake_a_bow\u003c/code\u003e, which any instance of the \u003ccode\u003eDancer\u003c/code\u003e or \u003ccode\u003eKid\u003c/code\u003e class can do.\u003c/p\u003e\n\n\u003cp\u003eWe can call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eangelina = Dancer.new\u003cbr\u003eangelina.twirl\u003cbr\u003e// returns \"I'm twirling!\"\u003cbr\u003eangelina.jump\u003cbr\u003e// returns \"Look how high I'm jumping!\"\u003cbr\u003e\u003cbr\u003ebuster = Kid.new\u003cbr\u003ebuster.jump\u003cbr\u003e// returns \"Look how high I'm jumping!\"\u003cbr\u003ebuster.take_a_bow\u003cbr\u003e// returns \"Thank you, thank you. It was a pleasure to dance for you all.\"\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause we \u003cem\u003eincluded\u003c/em\u003e the \u003ccode\u003eFancyDance::InstanceMethods\u003c/code\u003e nested module, we can call those instance methods on instances of our classes.\u003c/p\u003e\n\n\u003cp\u003eAnd \u003ccode\u003eextend\u003c/code\u003e is used to add functionality to our classes via class methods. We can now call the \u003ccode\u003emetadata\u003c/code\u003e class method on the \u003ccode\u003eDancer\u003c/code\u003e and \u003ccode\u003eKid\u003c/code\u003e classes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDancer.metadata\u003cbr\u003e// returns \"This class produces objects that love to dance.\"\u003cbr\u003eKid.metadata\u003cbr\u003e// returns \"This class produces objects that love to dance.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003e\n\u003ccode\u003e::\u003c/code\u003e versus \u003ccode\u003e\u0026lt;\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eInheritance using the \u003ccode\u003e\u0026lt;\u003c/code\u003e syntax, implies that a class is a type of something. A \u003ccode\u003eBMW\u003c/code\u003e class should inherit from a \u003ccode\u003eCar\u003c/code\u003e class because a BMW is a type of car: \u003ccode\u003eclass BMW \u0026lt; Car\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut what about the \u003ccode\u003e::\u003c/code\u003e that we're using for our modules? The \u003ccode\u003e::\u003c/code\u003e syntax just denotes a name-space. Doing \u003ccode\u003eBMW::Car\u003c/code\u003e just gives the \u003ccode\u003eBMW\u003c/code\u003e class access to all constants, instance methods, etc, without stating that a BMW is a type of car. The \u003ccode\u003e::\u003c/code\u003e syntax carries all public items over to the inheriting class or module.\u003c/p\u003e\n\n\u003cp\u003eThat's it! Now that we are familiar with several methods of sharing code between classes, you're ready to move on to the next few labs.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIf you have a module whose methods you would like to be used in another class as \u003cstrong\u003einstance methods\u003c/strong\u003e, then you must \u003cstrong\u003einclude\u003c/strong\u003e the module.\u003c/p\u003e\n\n\u003cp\u003eIf you want a module's methods to be used in another class as \u003cstrong\u003eclass methods\u003c/strong\u003e, you must \u003cstrong\u003eextend\u003c/strong\u003e the module.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gbee882060f8ee61c394256165204bbad","title":"Modules Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-modules-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-modules-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRecognize \"code smells\" that indicate the need for refactoring.\u003c/li\u003e\n\u003cli\u003eUse modules to refactor away repetitious code.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we have an \u003ccode\u003eArtist\u003c/code\u003e class and a \u003ccode\u003eSong\u003c/code\u003e class. \u003ccode\u003eArtist\u003c/code\u003es have many\nsongs and an individual instance of the \u003ccode\u003eSong\u003c/code\u003e class belongs to an artist.\n\u003ccode\u003eArtist\u003c/code\u003es and \u003ccode\u003eSong\u003c/code\u003es also have some familiar class methods that keep track of\nall of the instances of the class, count those instances and clear or reset\nthem.\u003c/p\u003e\n\n\u003cp\u003eOpen up the \u003ccode\u003elib\u003c/code\u003e directory and spend some time reviewing the code in\n\u003ccode\u003eartist.rb\u003c/code\u003e and \u003ccode\u003esong.rb\u003c/code\u003e. Keep reading the code until you feel you understand\nwhat each method is doing.\u003c/p\u003e\n\n\u003cp\u003eNotice that there are behaviors that are shared between both of these classes.\nFor example, both classes have \u003ccode\u003e.count\u003c/code\u003e and \u003ccode\u003ereset_all\u003c/code\u003e class methods.\nConsequently, both classes have \u003cem\u003ethe same exact code\u003c/em\u003e. As programmers, you may\nrecall, we are lazy. We don't like to repeat ourselves. We like to keep it DRY\n(Don't Repeat Yourself). In this lab, we'll be identifying repetition and\nbuilding modules to extract it out. Then, we'll use the \u003ccode\u003eextend\u003c/code\u003e and \u003ccode\u003einclude\u003c/code\u003e\nkeywords to lend the functionality of our modules to our \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e\nclasses.\u003c/p\u003e\n\n\u003ch2\u003eConfiguring our Environment\u003c/h2\u003e\n\n\u003cp\u003eInstead of requiring individual files within one another, as you may have\nnoticed we did in the previous two code along exercises, we created an\nenvironment file to handle those requirements for us. Because the\n\u003ccode\u003eenvironment.rb\u003c/code\u003e file is read and loaded into memory in line order, if \u003ccode\u003eArtist\u003c/code\u003e\nrequires \u003ccode\u003eMemorable\u003c/code\u003e, then Artist must be required \u003cstrong\u003eafter\u003c/strong\u003e requiring\n\u003ccode\u003eMemorable\u003c/code\u003e. \u003ccode\u003eMemorable\u003c/code\u003e must be loaded first, so that as Ruby when loads\n\u003ccode\u003eArtist\u003c/code\u003e, \u003ccode\u003eMemorable::ClassInstances\u003c/code\u003e is already defined. Our \u003ccode\u003espec_helper\u003c/code\u003e\nfile, which is required by each individual spec file, required \u003cem\u003eonly this\n\u003ccode\u003econfig/environment.rb\u003c/code\u003e file\u003c/em\u003e, instead of each and every file from the \u003ccode\u003elib\u003c/code\u003e\ndirectory. As we start to build larger and more complex programs, it begins to\nmake sense to handle all of our requirements in one place.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eA Note on Refactoring Practices\u003c/h3\u003e\n\n\u003cp\u003eWe use TDD (test-driven development) for a reason. We write tests to define the\ndesired behavior of our program so that we can write clean, beautiful code.\nSuch code usually \u003cem\u003eisn't\u003c/em\u003e the code you write the first time around. The code\nyou first write is the code that makes your program \u003cem\u003ework\u003c/em\u003e, the code that gets\nthose tests passing. Then, we refactor our code to make it clean, DRY, and easy\nto understand. This is where our tests come in. We write thorough tests that\ncover all of the aspects of our code's desired behavior. We can \u003cem\u003efirst\u003c/em\u003e write\ncode that passes those tests and \u003cem\u003ethen\u003c/em\u003e break our code, fail our tests, write\nbetter code and pass our tests again.\u003c/p\u003e\n\n\u003cp\u003eThis is called the \u003cstrong\u003ered, green, refactor\u003c/strong\u003e pattern. First tests fail, then you\nwrite bad code to get them to pass, \u003cem\u003ethen\u003c/em\u003e you refactor that bad code into good\ncode. In this lab, you'll start by running the test suite. You'll see that all\nof the tests pass. Then, we'll break that code in order to refactor it, write\nbetter code and get our tests passing again. Remember, don't be afraid of\nbroken code! Broken code is the status quo in programming. Your job is often to\nbreak something to make it better. Embrace broken code.\u003c/p\u003e\n\n\u003ch3\u003eStep 1: Class Methods\u003c/h3\u003e\n\n\u003cp\u003eFirst, run the test suite. Wow, we're passing all of our tests! Okay, now let\ngo of those passing tests because we are about to break our code.\u003c/p\u003e\n\n\u003cp\u003eThe first area of refactoring we'll be attacking are the class methods. Notice\nthat both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class have \u003ccode\u003e.count\u003c/code\u003e and \u003ccode\u003ereset_all\u003c/code\u003e class\nmethods. Instead of repeating the same exact code in both classes, let's\nextract these class methods into a module that we can \u003cem\u003eextend\u003c/em\u003e into the\nclasses.\u003c/p\u003e\n\n\u003cp\u003eReady to break your code? Comment out the \u003ccode\u003ereset_all\u003c/code\u003e and \u003ccode\u003ecount\u003c/code\u003e methods in\nthe \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class. Run your test suite. Phew! Okay, we did it. That\nwasn't so bad, was it?\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003eMemorable\u003c/code\u003e Module\u003c/h4\u003e\n\n\u003cp\u003eLet's define our module. Create a \u003ccode\u003econcerns\u003c/code\u003e folder inside \u003ccode\u003elib\u003c/code\u003e. This is where\nwe'll store our modules. It is a common practice to create a folder called\n\u003ccode\u003econcerns\u003c/code\u003e that holds modules that will be used across classes in an object\noriented Ruby project.\u003c/p\u003e\n\n\u003cp\u003eInside the \u003ccode\u003econcerns\u003c/code\u003e folder, create a file called \u003ccode\u003ememorable.rb\u003c/code\u003e. Open up that\nfile and define a module:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Memorable\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInside here, define your \u003ccode\u003ereset_all\u003c/code\u003e and \u003ccode\u003ecount\u003c/code\u003e methods.\u003c/p\u003e\n\n\u003cp\u003eImportant! Remember to add \u003ccode\u003erequire_relative '../lib/concerns/memorable'\u003c/code\u003e to\nyour environment file before running any tests. We've already provided that\nline for you in fact! All you have to do is un-comment it out. :)\u003c/p\u003e\n\n\u003cp\u003eOnce you define the two class methods mentioned above inside of the \u003ccode\u003eMemorable\u003c/code\u003e\nmodule, use the \u003ccode\u003eextend\u003c/code\u003e keyword to extend those methods, as class methods,\ninto both the \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e class. Refer to the previous code along\nexercise for help. Remember that the \u003ccode\u003eself\u003c/code\u003e keyword is omitted when defining\nclass methods inside modules. The \u003ccode\u003eextend\u003c/code\u003e keyword is responsible for defining\nthe method as a class method vs. an instance method (which would use the\n\u003ccode\u003einclude\u003c/code\u003e keyword).\u003c/p\u003e\n\n\u003cp\u003eNow you're ready to run your test suite again. Get all those tests back to\npassing before you move on. Once your tests are passing, make sure you delete\nthe commented-out \u003ccode\u003ereset_all\u003c/code\u003e and \u003ccode\u003ecount\u003c/code\u003e class methods from your \u003ccode\u003eSong\u003c/code\u003e and\n\u003ccode\u003eArtist\u003c/code\u003e class. You don't need them anymore.\u003c/p\u003e\n\n\u003ch4\u003eAdvanced: The \u003ccode\u003efind_by_name\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eBefore we build the module to house this method, let's talk a bit about it. In\nan upcoming unit, we'll be introducing databases. You'll learn how to connect\nyour Ruby programs to a database and use that database to store\ninformation––even Ruby objects! Moving forward through this course, you'll be\nbuilding web applications that are connected to databases that store users'\ninformation and the information pertinent to the app. Let's think about a\ncommon example:\u003c/p\u003e\n\n\u003cp\u003eLet's say you're working on an app that serves as an online store, connecting\nusers to everything from books to movies to shoes to stereo equipment, you name\nit. We'll call this app \"Nile\" (definitely not inspired by another online\nmarket-place named after a famous river). Such an application needs to store\nthe items it has for sale as well as the information of the user who logs in to\ngo shopping. Consequently, every time a user logs in, or searches for an item,\nor purchases an item, we have to \u003cem\u003eretrieve information from a database\u003c/em\u003e. One of\nthe most common ways you'll be doing that is to use methods like \u003ccode\u003efind_by_name\u003c/code\u003e\nor \u003ccode\u003efind_by_email\u003c/code\u003e or \u003ccode\u003efind_by_product_id\u003c/code\u003e or...you get the idea. We'll be\nlearning much, much more about this later. Here, we're building a simple\n\u003ccode\u003efind_by_name\u003c/code\u003e method that introspects on a class's \u003ccode\u003e.all\u003c/code\u003e class method and\nextracts the instance of the class with a certain name.\u003c/p\u003e\n\n\u003cp\u003eOkay, back to your regularly scheduled programming:\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003eFindable\u003c/code\u003e Module\u003c/h4\u003e\n\n\u003cp\u003eIn \u003ccode\u003elib/concerns\u003c/code\u003e, create a file, \u003ccode\u003efindable.rb\u003c/code\u003e. In this file, define a module:\n\u003ccode\u003eFindable\u003c/code\u003e. This module should define the method, \u003ccode\u003efind_by_name\u003c/code\u003e. This method\nwill be used as a class method. Something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArtist.find_by_name(\"Adele\")\u003cbr\u003e#=\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExtract the code from the \u003ccode\u003efind_by_name\u003c/code\u003e methods that you'll see in the\n\u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e classes and place it inside the \u003ccode\u003eFindable\u003c/code\u003e module's\n\u003ccode\u003efind_by_name\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eRemember that we need to keep the content of this method abstract. So, inside\nthe \u003ccode\u003eArtist\u003c/code\u003e class, a \u003ccode\u003efind_by_name\u003c/code\u003e method might look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e\u003cbr\u003e  @@artists = []\u003cbr\u003e\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@artists\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.find_by_name(name)\u003cbr\u003e    @@artists.detect {|a| a.name == name}\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInside the \u003ccode\u003eFindable.find_by_name\u003c/code\u003e method, we can't use a class-specific class\nvariable like \u003ccode\u003e@@artists\u003c/code\u003e, because our method would break when included in any\nclass that \u003cem\u003edidn't\u003c/em\u003e define such a variable.\u003c/p\u003e\n\n\u003cp\u003eIs there a way to reference the collection of \u003cem\u003eall\u003c/em\u003e of the instances of a\nclass, without specifically referencing class variables that are only defined\nin certain classes?\u003c/p\u003e\n\n\u003ch3\u003eStep 2: Instance Methods\u003c/h3\u003e\n\n\u003cp\u003eLet's go back to our \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class and take a look at another\nexample of repetition, this time with instance methods. The \u003ccode\u003eto_param\u003c/code\u003e instance\nmethod is repeated in the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class. Another great candidate\nfor refactoring!\u003c/p\u003e\n\n\u003cp\u003eGo ahead and comment out the \u003ccode\u003eto_param\u003c/code\u003e method in both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e\nclass. Run your test suite again and see those broken tests!\u003c/p\u003e\n\n\u003cp\u003eOkay, now we're ready to define our module.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003eParamable\u003c/code\u003e Module\u003c/h4\u003e\n\n\u003cp\u003eCreate a new file in your \u003ccode\u003econcerns\u003c/code\u003e directory called \u003ccode\u003eparamable.rb\u003c/code\u003e. Define\nyour module here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Paramable\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBuild the \u003ccode\u003eto_param\u003c/code\u003e method inside your module and use the \u003ccode\u003einclude\u003c/code\u003e keyword to\ninclude the \u003ccode\u003eParamable\u003c/code\u003e module in both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class. Once you\nget your tests passing again, go ahead and delete the commented-out \u003ccode\u003eto_param\u003c/code\u003e\nmethod from the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e classes.\u003c/p\u003e\n\n\u003cp\u003eImportant! Remember to add \u003ccode\u003erequire_relative '../lib/concerns/paramable'\u003c/code\u003e to\nyour environment file before running any tests. We've already provided that\nline for you in fact! All you have to do is un-comment it out. :)\u003c/p\u003e\n\n\u003ch4\u003eAdvanced: The \u003ccode\u003eto_param\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eTo understand the concept of a parameter, let's take a look at an example URL:\n\u003ca href=\"http://www.facebook.com/your-name\"\u003ewww.facebook.com/your-name\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \"your-name\" part of the above URL might be referred to as a slug. Another\nterm for this section of a URL is \"parameter\" or \"param\". One common task\nyou'll undertake as a web developer is to take a Ruby object, such as an\ninstance of a \u003ccode\u003eUser\u003c/code\u003e class, and make a URL out of it. For example, let's say we\nhave a database full of instances of a \u003ccode\u003eUser\u003c/code\u003e class. When an individual user\nsigns in to our app, we might want to show them their very own profile page. To\ndo so, we would have to write a method that takes their name and turns it into\na slug or parameter that could be tacked onto a URL.\u003c/p\u003e\n\n\u003cp\u003eDon't worry too much about this use-case for now. We'll be learning much, much\nmore about connecting our Ruby programs to the web later on. For now, just\nunderstand the general purpose of having a method like the \u003ccode\u003eto_param\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch3\u003eBonus: Refactoring the \u003ccode\u003e.initialize\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003ch4\u003eRecognizing Repetition\u003c/h4\u003e\n\n\u003cp\u003eLet's take a look at the \u003ccode\u003e.initialize\u003c/code\u003e methods of both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class:\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003elib/song.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003e def initialize\u003cbr\u003e    @@songs \u0026lt;\u0026lt; self\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003elib/artist.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef initialize\u003cbr\u003e    @@artists \u0026lt;\u0026lt; self\u003cbr\u003e    @songs = []\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee the repetition? Both methods push the instance on which they are being\ncalled, i.e. \u003ccode\u003eself\u003c/code\u003e into an array stored inside a class variable.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003esong.rb\u003c/code\u003e we have:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e@@songs \u0026lt;\u0026lt; self\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003eartist.rb\u003c/code\u003e we have:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e@@artists \u0026lt;\u0026lt; self\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis is pretty similar, although not exactly the same. However, it is\nrepetitious enough to be giving off a code smell. In order to refactor it,\nhowever, we first have to get rid of any code that is specific to the class. In\nthis case, we need to abstract away the literal reference to the \u003ccode\u003e@@songs\u003c/code\u003e and\n\u003ccode\u003e@@artists\u003c/code\u003e class variables.\u003c/p\u003e\n\n\u003ch4\u003eAbstracting Away Repetition\u003c/h4\u003e\n\n\u003cp\u003eLucky for us, we already have class methods that wrap these class variables:\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003elib/song.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003e def self.all\u003cbr\u003e    @@songs\u003cbr\u003e end\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003elib/artist.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef self.all\u003cbr\u003e    @@artists\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's begin by refactoring the content of both \u003ccode\u003e.initialize\u003c/code\u003e methods to use the\n\u003ccode\u003e\u0026lt;ClassName\u0026gt;.all\u003c/code\u003e class method instead of literal class variables. How can we\nprogrammatically access the class of the instance that we are operating on\ninside the \u003ccode\u003e.initialize\u003c/code\u003e method? Take a look below:\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003elib/song.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef initialize\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003elib/artist.rb\u003c/code\u003e\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003edef initialize\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e    @songs = []\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember that \u003ccode\u003e.initialize\u003c/code\u003e is an instance method. So, inside \u003ccode\u003e.initialize\u003c/code\u003e,\n\u003ccode\u003eself\u003c/code\u003e refers to the instance of the class on which you are operating. But\n\u003ccode\u003e.all\u003c/code\u003e is a class method. We would normally call it like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eArtist.all\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eor\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eSong.all\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eSo, to call the \u003ccode\u003e.all\u003c/code\u003e class method from \u003cem\u003einside the \u003ccode\u003e.initialize\u003c/code\u003e instance\nmethod\u003c/em\u003e, we can call \u003ccode\u003eself.class\u003c/code\u003e inside \u003ccode\u003e.initialize\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTake a quick look at this reminder of how \u003ccode\u003e.class\u003c/code\u003e works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew_song = Song.new\u003cbr\u003enew_song.class\u003cbr\u003e =\u0026gt; Song\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, we can call \u003ccode\u003eself.class.all\u003c/code\u003e inside \u003ccode\u003e.initialize\u003c/code\u003e and it will be just as if\nwe called \u003ccode\u003eSong.all\u003c/code\u003e or \u003ccode\u003eArtist.all\u003c/code\u003e. Only this way, our code is abstract. It\ndoesn't explicitly reference \u003ccode\u003eSong\u003c/code\u003e or \u003ccode\u003eArtist\u003c/code\u003e class, so it is more flexible.\u003c/p\u003e\n\n\u003cp\u003eNow we have two \u003ccode\u003e.initialize\u003c/code\u003e methods that contain identical lines of code.\nWe're ready for the next refactoring step––modules.\u003c/p\u003e\n\n\u003ch4\u003eExtracting Repetition\u003c/h4\u003e\n\n\u003cp\u003eBefore we build a brand new module to house this code from our \u003ccode\u003e.initialize\u003c/code\u003e\nmethods, let's stop and think. What is the responsibility or the behavior of\nthe code we are trying to extract? This is code that is responsible for telling\na class to keep track of its own instances. This code really goes hand in hand\nwith the \u003ccode\u003e.count\u003c/code\u003e and \u003ccode\u003e.reset_all\u003c/code\u003e class methods that we already extracted into\nthe \u003ccode\u003eMemorable\u003c/code\u003e module. It makes sense, therefore, to extract this code into\nthat same module.\u003c/p\u003e\n\n\u003cp\u003eBut wait (you might be thinking), isn't that module \u003cstrong\u003eextended\u003c/strong\u003e into our\n\u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class in order to offer its methods as \u003cstrong\u003eclass\u003c/strong\u003e methods?\nIsn't \u003ccode\u003e.initialize\u003c/code\u003e an instance method? How can we put class methods and\ninstance methods in the same module? Read on to learn the answer...\u003c/p\u003e\n\n\u003ch4\u003eNesting Modules\u003c/h4\u003e\n\n\u003cp\u003eWe can nest sets of modules within one another and then \u003ccode\u003einclude\u003c/code\u003e or \u003ccode\u003eextend\u003c/code\u003e\nindividual modules as needed. Let's take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Memorable\u003cbr\u003e  module ClassMethods\u003cbr\u003e    def reset_all\u003cbr\u003e      self.all.clear\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def count\u003cbr\u003e      self.all.count\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  module InstanceMethods\u003cbr\u003e    def initialize\u003cbr\u003e      # some more code coming soon!\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, in order to \u003ccode\u003einclude\u003c/code\u003e or \u003ccode\u003eextend\u003c/code\u003e as needed, we use the \u003ccode\u003einclude\u003c/code\u003e or\n\u003ccode\u003eextend\u003c/code\u003e keyword in the following manner:\u003c/p\u003e\n\n\u003cp\u003eIn both the \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e classes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eextend Memorable::ClassMethods\u003cbr\u003einclude Memorable::InstanceMethods\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eParent::Child\u003c/code\u003e syntax is called \u003cstrong\u003enamespacing\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eOkay, we're almost done. We need to fill out the content of the \u003ccode\u003e.initialize\u003c/code\u003e\nmethod in the module.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.initialize\u003c/code\u003e methods in our \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e classes share the\nfollowing line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef initialize\u003cbr\u003e  self.class.all \u0026lt;\u0026lt; self\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the code that will go into the new \u003ccode\u003e.initialize\u003c/code\u003e method of our module:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodule Memorable\u003cbr\u003e  module ClassMethods\u003cbr\u003e    def reset_all\u003cbr\u003e      self.all.clear\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    def count\u003cbr\u003e      self.all.count\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  module InstanceMethods\u003cbr\u003e    def initialize\u003cbr\u003e      self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere's just one more step. Look back at the original \u003ccode\u003e.initialize\u003c/code\u003e method of the \u003ccode\u003eArtist\u003c/code\u003e class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    self.class.all \u0026lt;\u0026lt; self\u003cbr\u003e    @songs = []\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the \u003ccode\u003eArtist\u003c/code\u003e class, the initialize method is \u003cem\u003ealso\u003c/em\u003e responsible for setting\nthe \u003ccode\u003e@songs\u003c/code\u003e instance variable equal to an empty array. We need to hang on to\nthis behavior, even as \u003ccode\u003eArtist\u003c/code\u003e instances grab the \u003cem\u003erest\u003c/em\u003e of the \u003ccode\u003e.initialize\u003c/code\u003e\nfrom the \u003ccode\u003eMemorable::InstanceMethods\u003c/code\u003e module.\u003c/p\u003e\n\n\u003cp\u003eRemember our \u003ccode\u003esuper\u003c/code\u003e keyword from the inheritance code along exercise? The\n\u003ccode\u003esuper\u003c/code\u003e keyword, placed inside a method, will tell that method to look up its\nbehavior in the method of the same name that lives in the parent, or super,\nclass. A method that includes the \u003ccode\u003esuper\u003c/code\u003e keyword will execute any code placed\ninside the super class' method of the same name, and then execute any code\ninside the child class' method.\u003c/p\u003e\n\n\u003cp\u003eWhen we \u003ccode\u003einclude\u003c/code\u003e a module in a class, we are really telling that class to\n\u003cem\u003einherit\u003c/em\u003e methods from that module.\u003c/p\u003e\n\n\u003cp\u003eSo, we can use the \u003ccode\u003esuper\u003c/code\u003e keyword to tell our \u003ccode\u003eArtist\u003c/code\u003e's \u003ccode\u003e.initialize\u003c/code\u003e method\nto use the code in the \u003ccode\u003eMemorable::InstanceMethods\u003c/code\u003e module's \u003ccode\u003e.initialize\u003c/code\u003e\nmethod \u003cem\u003eand\u003c/em\u003e also to use any additional code in the \u003ccode\u003eArtist\u003c/code\u003e's \u003ccode\u003e.initialize\u003c/code\u003e\nmethod. Take a look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Artist\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    super\u003cbr\u003e    @songs = []\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003ePhew! That was some complex stuff. It's okay if you didn't understand\neverything covered in this lab. There were a few advanced and bonus sections\nthat we threw in there to challenge you and make you think. Don't skip over\nthem, even if you can't follow everything they discuss. It's important to plant\nthe seed of some of these more complex topics––it will make them easier to\nunderstand later on when you're ready to go deeper into Ruby programming.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"geae18a35d20ac62e2fa8a83b27867f2e","title":"Nested Arrays","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-lab-1\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-lab-1/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-lab-1\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-lab-1/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRecognize vocabulary term: \"array of array\" or (\"AoA\")\u003c/li\u003e\n\u003cli\u003eRecognize that \"arrays of arrays\" are grids or coordinate systems\u003c/li\u003e\n\u003cli\u003eCreate a nested \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRead scalar data from an array of arrays\u003c/li\u003e\n\u003cli\u003eModify scalar data in an array of arrays\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003ch3\u003eKey Image: Coordinate Grid\u003c/h3\u003e\n\n\u003cp\u003eTo help you when reading the rest of this lesson, keep in mind that an Array of\nArrays (or a matrix) is well expressed by a \u003cstrong\u003e\u003cem\u003egrid\u003c/em\u003e\u003c/strong\u003e. Here are some examples\nto get your mind ready.\u003c/p\u003e\n\n\u003cp\u003eThink about those vending machines where you select the item you want by finding\nits coordinates and entering them in on a keypad.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/vending_grid.png\" alt=\"Grid-based vending machine\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThink about chess boards where each square has a row and column coordinate\naccording to Stamma's algebraic notation for chess:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/chess_grid.png\" alt=\"Chessboard with Stamma's Notation\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThink about latitude and longitude uniquely identifying a place on a map.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/nyc_latlong_sm.png\" alt=\"Map + LatLong\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003ePhoto credit: Mike C. Valdivia on Unsplash\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3\u003eFrom Array to Array of Array\u003c/h3\u003e\n\n\u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is like a list but in code form. It is a way for your program to\nstore pieces of data as elements in a collection. Arrays can contain any\ncombination of data types -- \u003ccode\u003eBoolean\u003c/code\u003es, \u003ccode\u003eInteger\u003c/code\u003es, \u003ccode\u003eStrings\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's imagine an \u003ccode\u003eArray\u003c/code\u003e as a \u003cstrong\u003esingle\u003c/strong\u003e long shelf with books on it. The shelf\nis like the \u003ccode\u003eArray\u003c/code\u003e and each book is an element of it.  We can refer to books by\nsaying things like the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eHouse of Leaves\u003c/em\u003e is the \u003cstrong\u003ethird\u003c/strong\u003e book from the \u003cstrong\u003eleft-most edge\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eThe best Latin grammar book is the \u003cstrong\u003esecond\u003c/strong\u003e book from the \u003cstrong\u003eleft-most edge\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003ezeroth\u003c/strong\u003e book from the \u003cstrong\u003eleft-most edge\u003c/strong\u003e (i.e. the first book) is Hegel's \u003cem\u003ePhenomenology\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut what if we had \u003cem\u003emultiple\u003c/em\u003e bookshelves that we stacked on top of each other?\nIt would look a bit more like our \"key image,\" the grid. We call a piece of\nfurniture that holds books in a grid-like arrangement a \"bookcase.\"\u003c/p\u003e\n\n\u003cp\u003eTo refer to a book, we provide \u003cstrong\u003e\u003cem\u003etwo pieces of information\u003c/em\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWhich shelf from the bottom\u003c/li\u003e\n\u003cli\u003eWhat distance from the left\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThus we'd say:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eKafka on the Shore\u003c/em\u003e is:\n\n\u003col\u003e\n\u003cli\u003eOn the shelf that's 3rd from the bottom of the bookcase and\u003c/li\u003e\n\u003cli\u003eis second from the left-most edge.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd the books from our previous single shelf would need more data provided. Imagining a bookshelf where the bottom shelf is in the zeroth position.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eHouse of Leaves\u003c/em\u003e is on the zeroth shelf from the bottom, the \u003cstrong\u003ethird\u003c/strong\u003e book\nfrom the left-most edge\u003c/li\u003e\n\u003cli\u003eThe best Latin grammar book is on the zeroth shelf from the bottom, the\n\u003cstrong\u003esecond\u003c/strong\u003e book from the left-most edge\u003c/li\u003e\n\u003cli\u003eOn the zeroth shelf from the bottom at the \u003cstrong\u003ezeroth\u003c/strong\u003e book from the left-most\nedge (i.e. the first book) you will find Hegel's \u003cem\u003ePhenomenology\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDraw it out for yourself if you're unsure, but this matches our key image: a\n\u003cstrong\u003e\u003cem\u003egrid\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere's how an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es creates a grid:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-5/nested-arrays-lab/nested_array.png\" alt=\"AoA to Grid\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRecognize Vocabulary Term: \"Array of Array\"\u003c/h2\u003e\n\n\u003cp\u003eNested Arrays have been an important tool for thinking about data for a long\ntime. In fact, this idea is older than computers and is at least as old as the\nPharaonic Egypt. As such, there are lots of words that mean \"Array of Arrays.\"\nHere's a quick reference. You don't need to memorize these, but if you're trying\nto model a problem as a programmer, you might see someone use these words.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003e2-D\u003c/strong\u003e array: \"Two dimensional Array:\" another word for a nested array\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eMultidimensional Array\u003c/strong\u003e: 3-D arrays are also possible (\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003e\nof \u003ccode\u003eArray\u003c/code\u003e). This results in the category known as \"Multidimensional\nArrays\"\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eAoA\u003c/strong\u003e: \u003cstrong\u003eA\u003c/strong\u003erray \u003cstrong\u003eo\u003c/strong\u003ef \u003cstrong\u003eA\u003c/strong\u003erray: another word for an nested array\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ecell\u003c/strong\u003e or \u003cstrong\u003ecel\u003c/strong\u003e: the coordinate element inside of an \u003ccode\u003eArray\u003c/code\u003e that itself\nis inside another \u003ccode\u003eArray\u003c/code\u003e; alternatively, it's what's in the \u003cstrong\u003egrid\u003c/strong\u003e at the\nintersection of two coordinates\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003egrid\u003c/strong\u003e: Another word for \"array of arrays\"; the key image of an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003einner \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e: Since we're making \u003ccode\u003eArray\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es the \u003ccode\u003eArray\u003c/code\u003es\ncontained by the outer-most \u003ccode\u003eArray\u003c/code\u003e can be called \"inner arrays\"\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eouter \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e: See \"inner \u003ccode\u003eArray\u003c/code\u003e\"\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ematrix\u003c/strong\u003e: Yet another word for an Array of Arrays\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\u003ccode\u003eX\u003c/code\u003e by \u003ccode\u003eY\u003c/code\u003e array\u003c/strong\u003e: An array that contains \u003ccode\u003eY\u003c/code\u003e-many many rows with \u003ccode\u003eX\u003c/code\u003e-many\nelements in it. It defines the size of a matrix's maximum space (or, \"area\")\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eRecognize that \"Arrays of Arrays\" Are Grids or Coordinate Systems\u003c/h2\u003e\n\n\u003cp\u003eYou might have noticed from our bookcase example, that finding a book in a\ntwo-dimensional \u003ccode\u003eArray\u003c/code\u003e required us to pass two integers or coordinates.\u003c/p\u003e\n\n\u003cp\u003eAnywhere where humans might see a grid (latitude/longitude as coordinates on a\nmap, the Cartesian coordinate system for graphing, \u003ccode\u003eB9\u003c/code\u003e as the coordinate of a\nsnack in a vending machine), it's very likely the grid would be stored in a\ncomputer in a 2-D matrix.\u003c/p\u003e\n\n\u003cp\u003eApplications of nested \u003ccode\u003eArrays\u003c/code\u003e are many:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eKeeping track of the kids' names on the \"hand-hold ropes\" at a museum (5 kids\nper rope, 5 ropes per class, maximum 25 kids per field trip)\u003c/li\u003e\n\u003cli\u003eThe latest fantasy video game (The dungeon is a 10 by 10 matrix of rooms. When\nthe player activates, load the character in room (2, 3) where\n\u003ccode\u003edungeon_map[2][3]\u003c/code\u003e points to the \u003ccode\u003eString\u003c/code\u003e: \u003ccode\u003e\"The Throne Room\"\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eTetris-like games and its children (When the block rests, visit each row and\ncount whether every element in the row is status \"filled.\" If all cells are\nfilled, remove the row)\u003c/li\u003e\n\u003cli\u003eArt. Filling in colors in a simple matrix is how \"sprite\" art is created. The\nbeloved original Nintendo Mario or the hero Link from \"Legend of Zelda\" were\nboth simple colored cells within a matrix\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreate a Nested \u003ccode\u003eArray\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eLet's make a spice rack (a bookcase, but for spices):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Simple 1-D arrays\u003cbr\u003eshelf_1 = [\"Mace\", \"Ginger\", \"Marjoram\"]\u003cbr\u003eshelf_2 = [\"Paprika\", \"Fajita Mix\", \"Coriander\"]\u003cbr\u003eshelf_3 = [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e\u003cbr\u003espice_rack = [\u003cbr\u003e  shelf_1,\u003cbr\u003e  shelf_2,\u003cbr\u003e  shelf_3,\u003cbr\u003e] # =\u0026gt; [[\"Mace\", \"Ginger\", \"Marjoram\"], [\"Paprika\", \"Fajita Mix\", \"Coriander\"], [\"Parsley\", \"Sage\", \"Rosemary\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we don't need to use \u003ccode\u003eshelf_1\u003c/code\u003e, \u003ccode\u003eshelf_2\u003c/code\u003e, \u003ccode\u003eshelf_3\u003c/code\u003e, then we don't need to\nassign them before nesting them in \u003ccode\u003espice_rack\u003c/code\u003e.  We can write a nested \u003ccode\u003eArray\u003c/code\u003e\nusing \u003ccode\u003eArray\u003c/code\u003e literal formatting:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# 2-D Array all in one go\u003cbr\u003espice_rack = [[\"Mace\", \"Ginger\", \"Marjoram\"], [\"Paprika\", \"Fajita Mix\", \"Coriander\"], [\"Parsley\", \"Sage\", \"Rosemary\"]]\u003cbr\u003e\u003cbr\u003e# Same as above, but using whitespace to make it easier for humans to read\u003cbr\u003e\u003cbr\u003espice_rack_pretty = [\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marjoram\"],\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince Ruby doesn't care about whitespace, so we'd advise you to write a 2-D\n\u003ccode\u003eArray\u003c/code\u003e like \u003ccode\u003espice_rack_pretty\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eRead Scalar Data From a Nested Array\u003c/h2\u003e\n\n\u003cp\u003eOne of the defining features of 2-D \u003ccode\u003eArray\u003c/code\u003es is that we use coordinates to\ntarget unique elements in a \u003cstrong\u003e\u003cem\u003egrid\u003c/em\u003e\u003c/strong\u003e. To read an element from a nested\n\u003ccode\u003eArray\u003c/code\u003e, simply provide the coordinates.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e    # 0        1          2\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marjoram\"],             # 0\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],    # 1\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]            # 2\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003espice_rack[0] #=\u0026gt;  [\"Mace\", \"Ginger\", \"Marjoram\"]\u003cbr\u003espice_rack[0][1] #=\u0026gt; \"Ginger\"\u003cbr\u003espice_rack[1][1] #=\u0026gt; \"Fajita Mix\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first set of brackets refers to the row of the nested Array.  The second set\nof brackets refer to the element within that row.\u003c/p\u003e\n\n\u003ch2\u003eModify Scalar Data In an Array of Arrays\u003c/h2\u003e\n\n\u003cp\u003eThe same technique of using coordinates applies both to reading and\nmodification. If you can \"target\" an element you can read it or update it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espice_rack = [\u003cbr\u003e    # 0        1          2\u003cbr\u003e  [\"Mace\", \"Ginger\", \"Marjoram\"],             # 0\u003cbr\u003e  [\"Paprika\", \"Fajita Mix\", \"Coriander\"],    # 1\u003cbr\u003e  [\"Parsley\", \"Sage\", \"Rosemary\"]            # 2\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003espice_rack[1][1] #=\u0026gt; \"Fajita Mix\" (it's not really a spice)\u003cbr\u003espice_rack[1][1] = \"Cumin\" #=\u0026gt; \"Cumin\"\u003cbr\u003espice_rack[1][1] #=\u0026gt; \"Cumin\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eLab\u003c/h2\u003e\n\n\u003cp\u003eTime to apply our knowledgeo of the \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es nested data structure.\u003c/p\u003e\n\n\u003cp\u003eTake a look at \u003ccode\u003elib/nested_array.rb\u003c/code\u003e and complete the provided methods. Your\ntask is to nest two arrays within another array, as well as to access and\nchange information in those arrays.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations, you've learned to use your first nested data structure: the\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es (or \"matrix,\" or \"coordinate grid\"). You've seen that you\ncan build them by building \u003ccode\u003eArray\u003c/code\u003es filled with variables that point to other\n\u003ccode\u003eArray\u003c/code\u003es, or that you can use \u003ccode\u003eArray\u003c/code\u003e literal notation to build them out. You've\nseen that you can use coordinates to look up elements in the matrix as well as\nupdate those elements. In the lab associated with this material, you'll have a\nchance to make sure you've understood the basics.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g486fe338d877e0a4e62e1f73e2fca637","title":"Nested Hashes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-nested-hashes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-nested-hashes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAccess data from a nested hash\u003c/li\u003e\n\u003cli\u003eAdd data to and change data within a nested hash\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow that we've seen some examples of nested hashes, the next step is to get more\ncomfortable with using them. In this lab, we're going to practice accessing and\nupdating data within a nested hash and review what we've covered so far.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be filling out the content of a series of methods that we've\ndefined for you. All of the methods expect you to operate on the\n\u003ccode\u003eprogrammer_hash\u003c/code\u003e object, which is already defined and included in the body of\neach method.\u003c/p\u003e\n\n\u003cp\u003eUse the comments in \u003ccode\u003enested.rb\u003c/code\u003e and test suite to guide you. Each test is\ndesigned to tell you how to pass it.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that you are expected to get these tests to pass by adding or\nchanging information in the hash \u003cem\u003eprogrammatically\u003c/em\u003e. In other words, if you're\nasked to, for example, change the value of a specific hash key, \u003cem\u003edon't just\nre-write the hash with the new value!\u003c/em\u003e Use the methods we've learned and\npracticed in previous lessons.\u003c/p\u003e\n\n\u003cp\u003eTo quickly review, here is an example of adding data to a hash\nprogrammatically:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# good example\u003cbr\u003e\u003cbr\u003emy_hash = {first: \"I'm first!\", second: \"I'm second!\"}\u003cbr\u003emy_hash[:third] = \"I'm third!\"\u003cbr\u003e\u003cbr\u003eputs my_hash\u003cbr\u003e# \u0026gt; {first: \"I'm first!\", second: \"I'm second!\", third: \"I'm third!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eChanging a hash by simply re-defining it is not the goal of this lab:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# bad example\u003cbr\u003e\u003cbr\u003emy_hash = {first: \"I'm first!\", second: \"I'm second!\"}\u003cbr\u003emy_hash = {first: \"I'm first!\", second: \"I'm second!\", third: \"I'm third!\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e In some of these methods, you will need to alter \u003ccode\u003eprogrammer_hash\u003c/code\u003e,\nthen make sure to \u003cem\u003ereturn\u003c/em\u003e the entire hash, not just the altered value.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ehopper\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should return the value of the \u003ccode\u003e:grace_hopper\u003c/code\u003e key inside\n\u003ccode\u003eprogrammer_hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ealan_kay_is_known_for\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should return what Alan Kay is known for.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003edennis_ritchies_language\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should return the language that Dennis Ritchie is known for.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The \u003ccode\u003e:languages\u003c/code\u003e keys inside \u003ccode\u003eprogrammer_hash\u003c/code\u003e each store an array. In\nthis case, the test is looking for the value stored in that array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eadding_matz\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should return a modified \u003ccode\u003eprogrammer_hash\u003c/code\u003e to honor Matz, the\ncreator of Ruby. Update the hash so that:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethere is a \u003ccode\u003e:yukihiro_matsumoto\u003c/code\u003e key alongside \u003ccode\u003e:grace_hopper\u003c/code\u003e, \u003ccode\u003e:alan_kay\u003c/code\u003e,\nand \u003ccode\u003e:dennis_ritchie\u003c/code\u003e set to a hash\u003c/li\u003e\n\u003cli\u003ethis nested hash contains \u003ccode\u003e:known_for\u003c/code\u003e and  \u003ccode\u003e:languages\u003c/code\u003e keys like the others\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMatz is known for \u003ccode\u003e\"Ruby\"\u003c/code\u003e, but his languages should be \u003ccode\u003e\"LISP\"\u003c/code\u003e and \u003ccode\u003e\"C\"\u003c/code\u003e.\nReturn the entire updated hash.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003echanging_alan\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should update what Alan Kay is known for to \u003ccode\u003e\"GUI\"\u003c/code\u003e and return the\nupdated \u003ccode\u003eprogrammer_hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eadding_to_dennis\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis method should add \u003ccode\u003e\"Assembly\"\u003c/code\u003e to Dennis Ritchie's languages array and\nreturn the updated \u003ccode\u003eprogrammer_hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAdding and updating data in a nested hash is just like adding and updating an\nordinary hash. If we know the structure, it is just a matter of using the right\ncombination of keys.\u003c/p\u003e\n\n\u003cp\u003eAs we see examples of more complex data structures, we'll start to encounter\nsituations where we aren't 100% of the structure of a hash. This is one reason\nwhy getting familiar with programmatically changing hash data is critical - we\nwon't always be able to \u003cem\u003esee\u003c/em\u003e the hash we're changing. Instead, we'll have to\nwrite logic that and correctly handles accessing and updating hash data in a\nmore abstracted way.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g2efc6da50d7a094e362bcd7dce5a6599","title":"Object Attributes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-object-attributes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-attributes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine ruby classes.\u003c/li\u003e\n\u003cli\u003eDefine methods that read from and write to instance variables.\u003c/li\u003e\n\u003cli\u003eCreate object properties using methods and instance variables.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThis lab is all about using instance variables within a class to create methods that represent attributes or properties of an object.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eGet started with this lab by clicking the \"Fork\" button, cloning, and running \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003eDog\u003c/code\u003e and \u003ccode\u003elib/dog.rb\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003ch3\u003eGive a Dog a Name\u003c/h3\u003e\n\n\u003cp\u003eYou'll be teaching \u003ccode\u003eDog\u003c/code\u003e about their names through two methods, \u003ccode\u003e#name\u003c/code\u003e, and \u003ccode\u003e#name=\u003c/code\u003e that read and write to a corresponding instance variable \u003ccode\u003e@name\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eGive a Dog a Breed\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-fundamentals/object-attributes-lab/Image_142_CommonDogBreeds.png\" alt=\"Dog Breeds\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou'll be teaching \u003ccode\u003eDog\u003c/code\u003e about their breed through two methods, \u003ccode\u003e#breed\u003c/code\u003e, and \u003ccode\u003e#breed=\u003c/code\u003e that read and write to a corresponding instance variable \u003ccode\u003e@breed\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\n\u003ccode\u003ePerson\u003c/code\u003e and \u003ccode\u003elib/person.rb\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003ch3\u003eGive a Person a Name\u003c/h3\u003e\n\n\u003cp\u003eYou'll be teaching \u003ccode\u003ePerson\u003c/code\u003e about their names through two methods, \u003ccode\u003e#name\u003c/code\u003e, and \u003ccode\u003e#name=\u003c/code\u003e that read and write to a corresponding instance variable \u003ccode\u003e@name\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eGive a Person a Job\u003c/h3\u003e\n\n\u003cp\u003eYou'll be teaching \u003ccode\u003ePerson\u003c/code\u003e about their jobs through two methods, \u003ccode\u003e#job\u003c/code\u003e, and \u003ccode\u003e#job=\u003c/code\u003e that read and write to a corresponding instance variable \u003ccode\u003e@job\u003c/code\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g909af181218dd41a55dcdf158bd1c4b6","title":"Object Inheritance Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-inheritance-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-inheritance-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-inheritance-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-inheritance-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine classes that inherit from a shared parent, or super, class. \u003c/li\u003e\n\u003cli\u003eDefine methods unique to those classes. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be working with a school domain model. Our application has users that are either teachers or students. Teachers and students will share certain attributes and have certain behaviors that are unique to them. You'll be defining a \u003ccode\u003eUser\u003c/code\u003e class that both students and teachers inherit from and you'll be writing methods within both the \u003ccode\u003eTeacher\u003c/code\u003e and \u003ccode\u003eStudent\u003c/code\u003e class that are unique to that class. \u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eRun the test suite to get started. This is a test-driven lab. \u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine the \u003ccode\u003eUser\u003c/code\u003e class such that a user can have a first and last name. You'll need both a setter and a getter for first and last name. \u003c/li\u003e\n\u003cli\u003eWe've given you a barebones \u003ccode\u003eTeacher\u003c/code\u003e class in \u003ccode\u003elib/teacher.rb\u003c/code\u003e. Change the class definition so that the \u003ccode\u003eTeacher\u003c/code\u003e class inherits from the \u003ccode\u003eUser\u003c/code\u003e class. Run the test suite and notice that you are passing some tests for the \u003ccode\u003eTeacher\u003c/code\u003e class, even without writing any code inside that class. That is because it will inherit the \u003ccode\u003e#first_name\u003c/code\u003e and \u003ccode\u003e#last_name\u003c/code\u003e methods from the \u003ccode\u003eUser\u003c/code\u003e class you told it to inherit from. \u003c/li\u003e\n\u003cli\u003eWe've given you a class constant \u003ccode\u003eKNOWLEDGE\u003c/code\u003e, that points to an array of knowledge strings. Write a method, \u003ccode\u003e#teach\u003c/code\u003e that returns a random element from that array. You might want to look up the \u003ccode\u003eArray#sample\u003c/code\u003e method. \u003c/li\u003e\n\u003cli\u003eWe've given you a barebones \u003ccode\u003eStudent\u003c/code\u003e class. Change the class definition so that it inherits from the \u003ccode\u003eUser\u003c/code\u003e class. Run the test suite and notice that you are passing some tests for the \u003ccode\u003eStudent\u003c/code\u003e class, even without writing any code inside that class. That is because it will inherit the \u003ccode\u003e#first_name\u003c/code\u003e and \u003ccode\u003e#last_name\u003c/code\u003e methods from the \u003ccode\u003eUser\u003c/code\u003e class you told it to inherit from. \u003c/li\u003e\n\u003cli\u003eIndividual students should initialize with an instance variable, \u003ccode\u003e@knowledge\u003c/code\u003e, that points to an empty array. \u003c/li\u003e\n\u003cli\u003eDefine a method, \u003ccode\u003e#learn\u003c/code\u003e, that takes in a string and adds that string to the student's \u003ccode\u003e@knowledge\u003c/code\u003e array. \u003c/li\u003e\n\u003cli\u003eDefine a method, \u003ccode\u003e#knowledge\u003c/code\u003e, that returns that student's knowledge array. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eBonus\u003c/h3\u003e\n\n\u003cp\u003eWe've set up an executable file for you in \u003ccode\u003ebin/time_for_school\u003c/code\u003e. Check out the code there and run the file with \u003ccode\u003eruby bin/time_for_school\u003c/code\u003e in your terminal. Get a feel for how the code we wrote works and what methods are available to our student and teacher instances thanks to inheritance. \u003c/p\u003e\n\n\u003cp\u003ePlay around with it a bit more by trying out the following in this file:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWe have a new user, Jim, who is just here to audit a few classes. He is neither a teacher nor a student. Create a local variable, \u003ccode\u003ejim\u003c/code\u003e, and point it equal to an instance of the \u003ccode\u003eUser\u003c/code\u003e class. Then, give \u003ccode\u003ejim\u003c/code\u003e a first and last name. What happens when you try to call \u003ccode\u003e#learn\u003c/code\u003e on \u003ccode\u003ejim\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003eContinue to operate on our student, \u003ccode\u003esteve\u003c/code\u003e. Have \u003ccode\u003eavi\u003c/code\u003e teach him some more important knowledge. \u003c/li\u003e\n\u003cli\u003eCreate a new student and have that student learn a few things from \u003ccode\u003eavi\u003c/code\u003e as well. \u003c/li\u003e\n\u003cli\u003eThen, \u003ccode\u003eputs\u003c/code\u003e out the existing knowledge of each student. \u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gf0d310355ccc5e44aae6f6d2b3083863","title":"Object Initialization Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-fundamentals-object-initialization-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-fundamentals-object-initialization-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine a class with a custom initialize routine.\u003c/li\u003e\n\u003cli\u003eSet instance variable attributes from initialize.\u003c/li\u003e\n\u003cli\u003eInclude a default argument for an initialize argument.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eYou're going to be building a \u003ccode\u003ePerson\u003c/code\u003e class that accepts a person's name when a\nperson is initialized. You're also going to be building a \u003ccode\u003eDog\u003c/code\u003e class that\naccepts a dog's name and breed on initialization. If no value for the dog's\nbreed is provided, it should default to \u003ccode\u003e\"Mutt\"\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eOpen this lab by clicking the \"Fork\" button, cloning, and running the tests with \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003e1. \u003ccode\u003ePerson#initialize\u003c/code\u003e with a Name\u003c/h4\u003e\n\n\u003cp\u003eDefine a \u003ccode\u003ePerson\u003c/code\u003e class in \u003ccode\u003elib/person.rb\u003c/code\u003e that provides an \u003ccode\u003e#initialize\u003c/code\u003e method\nthat accepts an argument for the person's name. That argument should be stored\nwithin a \u003ccode\u003e@name\u003c/code\u003e instance variable.\u003c/p\u003e\n\n\u003ch4\u003e2. \u003ccode\u003eDog#initialize\u003c/code\u003e with Name and Breed defaulting to \"Mutt\"\u003c/h4\u003e\n\n\u003cp\u003eDefine a \u003ccode\u003eDog\u003c/code\u003e class in \u003ccode\u003elib/dog.rb\u003c/code\u003e that provides an \u003ccode\u003e#initialize\u003c/code\u003e method that\naccepts an argument for the dog's name. That argument should be stored within a\n\u003ccode\u003e@name\u003c/code\u003e instance variable.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, \u003ccode\u003eDog#initialize\u003c/code\u003e should accept a second optional argument for the\ndog's breed stored in an instance variable \u003ccode\u003e@breed\u003c/code\u003e. When none is provided, it\nshould default to \"Mutt\".\u003c/p\u003e\n\n\u003cp\u003eSubmit your solution with \u003ccode\u003elearn submit\u003c/code\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga9a26115f7a651524aa9c38cb0eb6847","title":"Object Relationships - Belongs to Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-belongs-to-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-belongs-to-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-belongs-to-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-belongs-to-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite classes that are related via the \"belongs to\" relationship. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be coding a \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e class. A song should belong to an artist. You'll also be coding a \u003ccode\u003ePost\u003c/code\u003e and \u003ccode\u003eAuthor\u003c/code\u003e class. A post should belong to an author. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eArtists should have a name. \u003c/li\u003e\n\u003cli\u003eSongs should have a title and belong to an artist. A song should be able to tell you the name of its artist:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003esong.artist.name\u003cbr\u003e  # =\u0026gt; \"Beyonce\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003ePosts should have a title and belong to an author. A post should be able to tell you the name of its author:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003epost.author.name\u003cbr\u003e  # =\u0026gt; \"Hillary\"\n\u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g013768c213b500c87df7786ed9f174ae","title":"Object Relationships - Has Many Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-has-many-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild out the has many/belongs to relationship between two classes.\u003c/li\u003e\n\u003cli\u003eBuild methods that use the has many/belongs to relationship between two classes.\u003c/li\u003e\n\u003cli\u003eUse a class variable to track data about a class.\u003c/li\u003e\n\u003cli\u003eBuild a class method to expose data stored in a class variable.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be dealing with two sets of classes: the \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e\nclasses and the \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e classes. We'll start with \u003ccode\u003eArtist\u003c/code\u003e and\n\u003ccode\u003eSong\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAn artist should have many songs and a song should belong to an artist:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many-lab/Image_139_CodeObjectsRelations%28B%29.png\" alt=\"Artist and Song\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBecause of the has many/belongs to relationship between your classes, the\n\u003ccode\u003eArtist\u003c/code\u003e tests, i.e. the tests in \u003ccode\u003espec/artist_spec.rb\u003c/code\u003e, rely on some code in\nthe \u003ccode\u003eSong\u003c/code\u003e class and vice versa. You will have to build out both the classes as\nyou go.\u003c/p\u003e\n\n\u003cp\u003eWe recommend starting out by getting some of the initial \u003ccode\u003eArtist\u003c/code\u003e tests passing\nand switching to write code in the \u003ccode\u003eSong\u003c/code\u003e class as directed by the test output.\u003c/p\u003e\n\n\u003cp\u003eOnce your \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e tests are passing, you will follow a similar\nprocess for \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis lab is primarily test-driven. So run the test suite with the \u003ccode\u003elearn test\u003c/code\u003e\ncommand to get started. Read the test output very carefully to help guide you\nthrough. First, read through the guidelines below and refer back to them as you\ncomplete the lab.\u003c/p\u003e\n\n\u003ch3\u003eBuilding the has many/belongs to relationship\u003c/h3\u003e\n\n\u003cp\u003eHow can an artist have many songs and a song belong to an artist? We'll need to\nmake sure that an individual song has a reference to the artist it belongs to,\nand that an individual artist has a reference to a list of its songs.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eTo establish the association from the song side, you will need to create\n\u003ccode\u003eartist=\u003c/code\u003e and \u003ccode\u003eartist\u003c/code\u003e instance methods in the Song class.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eTo establish the association from the artist's side, an individual artist will\nneed a method that returns a collection of all of their songs.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRecall from the previous lesson that we want to do this in a way that maintains\na single source of truth. Therefore, our Song class will need:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea class variable that holds all instances of every song that's been created in\nan array,\u003c/li\u003e\n\u003cli\u003ea class method that returns the class variable holding those instances, and\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e#songs\u003c/code\u003e instance method that returns the subset of songs belonging to a given\nartist.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#add_song_by_name\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#add_song_by_name\u003c/code\u003e method should take in an argument of a name, use that\nargument to create a new song and \u003cem\u003ethen\u003c/em\u003e associate the objects. The method doesn't need to return anything, just create the association.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e#artist_name\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eBuild a method \u003ccode\u003esome_song.artist_name\u003c/code\u003e that returns the name of the artist of\nthe given song.\u003c/p\u003e\n\n\u003cp\u003eThis method should use, or extend, the has many/belongs to relationship you're\nbuilding out. If a song has an artist, you can call: \u003ccode\u003esome_song.artist\u003c/code\u003e and\nreturn an actual instance of the \u003ccode\u003eArtist\u003c/code\u003e class. Since every artist has a name,\n\u003ccode\u003esome_song.artist.name\u003c/code\u003e should return the name of the \u003ccode\u003eArtist\u003c/code\u003e instance\nassociated with the given song. Your \u003ccode\u003e#artist_name\u003c/code\u003e method should utilize this\nrelationship.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We like our code to be robust, i.e. not easily breakable. Make sure\nyour \u003ccode\u003e#artist_name\u003c/code\u003e method will not break if the given song does not have an\nartist. In this case, your method should return \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eThe \u003ccode\u003e.song_count\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eYou'll be required to write a class method that returns the total number of\nsongs that have been created. How can we get access to total number of songs\nfrom the artist class?\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e Classes\u003c/h3\u003e\n\n\u003cp\u003eOnce you have all the tests passing for the \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eSong\u003c/code\u003e classes, begin working through the tests for \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e. As with artists and songs, an author should have many posts and a post should belong to an author:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/has-many-lab/Image_139_CodeObjectsRelations%28C%29.png\" alt=\"Author and Posts\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce again, because of the has many/belongs to relationship between your\nclasses, the \u003ccode\u003eAuthor\u003c/code\u003e tests rely on some code in the \u003ccode\u003ePost\u003c/code\u003e class and vice\nversa. You will have to build out both the classes as you go.\u003c/p\u003e\n\n\u003cp\u003eWe recommend starting out by getting some of the initial \u003ccode\u003eAuthor\u003c/code\u003e tests passing\nand switching to write code in the \u003ccode\u003ePost\u003c/code\u003e class as directed by the test output.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc7fc36502478322f5ebbd41a17e81d65","title":"Object Relationships - Has Many Through Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-has-many-through-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-has-many-through-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite classes that are related to each other via the \"has many through\"\nrelationship.\u003c/li\u003e\n\u003cli\u003eWrite methods that use the \"has many through\" relationship to deliver\ninformation on related objects.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be dealing with two sets of three classes.\u003c/p\u003e\n\n\u003cp\u003eWe have \u003ccode\u003eSong\u003c/code\u003e, \u003ccode\u003eArtist\u003c/code\u003e and \u003ccode\u003eGenre\u003c/code\u003e classes. Songs belong to an artist and to a\ngenre. A genre has many songs and an artist has many songs. An artist has many\ngenres through their songs and a genre has many artists through its songs.\u003c/p\u003e\n\n\u003cp\u003eWe also have \u003ccode\u003eAppointment\u003c/code\u003e, \u003ccode\u003eDoctor\u003c/code\u003e and \u003ccode\u003ePatient\u003c/code\u003e classes. Appointments belong\nto a patient and to a doctor. A doctor has many appointments and a patient has\nmany appointments. A doctor has many patients through their appointments and a\npatient has many doctors through their appointments.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eStart with the \u003ccode\u003eArtist\u003c/code\u003e/\u003ccode\u003eSong\u003c/code\u003e/\u003ccode\u003eGenre\u003c/code\u003e domain.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eArtist\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each artist in the\nclass variable.\u003c/li\u003e\n\u003cli\u003eAn artist is initialized with a name and is saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs an instance method, \u003ccode\u003e#new_song\u003c/code\u003e, that takes in two\narguments, name and genre, and creates a new song. That song should know that\nit belongs to the artist.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs an instance method, \u003ccode\u003e#songs\u003c/code\u003e, that iterates through\nall songs and finds the songs that belong to that artist. Try using \u003ccode\u003eselect\u003c/code\u003e\nto achieve this.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eArtist\u003c/code\u003e class needs an instance method, \u003ccode\u003e#genres\u003c/code\u003e that iterates over that\nartist's songs and collects the genre of each song.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003emadonna = Artist.new(\"Madonna\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eGenre\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eGenre\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eGenre\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each genre in the\nclass variable.\u003c/li\u003e\n\u003cli\u003eA genre should be initialized with a name and be saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eGenre\u003c/code\u003e class needs an instance method, \u003ccode\u003e#songs\u003c/code\u003e, that iterates through\nall songs and finds the songs that belong to that genre.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eGenre\u003c/code\u003e class needs an instance method, \u003ccode\u003e#artists\u003c/code\u003e, that iterates over the\ngenre's collection of songs and collects the artist that owns each song.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003epop = Genre.new(\"pop\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eSong\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eSong\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eSong\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each song in the class\nvariable.\u003c/li\u003e\n\u003cli\u003eA song should be initialized with a name, an artist, and a genre, and be saved\nin the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003emadonna = Artist.new(\"Madonna\")\u003cbr\u003epop = Genre.new(\"pop\")\u003cbr\u003e\u003cbr\u003einto_the_groove = Song.new(\"Into the Groove\", madonna, pop)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's move on to our \u003ccode\u003eDoctor\u003c/code\u003e/\u003ccode\u003eAppointment\u003c/code\u003e/\u003ccode\u003ePatient\u003c/code\u003e domain model.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e the tests will be calling the \u003ccode\u003e#new_appointment\u003c/code\u003e methods you will\nwrite in your \u003ccode\u003eDoctor\u003c/code\u003e and \u003ccode\u003ePatient\u003c/code\u003e classes, as well as the \u003ccode\u003e#initialize\u003c/code\u003e\nmethod in the \u003ccode\u003eAppointment\u003c/code\u003e class. Therefore, in order to pass the tests, you\nwill need to make sure that your method definitions specify the parameters in\nthe order indicated below.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each doctor in the\nclass variable.\u003c/li\u003e\n\u003cli\u003eA doctor should be initialized with a name and saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs an instance method, \u003ccode\u003e#new_appointment\u003c/code\u003e, that takes in\na date and an instance of the \u003ccode\u003ePatient\u003c/code\u003e class \u003cem\u003ein this order\u003c/em\u003e, and creates a\nnew \u003ccode\u003eAppointment\u003c/code\u003e. That \u003ccode\u003eAppointment\u003c/code\u003e should know that it belongs to the\ndoctor.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs an instance method, \u003ccode\u003e#appointments\u003c/code\u003e, that iterates\nthrough all \u003ccode\u003eAppointment\u003c/code\u003es and finds those belonging to this doctor.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eDoctor\u003c/code\u003e class needs an instance method, \u003ccode\u003e#patients\u003c/code\u003e, that iterates over\nthat doctor's \u003ccode\u003eAppointment\u003c/code\u003es and collects the patient that belongs to each\n\u003ccode\u003eAppointment\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003edoogie = Doctor.new(\"Doogie Howser\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003ePatient\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each patient in the\nclass variable.\u003c/li\u003e\n\u003cli\u003eA patient should be initialized with a name and saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs an instance method, \u003ccode\u003e#new_appointment\u003c/code\u003e, that takes\nin a date and an instance of the \u003ccode\u003eDoctor\u003c/code\u003e class \u003cem\u003ein this order\u003c/em\u003e and creates a\nnew \u003ccode\u003eAppointment\u003c/code\u003e. The \u003ccode\u003eAppointment\u003c/code\u003e should know that it belongs to the\npatient.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs an instance method, \u003ccode\u003e#appointments\u003c/code\u003e, that iterates\nthrough the \u003ccode\u003eAppointment\u003c/code\u003es array and returns \u003ccode\u003eAppointment\u003c/code\u003es that belong to the\npatient.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ePatient\u003c/code\u003e class needs an instance method, \u003ccode\u003e#doctors\u003c/code\u003e, that iterates over\nthat patient's \u003ccode\u003eAppointment\u003c/code\u003es and collects the doctor that belongs to each\n\u003ccode\u003eAppointment\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eferris = Patient.new(\"Ferris Bueller\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eAppointment\u003c/code\u003e model:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eAppointment\u003c/code\u003e class needs a class variable \u003ccode\u003e@@all\u003c/code\u003e that begins as an empty\narray.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eAppointment\u003c/code\u003e class needs a class method \u003ccode\u003e.all\u003c/code\u003e that lists each\n\u003ccode\u003eAppointment\u003c/code\u003e in the class variable.\u003c/li\u003e\n\u003cli\u003eAn \u003ccode\u003eAppointment\u003c/code\u003e should be initialized with a date (as a string, like\n\u003ccode\u003e\"Monday, August 1st\"\u003c/code\u003e), a patient, and a doctor \u003cem\u003ein this order\u003c/em\u003e. The\n\u003ccode\u003eAppointment\u003c/code\u003e should be saved in the \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eferris = Patient.new(\"Ferris Bueller\")\u003cbr\u003edoogie = Doctor.new(\"Doogie Howser\")\u003cbr\u003e\u003cbr\u003enew_appointment = Appointment.new('January 1st, 1989', ferris, doogie)\n\u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7b7557139cc5cd1334e6d95725c0f4c7","title":"Object Relationships - Kickstarter Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-kickstarter-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-kickstarter-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-kickstarter-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-kickstarter-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild classes that produce objects that relate to one another.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we are going to be creating a very, very simple version of\nKickstarter. We'll have Projects and Backers (and no concept of money at all),\nand they will need to interact with one another realistically.\u003c/p\u003e\n\n\u003cp\u003eWe want our interface to work something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebob = Backer.new(\"Bob\")\u003cbr\u003eawesome_project = Project.new(\"This is an Awesome Project\")\u003cbr\u003e\u003cbr\u003ebob.back_project(awesome_project)\u003cbr\u003e\u003cbr\u003ebob.backed_projects\u003cbr\u003e# =\u0026gt; [#]\u003cbr\u003e\u003cbr\u003eawesome_project.backers\u003cbr\u003e# =\u0026gt; [#]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe tricky thing here is that projects can have many backers and backers can\nback many projects. Neither can \u003cem\u003ebelong to\u003c/em\u003e just one of the other.\u003c/p\u003e\n\n\u003cp\u003eHowever, if we introduce a third class in between Project and Backer, we can\nestablish a \u003cem\u003ehas many through\u003c/em\u003e relationship in both directions!\u003c/p\u003e\n\n\u003cp\u003eWe can call this class ProjectBacker — each instance of ProjectBacker will\nrepresent an association between a single backer and a single project. A\nProjectBacker, therefore, belongs to one Backer and one Project. ProjectBacker,\nin essence, acts as a \u003cem\u003ejoin\u003c/em\u003e between Project and Backer. It allows us to\nmaintain the 'has many' / 'has many' relationship that the two have.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe specs have been set to run in the default order, and are written in such a\nway that tests for the Backer, Project, and ProjectBacker classes are mixed in\nwith one another. This is not how you'd normally see specs for multiple objects.\nFor the purposes of this lab, though, following the specs in order will\neventually lead you to the correct relationships between your classes.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWhen a \u003ccode\u003eBacker\u003c/code\u003e instance is initialized, it should be initialized with a name.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen a \u003ccode\u003eProject\u003c/code\u003e instance is initialized, it should be initialized with a\ntitle.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen a \u003ccode\u003eProjectBacker\u003c/code\u003e instance is initialized, it should be initialized with\na \u003ccode\u003eProject\u003c/code\u003e instance and a \u003ccode\u003eBacker\u003c/code\u003e instance.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eProjectBacker\u003c/code\u003e class is maintaining the relationship. It should have an\n\u003ccode\u003e@@all\u003c/code\u003e class variable. When an instance is initialized, it should be stored\nin this variable.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eProjectBacker\u003c/code\u003e class should also have a class method \u003ccode\u003e.all\u003c/code\u003e that returns\nthe \u003ccode\u003e@@all\u003c/code\u003e class variable.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eOnce both classes have their attributes and readers set up, write an instance\nmethod on the Backer class called \u003ccode\u003eback_project\u003c/code\u003e that takes in a Project\ninstance. This method should create a \u003ccode\u003eProjectBacker\u003c/code\u003e instance using the\nprovided Project instance and the current Backer instance (the instance this\nmethod was called on).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSimilarly, write a method on the Project class called \u003ccode\u003eadd_backer\u003c/code\u003e that takes\nin a Backer instance and creates a \u003ccode\u003eProjectBacker\u003c/code\u003e using the Backer instance\nand the current Project instance.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWith \u003ccode\u003eback_project\u003c/code\u003e set up, the final step for the Backer class is to build an\ninstance method that returns all the projects associated with \u003cem\u003ethis Backer\ninstance\u003c/em\u003e. Since Project instances are not directly associated with Backer\ninstances, you will need to get this information \u003cem\u003ethrough\u003c/em\u003e the ProjectBacker\nclass.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFor the Project class, write a similar method, \u003ccode\u003ebackers\u003c/code\u003e, that returns all\nbackers associated with this Project instance.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBy creating the ProjectBacker class, we can maintain a single source of truth in\na relationship where both sides have many of the other.\u003c/p\u003e\n\n\u003cp\u003eProjectBacker is also a great example of how awesome object orientation is\n— we can use OO to represent real-world relationships and classes to\nrepresent \u003cem\u003ethings\u003c/em\u003e. But sometimes, when we need more flexibility, classes can\nexist purely to represent a \u003cem\u003erelationship\u003c/em\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga8b664d498fcbbf734b0357ca40b38c1","title":" Object Relations Practice Code Challenge Magazines Many Many","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"-Object-Relations-Practice-Code-Challenge-Magazines-Many-Many\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/-Object-Relations-Practice-Code-Challenge-Magazines-Many-Many/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/-Object-Relations-Practice-Code-Challenge-Magazines-Many-Many\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/-Object-Relations-Practice-Code-Challenge-Magazines-Many-Many/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eFor this assignment, we'll be working with a Magazine domain.\u003c/p\u003e  \u003cp\u003eWe have three models: \u003ccode\u003eMagazine\u003c/code\u003e, \u003ccode\u003eSubscription\u003c/code\u003e, and \u003ccode\u003eReader\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eFor our purposes, a \u003ccode\u003eMagazine\u003c/code\u003e has many \u003ccode\u003eSubscription\u003c/code\u003es, a \u003ccode\u003eReader\u003c/code\u003e has many \u003ccode\u003eSubscription\u003c/code\u003es, and a \u003ccode\u003eSubscription\u003c/code\u003e belongs to a \u003ccode\u003eMagazine\u003c/code\u003e and to an \u003ccode\u003eReader\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eMagazine\u003c/code\u003e - \u003ccode\u003eReader\u003c/code\u003e is a many to many relationship.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You should draw your domain on paper or on a whiteboard \u003cem\u003ebefore you start coding\u003c/em\u003e. Remember to identify a single source of truth for your data.\u003c/p\u003e  \u003ch2\u003eTopics\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eActive Record Migrations\u003c/li\u003e \u003cli\u003eObject Relationships\u003c/li\u003e \u003cli\u003eActive Record Queryng\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eTo get started, run \u003ccode\u003ebundle install\u003c/code\u003e while inside of this directory.\u003c/p\u003e  \u003cp\u003eBuild out all of the methods listed in the deliverables. The methods are listed in a suggested order, but you can feel free to tackle the ones you think are easiest. Be careful: some of the later methods rely on earlier ones.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRemember!\u003c/strong\u003e This code challenge does not have tests. You cannot run \u003ccode\u003erspec\u003c/code\u003e and you cannot run \u003ccode\u003elearn\u003c/code\u003e. You'll need to create your own sample instances so that you can try out your code on your own. Make sure your associations and methods work in the console before submitting.\u003c/p\u003e  \u003cp\u003eWe've provided you with a tool that you can use to test your code. To use it, run \u003ccode\u003erake console\u003c/code\u003e from the command line. This will start a \u003ccode\u003epry\u003c/code\u003e session with your classes defined. You can test out the methods that you write here. You are also encouraged to use the \u003ccode\u003eseeds.rb\u003c/code\u003e file to create sample data to test your models and associations.\u003c/p\u003e  \u003cp\u003eWriting error-free code is more important than completing all of the deliverables listed - prioritize writing methods that work over writing more methods that don't work. You should test your code in the console as you write.\u003c/p\u003e  \u003cp\u003eSimilarly, messy code that works is better than clean code that doesn't. First, prioritize getting things working. Then, if there is time at the end, refactor your code to adhere to best practices. \u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eBefore you submit!\u003c/strong\u003e Save and run your code to verify that it works as you expect. If you have any methods that are not working yet, feel free to leave comments describing your progress.\u003c/p\u003e  \u003ch2\u003eWhat You Already Have\u003c/h2\u003e  \u003cp\u003eThe starter code has migrations and models for the initial \u003ccode\u003eReader\u003c/code\u003e, \u003ccode\u003eMagazine\u003c/code\u003e and \u003ccode\u003eSubscription\u003c/code\u003e models, and seed data for some \u003ccode\u003eReader\u003c/code\u003es and \u003ccode\u003eMagazine\u003c/code\u003es. The schema currently looks like this: \u003c/p\u003e  \u003ch4\u003e\n\u003ccode\u003ereaders\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003ename\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eemail\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch4\u003e\n\u003ccode\u003emagazines\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003etitle\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eYou will need to create the migration for the \u003ccode\u003esubscriptions\u003c/code\u003e table using the attributes specified in the deliverables below.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eWrite the following methods in the classes in the files provided. Feel free to build out any helper methods if needed.\u003c/p\u003e  \u003cp\u003eDeliverables use the notation \u003ccode\u003e#\u003c/code\u003e for instance methods, and \u003ccode\u003e.\u003c/code\u003e for class methods.\u003c/p\u003e  \u003cp\u003eRemember: Active Record give your classes access to a lot of built-in methods! Keep in mind what methods Active Record gives you access to on each of your classes when you're approaching the deliverables below.\u003c/p\u003e  \u003ch3\u003eMigrations\u003c/h3\u003e  \u003cp\u003eBefore working on the rest of the deliverables, you will need to create a migration for the \u003ccode\u003esubscriptions\u003c/code\u003e table. \u003c/p\u003e  \u003cul\u003e \u003cli\u003eA \u003ccode\u003eSubscription\u003c/code\u003e belongs to a \u003ccode\u003eMagazine\u003c/code\u003e, and a \u003ccode\u003eSubscription\u003c/code\u003e also belongs to an \u003ccode\u003eReader\u003c/code\u003e. In your migration, create any columns your \u003ccode\u003esubscriptions\u003c/code\u003e table will need to establish these relationships.  \u003cul\u003e \u003cli\u003eThe \u003ccode\u003esubscriptions\u003c/code\u003e table should also have a \u003ccode\u003eprice\u003c/code\u003e column that stores an integer.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAfter creating your migration, use the \u003ccode\u003eseeds.rb\u003c/code\u003e file to create instances of your \u003ccode\u003eSubscription\u003c/code\u003e class so you can test your code.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eOnce you've set up your \u003ccode\u003eSubscription\u003c/code\u003e class\u003c/strong\u003e, work on building out the following deliverables.\u003c/p\u003e  \u003ch3\u003eObject Relationship Methods\u003c/h3\u003e  \u003cp\u003eUse Active Record association macros and Active Record query methods where appropriate (i.e. \u003ccode\u003ehas_many\u003c/code\u003e, \u003ccode\u003ehas_many through\u003c/code\u003e, and \u003ccode\u003ebelongs_to\u003c/code\u003e).\u003c/p\u003e  \u003ch4\u003eSubscription\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eSubscription#reader\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return the \u003ccode\u003eReader\u003c/code\u003e instance for this subscription\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eSubscription#magazine\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return the \u003ccode\u003eMagazine\u003c/code\u003e instance for this subscription\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eMagazine\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eMagazine#subscriptions\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a collection of all \u003ccode\u003eSubscription\u003c/code\u003e instances for this magazine\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eMagazine#readers\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a collection of all \u003ccode\u003eReader\u003c/code\u003e instances who are subscribed to this magazine\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eReader\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eReader#subscriptions\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return a collection of all \u003ccode\u003eSubscription\u003c/code\u003e instances for this reader\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eReader#magazines\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return a collection of all \u003ccode\u003eMagazine\u003c/code\u003e instances that this reader is subscribed to\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eAggregate and Association Methods\u003c/h3\u003e  \u003ch4\u003eSubscription\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eSubscription#print_details\u003c/code\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eputs\u003c/code\u003e a string to the terminal to display the details of the subscription\u003c/li\u003e \u003cli\u003ethe string should be formatted like this: \u003ccode\u003e{reader name} subscribed to {magazine title} for ${subscription price}\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eReader\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eReader#subscribe(magazine, price)\u003c/code\u003e  \u003cul\u003e \u003cli\u003etakes a \u003ccode\u003emagazine\u003c/code\u003e (an instance of the \u003ccode\u003eMagazine\u003c/code\u003e class) and a \u003ccode\u003eprice\u003c/code\u003e (integer) as arguments, and creates a new \u003ccode\u003esubscription\u003c/code\u003e in the database associated with the magazine and the reader\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eReader#total_subcription_price\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the total price for all the reader's subscriptions\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eReader#cancel_subscription(magazine)\u003c/code\u003e  \u003cul\u003e \u003cli\u003etakes a \u003ccode\u003emagazine\u003c/code\u003e instance and removes the subscription for this reader\u003c/li\u003e \u003cli\u003eyou will have to delete a row from the \u003ccode\u003esubscriptions\u003c/code\u003e table to get this to work!\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eMagazine\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eMagazine#email_list\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a \u003ccode\u003eString\u003c/code\u003e of a semi-colon separated list of emails for all the readers subscribed to this magazine\u003c/li\u003e \u003cli\u003ethe string should be formatted like this: \u003ccode\u003eemail1@example.com;email2@example.com;email3@example.com\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eMagazine.most_popular\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the \u003ccode\u003eMagazine\u003c/code\u003e instance with the most subscribers\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eRubric\u003c/h2\u003e  \u003ch3\u003eActive Record Associations\u003c/h3\u003e  \u003col\u003e \u003cli\u003eNo associations, no foreign key on the table.\u003c/li\u003e \u003cli\u003eAssociations attempted in the model but are incorrect; foreign key is on a table but in the wrong spot.\u003c/li\u003e \u003cli\u003eRelationships properly created. Associations lead to the correct behavior but may have used the wrong macro or manually written out the methods the macro builds for us.\u003c/li\u003e \u003cli\u003eRelationships properly created, save minor mistakes in advanced deliverables. May implement advanced query methods with iterators instead of using built-in methods.\u003c/li\u003e \u003cli\u003eRelationships properly created. Advanced query methods use appropriate built-in methods.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eBuild classes using OO Ruby Syntax\u003c/h3\u003e  \u003col\u003e \u003cli\u003eClass code has a syntax or runtime error. Code does not run at all, or exits with an error, or most Object-oriented deliverables are not implemented.\u003c/li\u003e \u003cli\u003eNo syntax errors. Some deliverables function correctly. Mixes up syntax for class and instance methods, refers to variables in the wrong scope, or uses \u003ccode\u003eself\u003c/code\u003e incorrectly, leading to logical errors. Method and variable names do not correspond to their respective behavior or data types. Methods might be duplicated, or code includes unused methods without a clear purpose.\u003c/li\u003e \u003cli\u003eCorrect class syntax for the deliverables submitted. May be incomplete or missing deliverables. Most code generally expresses intent: method and variable names match their behaviors and data types. Methods are not duplicated. Code does not have unused or methods without a clear purpose.\u003c/li\u003e \u003cli\u003eCorrect class syntax for all of the submitted code. Code express intent: method and variable names indicate their behavior and data types. Some deliverables might not be complete. No methods are duplicated.\u003c/li\u003e \u003cli\u003eCorrect class syntax for all deliverables, all deliverables complete. Code expresses intent: method and variable names indicate their behavior and data types, with the correct pluralization. No methods are duplicated. All methods have a clear purpose. Shared functionality is factored out into helper methods. Appropriate use of attr_* macros.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eModel relationships using Ruby\u003c/h3\u003e  \u003col\u003e \u003cli\u003eSubmitted code does not relate models to each other through methods or data.\u003c/li\u003e \u003cli\u003eModels relate to each other, but incompletely. Relationship methods are missing or have logic errors, store data on the wrong model, or are missing a single source of truth.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Data is stored on the correct models, relationship methods are defined on the right models, and the logic correctly implements the relationships. Aggregate methods using the relationships may be incomplete or have errors.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Aggregate methods work, but might not use helper methods effectively.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Aggregate methods use helper methods effectively.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eSolve problems with collections of data\u003c/h3\u003e  \u003col\u003e \u003cli\u003eDoes not attempt to solve collections problems, or has syntax errors in collection code.\u003c/li\u003e \u003cli\u003eCollections methods have runtime or logic errors. Collections methods may use the wrong iterators, have incorrect logic, or many of the collections methods are unimplemented.\u003c/li\u003e \u003cli\u003eSome collections methods work correctly, though several might be unimplemented. Code may not use the appropriate built in method for each problem, or duplicate logic instead of using helper methods.\u003c/li\u003e \u003cli\u003eAll collections methods are implemented and function correctly. Most use appropriate higher-level built-in methods. Methods may duplicate logic instead of using helper methods.\u003c/li\u003e \u003cli\u003eAll collections methods implemented and function correctly, using appropriate higher-level built-in methods. Shared logic is factored out to helper methods.\u003c/li\u003e \u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc0edb7df63fe8e01211524a3fdafa76e","title":"Object Relations Practice Code Challenge Students One Many","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Object-Relations-Practice-Code-Challenge-Students-One-Many\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Object-Relations-Practice-Code-Challenge-Students-One-Many/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Object-Relations-Practice-Code-Challenge-Students-One-Many\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Object-Relations-Practice-Code-Challenge-Students-One-Many/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eFor this assignment, we'll be working with a Students domain.\u003c/p\u003e  \u003cp\u003eWe have two models: \u003ccode\u003eCohort\u003c/code\u003e and \u003ccode\u003eStudent\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eFor our purposes, a \u003ccode\u003eCohort\u003c/code\u003e has many \u003ccode\u003eStudents\u003c/code\u003es and a \u003ccode\u003eStudent\u003c/code\u003e belongs to a \u003ccode\u003eCohort\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eStudent\u003c/code\u003e - \u003ccode\u003eCohort\u003c/code\u003e is a one to many relationship.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You should draw your domain on paper or on a whiteboard \u003cem\u003ebefore you start coding\u003c/em\u003e. Remember to identify a single source of truth for your data.\u003c/p\u003e  \u003ch2\u003eTopics\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eActive Record Migrations\u003c/li\u003e \u003cli\u003eObject Relationships\u003c/li\u003e \u003cli\u003eActive Record Queryng\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eTo get started, run \u003ccode\u003ebundle install\u003c/code\u003e while inside of this directory.\u003c/p\u003e  \u003cp\u003eBuild out all of the methods listed in the deliverables. The methods are listed in a suggested order, but you can feel free to tackle the ones you think are easiest. Be careful: some of the later methods rely on earlier ones.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRemember!\u003c/strong\u003e This code challenge does not have tests. You cannot run \u003ccode\u003erspec\u003c/code\u003e and you cannot run \u003ccode\u003elearn\u003c/code\u003e. You'll need to create your own sample instances so that you can try out your code on your own. Make sure your associations and methods work in the console before submitting.\u003c/p\u003e  \u003cp\u003eWe've provided you with a tool that you can use to test your code. To use it, run \u003ccode\u003erake console\u003c/code\u003e from the command line. This will start a \u003ccode\u003epry\u003c/code\u003e session with your classes defined. You can test out the methods that you write here. You are also encouraged to use the \u003ccode\u003eseeds.rb\u003c/code\u003e file to create sample data to test your models and associations.\u003c/p\u003e  \u003cp\u003eWriting error-free code is more important than completing all of the deliverables listed - prioritize writing methods that work over writing more methods that don't work. You should test your code in the console as you write.\u003c/p\u003e  \u003cp\u003eSimilarly, messy code that works is better than clean code that doesn't. First, prioritize getting things working. Then, if there is time at the end, refactor your code to adhere to best practices. \u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eBefore you submit!\u003c/strong\u003e Save and run your code to verify that it works as you expect. If you have any methods that are not working yet, feel free to leave comments describing your progress.\u003c/p\u003e  \u003ch2\u003eWhat You Already Have\u003c/h2\u003e  \u003cp\u003eThe starter code has migrations and models for the initial \u003ccode\u003eCohort\u003c/code\u003e and \u003ccode\u003eStudent\u003c/code\u003e models, and seed data for some \u003ccode\u003eCohort\u003c/code\u003es and \u003ccode\u003eStudent\u003c/code\u003es. The tables currently look like this: \u003c/p\u003e  \u003ch4\u003e\n\u003ccode\u003estudents\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003ename\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eage\u003c/td\u003e \u003ctd\u003eInteger\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eemail\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch4\u003e\n\u003ccode\u003ecohorts\u003c/code\u003e Table\u003c/h4\u003e  \u003ctable\u003e\n\u003cthead\u003e \u003ctr\u003e \u003cth\u003eColumn\u003c/th\u003e \u003cth\u003eType\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e\n\u003ctbody\u003e \u003ctr\u003e \u003ctd\u003ename\u003c/td\u003e \u003ctd\u003eString\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003ecurrent_mod\u003c/td\u003e \u003ctd\u003eInteger\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eYou will need to create a migration to establish the relationship between these two tables. You'll need to add one additional column to one of these existing tables to create the relationship. \u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRemember\u003c/strong\u003e: a \u003ccode\u003eCohort\u003c/code\u003e has many \u003ccode\u003eStudent\u003c/code\u003es and a \u003ccode\u003eStudent\u003c/code\u003e belongs to a \u003ccode\u003eCohort\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eDeliverables\u003c/h2\u003e  \u003cp\u003eWrite the following methods in the classes in the files provided. Feel free to build out any helper methods if needed.\u003c/p\u003e  \u003cp\u003eDeliverables use the notation \u003ccode\u003e#\u003c/code\u003e for instance methods, and \u003ccode\u003e.\u003c/code\u003e for class methods.\u003c/p\u003e  \u003cp\u003eRemember: Active Record give your classes access to a lot of built-in methods! Keep in mind what methods Active Record gives you access to on each of your classes when you're approaching the deliverables below.\u003c/p\u003e  \u003ch3\u003eMigrations\u003c/h3\u003e  \u003cp\u003eBefore working on the rest of the deliverables, you will need to set up the migration files to establish the relationship between a \u003ccode\u003eStudent\u003c/code\u003e and a \u003ccode\u003eCohort\u003c/code\u003e.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eA \u003ccode\u003eStudent\u003c/code\u003e belongs to a \u003ccode\u003eCohort\u003c/code\u003e. Update the existing migrations file(s) to reflect this relationship.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eOnce you've updated the migrations, run \u003ccode\u003erake db:migrate\u003c/code\u003e to run the migrations and set up the database. Then use the \u003ccode\u003eseeds.rb\u003c/code\u003e file to create instances of \u003ccode\u003eStudent\u003c/code\u003es and \u003ccode\u003eCohort\u003c/code\u003es to so you can test your relationships.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eOnce you've successfully created the migration\u003c/strong\u003e, work on building out the following deliverables. \u003c/p\u003e  \u003ch3\u003eObject Relationship Methods\u003c/h3\u003e  \u003cp\u003eUse Active Record association macros and Active Record query methods where appropriate (i.e. \u003ccode\u003ehas_many\u003c/code\u003e, \u003ccode\u003ehas_many through\u003c/code\u003e, and \u003ccode\u003ebelongs_to\u003c/code\u003e).\u003c/p\u003e  \u003ch4\u003eStudent\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eStudent#cohort\u003c/code\u003e  \u003cul\u003e \u003cli\u003eshould return the \u003ccode\u003eCohort\u003c/code\u003e instance for this student\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eCohort\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eCohort#students\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a collection of all \u003ccode\u003eStudent\u003c/code\u003e instances for this cohort\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eAggregate and Association Methods\u003c/h3\u003e  \u003ch4\u003eStudent\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eStudent#current_mod\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the current mod for this student's cohort\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch4\u003eCohort\u003c/h4\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eCohort#add_student\u003c/code\u003e   \u003cul\u003e \u003cli\u003etakes a name (as a \u003ccode\u003eString\u003c/code\u003e) and an age (as an \u003ccode\u003eInteger\u003c/code\u003e) and adds a new student to this cohort\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eCohort#average_age\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the average age of all the students in the cohort as a \u003ccode\u003eFloat\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eCohort#total students\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns the total number of students in the cohort as an \u003ccode\u003eInteger\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eCohort.biggest\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns a \u003ccode\u003eCohort\u003c/code\u003e instance for the cohort with the most students\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eCohort.sort_by_mod\u003c/code\u003e  \u003cul\u003e \u003cli\u003ereturns all cohorts, sorted by \u003ccode\u003ecurrent_mod\u003c/code\u003e from lowest to highest\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eRubric\u003c/h2\u003e  \u003ch3\u003eActive Record Associations\u003c/h3\u003e  \u003col\u003e \u003cli\u003eNo associations, no foreign key on the table.\u003c/li\u003e \u003cli\u003eAssociations attempted in the model but are incorrect; foreign key is on a table but in the wrong spot.\u003c/li\u003e \u003cli\u003eRelationships properly created. Associations lead to the correct behavior but may have used the wrong macro or manually written out the methods the macro builds for us.\u003c/li\u003e \u003cli\u003eRelationships properly created, save minor mistakes in advanced deliverables. May implement advanced query methods with iterators instead of using built-in methods.\u003c/li\u003e \u003cli\u003eRelationships properly created. Advanced query methods use appropriate built-in methods.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eBuild classes using OO Ruby Syntax\u003c/h3\u003e  \u003col\u003e \u003cli\u003eClass code has a syntax or runtime error. Code does not run at all, or exits with an error, or most Object-oriented deliverables are not implemented.\u003c/li\u003e \u003cli\u003eNo syntax errors. Some deliverables function correctly. Mixes up syntax for class and instance methods, refers to variables in the wrong scope, or uses \u003ccode\u003eself\u003c/code\u003e incorrectly, leading to logical errors. Method and variable names do not correspond to their respective behavior or data types. Methods might be duplicated, or code includes unused methods without a clear purpose.\u003c/li\u003e \u003cli\u003eCorrect class syntax for the deliverables submitted. May be incomplete or missing deliverables. Most code generally expresses intent: method and variable names match their behaviors and data types. Methods are not duplicated. Code does not have unused or methods without a clear purpose.\u003c/li\u003e \u003cli\u003eCorrect class syntax for all of the submitted code. Code express intent: method and variable names indicate their behavior and data types. Some deliverables might not be complete. No methods are duplicated.\u003c/li\u003e \u003cli\u003eCorrect class syntax for all deliverables, all deliverables complete. Code expresses intent: method and variable names indicate their behavior and data types, with the correct pluralization. No methods are duplicated. All methods have a clear purpose. Shared functionality is factored out into helper methods. Appropriate use of attr_* macros.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eModel relationships using Ruby\u003c/h3\u003e  \u003col\u003e \u003cli\u003eSubmitted code does not relate models to each other through methods or data.\u003c/li\u003e \u003cli\u003eModels relate to each other, but incompletely. Relationship methods are missing or have logic errors, store data on the wrong model, or are missing a single source of truth.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Data is stored on the correct models, relationship methods are defined on the right models, and the logic correctly implements the relationships. Aggregate methods using the relationships may be incomplete or have errors.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Aggregate methods work, but might not use helper methods effectively.\u003c/li\u003e \u003cli\u003eModels relate to each other as specified in the instructions. Aggregate methods use helper methods effectively.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eSolve problems with collections of data\u003c/h3\u003e  \u003col\u003e \u003cli\u003eDoes not attempt to solve collections problems, or has syntax errors in collection code.\u003c/li\u003e \u003cli\u003eCollections methods have runtime or logic errors. Collections methods may use the wrong iterators, have incorrect logic, or many of the collections methods are unimplemented.\u003c/li\u003e \u003cli\u003eSome collections methods work correctly, though several might be unimplemented. Code may not use the appropriate built in method for each problem, or duplicate logic instead of using helper methods.\u003c/li\u003e \u003cli\u003eAll collections methods are implemented and function correctly. Most use appropriate higher-level built-in methods. Methods may duplicate logic instead of using helper methods.\u003c/li\u003e \u003cli\u003eAll collections methods implemented and function correctly, using appropriate higher-level built-in methods. Shared logic is factored out to helper methods.\u003c/li\u003e \u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8352a2697a574eb4dee889434f0512f7","title":"OO Person Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-self-person-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-person-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-person-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-self-person-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/web-dev-readme-photos/oo-labs/people.jpg\" alt=\"people\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eGain proficiency instantiating a class.\u003c/li\u003e\n\u003cli\u003eGain ability to discern when to implement \u003ccode\u003eattr_accessor\u003c/code\u003e, \u003ccode\u003eattr_reader\u003c/code\u003e,  and \u003ccode\u003eattr_writer\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eGain ability to discern when to define your own \u003ccode\u003eattr_reader\u003c/code\u003e (getter) and \u003ccode\u003eattr_writer\u003c/code\u003e (setter) methods.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eTo practice object oriented programming (OOP), you're going to create a Person class. Each instance of the \u003ccode\u003ePerson\u003c/code\u003e class will have the ability to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eget paid/receive payments\u003c/li\u003e\n\u003cli\u003etake a bath\u003c/li\u003e\n\u003cli\u003ecall a friend\u003c/li\u003e\n\u003cli\u003estart a conversation\u003c/li\u003e\n\u003cli\u003estate if they are happy and/or clean\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst you need to create a person class that is initialized with a name that cannot be changed.\u003c/li\u003e\n\u003cli\u003eEach instance of class \u003ccode\u003ePerson\u003c/code\u003eshould be able to remember their name\u003c/li\u003e\n\u003cli\u003eEach instance of  class \u003ccode\u003ePerson\u003c/code\u003e should start with $25 in their bank accounts\u003c/li\u003e\n\u003cli\u003eEach instance of  class \u003ccode\u003ePerson\u003c/code\u003e should start with eight happiness points\u003c/li\u003e\n\u003cli\u003eEach instance of  class \u003ccode\u003ePerson\u003c/code\u003e should start with eight hygiene points\u003c/li\u003e\n\u003cli\u003eThe happiness and hygiene points should be able to change, however the maximum and minimum points for both happiness and hygiene should be 10 and  0 respectively\u003c/li\u003e\n\u003cli\u003eThe amount in the bank account should also be able to change, though it has no max or min.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch5\u003eNon-attribute defining instance methods\u003c/h5\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eclean?\u003c/code\u003e and \u003ccode\u003ehappy?\u003c/code\u003e methods are pretty similiar: they should return \u003ccode\u003etrue\u003c/code\u003e if the happiness or hygiene points exceed seven. Otherwise they should return false.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eget_paid\u003c/code\u003e method should accept a salary amount and add this to the person's bank account. Then the method should return the string \"all about the benjamins\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003etake_bath\u003c/code\u003e method should increment the person's hygiene points by four and return the string \"♪ Rub-a-dub just relaxing in the tub ♫\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003ework_out\u003c/code\u003e method should increment the person's happiness by two points, decrease their hygiene by three points, and return the Queen lyrics, \"♪ another one bites the dust ♫\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003ecall_friend\u003c/code\u003e method should accept another instance of the Person class, or \"friend\". The method should increment the caller and the callee's happiness points by three. If Stella calls her friend Felix, the method should return \"Hi Felix! It's Stella. How are you?\"\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFinally, the \u003ccode\u003estart_conversation\u003c/code\u003e method should accept two arguments, the person to start a conversation with and the topic of conversation.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf the topic is politics, both people get sadder and the method returns \"blah blah partisan blah lobbyist\".\u003c/li\u003e\n\u003cli\u003eIf the topic is weather, both people get a little happier and the method returns \"blah blah sun blah rain\".\u003c/li\u003e\n\u003cli\u003eIf the topic is not politics or weather, their happiness points don't change and the method returns \"blah blah blah blah blah\".\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfa4d6ea9e42e7a2f623890ff1f1debe1","title":"OO Puppy Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-advanced-class-methods-puppy-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-puppy-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-puppy-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-advanced-class-methods-puppy-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse a class variable to keep track of every instance of a class that is\ncreated.\u003c/li\u003e\n\u003cli\u003eWrite a class method to access the list of all instances of a class, stored in\na class variable.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThe government has decided to start tracking every new puppy that is born, just\nlike we track every new child who is born with a birth certificate. Because\nyou're such a notoriously skilled programmer, you've been hired by the newly\nminted United States Department of Canines to write a program that will do just\nthat.\u003c/p\u003e\n\n\u003cp\u003eYou need to write a program that stores each new puppy that is born. You will\nwrite a \u003ccode\u003eDog\u003c/code\u003e class that initializes with a name and also stores each new\ninstance of \u003ccode\u003eDog\u003c/code\u003e that is instantiated.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eCode your solution in \u003ccode\u003elib/dog.rb\u003c/code\u003e, using the test error messages from running\n\u003ccode\u003elearn test\u003c/code\u003e as a guide to your solution.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eCreate a class variable \u003ccode\u003e@@all\u003c/code\u003e set to an empty array inside your class. This\narray is the storage container for each instance of a \u003ccode\u003eDog\u003c/code\u003e that gets\ncreated. In other words, every puppy that is born should get pushed into this\narray at the moment of instantiation––in the \u003ccode\u003e#initialize\u003c/code\u003e method! Use the\n\u003ccode\u003eself\u003c/code\u003e keyword inside the \u003ccode\u003e#initialize\u003c/code\u003e method to refer to the new dog you are\ntrying to store in your \u003ccode\u003e@@all\u003c/code\u003e array.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWrite a class method, \u003ccode\u003e.all\u003c/code\u003e, that reads this variable. From inside the \u003ccode\u003eDog\u003c/code\u003e\nclass, we can access the \u003ccode\u003e@@all\u003c/code\u003e class variable, but whenever we might be\ninteracting with our \u003ccode\u003eDog\u003c/code\u003e class from the outside, this \u003ccode\u003e.all\u003c/code\u003e class method acts\nas our direct interface to the \u003ccode\u003e@@all\u003c/code\u003e variable.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou will need to write a class method, \u003ccode\u003e.print_all\u003c/code\u003e, that iterates over all of\nthe individual dogs stored in the \u003ccode\u003e@@all\u003c/code\u003e array and \u003ccode\u003eputs\u003c/code\u003e out their name to the\nterminal.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNow that we've gotten these methods written out, it is time to do a bit of\nrefactoring. Rather than pushing \u003ccode\u003eself\u003c/code\u003e into the \u003ccode\u003e@@all\u003c/code\u003e variable inside of\n\u003ccode\u003e#initialize\u003c/code\u003e, let's extract this action into its own method. Call this method\n\u003ccode\u003e#save\u003c/code\u003e. The method should handle the task of pushing \u003ccode\u003eself\u003c/code\u003e into \u003ccode\u003e@@all\u003c/code\u003e.\nOnce written, update your code in \u003ccode\u003e#initialize\u003c/code\u003e so that it uses \u003ccode\u003e#save\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere is one method that we'll talk about together:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.clear_all\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eWhat happens if we want to clear out our list of existing dogs? It is not at all\nuncommon to want to \"reset\" or \"restart\" our program. You'll be building a class\nmethod, \u003ccode\u003e.clear_all\u003c/code\u003e, that does just that. This method should operate on the\n\u003ccode\u003e@@all\u003c/code\u003e array of existing dogs and empty that array. \u003cstrong\u003eHint:\u003c/strong\u003e look up the\n\u003ccode\u003eArray#clear\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch3\u003eA Note on Testing\u003c/h3\u003e\n\n\u003cp\u003eIn the test suite, you'll see this code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpect(Dog.class_variable_get(:@@all)).to match([])\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we are using the \u003ccode\u003e.class_variable_get(name_of_class_variable)\u003c/code\u003e method on\nthe \u003ccode\u003eDog\u003c/code\u003e class. This method introspects on the class on which it is called and\nretrieves the value of the class variable passed into the method as an argument.\nWe use it here in the test suite to check that you do in fact set a class\nvariable, \u003ccode\u003e@@all\u003c/code\u003e, equal to an empty array and that you fill that array up with\nnew dogs as they are instantiated.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0283c7e924f1d5a038857ee5ff238c83","title":"OO Relationships - My Pets Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-object-relationships-my-pets\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-my-pets/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-my-pets\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-object-relationships-my-pets/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjective\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Gain a deeper understanding of object relations.\u003c/li\u003e\n\u003cli\u003e Build classes that produce objects that interact with one another through\nassociations and behavior.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis is a test-driven lab. Use the test file and test output to understand what\nis being asked of you as you follow the guidelines below.\u003c/p\u003e\n\n\u003ch3\u003eOverview\u003c/h3\u003e\n\n\u003cp\u003eYou will be building an \u003ccode\u003eOwner\u003c/code\u003e, \u003ccode\u003eDog\u003c/code\u003e, and \u003ccode\u003eCat\u003c/code\u003e class. An Owner will\nknow about all their pets, be able to buy a pet, change a pet's mood through\nwalking or feeding it, and sell all of their pets (for when they\nmove to that tiny NYC studio after college).\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003eDog\u003c/code\u003e and a \u003ccode\u003eCat\u003c/code\u003e are initialized with a name and an \u003cstrong\u003eOwner object\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003ePart I: Object Models\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a \u003ccode\u003eDog\u003c/code\u003e and \u003ccode\u003eCat\u003c/code\u003e class that have the attributes required by the\ntest suite. Keep in mind, some of the attributes should be readable and writable\n(i.e. \u003ccode\u003eattr_accessor\u003c/code\u003es), while others may need to be \u003cem\u003ejust\u003c/em\u003e setters\n(\u003ccode\u003eattr_writer\u003c/code\u003e) or \u003cem\u003ejust\u003c/em\u003e getters (\u003ccode\u003eattr_reader\u003c/code\u003e). The test suite will make this\nclear so pay attention to the test output.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003ePart II: Object Relations\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAn owner should be able to buy and sell a pet, which will change the pet's mood.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen an owner buys a new pet, the \u003ccode\u003ebuy_cat/buy_dog\u003c/code\u003e methods \u003cstrong\u003etake in an\nargument of a \u003cem\u003ename\u003c/em\u003e.\u003c/strong\u003e You must take that name and do the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eMake a new instance of the appropriate pet, initializing it with that name\nand the owner who is purchasing it\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAn owner should have the ability to walk all their dogs or feed all their cats, which\nwill change the mood of all of their pets of that type to \"happy\".\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/module-1/ruby-oo-relationships/my-pets/Image_140_Relations_OwnerDogCat.png\" alt=\"Owner, Dogs and Cats\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThese are just a few hints and guidelines to help you through this lab. This lab\nis extensive and challenging. Rely on the guides here, refer to the previous\nCode Along on object relations, and \u003cstrong\u003eread the test output and test files\u003c/strong\u003e.\nNever forget to ask a question if you are stuck. And remember, as a\nprogrammer, your job is to \u003cem\u003efix broken code!\u003c/em\u003e Broken code is the norm, the\nbaseline, the starting point for all of the projects you will build. Embrace it!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc21949a16b1f6fcb095a1d8570ab9454","title":"Operattors","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"operators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/operators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/operators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/operators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the ternary operator (\u003ccode\u003e?:\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eUnderstand when to use the ternary operator\u003c/li\u003e\n\u003cli\u003eUnderstand the use of statement modifiers\u003c/li\u003e\n\u003cli\u003eReview using comparison operators and boolean operators.\u003c/li\u003e\n\u003cli\u003ePractice implementing control flow using \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eReviewing Operations\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll be combining our knowledge of operators (like comparison and boolean operators) with our new understanding of control flow using \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements. \u003c/p\u003e\n\n\u003cp\u003eThis lab will require you to use the comparison operators (\u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e==\u003c/code\u003e, etc.) and boolean operators that you learned about in the previous unit.\u003c/p\u003e\n\n\u003cp\u003eThis lab will require you to use a new operator that you haven't been introduced to before: the ternary operator.\u003c/p\u003e\n\n\u003ch2\u003eThe Ternary Operator \u003ccode\u003e?:\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eThe ternary operator (\u003ccode\u003e?:\u003c/code\u003e) is another type of comparison operator that is used in the context of \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e statements. Its best use case is to replace a simple \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statement where you're basically saying: if this is true do something; if it's false do something else. If you have an \u003ccode\u003eif\u003c/code\u003e statement that requires an \u003ccode\u003eelsif\u003c/code\u003e, a ternary operator is not the best choice. \u003c/p\u003e\n\n\u003cp\u003eLet's take this \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statement pair and express it with a ternary operator instead: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eage = 1\u003cbr\u003e\u003cbr\u003eif age \u0026lt; 2\u003cbr\u003e   \"baby\"\u003cbr\u003eelse\u003cbr\u003e   \"not a baby\"\u003cbr\u003eend \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember that if the condition associated with the \u003ccode\u003eif\u003c/code\u003e statement returns \u003ccode\u003etrue\u003c/code\u003e, then the code underneath the conditional line will execute. If it fails however, then the code underneath the \u003ccode\u003eelse\u003c/code\u003e will execute. In the above example, the value of the \u003ccode\u003eage\u003c/code\u003e variable is \u003ccode\u003e1\u003c/code\u003e; since this is less than \u003ccode\u003e2\u003c/code\u003e, the conditional will evaluate as \u003ccode\u003etrue\u003c/code\u003e and will then return the string \u003ccode\u003e\"baby\"\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the same code using the ternary operator: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eage = 1\u003cbr\u003e\u003cbr\u003eage \u0026lt; 2 ? \"baby\" : \"not a baby\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow does this work? In the above statement, the code before the \u003ccode\u003e?\u003c/code\u003e (\"question mark\") is evaluated as a boolean expression. If it returns true, the code on the left side of the \u003ccode\u003e:\u003c/code\u003e (\"colon\") will run, otherwise the code on the right will run. \u003c/p\u003e\n\n\u003cp\u003eIt's a way of expressing an \u003ccode\u003eif\u003c/code\u003e and an \u003ccode\u003eelse\u003c/code\u003e statement together on one line in this format:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econditional ? action_if_true : action_if_false\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eWhy Use the Ternary Operator?\u003c/h2\u003e\n\n\u003cp\u003eThe ternary operator has a few things going for it. First of all, as Rubyists, we like to think about design. Is our code needlessly complex? Are our methods too long? Is our code self-explanatory––i.e., can someone reading it easily understand what it does? These are good questions to keep in mind as you learn to build more and more complicated programs. In fact, Ruby is a language that lends itself particularly well to elegant design. There are many design patterns that you'll learn about later on in this course, but for now, just keep the above questions in mind. \u003c/p\u003e\n\n\u003cp\u003eOur first implementation of our are-you-a-baby? program required six lines of code. Using the ternary operator, we were able to implement the same behavior in only two lines! That's a great piece of refactoring!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eA Note on Usage:\u003c/strong\u003e \u003cem\u003eWe use the ternary operator in a case like the one here when the\u003c/em\u003e \u003ccode\u003eif\u003c/code\u003e \u003cem\u003e\u0026amp;\u003c/em\u003e \u003ccode\u003eelse\u003c/code\u003e \u003cem\u003estatement pair that we would otherwise construct is\u003c/em\u003e \u003cstrong\u003every simple.\u003c/strong\u003e \u003cem\u003eIf your situation requires\u003c/em\u003e \u003ccode\u003eif\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003eelsif\u003c/code\u003e \u003cem\u003estatements, then the switching is too complex for the ternary operator making it inappropriate to use.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eStatement Modifiers\u003c/h2\u003e\n\n\u003cp\u003eRuby has a useful feature called a statement modifier that allows you to put a conditional at the end of a statement. For example, let's consider this statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs \"Hey, it's 2015!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, we don't want to say \"Hey, it's 2015!\" every time this code is run. We only want to say it's 2015 if it's actually 2015. This is a good case for an \u003ccode\u003eif\u003c/code\u003e statement modifier.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethis_year = Time.now.year\u003cbr\u003eputs \"Hey, it's 2015!\" if this_year == 2015\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, with the statement modifier \u003ccode\u003eif this_year == 2015\u003c/code\u003e we are only putting it if the year is, in fact, 2015.\u003c/p\u003e\n\n\u003cp\u003eWe can also use \u003ccode\u003eunless\u003c/code\u003e in a statement modifier as well. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethis_year = Time.now.year\u003cbr\u003eputs \"Hey, it's not 2015!\" unless this_year == 2015\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this lab. \u003c/li\u003e\n\u003cli\u003eRun the test suite in your terminal and check out the error messages and expectations in the spec file. You'll be coding your solutions in \u003ccode\u003elib/operations.rb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe first method, \u003ccode\u003eunsafe?\u003c/code\u003e will take in an argument of a speed and return true if the speed is unsafe and false if it is safe. \n\n\u003cul\u003e\n\u003cli\u003eUse an \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statement pair to build the \u003ccode\u003eunsafe?\u003c/code\u003e method. It should return \u003ccode\u003etrue\u003c/code\u003e if the speed is either below \u003ccode\u003e40\u003c/code\u003e or above \u003ccode\u003e60\u003c/code\u003e. \u003cem\u003eGoing 30 mph on the freeway would be unsafe, as would going 95 mph. Going 50 miles per hour, however, would return \u003ccode\u003efalse\u003c/code\u003e as that's within the \"safe\" range.\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e Build the method \u003ccode\u003enot_safe?\u003c/code\u003e that is a version of your previous \u003ccode\u003eunsafe?\u003c/code\u003e method but use the ternary operator (\u003ccode\u003e?:\u003c/code\u003e) instead of an \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statement pair.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eA Debugging Reminder:\u003c/strong\u003e You can interact with your methods by typing \u003ccode\u003erequire 'pry'\u003c/code\u003e at the top of your file, running \u003ccode\u003egem install pry\u003c/code\u003e in the terminal, and then placing the line \u003ccode\u003ebinding.pry\u003c/code\u003e inside the method that you want to play around with. Then, when you run the test suite using \u003ccode\u003elearn test\u003c/code\u003e in your terminal, your program will freeze when it hits the binding and you'll be able to explore your method inside your console.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.techotopia.com/index.php/Ruby_Operators\"\u003eRuby Operators\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://stackoverflow.com/a/4252945\"\u003eStack Overflow - Ternary Operators\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7e693e2e50b6f4fb9478ec60152b3955","title":"Organizing Bears Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-organizing-bears-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-organizing-bears-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-organizing-bears-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-organizing-bears-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Timothy_Treadwell\"\u003eTimothy Treadwell\u003c/a\u003e has a lot on\nhis plate protecting the bears of the Katmai National Park in Alaska. Help him\nkeep track of all of his bear friends using SQL.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://m2.paperblog.com/i/74/746121/lagghiacciante-morte-delluomo-grizzly-sbranat-L-rr7aep.jpeg\" alt=\"timothy-treadwell\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003eCREATE TABLE\u003c/code\u003e command to create a new table with various data types\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eINSERT INTO\u003c/code\u003e command to insert data (i.e. rows) into a database table\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003eSELECT\u003c/code\u003e command with various functions and modifiers to write queries\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eLab Structure\u003c/h2\u003e\n\n\u003cp\u003eThis lab might seem a bit different than what you've seen before. Take a look at\nthe file structure:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── Gemfile\u003cbr\u003e├── README.md\u003cbr\u003e├── bin\u003cbr\u003e│\u0026nbsp;\u0026nbsp; ├── environment.rb # requires bundler and files\u003cbr\u003e│\u0026nbsp;\u0026nbsp; ├── run.rb # instantiates the SQLRunner class in the below file\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── sql_runner.rb # holds a class that handles executing your .sql files\u003cbr\u003e├── lib\u003cbr\u003e│\u0026nbsp;\u0026nbsp; ├── create.sql # where you create your schema\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── insert.sql # where you insert your data\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── seed.sql # data for in-memory database\u003cbr\u003e│\u0026nbsp;\u0026nbsp; └── sql_queries.rb # where you write your sql queries\u003cbr\u003e└── spec # all the specs\u003cbr\u003e    ├── create_spec.rb # this tests your create.sql file\u003cbr\u003e    ├── insert_spec.rb # this tests your insert.sql file\u003cbr\u003e    ├── select_spec.rb # this tests the queries you write in this file\u003cbr\u003e    └── spec_helper.rb\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eA Note on Testing\u003c/h3\u003e\n\n\u003cp\u003eLet's briefly go over what is happening in the \u003ccode\u003ebefore\u003c/code\u003e block that our tests will be using.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebefore do\u003cbr\u003e  @db = SQLite3::Database.new(':memory:')\u003cbr\u003e  @sql_runner = SQLRunner.new(@db)\u003cbr\u003e  @sql_runner.execute_create_file\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore each test two important things happen.\u003c/p\u003e\n\n\u003cp\u003eFirst, a new in-memory database is created. Why do we do this? Let's say we run\nour tests and they add ten items to our database. If we did not use an in-memory\nstore, those would be in there forever. This way our database gets thrown out\nafter every running of the tests. You can learn more about in-memory databases\n\u003ca href=\"https://www.sqlite.org/inmemorydb.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eNext, a new \u003ccode\u003eSqlRunner\u003c/code\u003e class is created. The \u003ccode\u003eSqlRunner\u003c/code\u003e class lives in your\n\u003ccode\u003ebin\u003c/code\u003e directory and was created to help connect to the database.\u003c/p\u003e\n\n\u003ch2\u003ePart 1: \u003ccode\u003eCREATE TABLE\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eGet the tests in \u003ccode\u003espec/create_spec.rb\u003c/code\u003e to pass. Your \u003ccode\u003eCREATE\u003c/code\u003e statement should\nlook something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE bears (\u003cbr\u003e  //columns here\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour columns should be the following types:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\u003ctr\u003e\n    \u003cth\u003ecolumn\u003c/th\u003e\n    \u003cth\u003etype\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eid\u003c/td\u003e\n    \u003ctd\u003einteger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ename\u003c/td\u003e\n    \u003ctd\u003etext\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eage\u003c/td\u003e\n    \u003ctd\u003einteger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003esex\u003c/td\u003e\n    \u003ctd\u003etext\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ecolor\u003c/td\u003e\n    \u003ctd\u003etext\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003etemperament\u003c/td\u003e\n    \u003ctd\u003etext\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003ealive\u003c/td\u003e\n    \u003ctd\u003eboolean\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eRead about \u003ca href=\"https://www.sqlite.org/datatype3.html\"\u003eSQLite3 Datatypes\u003c/a\u003e to\ndetermine what your insert values are going to be. Be sure to pay attention to\nhow booleans are expressed in SQLite3.\u003c/p\u003e\n\n\u003ch2\u003ePart 2: \u003ccode\u003eINSERT\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eGet the tests in \u003ccode\u003espec/insert_spec.rb\u003c/code\u003e to pass. Input the following 8 bears (you\ncan make up details about them, but make sex either 'M' or 'F'):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMr. Chocolate\u003c/li\u003e\n\u003cli\u003eRowdy\u003c/li\u003e\n\u003cli\u003eTabitha\u003c/li\u003e\n\u003cli\u003eSergeant Brown\u003c/li\u003e\n\u003cli\u003eMelissa\u003c/li\u003e\n\u003cli\u003eGrinch\u003c/li\u003e\n\u003cli\u003eWendy\u003c/li\u003e\n\u003cli\u003eunnamed (the bear that killed Tim didn't have a name; refer back to how to\ncreate a record that doesn't have one value)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003ePart 3: \u003ccode\u003eSELECT\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eGet the tests in \u003ccode\u003espec/select_spec.rb\u003c/code\u003e to pass. Note that for this section, the\ndatabase will be seeded with external data from the \u003ccode\u003elib/seed.sql\u003c/code\u003e file so don't\nexpect it to reflect the data you added above. Note: Since it's a Ruby file,\nwrite your queries as strings in the \u003ccode\u003elib/sql_queries.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou may be expected to use SQL statements that you're not particularly familiar\nwith. Make sure you use the resources and Google to find the right statements.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.sqlite.org/datatype3.html\"\u003eSQL Datatypes\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.sqlite.org/lang_select.html#resultset\"\u003eSQL GROUP BY\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga55b4477b47192f2accc26b54c5b52c2","title":"ORMs: Bringing It All Together","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-bringing-it-all-together\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-bringing-it-all-together/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-bringing-it-all-together\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-bringing-it-all-together/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand what an Object Relational Mapper(ORM) is.\u003c/li\u003e\n\u003cli\u003eGain ability to implement characteristics of an ORM when using a relational\ndatabase management system (RDBMS) in a ruby program.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis lab involves building a basic ORM for a Dog object.  The \u003ccode\u003eDog\u003c/code\u003e class\ndefined in \u003ccode\u003elib/dog.rb\u003c/code\u003e implements behaviors of a basic ORM.\u003c/p\u003e\n\n\u003ch3\u003e\u003cstrong\u003eEnvironment\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eOur environment is going to be a single point of requires and loads.  It is also\ngoing to define a constant, \u003ccode\u003eDB\u003c/code\u003e, whose sole responsibility is setting up and\nmaintaining connection to our application's database.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/dogs.db\")}\u003c/code\u003e \u003ccode\u003eDB\u003c/code\u003e is set equal to a\nhash, which has a single key, \u003ccode\u003e:conn\u003c/code\u003e. The key, \u003ccode\u003e:conn\u003c/code\u003e,  will have a value of\na connection to a sqlite3 database in the db directory.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHowever, in our \u003ccode\u003espec_helper\u003c/code\u003e, which is our testing environment, we're going to\nredefine the value of that key (not of the constant) to point to an in-memory\ndatabase. This will allow our tests to run in isolation of our production\ndatabase. Whenever we want to refer to the application's connection to the\ndatabase, we will simply rely on \u003ccode\u003eDB[:conn]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eSolving The Lab: The Spec Suite\u003c/h2\u003e\n\n\u003ch3\u003eStart with these methods\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e#attributes\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe first test is concerned solely with making sure that our dogs have all the\nrequired attributes and that they are readable and writable.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e method accepts a hash or keyword argument value with key-value\npairs as an argument. key-value pairs need to contain id, name, and breed.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e::create_table\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYour task  here is to define a class method on Dog that will execute the correct\nSQL to create a dogs table.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003enote:\u003c/strong\u003e You will notice below a new sign, \u003ccode\u003e::\u003c/code\u003e, placed before methods. Don't worry about it now. It allows methods defined within a class, to be accessed from anywhere outside that class.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe '::create_table' do\u003cbr\u003e  it 'creates a dogs table' do\u003cbr\u003e    DB[:conn].execute('DROP TABLE IF EXISTS dogs')\u003cbr\u003e    Dog.create_table\u003cbr\u003e\u003cbr\u003e    table_check_sql = \"SELECT tbl_name FROM sqlite_master WHERE type='table' AND tbl_name='dogs';\"\u003cbr\u003e    expect(DB[:conn].execute(table_check_sql)[0]).to eq(['dogs'])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur test first makes sure that we are starting with a clean database by\nexecuting the SQL command \u003ccode\u003eDROP TABLE IF EXISTS dogs\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNext we call the soon-to-be defined \u003ccode\u003ecreate_table\u003c/code\u003e method, which is responsible\nfor creating a table called dogs with the appropriate columns.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e::drop_table\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis method will drop the dogs table from the database.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe '::drop_table' do\u003cbr\u003e    it \"drops the dogs table\" do\u003cbr\u003e        Dog.drop_table\u003cbr\u003e\u003cbr\u003e      table_check_sql = \"SELECT tbl_name FROM sqlite_master WHERE type='table' AND tbl_name='dogs';\"\u003cbr\u003e      expect(DB[:conn].execute(table_check_sql)[0]).to be_nil\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is basically the exact opposite of the previous test. Your job is to define a\nclass method on \u003ccode\u003eDog\u003c/code\u003e that will execute the correct SQL to drop a dogs table.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e::new_from_db\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is an interesting method. Ultimately, the database is going to return an\narray representing a dog's data. We need a way to cast that data into the\nappropriate attributes of a dog. This method encapsulates that functionality.\nYou can even think of it as  \u003ccode\u003enew_from_array\u003c/code\u003e. Methods like this, that return\ninstances of the class, are known as constructors, just like \u003ccode\u003e.new\u003c/code\u003e, except that\nthey extend the functionality of \u003ccode\u003e.new\u003c/code\u003e without overwriting \u003ccode\u003einitialize\u003c/code\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e::find_by_name\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis spec will first insert a dog into the database and then attempt to find it\nby calling the find\u003cem\u003eby\u003c/em\u003ename method. The expectations are that an instance of the\ndog class that has all the properties of a dog is returned, not primitive data.\u003c/p\u003e\n\n\u003cp\u003eInternally, what will the \u003ccode\u003efind_by_name\u003c/code\u003e method do to find a dog; which SQL\nstatement must it run? Additionally, what method might \u003ccode\u003efind_by_name\u003c/code\u003e use\ninternally to quickly take a row and create an instance to represent that data?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e#update\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis spec will create and insert a dog, and afterwards, it will change the name\nof the dog instance and call update. The expectations are that after this\noperation, there is no dog left in the database with the old name. If we query\nthe database for a dog with the new name, we should find that dog and the ID of\nthat dog should be the same as the original, signifying this is the same dog,\nthey just changed their name.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e#save\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis spec ensures that given an instance of a dog, simply calling \u003ccode\u003esave\u003c/code\u003e will\ntrigger the correct operation. To implement this, you will have to figure out a\nway for an instance to determine whether it has been persisted into the DB.\u003c/p\u003e\n\n\u003cp\u003eIn the first test, we create an instance. Since it has never been saved\nbefore, specify that the instance will receive a method call to \u003ccode\u003einsert\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn the next test, we create an instance, save it, change its name, and then\nspecify that a call to the save method should trigger an \u003ccode\u003eupdate\u003c/code\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga8f20427aa24045a672062c08cc036a2","title":"Oxford Comma Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"oxford-comma\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/oxford-comma/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oxford-comma\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/oxford-comma/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIterate over array elements.\u003c/li\u003e\n\u003cli\u003eUse various methods to manipulate arrays and strings.\u003c/li\u003e\n\u003cli\u003eConvert data types.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConverting Types\u003c/h2\u003e\n\n\u003cp\u003eIn Ruby, there are a few methods available to us for converting data types. For\nexample, it is possible to convert a string to an array, an array into a string,\nor a range into an array, among other conversions. You can learn more about\nconversion \u003ca href=\"http://www.dotnetperls.com/convert-ruby\"\u003ehere\u003c/a\u003e, but for now we'll\njust take a look at a few.\u003c/p\u003e\n\n\u003ch4\u003eString to Array\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.split\u003c/code\u003e method will convert a string into an array. The \u003ccode\u003e.split\u003c/code\u003e method\ntakes an argument of the character in the string on which you want to split it.\nFor example, if we have a string that contains a comma-separated list of items:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\"hippo,giraffe,monkey,horse\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can call \u003ccode\u003e.split\u003c/code\u003e on it, with an argument of a \u003ccode\u003e,\u003c/code\u003e (\"comma\") to get an array\nof animal names:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"hippo,giraffe,monkey,horse\".split(\",\")\u003cbr\u003e  =\u0026gt; [\"hippo\", \"giraffe\", \"monkey\", \"horse\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eRange to Array\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.to_a\u003c/code\u003e method, when called on a range, can convert a range of numbers to an\narray:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(1..10).to_a\u003cbr\u003e  =\u0026gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eArray to String\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.join\u003c/code\u003e method, when called on an array, will convert it into a string. This\nmethod takes in an optional string argument containing either a character or a\nset of characters that will be inserted between each array element, as they are\nassembled into a string.\u003c/p\u003e\n\n\u003cp\u003eFor example, calling \u003ccode\u003e.join\u003c/code\u003e with \u003cem\u003eno\u003c/em\u003e argument will create a string out of the\narray's elements by placing each one directly adjacent to the next one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"a\", \"b\", \"c\"].join\u003cbr\u003e  =\u0026gt; \"abc\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut calling \u003ccode\u003e.join\u003c/code\u003e on the same array and giving it an argument of a \u003ccode\u003e\" :-) \"\u003c/code\u003e\n(\"smiley face\") will place an occurrence of that string, (i.e. the smiley face)\nbetween each letter:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\"a\", \"b\", \"c\"].join(\" :-) \")\u003cbr\u003e  =\u0026gt; \"a :-) b :-) c\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eFork and clone this lab.\u003c/li\u003e\n\u003cli\u003eWrite a method \u003ccode\u003eoxford_comma\u003c/code\u003e that takes an array of string elements as an\nargument and converts it into a string using the \u003ca href=\"http://en.wikipedia.org/wiki/Serial_comma\"\u003eOxford\ncomma\u003c/a\u003e. For example, the array\n\u003ccode\u003e[\"fiddleheads\",\"okra\",\"kohlrabi\"]\u003c/code\u003e should get converted to the string\n\u003ccode\u003e\"fiddleheads, okra, and kohlrabi\"\u003c/code\u003e.\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eYou will need to refer to the section above about converting arrays into strings, but note that coding this method will involve a couple of extra challenges.\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eRemember, strings can be operated on very similarly to arrays. For instance, you can add elements to the end of strings with the\u003c/em\u003e \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e \u003cem\u003e(\"shovel\") method just like you can with arrays.\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003elearn test\u003c/code\u003e and read through the errors to see the specific cases your\nmethod will need to handle.\u003c/li\u003e\n\u003cli\u003eThis might be a challenging lab, so take your time using Google and playing\naround with your code. Good luck and have fun!\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://en.wikipedia.org\"\u003eWikipedia\u003c/a\u003e - \u003ca href=\"http://en.wikipedia.org/wiki/Serial_comma\"\u003eSerial Comma\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.dotnetperls.com/convert-ruby\"\u003eDot Net Perls - Convert\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g189bd235addb2a25464fbf640725cb0e","title":"Parrot Lab - Methods and Return Values Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"parrot-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/parrot-ruby/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/parrot-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/parrot-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e Define a method that accepts arguments.\u003c/li\u003e\n\u003cli\u003e Create a default argument.\u003c/li\u003e\n\u003cli\u003e Practice returning a value.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab you'll be defining a method called \u003ccode\u003e#parrot\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#parrot\u003c/code\u003e method should accept an argument of a string and both \u003ccode\u003e#puts\u003c/code\u003e out\nthat string \u003cem\u003eand\u003c/em\u003e return the string at the end of the method.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#parrot\u003c/code\u003e method should have a default argument of \u003ccode\u003e\"Squawk!\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eThis lab is explicitly testing your ability to control the return value of a\nmethod, not just what it does, but what it returns. Remember, return values are\nimportant. Ask yourself? what is the return value of \u003ccode\u003e#puts\u003c/code\u003e?\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.skorks.com/2009/08/method-arguments-in-ruby/\"\u003eSkorks Blog - Arguments With Default Value\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb6213b53ecd7a0428be32e9e385f8a33","title":" Phase 3 Code Challenge: Movies - with AR","type":"Assignment","content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"phase-3-movies.zip\" href=\"viewer/files/Uploaded%20Media/phase-3-movies.zip?canvas_=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\"\u003ephase-3-movies.zip\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a file upload","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6e01aeda86bde6b206df9c37fd388242","title":"Phase 3 Project - Rack \u0026 React","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Phase_3_Ruby_Group_Project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/Phase_3_Ruby_Group_Project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Phase_3_Ruby_Group_Project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Phase_3_Ruby_Group_Project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch3\u003eOption One - \u003cem\u003eData Analytics Project\u003c/em\u003e\n\u003c/h3\u003e  \u003col\u003e \u003cli\u003eAccess a Sqlite3 Database using ActiveRecord.\u003c/li\u003e \u003cli\u003eYou should have at minimum three models including one join model. This means you must have a many-to-many relationship.\u003c/li\u003e \u003cli\u003eYou should seed your database using data that you collect either from a CSV, a website by scraping, or an API.\u003c/li\u003e \u003cli\u003eYour models should have methods that answer interesting questions about the data. For example, if you've collected info about movie reviews, what is the most popular movie? What movie has the most reviews?\u003c/li\u003e \u003cli\u003eYou should provide a simple \u003cstrong\u003eReact\u003c/strong\u003e frontend to display the return values of your interesting methods.\u003c/li\u003e \u003cli\u003eUse good OO design patterns. You should have separate classes for your models\u003c/li\u003e \u003c/ol\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eResource:\u003c/strong\u003e \u003ca href=\"http://github.com/learn-co-curriculum/easy-access-apis\"\u003eEasy Access APIs\u003c/a\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eOption Two - \u003cem\u003eCRUD App\u003c/em\u003e\n\u003c/h3\u003e  \u003col\u003e \u003cli\u003eAccess a Sqlite3 Database using ActiveRecord.\u003c/li\u003e \u003cli\u003eYou should have a minimum of three models.\u003c/li\u003e \u003cli\u003eYou should build out a simple \u003cstrong\u003eReact\u003c/strong\u003e frontend to give your user full CRUD ability for at least one of your resources. For example, build out a To-Do list. A user should be able to create a new to-do, see all todos, update a todo item, and delete a todo. Todos can be grouped into categories, so that a to-do has many categories and categories have many to-dos.\u003c/li\u003e \u003cli\u003eUse good OO design patterns. You should have separate classes for your models.  Getting started Clone down this repository to use as your backend. The rack folder has all of the basics for a rack application.  The application.rb has an example GET route.  Run the rack server\u003cbr\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eGetting Started\u003c/h3\u003e  \u003col\u003e \u003cli\u003eClone down this repository.\u003cbr\u003e\n\u003c/li\u003e \u003cli\u003eA basic rack app is located in the backend folder. \u003c/li\u003e \u003cli\u003eFirst run \u003cem\u003ebundle\u003c/em\u003e in your backend folder to install your gems\u003c/li\u003e \u003cli\u003eapplication.rb has an example GET route, replace this route with routes for your project! \u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eStart your server with:\u003c/strong\u003e \u003ccode\u003eshotgun --port=9292\u003c/code\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e This will run your server on port \u003ca href=\"http://localhost:9292\"\u003ehttp://localhost:9292\u003c/a\u003e.  \u003ca href=\"https://github.com/rtomayko/shotgun\"\u003eshotgun\u003c/a\u003e is a ruby gem that will automatic reload your rack server. You may still need to refresh your browser to see changes. \u003c/p\u003e \u003c/blockquote\u003e  \u003col\u003e \u003cli\u003eYour backend and your frontend should be in two different repositories. Create a new repository with a react app for your frontend. \u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eFetch example\u003c/strong\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eYour react app should make fetch requests to your rack backend! \u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003e   fetch(\"http://localhost:9292/test\")\u003cbr\u003e    .then(res =\u0026gt; res.json())\u003cbr\u003e    .then(console.log) \u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g806b245ebb4565da1af45fae9b69817b","title":"Rack Responses Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rack-responses-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rack-responses-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-responses-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rack-responses-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eLet's create a quick time-appropriate greeter application\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eEdit your code in \u003ccode\u003eapp/application.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCreate your application with the following conditions:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIf it's before noon, greet the user with \"Good Morning!\"\u003c/li\u003e\n\u003cli\u003eIf it's after noon, greet the user with \"Good Afternoon!\". Remember that\n getting the time may return results in 24 hour time! Anytime on or after 12\n is the afternoon.\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfbd3d06c8ed1828a7d6b9bb7797aa4da","title":"Reduce Data from an Array of Arrays Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-arrays-iteration-lab-part-3\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-3/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-3\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-arrays-iteration-lab-part-3/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFor the final lab on traversing \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es, we're going to apply the\ndouble \u003ccode\u003ewhile\u003c/code\u003e loop to find a single value.\u003c/p\u003e\n\n\u003ch2\u003eTraverse \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eArray\u003c/code\u003es to Produce a Single Value\u003c/h2\u003e\n\n\u003cp\u003eAnother variant on traversing nested Arrays is traversing the matrix and\naccumulating all the values. Let's imagine that someone created a grid\nrepresenting a guessing game. In each cell of the grid, the games makers have put\nsome amount of cash. Let's sum up all the possible values to determine how much\nmoney is in the grid.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eguessing_game_grid = [\u003cbr\u003e [1, 2, 1, 7, 3],\u003cbr\u003e [2, 100, 15, 4, 18],\u003cbr\u003e [15, 16, 99, 1, 2, 11]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003etotal = 0\u003cbr\u003erow_index = 0\u003cbr\u003ewhile row_index \u0026lt; guessing_game_grid.count do\u003cbr\u003e  element_index = 0\u003cbr\u003e  while element_index \u0026lt; guessing_game_grid[row_index].count do\u003cbr\u003e    total += guessing_game_grid[row_index][element_index]\u003cbr\u003e    element_index += 1\u003cbr\u003e  end\u003cbr\u003e  row_index += 1\u003cbr\u003eend\u003cbr\u003etotal #=\u0026gt; 297\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis pattern is known as reduction because you're going to reduce a nested data\nstructure to a single value. As you learn Ruby's Enumerable methods, remembering\nthis name will help a lot!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be working with a mix of data types - nested arrays with\nstrings and numbers. We need to extract out the strings from this data, ignoring\nthe numbers.\u003c/p\u003e\n\n\u003cp\u003eWrite a method, \u003ccode\u003ejoin_nested_strings\u003c/code\u003e, that can take in an array of arrays of\nintegers \u003cem\u003eand\u003c/em\u003e strings. This method should iterate over each nested array,\ncombining all the strings into a single string value.\u003c/p\u003e\n\n\u003cp\u003eFor example, given the code below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emixed_data = [\u003cbr\u003e  [\"The\", 4, \"quick\"],\u003cbr\u003e  [-1, \"brown\", \"fox\", 30],\u003cbr\u003e  [\"studied\", 101, 233, \"Ruby\"]\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003ejoin_nested_strings(mixed_data)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe should expect the following returned:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"The quick brown fox studied Ruby\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Don't worry if your resulting string has an extra space at the end -\nthe tests will ignore it.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe've seen examples of methods like \u003ccode\u003e.join\u003c/code\u003e that combine arrays of strings, but\nin this situation, we need something more customizable. We were able to take a\nset of 'dirty' data and reduce it down to a single value, something that \u003ccode\u003e.join\u003c/code\u003e\nwould not be able to accomplish on its own.\u003c/p\u003e\n\n\u003cp\u003eYou may have noticed that when we're discussing nested data structures - a lot of\nthe concepts we are introducing are things we've seen in regular arrays. At the\ncore of our implementations, we're performing operations that we're familiar\nwith - using conditional statements, combining values, pushing data into arrays,\netc... We're incorporating these basic tasks with loops to produce custom data\ntools.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7ba87737f6190bc5e30ae5b1a2917b08","title":"Requiring Files","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-building-applications-requiring-files\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-requiring-files/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-requiring-files\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-requiring-files/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize how code on different files can be loaded when running a single file\u003c/li\u003e\n\u003cli\u003eUnderstand how to require files when running a Ruby application\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, most of the labs we've seen have a similar file structure — they\ntypically have a \u003ccode\u003elib\u003c/code\u003e folder and a \u003ccode\u003espec\u003c/code\u003e folder and some files like\n\u003ccode\u003eREADME.md\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── lib\u003cbr\u003e│   └── ruby_file.rb\u003cbr\u003e└── spec\u003cbr\u003e    ├── ruby_file_spec.rb\u003cbr\u003e    └── spec_helper.rb\u003cbr\u003e├── Gemfile\u003cbr\u003e├── README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs we expand our understanding of programming in Ruby and start to work with\nlarger, more complex applications, we'll start to see more pieces and components\nbeing added — run files and environment files to start. Then, we'll start\nseeing things like database folders and before long, we'll see many files in\nmany folders, all doing their small part for the application.\u003c/p\u003e\n\n\u003cp\u003eWith all these files separated out into different folders, how is it that they\nare able to work together? In this lesson, we're going to provide an answer to\nthis question and take a deeper look at requiring files.\u003c/p\u003e\n\n\u003ch2\u003eClasses Defined in the Same File\u003c/h2\u003e\n\n\u003cp\u003eLet's take a look at a pair of example classes to get started. If we define two\nclasses in the same file, we can interact with both classes immediately after\nthey are defined. Consider the following 'belongs-to' / 'has-many' association\nbetween \u003ccode\u003eGarden\u003c/code\u003e and \u003ccode\u003ePlant\u003c/code\u003e classes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Garden\u003cbr\u003e  attr_accessor :name\u003cbr\u003e\u003cbr\u003e  def initialize(name:)\u003cbr\u003e    @name = name\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def plants\u003cbr\u003e    Plant.all.select do |plant|\u003cbr\u003e      plant.garden == self\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eclass Plant\u003cbr\u003e  attr_accessor :garden, :name\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize(name:)\u003cbr\u003e    @name = name\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003elawn = Garden.new(name: 'Front Lawn') # we can call Garden.new because Garden is defined above\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil') # we can call Plant.new because Plant is defined above\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn # we can associate a plant and a garden because both are defined above\u003cbr\u003e\u003cbr\u003ep lawn.plants\u003cbr\u003e# =\u0026gt; [#\u0026gt;, #\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: This code is available in \u003ccode\u003elib/example.rb\u003c/code\u003e and can be tested by running \u003ccode\u003eruby lib/example.rb\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn the above code, we can call both \u003ccode\u003eGarden\u003c/code\u003e and \u003ccode\u003ePlant\u003c/code\u003e at the end because both\nclasses have been defined in the file. Notice, too, that \u003ccode\u003eGarden\u003c/code\u003e includes a\nmethod, \u003ccode\u003eplants\u003c/code\u003e, that calls \u003ccode\u003ePlant.all\u003c/code\u003e. \u003ccode\u003eGarden\u003c/code\u003e \u003cem\u003eneeds\u003c/em\u003e to know about the\n\u003ccode\u003ePlant\u003c/code\u003e class, and with the setup above, it does.\u003c/p\u003e\n\n\u003ch2\u003eClasses Defined in Different Files\u003c/h2\u003e\n\n\u003cp\u003eIf we define the example classes in separate files, they won't automatically\nknow about each other or have access to one another. In the \u003ccode\u003elib\u003c/code\u003e folder,\n\u003ccode\u003ePlant\u003c/code\u003e and \u003ccode\u003eGarden\u003c/code\u003e are separated into their own files, \u003ccode\u003eplant.rb\u003c/code\u003e and\n\u003ccode\u003egarden.rb\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e├── lib\u003cbr\u003e│   └── example.rb\u003cbr\u003e│   └── garden.rb\u003cbr\u003e│   └── plant.rb\u003cbr\u003e├── CONTRIBUTING.md\u003cbr\u003e├── LICENSE.md\u003cbr\u003e├── README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn \u003ccode\u003elib/garden.rb\u003c/code\u003e, below the \u003ccode\u003eGarden\u003c/code\u003e class, the same code from the previous\nexample is written:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# lib/garden.rb\u003cbr\u003e\n...\u003cbr\u003e\u003cbr\u003elawn = Garden.new(name: 'Front Lawn')\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil')\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn\u003cbr\u003e\u003cbr\u003ep lawn.plants\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt the moment, if we try to run the file (\u003ccode\u003eruby lib/garden.rb\u003c/code\u003e), we get an error\nregarding an \u003ccode\u003euninitialized constant Plant (NameError)\u003c/code\u003e. For one file to have\naccess to code written in another file, we need to tell Ruby to \u003cem\u003erequire\u003c/em\u003e that\nother file.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003erequire_relative\u003c/code\u003e and \u003ccode\u003erequire\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eBy requiring a file, we are telling Ruby, 'go load the code that exists in this\nfile.' We have two ways to tell Ruby to do this: \u003ccode\u003erequire_relative\u003c/code\u003e and\n\u003ccode\u003erequire\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003erequire_relative\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://apidock.com/ruby/Kernel/require_relative\"\u003erequire_relative\u003c/a\u003e accepts a \u003cem\u003erelative file path\u003c/em\u003e to the file we want to\nrequire. This means we're providing a file path that starts from the file in\nwhich the \u003ccode\u003erequire_relative\u003c/code\u003e statement is called.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative '../lib/ruby_file.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example above, \u003ccode\u003e..\u003c/code\u003e would mean that inside the \u003cem\u003eparent folder\u003c/em\u003e of the\n\u003cem\u003ecurrent file\u003c/em\u003e being run, there should be a \u003ccode\u003elib\u003c/code\u003e folder with a file inside it,\n\u003ccode\u003eruby_file.rb\u003c/code\u003e. When dealing with applications that have many neighboring files,\nwe'll be using \u003ccode\u003erequire_relative\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSince an application can be installed in many places on a computer, any internal\nfile requirements should be relative to each other.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003erequire\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://apidock.com/ruby/v2_5_5/Kernel/require\"\u003erequire\u003c/a\u003e accepts an \u003cem\u003eabsolute file path\u003c/em\u003e, meaning a file location relative to\nthe \u003cem\u003eroot\u003c/em\u003e directory. \u003ccode\u003erequire\u003c/code\u003e will also accept shortened names, and checks if\nany matches are found in the directories located in your shell's \u003ca href=\"http://www.linfo.org/path_env_var.html\"\u003ePATH\nvariable\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe don't often require files using their absolute path, but we will frequently\nrequire files using a shortened name. You may have already seen this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'pry'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePry is a Gem, a bundle of preexisting code that we can install on our computers.\nWhen we write \u003ccode\u003erequire 'pry'\u003c/code\u003e, we are telling Ruby to load that bundle of code\nup before continuing. Once loaded, we will have access to whatever classes and\nmodules are defined in \u003ccode\u003epry\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eRequiring \u003ccode\u003eplant.rb\u003c/code\u003e from \u003ccode\u003egarden.rb\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eNow that we know the syntax for requiring files, we can apply it to our example\nof \u003ccode\u003elib/garden.rb\u003c/code\u003e and \u003ccode\u003elib/plant.rb\u003c/code\u003e. At the top of \u003ccode\u003elib/garden.rb\u003c/code\u003e, add the\nfollowing line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative './plant.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we're indicating to Ruby that there is a file, \u003ccode\u003eplant.rb\u003c/code\u003e located in the\nsame folder relative to the current file. With this added, if you try \u003ccode\u003eruby\nlib/garden.rb\u003c/code\u003e again, you should see it print out the expected \u003ccode\u003ePlant\u003c/code\u003e\ninstances.\u003c/p\u003e\n\n\u003cp\u003eIn this example, we only have two classes, but with \u003ccode\u003erequire_relative\u003c/code\u003e, we can\nhave as many classes as we want, each in a separate file. As long as they are\nall required in the file that we run, they'll get loaded.\u003c/p\u003e\n\n\u003ch3\u003eLocal Variables\u003c/h3\u003e\n\n\u003cp\u003eIt is important to note that both \u003ccode\u003erequire\u003c/code\u003e and \u003ccode\u003erequire_relative\u003c/code\u003e will not load\nlocal variables - \u003cem\u003eonly\u003c/em\u003e functions, modules, and classes.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eRuby applications are often divided up among many files, and when an application\nruns, it typically needs a way to \u003cem\u003eload\u003c/em\u003e those various files so it has access to\nall the code.\u003c/p\u003e\n\n\u003cp\u003eYou've experienced this many times already - every time you work on a Ruby lab\nand run the tests, the files where you write your solution are being loaded into\nthe files that are running the tests. This is done through a file called\n\u003ccode\u003espec_helper.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe exact workings of RSpec and the \u003ccode\u003espec_helper.rb\u003c/code\u003e file are beyond the scope\nof this lesson, but the underlying premise is the same as what we did in this\nlesson.\u003c/p\u003e\n\n\u003cp\u003eThis is so common and so critical to Ruby applications that it became common to\ninclude a file dedicated to the task of requiring files and loading up any\nneeded code when an application is run. In the next lesson, we'll take a closer\nlook at this file, typically known as \u003ccode\u003eenvironment.rb\u003c/code\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga6b5fae58c918a3aa3758719bba020b3","title":"Reverse Each Word Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"reverse-each-word\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/reverse-each-word/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/reverse-each-word\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/reverse-each-word/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the return value of the each method\u003c/li\u003e\n\u003cli\u003eUse the .collect method\u003c/li\u003e\n\u003cli\u003eUnderstand the return value of the .collect method\u003c/li\u003e\n\u003cli\u003eUse the return of collect for further operation\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eWrite a method called \u003ccode\u003ereverse_each_word\u003c/code\u003e that takes in a string argument of a sentence and returns that same sentence with each word reversed in place.\u003c/p\u003e\n\n\u003cp\u003eFirst solve it using \u003ccode\u003e.each\u003c/code\u003e Then utilize the same method using \u003ccode\u003e.collect\u003c/code\u003e to see the difference.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereverse_each_word(\"Hello there, and how are you?\")\u003cbr\u003e  #=\u0026gt; \"olleH ,ereht dna woh era ?uoy\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eYou can't use an enumerator on a string, so how can we turn our string into an array?\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e \u003cem\u003eHow can we reverse each word and return those altered words? Remember that\u003c/em\u003e \u003ccode\u003e.each\u003c/code\u003e \u003cem\u003ereturns the original array but other enumerators don't.\u003c/em\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0163b243905c41fc9ad2d0d2a2b43335","title":"Say Hello - Default Arguments Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"say-hello-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/say-hello-ruby/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/say-hello-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/say-hello-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild a method that can be called with an optional argument by defining that method with a default argument.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou will build a method called \u003ccode\u003esay_hello\u003c/code\u003e. This method should accept the argument of a person's name. It then should print \u003ccode\u003e\"Hello \"\u003c/code\u003e with the name followed by an exclamation point (don't forget that space after the \"Hello\"). For instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# I call on the method, say_hello, and give it the string \"Gabriela\" \u003cbr\u003esay_hello(\"Gabriela\")\u003cbr\u003e\u003cbr\u003e# The method prints this text to the screen:\u003cbr\u003eHello Gabriela!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere is one more thing this method should do: if you call on this method and forget to give it the name of a person, it should just say, \u003ccode\u003e\"Hello Ruby Programmer!\"\u003c/code\u003e. Use a default argument to accomplish this!\u003c/p\u003e\n\n\u003ch2\u003eSteps\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRun \u003ccode\u003elearn test\u003c/code\u003e to see where you stand. \n\n\u003cul\u003e\n\u003cli\u003eYou probably got two NoMethodErrors. This means the test was looking for a method called \u003ccode\u003esay_hello\u003c/code\u003e but couldn't find it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDefine the method in \u003ccode\u003esay_hello.rb\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003eRun \u003ccode\u003elearn test\u003c/code\u003e again. Are you getting a different error? If you haven't seen this error, guess what it's trying to tell you then Google it with the word \"ruby\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGet all the tests to pass!\u003c/li\u003e\n\u003cli\u003eOnce all of the tests are passing, use \u003ccode\u003elearn submit\u003c/code\u003e to submit your lab. \u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g530fa33518630f6565ea2ea493a4e5ca","title":"Scraping Code-Along","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"scraping-flatiron-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/scraping-flatiron-code-along/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/scraping-flatiron-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/scraping-flatiron-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eScrape a web page's HTML using Nokogiri.\u003c/li\u003e\n\u003cli\u003eUse scraped data to give attributes to Ruby objects.\u003c/li\u003e\n\u003cli\u003eWrite an object-oriented Scraper class.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eOne of the most common use-cases for web scraping involves you, the programmer,\nscraping data that you will then use to instantiate your own Ruby objects. In\nthis lab, we'll be scraping a static site that displays the course offerings of\nthe Flatiron School. We'll be using the scraped data to create our own \u003ccode\u003eCourse\u003c/code\u003e\nobjects. Each instance of the \u003ccode\u003eCourse\u003c/code\u003e class will have a series of attributes.\nThe values of each of these attributes will be scraped from the website.\u003c/p\u003e\n\n\u003cp\u003eWe'll be creating two classes, \u003ccode\u003eScraper\u003c/code\u003e and \u003ccode\u003eCourse\u003c/code\u003e. The \u003ccode\u003eScraper\u003c/code\u003e class will\nbe responsible for using Nokogiri to scrape the relevant data. It will also be\nresponsible for taking that data and using it to instantiate instances of the\n\u003ccode\u003eCourse\u003c/code\u003e class.\u003c/p\u003e\n\n\u003ch2\u003eCode Along I: The \u003ccode\u003eCourse\u003c/code\u003e Class\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eFork and clone this lab to get started!\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eBefore we build our \u003ccode\u003eScraper\u003c/code\u003e, we'll build the \u003ccode\u003eCourse\u003c/code\u003e class. We know that the\npurpose of our scraper is to get data to assign to the attributes of \u003ccode\u003eCourse\u003c/code\u003e\nclass instances.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the site we'll be scraping in order to get a sense of what\nattributes we should give our \u003ccode\u003eCourse\u003c/code\u003e class instances. Go ahead and open up\n\u003ca href=\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"\u003ehttp://learn-co-curriculum.github.io/site-for-scraping/courses\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eScroll down until you are looking at the list of course offerings:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%202.00.13%20PM.png\" alt=\"course list\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can see that each course has a title, a schedule (either Part- or Full-Time)\nand a description. This seems like a great place to start in terms of defining\nour own \u003ccode\u003eCourse\u003c/code\u003e class objects.\u003c/p\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/course.rb\u003c/code\u003e and define your class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Course\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, let's run \u003cem\u003ejust\u003c/em\u003e the \u003ccode\u003eCourse\u003c/code\u003e specs by typing \u003ccode\u003erspec spec/course_spec.rb\u003c/code\u003e\nin the terminal. You should see the following test output:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%202.53.11%20PM.png\" alt=\"spec error output\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLooks like we have some methods to define. Let's start with the instance method\ntests. The test output tells us that we need setters and getters for \u003ccode\u003etitle\u003c/code\u003e,\n\u003ccode\u003eschedule\u003c/code\u003e and \u003ccode\u003edescription\u003c/code\u003e. Let's make them \u003ccode\u003eattr_accessors\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Course\u003cbr\u003e  attr_accessor :title, :schedule, :description\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo ahead and run the test suite again. Now we should be passing all of our\ninstance method tests! But not our class method tests...\u003c/p\u003e\n\n\u003cp\u003eLet's write the \u003ccode\u003e.all\u003c/code\u003e and \u003ccode\u003e.reset_all\u003c/code\u003e class methods. You should be familiar\nwith the usage of the \u003ccode\u003e.all\u003c/code\u003e class method at this point — remember that\nevery time an instance of the class is initialized, we should push it into the\n\u003ccode\u003e@@all\u003c/code\u003e class variable. Get these tests passing with the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Course\u003cbr\u003e\u003cbr\u003e  attr_accessor :title, :schedule, :description\u003cbr\u003e\u003cbr\u003e  @@all = []\u003cbr\u003e\u003cbr\u003e  def initialize\u003cbr\u003e    @@all \u0026lt;\u0026lt; self\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.all\u003cbr\u003e    @@all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def self.reset_all\u003cbr\u003e    @@all.clear\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the \u003ccode\u003eCourse\u003c/code\u003e specs again and we should be passing all the tests. We're ready\nto write our \u003ccode\u003eScraper\u003c/code\u003e!\u003c/p\u003e\n\n\u003ch2\u003eCode Along II: The \u003ccode\u003eScraper\u003c/code\u003e Class\u003c/h2\u003e\n\n\u003cp\u003eStart by running the \u003ccode\u003eScraper\u003c/code\u003e specs with the \u003ccode\u003erspec spec/scraper_spec.rb\u003c/code\u003e line\nin your terminal. You should see failing tests that describe several methods.\nLet's run through the desired behavior of each method:\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003e#get_page\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#get_page\u003c/code\u003e instance method will be responsible for using Nokogiri and\n\u003ccode\u003eopen-uri\u003c/code\u003e to grab the entire HTML document from the web page.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003e#get_courses\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#get_courses\u003c/code\u003e instance method will be responsible for using a CSS selector\nto grab all of the HTML elements that contain a course. In other words, the\nreturn value of this method should be a collection of Nokogiri XML elements,\neach of which describes a course offering. We're going to have to examine the\npage with the element inspector to find the CSS selector that contains the\ncourses.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003e#make_courses\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#make_courses\u003c/code\u003e method will be responsible for actually instantiating\n\u003ccode\u003eCourse\u003c/code\u003e objects and giving each course object the correct \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003eschedule\u003c/code\u003e\nand \u003ccode\u003edescription\u003c/code\u003e attribute that we scraped from the page.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003e#print_courses\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#print_courses\u003c/code\u003e method we made for you! It calls on \u003ccode\u003e.make_courses\u003c/code\u003e and\nthen iterates over all of the courses that get created to \u003ccode\u003eputs\u003c/code\u003e out a list of\ncourse offerings. We gave you this freebie so that we can easily see how cool it\nis to scrape data and make real live Ruby objects with it.\u003c/p\u003e\n\n\u003cp\u003eNow that we have a basic concept of the methods we're expected to build, we're\ngoing to ignore them (surprise!). We've already discussed how tricky it is to\nscrape data from a web page. It is a very precise process and it takes \u003cem\u003ea lot\u003c/em\u003e\nof playing around in Pry to find the right CSS selectors for the desired data.\nSo, we're going to start by building our \u003ccode\u003e#get_page\u003c/code\u003e method. \u003cstrong\u003eAs soon as we get\nthe HTML document using Nokogiri, we will drop into our program using Pry and\nplay around with CSS selectors until we find what we're looking for\u003c/strong\u003e. Once we\nhave working code, we'll worry about organizing the appropriate code into the\nabove-described methods.\u003c/p\u003e\n\n\u003ch3\u003eGetting the HTML Doc and Finding Our Selectors\u003c/h3\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/scraper.rb\u003c/code\u003e and define the \u003ccode\u003e.get_page\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e      # more code coming soon!\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we are already requiring Nokogiri, open-uri and Pry at the top of\nthe file. We are ready to use Nokogiri and open-uri to get our HTML. Add the\nfollowing line to your \u003ccode\u003e.get_page\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc = Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we'll place a \u003ccode\u003ebinding.pry\u003c/code\u003e on the next line. At the bottom of the file,\noutside of the class definition, we'll call \u003ccode\u003eScraper.new.get_page\u003c/code\u003e. That way,\nwe'll hit our binding and be able to play around with the HTML document in the\nterminal in order to find the CSS selectors we're looking for:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e      doc = Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003cbr\u003e\u003cbr\u003e      binding.pry\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eScraper.new.get_page\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce your file looks like the code above, run the file with \u003ccode\u003eruby\nlib/scraper.rb\u003c/code\u003e in your terminal. Once you hit your binding, type the \u003ccode\u003edoc\u003c/code\u003e\nvariable into the terminal and you should see the HTML document, retrieved for\nus by Nokogiri and open-uri. You should see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%204.25.06%20PM.png\" alt=\"retrieved doc\"\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote: When you hit the pry, you may end up with a prompt that looks like this \u003ccode\u003e:\u003c/code\u003e. That just means there's a lot of text and you can scroll up and down using the arrow keys. If you need to escape this prompt so you can type in \u003ccode\u003edoc\u003c/code\u003e, then you simply have to press \u003ccode\u003eq\u003c/code\u003e or the \u003ccode\u003eesc\u003c/code\u003e key.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIf you scroll down in your terminal, you should see more and more of the HTML\ndocument.\u003c/p\u003e\n\n\u003cp\u003eOkay, we're ready to find the CSS selector that will grab the course offering\nfrom the HTML document. How should we go about doing this? Should we guess?\nShould we manually read the entire HTML document, looking for the HTML elements\nthat contain the course offerings? Nope. We're going to revisit the Flatiron\nwebsite in the browser and use the developer tools of our browser to inspect the\nelements.\u003c/p\u003e\n\n\u003cp\u003eClick on \u003ca href=\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"\u003ethis link\u003c/a\u003e and once again scroll down to the section of the page\nthat lists the course offerings. Right click on any course offering and select\n\"inspect element\". You should see something like this in your browser:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%204.38.49%20PM.png\" alt=\"inspect element browser console\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's take a closer look at the highlighted line in the element inspector:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003carticle class=\"post same-height-left\" style=\"height: 489px;\"\u003e\n\u003c/article\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooks like the element that contains an individual course has a class of \"post\".\nLet's use this CSS selector of \u003ccode\u003e.post\u003c/code\u003e to try to grab \u003cem\u003eall\u003c/em\u003e courses.\u003c/p\u003e\n\n\u003cp\u003eGo back to your terminal and execute the following line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%204.44.13%20PM.png\" alt=\"doc.css output\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhoa! That's a lot of XML. But, if you take a closer look at the content, you'll\nsee that these Nokogiri XML elements do describe the individual courses. You'll\nnotice course titles and descriptions, among other pieces of information.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e You can scroll down and view more of a long document like this in\nPry by using the down arrow key. To stop scrolling and free up the command line\nso that you are still in Pry but able to type in and execute lines of code, hit\n\u003ccode\u003eq\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOkay, now that we have a working line of code for grabbing all of the courses\nfrom the page, let's operate on those courses in order to find the title,\nschedule and description of each one.\u003c/p\u003e\n\n\u003ch3\u003eFinding CSS Selectors for The Desired Attributes\u003c/h3\u003e\n\n\u003cp\u003eWe know that a collection of Nokogiri XML elements functions like an array. So,\nit makes sense that we can iterate over the collection with an enumerator like\n\u003ccode\u003e.each\u003c/code\u003e or \u003ccode\u003e.collect\u003c/code\u003e in order to grab the title, schedule and description of\neach one. BUT, before we worry about iterating, lets grab \u003cem\u003ejust one element\u003c/em\u003e and\ntry to identify the correct CSS selectors for title, schedule and description.\u003c/p\u003e\n\n\u003cp\u003eIn your terminal, execute \u003ccode\u003edoc.css(\".post\").first\u003c/code\u003e. This will grab us just the\nfirst element from the collection. You should see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%204.52.21%20PM.png\" alt=\"first doc.css output\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis describes \u003cem\u003ejust one course offering\u003c/em\u003e. If you look closely, you'll see it\ncontains all the info we need. You can see the title, the schedule and the\ndescription. The easiest way to ID the correct CSS selector for extracting this\ninformation, however, is to revisit the web page and examine a course offering\nwith our \"inspect element\" tool.\u003c/p\u003e\n\n\u003ch4\u003eScraping Course Title\u003c/h4\u003e\n\n\u003cp\u003eGo back to the \u003ca href=\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"\u003esite\u003c/a\u003e and open up the element inspector again. Click the\nselector tool in the upper left of your console (it looks like an arrow cursor\npointing into a box) then hover over the title of the first course offering. You\nshould see a tag appear when you hover over the course title with this tool. The\ntag should say \u003ccode\u003eh2 750.428 x 28px\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe don't care about the height and width but we \u003cem\u003edo\u003c/em\u003e care about the selector,\n\u003ccode\u003eh2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTest the following code in your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"h2\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following returned to you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[#]\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe're so close! The course title is right there, inside the Nokogiri::XML:Text\nelement. Let's grab it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"h2\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following return value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"Web Development Immersive\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! We found the code for grabbing an individual course's title. Let's do\nthe same for schedule and description.\u003c/p\u003e\n\n\u003ch4\u003eScraping Course Schedule\u003c/h4\u003e\n\n\u003cp\u003eGo back to the \u003ca href=\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"\u003esite\u003c/a\u003e and open up the element inspector again. Click the\nselector tool and hover over the schedule of the first course offering. You\nshould see a tag appear when you hover over the schedule (the line that reads\n\"Part-Time\" or \"Full-Time\") that reads \u003ccode\u003eem.date ...\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIt looks like the schedule element has a class of \"date\". Let's use that CSS\nselector to grab the date of the first course.\u003c/p\u003e\n\n\u003cp\u003eIn your terminal, execute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\").first.css(\".date\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the following returned to you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"Full-Time\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat, now we have the code for grabbing an individual course's schedule. Let's\nget that description.\u003c/p\u003e\n\n\u003ch4\u003eScraping Course Description\u003c/h4\u003e\n\n\u003cp\u003eOnce again, use the selector tool to hover over the first course's description.\nYou should see a tag appear with the following text: \u003ccode\u003ep 750. blah blah some\npixels\u003c/code\u003e. Okay, it looks like we have our selector: the \u003ccode\u003ep\u003c/code\u003e tag.\u003c/p\u003e\n\n\u003cp\u003eTry out the following line in your console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"p\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see returned to you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"An intensive, Ruby and Javascript course that teaches the skills necessary to start a career as a full-stack software developer.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! We have the working code for grabbing:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe page itself:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc = Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe collection of course offerings:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc.css(\".post\")\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe title of an individual course offering:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"h2\").text\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe schedule of an individual course offering:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc.css(\".post\").first.css(\".date\").text\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe description of an individual course offering:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edoc.css(\".post\").first.css(\"p\").text\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow we're ready to use our code to create \u003ccode\u003eCourse\u003c/code\u003e objects and give them\nattributes.\u003c/p\u003e\n\n\u003ch3\u003eCreating \u003ccode\u003eCourse\u003c/code\u003e Objects with Scraped Attributes\u003c/h3\u003e\n\n\u003cp\u003eNotice that the \u003ccode\u003escraper.rb\u003c/code\u003e file includes this line near the top:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative './course.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe are requiring our \u003ccode\u003eCourse\u003c/code\u003e class file so that our \u003ccode\u003eScraper\u003c/code\u003e can make new\ncourses and give them attributes scraped from the web page.\u003c/p\u003e\n\n\u003cp\u003eWe know how to grab an array-like collection of course elements from the page\nwith the \u003ccode\u003edoc.css(\".post\")\u003c/code\u003e line. We also know what code will grab us the title,\nschedule and description of an individual member of that collection.\u003c/p\u003e\n\n\u003cp\u003eSo, we can iterate over the collection, make a new \u003ccode\u003eCourse\u003c/code\u003e instance for each\ncourse offering element we are iterating over, and assign that instance the\nscraped title, schedule and description, using the working code for those\nattributes that we already figured out.\u003c/p\u003e\n\n\u003cp\u003eIn your \u003ccode\u003e#get_page\u003c/code\u003e method of the \u003ccode\u003eScraper\u003c/code\u003e class, place the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e\u003cbr\u003e    doc = Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003cbr\u003e\u003cbr\u003e    doc.css(\".post\").each do |post|\u003cbr\u003e      course = Course.new\u003cbr\u003e      course.title = post.css(\"h2\").text\u003cbr\u003e      course.schedule = post.css(\".date\").text\u003cbr\u003e      course.description = post.css(\"p\").text\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor each iteration over the collection of Nokogiri XML elements returned to us\nby the \u003ccode\u003edoc.css(\".post\")\u003c/code\u003e line, we are making a new instance of the \u003ccode\u003eCourse\u003c/code\u003e\nclass and giving that instance the \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003eschedule\u003c/code\u003e and \u003ccode\u003edescription\u003c/code\u003e\nextracted from the XML.\u003c/p\u003e\n\n\u003cp\u003ePlace a \u003ccode\u003ebinding.pry\u003c/code\u003e at the end of the method. Now, run the code in this file\nwith \u003ccode\u003eruby lib/scraper.rb\u003c/code\u003e. When you hit the binding, enter \u003ccode\u003eCourse.all\u003c/code\u003e into\nyour terminal and take a look at all the courses we made:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/Screen%20Shot%202015-08-20%20at%205.29.51%20PM.png\" alt=\"Course class example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWow! We have a collection of \u003ccode\u003eCourse\u003c/code\u003e objects, each of which have attributes\nthat we scraped from the website. We are such good programmers.\u003c/p\u003e\n\n\u003ch3\u003eExtracting Our Code into Methods\u003c/h3\u003e\n\n\u003cp\u003eOkay, we have some great working code. But, it doesn't really \u003cem\u003eall\u003c/em\u003e belong in\nthe \u003ccode\u003e#get_page\u003c/code\u003e method. The \u003ccode\u003e#get_page\u003c/code\u003e method should be responsible for \u003cem\u003ejust\ngetting the page\u003c/em\u003e. Let's do some refactoring and get our \u003ccode\u003eScraper\u003c/code\u003e tests\npassing!\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#get_page\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis method should contain \u003cem\u003eonly the code for getting the HTML document\u003c/em\u003e. Place\nthe following code in your \u003ccode\u003e#get_page\u003c/code\u003e method and \u003cem\u003ecomment out the rest of that\nmethod\u003c/em\u003e. We'll need to refer to that code to get our other tests passing.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e\u003cbr\u003e    Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003cbr\u003e\u003cbr\u003e    #doc.css(\".post\").each do |post|\u003cbr\u003e      #course = Course.new\u003cbr\u003e      #course.title = post.css(\"h2\").text\u003cbr\u003e      #course.schedule = post.css(\".date\").text\u003cbr\u003e      #course.description = post.css(\"p\").text\u003cbr\u003e    #end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun your \u003ccode\u003eScraper\u003c/code\u003e test suite with \u003ccode\u003erspec spec/scraper_spec.rb\u003c/code\u003e. Your first test\nshould be passing.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#get_courses\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#get_courses\u003c/code\u003e method should operate on the HTML page (which is the return\nvalue of the \u003ccode\u003e.get_page\u003c/code\u003e method) and return the collection of Nokogiri XML\nelements that describe each course. So, we'll call on our \u003ccode\u003e.get_page\u003c/code\u003e method\ninside the \u003ccode\u003e.get_courses\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef get_courses\u003cbr\u003e  self.get_page.css(\".post\")\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test suite again and the second test should be passing.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003e#make_courses\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003e#make_courses\u003c/code\u003e method should operate on the collection of course offering\nNokogiri XML elements that was returned by the \u003ccode\u003e.get_courses\u003c/code\u003e method. The\n\u003ccode\u003e.make_courses\u003c/code\u003e method should iterate over the collection and make a new\ninstance of \u003ccode\u003eCourse\u003c/code\u003e class for each one while assigning it the appropriate\nattributes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef make_courses\u003cbr\u003e  self.get_courses.each do |post|\u003cbr\u003e    course = Course.new\u003cbr\u003e    course.title = post.css(\"h2\").text\u003cbr\u003e    course.schedule = post.css(\".date\").text\u003cbr\u003e    course.description = post.css(\"p\").text\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the test suite again and all of your tests should be passing!\u003c/p\u003e\n\n\u003cp\u003eNow, just for fun. Place the following line at the bottom of \u003ccode\u003elib/scraper.rb\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eScraper.new.print_courses\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTa-da! We did it. Check out all of those awesome courses printed out to your\nterminal. If you're still having trouble getting your tests to pass, check out\nthe final code below:\u003c/p\u003e\n\n\u003ch3\u003eFinal Code: The \u003ccode\u003eScraper\u003c/code\u003e Class\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003erequire_relative './course.rb'\u003cbr\u003e\u003cbr\u003eclass Scraper\u003cbr\u003e\u003cbr\u003e  def get_page\u003cbr\u003e    Nokogiri::HTML(open(\"http://learn-co-curriculum.github.io/site-for-scraping/courses\"))\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def get_courses\u003cbr\u003e    self.get_page.css(\".post\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_courses\u003cbr\u003e    self.get_courses.each do |post|\u003cbr\u003e      course = Course.new\u003cbr\u003e      course.title = post.css(\"h2\").text\u003cbr\u003e      course.schedule = post.css(\".date\").text\u003cbr\u003e      course.description = post.css(\"p\").text\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def print_courses\u003cbr\u003e    self.make_courses\u003cbr\u003e    Course.all.each do |course|\u003cbr\u003e      if course.title \u0026amp;\u0026amp; course.title != \"\"\u003cbr\u003e        puts \"Title: #{course.title}\"\u003cbr\u003e        puts \"  Schedule: #{course.schedule}\"\u003cbr\u003e        puts \"  Description: #{course.description}\"\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eScraper.new.print_courses\n\u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0d0ffaf52d8700924d657a2237d61413","title":"Scraping HTML with Nokogiri","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-remote-data-practice-scraping\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-remote-data-practice-scraping/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-remote-data-practice-scraping\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-remote-data-practice-scraping/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce web scraping and its usages.\u003c/li\u003e\n\u003cli\u003eLearn how to use Nokogiri to scrape data from an HTML document.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWeb scraping is the act of parsing a web page's HTML and pulling, or \"scraping\"\npertinent data from that HTML. In this reading, we'll take a brief look at what\nscraping is and how to accomplish it.\u003c/p\u003e\n\n\u003cp\u003eA more thorough code-along is coming up next, but if you would like to follow\nalong, \u003ccode\u003elib/scraper.lib\u003c/code\u003e is provided for you.\u003c/p\u003e\n\n\u003ch2\u003eWhat is Scraping and Why Use it?\u003c/h2\u003e\n\n\u003cp\u003eAs we established above, scraping is a technique used to grab data out of the\nHTML that makes up a web page. Scraping can be difficult to accomplish––in order\nto get the data we want, we need to closely examine the HTML and identify\nexactly which elements contain the information we're interested in. It requires\na high degree of precision.\u003c/p\u003e\n\n\u003cp\u003eSo, if scraping is so tricky, why do we use it? Well, not all of the data we\nmight be interested in using to program is available to use through APIs. For\nexample, let's say we're creating an app that catalogs popular musicians and\nsearches the web for their upcoming concerts. A quick Google search will reveal\nthat, unfortunately for us, there isn't a \"Popular Musician\" API out there just\nwaiting to be used. There is, however, a very comprehensive list of musicians on\nthe Billboard website. In such a scenario, you may want to programmatically grab\nevery musician's name from the Billboard list and store those artists in your\nown database.\u003c/p\u003e\n\n\u003cp\u003eHere's another example: let's say you're creating an app that allows a user to\nsubscribe to a news feed. You anticipate that your users are super-tech savvy\nand might be interested in subscribing to some lesser-known tech news sites.\nSuch sites may not have an API that makes their articles available to you.\nInstead, you would have to scrape those sites for their latest news articles and\nsend those newest articles to your users.\u003c/p\u003e\n\n\u003cp\u003eThese are just a few examples of situations in which scraping might come in\nhandy. Now that we have a few use-cases that illustrate the utility of scraping,\nlet's talk about \u003cem\u003ehow\u003c/em\u003e to scrape.\u003c/p\u003e\n\n\u003ch2\u003eScraping HTML Using Nokogiri and Open-URI\u003c/h2\u003e\n\n\u003ch3\u003eRefresher: What is Open-URI?\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html\"\u003eOpen-URI\u003c/a\u003e is a module in Ruby that allows us to programmatically make HTTP\nrequests. It gives us a bunch of useful methods to make different types of\nrequests, but for this guide, we're interested in only one: \u003ccode\u003eopen\u003c/code\u003e. This method\ntakes one argument, a URL, and will return to us the HTML content of that URL.\u003c/p\u003e\n\n\u003cp\u003eIn other words, running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehtml = open('http://www.google.com')\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003estores the HTML of Google into a variable, \u003ccode\u003ehtml\u003c/code\u003e. (More specifically, it\nactually stores the HTML in a temporary file that we can then call read on to\nget the raw HTML. We won't worry about that here though.)\u003c/p\u003e\n\n\u003ch3\u003eWhat is Nokogiri?\u003c/h3\u003e\n\n\u003cp\u003eNokogiri is a Ruby gem that helps us to parse HTML and collect data from it.\nIt allows us to treat a huge string of HTML as if it were a\nseries of nested objects that you can use to extract the desired information\nusing provided methods. Put simply, Nokogiri takes in HTML and spits out a \ncollection of objects we can get information from.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/scraping-reading/Image_11_CodeScraping.png\" alt=\"Nokogiri Scraping\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe HTML that would normally be rendered as a webpage can be scraped with \nNokogiri into a many small pieces. Nokogiri makes the level of precision required to\nextract the necessary data much easier to attain. It works like a fine-toothed\nsaw to scrape only the necessary data. In fact, that's what \"nokogiri\" means: a\nfine-toothed saw.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/akaisora309838.jpg\" alt=\"fine-toothed saw\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's get Nokogiri up and running and look at a very basic example of its usage.\nThen, we'll move on to the next lesson, where you'll try it out for yourself.\u003c/p\u003e\n\n\u003ch3\u003eInstalling Nokogiri\u003c/h3\u003e\n\n\u003cp\u003eInstalling Nokogiri is as easy as \u003ccode\u003egem install nokogiri\u003c/code\u003e. If you run into any\nissues with this, check out the following documentation:\n\u003cstrong\u003e\u003ca href=\"http://www.nokogiri.org/tutorials/installing_nokogiri.html\"\u003eNokogiri Installation Guide\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3\u003eOpening a Web Page as HTML with Nokogiri and open-uri\u003c/h3\u003e\n\n\u003cp\u003eLet's say we have a file, \u003ccode\u003escraper.rb\u003c/code\u003e which is responsible for (you guessed it)\nscraping. We need to require Nokogiri and open-uri:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003e# more code coming soon!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use the following line to grab the HTML that makes up the Flatiron\nSchool's landing page at flatironschool.com:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehtml = open(\"https://flatironschool.com/\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we'll use the \u003ccode\u003eNokogiri::HTML\u003c/code\u003e method to take the string of HTML returned\nby open-uri's \u003ccode\u003eopen\u003c/code\u003e method and convert it into a NodeSet (aka, a bunch of\nnested \"nodes\") that we can easily play around with.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNokogiri::HTML(html)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's save the HTML document in a variable, \u003ccode\u003edoc\u003c/code\u003e that we can then operate on:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc = Nokogiri::HTML(html)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we were to \u003ccode\u003eputs\u003c/code\u003e out \u003ccode\u003edoc\u003c/code\u003e right now, we'd see something like this in our\nterminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;!--[if lte IE 7]\u0026gt;\u0026lt;html id=\"html\" class=\"deprecated\"\u0026gt;\u0026lt;![endif]--\u0026gt;\u0026lt;!--[if IE 8]\u0026gt;\u0026lt;html id=\"html\" class=\"deprecated\"\u0026gt;\u0026lt;![endif]--\u0026gt;\u0026lt;!--[if IE 9]\u0026gt;\u0026lt;html id=\"html\" class=\"deprecated\"\u0026gt;\u0026lt;![endif]--\u0026gt;\u0026lt;!--[if gt IE 9]\u0026gt;\u0026lt;!--\u0026gt;\u0026lt;html id=\"html\" class=\"modern\"\u0026gt;\u003cbr\u003e\u0026lt;!--\u0026lt;![endif]--\u0026gt;\u0026lt;head\u0026gt;\u003cbr\u003e\u0026lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"\u0026gt;\u003cbr\u003e\u0026lt;meta charset=\"utf-8\"\u0026gt;\u003cbr\u003e\u0026lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u0026gt;\u003cbr\u003e\u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/assets/images/favicon.ico\"\u0026gt;\u003cbr\u003e\u0026lt;title\u0026gt;Learn Coding, Data Science, \u0026amp; UX/UI Design | Flatiron School\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;link href=\"https://fonts.googleapis.com/css?family=Roboto:300,300i,400,400i,500,700\" rel=\"stylesheet\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" href=\"/assets/css/v2/global.min.css?v=3.6\"\u0026gt;\u003cbr\u003e\u0026lt;!-- Google Tag Manager --\u0026gt;\u0026lt;script\u0026gt;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\u003cbr\u003e    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\u003cbr\u003e    j=d.createElement(s),dl=l!='dataLayer'?'\u0026amp;l='+l:'';j.async=true;j.src=\u003cbr\u003e    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\u003cbr\u003e    })(window,document,'script','dataLayer','GTM-KZZ9JB');\u0026lt;/script\u0026gt;\u0026lt;!-- End Google Tag Manager --\u0026gt;\u0026lt;meta name=\"description\" content=\"A coding bootcamp with tech’s most effective software engineering and data science courses – online and on-campus in NYC, Houston, DC, Atlanta, Seattle, and London.\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"canonical\" href=\"https://flatironschool.com/\"\u0026gt;\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you look through further, you can find the \u003ccode\u003ebody\u003c/code\u003e with lots of content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body data-env=\"PRODUCTION\" data-options='{\"learn_url\":\"https:\\/\\/learn.co\",\"hubspot_id\":69751,\"imgix_domain\":\"flatiron-v3-production.imgix.net\"}'\u0026gt;\u003cbr\u003e\u0026lt;!-- Google Tag Manager (noscript) --\u0026gt;\u0026lt;noscript\u0026gt;\u003ciframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-KZZ9JB\" height=\"0\" width=\"0\" style=\"display: none; visibility: hidden;\"\u003e\u003c/iframe\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn and on. It is \u003cem\u003ea lot\u003c/em\u003e to go through, and it can also look pretty messy and\ndifficult to read. But don't worry! Nokogiri will help us parse this. What we're\nlooking at here is all of the HTML that makes up the web page found at\n\u003ca href=\"http://flatironschool.com/\"\u003ewww.flatironschool.com\u003c/a\u003e. The massive lines above are actually a snapshot of\nthat HTML converted into a structure of nested nodes by Nokogiri.\u003c/p\u003e\n\n\u003ch4\u003eWhat are Nested Nodes?\u003c/h4\u003e\n\n\u003cp\u003eNested nodes refers to any tree of elements in which parent elements branch off\nto contain children elements. In fact, we've seen similarly nested structures\nbefore when we dealt with nested data structures like hashes. By creating a\nnested structure, Nokogiri allows us to do things like iterate over a collection\nof elements from the HTML document and use brackets,\u003ccode\u003e[]\u003c/code\u003e, and dot notation to\naccess elements within the nested structure.\u003c/p\u003e\n\n\u003ch3\u003eUsing Nokogiri to Extract Data\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: For this reading, we'll be using the Flatiron School website. However,\nhow you scrape a page is \u003cstrong\u003every specific to the content of the page you are\ntrying to scrape\u003c/strong\u003e. That means that if the webpage you wrote certain scraping\ncode for ever changes, your scraping code will likely no longer work correctly.\nSo, the Flatiron School website that this reading refers to \u003cstrong\u003emay have\nchanged\u003c/strong\u003e! Some of the examples here may specific to an earlier version of the\nsite and won't work look or work exactly as shown when you try them out on your\nown. That's okay though. Just follow along with the reading and, if you want to\ntry it out, feel free to use the examples provided to guide you in scraping\ncontent that is present on the page.\u003c/p\u003e\n\n\u003cp\u003eVisit \u003ca href=\"http://flatironschool.com/\"\u003ethis Flatiron School link\u003c/a\u003e and use your browser's developer tools to\ninspect the page. (You can just right-click anywhere on the page and select\n\"inspect element\".)\u003c/p\u003e\n\n\u003cp\u003eYou should see something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/ruby/scraping_flatironschool_console_example_01.png\" alt=\"browser console example\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/inspect-styles/\"\u003eelement inspector\u003c/a\u003e view on the bottom half of the page is revealing all of\nthe page's HTML to us! In fact, the HTML it is showing us is \u003cem\u003eexactly the same\u003c/em\u003e\nas the HTML \u003ccode\u003eput\u003c/code\u003e out to our terminal with the help of Nokogiri and open-uri.  \u003c/p\u003e\n\n\u003cp\u003eNow that we understand what Nokogiri is and have seen how it opens the HTML that\nmakes up a web page, let's look at how we use it to actually scrape information.\u003c/p\u003e\n\n\u003ch3\u003eUsing CSS Selectors to Get Data\u003c/h3\u003e\n\n\u003cp\u003eNokogiri allows you to use CSS selectors in order to retrieve specific pieces of\ninformation out of an HTML document.\u003c/p\u003e\n\n\u003ch4\u003eWhat is a CSS Selector\u003c/h4\u003e\n\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"my-div\"\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe id and class attributes of the HTML elements are the CSS selectors. You\nwould refer to the div with this selector: \u003ccode\u003e#my-div\u003c/code\u003e (using the \u003ccode\u003e#\u003c/code\u003e to indicate\nid), and the paragraph with this selector: \u003ccode\u003e.my-paragraph\u003c/code\u003e (using the \u003ccode\u003e.\u003c/code\u003e to\nindicate class).\u003c/p\u003e\n\n\u003ch4\u003eNokogiri's \u003ccode\u003e.css\u003c/code\u003e Method\u003c/h4\u003e\n\n\u003cp\u003eNokogiri's \u003ccode\u003e.css\u003c/code\u003e method can be called on the \u003ccode\u003edoc\u003c/code\u003e variable that we set equal\nto that giant string of HTML that Nokogiri retrieved for us. The \u003ccode\u003e.css\u003c/code\u003e method\ntakes in an argument of the CSS selector you want to retrieve. Let's take a\nlook.\u003c/p\u003e\n\n\u003ch4\u003eChoosing a CSS Selector\u003c/h4\u003e\n\n\u003cp\u003eHow do we determine which selector to use to retrieve the desired information?\nRemember that the HTML document that Nokogiri retrieved for us to operate on is\n\u003cem\u003eexactly the same\u003c/em\u003e HTML that makes up the web page. Let's go back to\n\"\u003ca href=\"http://www.flatironschool.com\"\u003ewww.flatironschool.com\u003c/a\u003e\" and use the element\ninspector to find the selector of a certain piece of our HTML. In this case,\nwe'll look the element containing the text 'Change things':\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/ruby/scraping_flatironschool_inspect_css.png\" alt=\"element inspector\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn order to identify the CSS selector, click the button in the upper left corner of the console pane that looks like a mouse icon partially in a box.\u003c/p\u003e\n\n\u003cp\u003eOnce activated, hover over the 'Change things' text. This will highlight its\nHTML element for us. Notice that:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 class=\"headline-26OIBN\"\u0026gt;...\u0026lt;/hi\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eis highlighted in the above image. If you click on the carrot at the left end of\nthat line, it will open up to show you what that element contains (with lots of spacing around it):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"Change things.\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe found it! That text lives in a span whose class is \u003ccode\u003e\"site-header__hero__headline\"\u003c/code\u003e. Now we're\nready to use the \u003ccode\u003e.css\u003c/code\u003e method to grab the text we want:\u003c/p\u003e\n\n\u003ch4\u003eCalling the \u003ccode\u003e.css\u003c/code\u003e method\u003c/h4\u003e\n\n\u003cp\u003eIn our \u003ccode\u003escraper.rb\u003c/code\u003e file, we had the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003edoc = Nokogiri::HTML(open(\"http://flatironschool.com/\"))\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's call \u003ccode\u003e.css\u003c/code\u003e on \u003ccode\u003edoc\u003c/code\u003e and give it the argument of our CSS selector:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003edoc = Nokogiri::HTML(open(\"http://flatironschool.com/\"))\u003cbr\u003edoc.css(\".headline-26OIBN\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we were to copy and paste the above code into IRB, the last line\nwould return something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[#\u0026lt;Nokogiri::XML::Element:0x3fe2d610baa0 name=\"h1\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fe2d610ba3c name=\"class\" value=\"headline-26OIBN\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fe2d610b62c \"\\n      \\n                  Change things.\\n        \\n        \\n                    \\n          \\n                      \\n          \\n              \\n      \"\u0026gt;]\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlthough dense, it is possible to figure some things out. First of all,\n\u003ccode\u003edoc.css(\".headline-26OIBN\")\u003c/code\u003e returned what looks like an Array\ncontaining one \u003ccode\u003eNokogiri\u003c/code\u003e object. In actuality, this 'Array' is \u003cem\u003ealso\u003c/em\u003e a special\n\u003ccode\u003eNokogiri\u003c/code\u003e object, but works very much like an Array. If you look closely at the\nobject contained within it, you'll see that it has the 'Change things' text towards the end! To\nget it out, we can call \u003ccode\u003e.text\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edoc.css(\".headline-26OIBN\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003e.text\u003c/code\u003e allows us to access text content inside an element scraped by Nokogiri. Run in IRB, we'd see something like this returned:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e =\u0026gt; \"\\n      \\n                  Change things.\\n        \\n        \\n                    \\n          \\n                      \\n          \\n              \\n      \"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If we add \u003ccode\u003e.strip\u003c/code\u003e to the end we can clean up the extra whitespace and simply return \u003ccode\u003e\"Change things.\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eAn interesting thing to note: If you're coding along in the provided\n\u003ccode\u003elib/scraper.rb\u003c/code\u003e file, using \u003ccode\u003eputs\u003c/code\u003e or \u003ccode\u003eprint\u003c/code\u003e on \u003ccode\u003edoc.css\u003c/code\u003e will cause the \u003cstrong\u003eHTML\nelements to print out\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eputs doc.css(\".headline-26OIBN\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWill print out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 class=\"headline-26OIBN\"\u0026gt;\u003cbr\u003e\u003cbr\u003e                  Change things.\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e      \u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, just as before, we can just add \u003ccode\u003e.text\u003c/code\u003e (and \u003ccode\u003e.strip\u003c/code\u003e) and get only the\ntext contained inside the element that we want. Alternatively, using \u003ccode\u003ep\u003c/code\u003e will\nproduce the array-like object we saw from before.\u003c/p\u003e\n\n\u003cp\u003eWe did it! We used Nokogiri to get the HTML of a web page. We used the element\ninspector in the browser to ID the CSS selector of the data we wanted to scrape.\nWe used the \u003ccode\u003e.css\u003c/code\u003e Nokogiri method, along with that CSS selector, to grab the\nelement that contains our desired data. Finally, we used the \u003ccode\u003e.text\u003c/code\u003e method to\nretrieve the desired text.\u003c/p\u003e\n\n\u003ch3\u003eIterating over elements\u003c/h3\u003e\n\n\u003cp\u003eSometimes we want to get a collection of the same elements, so we can iterate\nover them. For instance, a little further down the \u003ca href=\"https://flatironschool.com/\"\u003epage\u003c/a\u003e are some of the\ncourses offered by Flatiron School. We can practice iterating by trying to\nscrape the titles of all courses from these elements.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/ruby/scraping_flatironschool_courses.png\" alt=\"courses\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis time, if we hover over one of the elements containing a course, we'll see\nthere are two classes assigned, \u003ccode\u003einlineMobileLeft-2Yo002\u003c/code\u003e, and\n\u003ccode\u003eimageTextBlockGrid2-3jXtmC\u003c/code\u003e. Since CSS classes are often shared, we'll use both to\ntry and get only the content we need:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'nokogiri'\u003cbr\u003erequire 'open-uri'\u003cbr\u003e\u003cbr\u003ehtml = open(\"http://flatironschool.com/\")\u003cbr\u003edoc = Nokogiri::HTML(html)\u003cbr\u003e\u003cbr\u003edoc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that each class is listed without spaces!\u003c/p\u003e\n\n\u003cp\u003eEven though the Nokogiri gem returns a \u003ccode\u003eNokogiri::XML::NodeSet\u003c/code\u003e (which looks\nlike an Array in Ruby), we can use Ruby methods, such as \u003ccode\u003e.each\u003c/code\u003e and \u003ccode\u003e.collect\u003c/code\u003e,\nto iterate over it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[#\u0026lt;Nokogiri::XML::Element:0x3fe543d378a0 name=\"div\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31ee8e28 name=\"class\" value=\"inlineMobileLeft-2Yo002 imageTextBlockGrid2-3jXtmC\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31ee8900 \"\\n          $1M in Scholarships for Women\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31ee8748 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31ee86e4 name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31ee8270 \"\\n          What Kind of Coding Program is Right for You?\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31ee807c name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eedfcc name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31eeda90 \"\\n          Attend an Online Info Session\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31eed8d8 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eed860 name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31eed43c \"\\n          Coding Bootcamp Prep\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31eed284 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eed220 name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31eecdc0 \"\\n          Online Software Engineering\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31eecc1c name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eecba4 name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31eec744 \"\\n          Data Science Bootcamp Prep\\n        \"\u0026gt;]\u0026gt;, #\u0026lt;Nokogiri::XML::Element:0x3fdf31eec5a0 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fdf31eec53c name=\"class\" value=\"tout__label heading heading--level-4\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fdf31ef3fbc \"\\n          Online Data Science\\n        \"\u0026gt;]\u0026gt;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstead of just outputting the results of \u003ccode\u003edoc.css\u003c/code\u003e, if we assign them\nto a variable, we can then iterate over that variable with \u003ccode\u003e.each\u003c/code\u003e and \u003ccode\u003eputs\u003c/code\u003e out each course:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecourses = doc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")\u003cbr\u003e\u003cbr\u003ecourses.each do |course|\u003cbr\u003e  puts course.text.strip\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'd see something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSoftware EngineeringLaunch your career as a full-stack web developer ...\u003cbr\u003eData ScienceOur full-time data science program that gives students ...\u003cbr\u003eCybersecurity AnalyticsOver 12 intense weeks on campus at Flatiron ...\u003cbr\u003eCybersecurity EngineeringFast-track to the skills you need for a new ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNot \u003cem\u003eexactly\u003c/em\u003e the course listing as it scraped some other content as well - a\ngreat example how tricky scraping can be - but we've still achieved\niteration!\u003c/p\u003e\n\n\u003ch3\u003eOperating on XML\u003c/h3\u003e\n\n\u003cp\u003eLet's take another look at the element returned to us by our call on the \u003ccode\u003e.css\u003c/code\u003e\nmethod. In the previous example, we had many \u003ccode\u003eNokogiri\u003c/code\u003e objects to iterate over.\nLooking at just the first one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep doc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")[0]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe get an output similar to the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#\u0026lt;Nokogiri::XML::Element:0x3fd385890ca4 name=\"h2\" attributes=[#\u0026lt;Nokogiri::XML::Attr:0x3fd385890c04 name=\"class\" value=\"inlineMobileLeft-2Yo002 imageTextBlockGrid2-3jXtmC\"\u0026gt;] children=[#\u0026lt;Nokogiri::XML::Text:0x3fd3858906c8 \"\\n          $1M in Scholarships for Women\\n        \"\u0026gt;]\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is an XML element. XML stands for Extensible Markup Language. Just like\nHTML, it is a set of rules for encoding and displaying data on the web.\u003c/p\u003e\n\n\u003cp\u003eWhen we use Nokogiri methods, we get XML elements in return. Looking at the\noutput object, we can see it has a \u003ccode\u003ename\u003c/code\u003e, \"div\". We can get\nthis info directly by adding these to the end of our \u003ccode\u003edoc.css\u003c/code\u003e call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep doc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")[0].name\u003cbr\u003e# =\u0026gt; \"div\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the name of the XML element, not to be confused with the HTML attribute\n'name' that can be assigned to elements. Those types of attributes can be\naccessed with \u003ccode\u003e.attributes\u003c/code\u003e. Using \u003ccode\u003e.attributes\u003c/code\u003e will return ids, names, and\nclasses, but will also return other useful content like \u003ccode\u003ealt\u003c/code\u003e and \u003ccode\u003esrc\u003c/code\u003e for\nimages.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep doc.css(\".inlineMobileLeft-2Yo002.imageTextBlockGrid2-3jXtmC\")[0].attributes\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince this example doesn't have any attributes besides the CSS classes, we just\nget back the classes we already know:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\"class\"=\u0026gt;#\u0026lt;Nokogiri::XML::Attr:0x3fe543d3783c name=\"class\" value=\"inlineMobileLeft-2Yo002 imageTextBlockGrid2-3jXtmC\"\u0026gt;} \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOne last but important method to note is \u003ccode\u003echildren\u003c/code\u003e. Adding \u003ccode\u003echildren\u003c/code\u003e will\nreturn any child nodes nested \u003cem\u003einside this element\u003c/em\u003e. In this particular example,\nall that is contained is a text node, but this XML element can contain all types\nof XML elements, nested as children. On a webpage, an \u003ccode\u003eh2\u003c/code\u003e HTML element may be\nnested within a \u003ccode\u003ediv\u003c/code\u003e. When scraped, this relationship can be represented by\nhaving an XML object named \"div\" with a child XML object named \"h2\".\u003c/p\u003e\n\n\u003cp\u003eNokogiri collects these objects into a hierarchical data structure, much like\nthe nested arrays and hashes we've been building and manipulating for a while\nnow. This structure allows us to iterate over an array of Nokogiri objects and use\nenumerators to grab the values of attributes and text.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBy using Nokogiri, we can get any website's HTML, represented in XML objects,\nincluding any text or data displayed on that site. Using methods like \u003ccode\u003e.css\u003c/code\u003e, we\ncan then filter out the specific parts of the website we need and use additional\nmethods like \u003ccode\u003e.text\u003c/code\u003e and \u003ccode\u003e.attributes\u003c/code\u003e to extract the content we want.\u003c/p\u003e\n\n\u003cp\u003eAs each website is designed differently, scraping tends to require customized code\nfor each site you want to scrape. As sites update their styles and designs, scrapers\nwe've built may no longer work.\u003c/p\u003e\n\n\u003cp\u003eHowever, being able to scrape websites gives us access to information that can\nbe time-consuming or otherwise very difficult to collect. Taking a little time\nto update a scraper is typically much easier and faster than manually updating\ndata.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: One final note about scraping - the content we're getting by scraping\nis all technically publicly available, as it all visible on public websites. Be\ncareful, however, as some content may not be used without permission or\nlicensing. Images, for instance, often belong to someone and can have a license\nattached - something you would probably want to look into before scraping any\nimage \u003ccode\u003esrc\u003c/code\u003e attributes from a site!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eScraping is a big topic, and it takes \u003cem\u003ea lot\u003c/em\u003e of practice to get comfortable\ndoing it. The below resource is a great place to learn more about scraping and\neven get some practice with simple examples. If you felt really confused by\nthis reading, we recommend checking it out before moving on.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby.bastardsbook.com/chapters/html-parsing/\"\u003e\u003cem\u003eThe Bastard's Book of Ruby\u003c/em\u003e - Parsing HTML with Nokogiri\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=oXwdOdBUyCI\"\u003eVideo Review- Scraping and Object Orientation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://www.nokogiri.org/tutorials/installing_nokogiri.html\"\u003eNokogiri Installation Guide\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g318902eb742a9b33179fc9ea0311ed22","title":"Scraping Kickstarter","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"scraping-kickstarter\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/scraping-kickstarter/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/scraping-kickstarter\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/scraping-kickstarter/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse Nokogiri to scrape an HTML document.\u003c/li\u003e\n\u003cli\u003eUse scraped data to build a nested data structure.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be scraping a Kickstarter web page that lists projects\nrequesting funding. The page you'll be scraping displays 20 previews of projects\nin the NYC area. Each project has a title, an image, a short description, a\nlocation and some funding details. Our goal is to collect this information for\neach project and build a hash for each project:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e:projects =\u0026gt; {\u003cbr\u003e  \"My Great Project\"  =\u0026gt; {\u003cbr\u003e    :image_link =\u0026gt; \"Image Link\",\u003cbr\u003e    :description =\u0026gt; \"Description\",\u003cbr\u003e    :location =\u0026gt; \"Location\",\u003cbr\u003e    :percent_funded =\u0026gt; \"Percent Funded\"\u003cbr\u003e  },\u003cbr\u003e  \"Another Great Project\" =\u0026gt; {\u003cbr\u003e    :image_link =\u0026gt; \"Image Link\",\u003cbr\u003e    :description =\u0026gt; \"Description\",\u003cbr\u003e    :location =\u0026gt; \"Location\",\u003cbr\u003e    :percent_funded =\u0026gt; \"Percent Funded\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese individual project hashes will be collected into a larger hash called\n\u003ccode\u003eprojects\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eFixtures\u003c/h2\u003e\n\n\u003cp\u003eIn the directory of this project, you'll notice a folder called \u003ccode\u003efixtures\u003c/code\u003e.\nInside that folder, you'll see a file, \u003ccode\u003ekickstarter.html\u003c/code\u003e. If you are using the\nLearn IDE right click on the \u003ccode\u003ekickstarter.html\u003c/code\u003e file and select \u003ccode\u003eShow in\nFinder\u003c/code\u003e. Once Finder opens double click \u003ccode\u003ekickstarter.html\u003c/code\u003e to view the file\ninside your default web browser. If you are not using the Learn IDE, try open\n\u003ccode\u003ekickstarter.html\u003c/code\u003e inside your text editor and right-click anywhere on the page\nto select \u003ccode\u003eopen in browser\u003c/code\u003e from the menu that appears.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: If the \u003ccode\u003eShow in Finder\u003c/code\u003e or \u003ccode\u003eOpen in Browser\u003c/code\u003e options are not available\nfor you, you can use \u003ccode\u003ehttpserver\u003c/code\u003e. Open the \u003ccode\u003efixtures/kickstarter.html\u003c/code\u003e file\ninside of the browser by typing \u003ccode\u003ehttpserver\u003c/code\u003e into the Learn IDE terminal and go\nto the link provided. Navigate to \u003ccode\u003efixtures/kickstarter.html\u003c/code\u003e from there.\u003c/p\u003e\n\n\u003cp\u003eTa-da! We're looking at a web page. For the purposes of this lab, we won't be\nscraping a live web page. We'll be scraping this HTML page. We're doing this for\ntwo reasons. First, because web pages change. If we assign you a lab based on\nmaterial that will change, things could get really confusing. Secondly, it is\ncommon to keep data that the test suite will use to test your program in a\n\u003ccode\u003efixtures\u003c/code\u003e directory.\u003c/p\u003e\n\n\u003cp\u003eSo, for this lab, we \u003cem\u003edon't need Open-Uri\u003c/em\u003e. We're not opening a live web page.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003ch3\u003eSetting Up Our Project\u003c/h3\u003e\n\n\u003cp\u003eSince we'll be using that \u003ccode\u003ekickstarter.html\u003c/code\u003e file instead of an Open-URI\nrequest, we need to require only \u003ccode\u003enokogiri\u003c/code\u003e at the top of the\n\u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e file\u003c/p\u003e\n\n\u003cp\u003eNext, let's set up some variables inside the method called \u003ccode\u003ecreate_project_hash\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# This just opens a file and reads it into a variable\u003cbr\u003ehtml = File.read('fixtures/kickstarter.html')\u003cbr\u003e\u003cbr\u003ekickstarter = Nokogiri::HTML(html)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that this is pretty similar to what we did to open HTML documents in the\nprevious exercise in which we did use Open-URI.\u003c/p\u003e\n\n\u003ch3\u003eSelecting the Projects\u003c/h3\u003e\n\n\u003cp\u003eThe first thing we'll want to do is figure out what selector will allow us to\ngrab each project as a whole. Open up \u003ccode\u003efixtures/kickstarter.html\u003c/code\u003e by typing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eopen fixtures/kickstarter.html\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ein the terminal, or by right clicking on the file and selecting \"open in browser\".\u003c/p\u003e\n\n\u003cp\u003eThis should open the file in your web browser. Right click somewhere on the\n\"Moby Dick\" project and choose \"Inspect Element\". By moving your mouse up and\ndown in the HTML in the inspector, you can see what each element represents on\nthe page via some cool highlighting. By moving your mouse around, it quickly\nbecomes clear that each project is contained in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;li class=\"project grid_4\"\u0026gt;...\u0026lt;/li\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince this Nokogiri object is just a bunch of nested nodes, and we know how to\niterate through a nested data structure, we can use the Ruby we already know to\niterate through each of these projects and do stuff with them.\u003c/p\u003e\n\n\u003cp\u003eJust to check our assumptions, let's add a \u003ccode\u003erequire 'pry'\u003c/code\u003e at the top of our\nfile, and add \u003ccode\u003ebinding.pry\u003c/code\u003e after the last line. Add a call to the\n\u003ccode\u003ecreate_project_hash\u003c/code\u003e method at the bottom of the file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire \"nokogiri\"\u003cbr\u003erequire \"pry\"\u003cbr\u003e\u003cbr\u003edef create_project_hash\u003cbr\u003e  html = File.read('fixtures/kickstarter.html')\u003cbr\u003e  kickstarter = Nokogiri::HTML(html)\u003cbr\u003e  binding.pry\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ecreate_project_hash\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen type \u003ccode\u003eruby kickstarter_scraper.rb\u003c/code\u003e into your terminal. This should drop us\ninto Pry, so that we can play around.\u003c/p\u003e\n\n\u003cp\u003eIn pry, type in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekickstarter.css(\"li.project.grid_4\").first\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will select the first \u003ccode\u003eli\u003c/code\u003e with the \u003ccode\u003eproject\u003c/code\u003e and \u003ccode\u003egrid_4\u003c/code\u003e classes just so\nthat we can make sure we've chosen our selectors correctly.\u003c/p\u003e\n\n\u003cp\u003eAnd we have! (If you don't see any output, or see an empty array, make sure\nyou've typed everything exactly as it was typed here.)\u003c/p\u003e\n\n\u003cp\u003eAwesome! Let's add a comment to \u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e that reminds us of that\nselector:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSelecting the Title\u003c/h3\u003e\n\n\u003cp\u003eLet's hop back into Pry and see if we can figure out how to get the title of\nthat project.\u003c/p\u003e\n\n\u003cp\u003eIn Pry, type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject = _\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will assign that project to a variable, \u003ccode\u003eproject\u003c/code\u003e so that we can play\naround with it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e If you're looking at a big chunk of code in Pry that gets cut off at the bottom\nof your terminal window, you can scroll down with the down arrow key. You can\nescape the scrolling and go back to entering code in Pry by hitting \"q\".\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-Tip:\u003c/strong\u003e The \u003ccode\u003evariable_name = _\u003c/code\u003e syntax used in Pry will assign the\n\u003ccode\u003evariable\u003c/code\u003e name to the return value of whatever was executed above. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ pry \u0026gt; 1 + 1\u003cbr\u003e  =\u0026gt; 2\u003cbr\u003e$ pry \u0026gt; two = _\u003cbr\u003e$ pry \u0026gt; two\u003cbr\u003e  =\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo back to your browser and use the element inspector to click around a bit and\nidentify the selector for a project's title. A bit of inspection should reveal\nthat the title of each project lives in an \u003ccode\u003eh2\u003c/code\u003e with a class of \u003ccode\u003ebbcard_name\u003c/code\u003e,\ninside a \u003ccode\u003estrong\u003c/code\u003e and then an \u003ccode\u003ea\u003c/code\u003e tag. Let's check that in pry:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject.css(\"h2.bbcard_name strong a\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince Nokogiri gives us a bunch of nested nodes that all respond to the same\nmethods, we can just chain a \u003ccode\u003ecss\u003c/code\u003e method right onto this \u003ccode\u003eproject\u003c/code\u003e. Neat, huh?\u003c/p\u003e\n\n\u003cp\u003eNow that we have our \u003ccode\u003etitle\u003c/code\u003e selector, let's add it into a comment in our \u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSelecting the Image Link\u003c/h3\u003e\n\n\u003cp\u003eBack in Chrome, we can see in the inspector that there is a \u003ccode\u003ediv\u003c/code\u003e with a class\nof \u003ccode\u003eproject-thumbnail\u003c/code\u003e. Seems like a good place to look. Let's give it a try in\nPry.\u003c/p\u003e\n\n\u003cp\u003eIn Pry, type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject.css(\"div.project-thumbnail a img\").attribute(\"src\").value\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt worked! Now, let's continue to keep track of our working code in our project\nfile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eA Note on \u003ccode\u003e.attribute\u003c/code\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eAn image tag in HTML is considered to have a source attribute. In the following\nexample\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;img src=\"http://www.example.com/pic.jpg\"\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003ethe source attribute would be \u003ccode\u003e\"http://www.example.com/pic.jpg\"\u003c/code\u003e. You can use\nthe \u003ccode\u003e.attribute\u003c/code\u003e method on a Nokogiri element to grab the value of that\nattribute.\u003c/p\u003e\n\n\u003ch3\u003eSelecting the Description\u003c/h3\u003e\n\n\u003cp\u003eAre you starting to see a pattern here? We click around a bit in the Chrome web\ninspector, take a stab at a CSS selector in Pry, and then keep track of that\nselector in our project file. Let's grab the description now. In Pry:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject.css(\"p.bbcard_blurb\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should return the description of an individual project.\u003c/p\u003e\n\n\u003cp\u003eLet's add that to \u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\u003cbr\u003e# description: project.css(\"p.bbcard_blurb\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSelecting the Location\u003c/h3\u003e\n\n\u003cp\u003eDo you think you can figure this one out on your own? Examine the web page and\nthen play around in Pry. Try to find the right selector for an individual\nproject's location.\u003c/p\u003e\n\n\u003ch3\u003eSelecting the Percent Funded\u003c/h3\u003e\n\n\u003cp\u003eAnd last, but not least, let's try and grab the percent funded as well! Looking\nin Chrome, it seems that this one is just a bit trickier, but only because it's\nmore nested than the other ones. In Pry, type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproject.css(\"ul.project-stats li.first.funded strong\").text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat does it! To make it useful for later on if, say, we wanted to do some math,\nlet's also tag on a \u003ccode\u003e.gsub(\"%\", \"\").to_i\u003c/code\u003e to remove the percent sign and convert\nit into an integer.\u003c/p\u003e\n\n\u003cp\u003eOur final list of comments in our \u003ccode\u003ekickstarter_scraper.rb\u003c/code\u003e file, then (including\nthe location that you should have figured out on your own), is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\u003cbr\u003e# description: project.css(\"p.bbcard_blurb\").text\u003cbr\u003e# location: project.css(\"ul.project-meta span.location-name\").text\u003cbr\u003e# percent_funded: project.css(\"ul.project-stats li.first.funded strong\").text.gsub(\"%\",\"\").to_i\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eLet's Scrape!\u003c/h3\u003e\n\n\u003cp\u003eNow, it's just a matter of putting together the data we can grab with Nokogiri\nwith our knowledge of data iteration in Ruby.\u003c/p\u003e\n\n\u003cp\u003eFirst, let's set up a loop to iterate through the projects (and also an empty\n\u003ccode\u003eprojects\u003c/code\u003e hash, which we will fill up with scraped data):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# file: kickstarter_scraper.rb\u003cbr\u003e\u003cbr\u003erequire 'nokogiri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\u003cbr\u003e# description: project.css(\"p.bbcard_blurb\").text\u003cbr\u003e# location: project.css(\"ul.project-meta span.location-name\").text\u003cbr\u003e# percent_funded: project.css(\"ul.project-stats li.first.funded strong\").text.gsub(\"%\",\"\").to_i\u003cbr\u003e\u003cbr\u003edef create_project_hash\u003cbr\u003e  html = File.read('fixtures/kickstarter.html')\u003cbr\u003e  kickstarter = Nokogiri::HTML(html)\u003cbr\u003e\u003cbr\u003e  projects = {}\u003cbr\u003e\u003cbr\u003e  # Iterate through the projects\u003cbr\u003e  kickstarter.css(\"li.project.grid_4\").each do |project|\u003cbr\u003e    projects[project] = {}\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # return the projects hash\u003cbr\u003e  projects\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, so that won't work, actually. That's going to make some really wacky key\nwhich is a huge Nokogiri object. So, let's change our data structure slightly\nand make it so that each project title is a key, and the value is another hash\nwith each of our other data points as keys. Sound good?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# file: kickstarter_scraper.rb\u003cbr\u003e\n...\u003cbr\u003e\u003cbr\u003edef create_project_hash\u003cbr\u003e  projects = {}\u003cbr\u003e\u003cbr\u003e  kickstarter.css(\"li.project.grid_4\").each do |project|\u003cbr\u003e    title = project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e    projects[title.to_sym] = {}\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # return the projects hash\u003cbr\u003e  projects\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's better. You'll notice that we're converting the title into a symbol using\nthe \u003ccode\u003eto_sym\u003c/code\u003e method. Remember that symbols make better hash keys than strings.\u003c/p\u003e\n\n\u003cp\u003eFinally, it's just a matter of grabbing each of the data points using the\nselectors we've already figured out, and adding them to each project's hash. So,\nour complete code will look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# file: kickstarter_scraper.rb\u003cbr\u003e\u003cbr\u003erequire 'nokogiri'\u003cbr\u003erequire 'pry'\u003cbr\u003e\u003cbr\u003e# projects: kickstarter.css(\"li.project.grid_4\")\u003cbr\u003e# title: project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e# image link: project.css(\"div.project-thumbnail a img\").attribute(\"src\").value\u003cbr\u003e# description: project.css(\"p.bbcard_blurb\").text\u003cbr\u003e# location: project.css(\"ul.project-meta span.location-name\").text\u003cbr\u003e# percent_funded: project.css(\"ul.project-stats li.first.funded strong\").text.gsub(\"%\",\"\").to_i\u003cbr\u003e\u003cbr\u003edef create_project_hash\u003cbr\u003e  html = File.read('fixtures/kickstarter.html')\u003cbr\u003e  kickstarter = Nokogiri::HTML(html)\u003cbr\u003e\u003cbr\u003e  projects = {}\u003cbr\u003e\u003cbr\u003e  kickstarter.css(\"li.project.grid_4\").each do |project|\u003cbr\u003e    title = project.css(\"h2.bbcard_name strong a\").text\u003cbr\u003e    projects[title.to_sym] = {\u003cbr\u003e      :image_link =\u0026gt; project.css(\"div.project-thumbnail a img\").attribute(\"src\").value,\u003cbr\u003e      :description =\u0026gt; project.css(\"p.bbcard_blurb\").text,\u003cbr\u003e      :location =\u0026gt; project.css(\"ul.project-meta span.location-name\").text,\u003cbr\u003e      :percent_funded =\u0026gt; project.css(\"ul.project-stats li.first.funded strong\").text.gsub(\"%\",\"\").to_i\u003cbr\u003e    }\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # return the projects hash\u003cbr\u003e  projects\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe did it! Run the test suite and you should see that all of the tests are\npassing.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gab0d0c4f3b45106516810a42d4733e50","title":"Setting up the Application Environment","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-building-applications-setting-up-the-environment\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-setting-up-the-environment/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-setting-up-the-environment\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-building-applications-setting-up-the-environment/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize common Ruby application conventions\u003c/li\u003e\n\u003cli\u003eUnderstand how to set up a bin file to run a Ruby application\u003c/li\u003e\n\u003cli\u003eUnderstand how to set up an environment file to load things when a Ruby\napplication starts\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMost Ruby applications we'll be dealing with in this course will use the command\nline. Don't be fooled though - command-line apps may seem simple and less fancy\nthan a fully developed computer program with a graphical user interface, but CLI\napps can be just as robust and powerful, if not more so.\u003c/p\u003e\n\n\u003cp\u003eFor the most part, Ruby CLI apps tend to start the same way - typing \u003ccode\u003eruby\u003c/code\u003e\nfollowed by a relative path to a Ruby file. In a complex application, though,\nwhich file should be run? In addition to this, when run, how to we ensure all\nour necessary files are required?\u003c/p\u003e\n\n\u003cp\u003eThere are two common conventions we're going to look at in this lesson that\naddress these questions: using a run file and setting up the environment in\n\u003ccode\u003eenvironment.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eUsing a Run File\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we had \u003ccode\u003elib/garden.rb\u003c/code\u003e and \u003ccode\u003elib/plant.rb\u003c/code\u003e, and were able\nto require \u003ccode\u003eplant.rb\u003c/code\u003e from inside \u003ccode\u003egarden.rb\u003c/code\u003e. This allowed us to run \u003ccode\u003eruby\nlib/garden.rb\u003c/code\u003e without error. Doing it this way works, but is a little sloppy.\nThe \u003ccode\u003elib/garden.rb\u003c/code\u003e file should only contain the \u003ccode\u003eGarden\u003c/code\u003e class. It doesn't make\nsense to also make it the file that \u003cem\u003eruns\u003c/em\u003e everything.\u003c/p\u003e\n\n\u003cp\u003eRunning an application is its own event and deserves its own file. This way, we\nhave a single place to start the application every time.\u003c/p\u003e\n\n\u003cp\u003eSticking to conventions, a run file has already been created in this example -\n\u003ccode\u003ebin/run\u003c/code\u003e - and looks like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#!/usr/bin/env ruby\u003cbr\u003e\u003cbr\u003erequire_relative '../lib/garden.rb'\u003cbr\u003erequire_relative '../lib/plant.rb'\u003cbr\u003e\u003cbr\u003elawn = Garden.new(name: 'Front Lawn')\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil')\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn\u003cbr\u003e\u003cbr\u003ep lawn.plants\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the run file set up, we can run \u003ccode\u003eruby bin/run\u003c/code\u003e and see the run\nfile in action. Let's step through this file briefly.\u003c/p\u003e\n\n\u003ch4\u003eThe Shebang Line\u003c/h4\u003e\n\n\u003cp\u003eThe very first line of \u003ccode\u003ebin/run\u003c/code\u003e can be broadly ignored for our\npurposes. It is known as a \u003ca href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\"\u003e\u003cem\u003eshebang\u003c/em\u003e\u003c/a\u003e and is used to indicate what\ninterpreter should be used to read the code in this file. On Unix systems, with\nthe proper configuration, this file can run without having to write\n\u003ccode\u003eruby\u003c/code\u003e before it in the command line. Don't worry if this does not work for you,\nthough. We can still run the file using \u003ccode\u003eruby bin/run\u003c/code\u003e. The shebang\nis just an optional line that makes this file more functional.\u003c/p\u003e\n\n\u003cp\u003eNotice that the file \u003cem\u003edoesn't\u003c/em\u003e have \u003ccode\u003e.rb\u003c/code\u003e. This file is designed to be an\nexecutable and the lack of file extension indicates this. Some runner files will\nstill have the \u003ccode\u003e.rb\u003c/code\u003e extension - they may not be meant as an executable file, but\nare still designed to be the point of entry into the application.\u003c/p\u003e\n\n\u003ch4\u003eLoading Files and Running Code\u003c/h4\u003e\n\n\u003cp\u003eRun files act in some way to start an application. Before that, though, they\ntypically need to load up any necessary files. We can see this in\n\u003ccode\u003ebin/run\u003c/code\u003e. In the first lines of recognizable Ruby code, we require\nboth our local files located in \u003ccode\u003elib\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative '../lib/garden.rb'\u003cbr\u003erequire_relative '../lib/plant.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith \u003ccode\u003eGarden\u003c/code\u003e and \u003ccode\u003ePlant\u003c/code\u003e loaded, we can proceed to run our very simple\napplication - relating a few \u003ccode\u003ePlant\u003c/code\u003e instances to a \u003ccode\u003eGarden\u003c/code\u003e instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elawn = Garden.new(name: 'Front Lawn')\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil')\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn\u003cbr\u003e\u003cbr\u003ep lawn.plants\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this particular example, the run file does a few different things to show how\nthe setup works. Commonly, though, run files can have very little in them. A run\nfile may load up the necessary support files, then just call a class to handle\nthe logic of running the actual application.\u003c/p\u003e\n\n\u003ch2\u003eUsing an Environment File\u003c/h2\u003e\n\n\u003cp\u003eWhenever we run our simple application, we load the two files in \u003ccode\u003elib\u003c/code\u003e. If we\nwanted to add a third class in a new file, once created, we'd have to add a\n\u003cem\u003ethird\u003c/em\u003e \u003ccode\u003erequire_relative\u003c/code\u003e for it in the run file. Seems easy enough so far.\u003c/p\u003e\n\n\u003cp\u003eWith more complex applications, there may be multiple places where we need to\nload the same application files. For example, if we added tests to this\napplication, we would load files like \u003ccode\u003elib/garden.rb\u003c/code\u003e and \u003ccode\u003elib/plant.rb\u003c/code\u003e into\nour test files. That means we would need a \u003cem\u003esecond set\u003c/em\u003e of \u003ccode\u003erequire_relative\u003c/code\u003e\nstatements somewhere in the tests. Now, it isn't \u003cem\u003eterribly\u003c/em\u003e difficult to\nmaintain two sets of the same code, but why should we repeat ourselves? Better\nif we can avoid doing that.\u003c/p\u003e\n\n\u003cp\u003eThe common solution to this is to create one file that has all the\n\u003ccode\u003erequire_relative\u003c/code\u003e statements. Then, in the run file, we just require \u003cem\u003ethat\u003c/em\u003e\nfile. If we had tests, we could also \u003cem\u003ejust require that file\u003c/em\u003e. If we add more\nclasses, we only need to modify a single file, and any place in our application\nrequiring that file will automatically receive the updates!\u003c/p\u003e\n\n\u003cp\u003eIn Ruby frameworks like Rails, this file is called \u003ccode\u003eenvironment.rb\u003c/code\u003e and is\nlocated in the \u003ccode\u003econfig\u003c/code\u003e folder. We'll follow this convention - a file with this\nname already exists, all we need to do is copy the \u003ccode\u003erequire_relative\u003c/code\u003e statements\nfrom \u003ccode\u003ebin/run\u003c/code\u003e to \u003ccode\u003econfig/environment.rb\u003c/code\u003e, then replace them,\nrequiring \u003ccode\u003econfig/environment.rb\u003c/code\u003e in our run file.\u003c/p\u003e\n\n\u003cp\u003eFor \u003ccode\u003econfig/environment.rb\u003c/code\u003e, that would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire_relative '../lib/garden.rb'\u003cbr\u003erequire_relative '../lib/plant.rb'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd for \u003ccode\u003ebin/run\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#!/usr/bin/env ruby\u003cbr\u003e\u003cbr\u003erequire_relative '../config/environment.rb'\u003cbr\u003e\u003cbr\u003elawn = Garden.new(name: 'Front Lawn')\u003cbr\u003e\u003cbr\u003ebasil = Plant.new(name: 'Basil')\u003cbr\u003ebasil.garden = lawn\u003cbr\u003e\u003cbr\u003ecucumber = Plant.new(name: 'Cucumber')\u003cbr\u003ecucumber.garden = lawn\u003cbr\u003e\u003cbr\u003ep lawn.plants\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn addition to requiring all necessary files, \u003ccode\u003econfig/environment.rb\u003c/code\u003e is also a\ncommon place for configuring application settings. This is an ideal location,\nfor instance, for configuring access to a database that an application can use.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo recap, in this lesson, we looked at two components commonly found in Ruby\napplications. The first is the run file, something that acts as the starting\npoint of the application. The second is the \u003ccode\u003eenvironment.rb\u003c/code\u003e file. Typically loaded\nwhen an application is started or tests are run, this file loads any required\napplication files and handles any configuration that has to happen every time\nthe application starts.\u003c/p\u003e\n\n\u003cp\u003eCombining the two, we have a multi-file application that is starting to show\nsome complexity! With our set up, we can add whatever files we want to \u003ccode\u003elib\u003c/code\u003e,\nrequire those files in \u003ccode\u003econfig/environment.rb\u003c/code\u003e, and they will be loaded every\ntime we run \u003ccode\u003ebin/run\u003c/code\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g166f287c96138ca3d4f30bca9c3ff24b","title":"Speaking Grandma - Control Flow Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"speaking-grandma\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/speaking-grandma/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/speaking-grandma\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/speaking-grandma/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eControl flow by using \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements.\u003c/li\u003e\n\u003cli\u003eManipulate strings correctly.\u003c/li\u003e\n\u003cli\u003eEvaluate the type case of a string.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eFork and clone this lab.\u003c/li\u003e\n\u003cli\u003eRun the test suite using either the \u003ccode\u003erspec\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e command. You'll be coding your solution in \u003ccode\u003egrandma.rb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWrite a \u003ccode\u003espeak_to_grandma\u003c/code\u003e method. \n\n\u003cul\u003e\n\u003cli\u003eThe method should take in a string argument containing a phrase and check to see if the phrase is written in all uppercase: if it isn't, then grandma can't hear you. She should then respond with (return) \u003ccode\u003eHUH?! SPEAK UP, SONNY!\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIf you shout at her (i.e. call the method with a string argument containing a phrase that \u003cem\u003eis\u003c/em\u003e all uppercase, then she \u003cem\u003ecan\u003c/em\u003e hear you (or at least she thinks that she can) and should respond with (return) \u003ccode\u003eNO, NOT SINCE 1938!\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eHowever, if the phrase is \u003cem\u003eexactly\u003c/em\u003e equal to: \u003ccode\u003e\"I LOVE YOU GRANDMA!\"\u003c/code\u003e, then Grandma is very pleased and definitely hears that! and should repond with (return) \u003ccode\u003eI LOVE YOU TOO PUMPKIN!\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eA few things to think about:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou'll need to use \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelsif\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e statements to implement the logic of grandma responding with the appropriate string based on whether or not you speak to her in all uppercase, and/or whether you express your love. \u003c/li\u003e\n\u003cli\u003eThink about how we can check to see if a string is all uppercase. Reference the information below on manipulating strings. \u003c/li\u003e\n\u003cli\u003eThink about the response as a return value.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eManipulating Strings\u003c/h2\u003e\n\n\u003cp\u003eOne of the things you'll need to determine is if the argument that the \u003ccode\u003espeak_to_grandma\u003c/code\u003e method takes in is formatted a certain way (all uppercase).\u003c/p\u003e\n\n\u003cp\u003eThere are many methods on the \u003ca href=\"http://www.ruby-doc.org/core-2.1.4/String.html\"\u003eString class\u003c/a\u003e that manipulate strings. Let's take a look at a few:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"Hello World\".upcase\u003cbr\u003e#=\u0026gt; \"HELLO WORLD\"\u003cbr\u003e\"Hello World\".reverse\u003cbr\u003e#=\u0026gt; \"dlroW olleH\" \u003cbr\u003e\"Hello World\".downcase\u003cbr\u003e#=\u0026gt; \"hello world\" \u003cbr\u003e\"Hello World\".capitalize\u003cbr\u003e#=\u0026gt; \"Hello world\" \u003cbr\u003e\"Hello World\".swapcase\u003cbr\u003e#=\u0026gt; \"hELLO wORLD\" \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich one can we use to check that the argument string (i.e. what you're saying to Grandma) is all uppercase? You can use the comparison operator (\u003ccode\u003e==\u003c/code\u003e) to determine if the string you pass into your method call as an argument \u003cem\u003ematches\u003c/em\u003e (\"is equal to\") that same string, but in uppercase form.\u003c/p\u003e\n\n\u003cp\u003eOn that same note, we can also use the comparison operator to check and see if the string matches \u003ccode\u003e\"I LOVE YOU GRANDMA!\"\u003c/code\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g82b86e1fd785ecf53923f964f046f984","title":"SQL Crowdfunding Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"sql-table-relations-crowdfunding-join-table-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-crowdfunding-join-table-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-crowdfunding-join-table-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/sql-table-relations-crowdfunding-join-table-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify table example\u003cbr\u003e\n\u003c/li\u003e\n\u003cli\u003eCreate a new table, records, and queries\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIdentify Table Example\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eSQL\u003c/code\u003e is a programming language that allows you to \"nest\" statements inside each\nother. Let's quickly consider an example using grocery data.\u003c/p\u003e\n\n\u003ch3\u003eCreate a Grocery Table\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE groceries (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, aisle INTEGER);\u003cbr\u003e\u003cbr\u003eINSERT INTO groceries VALUES (1, \"Apples\", 2, 1);\u003cbr\u003eINSERT INTO groceries VALUES (2, \"Oranges\", 4, 2);\u003cbr\u003eINSERT INTO groceries VALUES(3, \"Peaches\", 6, 3);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eSelecting Data from the Grocery Table\u003c/h3\u003e\n\n\u003cp\u003eGiven the example SQL above, we'd be able to run a query like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM groceries;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd get back the inserted data (represented in a table below)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eid                 name        quantity      aisle\u003cbr\u003e------------    ----------  ----------  ----------  \u003cbr\u003e1                Apples          2          1\u003cbr\u003e2                Oranges         4          2\u003cbr\u003e3                Peaches         6          3\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003e\u003ccode\u003eSUM\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003eSUM\u003c/code\u003e will return the total of the column you select. In this case, the total\nnumber of items in the \u003ccode\u003egroceries\u003c/code\u003e column is 12.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT SUM(quantity) FROM groceries;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eReturns\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eSUM(quantity)\u003cbr\u003e-------------\u003cbr\u003e12\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo make it a little more useful we can \u003ccode\u003eGROUP BY\u003c/code\u003e the aisle that the items are\nin and \u003ccode\u003eORDER BY\u003c/code\u003e the sum of the \u003ccode\u003eaisle\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT aisle, SUM(quantity) FROM groceries GROUP BY aisle ORDER BY SUM(quantity);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eReturns\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eaisle    SUM(quantity)\u003cbr\u003e-------  --------------\u003cbr\u003e1           2\u003cbr\u003e2           4\u003cbr\u003e3           6\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you have two tasks - first, you will need to create three tables in\n\u003ccode\u003elib/create.sql\u003c/code\u003e, and populate them with data in \u003ccode\u003elib/insert.sql\u003c/code\u003e. Then, you\nwill need to write the necessary SQL statements inside the methods in\n\u003ccode\u003elib/sql_queries.rb\u003c/code\u003e that would allow you to query data from your newly created\ntables.\u003c/p\u003e\n\n\u003ch2\u003eCreate New Table, Records and Queries\u003c/h2\u003e\n\n\u003cp\u003eNow we're going to create a schema based on the following information:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA project has a title, a category, a funding goal, a start date, and an end date.\u003c/li\u003e\n\u003cli\u003eA user has a name and an age\u003c/li\u003e\n\u003cli\u003eA pledge has an amount. It belongs to a user, and it also belongs to a project.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eCreate the Tables\u003c/h3\u003e\n\n\u003cp\u003eIn the \u003ccode\u003ecreate.sql\u003c/code\u003e file, model your tables. You should have a table for\nprojects, users, and pledges.\u003c/p\u003e\n\n\u003ch3\u003eInsert Records into Database\u003c/h3\u003e\n\n\u003cp\u003eWithin the \u003ccode\u003einsert.sql\u003c/code\u003e file, insert 10 projects, 20 users, and 30 pledges into the database.\u003c/p\u003e\n\n\u003ch3\u003eWrite the Queries\u003c/h3\u003e\n\n\u003cp\u003eWrite SQL queries as strings in \u003ccode\u003elib/sql_queries\u003c/code\u003e in each of the provided methods.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e as you go and read the test messages for additional guidance.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://blog.seldomatt.com/\"\u003eSeldom Blog\u003c/a\u003e - \u003ca href=\"http://blog.seldomatt.com/blog/2012/10/17/about-sql-joins-the-3-ring-binder-model/\"\u003eAbout SQL Joins: The 3 Ring Binder Model\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://blog.codinghorror.com/\"\u003eCoding Horror\u003c/a\u003e - \u003ca href=\"http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/\"\u003eA Visual Explanation of SQL Joins\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://geekyisawesome.blogspot.com/\"\u003eGeeky is Awesome\u003c/a\u003e - \u003ca href=\"http://geekyisawesome.blogspot.com/2011/03/sql-joins-tutorial.html\"\u003eSQL Joins Tutorial\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6eef5ee91d7628b5922c0004880bc9c2","title":"Square Array Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"square_array\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/square_array/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/square_array\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/square_array/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice iterating over an array using the \u003ccode\u003e.each\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003ePractice operating on each element of an array.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou will build a method, \u003ccode\u003esquare_array\u003c/code\u003e, that squares each element in an array of numbers and returns a new array of these squared numbers. Use an iterator and implement your own logic, \u003cem\u003edon't\u003c/em\u003e use any built-in array methods other than \u003ccode\u003e.each\u003c/code\u003e (e.g. \u003ccode\u003e.collect\u003c/code\u003e, \u003ccode\u003e.inject\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eA couple of questions that you can ask yourself are: \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhat is the return value of calling \u003ccode\u003e.each\u003c/code\u003e on an array?\u003c/li\u003e\n\u003cli\u003eHow can I operate on each element of an array and also collect or store those elements?\u003c/li\u003e\n\u003cli\u003eHow can I square a number? \u003cstrong\u003eHint:\u003c/strong\u003e There is more than one way to do it! You can use the exponent operator (Google Ruby's exponent operator to learn how it works) or you can use simple math. Refer back to the earlier lesson on math if you need a refresher.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eAdvanced\u003c/h2\u003e\n\n\u003cp\u003eOnce you have the tests passing, see if you can implement this with a higher level iterator such as \u003ccode\u003e.collect\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eExpectation Examples\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003enumbers = [1,2,3]\u003cbr\u003e\u003cbr\u003esquare_array(numbers)\u003cbr\u003e# =\u0026gt; [1,4,9])\u003cbr\u003e\u003cbr\u003enew_numbers = [9,10,16,25]\u003cbr\u003e\u003cbr\u003esquare_array(new_numbers)\u003cbr\u003e# =\u0026gt; [81,100,256,625]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://www.ruby-doc.org/core-2.1.2/\"\u003eRuby Docs\u003c/a\u003e - \u003ca href=\"https://ruby-doc.org/core-2.6.3/Array.html#method-i-each\"\u003eEach Method\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga4c59e062cab55ae71c495f5d1fb5039","title":"Super Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-oo-inheritance-super-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-oo-inheritance-super-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDefine two classes, one of which inherits from another. \u003c/li\u003e\n\u003cli\u003eDefine methods in the child class that use the \u003ccode\u003esuper\u003c/code\u003e keyword to inherit from and augment methods in the parent class. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you'll be coding a \u003ccode\u003eStudent\u003c/code\u003e class, which will be the parent class, and a \u003ccode\u003eChattyStudent\u003c/code\u003e class, which will inherit from student. \u003ccode\u003eChattyStudent\u003c/code\u003e \u003cem\u003eis\u003c/em\u003e a student, so should have all of the behaviors and characteristics of a student. But, \u003ccode\u003eChattyStudent\u003c/code\u003e is \u003cem\u003every chatty\u003c/em\u003e. So, he or she will elaborate on any phrases that are inherited from \u003ccode\u003eStudent\u003c/code\u003e. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eStudent\u003c/code\u003e class, \u003ccode\u003e#hello\u003c/code\u003e, that \u003ccode\u003eputs\u003c/code\u003e out the phrase: \u003ccode\u003e\"Hey there! I'm so excited to learn stuff.\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eStudent\u003c/code\u003e class, \u003ccode\u003eraise_hand\u003c/code\u003e, that \u003ccode\u003eputs\u003c/code\u003e out the phrase: \u003ccode\u003e\"Pick me!\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eChattyStudent\u003c/code\u003e class, \u003ccode\u003e#hello\u003c/code\u003e, that uses the \u003ccode\u003esuper\u003c/code\u003e keyword to inherit the behavior of the \u003ccode\u003e#hello\u003c/code\u003e method from the parent, \u003ccode\u003eStudent\u003c/code\u003e, class. Then, augment that method to also \u003ccode\u003eputs\u003c/code\u003e out the very chatty phrase: \u003ccode\u003e\"How are you doing today? I'm okay, but I'm kind of tired. Did you watch The Walking Dead last night? You didn't?! Oh man, it was so crazy! What, you don't want any spoilers? Okay well let me just tell you who died...\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite a method in the \u003ccode\u003eChattyStudent\u003c/code\u003e class, \u003ccode\u003eraise_hand\u003c/code\u003e, that uses the \u003ccode\u003esuper\u003c/code\u003e keyword ten times so that the method will \u003ccode\u003eputs\u003c/code\u003e out \u003ccode\u003e\"Pick me!\"\u003c/code\u003e ten times. \u003cstrong\u003eIt is possible to simply call \u003ccode\u003esuper\u003c/code\u003e multiple times in a method\u003c/strong\u003e. \u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5e66a38de4fdc11b021b20ee4390a2c5","title":"ToDo App Rack React","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ToDo-app-rack-React\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ToDo-app-rack-React/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ToDo-app-rack-React\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ToDo-app-rack-React/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eGo to \u003ccode\u003efront-end\u003c/code\u003e folder and run:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003ccode\u003enpm i\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003ejson-server --watch db.json\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003enpm start\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou will able to see demo of the lab. \u003c/p\u003e  \u003ch2\u003eTasks:\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCurrently, tasks are fetched from the \u003ccode\u003ejson\u003c/code\u003e server. Create \u003ccode\u003eRack\u003c/code\u003e server to provide tasks for the \u003ccode\u003ereact\u003c/code\u003e app\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003eshotgun\u003c/code\u003e command to start the \u003ccode\u003erack\u003c/code\u003e server\u003c/li\u003e \u003cli\u003eCreate \u003ccode\u003etasks\u003c/code\u003e and \u003ccode\u003ecategories\u003c/code\u003e tables and some seeds data to it. Migration are already ready for you.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ecategory\u003c/code\u003e has many \u003ccode\u003etasks\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003etask\u003c/code\u003e belongs to \u003ccode\u003ecategory\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003esend \u003ccode\u003ejson\u003c/code\u003e response back from the \u003ccode\u003erack\u003c/code\u003e server  \u003cul\u003e \u003cli\u003eShow all tasks\u003c/li\u003e \u003cli\u003eCreate a new task\u003c/li\u003e \u003cli\u003eDelete a task\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: You can use \u003ccode\u003epostman\u003c/code\u003e to test your backend. You back-end responses might be little bit slow with only rack server but once we start using rails it would be much faster.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6bb21dc1afdf64f615b5099eb7b4e28a","title":"Updating Records Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"orms-updating-records-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/orms-updating-records-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild an \u003ccode\u003e#update\u003c/code\u003e method that updates an existing record. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we will be working with a \u003ccode\u003eStudent\u003c/code\u003e class. Each student has an \u003ccode\u003eid\u003c/code\u003e, a \u003ccode\u003ename\u003c/code\u003e and a \u003ccode\u003egrade\u003c/code\u003e. Students should be initialized with an id that defaults to \u003ccode\u003enil\u003c/code\u003e, a name and a grade. \u003c/p\u003e\n\n\u003cp\u003eIn this lab, our connection to the database is set up for you in the \u003ccode\u003econfig/environment.rb\u003c/code\u003e file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDB = {:conn =\u0026gt; SQLite3::Database.new(\"db/students.db\")}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn your \u003ccode\u003eStudent\u003c/code\u003e class, you can access the database connection via: \u003ccode\u003eDB[:conn]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eYou'll be building the following methods:\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#initialize\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method takes in three arguments, the id, name and grade. The id should default to \u003ccode\u003enil\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create_table\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis class method creates the students table with columns that match the attributes of our individual students: an id (which is the primary key), the name and the grade. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.drop_table\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis class method should be responsible for dropping the students table. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#save\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis instance method inserts a new row into the database using the attributes of the given object. This method \u003cem\u003ealso\u003c/em\u003e assigns the \u003ccode\u003eid\u003c/code\u003e attribute of the object once the row has been inserted into the database. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.create\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method creates a student with two attributes, name and grade, and saves it into the students table.\u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.new_from_db\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis class method takes an argument of an array. When we call this method we will pass it the array that is the row returned from the database by the execution of a SQL query. We can anticipate that this array will contain three elements in this order: the id, name and grade of a student. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.new_from_db\u003c/code\u003e method uses these three array elements to create a new \u003ccode\u003eStudent\u003c/code\u003e object with these attributes. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e.find_by_name\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis class method takes in an argument of a name. It queries the database table for a record that has a name of the name passed in as an argument. Then it uses the \u003ccode\u003e#new_from_db\u003c/code\u003e method to instantiate a \u003ccode\u003eStudent\u003c/code\u003e object with the database row that the SQL query returns. \u003c/p\u003e\n\n\u003ch3\u003eThe \u003ccode\u003e#update\u003c/code\u003e Method\u003c/h3\u003e\n\n\u003cp\u003eThis method updates the database row mapped to the given \u003ccode\u003eStudent\u003c/code\u003e instance. \u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0d37f4bac162ef4f7bd221263038e268","title":"Variable Assignment","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-variable-assignment\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-variable-assignment/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-variable-assignment\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-variable-assignment/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eAssign a local variable.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou will assign a local variable named \u003ccode\u003egreeting\u003c/code\u003e that is equal to \u003ccode\u003e\"Hello World\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou should first make sure the test suite is running correctly by running \u003ccode\u003elearn test\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUpon the first run of the test suite you should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFailures:\u003cbr\u003e\u003cbr\u003e  1) ./variable.rb defined a local variable called greeting and set it equal to 'Hello World'\u003cbr\u003e     Failure/Error: greeting = get_variable_from_file('./variable.rb', \"greeting\")\u003cbr\u003e     NameError:\u003cbr\u003e       local variable `greeting' not defined in ./variable.rb.\u003cbr\u003e     # ./spec/spec_helper.rb:14:in `rescue in get_variable_from_file'\u003cbr\u003e     # ./spec/spec_helper.rb:11:in `get_variable_from_file'\u003cbr\u003e     # ./spec/variable_spec.rb:5:in `block (2 levels) in '\u003cbr\u003e\u003cbr\u003eFinished in 0.00075 seconds (files took 0.0839 seconds to load)\u003cbr\u003e1 example, 1 failure\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo solve this test failure, create a local variable \u003ccode\u003egreeting\u003c/code\u003e in the \u003ccode\u003evariable.rb\u003c/code\u003e file. Set \u003ccode\u003egreeting\u003c/code\u003e equal to the string \u003ccode\u003e\"Hello World\"\u003c/code\u003e. Run \u003ccode\u003elearn test\u003c/code\u003e to see if you did this correctly.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://pine.fm/LearnToProgram/chap_03.html\"\u003eLearn to Program\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://blog.teamtreehouse.com/an-introduction-to-rspec\"\u003eIntroduction to RSpec\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g96becea17d18d9c30ee2b8a88625a13a","title":"While and Until Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"looping-while-until\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/looping-while-until/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-while-until\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/looping-while-until/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild a method that uses \u003ccode\u003ewhile\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild a method that uses \u003ccode\u003euntil\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003ewhile\u003c/code\u003e and \u003ccode\u003euntil\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eIt's our first year at Hogwarts and we're struggling to master the levitation charm, \"Wingardium Leviosa\". Currently, we have a levitation force of \u003ccode\u003e6\u003c/code\u003e. We need to have a levitation force of \u003ccode\u003e10\u003c/code\u003e in order to actually levitate that feather.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll write a while loop that will continue to \u003ccode\u003eputs\u003c/code\u003e the phrase \"Wingardium Leviosa\" while our levitation force is less than \u003ccode\u003e10\u003c/code\u003e. Every time we \u003ccode\u003eputs\u003c/code\u003e that phrase, we should increment our levitation force by \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen, we'll solve this again by using an \u003ccode\u003euntil\u003c/code\u003e loop. It will \u003ccode\u003eputs\u003c/code\u003e the phrase \"Wingardium Leviosa\" until the levitation force is equal to \u003ccode\u003e10\u003c/code\u003e, incrementing the levitation force by \u003ccode\u003e1\u003c/code\u003e each time we \u003ccode\u003eputs\u003c/code\u003e the phrase.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eRun the test suite in this lab to get started.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLet's get the first test passing by coding our solution in \u003ccode\u003ewhile.rb\u003c/code\u003e:\nFill out the content of the \u003ccode\u003eusing_while\u003c/code\u003e method so that calling it will \u003ccode\u003eputs\u003c/code\u003e the desired phrase while your levitation force is less than \u003ccode\u003e10\u003c/code\u003e. Remember, every time you \u003ccode\u003eputs\u003c/code\u003e the phrase, you should increment your levitation force by \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLet's get the second test passing by coding our solution in \u003ccode\u003euntil.rb\u003c/code\u003e:\nFill out the content of the \u003ccode\u003eusing_until\u003c/code\u003e method to \u003ccode\u003eputs\u003c/code\u003e the desired phrase, \"Wingardium Leviosa\", until our levitation force equals \u003ccode\u003e10\u003c/code\u003e. Remember, every time you \u003ccode\u003eputs\u003c/code\u003e the phrase, you should increment your levitation force by \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eHint: If you get stuck an infinite loop when you run your tests or your code, you can abort the test run or code by pressing \u003ccode\u003eCONTROL+C\u003c/code\u003e on your keyboard.\u003c/strong\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g826fcc697ade27aef984e56e2c08ed8e","title":"Working with an Array of Hashes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-nds-nested-hashes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-hashes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-hashes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-nds-nested-hashes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eRecognize vocabulary term: \"array of hashes\" (\"AoH\")\u003c/li\u003e\n\u003cli\u003eRecognize that \"arrays of hashes\" are contact lists or spreadsheets\u003c/li\u003e\n\u003cli\u003eCreate an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees\u003c/li\u003e\n\u003cli\u003eRead scalar data from an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees\u003c/li\u003e\n\u003cli\u003eModify scalar data in an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHaving worked with \u003ccode\u003eArray\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es, you're going to be pleasantly\nsurprised that most of the syntax works exactly the same between \"arrays of\narrays\" to \"arrays of hashes.\"\u003c/p\u003e\n\n\u003ch3\u003eKey Image: Contact List or Spreadsheet\u003c/h3\u003e\n\n\u003cp\u003eTo help you when reading the rest of this lesson, keep in mind that an \u003ccode\u003eArray\u003c/code\u003e of\n\u003ccode\u003eHash\u003c/code\u003ees is well expressed by a contact list (or, if you're old enough, a\nRolodex). Take a card, add some standard fields to it (first name, family name,\nphone number, fax number, email address, etc.) and fill the fields in. Take\nanother card and do the same. Take another card and do the same. Those three\ncards could go in an \u003ccode\u003eArray\u003c/code\u003e, an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees.\u003c/p\u003e\n\n\u003cp\u003eIf you think about a contact list, it's also easy to export it to a spreadsheet\nlike a Google Sheet or an Excel Sheet. You could take the fields on the card\nand make them the columns across the top of the spreadsheet. Then for each\nmember of the contact list you could make a new row for it.\u003c/p\u003e\n\n\u003cp\u003eOftentimes when a business friend who doesn't know how to code asks for\nprogramming help, they'll want to give us data out of a spreadsheet. Our first\nmove is to turn that spreadsheet into an AoH.\u003c/p\u003e\n\n\u003ch3\u003eFrom Hash to Array of Hashes\u003c/h3\u003e\n\n\u003cp\u003eRecall that a \u003ccode\u003eHash\u003c/code\u003e is like a table, but in code form. It is a way for your\nprogram to store pairs of data as elements in a collection.\u003c/p\u003e\n\n\u003cp\u003eWe call names in a \u003ccode\u003eHash\u003c/code\u003e that we use to point to data, \u003cem\u003ekeys\u003c/em\u003e. By providing a\n\u003ccode\u003eHash\u003c/code\u003e name and a \u003cem\u003ekey\u003c/em\u003e, we can uniquely identify a \u003cem\u003evalue\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eMultiple \u003ccode\u003eHash\u003c/code\u003ees inside of an Array would mean you could find the zeroth,\nfirst, second, etc. element of that \u003ccode\u003eArray\u003c/code\u003e and get back a little dictionary.\nYou could then ask that dictionary for the \u003ccode\u003e:family_name\u003c/code\u003e field's content and\nget back \"Smith\" or \"Huang\" or \"Dayal.\"\u003c/p\u003e\n\n\u003ch2\u003eRecognize Vocabulary Term: \"Array of Hashes\"\u003c/h2\u003e\n\n\u003cp\u003eNested \u003ccode\u003eHash\u003c/code\u003ees have been common data structures since at least Alexandrian\nEgypt (the library there famously had books of locations of books). As such,\nthere are lots of words that mean \"Array of Hashes.\" Here's a quick reference.\nYou don't need to memorize these, but if you're trying to model a problem as a\nprogrammer, you might see someone use these words.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eAoH\u003c/strong\u003e: \u003cstrong\u003eA\u003c/strong\u003erray \u003cstrong\u003eo\u003c/strong\u003ef \u003cstrong\u003eH\u003c/strong\u003eashes\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003efield\u003c/strong\u003e: The key / value pair of a Hash e.g. \"the \u003ccode\u003e:family_name\u003c/code\u003e field\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreate an AoH\u003c/h2\u003e\n\n\u003cp\u003eLet's make a simple list of our favorite directors\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Simple Hashes\u003cbr\u003e\u003cbr\u003edirector_1 = {\u003cbr\u003e  name: \"Ida Lupino\",\u003cbr\u003e  favorite_movie: \"The Hitch-Hiker\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edirector_2 = {\u003cbr\u003e  name: \"Orson Welles\",\u003cbr\u003e  favorite_movie: \"Citizen Kane\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edirector_3 = {\u003cbr\u003e  name: \"Andrej Tarkovsky\",\u003cbr\u003e  favorite_movie: \"Solaris\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efilm_fest = [\u003cbr\u003e  director_1,\u003cbr\u003e  director_2,\u003cbr\u003e  director_3,\u003cbr\u003e] # =\u0026gt; [{:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}, {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"}, {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we don't need to use \u003ccode\u003edirector_1\u003c/code\u003e, \u003ccode\u003edirector_2\u003c/code\u003e, \u003ccode\u003edirector_3\u003c/code\u003e, then we don't\nneed to assign them before nesting them in \u003ccode\u003efilm_fest\u003c/code\u003e  We can write a nested\nAoH using literal formatting:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# AoH in one go\u003cbr\u003efilm_fest = [{:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}, {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"}, {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}]\u003cbr\u003e\u003cbr\u003e# Same as above, but using whitespace to make it easier for humans to read\u003cbr\u003e\u003cbr\u003efilm_fest = [\u003cbr\u003e  {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"},\u003cbr\u003e  {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"},\u003cbr\u003e  {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}\u003cbr\u003e]\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince Ruby doesn't care about whitespace, we'd advise you to write an AoH like\nthe second example.\u003c/p\u003e\n\n\u003cp\u003eTake a moment to reflect, can you \"see\" the spreadsheet there in the Array\nliteral? There's more repetition than you'd see in a real spreadsheet, but the\nidea of intersecting coordinates between an order (\u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e) and a\nkey (\u003ccode\u003e:name\u003c/code\u003e or \u003ccode\u003e:favorite_movie\u003c/code\u003e) should feel a little bit like a spreadsheet.\u003c/p\u003e\n\n\u003cp\u003eIt's good to keep those coordinates in mind as we start trying to retrieve\nvalues in this next section!\u003c/p\u003e\n\n\u003ch2\u003eRead Scalar Data From a Nested Hash\u003c/h2\u003e\n\n\u003cp\u003eOne of the defining features of AoHs is that we use coordinates to target\nunique elements as if they were in a grid where one part of the coordinate is a\nnumber and the other is a \u003ccode\u003eHash\u003c/code\u003e key. To read an element from a nested \u003ccode\u003eArray\u003c/code\u003e,\nsimply provide the coordinates.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edirectors = [\u003cbr\u003e  {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"},\u003cbr\u003e  {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"},\u003cbr\u003e  {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003edirectors[0] #=\u0026gt; {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}\u003cbr\u003edirectors[0][:name] #=\u0026gt; \"Ida Lupino\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first set of brackets refers to the \"row\" of \"spreadsheet\" of the AoH.  The\nsecond set of brackets refer to the \u003ccode\u003ekey\u003c/code\u003e used to get a \u003cem\u003evalue\u003c/em\u003e out of the\n\u003ccode\u003eHash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eModify Scalar Data In an Array of Hashes\u003c/h2\u003e\n\n\u003cp\u003eThe same technique of using coordinates applies both to reading and\nmodification. If you can \"target\" an element you can read it or update it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edirectors = [\u003cbr\u003e  {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"},\u003cbr\u003e  {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"},\u003cbr\u003e  {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003edirectors[0] #=\u0026gt; {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}\u003cbr\u003edirectors[0][:name] #=\u0026gt; \"Ida Lupino\"\u003cbr\u003edirectors[0][:name] = \"John Ford\" #=\u0026gt; \"John Ford\" \u003cbr\u003edirectors[0][:favorite_movie] = \"The Grapes of Wrath\" #=\u0026gt; \"The Grapes of Wrath\" \u003cbr\u003edirectors[0] #=\u0026gt; {:name=\u0026gt;\"John Ford\", :favorite_movie=\u0026gt;\"The Grapes of Wrath\" }\u003cbr\u003edirectors #=\u0026gt; =\u0026gt; [{:name=\u0026gt;\"John Ford\", :favorite_movie=\u0026gt;\"The Grapes of Wrath\"}, {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"}, {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can also replace inner \u003ccode\u003eHash\u003c/code\u003ees with new \u003ccode\u003eHash\u003c/code\u003ees:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edirectors = [\u003cbr\u003e  {:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"},\u003cbr\u003e  {:name=\u0026gt;\"Orson Welles\", :favorite_movie=\u0026gt;\"Citizen Kane\"},\u003cbr\u003e  {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}\u003cbr\u003e]\u003cbr\u003e\u003cbr\u003edirectors[1] = { name: \"Cecil B. DeMille\", favorite_movie: \"Samson and Delilah\" }\u003cbr\u003edirectors #=\u0026gt; =\u0026gt; [{:name=\u0026gt;\"Ida Lupino\", :favorite_movie=\u0026gt;\"The Hitch-Hiker\"}, {:name=\u0026gt;\"Cecil B. DeMille\", :favorite_movie=\u0026gt;\"Samson and Delilah\"}, {:name=\u0026gt;\"Andrej Tarkovsky\", :favorite_movie=\u0026gt;\"Solaris\"}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations, you've learned to use your second nested data structure: the\n\u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eHash\u003c/code\u003ees. You've seen that you can build them by building \u003ccode\u003eArray\u003c/code\u003es\nfilled with variables that point to \u003ccode\u003eHash\u003c/code\u003ees, or that you can use literal\nnotation to build them out.\u003c/p\u003e\n\n\u003cp\u003eYou've seen that you can use coordinates to look up elements in the AoH as well\nas update those elements. In the lab associated with this material, you'll have\na chance to make sure you've understood the basics.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6e254d5ee67571cf52d56e56e379f093","title":"Working with APIs","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"getting-remote-data-working-with-apis\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-working-with-apis/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-working-with-apis\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/getting-remote-data-working-with-apis/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand why programmers need to work with APIs\u003c/li\u003e\n\u003cli\u003eLearn some of the basic ways in which programmers work with APIs\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eDefine API\u003c/h2\u003e\n\n\u003cp\u003eAn API, or application programming interface, is a manner in which companies and\norganizations, like Twitter or the New York City government, expose their data\nand/or functionality to the public (i.e. talented programmers like yourself) for\nuse. APIs allow us to add important data and functionality to the applications\nwe build. Here's just a few examples of some of the cool things you can do by\nusing APIs:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate an app that allows users to sign up/sign in via\nFacebook/Google/Twitter/Github/etc.\u003c/li\u003e\n\u003cli\u003eUse the NYC Open Data API to get and map data––everything from Health\nDepartment restaurant ratings to public park locations and hours to New York\nCity Public Housing repair issues to noise complaints to public school\nconstruction, you name it!\u003c/li\u003e\n\u003cli\u003eUse the Yelp API to find and deliver popular local spots to your users.\u003c/li\u003e\n\u003cli\u003eUse the Weather Underground API to give your users up-to-date weather alerts.\u003c/li\u003e\n\u003cli\u003eUse the Ticket Master API to inform your users if their favorite musician has\nan upcoming show.\u003c/li\u003e\n\u003cli\u003eSo much more!\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is just a small sample of what working with APIs allows us to do as\ndevelopers. Throughout the course of your programming life, you'll likely be\nexposed to working with many different APIs. You'll even learn how to build your\nown API later on in this course. This reading seeks to introduce the topic,\nemphasize some of the benefits of getting comfortable working with APIs and\noffer a brief intro into some of the common methods of working with APIs.\u003c/p\u003e\n\n\u003ch2\u003eHow to Work with APIs\u003c/h2\u003e\n\n\u003cp\u003eDifferent APIs expose their data and functionalities in different ways. However,\nthere are commonalities among them and there are common approaches that we'll\ndiscuss here. Generally speaking, there are two main uses for APIs––getting data\nand adding functionality (i.e. signing in with Facebook or posting to\nInstagram). We'll be discussing the \"getting data\" part of working with APIs\nhere.\u003c/p\u003e\n\n\u003cp\u003eMany APIs are built on what is referred to as a REST-ful framework. That means\nthat the \"endpoints\", or URLs to which we can send a request for data, follow\ncertain conventions. These URLs should allow you to request information, send\ninformation, update information and delete information. Let's focus on the\n\"getting information\" request.\u003c/p\u003e\n\n\u003ch3\u003eRetrieving Data from an API\u003c/h3\u003e\n\n\u003cp\u003eFor this walk-through, we'll be working with the NYC Open Data API. Let's say\nwe've been hired by the city to create an app that will help parents sign their\nchildren up for after-school activities. To connect parents to after-school\nclubs around the city, we need a data set of such clubs. Luckily for us, the\ncity has collected that information and allows the public to access it via their\nOpen Data API. Let's check out the documentation for their\n\u003ca href=\"https://dev.socrata.com/foundry/data.cityofnewyork.us/szgz-awuh\"\u003eafter-school club data set\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eFinding the API Endpoint\u003c/h4\u003e\n\n\u003cp\u003eTake a few minutes and familiarize yourself with resource linked to above.\nLearning how to read API documentation is an important skill. It's okay if you\ndon't understand everything in the above document. For now, just look it over\nbriefly.\u003c/p\u003e\n\n\u003cp\u003eAs you read through, you'll see that the documentation lists the API endpoint.\n\u003cstrong\u003eEndpoint\u003c/strong\u003e refers to the URL we can submit a request to and that will return\nto us the desired data.\u003c/p\u003e\n\n\u003cp\u003eOpen up a new tab in your browser and paste in the following URL:\n\u003ccode\u003ehttp://data.cityofnewyork.us/resource/uvks-tn5n.json\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe page brings you to is the desired set of data! Notice that the data is laid\nout in what looks like a big array of nested hashes. This is actually a\n\u003ca href=\"http://json.org/\"\u003eJSON\u003c/a\u003e object, which behaves just like a Ruby hash. Working\nwith the JSON data returned to you by requests to an API is one of the reasons\nwhy we spent so much time in previous lessons learning how to manipulate and\noperate on nested hashes.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Once you find the right URL for retrieving your data, test it out\ndirectly in your browser \u003cem\u003ebefore\u003c/em\u003e you try to request the data from inside your\nprogram. If pasting the URL into your browser brings you to the right data, you\ncan move on. This cuts down on debugging time. This way, once you try to request\nthe data from within your program, if it doesn't work, at least you'll know it's\nsomething wrong with your code, as opposed to something wrong with the API.\u003c/p\u003e\n\n\u003ch4\u003eSending a Request to an API from a Program or Application\u003c/h4\u003e\n\n\u003cp\u003eNow that we understand what an API is and have even dealt with a URL that takes\nus to a real API endpoint, let's use that same URL to send a request for data\nfrom a Ruby program. Fork and clone this repo locally.\u003c/p\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003elib/nyc_api.rb\u003c/code\u003e. Let's take a look at the code here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'net/http'\u003cbr\u003erequire 'open-uri'\u003cbr\u003erequire 'json'\u003cbr\u003e\u003cbr\u003eclass GetPrograms\u003cbr\u003e\u003cbr\u003e  URL = \"http://data.cityofnewyork.us/resource/uvks-tn5n.json\"\u003cbr\u003e\u003cbr\u003e  def get_programs\u003cbr\u003e    uri = URI.parse(URL)\u003cbr\u003e    response = Net::HTTP.get_response(uri)\u003cbr\u003e    response.body\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprograms = GetPrograms.new.get_programs\u003cbr\u003eputs programs\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe stored our API endpoint URL in a constant at the top of our class. Then, we\nhave a \u003ccode\u003eget_programs\u003c/code\u003e method that uses the \u003ccode\u003eNET::HTTP\u003c/code\u003e library to send an HTTP\nrequest from our program. \u003ccode\u003eNET::HTTP\u003c/code\u003e is a Ruby library that allows your program\nor application to send HTTP requests. We require it at the top of our file with\nthe \u003ccode\u003erequire\u003c/code\u003e statement.  We also require the URI library which helps Ruby to\nhandle URIs.\u003c/p\u003e\n\n\u003cp\u003eBoth \u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/net/http/rdoc/Net/HTTP.html\"\u003eNET::HTTP\u003c/a\u003e and \u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html\"\u003eURI\u003c/a\u003e are classes built into Ruby.\nCheck out the links at the bottom of this lesson to read more about their usage.\nDon't worry too much about NET::HTTP and URI right now, though. Just focus on\ngetting a basic understanding of and exposure to the tools we can use inside our\napplications to request data from an API.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eA Note on Requirements:\u003c/strong\u003e We can use \u003ccode\u003erequire\u003c/code\u003e statements to include libraries\nof code in our own programs. We can require libraries like \u003ccode\u003eNET::HTTP\u003c/code\u003e, or we\ncan require gems, like Pry.\u003c/p\u003e\n\n\u003cp\u003eNow, in your terminal in the directory of this lab, run \u003ccode\u003eruby lib/nyc_api.rb\u003c/code\u003e. It\nshould output the JSON response from the NYC Open Data API!\u003c/p\u003e\n\n\u003ch3\u003eWorking with API Data\u003c/h3\u003e\n\n\u003cp\u003eNow that we have all of our data back from the API, we need to be able to\ncollect and present it within the context of our app. Since we are basically\npros at manipulating nested hashes, we shouldn't have too much trouble. Let's\nwrite a method, \u003ccode\u003eprogram_school\u003c/code\u003e, that just returns a list of the schools or\norganizations that are running our after school programs.\u003c/p\u003e\n\n\u003cp\u003eCopy and paste the following code into our GetPrograms class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef program_school\u003cbr\u003e# we use the JSON library to parse the API response into nicely formatted JSON\u003cbr\u003e  programs = JSON.parse(self.get_programs)\u003cbr\u003e  programs.collect do |program|\u003cbr\u003e    program[\"agency\"]  \u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt the bottom of the file, comment out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprograms = GetPrograms.new.get_programs\u003cbr\u003eputs programs\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's \u003ccode\u003eputs\u003c/code\u003e out a unique list of the schools. Paste in the following two lines\nright underneath where you commented out the above two lines:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprograms = GetPrograms.new\u003cbr\u003eputs programs.program_school.uniq\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, run the program with \u003ccode\u003eruby lib/nyc_api.rb\u003c/code\u003e in your terminal. You should\nsee something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRockaway Artist Alliance, Inc.\u003cbr\u003eCAMBA  \u003cbr\u003eSports and Arts In Schools Foundation, Inc.\u003cbr\u003eNew York Junior Tennis League\u003cbr\u003eArthur Ashe Institute for Urban Health, Inc\u003cbr\u003eCitizens Advice Bureau, Inc.\u003cbr\u003eUnited Activities Unlimited, Inc.\u003cbr\u003eKips Bay Boys \u0026amp; Girls Club\u003cbr\u003eNational Society For Hebrew Day Schools\u003cbr\u003eSchool Settlement\u003cbr\u003eThe Door - A Center of Alternatives\u003cbr\u003eCommunity Counseling and Mediation\u003cbr\u003eDream Yard Project, Inc.\u003cbr\u003eThe Childrens Aid Society\u003cbr\u003eJust Us, Inc.\u003cbr\u003eBushwick Community Action Association, Inc.\u003cbr\u003eGreater Ridgewood Youth Council, Inc.\u003cbr\u003eBrooklyn Bureau of Community Services\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo far we've used the NET::HTTP and URI to send a request for data to an API\nendpoint, a URL. We've operated on the data that was returned to us, making sure\nit was formatted properly as JSON and iterating over that JSON to retrieve the\nname of the school hosting each after-school program. That was a lot of work! I\nwonder if there is an easier way to work with popular APIs...\u003c/p\u003e\n\n\u003ch3\u003eUsing Gems to Work with APIs\u003c/h3\u003e\n\n\u003cp\u003eMany popular APIs have wrappers, i.e. gems that are code libraries that do a lot\nof the heavy lifting for you. In fact, we'll use a gem to interact with the\nTwitter API in the next lab.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo recap: APIs generally either provide a user with data or added functionality.\nWe can use APIs that serve data to get information for our own applications and\nprojects. To get this data, we need to send a request to the URL of the API and\nknow how to work with the response we receive. Many APIs serve data in JSON\nformat, which needs to be parsed before we can use it. Once parsed, it becomes\na hash we can work with and extract data from.\u003c/p\u003e\n\n\u003cp\u003eIn our example, we were able to retrieve remote information from an API using\nthe built-in Ruby classes \u003ccode\u003eNET::HTTP\u003c/code\u003e and \u003ccode\u003eURI\u003c/code\u003e. By putting this implementation\ninside a class, we can develop highly reuseable code that lets us access all\nsorts of information remotely.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eGetPrograms\u003c/code\u003e class used a hard-coded URL, stored as a class constant, and\nincluded an instance method called \u003ccode\u003eget_programs\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eURL = \"http://data.cityofnewyork.us/resource/uvks-tn5n.json\"\u003cbr\u003e\u003cbr\u003edef get_programs\u003cbr\u003e  uri = URI.parse(URL)\u003cbr\u003e  response = Net::HTTP.get_response(uri)\u003cbr\u003e  response.body\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we could easily adapt this code to be flexible and accept \u003cem\u003eany\u003c/em\u003e URL we pass\nin using an \u003ccode\u003einitialize\u003c/code\u003e method and an instance variable. The \u003ccode\u003eget_programs\u003c/code\u003e\nmethod is really just getting the response body from the requested URL, so we\ncould name this \u003ccode\u003eget_response_body\u003c/code\u003e to be more accurate. We could replace the\ncustom \u003ccode\u003eprogram_school\u003c/code\u003e method with a general \u003ccode\u003eparse_json\u003c/code\u003e method, as well.\nInstead of a specific class, we would instead have a class that retrieves\nJSON from any provided URL!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/net/http/rdoc/Net/HTTP.html\"\u003eNET::HTTP\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html\"\u003eOpen URI\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfa1eb13f7b216ac8b3d3932f3ae83d04","title":"Working with Hashes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"programming-univbasics-4-abstracting-work-with-hashes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-abstracting-work-with-hashes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-abstracting-work-with-hashes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/programming-univbasics-4-abstracting-work-with-hashes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild simple hashes.\u003c/li\u003e\n\u003cli\u003eAccess and modify data stored in a hash.\u003c/li\u003e\n\u003cli\u003eAdd new data to a hash.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe have created hashes, and now we can move on to practicing reading and updating\nthem. Instead of merely requiring you to access and change hash values, we're\ngoing to incorporate methods to add a bit of abstraction.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e Hashes can be read and updated using brackets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2.6.1 :001 \u0026gt; my_favorite_stream = { name: 'lofi hip hop radio', location: 'youtube' }\u003cbr\u003e =\u0026gt; {:name=\u0026gt;\"lofi hip hop radio\", :location=\u0026gt;\"youtube\"}\u003cbr\u003e2.6.1 :002 \u0026gt; my_favorite_stream[:name]\u003cbr\u003e =\u0026gt; \"lofi hip hop radio\"\u003cbr\u003e2.6.1 :003 \u0026gt; my_favorite_stream[:name] = \"lofi hip hop radio - beats to relax/study to\"\u003cbr\u003e =\u0026gt; \"lofi hip hop radio - beats to relax/study to\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eCode your solution in the \u003ccode\u003elib/intro_to_ruby_hashes_lab.rb\u003c/code\u003e file located in the main\ndirectory of this lab.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a method called \u003ccode\u003emy_hash_creator\u003c/code\u003e that takes in two parameters. In\nthis method, create and return a hash with one key/value pair, using the first\nparameter as the \u003cem\u003ekey\u003c/em\u003e, and the second parameter as the \u003cem\u003evalue\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :010 \u0026gt; my_hash_creator(:name, \"George\")\u003cbr\u003e    =\u0026gt; {:name=\u0026gt;\"George\"}\u003cbr\u003e   2.6.1 :011 \u0026gt; my_hash_creator(:id, 5)\u003cbr\u003e    =\u0026gt; {:id=\u0026gt;5}\u003cbr\u003e   2.6.1 :012 \u0026gt; my_hash_creator(\"age\", 39)\u003cbr\u003e    =\u0026gt; {\"age\"=\u0026gt;39}\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eCreate a method called \u003ccode\u003eread_from_hash\u003c/code\u003e that takes in two parameters. The first\nparameter is a hash, the second is a key. Used together, they will either\nproduce a value on that hash corresponding to the key, or \u003ccode\u003enil\u003c/code\u003e by default.\nUse these two parameters in conjunction, returning the result.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :013 \u0026gt; hash_to_read = {location: 'New York City', occupation: 'Student'}\u003cbr\u003e    =\u0026gt; {:location=\u0026gt;\"New York City\", :occupation=\u0026gt;\"Cashier\"}\u003cbr\u003e   2.6.1 :014 \u0026gt; read_from_hash(hash_to_read, :location)\u003cbr\u003e    =\u0026gt; \"New York City\"\u003cbr\u003e   2.6.1 :015 \u0026gt; read_from_hash(hash_to_read, :occupation)\u003cbr\u003e    =\u0026gt; \"Student\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eCreate a method called \u003ccode\u003eupdate_counting_hash\u003c/code\u003e that takes in two parameters.\nSimilar to the last method, the first parameter is a hash, and the second is\na key. This time, instead of reading the value, you will need to change it.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe hash provided will have any number of keys, but all values will be\n   integers. The \u003ccode\u003eupdate_counting_hash\u003c/code\u003e method should do one of two things:\n   increment an existing value based on the provided key parameter, or create a\n   new key/value pair using the provided key, setting the value to \u003ccode\u003e1\u003c/code\u003e. So, for\n   example, if we had the following hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :016 \u0026gt; hash_to_change = { apples: 3 }\u003cbr\u003e    =\u0026gt; {:apples=\u0026gt;3}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e..and a provided key, \u003ccode\u003e:apples\u003c/code\u003e, \u003ccode\u003eupdate_counting_hash\u003c/code\u003e should return an updated hash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :017 \u0026gt; update_counting_hash(hash_to_change, :apples)\u003cbr\u003e    =\u0026gt; {:apples=\u0026gt;4}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, if the hash was given a key that doesn't exist, like \u003ccode\u003e:oranges\u003c/code\u003e, it\n   should return a hash with that new key set to \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   2.6.1 :018 \u0026gt; update_counting_hash(hash_to_change, :oranges)\u003cbr\u003e    =\u0026gt; {:apples=\u0026gt;4, :oranges=\u0026gt;1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTry your best to solve these using \u003ccode\u003elearn\u003c/code\u003e to track your progress. A walkthrough\nis provided below if you get stuck or are curious to learn a bit more.\u003c/p\u003e\n\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\n\u003cp\u003eFor this lab, we're implementing three methods: \u003ccode\u003emy_hash_creator\u003c/code\u003e,\n\u003ccode\u003eread_from_hash\u003c/code\u003e, and \u003ccode\u003eupdate_counting_hash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003emy_hash_creator\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor \u003ccode\u003emy_hash_creator\u003c/code\u003e, we need to create a hash using the two parameters\nprovided. We can do this by creating a hash using its implicit form:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef my_hash_creator(key, value)\u003cbr\u003e  { key =\u0026gt; value }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is possible you might have written something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef my_hash_creator(key, value)\u003cbr\u003e  { key: value }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCan you spot the problem with this code? This is the alternate syntax for\n\u003cem\u003esymbols\u003c/em\u003e. We have a \u003cem\u003eparameter\u003c/em\u003e given the name of \u003ccode\u003ekey\u003c/code\u003e, which could be\nwhatever value is passed into the method when called. The code above just\ncreates a symbol, \u003ccode\u003e:key\u003c/code\u003e as the key, regardless of what the \u003ccode\u003ekey\u003c/code\u003e parameter is\nequal to.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eExtra Reading:\u003c/strong\u003e It may seem silly to have a method that creates a hash this\nway. Can't we just build the hash directly? Yes, absolutely. In this example,\nthe resulting hash is small enough that this method would not be useful in a\nreal-world situation. However, this kind of method becomes useful when we want\nto produce many copies of consistently structured hash. For instance, we\nmight want to create a hash of info for every student in a class with the same\nkeys - \u003ccode\u003e:name\u003c/code\u003e, \u003ccode\u003e:age\u003c/code\u003e, \u003ccode\u003e:birthday\u003c/code\u003e, etc... in this case, we could write a\nmethod where we just need to pass in the student's unique info and the method\ntakes care of structuring the data into a hash for us.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\u003ccode\u003eread_from_hash\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor the \u003ccode\u003eread_from_hash\u003c/code\u003e method, we need to use the two parameters, \u003ccode\u003ehash\u003c/code\u003e and\n\u003ccode\u003ekey\u003c/code\u003e to get a value. Like in the example at the beginning of this lesson, we\ncan use brackets to access a particular value from a hash.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef read_from_hash(hash, key)\u003cbr\u003e  hash[key]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the provided key is not found on the hash, \u003ccode\u003enil\u003c/code\u003e is returned.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eExtra Reading:\u003c/strong\u003e Here again, in this particular case, it would be simpler to\nskip the method and just use the hash and key to access a value. A more\nreal-world example: you're working with a hash of weather data that uses\nCelsius, and want to get temperatures in Fahrenheit - you could write a method\nthat reads a value from a hash and returns its converted value without\nmodifying the original hash.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\u003ccode\u003eupdate_counting_hash\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eupdate_counting_hash\u003c/code\u003e method is a bit more complex than the previous two.\nIt needs to take in a hash and a key. If the key is present in the hash, the\nassociated value should be incremented by one. If the key is not present, it\nshould be added to the hash. The newly updated hash should be returned.\u003c/p\u003e\n\n\u003cp\u003eThat this method will do one of two things suggests we will need to use some\nsort of conditional statement dependent on whether or not the key is present on\nthe hash. We can start by writing that out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  if hash[key]\u003cbr\u003e    # the key is present - increment the existing value\u003cbr\u003e  else\u003cbr\u003e    # the key is not present - add the key and assign it the value of 1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the \u003ccode\u003ekey\u003c/code\u003e is present, regardless of its value, we want to add \u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  if hash[key]\u003cbr\u003e    hash[key] = hash[key] + 1  # Alternatively: hash[key] += 1\u003cbr\u003e  else\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf not present, we assign the key:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  if hash[key]\u003cbr\u003e    hash[key] = hash[key] + 1\u003cbr\u003e  else\u003cbr\u003e    hash[key] = 1\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, we need to return the updated hash. At the moment, the last line of\ncode executed in this method will either be \u003ccode\u003ehash[key] = hash[key] + 1\u003c/code\u003e or\n\u003ccode\u003ehash[key] = 1\u003c/code\u003e, meaning that the method is implicitly returning whatever one of\nthose lines evaluated to. We add one more line at the end to stop this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  if hash[key]\u003cbr\u003e    hash[key] = hash[key] + 1\u003cbr\u003e  else\u003cbr\u003e    hash[key] = 1\u003cbr\u003e  end\u003cbr\u003e  hash\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could also rewrite this with a ternary:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef update_counting_hash(hash, key)\u003cbr\u003e  hash[key] ? hash[key] += 1 : hash[key] = 1\u003cbr\u003e  hash\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEither is a valid solution.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eHashes are an essential data type that we will use frequently. Now that you've\nseen the basics of creating, reading and updating hashes, we can explore\nsome examples of more complicated structures!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://ruby.about.com/od/rubyfeatures/a/hashes.htm\"\u003eWhat is a Hash in Ruby?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/core-2.5.1/Hash.html\"\u003eRuby Documentation on Hashes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g95f085763d43f9ae09f6895e1d20268c","title":"Writing Migrations","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"active-record-writing-migrations-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/active-record-writing-migrations-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-writing-migrations-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/active-record-writing-migrations-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite your own migrations\u003c/li\u003e\n\u003cli\u003eRun a migration to create a table\u003c/li\u003e\n\u003cli\u003eRun a migration to add a column to a table\u003c/li\u003e\n\u003cli\u003eRun a migration to change something in the table\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreating a Table\u003c/h2\u003e\n\n\u003cp\u003eThe first thing we will do is create a table. In\n\u003ccode\u003edb/migrate/01_create_students.rb\u003c/code\u003e, write the code to create a table with\nActive Record. We've created a class for you called \u003ccode\u003eCreateStudents\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDefine a method called \u003ccode\u003echange\u003c/code\u003e and use the Active Record \u003ccode\u003ecreate_table\u003c/code\u003e\nmethod within that method to create the table. The table should have a \u003ccode\u003e:name\u003c/code\u003e\ncolumn with a type \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter you finish defining the \u003ccode\u003echange\u003c/code\u003e method, run the migrations by running\n\u003ccode\u003erake db:migrate\u003c/code\u003e in your terminal.\u003c/p\u003e\n\n\u003ch2\u003eAdding a Column\u003c/h2\u003e\n\n\u003cp\u003eThe next thing we will do is add a couple of columns to the \u003ccode\u003estudents\u003c/code\u003e table we\njust created. To do this, we will create a second migration file. \u003cem\u003eWe cannot add\nthese columns to the existing file.\u003c/em\u003e Let's call our new file\n\u003ccode\u003e02_add_grade_and_birthdate_to_students.rb\u003c/code\u003e. It should live in \u003ccode\u003edb/migrate\u003c/code\u003e just\nlike the first migration.\u003c/p\u003e\n\n\u003cp\u003eThis new migration will look similar to the previous one. We will need a class\nthat inherits from \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e, and we will need to define a\nchange method. Sticking to conventions, name the class\n\u003ccode\u003eAddGradeAndBirthdateToStudents\u003c/code\u003e, since that is what we're doing (and that is\nthe camel case version of the \u003cem\u003efilename\u003c/em\u003e, minus the numbers in front). Inside\n\u003ccode\u003e#change\u003c/code\u003e, instead of \u003ccode\u003ecreate_table\u003c/code\u003e, we will use the \u003ccode\u003eadd_column\u003c/code\u003e Active Record\nmethod.\u003c/p\u003e\n\n\u003cp\u003eLet's add a \u003ccode\u003e:grade\u003c/code\u003e column and a \u003ccode\u003e:birthdate\u003c/code\u003e column. The \u003ccode\u003e:grade\u003c/code\u003e column type\nshould be \u003ccode\u003einteger\u003c/code\u003e and the \u003ccode\u003e:birthdate\u003c/code\u003e column type should be \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eChanging a Column\u003c/h2\u003e\n\n\u003cp\u003eImagine you're creating an incredible web app to send out a birthday greeting on\neach student's birthday. While building this, you realize you accidentally\nstored your birthdate data as a \u003ccode\u003estring\u003c/code\u003e. It would be much easier to work with\nif the column type was \u003ccode\u003edatetime\u003c/code\u003e instead. Let's fix that.\u003c/p\u003e\n\n\u003cp\u003eFinally, we will change a column type, \u003ccode\u003estring\u003c/code\u003e to \u003ccode\u003edatetime\u003c/code\u003e. Same as before,\nyou'll have to \u003cem\u003ecreate another migration file\u003c/em\u003e. This time call it\n\u003ccode\u003e03_change_datatype_for_birthdate.rb\u003c/code\u003e. Once again, name the class the same name\nas the file but with capital letters instead of underscores:\n\u003ccode\u003eChangeDatatypeForBirthdate\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis migration will have the same setup as the last. Be sure to use the\n\u003ccode\u003echange_column\u003c/code\u003e method. It takes three necessary arguments:\n\u003ccode\u003echange_column(table_name, column_name, type)\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eActive Record 5.x Migration Syntax\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As of Active Record 5.x, we can no longer inherit directly from\n\u003ccode\u003eActiveRecord::Migration\u003c/code\u003e and must instead specify which version of Active\nRecord / Rails the migration was written for. If we were writing a migration for\nActive Record 5.1, we would inherit from \u003ccode\u003eActiveRecord::Migration[5.1]\u003c/code\u003e. Don't\nworry too much about this until you get to the Rails section. Until then, if you\nencounter an error like this...\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStandardError: Directly inheriting from ActiveRecord::Migration is not supported. Please specify the Rails release the migration was written for:\u003cbr\u003e\u003cbr\u003e  class CreateDogs \u0026lt; ActiveRecord::Migration[5.2]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...simply add \u003ccode\u003e[5.2]\u003c/code\u003e to the end of \u003ccode\u003eActiveRecord::Migration\u003c/code\u003e, exactly as the\nerror message instructs.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[{"exportId":"g58637643c868b02be174ab5d175f5c62","title":"Discussion: Object Orientation In Ruby","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-object-orientation-in-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-object-orientation-in-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-object-orientation-in-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eTake 30 minutes and answer the following questions together with your group. Take turns playing around with the code provided in Pry or IRB.\u003c/p\u003e\n\u003ch2\u003eQuestions\u003c/h2\u003e\n\u003cp\u003e1 . If the \u003ccode\u003eAnimal\u003c/code\u003e class is defined like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Animal\u003cbr\u003e\u003cbr\u003e  def species\u003cbr\u003e    \"cat\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow would you:\u003c/p\u003e\n\u003col type=\"a\"\u003e\n\u003cli\u003eMake a new instance of Animal?\u003c/li\u003e\n\u003cli\u003eputs out to the terminal, the species of that new Animal instance?\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e2 . Although we all know that cats are the best species, not all animals are cats (unfortunately). How could you change the \u003ccode\u003eAnimal\u003c/code\u003e class so that an instance of \u003ccode\u003eanimal\u003c/code\u003e can have its species set to any species at all?\u003c/p\u003e\n\u003cp\u003e3 . We have the following class, and the following two instances of that class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Animal\u003cbr\u003e\u003cbr\u003e  def species\u003cbr\u003e    \"cat\"\u003cbr\u003e  end\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003emaru = Animal.new\u003cbr\u003ehanna = Animal.new \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGiven the above, what will the following return? Why?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emaru == hanna \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e4 . Given the following class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Animal\u003cbr\u003e\u003cbr\u003e  def species \u003cbr\u003e    my_species = \"cat\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def say_species\u003cbr\u003e    puts \"Hi! I'm a #{my_species}\"\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat will happen when we invoke the following code?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emaru = Animal.new\u003cbr\u003emaru.say_species \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIs it broken? Why? How can you fix it?\u003c/p\u003e\n\u003cp\u003e5 . Reverse engineer this code (i.e., write the class that will make the code work as invoked below):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efrederick = Animal.new(\"bull\")\u003cbr\u003efrederick.species\u003cbr\u003e# =\u0026gt; \"bull\" \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e How can you instantiate, or \u003cem\u003einitialize\u003c/em\u003e, an instance of a class with a given value? What kind of variable would you use so that that value can be shared across instance methods within a class?\u003c/p\u003e\n\u003cp\u003e6 . Given the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Animal\u003cbr\u003e\u003cbr\u003e  def initialize(species)\u003cbr\u003e    @species = species\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003elil_bub = Animal.new(\"cat\") \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat is the relationship between \u003ccode\u003elil_bub\u003c/code\u003e and the \u003ccode\u003eAnimal\u003c/code\u003e class?\u003c/p\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"gb03ecdba5948938d5d9bb54afbfb2690","title":"Discussion: Collections and Classes","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-collections-and-classes\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-collections-and-classes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-collections-and-classes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eAs a group, go through each of the question files. Pick one member of the group to display the code on your table's monitor. Your group's goal is to code out, or write down, the answer to each question asked. Take turns answering each question and try to talk through your thought process while solving the problem. Finally, when your group is finished, open a pull request for your answers. Happy Coding!\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eView this repository on Github to see the additional files with the questions\u003c/strong\u003e\u003c/p\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g7a8c34afce04b7169d1a3bd2ad7ad16a","title":"Discussion: Active Record","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-active-record\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-active-record\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-active-record/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003ePart One - Reading the Documentation\u003c/h2\u003e  \u003cp\u003eLooking at Documentation is an important part of programming. You don't have to memorize anything, but you should get familiar with the types of information you can find in different docs. For this exercise, using the ActiveRecord documentation \u003ca href=\"http://guides.rubyonrails.org/active_record_querying.html#retrieving-objects-from-the-database\"\u003ehere\u003c/a\u003e, take a look at the following methods:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003ccode\u003efind\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.find_by\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.where\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.all\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.first\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e.destroy\u003c/code\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWith your table mates and answer the following questions about each methods\u003c/p\u003e  \u003col\u003e \u003cli\u003eWhat argument or arguments does the method take?\u003c/li\u003e \u003cli\u003eWhat type of object does the method return?\u003c/li\u003e \u003cli\u003eWhat happens if none of the parameters match? (i.e. what if \u003ccode\u003eTweet.find(5)\u003c/code\u003e can't find that tweet? How about \u003ccode\u003eTweet.find_by(id: 6)\u003c/code\u003e? \u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003ePart Two - Name that SQL!\u003c/h2\u003e  \u003cp\u003ePretend that you have a \u003ccode\u003etweets\u003c/code\u003e table with two columns - \u003ccode\u003emessage\u003c/code\u003e and \u003ccode\u003euser_id\u003c/code\u003e. Given the code below, write in a notebook or on a whiteboard what SQL statements will fire when the following methods are called? \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Tweet \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003e\n\u003ccode\u003eTweet.all\u003c/code\u003e \u003c/li\u003e \u003cli\u003e\u003ccode\u003eTweet.find(5)\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eTweet.find_by(user_id: 7)\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eTweet.where(user_id: 7)\u003c/code\u003e \u003c/li\u003e \u003cli\u003e\u003ccode\u003eTweet.create(user_id: 5, message: 'making some coffee')\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eTweet.destroy(7)\u003c/code\u003e \u003c/li\u003e \u003c/ol\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g19f03f264693c862946d84906ab3cc96","title":"Discussion: Ruby Fundamentals Review","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-ruby-fundamentals-review\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-ruby-fundamentals-review\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-ruby-fundamentals-review/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eTake 30 minutes and answer the following questions together with your group. Take turns playing around with the code provided in Pry or IRB.\u003c/p\u003e  \u003ch2\u003eQuestions\u003c/h2\u003e  \u003cp\u003e1 . What does the below method return?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef greet(name)\u003cbr\u003e  puts \"Hello, #{name}\"\u003cbr\u003eend\u003cbr\u003egreet(\"Steven\") #=\u0026gt; ? \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e2 . What does this method return?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef love_this_veggie?(vegetable)\u003cbr\u003e  if vegetable == \"broccoli\"\u003cbr\u003e    \"Nah, thanks\"\u003cbr\u003e  else\u003cbr\u003e    \"I love it!\"\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e3 . How would you select all of the words that start with the letter \"a\" from the below array?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e[\"apple\", \"pear\", \"face\", \"champagne\", \"palm tree\", \"aardvark\", \"pineapple\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e4 . Write a method that takes in an argument of a sentence and returns the number of words in the sentence\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eword_count(\"Hi, isn't this a great and interesting sentence??\")\u003cbr\u003e # =\u0026gt; 8 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e5 . What will the following method return?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef friendly_greeting(name=nil)\u003cbr\u003e name ||= \"friend\"\u003cbr\u003e puts \"Hey there, #{name}\"\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e6 . What will the following \u003ccode\u003eputs\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebest_animal = \"cat\"\u003cbr\u003efavorite_animal = best_animal\u003cbr\u003eputs favorite_animal\u003cbr\u003e# =\u0026gt; ? \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e7 . What will the following \u003ccode\u003eputs\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef my_favorite_animal\u003cbr\u003e  \"cat\"\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ebest_animal = my_favorite_animal\u003cbr\u003e\u003cbr\u003eputs best_animal \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e8 . What error, if any, will the following code raise?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"Blink\" + 182 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e9 . How would you \u003ccode\u003eputs\u003c/code\u003e out any and all foods that are delicious?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efoods = {\"pie\" =\u0026gt; \"delicious\", \"broccoli\" =\u0026gt; \"not delicious\",\u003cbr\u003e\"carrots\" =\u0026gt; \"not delicious\", \"apples\" =\u0026gt; \"delicious\",\u003cbr\u003e\"peanut butter\" =\u0026gt; \"delicious\"} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e10 . Delete all elements of the \u003ccode\u003efoods\u003c/code\u003e hash that are \u003cem\u003enot\u003c/em\u003e delicious.\u003c/p\u003e  \u003cp\u003e11 . What is the return value of this method? ```ruby   character_names = [\"Daenerys Targaryen\", \"Jon Snow\" ,\"Arya Stark\", \"Tyrion Lannister\", \"Sansa Stark\", \"Cersei Lannister\", \"Margaery Tyrell\"]\u003c/p\u003e  \u003cp\u003edef downcase\u003cem\u003eall(array\u003c/em\u003eof\u003cem\u003estrings)     array\u003c/em\u003eof\u003cem\u003estrings.each do |one\u003c/em\u003estring|       one_string.downcase     end   end ```\u003c/p\u003e  \u003cp\u003e12 . Write a method that \u003ccode\u003eputs\u003c/code\u003e out a random Agent Cooper quote. \u003ccode\u003eruby   cooper = {       \"name\" =\u0026amp;gt; \"Dale Bartholomew Cooper\",       \"co-workers\"=\u0026amp;gt; [\"Diane\", \"Sheriff Harry S. Truman\"],       \"favorite_drink\" =\u0026amp;gt; \"Coffee\",       \"Quotes\" =\u0026amp;gt; [\"Damn fine cup of coffee\", \"Diane...\", \"This must be where pies go when they die\", \"That's what you do in a town where a yellow light still means slow down, not go faster.\", \"Every day, once a day, give yourself a present\", \"I have no idea where this will lead us, but I have a definite feeling it will be a place both wonderful and strange.\"]   } \u003c/code\u003e\u003c/p\u003e ","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g7942030c78f3f86e0032a51725deffd4","title":"Discussion: Class Inheritance in Ruby","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"mod-1-discussion-questions-class-inheritance-in-ruby\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-class-inheritance-in-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/mod-1-discussion-questions-class-inheritance-in-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eThis activity will have you look at some code samples and reason about what's happening. You'll see what the return value of the method call is - your job is to answer, 'why?'\u003c/p\u003e  \u003cp\u003eWork through these problems with the people at your tables!\u003c/p\u003e  \u003cp\u003eFollow the instructions here:  \u003ca href=\"https://github.com/StevenNunez/chicken_Ser\"\u003ehttps://github.com/StevenNunez/chicken_Ser\u003c/a\u003e\u003c/p\u003e ","lockAt":null,"unlockAt":null,"graded":false}],"quizzes":[],"files":null}